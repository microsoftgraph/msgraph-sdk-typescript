/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createTaskProcessingResultFromDiscriminatorValue, type TaskProcessingResult } from '@microsoft/msgraph-sdk/models/identityGovernance/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { MicrosoftGraphIdentityGovernanceResumeRequestBuilderRequestsMetadata, type MicrosoftGraphIdentityGovernanceResumeRequestBuilder } from './microsoftGraphIdentityGovernanceResume/';
// @ts-ignore
import { SubjectRequestBuilderNavigationMetadata, SubjectRequestBuilderRequestsMetadata, type SubjectRequestBuilder } from './subject/';
// @ts-ignore
import { TaskRequestBuilderRequestsMetadata, type TaskRequestBuilder } from './task/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the taskProcessingResults property of the microsoft.graph.identityGovernance.userProcessingResult entity.
 */
export interface TaskProcessingResultItemRequestBuilder extends BaseRequestBuilder<TaskProcessingResultItemRequestBuilder> {
    /**
     * Provides operations to call the resume method.
     */
    get microsoftGraphIdentityGovernanceResume(): MicrosoftGraphIdentityGovernanceResumeRequestBuilder;
    /**
     * Provides operations to manage the subject property of the microsoft.graph.identityGovernance.taskProcessingResult entity.
     */
    get subject(): SubjectRequestBuilder;
    /**
     * Provides operations to manage the task property of the microsoft.graph.identityGovernance.taskProcessingResult entity.
     */
    get task(): TaskRequestBuilder;
    /**
     * The associated individual task execution.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TaskProcessingResult>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<TaskProcessingResultItemRequestBuilderGetQueryParameters> | undefined) : Promise<TaskProcessingResult | undefined>;
    /**
     * The associated individual task execution.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TaskProcessingResultItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * The associated individual task execution.
 */
export interface TaskProcessingResultItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const TaskProcessingResultItemRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/lifecycleWorkflows/workflows/{workflow%2Did}/runs/{run%2Did}/userProcessingResults/{userProcessingResult%2Did}/taskProcessingResults/{taskProcessingResult%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TaskProcessingResultItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TaskProcessingResultItemRequestBuilderNavigationMetadata: Record<Exclude<keyof TaskProcessingResultItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    microsoftGraphIdentityGovernanceResume: {
        requestsMetadata: MicrosoftGraphIdentityGovernanceResumeRequestBuilderRequestsMetadata,
    },
    subject: {
        requestsMetadata: SubjectRequestBuilderRequestsMetadata,
        navigationMetadata: SubjectRequestBuilderNavigationMetadata,
    },
    task: {
        requestsMetadata: TaskRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TaskProcessingResultItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TaskProcessingResultItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTaskProcessingResultFromDiscriminatorValue,
        queryParametersMapper: TaskProcessingResultItemRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
