/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createUserFromDiscriminatorValue, type User } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { MailboxSettingsRequestBuilderRequestsMetadata, type MailboxSettingsRequestBuilder } from './mailboxSettings/';
import { ServiceProvisioningErrorsRequestBuilderNavigationMetadata, ServiceProvisioningErrorsRequestBuilderRequestsMetadata, type ServiceProvisioningErrorsRequestBuilder } from './serviceProvisioningErrors/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the subject property of the microsoft.graph.identityGovernance.taskProcessingResult entity.
 */
export interface SubjectRequestBuilder extends BaseRequestBuilder<SubjectRequestBuilder> {
    /**
     * The mailboxSettings property
     */
    get mailboxSettings(): MailboxSettingsRequestBuilder;
    /**
     * The serviceProvisioningErrors property
     */
    get serviceProvisioningErrors(): ServiceProvisioningErrorsRequestBuilder;
    /**
     * The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<User>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SubjectRequestBuilderGetQueryParameters> | undefined) : Promise<User | undefined>;
    /**
     * The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SubjectRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.
 */
export interface SubjectRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const SubjectRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/lifecycleWorkflows/workflows/{workflow%2Did}/userProcessingResults/{userProcessingResult%2Did}/taskProcessingResults/{taskProcessingResult%2Did}/subject{?%24expand,%24select}";
/**
 * Provides operations to manage the subject property of the microsoft.graph.identityGovernance.taskProcessingResult entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Activities: "activities",
    AgreementAcceptances: "agreementAcceptances",
    AppRoleAssignments: "appRoleAssignments",
    Authentication: "authentication",
    Calendar: "calendar",
    CalendarGroups: "calendarGroups",
    Calendars: "calendars",
    CalendarView: "calendarView",
    Chats: "chats",
    CloudClipboard: "cloudClipboard",
    ContactFolders: "contactFolders",
    Contacts: "contacts",
    CreatedObjects: "createdObjects",
    DeviceManagementTroubleshootingEvents: "deviceManagementTroubleshootingEvents",
    DirectReports: "directReports",
    Drive: "drive",
    Drives: "drives",
    EmployeeExperience: "employeeExperience",
    Events: "events",
    Extensions: "extensions",
    FollowedSites: "followedSites",
    InferenceClassification: "inferenceClassification",
    Insights: "insights",
    JoinedTeams: "joinedTeams",
    LicenseDetails: "licenseDetails",
    MailFolders: "mailFolders",
    ManagedAppRegistrations: "managedAppRegistrations",
    ManagedDevices: "managedDevices",
    Manager: "manager",
    MemberOf: "memberOf",
    Messages: "messages",
    Oauth2PermissionGrants: "oauth2PermissionGrants",
    Onenote: "onenote",
    OnlineMeetings: "onlineMeetings",
    Outlook: "outlook",
    OwnedDevices: "ownedDevices",
    OwnedObjects: "ownedObjects",
    People: "people",
    PermissionGrants: "permissionGrants",
    Photo: "photo",
    Photos: "photos",
    Planner: "planner",
    Presence: "presence",
    RegisteredDevices: "registeredDevices",
    ScopedRoleMemberOf: "scopedRoleMemberOf",
    Settings: "settings",
    Teamwork: "teamwork",
    Todo: "todo",
    TransitiveMemberOf: "transitiveMemberOf",
} as const;
/**
 * Provides operations to manage the subject property of the microsoft.graph.identityGovernance.taskProcessingResult entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    AboutMe: "aboutMe",
    AccountEnabled: "accountEnabled",
    AgeGroup: "ageGroup",
    AssignedLicenses: "assignedLicenses",
    AssignedPlans: "assignedPlans",
    AuthorizationInfo: "authorizationInfo",
    Birthday: "birthday",
    BusinessPhones: "businessPhones",
    City: "city",
    CompanyName: "companyName",
    ConsentProvidedForMinor: "consentProvidedForMinor",
    Country: "country",
    CreatedDateTime: "createdDateTime",
    CreationType: "creationType",
    CustomSecurityAttributes: "customSecurityAttributes",
    Department: "department",
    DeviceEnrollmentLimit: "deviceEnrollmentLimit",
    DisplayName: "displayName",
    EmployeeHireDate: "employeeHireDate",
    EmployeeId: "employeeId",
    EmployeeLeaveDateTime: "employeeLeaveDateTime",
    EmployeeOrgData: "employeeOrgData",
    EmployeeType: "employeeType",
    ExternalUserState: "externalUserState",
    ExternalUserStateChangeDateTime: "externalUserStateChangeDateTime",
    FaxNumber: "faxNumber",
    GivenName: "givenName",
    HireDate: "hireDate",
    Identities: "identities",
    ImAddresses: "imAddresses",
    Interests: "interests",
    IsResourceAccount: "isResourceAccount",
    JobTitle: "jobTitle",
    LastPasswordChangeDateTime: "lastPasswordChangeDateTime",
    LegalAgeGroupClassification: "legalAgeGroupClassification",
    LicenseAssignmentStates: "licenseAssignmentStates",
    Mail: "mail",
    MailboxSettings: "mailboxSettings",
    MailNickname: "mailNickname",
    MobilePhone: "mobilePhone",
    MySite: "mySite",
    OfficeLocation: "officeLocation",
    OnPremisesDistinguishedName: "onPremisesDistinguishedName",
    OnPremisesDomainName: "onPremisesDomainName",
    OnPremisesExtensionAttributes: "onPremisesExtensionAttributes",
    OnPremisesImmutableId: "onPremisesImmutableId",
    OnPremisesLastSyncDateTime: "onPremisesLastSyncDateTime",
    OnPremisesProvisioningErrors: "onPremisesProvisioningErrors",
    OnPremisesSamAccountName: "onPremisesSamAccountName",
    OnPremisesSecurityIdentifier: "onPremisesSecurityIdentifier",
    OnPremisesSyncEnabled: "onPremisesSyncEnabled",
    OnPremisesUserPrincipalName: "onPremisesUserPrincipalName",
    OtherMails: "otherMails",
    PasswordPolicies: "passwordPolicies",
    PasswordProfile: "passwordProfile",
    PastProjects: "pastProjects",
    PostalCode: "postalCode",
    PreferredDataLocation: "preferredDataLocation",
    PreferredLanguage: "preferredLanguage",
    PreferredName: "preferredName",
    Print: "print",
    ProvisionedPlans: "provisionedPlans",
    ProxyAddresses: "proxyAddresses",
    Responsibilities: "responsibilities",
    Schools: "schools",
    SecurityIdentifier: "securityIdentifier",
    ServiceProvisioningErrors: "serviceProvisioningErrors",
    ShowInAddressList: "showInAddressList",
    SignInActivity: "signInActivity",
    SignInSessionsValidFromDateTime: "signInSessionsValidFromDateTime",
    Skills: "skills",
    State: "state",
    StreetAddress: "streetAddress",
    Surname: "surname",
    UsageLocation: "usageLocation",
    UserPrincipalName: "userPrincipalName",
    UserType: "userType",
    Activities: "activities",
    AgreementAcceptances: "agreementAcceptances",
    AppRoleAssignments: "appRoleAssignments",
    Authentication: "authentication",
    Calendar: "calendar",
    CalendarGroups: "calendarGroups",
    Calendars: "calendars",
    CalendarView: "calendarView",
    Chats: "chats",
    CloudClipboard: "cloudClipboard",
    ContactFolders: "contactFolders",
    Contacts: "contacts",
    CreatedObjects: "createdObjects",
    DeviceManagementTroubleshootingEvents: "deviceManagementTroubleshootingEvents",
    DirectReports: "directReports",
    Drive: "drive",
    Drives: "drives",
    EmployeeExperience: "employeeExperience",
    Events: "events",
    Extensions: "extensions",
    FollowedSites: "followedSites",
    InferenceClassification: "inferenceClassification",
    Insights: "insights",
    JoinedTeams: "joinedTeams",
    LicenseDetails: "licenseDetails",
    MailFolders: "mailFolders",
    ManagedAppRegistrations: "managedAppRegistrations",
    ManagedDevices: "managedDevices",
    Manager: "manager",
    MemberOf: "memberOf",
    Messages: "messages",
    Oauth2PermissionGrants: "oauth2PermissionGrants",
    Onenote: "onenote",
    OnlineMeetings: "onlineMeetings",
    Outlook: "outlook",
    OwnedDevices: "ownedDevices",
    OwnedObjects: "ownedObjects",
    People: "people",
    PermissionGrants: "permissionGrants",
    Photo: "photo",
    Photos: "photos",
    Planner: "planner",
    Presence: "presence",
    RegisteredDevices: "registeredDevices",
    ScopedRoleMemberOf: "scopedRoleMemberOf",
    Settings: "settings",
    Teamwork: "teamwork",
    Todo: "todo",
    TransitiveMemberOf: "transitiveMemberOf",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SubjectRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SubjectRequestBuilderNavigationMetadata: Record<Exclude<keyof SubjectRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    mailboxSettings: {
        requestsMetadata: MailboxSettingsRequestBuilderRequestsMetadata,
    },
    serviceProvisioningErrors: {
        requestsMetadata: ServiceProvisioningErrorsRequestBuilderRequestsMetadata,
        navigationMetadata: ServiceProvisioningErrorsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SubjectRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SubjectRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUserFromDiscriminatorValue,
        queryParametersMapper: SubjectRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
