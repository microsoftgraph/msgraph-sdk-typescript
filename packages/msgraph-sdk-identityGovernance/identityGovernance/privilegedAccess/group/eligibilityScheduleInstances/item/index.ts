/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPrivilegedAccessGroupEligibilityScheduleInstanceFromDiscriminatorValue, serializePrivilegedAccessGroupEligibilityScheduleInstance, type PrivilegedAccessGroupEligibilityScheduleInstance } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { GroupRequestBuilderNavigationMetadata, GroupRequestBuilderRequestsMetadata, type GroupRequestBuilder } from './group/';
// @ts-ignore
import { PrincipalRequestBuilderRequestsMetadata, type PrincipalRequestBuilder } from './principal/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the eligibilityScheduleInstances property of the microsoft.graph.privilegedAccessGroup entity.
 */
export interface PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilder extends BaseRequestBuilder<PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilder> {
    /**
     * Provides operations to manage the group property of the microsoft.graph.privilegedAccessGroupEligibilityScheduleInstance entity.
     */
    get group(): GroupRequestBuilder;
    /**
     * Provides operations to manage the principal property of the microsoft.graph.privilegedAccessGroupEligibilityScheduleInstance entity.
     */
    get principal(): PrincipalRequestBuilder;
    /**
     * Delete navigation property eligibilityScheduleInstances for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The instances of eligibility schedules to activate a just-in-time access.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PrivilegedAccessGroupEligibilityScheduleInstance>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilderGetQueryParameters> | undefined) : Promise<PrivilegedAccessGroupEligibilityScheduleInstance | undefined>;
    /**
     * Update the navigation property eligibilityScheduleInstances in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PrivilegedAccessGroupEligibilityScheduleInstance>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: PrivilegedAccessGroupEligibilityScheduleInstance, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PrivilegedAccessGroupEligibilityScheduleInstance | undefined>;
    /**
     * Delete navigation property eligibilityScheduleInstances for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The instances of eligibility schedules to activate a just-in-time access.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property eligibilityScheduleInstances in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PrivilegedAccessGroupEligibilityScheduleInstance, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The instances of eligibility schedules to activate a just-in-time access.
 */
export interface PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances/{privilegedAccessGroupEligibilityScheduleInstance%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilderNavigationMetadata: Record<Exclude<keyof PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    group: {
        requestsMetadata: GroupRequestBuilderRequestsMetadata,
        navigationMetadata: GroupRequestBuilderNavigationMetadata,
    },
    principal: {
        requestsMetadata: PrincipalRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPrivilegedAccessGroupEligibilityScheduleInstanceFromDiscriminatorValue,
        queryParametersMapper: PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PrivilegedAccessGroupEligibilityScheduleInstanceItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPrivilegedAccessGroupEligibilityScheduleInstanceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePrivilegedAccessGroupEligibilityScheduleInstance,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
