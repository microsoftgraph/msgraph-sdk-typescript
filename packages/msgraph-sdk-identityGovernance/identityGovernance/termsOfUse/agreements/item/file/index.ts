/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAgreementFileFromDiscriminatorValue, serializeAgreementFile, type AgreementFile } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { LocalizationsRequestBuilderNavigationMetadata, LocalizationsRequestBuilderRequestsMetadata, type LocalizationsRequestBuilder } from './localizations/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the file property of the microsoft.graph.agreement entity.
 */
export interface FileRequestBuilder extends BaseRequestBuilder<FileRequestBuilder> {
    /**
     * Provides operations to manage the localizations property of the microsoft.graph.agreementFile entity.
     */
    get localizations(): LocalizationsRequestBuilder;
    /**
     * Delete navigation property file for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Default PDF linked to this agreement.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AgreementFile>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<FileRequestBuilderGetQueryParameters> | undefined) : Promise<AgreementFile | undefined>;
    /**
     * Update the navigation property file in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AgreementFile>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: AgreementFile, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AgreementFile | undefined>;
    /**
     * Delete navigation property file for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Default PDF linked to this agreement.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<FileRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property file in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AgreementFile, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Default PDF linked to this agreement.
 */
export interface FileRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const FileRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/termsOfUse/agreements/{agreement%2Did}/file{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const FileRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const FileRequestBuilderNavigationMetadata: Record<Exclude<keyof FileRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    localizations: {
        requestsMetadata: LocalizationsRequestBuilderRequestsMetadata,
        navigationMetadata: LocalizationsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const FileRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: FileRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: FileRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAgreementFileFromDiscriminatorValue,
        queryParametersMapper: FileRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: FileRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAgreementFileFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAgreementFile,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
