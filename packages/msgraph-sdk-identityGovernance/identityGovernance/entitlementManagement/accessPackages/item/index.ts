/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAccessPackageFromDiscriminatorValue, serializeAccessPackage, type AccessPackage } from '@microsoft/msgraph-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { AccessPackagesIncompatibleWithRequestBuilderNavigationMetadata, AccessPackagesIncompatibleWithRequestBuilderRequestsMetadata, type AccessPackagesIncompatibleWithRequestBuilder } from './accessPackagesIncompatibleWith/index.js';
// @ts-ignore
import { AssignmentPoliciesRequestBuilderNavigationMetadata, AssignmentPoliciesRequestBuilderRequestsMetadata, type AssignmentPoliciesRequestBuilder } from './assignmentPolicies/index.js';
// @ts-ignore
import { CatalogRequestBuilderRequestsMetadata, type CatalogRequestBuilder } from './catalog/index.js';
// @ts-ignore
import { GetApplicablePolicyRequirementsRequestBuilderRequestsMetadata, type GetApplicablePolicyRequirementsRequestBuilder } from './getApplicablePolicyRequirements/index.js';
// @ts-ignore
import { IncompatibleAccessPackagesRequestBuilderNavigationMetadata, IncompatibleAccessPackagesRequestBuilderRequestsMetadata, type IncompatibleAccessPackagesRequestBuilder } from './incompatibleAccessPackages/index.js';
// @ts-ignore
import { IncompatibleGroupsRequestBuilderNavigationMetadata, IncompatibleGroupsRequestBuilderRequestsMetadata, type IncompatibleGroupsRequestBuilder } from './incompatibleGroups/index.js';
// @ts-ignore
import { ResourceRoleScopesRequestBuilderNavigationMetadata, ResourceRoleScopesRequestBuilderRequestsMetadata, type ResourceRoleScopesRequestBuilder } from './resourceRoleScopes/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the accessPackages property of the microsoft.graph.entitlementManagement entity.
 */
export interface AccessPackageItemRequestBuilder extends BaseRequestBuilder<AccessPackageItemRequestBuilder> {
    /**
     * Provides operations to manage the accessPackagesIncompatibleWith property of the microsoft.graph.accessPackage entity.
     */
    get accessPackagesIncompatibleWith(): AccessPackagesIncompatibleWithRequestBuilder;
    /**
     * Provides operations to manage the assignmentPolicies property of the microsoft.graph.accessPackage entity.
     */
    get assignmentPolicies(): AssignmentPoliciesRequestBuilder;
    /**
     * Provides operations to manage the catalog property of the microsoft.graph.accessPackage entity.
     */
    get catalog(): CatalogRequestBuilder;
    /**
     * Provides operations to call the getApplicablePolicyRequirements method.
     */
    get getApplicablePolicyRequirements(): GetApplicablePolicyRequirementsRequestBuilder;
    /**
     * Provides operations to manage the incompatibleAccessPackages property of the microsoft.graph.accessPackage entity.
     */
    get incompatibleAccessPackages(): IncompatibleAccessPackagesRequestBuilder;
    /**
     * Provides operations to manage the incompatibleGroups property of the microsoft.graph.accessPackage entity.
     */
    get incompatibleGroups(): IncompatibleGroupsRequestBuilder;
    /**
     * Provides operations to manage the resourceRoleScopes property of the microsoft.graph.accessPackage entity.
     */
    get resourceRoleScopes(): ResourceRoleScopesRequestBuilder;
    /**
     * Delete an accessPackage object. You cannot delete an access package if it has any accessPackageAssignment.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/accesspackage-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties and relationships of an accessPackage object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AccessPackage>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/accesspackage-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<AccessPackageItemRequestBuilderGetQueryParameters> | undefined) : Promise<AccessPackage | undefined>;
    /**
     * Update an existing accessPackage object to change one or more of its properties, such as the display name or description.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AccessPackage>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/accesspackage-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: AccessPackage, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AccessPackage | undefined>;
    /**
     * Delete an accessPackage object. You cannot delete an access package if it has any accessPackageAssignment.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties and relationships of an accessPackage object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AccessPackageItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update an existing accessPackage object to change one or more of its properties, such as the display name or description.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AccessPackage, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties and relationships of an accessPackage object.
 */
export interface AccessPackageItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const AccessPackageItemRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/entitlementManagement/accessPackages/{accessPackage%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AccessPackageItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AccessPackageItemRequestBuilderNavigationMetadata: Record<Exclude<keyof AccessPackageItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accessPackagesIncompatibleWith: {
        requestsMetadata: AccessPackagesIncompatibleWithRequestBuilderRequestsMetadata,
        navigationMetadata: AccessPackagesIncompatibleWithRequestBuilderNavigationMetadata,
    },
    assignmentPolicies: {
        requestsMetadata: AssignmentPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: AssignmentPoliciesRequestBuilderNavigationMetadata,
    },
    catalog: {
        requestsMetadata: CatalogRequestBuilderRequestsMetadata,
    },
    getApplicablePolicyRequirements: {
        requestsMetadata: GetApplicablePolicyRequirementsRequestBuilderRequestsMetadata,
    },
    incompatibleAccessPackages: {
        requestsMetadata: IncompatibleAccessPackagesRequestBuilderRequestsMetadata,
        navigationMetadata: IncompatibleAccessPackagesRequestBuilderNavigationMetadata,
    },
    incompatibleGroups: {
        requestsMetadata: IncompatibleGroupsRequestBuilderRequestsMetadata,
        navigationMetadata: IncompatibleGroupsRequestBuilderNavigationMetadata,
    },
    resourceRoleScopes: {
        requestsMetadata: ResourceRoleScopesRequestBuilderRequestsMetadata,
        navigationMetadata: ResourceRoleScopesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AccessPackageItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: AccessPackageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: AccessPackageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAccessPackageFromDiscriminatorValue,
        queryParametersMapper: AccessPackageItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: AccessPackageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAccessPackageFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAccessPackage,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
