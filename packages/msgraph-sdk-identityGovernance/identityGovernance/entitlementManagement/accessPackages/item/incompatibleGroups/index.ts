/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createGroupCollectionResponseFromDiscriminatorValue, type GroupCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { GroupItemRequestBuilderNavigationMetadata, type GroupItemRequestBuilder } from './item/';
import { RefRequestBuilderRequestsMetadata, type RefRequestBuilder } from './ref/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the incompatibleGroups property of the microsoft.graph.accessPackage entity.
 */
export interface IncompatibleGroupsRequestBuilder extends BaseRequestBuilder<IncompatibleGroupsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the collection of identityGovernance entities.
     */
    get ref(): RefRequestBuilder;
    /**
     * Gets an item from the github.com/microsoftgraph/msgraph-sdk-typescript/.identityGovernance.entitlementManagement.accessPackages.item.incompatibleGroups.item collection
     * @param groupId The unique identifier of group
     * @returns {GroupItemRequestBuilder}
     */
     byGroupId(groupId: string) : GroupItemRequestBuilder;
    /**
     * Retrieve a list of the group objects that have been marked as incompatible on an accessPackage.  
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GroupCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/accesspackage-list-incompatiblegroups?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<IncompatibleGroupsRequestBuilderGetQueryParameters> | undefined) : Promise<GroupCollectionResponse | undefined>;
    /**
     * Retrieve a list of the group objects that have been marked as incompatible on an accessPackage.  
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<IncompatibleGroupsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Retrieve a list of the group objects that have been marked as incompatible on an accessPackage.  
 */
export interface IncompatibleGroupsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const IncompatibleGroupsRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/entitlementManagement/accessPackages/{accessPackage%2Did}/incompatibleGroups{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the incompatibleGroups property of the microsoft.graph.accessPackage entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AcceptedSenders: "acceptedSenders",
    AppRoleAssignments: "appRoleAssignments",
    Calendar: "calendar",
    CalendarView: "calendarView",
    Conversations: "conversations",
    CreatedOnBehalfOf: "createdOnBehalfOf",
    Drive: "drive",
    Drives: "drives",
    Events: "events",
    Extensions: "extensions",
    GroupLifecyclePolicies: "groupLifecyclePolicies",
    MemberOf: "memberOf",
    Members: "members",
    MembersWithLicenseErrors: "membersWithLicenseErrors",
    Onenote: "onenote",
    Owners: "owners",
    PermissionGrants: "permissionGrants",
    Photo: "photo",
    Photos: "photos",
    Planner: "planner",
    RejectedSenders: "rejectedSenders",
    Settings: "settings",
    Sites: "sites",
    Team: "team",
    Threads: "threads",
    TransitiveMemberOf: "transitiveMemberOf",
    TransitiveMembers: "transitiveMembers",
} as const;
/**
 * Provides operations to manage the incompatibleGroups property of the microsoft.graph.accessPackage entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    DeletedDateTime: "deletedDateTime",
    DeletedDateTimeDesc: "deletedDateTime desc",
    AllowExternalSenders: "allowExternalSenders",
    AllowExternalSendersDesc: "allowExternalSenders desc",
    AssignedLabels: "assignedLabels",
    AssignedLabelsDesc: "assignedLabels desc",
    AssignedLicenses: "assignedLicenses",
    AssignedLicensesDesc: "assignedLicenses desc",
    AutoSubscribeNewMembers: "autoSubscribeNewMembers",
    AutoSubscribeNewMembersDesc: "autoSubscribeNewMembers desc",
    Classification: "classification",
    ClassificationDesc: "classification desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    ExpirationDateTime: "expirationDateTime",
    ExpirationDateTimeDesc: "expirationDateTime desc",
    GroupTypes: "groupTypes",
    GroupTypesDesc: "groupTypes desc",
    HasMembersWithLicenseErrors: "hasMembersWithLicenseErrors",
    HasMembersWithLicenseErrorsDesc: "hasMembersWithLicenseErrors desc",
    HideFromAddressLists: "hideFromAddressLists",
    HideFromAddressListsDesc: "hideFromAddressLists desc",
    HideFromOutlookClients: "hideFromOutlookClients",
    HideFromOutlookClientsDesc: "hideFromOutlookClients desc",
    IsArchived: "isArchived",
    IsArchivedDesc: "isArchived desc",
    IsAssignableToRole: "isAssignableToRole",
    IsAssignableToRoleDesc: "isAssignableToRole desc",
    IsSubscribedByMail: "isSubscribedByMail",
    IsSubscribedByMailDesc: "isSubscribedByMail desc",
    LicenseProcessingState: "licenseProcessingState",
    LicenseProcessingStateDesc: "licenseProcessingState desc",
    Mail: "mail",
    MailDesc: "mail desc",
    MailEnabled: "mailEnabled",
    MailEnabledDesc: "mailEnabled desc",
    MailNickname: "mailNickname",
    MailNicknameDesc: "mailNickname desc",
    MembershipRule: "membershipRule",
    MembershipRuleDesc: "membershipRule desc",
    MembershipRuleProcessingState: "membershipRuleProcessingState",
    MembershipRuleProcessingStateDesc: "membershipRuleProcessingState desc",
    OnPremisesDomainName: "onPremisesDomainName",
    OnPremisesDomainNameDesc: "onPremisesDomainName desc",
    OnPremisesLastSyncDateTime: "onPremisesLastSyncDateTime",
    OnPremisesLastSyncDateTimeDesc: "onPremisesLastSyncDateTime desc",
    OnPremisesNetBiosName: "onPremisesNetBiosName",
    OnPremisesNetBiosNameDesc: "onPremisesNetBiosName desc",
    OnPremisesProvisioningErrors: "onPremisesProvisioningErrors",
    OnPremisesProvisioningErrorsDesc: "onPremisesProvisioningErrors desc",
    OnPremisesSamAccountName: "onPremisesSamAccountName",
    OnPremisesSamAccountNameDesc: "onPremisesSamAccountName desc",
    OnPremisesSecurityIdentifier: "onPremisesSecurityIdentifier",
    OnPremisesSecurityIdentifierDesc: "onPremisesSecurityIdentifier desc",
    OnPremisesSyncEnabled: "onPremisesSyncEnabled",
    OnPremisesSyncEnabledDesc: "onPremisesSyncEnabled desc",
    PreferredDataLocation: "preferredDataLocation",
    PreferredDataLocationDesc: "preferredDataLocation desc",
    PreferredLanguage: "preferredLanguage",
    PreferredLanguageDesc: "preferredLanguage desc",
    ProxyAddresses: "proxyAddresses",
    ProxyAddressesDesc: "proxyAddresses desc",
    RenewedDateTime: "renewedDateTime",
    RenewedDateTimeDesc: "renewedDateTime desc",
    SecurityEnabled: "securityEnabled",
    SecurityEnabledDesc: "securityEnabled desc",
    SecurityIdentifier: "securityIdentifier",
    SecurityIdentifierDesc: "securityIdentifier desc",
    ServiceProvisioningErrors: "serviceProvisioningErrors",
    ServiceProvisioningErrorsDesc: "serviceProvisioningErrors desc",
    Theme: "theme",
    ThemeDesc: "theme desc",
    UniqueName: "uniqueName",
    UniqueNameDesc: "uniqueName desc",
    UnseenCount: "unseenCount",
    UnseenCountDesc: "unseenCount desc",
    Visibility: "visibility",
    VisibilityDesc: "visibility desc",
} as const;
/**
 * Provides operations to manage the incompatibleGroups property of the microsoft.graph.accessPackage entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    AllowExternalSenders: "allowExternalSenders",
    AssignedLabels: "assignedLabels",
    AssignedLicenses: "assignedLicenses",
    AutoSubscribeNewMembers: "autoSubscribeNewMembers",
    Classification: "classification",
    CreatedDateTime: "createdDateTime",
    Description: "description",
    DisplayName: "displayName",
    ExpirationDateTime: "expirationDateTime",
    GroupTypes: "groupTypes",
    HasMembersWithLicenseErrors: "hasMembersWithLicenseErrors",
    HideFromAddressLists: "hideFromAddressLists",
    HideFromOutlookClients: "hideFromOutlookClients",
    IsArchived: "isArchived",
    IsAssignableToRole: "isAssignableToRole",
    IsSubscribedByMail: "isSubscribedByMail",
    LicenseProcessingState: "licenseProcessingState",
    Mail: "mail",
    MailEnabled: "mailEnabled",
    MailNickname: "mailNickname",
    MembershipRule: "membershipRule",
    MembershipRuleProcessingState: "membershipRuleProcessingState",
    OnPremisesDomainName: "onPremisesDomainName",
    OnPremisesLastSyncDateTime: "onPremisesLastSyncDateTime",
    OnPremisesNetBiosName: "onPremisesNetBiosName",
    OnPremisesProvisioningErrors: "onPremisesProvisioningErrors",
    OnPremisesSamAccountName: "onPremisesSamAccountName",
    OnPremisesSecurityIdentifier: "onPremisesSecurityIdentifier",
    OnPremisesSyncEnabled: "onPremisesSyncEnabled",
    PreferredDataLocation: "preferredDataLocation",
    PreferredLanguage: "preferredLanguage",
    ProxyAddresses: "proxyAddresses",
    RenewedDateTime: "renewedDateTime",
    SecurityEnabled: "securityEnabled",
    SecurityIdentifier: "securityIdentifier",
    ServiceProvisioningErrors: "serviceProvisioningErrors",
    Theme: "theme",
    UniqueName: "uniqueName",
    UnseenCount: "unseenCount",
    Visibility: "visibility",
    AcceptedSenders: "acceptedSenders",
    AppRoleAssignments: "appRoleAssignments",
    Calendar: "calendar",
    CalendarView: "calendarView",
    Conversations: "conversations",
    CreatedOnBehalfOf: "createdOnBehalfOf",
    Drive: "drive",
    Drives: "drives",
    Events: "events",
    Extensions: "extensions",
    GroupLifecyclePolicies: "groupLifecyclePolicies",
    MemberOf: "memberOf",
    Members: "members",
    MembersWithLicenseErrors: "membersWithLicenseErrors",
    Onenote: "onenote",
    Owners: "owners",
    PermissionGrants: "permissionGrants",
    Photo: "photo",
    Photos: "photos",
    Planner: "planner",
    RejectedSenders: "rejectedSenders",
    Settings: "settings",
    Sites: "sites",
    Team: "team",
    Threads: "threads",
    TransitiveMemberOf: "transitiveMemberOf",
    TransitiveMembers: "transitiveMembers",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const IncompatibleGroupsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const IncompatibleGroupsRequestBuilderNavigationMetadata: Record<Exclude<keyof IncompatibleGroupsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byGroupId: {
        navigationMetadata: GroupItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["group%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    ref: {
        requestsMetadata: RefRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const IncompatibleGroupsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: IncompatibleGroupsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGroupCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: IncompatibleGroupsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
