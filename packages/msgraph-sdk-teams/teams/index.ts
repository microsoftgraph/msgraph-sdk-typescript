/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTeamCollectionResponseFromDiscriminatorValue, createTeamFromDiscriminatorValue, serializeTeam, type Team, type TeamCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { GetAllMessagesRequestBuilderRequestsMetadata, type GetAllMessagesRequestBuilder } from './getAllMessages/';
import { TeamItemRequestBuilderNavigationMetadata, TeamItemRequestBuilderRequestsMetadata, type TeamItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the collection of team entities.
 */
export interface TeamsRequestBuilder extends BaseRequestBuilder<TeamsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the getAllMessages method.
     */
    get getAllMessages(): GetAllMessagesRequestBuilder;
    /**
     * Provides operations to manage the collection of team entities.
     * @param teamId The unique identifier of team
     * @returns {TeamItemRequestBuilder}
     */
     byTeamId(teamId: string) : TeamItemRequestBuilder;
    /**
     * List all teams in an organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<TeamCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/teams-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<TeamsRequestBuilderGetQueryParameters> | undefined) : Promise<TeamCollectionResponse | undefined>;
    /**
     * Create a new team.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Team>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/team-post?view=graph-rest-1.0|Find more info here}
     */
     post(body: Team, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Team | undefined>;
    /**
     * List all teams in an organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TeamsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new team.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Team, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * List all teams in an organization.
 */
export interface TeamsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const TeamsRequestBuilderUriTemplate = "{+baseurl}/teams{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the collection of team entities.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AllChannels: "allChannels",
    Channels: "channels",
    Group: "group",
    IncomingChannels: "incomingChannels",
    InstalledApps: "installedApps",
    Members: "members",
    Operations: "operations",
    PermissionGrants: "permissionGrants",
    Photo: "photo",
    PrimaryChannel: "primaryChannel",
    Schedule: "schedule",
    Tags: "tags",
    Template: "template",
} as const;
/**
 * Provides operations to manage the collection of team entities.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Classification: "classification",
    ClassificationDesc: "classification desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    FunSettings: "funSettings",
    FunSettingsDesc: "funSettings desc",
    GuestSettings: "guestSettings",
    GuestSettingsDesc: "guestSettings desc",
    InternalId: "internalId",
    InternalIdDesc: "internalId desc",
    IsArchived: "isArchived",
    IsArchivedDesc: "isArchived desc",
    MemberSettings: "memberSettings",
    MemberSettingsDesc: "memberSettings desc",
    MessagingSettings: "messagingSettings",
    MessagingSettingsDesc: "messagingSettings desc",
    Specialization: "specialization",
    SpecializationDesc: "specialization desc",
    Summary: "summary",
    SummaryDesc: "summary desc",
    TenantId: "tenantId",
    TenantIdDesc: "tenantId desc",
    Visibility: "visibility",
    VisibilityDesc: "visibility desc",
    WebUrl: "webUrl",
    WebUrlDesc: "webUrl desc",
} as const;
/**
 * Provides operations to manage the collection of team entities.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Classification: "classification",
    CreatedDateTime: "createdDateTime",
    Description: "description",
    DisplayName: "displayName",
    FunSettings: "funSettings",
    GuestSettings: "guestSettings",
    InternalId: "internalId",
    IsArchived: "isArchived",
    MemberSettings: "memberSettings",
    MessagingSettings: "messagingSettings",
    Specialization: "specialization",
    Summary: "summary",
    TenantId: "tenantId",
    Visibility: "visibility",
    WebUrl: "webUrl",
    AllChannels: "allChannels",
    Channels: "channels",
    Group: "group",
    IncomingChannels: "incomingChannels",
    InstalledApps: "installedApps",
    Members: "members",
    Operations: "operations",
    PermissionGrants: "permissionGrants",
    Photo: "photo",
    PrimaryChannel: "primaryChannel",
    Schedule: "schedule",
    Tags: "tags",
    Template: "template",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TeamsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TeamsRequestBuilderNavigationMetadata: Record<Exclude<keyof TeamsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byTeamId: {
        requestsMetadata: TeamItemRequestBuilderRequestsMetadata,
        navigationMetadata: TeamItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["team%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    getAllMessages: {
        requestsMetadata: GetAllMessagesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TeamsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TeamsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTeamCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: TeamsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: TeamsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTeamFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTeam,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
