/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createChannelFromDiscriminatorValue, serializeChannel, type Channel } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { CompleteMigrationRequestBuilderRequestsMetadata, type CompleteMigrationRequestBuilder } from './completeMigration/';
// @ts-ignore
import { DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilderRequestsMetadata, type DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder } from './doesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName/';
// @ts-ignore
import { FilesFolderRequestBuilderNavigationMetadata, FilesFolderRequestBuilderRequestsMetadata, type FilesFolderRequestBuilder } from './filesFolder/';
// @ts-ignore
import { MembersRequestBuilderNavigationMetadata, MembersRequestBuilderRequestsMetadata, type MembersRequestBuilder } from './members/';
// @ts-ignore
import { MessagesRequestBuilderNavigationMetadata, MessagesRequestBuilderRequestsMetadata, type MessagesRequestBuilder } from './messages/';
// @ts-ignore
import { ProvisionEmailRequestBuilderRequestsMetadata, type ProvisionEmailRequestBuilder } from './provisionEmail/';
// @ts-ignore
import { RemoveEmailRequestBuilderRequestsMetadata, type RemoveEmailRequestBuilder } from './removeEmail/';
// @ts-ignore
import { SharedWithTeamsRequestBuilderNavigationMetadata, SharedWithTeamsRequestBuilderRequestsMetadata, type SharedWithTeamsRequestBuilder } from './sharedWithTeams/';
// @ts-ignore
import { TabsRequestBuilderNavigationMetadata, TabsRequestBuilderRequestsMetadata, type TabsRequestBuilder } from './tabs/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the primaryChannel property of the microsoft.graph.team entity.
 */
export interface PrimaryChannelRequestBuilder extends BaseRequestBuilder<PrimaryChannelRequestBuilder> {
    /**
     * Provides operations to call the completeMigration method.
     */
    get completeMigration(): CompleteMigrationRequestBuilder;
    /**
     * Provides operations to call the doesUserHaveAccess method.
     */
    get doesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName(): DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilder;
    /**
     * Provides operations to manage the filesFolder property of the microsoft.graph.channel entity.
     */
    get filesFolder(): FilesFolderRequestBuilder;
    /**
     * Provides operations to manage the members property of the microsoft.graph.channel entity.
     */
    get members(): MembersRequestBuilder;
    /**
     * Provides operations to manage the messages property of the microsoft.graph.channel entity.
     */
    get messages(): MessagesRequestBuilder;
    /**
     * Provides operations to call the provisionEmail method.
     */
    get provisionEmail(): ProvisionEmailRequestBuilder;
    /**
     * Provides operations to call the removeEmail method.
     */
    get removeEmail(): RemoveEmailRequestBuilder;
    /**
     * Provides operations to manage the sharedWithTeams property of the microsoft.graph.channel entity.
     */
    get sharedWithTeams(): SharedWithTeamsRequestBuilder;
    /**
     * Provides operations to manage the tabs property of the microsoft.graph.channel entity.
     */
    get tabs(): TabsRequestBuilder;
    /**
     * Delete navigation property primaryChannel for teams
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The general channel for the team.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Channel>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<PrimaryChannelRequestBuilderGetQueryParameters> | undefined) : Promise<Channel | undefined>;
    /**
     * Update the navigation property primaryChannel in teams
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Channel>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Channel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Channel | undefined>;
    /**
     * Delete navigation property primaryChannel for teams
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The general channel for the team.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PrimaryChannelRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property primaryChannel in teams
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Channel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The general channel for the team.
 */
export interface PrimaryChannelRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const PrimaryChannelRequestBuilderUriTemplate = "{+baseurl}/teams/{team%2Did}/primaryChannel{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PrimaryChannelRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PrimaryChannelRequestBuilderNavigationMetadata: Record<Exclude<keyof PrimaryChannelRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    completeMigration: {
        requestsMetadata: CompleteMigrationRequestBuilderRequestsMetadata,
    },
    doesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalName: {
        requestsMetadata: DoesUserHaveAccessuserIdUserIdTenantIdTenantIdUserPrincipalNameUserPrincipalNameRequestBuilderRequestsMetadata,
    },
    filesFolder: {
        requestsMetadata: FilesFolderRequestBuilderRequestsMetadata,
        navigationMetadata: FilesFolderRequestBuilderNavigationMetadata,
    },
    members: {
        requestsMetadata: MembersRequestBuilderRequestsMetadata,
        navigationMetadata: MembersRequestBuilderNavigationMetadata,
    },
    messages: {
        requestsMetadata: MessagesRequestBuilderRequestsMetadata,
        navigationMetadata: MessagesRequestBuilderNavigationMetadata,
    },
    provisionEmail: {
        requestsMetadata: ProvisionEmailRequestBuilderRequestsMetadata,
    },
    removeEmail: {
        requestsMetadata: RemoveEmailRequestBuilderRequestsMetadata,
    },
    sharedWithTeams: {
        requestsMetadata: SharedWithTeamsRequestBuilderRequestsMetadata,
        navigationMetadata: SharedWithTeamsRequestBuilderNavigationMetadata,
    },
    tabs: {
        requestsMetadata: TabsRequestBuilderRequestsMetadata,
        navigationMetadata: TabsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PrimaryChannelRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: PrimaryChannelRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: PrimaryChannelRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChannelFromDiscriminatorValue,
        queryParametersMapper: PrimaryChannelRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PrimaryChannelRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChannelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeChannel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
