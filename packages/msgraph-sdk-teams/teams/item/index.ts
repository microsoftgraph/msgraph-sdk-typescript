/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTeamFromDiscriminatorValue, serializeTeam, type Team } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { AllChannelsRequestBuilderNavigationMetadata, AllChannelsRequestBuilderRequestsMetadata, type AllChannelsRequestBuilder } from './allChannels/';
import { ArchiveRequestBuilderRequestsMetadata, type ArchiveRequestBuilder } from './archive/';
import { ChannelsRequestBuilderNavigationMetadata, ChannelsRequestBuilderRequestsMetadata, type ChannelsRequestBuilder } from './channels/';
import { CloneRequestBuilderRequestsMetadata, type CloneRequestBuilder } from './clone/';
import { CompleteMigrationRequestBuilderRequestsMetadata, type CompleteMigrationRequestBuilder } from './completeMigration/';
import { GroupRequestBuilderNavigationMetadata, GroupRequestBuilderRequestsMetadata, type GroupRequestBuilder } from './group/';
import { IncomingChannelsRequestBuilderNavigationMetadata, IncomingChannelsRequestBuilderRequestsMetadata, type IncomingChannelsRequestBuilder } from './incomingChannels/';
import { InstalledAppsRequestBuilderNavigationMetadata, InstalledAppsRequestBuilderRequestsMetadata, type InstalledAppsRequestBuilder } from './installedApps/';
import { MembersRequestBuilderNavigationMetadata, MembersRequestBuilderRequestsMetadata, type MembersRequestBuilder } from './members/';
import { OperationsRequestBuilderNavigationMetadata, OperationsRequestBuilderRequestsMetadata, type OperationsRequestBuilder } from './operations/';
import { PermissionGrantsRequestBuilderNavigationMetadata, PermissionGrantsRequestBuilderRequestsMetadata, type PermissionGrantsRequestBuilder } from './permissionGrants/';
import { PhotoRequestBuilderNavigationMetadata, PhotoRequestBuilderRequestsMetadata, type PhotoRequestBuilder } from './photo/';
import { PrimaryChannelRequestBuilderNavigationMetadata, PrimaryChannelRequestBuilderRequestsMetadata, type PrimaryChannelRequestBuilder } from './primaryChannel/';
import { ScheduleRequestBuilderNavigationMetadata, ScheduleRequestBuilderRequestsMetadata, type ScheduleRequestBuilder } from './schedule/';
import { SendActivityNotificationRequestBuilderRequestsMetadata, type SendActivityNotificationRequestBuilder } from './sendActivityNotification/';
import { TagsRequestBuilderNavigationMetadata, TagsRequestBuilderRequestsMetadata, type TagsRequestBuilder } from './tags/';
import { TemplateRequestBuilderRequestsMetadata, type TemplateRequestBuilder } from './template/';
import { type UnarchiveRequestBuilder, UnarchiveRequestBuilderRequestsMetadata } from './unarchive/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of team entities.
 */
export interface TeamItemRequestBuilder extends BaseRequestBuilder<TeamItemRequestBuilder> {
    /**
     * Provides operations to manage the allChannels property of the microsoft.graph.team entity.
     */
    get allChannels(): AllChannelsRequestBuilder;
    /**
     * Provides operations to call the archive method.
     */
    get archive(): ArchiveRequestBuilder;
    /**
     * Provides operations to manage the channels property of the microsoft.graph.team entity.
     */
    get channels(): ChannelsRequestBuilder;
    /**
     * Provides operations to call the clone method.
     */
    get clone(): CloneRequestBuilder;
    /**
     * Provides operations to call the completeMigration method.
     */
    get completeMigration(): CompleteMigrationRequestBuilder;
    /**
     * Provides operations to manage the group property of the microsoft.graph.team entity.
     */
    get group(): GroupRequestBuilder;
    /**
     * Provides operations to manage the incomingChannels property of the microsoft.graph.team entity.
     */
    get incomingChannels(): IncomingChannelsRequestBuilder;
    /**
     * Provides operations to manage the installedApps property of the microsoft.graph.team entity.
     */
    get installedApps(): InstalledAppsRequestBuilder;
    /**
     * Provides operations to manage the members property of the microsoft.graph.team entity.
     */
    get members(): MembersRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.team entity.
     */
    get operations(): OperationsRequestBuilder;
    /**
     * Provides operations to manage the permissionGrants property of the microsoft.graph.team entity.
     */
    get permissionGrants(): PermissionGrantsRequestBuilder;
    /**
     * Provides operations to manage the photo property of the microsoft.graph.team entity.
     */
    get photo(): PhotoRequestBuilder;
    /**
     * Provides operations to manage the primaryChannel property of the microsoft.graph.team entity.
     */
    get primaryChannel(): PrimaryChannelRequestBuilder;
    /**
     * Provides operations to manage the schedule property of the microsoft.graph.team entity.
     */
    get schedule(): ScheduleRequestBuilder;
    /**
     * Provides operations to call the sendActivityNotification method.
     */
    get sendActivityNotification(): SendActivityNotificationRequestBuilder;
    /**
     * Provides operations to manage the tags property of the microsoft.graph.team entity.
     */
    get tags(): TagsRequestBuilder;
    /**
     * Provides operations to manage the template property of the microsoft.graph.team entity.
     */
    get template(): TemplateRequestBuilder;
    /**
     * Provides operations to call the unarchive method.
     */
    get unarchive(): UnarchiveRequestBuilder;
    /**
     * Delete entity from teams
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties and relationships of the specified team.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Team>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/team-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<TeamItemRequestBuilderGetQueryParameters> | undefined) : Promise<Team | undefined>;
    /**
     * Update the properties of the specified team.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Team>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/team-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: Team, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Team | undefined>;
    /**
     * Delete entity from teams
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties and relationships of the specified team.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TeamItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of the specified team.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Team, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties and relationships of the specified team.
 */
export interface TeamItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const TeamItemRequestBuilderUriTemplate = "{+baseurl}/teams/{team%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TeamItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TeamItemRequestBuilderNavigationMetadata: Record<Exclude<keyof TeamItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    allChannels: {
        requestsMetadata: AllChannelsRequestBuilderRequestsMetadata,
        navigationMetadata: AllChannelsRequestBuilderNavigationMetadata,
    },
    archive: {
        requestsMetadata: ArchiveRequestBuilderRequestsMetadata,
    },
    channels: {
        requestsMetadata: ChannelsRequestBuilderRequestsMetadata,
        navigationMetadata: ChannelsRequestBuilderNavigationMetadata,
    },
    clone: {
        requestsMetadata: CloneRequestBuilderRequestsMetadata,
    },
    completeMigration: {
        requestsMetadata: CompleteMigrationRequestBuilderRequestsMetadata,
    },
    group: {
        requestsMetadata: GroupRequestBuilderRequestsMetadata,
        navigationMetadata: GroupRequestBuilderNavigationMetadata,
    },
    incomingChannels: {
        requestsMetadata: IncomingChannelsRequestBuilderRequestsMetadata,
        navigationMetadata: IncomingChannelsRequestBuilderNavigationMetadata,
    },
    installedApps: {
        requestsMetadata: InstalledAppsRequestBuilderRequestsMetadata,
        navigationMetadata: InstalledAppsRequestBuilderNavigationMetadata,
    },
    members: {
        requestsMetadata: MembersRequestBuilderRequestsMetadata,
        navigationMetadata: MembersRequestBuilderNavigationMetadata,
    },
    operations: {
        requestsMetadata: OperationsRequestBuilderRequestsMetadata,
        navigationMetadata: OperationsRequestBuilderNavigationMetadata,
    },
    permissionGrants: {
        requestsMetadata: PermissionGrantsRequestBuilderRequestsMetadata,
        navigationMetadata: PermissionGrantsRequestBuilderNavigationMetadata,
    },
    photo: {
        requestsMetadata: PhotoRequestBuilderRequestsMetadata,
        navigationMetadata: PhotoRequestBuilderNavigationMetadata,
    },
    primaryChannel: {
        requestsMetadata: PrimaryChannelRequestBuilderRequestsMetadata,
        navigationMetadata: PrimaryChannelRequestBuilderNavigationMetadata,
    },
    schedule: {
        requestsMetadata: ScheduleRequestBuilderRequestsMetadata,
        navigationMetadata: ScheduleRequestBuilderNavigationMetadata,
    },
    sendActivityNotification: {
        requestsMetadata: SendActivityNotificationRequestBuilderRequestsMetadata,
    },
    tags: {
        requestsMetadata: TagsRequestBuilderRequestsMetadata,
        navigationMetadata: TagsRequestBuilderNavigationMetadata,
    },
    template: {
        requestsMetadata: TemplateRequestBuilderRequestsMetadata,
    },
    unarchive: {
        requestsMetadata: UnarchiveRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TeamItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: TeamItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: TeamItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTeamFromDiscriminatorValue,
        queryParametersMapper: TeamItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: TeamItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTeamFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTeam,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
