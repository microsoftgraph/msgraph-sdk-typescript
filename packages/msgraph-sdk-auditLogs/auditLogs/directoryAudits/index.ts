/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDirectoryAuditCollectionResponseFromDiscriminatorValue, createDirectoryAuditFromDiscriminatorValue, serializeDirectoryAudit, type DirectoryAudit, type DirectoryAuditCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DirectoryAuditItemRequestBuilderRequestsMetadata, type DirectoryAuditItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the directoryAudits property of the microsoft.graph.auditLogRoot entity.
 */
export interface DirectoryAuditsRequestBuilder extends BaseRequestBuilder<DirectoryAuditsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the directoryAudits property of the microsoft.graph.auditLogRoot entity.
     * @param directoryAuditId The unique identifier of directoryAudit
     * @returns {DirectoryAuditItemRequestBuilder}
     */
     byDirectoryAuditId(directoryAuditId: string) : DirectoryAuditItemRequestBuilder;
    /**
     * Get the list of audit logs generated by Microsoft Entra ID. This includes audit logs generated by various services within Microsoft Entra ID, including user, app, device and group Management, privileged identity management (PIM), access reviews, terms of use, identity protection, password management (self-service and admin password resets), and self- service group management, and so on.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DirectoryAuditCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/directoryaudit-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<DirectoryAuditsRequestBuilderGetQueryParameters> | undefined) : Promise<DirectoryAuditCollectionResponse | undefined>;
    /**
     * Create new navigation property to directoryAudits for auditLogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DirectoryAudit>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: DirectoryAudit, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DirectoryAudit | undefined>;
    /**
     * Get the list of audit logs generated by Microsoft Entra ID. This includes audit logs generated by various services within Microsoft Entra ID, including user, app, device and group Management, privileged identity management (PIM), access reviews, terms of use, identity protection, password management (self-service and admin password resets), and self- service group management, and so on.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DirectoryAuditsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to directoryAudits for auditLogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: DirectoryAudit, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the list of audit logs generated by Microsoft Entra ID. This includes audit logs generated by various services within Microsoft Entra ID, including user, app, device and group Management, privileged identity management (PIM), access reviews, terms of use, identity protection, password management (self-service and admin password resets), and self- service group management, and so on.
 */
export interface DirectoryAuditsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const DirectoryAuditsRequestBuilderUriTemplate = "{+baseurl}/auditLogs/directoryAudits{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DirectoryAuditsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DirectoryAuditsRequestBuilderNavigationMetadata: Record<Exclude<keyof DirectoryAuditsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDirectoryAuditId: {
        requestsMetadata: DirectoryAuditItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["directoryAudit%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DirectoryAuditsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DirectoryAuditsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDirectoryAuditCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: DirectoryAuditsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DirectoryAuditsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDirectoryAuditFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDirectoryAudit,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the directoryAudits property of the microsoft.graph.auditLogRoot entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the directoryAudits property of the microsoft.graph.auditLogRoot entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    ActivityDateTime: "activityDateTime",
    ActivityDateTimeDesc: "activityDateTime desc",
    ActivityDisplayName: "activityDisplayName",
    ActivityDisplayNameDesc: "activityDisplayName desc",
    AdditionalDetails: "additionalDetails",
    AdditionalDetailsDesc: "additionalDetails desc",
    Category: "category",
    CategoryDesc: "category desc",
    CorrelationId: "correlationId",
    CorrelationIdDesc: "correlationId desc",
    InitiatedBy: "initiatedBy",
    InitiatedByDesc: "initiatedBy desc",
    LoggedByService: "loggedByService",
    LoggedByServiceDesc: "loggedByService desc",
    OperationType: "operationType",
    OperationTypeDesc: "operationType desc",
    Result: "result",
    ResultDesc: "result desc",
    ResultReason: "resultReason",
    ResultReasonDesc: "resultReason desc",
    TargetResources: "targetResources",
    TargetResourcesDesc: "targetResources desc",
} as const;
/**
 * Provides operations to manage the directoryAudits property of the microsoft.graph.auditLogRoot entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    ActivityDateTime: "activityDateTime",
    ActivityDisplayName: "activityDisplayName",
    AdditionalDetails: "additionalDetails",
    Category: "category",
    CorrelationId: "correlationId",
    InitiatedBy: "initiatedBy",
    LoggedByService: "loggedByService",
    OperationType: "operationType",
    Result: "result",
    ResultReason: "resultReason",
    TargetResources: "targetResources",
} as const;
/* tslint:enable */
/* eslint-enable */
