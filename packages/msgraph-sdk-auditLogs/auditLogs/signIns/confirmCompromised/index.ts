/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConfirmCompromisedPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The requestIds property
     */
    requestIds?: string[] | null;
}
/**
 * Provides operations to call the confirmCompromised method.
 */
export interface ConfirmCompromisedRequestBuilder extends BaseRequestBuilder<ConfirmCompromisedRequestBuilder> {
    /**
     * Mark an event in the Microsoft Entra sign-in logs as risky. Events marked as risky by an admin are immediately flagged as high risk in Microsoft Entra ID Protection, overriding previous risk states. Admins can confirm that events flagged as risky by Microsoft Entra ID Protection are in fact risky. For details about investigating Identity Protection risks, see How to investigate risk.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/signin-confirmcompromised?view=graph-rest-1.0|Find more info here}
     */
     post(body: ConfirmCompromisedPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Mark an event in the Microsoft Entra sign-in logs as risky. Events marked as risky by an admin are immediately flagged as high risk in Microsoft Entra ID Protection, overriding previous risk states. Admins can confirm that events flagged as risky by Microsoft Entra ID Protection are in fact risky. For details about investigating Identity Protection risks, see How to investigate risk.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ConfirmCompromisedPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfirmCompromisedPostRequestBody}
 */
// @ts-ignore
export function createConfirmCompromisedPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfirmCompromisedPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param ConfirmCompromisedPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfirmCompromisedPostRequestBody(confirmCompromisedPostRequestBody: Partial<ConfirmCompromisedPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { confirmCompromisedPostRequestBody.backingStoreEnabled = true; },
        "requestIds": n => { confirmCompromisedPostRequestBody.requestIds = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * Serializes information the current object
 * @param ConfirmCompromisedPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfirmCompromisedPostRequestBody(writer: SerializationWriter, confirmCompromisedPostRequestBody: Partial<ConfirmCompromisedPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!confirmCompromisedPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeCollectionOfPrimitiveValues<string>("requestIds", confirmCompromisedPostRequestBody.requestIds);
    writer.writeAdditionalData(confirmCompromisedPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ConfirmCompromisedRequestBuilderUriTemplate = "{+baseurl}/auditLogs/signIns/confirmCompromised";
/**
 * Metadata for all the requests in the request builder.
 */
export const ConfirmCompromisedRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ConfirmCompromisedRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeConfirmCompromisedPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
