/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConfirmSafePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The requestIds property
     */
    requestIds?: string[] | null;
}
/**
 * Provides operations to call the confirmSafe method.
 */
export interface ConfirmSafeRequestBuilder extends BaseRequestBuilder<ConfirmSafeRequestBuilder> {
    /**
     * Mark an event in Microsoft Entra sign-in logs as safe. Admins can either mark the events flagged as risky by Microsoft Entra ID Protection as safe, or they can mark unflagged events as safe. For details about investigating Identity Protection risks, see How to investigate risk.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/signin-confirmsafe?view=graph-rest-1.0|Find more info here}
     */
     post(body: ConfirmSafePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Mark an event in Microsoft Entra sign-in logs as safe. Admins can either mark the events flagged as risky by Microsoft Entra ID Protection as safe, or they can mark unflagged events as safe. For details about investigating Identity Protection risks, see How to investigate risk.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ConfirmSafePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ConfirmSafePostRequestBody}
 */
// @ts-ignore
export function createConfirmSafePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConfirmSafePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param ConfirmSafePostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConfirmSafePostRequestBody(confirmSafePostRequestBody: Partial<ConfirmSafePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { confirmSafePostRequestBody.backingStoreEnabled = true; },
        "requestIds": n => { confirmSafePostRequestBody.requestIds = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * Serializes information the current object
 * @param ConfirmSafePostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConfirmSafePostRequestBody(writer: SerializationWriter, confirmSafePostRequestBody: Partial<ConfirmSafePostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!confirmSafePostRequestBody || isSerializingDerivedType) { return; }
    writer.writeCollectionOfPrimitiveValues<string>("requestIds", confirmSafePostRequestBody.requestIds);
    writer.writeAdditionalData(confirmSafePostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ConfirmSafeRequestBuilderUriTemplate = "{+baseurl}/auditLogs/signIns/confirmSafe";
/**
 * Metadata for all the requests in the request builder.
 */
export const ConfirmSafeRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ConfirmSafeRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeConfirmSafePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
