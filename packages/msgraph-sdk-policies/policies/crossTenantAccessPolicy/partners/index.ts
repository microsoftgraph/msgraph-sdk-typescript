/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCrossTenantAccessPolicyConfigurationPartnerCollectionResponseFromDiscriminatorValue, createCrossTenantAccessPolicyConfigurationPartnerFromDiscriminatorValue, serializeCrossTenantAccessPolicyConfigurationPartner, type CrossTenantAccessPolicyConfigurationPartner, type CrossTenantAccessPolicyConfigurationPartnerCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { CrossTenantAccessPolicyConfigurationPartnerTenantItemRequestBuilderNavigationMetadata, CrossTenantAccessPolicyConfigurationPartnerTenantItemRequestBuilderRequestsMetadata, type CrossTenantAccessPolicyConfigurationPartnerTenantItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the partners property of the microsoft.graph.crossTenantAccessPolicy entity.
 */
export interface PartnersRequestBuilder extends BaseRequestBuilder<PartnersRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the partners property of the microsoft.graph.crossTenantAccessPolicy entity.
     * @param crossTenantAccessPolicyConfigurationPartnerTenantId The unique identifier of crossTenantAccessPolicyConfigurationPartner
     * @returns {CrossTenantAccessPolicyConfigurationPartnerTenantItemRequestBuilder}
     */
     byCrossTenantAccessPolicyConfigurationPartnerTenantId(crossTenantAccessPolicyConfigurationPartnerTenantId: string) : CrossTenantAccessPolicyConfigurationPartnerTenantItemRequestBuilder;
    /**
     * Get a list of all partner configurations within a cross-tenant access policy. You can also use the $expand parameter to list the user synchronization policy for all partner configurations.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CrossTenantAccessPolicyConfigurationPartnerCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/crosstenantaccesspolicy-list-partners?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<PartnersRequestBuilderGetQueryParameters> | undefined) : Promise<CrossTenantAccessPolicyConfigurationPartnerCollectionResponse | undefined>;
    /**
     * Create a new partner configuration in a cross-tenant access policy.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CrossTenantAccessPolicyConfigurationPartner>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/crosstenantaccesspolicy-post-partners?view=graph-rest-1.0|Find more info here}
     */
     post(body: CrossTenantAccessPolicyConfigurationPartner, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CrossTenantAccessPolicyConfigurationPartner | undefined>;
    /**
     * Get a list of all partner configurations within a cross-tenant access policy. You can also use the $expand parameter to list the user synchronization policy for all partner configurations.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PartnersRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new partner configuration in a cross-tenant access policy.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CrossTenantAccessPolicyConfigurationPartner, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a list of all partner configurations within a cross-tenant access policy. You can also use the $expand parameter to list the user synchronization policy for all partner configurations.
 */
export interface PartnersRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const PartnersRequestBuilderUriTemplate = "{+baseurl}/policies/crossTenantAccessPolicy/partners{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the partners property of the microsoft.graph.crossTenantAccessPolicy entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    IdentitySynchronization: "identitySynchronization",
} as const;
/**
 * Provides operations to manage the partners property of the microsoft.graph.crossTenantAccessPolicy entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    AutomaticUserConsentSettings: "automaticUserConsentSettings",
    AutomaticUserConsentSettingsDesc: "automaticUserConsentSettings desc",
    B2bCollaborationInbound: "b2bCollaborationInbound",
    B2bCollaborationInboundDesc: "b2bCollaborationInbound desc",
    B2bCollaborationOutbound: "b2bCollaborationOutbound",
    B2bCollaborationOutboundDesc: "b2bCollaborationOutbound desc",
    B2bDirectConnectInbound: "b2bDirectConnectInbound",
    B2bDirectConnectInboundDesc: "b2bDirectConnectInbound desc",
    B2bDirectConnectOutbound: "b2bDirectConnectOutbound",
    B2bDirectConnectOutboundDesc: "b2bDirectConnectOutbound desc",
    InboundTrust: "inboundTrust",
    InboundTrustDesc: "inboundTrust desc",
    IsServiceProvider: "isServiceProvider",
    IsServiceProviderDesc: "isServiceProvider desc",
    TenantId: "tenantId",
    TenantIdDesc: "tenantId desc",
} as const;
/**
 * Provides operations to manage the partners property of the microsoft.graph.crossTenantAccessPolicy entity.
 */
export const GetSelectQueryParameterTypeObject = {
    AutomaticUserConsentSettings: "automaticUserConsentSettings",
    B2bCollaborationInbound: "b2bCollaborationInbound",
    B2bCollaborationOutbound: "b2bCollaborationOutbound",
    B2bDirectConnectInbound: "b2bDirectConnectInbound",
    B2bDirectConnectOutbound: "b2bDirectConnectOutbound",
    InboundTrust: "inboundTrust",
    IsServiceProvider: "isServiceProvider",
    TenantId: "tenantId",
    IdentitySynchronization: "identitySynchronization",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PartnersRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PartnersRequestBuilderNavigationMetadata: Record<Exclude<keyof PartnersRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byCrossTenantAccessPolicyConfigurationPartnerTenantId: {
        requestsMetadata: CrossTenantAccessPolicyConfigurationPartnerTenantItemRequestBuilderRequestsMetadata,
        navigationMetadata: CrossTenantAccessPolicyConfigurationPartnerTenantItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["crossTenantAccessPolicyConfigurationPartner%2DtenantId"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PartnersRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PartnersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCrossTenantAccessPolicyConfigurationPartnerCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: PartnersRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: PartnersRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCrossTenantAccessPolicyConfigurationPartnerFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCrossTenantAccessPolicyConfigurationPartner,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
