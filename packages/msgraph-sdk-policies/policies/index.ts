/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPolicyRootFromDiscriminatorValue, serializePolicyRoot, type PolicyRoot } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { ActivityBasedTimeoutPoliciesRequestBuilderNavigationMetadata, ActivityBasedTimeoutPoliciesRequestBuilderRequestsMetadata, type ActivityBasedTimeoutPoliciesRequestBuilder } from './activityBasedTimeoutPolicies/';
// @ts-ignore
import { AdminConsentRequestPolicyRequestBuilderRequestsMetadata, type AdminConsentRequestPolicyRequestBuilder } from './adminConsentRequestPolicy/';
// @ts-ignore
import { AppManagementPoliciesRequestBuilderNavigationMetadata, AppManagementPoliciesRequestBuilderRequestsMetadata, type AppManagementPoliciesRequestBuilder } from './appManagementPolicies/';
// @ts-ignore
import { AuthenticationFlowsPolicyRequestBuilderRequestsMetadata, type AuthenticationFlowsPolicyRequestBuilder } from './authenticationFlowsPolicy/';
// @ts-ignore
import { AuthenticationMethodsPolicyRequestBuilderNavigationMetadata, AuthenticationMethodsPolicyRequestBuilderRequestsMetadata, type AuthenticationMethodsPolicyRequestBuilder } from './authenticationMethodsPolicy/';
// @ts-ignore
import { AuthenticationStrengthPoliciesRequestBuilderNavigationMetadata, AuthenticationStrengthPoliciesRequestBuilderRequestsMetadata, type AuthenticationStrengthPoliciesRequestBuilder } from './authenticationStrengthPolicies/';
// @ts-ignore
import { AuthorizationPolicyRequestBuilderRequestsMetadata, type AuthorizationPolicyRequestBuilder } from './authorizationPolicy/';
// @ts-ignore
import { ClaimsMappingPoliciesRequestBuilderNavigationMetadata, ClaimsMappingPoliciesRequestBuilderRequestsMetadata, type ClaimsMappingPoliciesRequestBuilder } from './claimsMappingPolicies/';
// @ts-ignore
import { ConditionalAccessPoliciesRequestBuilderNavigationMetadata, ConditionalAccessPoliciesRequestBuilderRequestsMetadata, type ConditionalAccessPoliciesRequestBuilder } from './conditionalAccessPolicies/';
// @ts-ignore
import { CrossTenantAccessPolicyRequestBuilderNavigationMetadata, CrossTenantAccessPolicyRequestBuilderRequestsMetadata, type CrossTenantAccessPolicyRequestBuilder } from './crossTenantAccessPolicy/';
// @ts-ignore
import { DefaultAppManagementPolicyRequestBuilderRequestsMetadata, type DefaultAppManagementPolicyRequestBuilder } from './defaultAppManagementPolicy/';
// @ts-ignore
import { DeviceRegistrationPolicyRequestBuilderRequestsMetadata, type DeviceRegistrationPolicyRequestBuilder } from './deviceRegistrationPolicy/';
// @ts-ignore
import { FeatureRolloutPoliciesRequestBuilderNavigationMetadata, FeatureRolloutPoliciesRequestBuilderRequestsMetadata, type FeatureRolloutPoliciesRequestBuilder } from './featureRolloutPolicies/';
// @ts-ignore
import { HomeRealmDiscoveryPoliciesRequestBuilderNavigationMetadata, HomeRealmDiscoveryPoliciesRequestBuilderRequestsMetadata, type HomeRealmDiscoveryPoliciesRequestBuilder } from './homeRealmDiscoveryPolicies/';
// @ts-ignore
import { IdentitySecurityDefaultsEnforcementPolicyRequestBuilderRequestsMetadata, type IdentitySecurityDefaultsEnforcementPolicyRequestBuilder } from './identitySecurityDefaultsEnforcementPolicy/';
// @ts-ignore
import { PermissionGrantPoliciesRequestBuilderNavigationMetadata, PermissionGrantPoliciesRequestBuilderRequestsMetadata, type PermissionGrantPoliciesRequestBuilder } from './permissionGrantPolicies/';
// @ts-ignore
import { RoleManagementPoliciesRequestBuilderNavigationMetadata, RoleManagementPoliciesRequestBuilderRequestsMetadata, type RoleManagementPoliciesRequestBuilder } from './roleManagementPolicies/';
// @ts-ignore
import { RoleManagementPolicyAssignmentsRequestBuilderNavigationMetadata, RoleManagementPolicyAssignmentsRequestBuilderRequestsMetadata, type RoleManagementPolicyAssignmentsRequestBuilder } from './roleManagementPolicyAssignments/';
// @ts-ignore
import { TokenIssuancePoliciesRequestBuilderNavigationMetadata, TokenIssuancePoliciesRequestBuilderRequestsMetadata, type TokenIssuancePoliciesRequestBuilder } from './tokenIssuancePolicies/';
// @ts-ignore
import { TokenLifetimePoliciesRequestBuilderNavigationMetadata, TokenLifetimePoliciesRequestBuilderRequestsMetadata, type TokenLifetimePoliciesRequestBuilder } from './tokenLifetimePolicies/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the policyRoot singleton.
 */
export interface PoliciesRequestBuilder extends BaseRequestBuilder<PoliciesRequestBuilder> {
    /**
     * Provides operations to manage the activityBasedTimeoutPolicies property of the microsoft.graph.policyRoot entity.
     */
    get activityBasedTimeoutPolicies(): ActivityBasedTimeoutPoliciesRequestBuilder;
    /**
     * Provides operations to manage the adminConsentRequestPolicy property of the microsoft.graph.policyRoot entity.
     */
    get adminConsentRequestPolicy(): AdminConsentRequestPolicyRequestBuilder;
    /**
     * Provides operations to manage the appManagementPolicies property of the microsoft.graph.policyRoot entity.
     */
    get appManagementPolicies(): AppManagementPoliciesRequestBuilder;
    /**
     * Provides operations to manage the authenticationFlowsPolicy property of the microsoft.graph.policyRoot entity.
     */
    get authenticationFlowsPolicy(): AuthenticationFlowsPolicyRequestBuilder;
    /**
     * Provides operations to manage the authenticationMethodsPolicy property of the microsoft.graph.policyRoot entity.
     */
    get authenticationMethodsPolicy(): AuthenticationMethodsPolicyRequestBuilder;
    /**
     * Provides operations to manage the authenticationStrengthPolicies property of the microsoft.graph.policyRoot entity.
     */
    get authenticationStrengthPolicies(): AuthenticationStrengthPoliciesRequestBuilder;
    /**
     * Provides operations to manage the authorizationPolicy property of the microsoft.graph.policyRoot entity.
     */
    get authorizationPolicy(): AuthorizationPolicyRequestBuilder;
    /**
     * Provides operations to manage the claimsMappingPolicies property of the microsoft.graph.policyRoot entity.
     */
    get claimsMappingPolicies(): ClaimsMappingPoliciesRequestBuilder;
    /**
     * Provides operations to manage the conditionalAccessPolicies property of the microsoft.graph.policyRoot entity.
     */
    get conditionalAccessPolicies(): ConditionalAccessPoliciesRequestBuilder;
    /**
     * Provides operations to manage the crossTenantAccessPolicy property of the microsoft.graph.policyRoot entity.
     */
    get crossTenantAccessPolicy(): CrossTenantAccessPolicyRequestBuilder;
    /**
     * Provides operations to manage the defaultAppManagementPolicy property of the microsoft.graph.policyRoot entity.
     */
    get defaultAppManagementPolicy(): DefaultAppManagementPolicyRequestBuilder;
    /**
     * Provides operations to manage the deviceRegistrationPolicy property of the microsoft.graph.policyRoot entity.
     */
    get deviceRegistrationPolicy(): DeviceRegistrationPolicyRequestBuilder;
    /**
     * Provides operations to manage the featureRolloutPolicies property of the microsoft.graph.policyRoot entity.
     */
    get featureRolloutPolicies(): FeatureRolloutPoliciesRequestBuilder;
    /**
     * Provides operations to manage the homeRealmDiscoveryPolicies property of the microsoft.graph.policyRoot entity.
     */
    get homeRealmDiscoveryPolicies(): HomeRealmDiscoveryPoliciesRequestBuilder;
    /**
     * Provides operations to manage the identitySecurityDefaultsEnforcementPolicy property of the microsoft.graph.policyRoot entity.
     */
    get identitySecurityDefaultsEnforcementPolicy(): IdentitySecurityDefaultsEnforcementPolicyRequestBuilder;
    /**
     * Provides operations to manage the permissionGrantPolicies property of the microsoft.graph.policyRoot entity.
     */
    get permissionGrantPolicies(): PermissionGrantPoliciesRequestBuilder;
    /**
     * Provides operations to manage the roleManagementPolicies property of the microsoft.graph.policyRoot entity.
     */
    get roleManagementPolicies(): RoleManagementPoliciesRequestBuilder;
    /**
     * Provides operations to manage the roleManagementPolicyAssignments property of the microsoft.graph.policyRoot entity.
     */
    get roleManagementPolicyAssignments(): RoleManagementPolicyAssignmentsRequestBuilder;
    /**
     * Provides operations to manage the tokenIssuancePolicies property of the microsoft.graph.policyRoot entity.
     */
    get tokenIssuancePolicies(): TokenIssuancePoliciesRequestBuilder;
    /**
     * Provides operations to manage the tokenLifetimePolicies property of the microsoft.graph.policyRoot entity.
     */
    get tokenLifetimePolicies(): TokenLifetimePoliciesRequestBuilder;
    /**
     * Get policies
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PolicyRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<PoliciesRequestBuilderGetQueryParameters> | undefined) : Promise<PolicyRoot | undefined>;
    /**
     * Update policies
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PolicyRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: PolicyRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PolicyRoot | undefined>;
    /**
     * Get policies
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PoliciesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update policies
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: PolicyRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get policies
 */
export interface PoliciesRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const PoliciesRequestBuilderUriTemplate = "{+baseurl}/policies{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PoliciesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PoliciesRequestBuilderNavigationMetadata: Record<Exclude<keyof PoliciesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    activityBasedTimeoutPolicies: {
        requestsMetadata: ActivityBasedTimeoutPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: ActivityBasedTimeoutPoliciesRequestBuilderNavigationMetadata,
    },
    adminConsentRequestPolicy: {
        requestsMetadata: AdminConsentRequestPolicyRequestBuilderRequestsMetadata,
    },
    appManagementPolicies: {
        requestsMetadata: AppManagementPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: AppManagementPoliciesRequestBuilderNavigationMetadata,
    },
    authenticationFlowsPolicy: {
        requestsMetadata: AuthenticationFlowsPolicyRequestBuilderRequestsMetadata,
    },
    authenticationMethodsPolicy: {
        requestsMetadata: AuthenticationMethodsPolicyRequestBuilderRequestsMetadata,
        navigationMetadata: AuthenticationMethodsPolicyRequestBuilderNavigationMetadata,
    },
    authenticationStrengthPolicies: {
        requestsMetadata: AuthenticationStrengthPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: AuthenticationStrengthPoliciesRequestBuilderNavigationMetadata,
    },
    authorizationPolicy: {
        requestsMetadata: AuthorizationPolicyRequestBuilderRequestsMetadata,
    },
    claimsMappingPolicies: {
        requestsMetadata: ClaimsMappingPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: ClaimsMappingPoliciesRequestBuilderNavigationMetadata,
    },
    conditionalAccessPolicies: {
        requestsMetadata: ConditionalAccessPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: ConditionalAccessPoliciesRequestBuilderNavigationMetadata,
    },
    crossTenantAccessPolicy: {
        requestsMetadata: CrossTenantAccessPolicyRequestBuilderRequestsMetadata,
        navigationMetadata: CrossTenantAccessPolicyRequestBuilderNavigationMetadata,
    },
    defaultAppManagementPolicy: {
        requestsMetadata: DefaultAppManagementPolicyRequestBuilderRequestsMetadata,
    },
    deviceRegistrationPolicy: {
        requestsMetadata: DeviceRegistrationPolicyRequestBuilderRequestsMetadata,
    },
    featureRolloutPolicies: {
        requestsMetadata: FeatureRolloutPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: FeatureRolloutPoliciesRequestBuilderNavigationMetadata,
    },
    homeRealmDiscoveryPolicies: {
        requestsMetadata: HomeRealmDiscoveryPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: HomeRealmDiscoveryPoliciesRequestBuilderNavigationMetadata,
    },
    identitySecurityDefaultsEnforcementPolicy: {
        requestsMetadata: IdentitySecurityDefaultsEnforcementPolicyRequestBuilderRequestsMetadata,
    },
    permissionGrantPolicies: {
        requestsMetadata: PermissionGrantPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: PermissionGrantPoliciesRequestBuilderNavigationMetadata,
    },
    roleManagementPolicies: {
        requestsMetadata: RoleManagementPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: RoleManagementPoliciesRequestBuilderNavigationMetadata,
    },
    roleManagementPolicyAssignments: {
        requestsMetadata: RoleManagementPolicyAssignmentsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleManagementPolicyAssignmentsRequestBuilderNavigationMetadata,
    },
    tokenIssuancePolicies: {
        requestsMetadata: TokenIssuancePoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: TokenIssuancePoliciesRequestBuilderNavigationMetadata,
    },
    tokenLifetimePolicies: {
        requestsMetadata: TokenLifetimePoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: TokenLifetimePoliciesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PoliciesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PoliciesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPolicyRootFromDiscriminatorValue,
        queryParametersMapper: PoliciesRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PoliciesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPolicyRootFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePolicyRoot,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
