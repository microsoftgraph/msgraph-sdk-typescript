/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAuthenticationStrengthPolicyFromDiscriminatorValue, serializeAuthenticationStrengthPolicy, type AuthenticationStrengthPolicy } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { CombinationConfigurationsRequestBuilderNavigationMetadata, CombinationConfigurationsRequestBuilderRequestsMetadata, type CombinationConfigurationsRequestBuilder } from './combinationConfigurations/';
// @ts-ignore
import { type UpdateAllowedCombinationsRequestBuilder, UpdateAllowedCombinationsRequestBuilderRequestsMetadata } from './updateAllowedCombinations/';
// @ts-ignore
import { type UsageRequestBuilder, UsageRequestBuilderRequestsMetadata } from './usage/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the authenticationStrengthPolicies property of the microsoft.graph.policyRoot entity.
 */
export interface AuthenticationStrengthPolicyItemRequestBuilder extends BaseRequestBuilder<AuthenticationStrengthPolicyItemRequestBuilder> {
    /**
     * Provides operations to manage the combinationConfigurations property of the microsoft.graph.authenticationStrengthPolicy entity.
     */
    get combinationConfigurations(): CombinationConfigurationsRequestBuilder;
    /**
     * Provides operations to call the updateAllowedCombinations method.
     */
    get updateAllowedCombinations(): UpdateAllowedCombinationsRequestBuilder;
    /**
     * Provides operations to call the usage method.
     */
    get usage(): UsageRequestBuilder;
    /**
     * Delete navigation property authenticationStrengthPolicies for policies
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The authentication method combinations that are to be used in scenarios defined by Microsoft Entra Conditional Access.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AuthenticationStrengthPolicy>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AuthenticationStrengthPolicyItemRequestBuilderGetQueryParameters> | undefined) : Promise<AuthenticationStrengthPolicy | undefined>;
    /**
     * Update the navigation property authenticationStrengthPolicies in policies
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AuthenticationStrengthPolicy>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: AuthenticationStrengthPolicy, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AuthenticationStrengthPolicy | undefined>;
    /**
     * Delete navigation property authenticationStrengthPolicies for policies
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The authentication method combinations that are to be used in scenarios defined by Microsoft Entra Conditional Access.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AuthenticationStrengthPolicyItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property authenticationStrengthPolicies in policies
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AuthenticationStrengthPolicy, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The authentication method combinations that are to be used in scenarios defined by Microsoft Entra Conditional Access.
 */
export interface AuthenticationStrengthPolicyItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const AuthenticationStrengthPolicyItemRequestBuilderUriTemplate = "{+baseurl}/policies/authenticationStrengthPolicies/{authenticationStrengthPolicy%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AuthenticationStrengthPolicyItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AuthenticationStrengthPolicyItemRequestBuilderNavigationMetadata: Record<Exclude<keyof AuthenticationStrengthPolicyItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    combinationConfigurations: {
        requestsMetadata: CombinationConfigurationsRequestBuilderRequestsMetadata,
        navigationMetadata: CombinationConfigurationsRequestBuilderNavigationMetadata,
    },
    updateAllowedCombinations: {
        requestsMetadata: UpdateAllowedCombinationsRequestBuilderRequestsMetadata,
    },
    usage: {
        requestsMetadata: UsageRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AuthenticationStrengthPolicyItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: AuthenticationStrengthPolicyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: AuthenticationStrengthPolicyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAuthenticationStrengthPolicyFromDiscriminatorValue,
        queryParametersMapper: AuthenticationStrengthPolicyItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: AuthenticationStrengthPolicyItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAuthenticationStrengthPolicyFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAuthenticationStrengthPolicy,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
