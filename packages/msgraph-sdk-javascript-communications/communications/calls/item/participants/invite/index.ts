/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createInvitationParticipantInfoFromDiscriminatorValue, createInviteParticipantsOperationFromDiscriminatorValue, serializeInvitationParticipantInfo, serializeInviteParticipantsOperation, type InvitationParticipantInfo, type InviteParticipantsOperation } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a invitePostRequestBody
 */
export function createInvitePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoInvitePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoInvitePostRequestBody(invitePostRequestBody: InvitePostRequestBody | undefined = {} as InvitePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { invitePostRequestBody.backingStoreEnabled = true; },
        "clientContext": n => { invitePostRequestBody.clientContext = n.getStringValue(); },
        "participants": n => { invitePostRequestBody.participants = n.getCollectionOfObjectValues<InvitationParticipantInfo>(createInvitationParticipantInfoFromDiscriminatorValue); },
    }
}
export interface InvitePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The clientContext property
     */
    clientContext?: string;
    /**
     * The participants property
     */
    participants?: InvitationParticipantInfo[];
}
/**
 * Provides operations to call the invite method.
 */
export interface InviteRequestBuilder extends BaseRequestBuilder<InviteRequestBuilder> {
    /**
     * Invite participants to the active call. For more information about how to handle operations, see commsOperation.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of InviteParticipantsOperation
     * @see {@link https://learn.microsoft.com/graph/api/participant-invite?view=graph-rest-1.0|Find more info here}
     */
     post(body: InvitePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<InviteParticipantsOperation | undefined>;
    /**
     * Invite participants to the active call. For more information about how to handle operations, see commsOperation.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: InvitePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInvitePostRequestBody(writer: SerializationWriter, invitePostRequestBody: InvitePostRequestBody | undefined = {} as InvitePostRequestBody) : void {
    writer.writeStringValue("clientContext", invitePostRequestBody.clientContext);
    writer.writeCollectionOfObjectValues<InvitationParticipantInfo>("participants", invitePostRequestBody.participants, serializeInvitationParticipantInfo);
    writer.writeAdditionalData(invitePostRequestBody.additionalData);
}
/**
 * Metadata for all the requests in the request builder.
 */
export const InviteRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createInviteParticipantsOperationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeInvitePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const InviteRequestBuilderUriTemplate = "{+baseurl}/communications/calls/{call%2Did}/participants/invite";
/* tslint:enable */
/* eslint-enable */
