/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createOrganizationalBrandingLocalizationFromDiscriminatorValue, serializeOrganizationalBrandingLocalization, type OrganizationalBrandingLocalization } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { BackgroundImageRequestBuilderRequestsMetadata, type BackgroundImageRequestBuilder } from './backgroundImage/';
import { BannerLogoRequestBuilderRequestsMetadata, type BannerLogoRequestBuilder } from './bannerLogo/';
import { CustomCSSRequestBuilderRequestsMetadata, type CustomCSSRequestBuilder } from './customCSS/';
import { FaviconRequestBuilderRequestsMetadata, type FaviconRequestBuilder } from './favicon/';
import { HeaderLogoRequestBuilderRequestsMetadata, type HeaderLogoRequestBuilder } from './headerLogo/';
import { SquareLogoRequestBuilderRequestsMetadata, type SquareLogoRequestBuilder } from './squareLogo/';
import { SquareLogoDarkRequestBuilderRequestsMetadata, type SquareLogoDarkRequestBuilder } from './squareLogoDark/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the localizations property of the microsoft.graph.organizationalBranding entity.
 */
export interface OrganizationalBrandingLocalizationItemRequestBuilder extends BaseRequestBuilder<OrganizationalBrandingLocalizationItemRequestBuilder> {
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get backgroundImage(): BackgroundImageRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get bannerLogo(): BannerLogoRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get customCSS(): CustomCSSRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get favicon(): FaviconRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get headerLogo(): HeaderLogoRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get squareLogo(): SquareLogoRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get squareLogoDark(): SquareLogoDarkRequestBuilder;
    /**
     * Delete a localized branding object. To delete the organizationalBrandingLocalization object, all images (Stream types) must first be removed from the object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/organizationalbrandinglocalization-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Read the properties and relationships of an organizationalBrandingLocalization object. To retrieve a localization branding object, specify the value of id in the URL.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OrganizationalBrandingLocalization>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/organizationalbrandinglocalization-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<OrganizationalBrandingLocalizationItemRequestBuilderGetQueryParameters> | undefined) : Promise<OrganizationalBrandingLocalization | undefined>;
    /**
     * Update the properties of an organizationalBrandingLocalization object for a specific localization.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OrganizationalBrandingLocalization>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/organizationalbrandinglocalization-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: OrganizationalBrandingLocalization, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<OrganizationalBrandingLocalization | undefined>;
    /**
     * Delete a localized branding object. To delete the organizationalBrandingLocalization object, all images (Stream types) must first be removed from the object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Read the properties and relationships of an organizationalBrandingLocalization object. To retrieve a localization branding object, specify the value of id in the URL.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<OrganizationalBrandingLocalizationItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of an organizationalBrandingLocalization object for a specific localization.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: OrganizationalBrandingLocalization, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Read the properties and relationships of an organizationalBrandingLocalization object. To retrieve a localization branding object, specify the value of id in the URL.
 */
export interface OrganizationalBrandingLocalizationItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const OrganizationalBrandingLocalizationItemRequestBuilderUriTemplate = "{+baseurl}/organization/{organization%2Did}/branding/localizations/{organizationalBrandingLocalization%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const OrganizationalBrandingLocalizationItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const OrganizationalBrandingLocalizationItemRequestBuilderNavigationMetadata: Record<Exclude<keyof OrganizationalBrandingLocalizationItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    backgroundImage: {
        requestsMetadata: BackgroundImageRequestBuilderRequestsMetadata,
    },
    bannerLogo: {
        requestsMetadata: BannerLogoRequestBuilderRequestsMetadata,
    },
    customCSS: {
        requestsMetadata: CustomCSSRequestBuilderRequestsMetadata,
    },
    favicon: {
        requestsMetadata: FaviconRequestBuilderRequestsMetadata,
    },
    headerLogo: {
        requestsMetadata: HeaderLogoRequestBuilderRequestsMetadata,
    },
    squareLogo: {
        requestsMetadata: SquareLogoRequestBuilderRequestsMetadata,
    },
    squareLogoDark: {
        requestsMetadata: SquareLogoDarkRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const OrganizationalBrandingLocalizationItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: OrganizationalBrandingLocalizationItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: OrganizationalBrandingLocalizationItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createOrganizationalBrandingLocalizationFromDiscriminatorValue,
        queryParametersMapper: OrganizationalBrandingLocalizationItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: OrganizationalBrandingLocalizationItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createOrganizationalBrandingLocalizationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeOrganizationalBrandingLocalization,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
