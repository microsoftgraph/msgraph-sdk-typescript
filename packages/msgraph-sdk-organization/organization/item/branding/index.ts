/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createOrganizationalBrandingFromDiscriminatorValue, serializeOrganizationalBranding, type OrganizationalBranding } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { BackgroundImageRequestBuilderRequestsMetadata, type BackgroundImageRequestBuilder } from './backgroundImage/';
// @ts-ignore
import { BannerLogoRequestBuilderRequestsMetadata, type BannerLogoRequestBuilder } from './bannerLogo/';
// @ts-ignore
import { CustomCSSRequestBuilderRequestsMetadata, type CustomCSSRequestBuilder } from './customCSS/';
// @ts-ignore
import { FaviconRequestBuilderRequestsMetadata, type FaviconRequestBuilder } from './favicon/';
// @ts-ignore
import { HeaderLogoRequestBuilderRequestsMetadata, type HeaderLogoRequestBuilder } from './headerLogo/';
// @ts-ignore
import { LocalizationsRequestBuilderNavigationMetadata, LocalizationsRequestBuilderRequestsMetadata, type LocalizationsRequestBuilder } from './localizations/';
// @ts-ignore
import { SquareLogoRequestBuilderRequestsMetadata, type SquareLogoRequestBuilder } from './squareLogo/';
// @ts-ignore
import { SquareLogoDarkRequestBuilderRequestsMetadata, type SquareLogoDarkRequestBuilder } from './squareLogoDark/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the branding property of the microsoft.graph.organization entity.
 */
export interface BrandingRequestBuilder extends BaseRequestBuilder<BrandingRequestBuilder> {
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get backgroundImage(): BackgroundImageRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get bannerLogo(): BannerLogoRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get customCSS(): CustomCSSRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get favicon(): FaviconRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get headerLogo(): HeaderLogoRequestBuilder;
    /**
     * Provides operations to manage the localizations property of the microsoft.graph.organizationalBranding entity.
     */
    get localizations(): LocalizationsRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get squareLogo(): SquareLogoRequestBuilder;
    /**
     * Provides operations to manage the media for the organization entity.
     */
    get squareLogoDark(): SquareLogoDarkRequestBuilder;
    /**
     * Delete navigation property branding for organization
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Branding for the organization. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OrganizationalBranding>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<BrandingRequestBuilderGetQueryParameters> | undefined) : Promise<OrganizationalBranding | undefined>;
    /**
     * Update the navigation property branding in organization
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OrganizationalBranding>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: OrganizationalBranding, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<OrganizationalBranding | undefined>;
    /**
     * Delete navigation property branding for organization
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Branding for the organization. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<BrandingRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property branding in organization
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: OrganizationalBranding, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Branding for the organization. Nullable.
 */
export interface BrandingRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const BrandingRequestBuilderUriTemplate = "{+baseurl}/organization/{organization%2Did}/branding{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const BrandingRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const BrandingRequestBuilderNavigationMetadata: Record<Exclude<keyof BrandingRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    backgroundImage: {
        requestsMetadata: BackgroundImageRequestBuilderRequestsMetadata,
    },
    bannerLogo: {
        requestsMetadata: BannerLogoRequestBuilderRequestsMetadata,
    },
    customCSS: {
        requestsMetadata: CustomCSSRequestBuilderRequestsMetadata,
    },
    favicon: {
        requestsMetadata: FaviconRequestBuilderRequestsMetadata,
    },
    headerLogo: {
        requestsMetadata: HeaderLogoRequestBuilderRequestsMetadata,
    },
    localizations: {
        requestsMetadata: LocalizationsRequestBuilderRequestsMetadata,
        navigationMetadata: LocalizationsRequestBuilderNavigationMetadata,
    },
    squareLogo: {
        requestsMetadata: SquareLogoRequestBuilderRequestsMetadata,
    },
    squareLogoDark: {
        requestsMetadata: SquareLogoDarkRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const BrandingRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: BrandingRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: BrandingRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createOrganizationalBrandingFromDiscriminatorValue,
        queryParametersMapper: BrandingRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: BrandingRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createOrganizationalBrandingFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeOrganizationalBranding,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
