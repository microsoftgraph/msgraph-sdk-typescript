/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { createAlertCommentFromDiscriminatorValue, serializeAlertComment, type AlertComment } from '@microsoft/msgraph-sdk/models/security/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /security/incidents/{incident-id}/alerts/{alert-id}/comments
 */
export interface CommentsRequestBuilder extends BaseRequestBuilder<CommentsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Sets a new value for the collection of alertComment.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AlertComment[]>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: AlertComment[], requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AlertComment[] | undefined>;
    /**
     * Sets a new value for the collection of alertComment.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: AlertComment[], requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const CommentsRequestBuilderUriTemplate = "{+baseurl}/security/incidents/{incident%2Did}/alerts/{alert%2Did}/comments";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CommentsRequestBuilderNavigationMetadata: Record<Exclude<keyof CommentsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CommentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: CommentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendCollectionAsync",
        responseBodyFactory:  createAlertCommentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAlertComment,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
