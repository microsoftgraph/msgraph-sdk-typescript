/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { createHuntingQueryResultsFromDiscriminatorValue, serializeHuntingQueryResults, type HuntingQueryResults } from '@microsoft/msgraph-sdk/models/security/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RunHuntingQueryPostRequestBody}
 */
// @ts-ignore
export function createRunHuntingQueryPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRunHuntingQueryPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param RunHuntingQueryPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRunHuntingQueryPostRequestBody(runHuntingQueryPostRequestBody: Partial<RunHuntingQueryPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { runHuntingQueryPostRequestBody.backingStoreEnabled = true; },
        "query": n => { runHuntingQueryPostRequestBody.query = n.getStringValue(); },
        "timespan": n => { runHuntingQueryPostRequestBody.timespan = n.getStringValue(); },
    }
}
/**
 * Provides operations to call the runHuntingQuery method.
 */
export interface MicrosoftGraphSecurityRunHuntingQueryRequestBuilder extends BaseRequestBuilder<MicrosoftGraphSecurityRunHuntingQueryRequestBuilder> {
    /**
     * Queries a specified set of event, activity, or entity data supported by Microsoft 365 Defender to proactively look for specific threats in your environment. This method is for advanced hunting in Microsoft 365 Defender. This method includes a query in Kusto Query Language (KQL). It specifies a data table in the advanced hunting schema and a piped sequence of operators to filter or search that data, and format the query output in specific ways.  Find out more about hunting for threats across devices, emails, apps, and identities. Learn about KQL. For information on using advanced hunting in the Microsoft 365 Defender portal, see Proactively hunt for threats with advanced hunting in Microsoft 365 Defender.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<HuntingQueryResults>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: RunHuntingQueryPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<HuntingQueryResults | undefined>;
    /**
     * Queries a specified set of event, activity, or entity data supported by Microsoft 365 Defender to proactively look for specific threats in your environment. This method is for advanced hunting in Microsoft 365 Defender. This method includes a query in Kusto Query Language (KQL). It specifies a data table in the advanced hunting schema and a piped sequence of operators to filter or search that data, and format the query output in specific ways.  Find out more about hunting for threats across devices, emails, apps, and identities. Learn about KQL. For information on using advanced hunting in the Microsoft 365 Defender portal, see Proactively hunt for threats with advanced hunting in Microsoft 365 Defender.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: RunHuntingQueryPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface RunHuntingQueryPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The query property
     */
    query?: string | null;
    /**
     * The timespan property
     */
    timespan?: string | null;
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RunHuntingQueryPostRequestBody The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRunHuntingQueryPostRequestBody(writer: SerializationWriter, runHuntingQueryPostRequestBody: Partial<RunHuntingQueryPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!runHuntingQueryPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("query", runHuntingQueryPostRequestBody.query);
    writer.writeStringValue("timespan", runHuntingQueryPostRequestBody.timespan);
    writer.writeAdditionalData(runHuntingQueryPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const MicrosoftGraphSecurityRunHuntingQueryRequestBuilderUriTemplate = "{+baseurl}/security/microsoft.graph.security.runHuntingQuery";
/**
 * Metadata for all the requests in the request builder.
 */
export const MicrosoftGraphSecurityRunHuntingQueryRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: MicrosoftGraphSecurityRunHuntingQueryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createHuntingQueryResultsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRunHuntingQueryPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
