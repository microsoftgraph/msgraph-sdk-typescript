/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTeamFromDiscriminatorValue, type Team } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the team property of the microsoft.graph.subjectRightsRequest entity.
 */
export interface TeamRequestBuilder extends BaseRequestBuilder<TeamRequestBuilder> {
    /**
     * Information about the Microsoft Teams team that was created for the request.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Team>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<TeamRequestBuilderGetQueryParameters> | undefined) : Promise<Team | undefined>;
    /**
     * Information about the Microsoft Teams team that was created for the request.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TeamRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Information about the Microsoft Teams team that was created for the request.
 */
export interface TeamRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const TeamRequestBuilderUriTemplate = "{+baseurl}/security/subjectRightsRequests/{subjectRightsRequest%2Did}/team{?%24expand,%24select}";
/**
 * Provides operations to manage the team property of the microsoft.graph.subjectRightsRequest entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AllChannels: "allChannels",
    Channels: "channels",
    Group: "group",
    IncomingChannels: "incomingChannels",
    InstalledApps: "installedApps",
    Members: "members",
    Operations: "operations",
    PermissionGrants: "permissionGrants",
    Photo: "photo",
    PrimaryChannel: "primaryChannel",
    Schedule: "schedule",
    Tags: "tags",
    Template: "template",
} as const;
/**
 * Provides operations to manage the team property of the microsoft.graph.subjectRightsRequest entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Classification: "classification",
    CreatedDateTime: "createdDateTime",
    Description: "description",
    DisplayName: "displayName",
    FunSettings: "funSettings",
    GuestSettings: "guestSettings",
    InternalId: "internalId",
    IsArchived: "isArchived",
    MemberSettings: "memberSettings",
    MessagingSettings: "messagingSettings",
    Specialization: "specialization",
    Summary: "summary",
    TenantId: "tenantId",
    Visibility: "visibility",
    WebUrl: "webUrl",
    AllChannels: "allChannels",
    Channels: "channels",
    Group: "group",
    IncomingChannels: "incomingChannels",
    InstalledApps: "installedApps",
    Members: "members",
    Operations: "operations",
    PermissionGrants: "permissionGrants",
    Photo: "photo",
    PrimaryChannel: "primaryChannel",
    Schedule: "schedule",
    Tags: "tags",
    Template: "template",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TeamRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TeamRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TeamRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createTeamFromDiscriminatorValue,
        queryParametersMapper: TeamRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
