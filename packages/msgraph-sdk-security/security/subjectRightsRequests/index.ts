/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSubjectRightsRequestCollectionResponseFromDiscriminatorValue, createSubjectRightsRequestFromDiscriminatorValue, serializeSubjectRightsRequest, type SubjectRightsRequest, type SubjectRightsRequestCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { SubjectRightsRequestItemRequestBuilderNavigationMetadata, SubjectRightsRequestItemRequestBuilderRequestsMetadata, type SubjectRightsRequestItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the subjectRightsRequests property of the microsoft.graph.security entity.
 */
export interface SubjectRightsRequestsRequestBuilder extends BaseRequestBuilder<SubjectRightsRequestsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the subjectRightsRequests property of the microsoft.graph.security entity.
     * @param subjectRightsRequestId The unique identifier of subjectRightsRequest
     * @returns {SubjectRightsRequestItemRequestBuilder}
     */
     bySubjectRightsRequestId(subjectRightsRequestId: string) : SubjectRightsRequestItemRequestBuilder;
    /**
     * Get subjectRightsRequests from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubjectRightsRequestCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SubjectRightsRequestsRequestBuilderGetQueryParameters> | undefined) : Promise<SubjectRightsRequestCollectionResponse | undefined>;
    /**
     * Create new navigation property to subjectRightsRequests for security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubjectRightsRequest>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: SubjectRightsRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubjectRightsRequest | undefined>;
    /**
     * Get subjectRightsRequests from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SubjectRightsRequestsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to subjectRightsRequests for security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SubjectRightsRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get subjectRightsRequests from security
 */
export interface SubjectRightsRequestsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const SubjectRightsRequestsRequestBuilderUriTemplate = "{+baseurl}/security/subjectRightsRequests{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the subjectRightsRequests property of the microsoft.graph.security entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Approvers: "approvers",
    Collaborators: "collaborators",
    Notes: "notes",
    Team: "team",
} as const;
/**
 * Provides operations to manage the subjectRightsRequests property of the microsoft.graph.security entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AssignedTo: "assignedTo",
    AssignedToDesc: "assignedTo desc",
    ClosedDateTime: "closedDateTime",
    ClosedDateTimeDesc: "closedDateTime desc",
    ContentQuery: "contentQuery",
    ContentQueryDesc: "contentQuery desc",
    CreatedBy: "createdBy",
    CreatedByDesc: "createdBy desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    DataSubject: "dataSubject",
    DataSubjectDesc: "dataSubject desc",
    DataSubjectType: "dataSubjectType",
    DataSubjectTypeDesc: "dataSubjectType desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    ExternalId: "externalId",
    ExternalIdDesc: "externalId desc",
    History: "history",
    HistoryDesc: "history desc",
    IncludeAllVersions: "includeAllVersions",
    IncludeAllVersionsDesc: "includeAllVersions desc",
    IncludeAuthoredContent: "includeAuthoredContent",
    IncludeAuthoredContentDesc: "includeAuthoredContent desc",
    Insight: "insight",
    InsightDesc: "insight desc",
    InternalDueDateTime: "internalDueDateTime",
    InternalDueDateTimeDesc: "internalDueDateTime desc",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedByDesc: "lastModifiedBy desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    MailboxLocations: "mailboxLocations",
    MailboxLocationsDesc: "mailboxLocations desc",
    PauseAfterEstimate: "pauseAfterEstimate",
    PauseAfterEstimateDesc: "pauseAfterEstimate desc",
    Regulations: "regulations",
    RegulationsDesc: "regulations desc",
    SiteLocations: "siteLocations",
    SiteLocationsDesc: "siteLocations desc",
    Stages: "stages",
    StagesDesc: "stages desc",
    Status: "status",
    StatusDesc: "status desc",
    Type: "type",
    TypeDesc: "type desc",
} as const;
/**
 * Provides operations to manage the subjectRightsRequests property of the microsoft.graph.security entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AssignedTo: "assignedTo",
    ClosedDateTime: "closedDateTime",
    ContentQuery: "contentQuery",
    CreatedBy: "createdBy",
    CreatedDateTime: "createdDateTime",
    DataSubject: "dataSubject",
    DataSubjectType: "dataSubjectType",
    Description: "description",
    DisplayName: "displayName",
    ExternalId: "externalId",
    History: "history",
    IncludeAllVersions: "includeAllVersions",
    IncludeAuthoredContent: "includeAuthoredContent",
    Insight: "insight",
    InternalDueDateTime: "internalDueDateTime",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedDateTime: "lastModifiedDateTime",
    MailboxLocations: "mailboxLocations",
    PauseAfterEstimate: "pauseAfterEstimate",
    Regulations: "regulations",
    SiteLocations: "siteLocations",
    Stages: "stages",
    Status: "status",
    Type: "type",
    Approvers: "approvers",
    Collaborators: "collaborators",
    Notes: "notes",
    Team: "team",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SubjectRightsRequestsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SubjectRightsRequestsRequestBuilderNavigationMetadata: Record<Exclude<keyof SubjectRightsRequestsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySubjectRightsRequestId: {
        requestsMetadata: SubjectRightsRequestItemRequestBuilderRequestsMetadata,
        navigationMetadata: SubjectRightsRequestItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["subjectRightsRequest%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SubjectRightsRequestsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SubjectRightsRequestsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubjectRightsRequestCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: SubjectRightsRequestsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: SubjectRightsRequestsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubjectRightsRequestFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSubjectRightsRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
