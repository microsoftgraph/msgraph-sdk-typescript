/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createComputeRightsAndInheritanceResultFromDiscriminatorValue, createProtectedContentFromDiscriminatorValue, serializeComputeRightsAndInheritanceResult, serializeProtectedContent, type ComputeRightsAndInheritanceResult, type ProtectedContent } from '@microsoft/msgraph-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ComputeRightsAndInheritancePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The delegatedUserEmail property
     */
    delegatedUserEmail?: string | null;
    /**
     * The locale property
     */
    locale?: string | null;
    /**
     * The protectedContents property
     */
    protectedContents?: ProtectedContent[] | null;
    /**
     * The supportedContentFormats property
     */
    supportedContentFormats?: string[] | null;
}
/**
 * Provides operations to call the computeRightsAndInheritance method.
 */
export interface ComputeRightsAndInheritanceRequestBuilder extends BaseRequestBuilder<ComputeRightsAndInheritanceRequestBuilder> {
    /**
     * Computes the rights and inheritance for sensitivity labels based on the input content and labels.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ComputeRightsAndInheritanceResult>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/sensitivitylabel-computerightsandinheritance?view=graph-rest-1.0|Find more info here}
     */
     post(body: ComputeRightsAndInheritancePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ComputeRightsAndInheritanceResult | undefined>;
    /**
     * Computes the rights and inheritance for sensitivity labels based on the input content and labels.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ComputeRightsAndInheritancePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ComputeRightsAndInheritancePostRequestBody}
 */
// @ts-ignore
export function createComputeRightsAndInheritancePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoComputeRightsAndInheritancePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param ComputeRightsAndInheritancePostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoComputeRightsAndInheritancePostRequestBody(computeRightsAndInheritancePostRequestBody: Partial<ComputeRightsAndInheritancePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { computeRightsAndInheritancePostRequestBody.backingStoreEnabled = true; },
        "delegatedUserEmail": n => { computeRightsAndInheritancePostRequestBody.delegatedUserEmail = n.getStringValue(); },
        "locale": n => { computeRightsAndInheritancePostRequestBody.locale = n.getStringValue(); },
        "protectedContents": n => { computeRightsAndInheritancePostRequestBody.protectedContents = n.getCollectionOfObjectValues<ProtectedContent>(createProtectedContentFromDiscriminatorValue); },
        "supportedContentFormats": n => { computeRightsAndInheritancePostRequestBody.supportedContentFormats = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
/**
 * Serializes information the current object
 * @param ComputeRightsAndInheritancePostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeComputeRightsAndInheritancePostRequestBody(writer: SerializationWriter, computeRightsAndInheritancePostRequestBody: Partial<ComputeRightsAndInheritancePostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!computeRightsAndInheritancePostRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("delegatedUserEmail", computeRightsAndInheritancePostRequestBody.delegatedUserEmail);
    writer.writeStringValue("locale", computeRightsAndInheritancePostRequestBody.locale);
    writer.writeCollectionOfObjectValues<ProtectedContent>("protectedContents", computeRightsAndInheritancePostRequestBody.protectedContents, serializeProtectedContent);
    writer.writeCollectionOfPrimitiveValues<string>("supportedContentFormats", computeRightsAndInheritancePostRequestBody.supportedContentFormats);
    writer.writeAdditionalData(computeRightsAndInheritancePostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ComputeRightsAndInheritanceRequestBuilderUriTemplate = "{+baseurl}/security/dataSecurityAndGovernance/sensitivityLabels/computeRightsAndInheritance";
/**
 * Metadata for all the requests in the request builder.
 */
export const ComputeRightsAndInheritanceRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ComputeRightsAndInheritanceRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createComputeRightsAndInheritanceResultFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeComputeRightsAndInheritancePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
