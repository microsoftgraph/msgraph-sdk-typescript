/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { createHostFromDiscriminatorValue, serializeHost, type Host } from '@microsoft/msgraph-sdk/models/security/';
import { ChildHostPairsRequestBuilderNavigationMetadata, ChildHostPairsRequestBuilderRequestsMetadata, type ChildHostPairsRequestBuilder } from './childHostPairs/';
import { ComponentsRequestBuilderNavigationMetadata, ComponentsRequestBuilderRequestsMetadata, type ComponentsRequestBuilder } from './components/';
import { CookiesRequestBuilderNavigationMetadata, CookiesRequestBuilderRequestsMetadata, type CookiesRequestBuilder } from './cookies/';
import { HostPairsRequestBuilderNavigationMetadata, HostPairsRequestBuilderRequestsMetadata, type HostPairsRequestBuilder } from './hostPairs/';
import { ParentHostPairsRequestBuilderNavigationMetadata, ParentHostPairsRequestBuilderRequestsMetadata, type ParentHostPairsRequestBuilder } from './parentHostPairs/';
import { PassiveDnsRequestBuilderNavigationMetadata, PassiveDnsRequestBuilderRequestsMetadata, type PassiveDnsRequestBuilder } from './passiveDns/';
import { PassiveDnsReverseRequestBuilderNavigationMetadata, PassiveDnsReverseRequestBuilderRequestsMetadata, type PassiveDnsReverseRequestBuilder } from './passiveDnsReverse/';
import { PortsRequestBuilderNavigationMetadata, PortsRequestBuilderRequestsMetadata, type PortsRequestBuilder } from './ports/';
import { ReputationRequestBuilderRequestsMetadata, type ReputationRequestBuilder } from './reputation/';
import { SslCertificatesRequestBuilderNavigationMetadata, SslCertificatesRequestBuilderRequestsMetadata, type SslCertificatesRequestBuilder } from './sslCertificates/';
import { SubdomainsRequestBuilderNavigationMetadata, SubdomainsRequestBuilderRequestsMetadata, type SubdomainsRequestBuilder } from './subdomains/';
import { TrackersRequestBuilderNavigationMetadata, TrackersRequestBuilderRequestsMetadata, type TrackersRequestBuilder } from './trackers/';
import { type WhoisRequestBuilder, WhoisRequestBuilderRequestsMetadata } from './whois/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the hosts property of the microsoft.graph.security.threatIntelligence entity.
 */
export interface HostItemRequestBuilder extends BaseRequestBuilder<HostItemRequestBuilder> {
    /**
     * Provides operations to manage the childHostPairs property of the microsoft.graph.security.host entity.
     */
    get childHostPairs(): ChildHostPairsRequestBuilder;
    /**
     * Provides operations to manage the components property of the microsoft.graph.security.host entity.
     */
    get components(): ComponentsRequestBuilder;
    /**
     * Provides operations to manage the cookies property of the microsoft.graph.security.host entity.
     */
    get cookies(): CookiesRequestBuilder;
    /**
     * Provides operations to manage the hostPairs property of the microsoft.graph.security.host entity.
     */
    get hostPairs(): HostPairsRequestBuilder;
    /**
     * Provides operations to manage the parentHostPairs property of the microsoft.graph.security.host entity.
     */
    get parentHostPairs(): ParentHostPairsRequestBuilder;
    /**
     * Provides operations to manage the passiveDns property of the microsoft.graph.security.host entity.
     */
    get passiveDns(): PassiveDnsRequestBuilder;
    /**
     * Provides operations to manage the passiveDnsReverse property of the microsoft.graph.security.host entity.
     */
    get passiveDnsReverse(): PassiveDnsReverseRequestBuilder;
    /**
     * Provides operations to manage the ports property of the microsoft.graph.security.host entity.
     */
    get ports(): PortsRequestBuilder;
    /**
     * Provides operations to manage the reputation property of the microsoft.graph.security.host entity.
     */
    get reputation(): ReputationRequestBuilder;
    /**
     * Provides operations to manage the sslCertificates property of the microsoft.graph.security.host entity.
     */
    get sslCertificates(): SslCertificatesRequestBuilder;
    /**
     * Provides operations to manage the subdomains property of the microsoft.graph.security.host entity.
     */
    get subdomains(): SubdomainsRequestBuilder;
    /**
     * Provides operations to manage the trackers property of the microsoft.graph.security.host entity.
     */
    get trackers(): TrackersRequestBuilder;
    /**
     * Provides operations to manage the whois property of the microsoft.graph.security.host entity.
     */
    get whois(): WhoisRequestBuilder;
    /**
     * Delete navigation property hosts for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Read the properties and relationships of a host object. The host resource is the abstract base type that returns an implementation. A host can be of one of the following types:
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Host>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/security-host-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<HostItemRequestBuilderGetQueryParameters> | undefined) : Promise<Host | undefined>;
    /**
     * Update the navigation property hosts in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Host>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Host, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Host | undefined>;
    /**
     * Delete navigation property hosts for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Read the properties and relationships of a host object. The host resource is the abstract base type that returns an implementation. A host can be of one of the following types:
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<HostItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property hosts in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Host, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Read the properties and relationships of a host object. The host resource is the abstract base type that returns an implementation. A host can be of one of the following types:
 */
export interface HostItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const HostItemRequestBuilderUriTemplate = "{+baseurl}/security/threatIntelligence/hosts/{host%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const HostItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const HostItemRequestBuilderNavigationMetadata: Record<Exclude<keyof HostItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    childHostPairs: {
        requestsMetadata: ChildHostPairsRequestBuilderRequestsMetadata,
        navigationMetadata: ChildHostPairsRequestBuilderNavigationMetadata,
    },
    components: {
        requestsMetadata: ComponentsRequestBuilderRequestsMetadata,
        navigationMetadata: ComponentsRequestBuilderNavigationMetadata,
    },
    cookies: {
        requestsMetadata: CookiesRequestBuilderRequestsMetadata,
        navigationMetadata: CookiesRequestBuilderNavigationMetadata,
    },
    hostPairs: {
        requestsMetadata: HostPairsRequestBuilderRequestsMetadata,
        navigationMetadata: HostPairsRequestBuilderNavigationMetadata,
    },
    parentHostPairs: {
        requestsMetadata: ParentHostPairsRequestBuilderRequestsMetadata,
        navigationMetadata: ParentHostPairsRequestBuilderNavigationMetadata,
    },
    passiveDns: {
        requestsMetadata: PassiveDnsRequestBuilderRequestsMetadata,
        navigationMetadata: PassiveDnsRequestBuilderNavigationMetadata,
    },
    passiveDnsReverse: {
        requestsMetadata: PassiveDnsReverseRequestBuilderRequestsMetadata,
        navigationMetadata: PassiveDnsReverseRequestBuilderNavigationMetadata,
    },
    ports: {
        requestsMetadata: PortsRequestBuilderRequestsMetadata,
        navigationMetadata: PortsRequestBuilderNavigationMetadata,
    },
    reputation: {
        requestsMetadata: ReputationRequestBuilderRequestsMetadata,
    },
    sslCertificates: {
        requestsMetadata: SslCertificatesRequestBuilderRequestsMetadata,
        navigationMetadata: SslCertificatesRequestBuilderNavigationMetadata,
    },
    subdomains: {
        requestsMetadata: SubdomainsRequestBuilderRequestsMetadata,
        navigationMetadata: SubdomainsRequestBuilderNavigationMetadata,
    },
    trackers: {
        requestsMetadata: TrackersRequestBuilderRequestsMetadata,
        navigationMetadata: TrackersRequestBuilderNavigationMetadata,
    },
    whois: {
        requestsMetadata: WhoisRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const HostItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: HostItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: HostItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createHostFromDiscriminatorValue,
        queryParametersMapper: HostItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: HostItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createHostFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeHost,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
