/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { createRetentionLabelFromDiscriminatorValue, serializeRetentionLabel, type RetentionLabel } from '@microsoft/msgraph-sdk/models/security/';
// @ts-ignore
import { DescriptorsRequestBuilderNavigationMetadata, DescriptorsRequestBuilderRequestsMetadata, type DescriptorsRequestBuilder } from './descriptors/';
// @ts-ignore
import { DispositionReviewStagesRequestBuilderNavigationMetadata, DispositionReviewStagesRequestBuilderRequestsMetadata, type DispositionReviewStagesRequestBuilder } from './dispositionReviewStages/';
// @ts-ignore
import { RetentionEventTypeRequestBuilderRequestsMetadata, type RetentionEventTypeRequestBuilder } from './retentionEventType/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the retentionLabels property of the microsoft.graph.security.labelsRoot entity.
 */
export interface RetentionLabelItemRequestBuilder extends BaseRequestBuilder<RetentionLabelItemRequestBuilder> {
    /**
     * Provides operations to manage the descriptors property of the microsoft.graph.security.retentionLabel entity.
     */
    get descriptors(): DescriptorsRequestBuilder;
    /**
     * Provides operations to manage the dispositionReviewStages property of the microsoft.graph.security.retentionLabel entity.
     */
    get dispositionReviewStages(): DispositionReviewStagesRequestBuilder;
    /**
     * Provides operations to manage the retentionEventType property of the microsoft.graph.security.retentionLabel entity.
     */
    get retentionEventType(): RetentionEventTypeRequestBuilder;
    /**
     * Delete navigation property retentionLabels for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Represents how customers can manage their data, whether and for how long to retain or delete it.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RetentionLabel>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<RetentionLabelItemRequestBuilderGetQueryParameters> | undefined) : Promise<RetentionLabel | undefined>;
    /**
     * Update the navigation property retentionLabels in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RetentionLabel>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: RetentionLabel, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RetentionLabel | undefined>;
    /**
     * Delete navigation property retentionLabels for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Represents how customers can manage their data, whether and for how long to retain or delete it.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RetentionLabelItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property retentionLabels in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: RetentionLabel, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Represents how customers can manage their data, whether and for how long to retain or delete it.
 */
export interface RetentionLabelItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const RetentionLabelItemRequestBuilderUriTemplate = "{+baseurl}/security/labels/retentionLabels/{retentionLabel%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RetentionLabelItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RetentionLabelItemRequestBuilderNavigationMetadata: Record<Exclude<keyof RetentionLabelItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    descriptors: {
        requestsMetadata: DescriptorsRequestBuilderRequestsMetadata,
        navigationMetadata: DescriptorsRequestBuilderNavigationMetadata,
    },
    dispositionReviewStages: {
        requestsMetadata: DispositionReviewStagesRequestBuilderRequestsMetadata,
        navigationMetadata: DispositionReviewStagesRequestBuilderNavigationMetadata,
    },
    retentionEventType: {
        requestsMetadata: RetentionEventTypeRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RetentionLabelItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: RetentionLabelItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: RetentionLabelItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRetentionLabelFromDiscriminatorValue,
        queryParametersMapper: RetentionLabelItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: RetentionLabelItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRetentionLabelFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRetentionLabel,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
