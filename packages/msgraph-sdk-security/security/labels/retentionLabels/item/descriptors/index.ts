/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { createFilePlanDescriptorFromDiscriminatorValue, serializeFilePlanDescriptor, type FilePlanDescriptor } from '@microsoft/msgraph-sdk/models/security/';
// @ts-ignore
import { AuthorityTemplateRequestBuilderRequestsMetadata, type AuthorityTemplateRequestBuilder } from './authorityTemplate/';
// @ts-ignore
import { CategoryTemplateRequestBuilderRequestsMetadata, type CategoryTemplateRequestBuilder } from './categoryTemplate/';
// @ts-ignore
import { CitationTemplateRequestBuilderRequestsMetadata, type CitationTemplateRequestBuilder } from './citationTemplate/';
// @ts-ignore
import { DepartmentTemplateRequestBuilderRequestsMetadata, type DepartmentTemplateRequestBuilder } from './departmentTemplate/';
// @ts-ignore
import { FilePlanReferenceTemplateRequestBuilderRequestsMetadata, type FilePlanReferenceTemplateRequestBuilder } from './filePlanReferenceTemplate/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the descriptors property of the microsoft.graph.security.retentionLabel entity.
 */
export interface DescriptorsRequestBuilder extends BaseRequestBuilder<DescriptorsRequestBuilder> {
    /**
     * Provides operations to manage the authorityTemplate property of the microsoft.graph.security.filePlanDescriptor entity.
     */
    get authorityTemplate(): AuthorityTemplateRequestBuilder;
    /**
     * Provides operations to manage the categoryTemplate property of the microsoft.graph.security.filePlanDescriptor entity.
     */
    get categoryTemplate(): CategoryTemplateRequestBuilder;
    /**
     * Provides operations to manage the citationTemplate property of the microsoft.graph.security.filePlanDescriptor entity.
     */
    get citationTemplate(): CitationTemplateRequestBuilder;
    /**
     * Provides operations to manage the departmentTemplate property of the microsoft.graph.security.filePlanDescriptor entity.
     */
    get departmentTemplate(): DepartmentTemplateRequestBuilder;
    /**
     * Provides operations to manage the filePlanReferenceTemplate property of the microsoft.graph.security.filePlanDescriptor entity.
     */
    get filePlanReferenceTemplate(): FilePlanReferenceTemplateRequestBuilder;
    /**
     * Delete navigation property descriptors for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Represents out-of-the-box values that provide more options to improve the manageability and organization of the content you need to label.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FilePlanDescriptor>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DescriptorsRequestBuilderGetQueryParameters> | undefined) : Promise<FilePlanDescriptor | undefined>;
    /**
     * Update the navigation property descriptors in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<FilePlanDescriptor>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: FilePlanDescriptor, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<FilePlanDescriptor | undefined>;
    /**
     * Delete navigation property descriptors for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Represents out-of-the-box values that provide more options to improve the manageability and organization of the content you need to label.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DescriptorsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property descriptors in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: FilePlanDescriptor, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Represents out-of-the-box values that provide more options to improve the manageability and organization of the content you need to label.
 */
export interface DescriptorsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const DescriptorsRequestBuilderUriTemplate = "{+baseurl}/security/labels/retentionLabels/{retentionLabel%2Did}/descriptors{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DescriptorsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DescriptorsRequestBuilderNavigationMetadata: Record<Exclude<keyof DescriptorsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    authorityTemplate: {
        requestsMetadata: AuthorityTemplateRequestBuilderRequestsMetadata,
    },
    categoryTemplate: {
        requestsMetadata: CategoryTemplateRequestBuilderRequestsMetadata,
    },
    citationTemplate: {
        requestsMetadata: CitationTemplateRequestBuilderRequestsMetadata,
    },
    departmentTemplate: {
        requestsMetadata: DepartmentTemplateRequestBuilderRequestsMetadata,
    },
    filePlanReferenceTemplate: {
        requestsMetadata: FilePlanReferenceTemplateRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DescriptorsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DescriptorsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: DescriptorsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFilePlanDescriptorFromDiscriminatorValue,
        queryParametersMapper: DescriptorsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: DescriptorsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createFilePlanDescriptorFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeFilePlanDescriptor,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
