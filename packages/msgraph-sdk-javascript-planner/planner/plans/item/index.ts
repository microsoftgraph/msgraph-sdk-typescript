/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPlannerPlanFromDiscriminatorValue, serializePlannerPlan, type PlannerPlan } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { BucketsRequestBuilderNavigationMetadata, BucketsRequestBuilderRequestsMetadata, BucketsRequestBuilderUriTemplate, type BucketsRequestBuilder } from './buckets/';
import { DetailsRequestBuilderRequestsMetadata, DetailsRequestBuilderUriTemplate, type DetailsRequestBuilder } from './details/';
import { TasksRequestBuilderNavigationMetadata, TasksRequestBuilderRequestsMetadata, TasksRequestBuilderUriTemplate, type TasksRequestBuilder } from './tasks/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the plans property of the microsoft.graph.planner entity.
 */
export interface PlannerPlanItemRequestBuilder extends BaseRequestBuilder<PlannerPlanItemRequestBuilder> {
    /**
     * Provides operations to manage the buckets property of the microsoft.graph.plannerPlan entity.
     */
    get buckets(): BucketsRequestBuilder;
    /**
     * Provides operations to manage the details property of the microsoft.graph.plannerPlan entity.
     */
    get details(): DetailsRequestBuilder;
    /**
     * Provides operations to manage the tasks property of the microsoft.graph.plannerPlan entity.
     */
    get tasks(): TasksRequestBuilder;
    /**
     * Delete a plannerPlan object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @see {@link https://learn.microsoft.com/graph/api/plannerplan-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties and relationships of a plannerplan object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PlannerPlan
     * @see {@link https://learn.microsoft.com/graph/api/plannerplan-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<PlannerPlanItemRequestBuilderGetQueryParameters> | undefined) : Promise<PlannerPlan | undefined>;
    /**
     * Update the properties of a plannerPlan object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PlannerPlan
     * @see {@link https://learn.microsoft.com/graph/api/plannerplan-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: PlannerPlan, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PlannerPlan | undefined>;
    /**
     * Delete a plannerPlan object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties and relationships of a plannerplan object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PlannerPlanItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of a plannerPlan object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: PlannerPlan, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties and relationships of a plannerplan object.
 */
export interface PlannerPlanItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PlannerPlanItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PlannerPlanItemRequestBuilderNavigationMetadata: Record<Exclude<keyof PlannerPlanItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    buckets: {
        uriTemplate: BucketsRequestBuilderUriTemplate,
        requestsMetadata: BucketsRequestBuilderRequestsMetadata,
        navigationMetadata: BucketsRequestBuilderNavigationMetadata,
    },
    details: {
        uriTemplate: DetailsRequestBuilderUriTemplate,
        requestsMetadata: DetailsRequestBuilderRequestsMetadata,
    },
    tasks: {
        uriTemplate: TasksRequestBuilderUriTemplate,
        requestsMetadata: TasksRequestBuilderRequestsMetadata,
        navigationMetadata: TasksRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PlannerPlanItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPlannerPlanFromDiscriminatorValue,
        queryParametersMapper: PlannerPlanItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPlannerPlanFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePlannerPlan,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const PlannerPlanItemRequestBuilderUriTemplate = "{+baseurl}/planner/plans/{plannerPlan%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
