/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTeamworkFromDiscriminatorValue, serializeTeamwork, type Teamwork } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { DeletedTeamsRequestBuilderNavigationMetadata, DeletedTeamsRequestBuilderRequestsMetadata, type DeletedTeamsRequestBuilder } from './deletedTeams/';
import { SendActivityNotificationToRecipientsRequestBuilderRequestsMetadata, type SendActivityNotificationToRecipientsRequestBuilder } from './sendActivityNotificationToRecipients/';
import { TeamsAppSettingsRequestBuilderRequestsMetadata, type TeamsAppSettingsRequestBuilder } from './teamsAppSettings/';
import { type WorkforceIntegrationsRequestBuilder, WorkforceIntegrationsRequestBuilderNavigationMetadata, WorkforceIntegrationsRequestBuilderRequestsMetadata } from './workforceIntegrations/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the teamwork singleton.
 */
export interface TeamworkRequestBuilder extends BaseRequestBuilder<TeamworkRequestBuilder> {
    /**
     * Provides operations to manage the deletedTeams property of the microsoft.graph.teamwork entity.
     */
    get deletedTeams(): DeletedTeamsRequestBuilder;
    /**
     * Provides operations to call the sendActivityNotificationToRecipients method.
     */
    get sendActivityNotificationToRecipients(): SendActivityNotificationToRecipientsRequestBuilder;
    /**
     * Provides operations to manage the teamsAppSettings property of the microsoft.graph.teamwork entity.
     */
    get teamsAppSettings(): TeamsAppSettingsRequestBuilder;
    /**
     * Provides operations to manage the workforceIntegrations property of the microsoft.graph.teamwork entity.
     */
    get workforceIntegrations(): WorkforceIntegrationsRequestBuilder;
    /**
     * Get teamwork
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Teamwork>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<TeamworkRequestBuilderGetQueryParameters> | undefined) : Promise<Teamwork | undefined>;
    /**
     * Update teamwork
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Teamwork>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Teamwork, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Teamwork | undefined>;
    /**
     * Get teamwork
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TeamworkRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update teamwork
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Teamwork, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get teamwork
 */
export interface TeamworkRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const TeamworkRequestBuilderUriTemplate = "{+baseurl}/teamwork{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TeamworkRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TeamworkRequestBuilderNavigationMetadata: Record<Exclude<keyof TeamworkRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    deletedTeams: {
        requestsMetadata: DeletedTeamsRequestBuilderRequestsMetadata,
        navigationMetadata: DeletedTeamsRequestBuilderNavigationMetadata,
    },
    sendActivityNotificationToRecipients: {
        requestsMetadata: SendActivityNotificationToRecipientsRequestBuilderRequestsMetadata,
    },
    teamsAppSettings: {
        requestsMetadata: TeamsAppSettingsRequestBuilderRequestsMetadata,
    },
    workforceIntegrations: {
        requestsMetadata: WorkforceIntegrationsRequestBuilderRequestsMetadata,
        navigationMetadata: WorkforceIntegrationsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TeamworkRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: TeamworkRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTeamworkFromDiscriminatorValue,
        queryParametersMapper: TeamworkRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: TeamworkRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTeamworkFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTeamwork,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
