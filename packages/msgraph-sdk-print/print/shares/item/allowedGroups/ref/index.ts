/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createStringCollectionResponseFromDiscriminatorValue, serializeReferenceCreate, type ReferenceCreate, type StringCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
/**
 * Provides operations to manage the collection of print entities.
 */
export interface RefRequestBuilder extends BaseRequestBuilder<RefRequestBuilder> {
    /**
     * Revoke the specified group's access to submit print jobs to the associated printerShare.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/printershare-delete-allowedgroup?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<RefRequestBuilderDeleteQueryParameters> | undefined) : Promise<void>;
    /**
     * Retrieve a list of groups that have been granted access to submit print jobs to the associated printerShare.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<StringCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/printershare-list-allowedgroups?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<RefRequestBuilderGetQueryParameters> | undefined) : Promise<StringCollectionResponse | undefined>;
    /**
     * Grant the specified group access to submit print jobs to the associated printerShare.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/printershare-post-allowedgroups?view=graph-rest-1.0|Find more info here}
     */
     post(body: ReferenceCreate, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Revoke the specified group's access to submit print jobs to the associated printerShare.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<RefRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation;
    /**
     * Retrieve a list of groups that have been granted access to submit print jobs to the associated printerShare.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RefRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Grant the specified group access to submit print jobs to the associated printerShare.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ReferenceCreate, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Revoke the specified group's access to submit print jobs to the associated printerShare.
 */
export interface RefRequestBuilderDeleteQueryParameters {
    /**
     * The delete Uri
     */
    id?: string;
}
/**
 * Retrieve a list of groups that have been granted access to submit print jobs to the associated printerShare.
 */
export interface RefRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const RefRequestBuilderUriTemplate = "{+baseurl}/print/shares/{printerShare%2Did}/allowedGroups/$ref{?%24count,%24filter,%24orderby,%24search,%24skip,%24top}";
/**
 * Provides operations to manage the collection of print entities.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    DeletedDateTime: "deletedDateTime",
    DeletedDateTimeDesc: "deletedDateTime desc",
    AllowExternalSenders: "allowExternalSenders",
    AllowExternalSendersDesc: "allowExternalSenders desc",
    AssignedLabels: "assignedLabels",
    AssignedLabelsDesc: "assignedLabels desc",
    AssignedLicenses: "assignedLicenses",
    AssignedLicensesDesc: "assignedLicenses desc",
    AutoSubscribeNewMembers: "autoSubscribeNewMembers",
    AutoSubscribeNewMembersDesc: "autoSubscribeNewMembers desc",
    Classification: "classification",
    ClassificationDesc: "classification desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    ExpirationDateTime: "expirationDateTime",
    ExpirationDateTimeDesc: "expirationDateTime desc",
    GroupTypes: "groupTypes",
    GroupTypesDesc: "groupTypes desc",
    HasMembersWithLicenseErrors: "hasMembersWithLicenseErrors",
    HasMembersWithLicenseErrorsDesc: "hasMembersWithLicenseErrors desc",
    HideFromAddressLists: "hideFromAddressLists",
    HideFromAddressListsDesc: "hideFromAddressLists desc",
    HideFromOutlookClients: "hideFromOutlookClients",
    HideFromOutlookClientsDesc: "hideFromOutlookClients desc",
    IsArchived: "isArchived",
    IsArchivedDesc: "isArchived desc",
    IsAssignableToRole: "isAssignableToRole",
    IsAssignableToRoleDesc: "isAssignableToRole desc",
    IsSubscribedByMail: "isSubscribedByMail",
    IsSubscribedByMailDesc: "isSubscribedByMail desc",
    LicenseProcessingState: "licenseProcessingState",
    LicenseProcessingStateDesc: "licenseProcessingState desc",
    Mail: "mail",
    MailDesc: "mail desc",
    MailEnabled: "mailEnabled",
    MailEnabledDesc: "mailEnabled desc",
    MailNickname: "mailNickname",
    MailNicknameDesc: "mailNickname desc",
    MembershipRule: "membershipRule",
    MembershipRuleDesc: "membershipRule desc",
    MembershipRuleProcessingState: "membershipRuleProcessingState",
    MembershipRuleProcessingStateDesc: "membershipRuleProcessingState desc",
    OnPremisesDomainName: "onPremisesDomainName",
    OnPremisesDomainNameDesc: "onPremisesDomainName desc",
    OnPremisesLastSyncDateTime: "onPremisesLastSyncDateTime",
    OnPremisesLastSyncDateTimeDesc: "onPremisesLastSyncDateTime desc",
    OnPremisesNetBiosName: "onPremisesNetBiosName",
    OnPremisesNetBiosNameDesc: "onPremisesNetBiosName desc",
    OnPremisesProvisioningErrors: "onPremisesProvisioningErrors",
    OnPremisesProvisioningErrorsDesc: "onPremisesProvisioningErrors desc",
    OnPremisesSamAccountName: "onPremisesSamAccountName",
    OnPremisesSamAccountNameDesc: "onPremisesSamAccountName desc",
    OnPremisesSecurityIdentifier: "onPremisesSecurityIdentifier",
    OnPremisesSecurityIdentifierDesc: "onPremisesSecurityIdentifier desc",
    OnPremisesSyncEnabled: "onPremisesSyncEnabled",
    OnPremisesSyncEnabledDesc: "onPremisesSyncEnabled desc",
    PreferredDataLocation: "preferredDataLocation",
    PreferredDataLocationDesc: "preferredDataLocation desc",
    PreferredLanguage: "preferredLanguage",
    PreferredLanguageDesc: "preferredLanguage desc",
    ProxyAddresses: "proxyAddresses",
    ProxyAddressesDesc: "proxyAddresses desc",
    RenewedDateTime: "renewedDateTime",
    RenewedDateTimeDesc: "renewedDateTime desc",
    SecurityEnabled: "securityEnabled",
    SecurityEnabledDesc: "securityEnabled desc",
    SecurityIdentifier: "securityIdentifier",
    SecurityIdentifierDesc: "securityIdentifier desc",
    ServiceProvisioningErrors: "serviceProvisioningErrors",
    ServiceProvisioningErrorsDesc: "serviceProvisioningErrors desc",
    Theme: "theme",
    ThemeDesc: "theme desc",
    UniqueName: "uniqueName",
    UniqueNameDesc: "uniqueName desc",
    UnseenCount: "unseenCount",
    UnseenCountDesc: "unseenCount desc",
    Visibility: "visibility",
    VisibilityDesc: "visibility desc",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RefRequestBuilderDeleteQueryParametersMapper: Record<string, string> = {
    "id": "%40id",
};
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RefRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RefRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: RefRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        queryParametersMapper: RefRequestBuilderDeleteQueryParametersMapper,
    },
    get: {
        uriTemplate: RefRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createStringCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: RefRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: RefRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeReferenceCreate,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
