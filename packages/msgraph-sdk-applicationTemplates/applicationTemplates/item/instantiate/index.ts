/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createApplicationServicePrincipalFromDiscriminatorValue, serializeApplicationServicePrincipal, type ApplicationServicePrincipal } from '@microsoft/msgraph-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InstantiatePostRequestBody}
 */
// @ts-ignore
export function createInstantiatePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInstantiatePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInstantiatePostRequestBody(instantiatePostRequestBody: Partial<InstantiatePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { instantiatePostRequestBody.backingStoreEnabled = true; },
        "displayName": n => { instantiatePostRequestBody.displayName = n.getStringValue(); },
        "serviceManagementReference": n => { instantiatePostRequestBody.serviceManagementReference = n.getStringValue(); },
    }
}
export interface InstantiatePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The displayName property
     */
    displayName?: string | null;
    /**
     * The serviceManagementReference property
     */
    serviceManagementReference?: string | null;
}
/**
 * Provides operations to call the instantiate method.
 */
export interface InstantiateRequestBuilder extends BaseRequestBuilder<InstantiateRequestBuilder> {
    /**
     * Add an instance of an application from the Microsoft Entra application gallery into your directory. For non-gallery apps, use an application template with one of the following IDs to configure different single sign-on (SSO) modes like SAML SSO and password-based SSO.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApplicationServicePrincipal>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/applicationtemplate-instantiate?view=graph-rest-1.0|Find more info here}
     */
     post(body: InstantiatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ApplicationServicePrincipal | undefined>;
    /**
     * Add an instance of an application from the Microsoft Entra application gallery into your directory. For non-gallery apps, use an application template with one of the following IDs to configure different single sign-on (SSO) modes like SAML SSO and password-based SSO.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: InstantiatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInstantiatePostRequestBody(writer: SerializationWriter, instantiatePostRequestBody: Partial<InstantiatePostRequestBody> | undefined | null = {}) : void {
    if (instantiatePostRequestBody) {
        writer.writeStringValue("displayName", instantiatePostRequestBody.displayName);
        writer.writeStringValue("serviceManagementReference", instantiatePostRequestBody.serviceManagementReference);
        writer.writeAdditionalData(instantiatePostRequestBody.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const InstantiateRequestBuilderUriTemplate = "{+baseurl}/applicationTemplates/{applicationTemplate%2Did}/instantiate";
/**
 * Metadata for all the requests in the request builder.
 */
export const InstantiateRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: InstantiateRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApplicationServicePrincipalFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeInstantiatePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
