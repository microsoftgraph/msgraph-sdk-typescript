/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDeviceCollectionResponseFromDiscriminatorValue, createDeviceFromDiscriminatorValue, serializeDevice, type Device, type DeviceCollectionResponse } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
// @ts-ignore
import { DeltaRequestBuilderRequestsMetadata, type DeltaRequestBuilder } from './delta/';
// @ts-ignore
import { GetAvailableExtensionPropertiesRequestBuilderRequestsMetadata, type GetAvailableExtensionPropertiesRequestBuilder } from './getAvailableExtensionProperties/';
// @ts-ignore
import { GetByIdsRequestBuilderRequestsMetadata, type GetByIdsRequestBuilder } from './getByIds/';
// @ts-ignore
import { DeviceItemRequestBuilderNavigationMetadata, DeviceItemRequestBuilderRequestsMetadata, type DeviceItemRequestBuilder } from './item/';
// @ts-ignore
import { type ValidatePropertiesRequestBuilder, ValidatePropertiesRequestBuilderRequestsMetadata } from './validateProperties/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of device entities.
 */
export interface DevicesRequestBuilder extends BaseRequestBuilder<DevicesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the delta method.
     */
    get delta(): DeltaRequestBuilder;
    /**
     * Provides operations to call the getAvailableExtensionProperties method.
     */
    get getAvailableExtensionProperties(): GetAvailableExtensionPropertiesRequestBuilder;
    /**
     * Provides operations to call the getByIds method.
     */
    get getByIds(): GetByIdsRequestBuilder;
    /**
     * Provides operations to call the validateProperties method.
     */
    get validateProperties(): ValidatePropertiesRequestBuilder;
    /**
     * Provides operations to manage the collection of device entities.
     * @param deviceId The unique identifier of device
     * @returns {DeviceItemRequestBuilder}
     */
     byDeviceId(deviceId: string) : DeviceItemRequestBuilder;
    /**
     * Retrieve a list of device objects registered in the organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/device-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<DevicesRequestBuilderGetQueryParameters> | undefined) : Promise<DeviceCollectionResponse | undefined>;
    /**
     * Create and register a new device in the organization.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Device>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/device-post-devices?view=graph-rest-1.0|Find more info here}
     */
     post(body: Device, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Device | undefined>;
    /**
     * Retrieve a list of device objects registered in the organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DevicesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create and register a new device in the organization.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Device, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve a list of device objects registered in the organization.
 */
export interface DevicesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const DevicesRequestBuilderUriTemplate = "{+baseurl}/devices{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DevicesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DevicesRequestBuilderNavigationMetadata: Record<Exclude<keyof DevicesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDeviceId: {
        requestsMetadata: DeviceItemRequestBuilderRequestsMetadata,
        navigationMetadata: DeviceItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["device%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    delta: {
        requestsMetadata: DeltaRequestBuilderRequestsMetadata,
    },
    getAvailableExtensionProperties: {
        requestsMetadata: GetAvailableExtensionPropertiesRequestBuilderRequestsMetadata,
    },
    getByIds: {
        requestsMetadata: GetByIdsRequestBuilderRequestsMetadata,
    },
    validateProperties: {
        requestsMetadata: ValidatePropertiesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DevicesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DevicesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: DevicesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: DevicesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDevice,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
