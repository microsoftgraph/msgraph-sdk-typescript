/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDeviceFromDiscriminatorValue, deserializeIntoBaseDeltaFunctionResponse, serializeBaseDeltaFunctionResponse, serializeDevice, type BaseDeltaFunctionResponse, type Device } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeltaGetResponse}
 */
export function createDeltaGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeltaGetResponse;
}
export interface DeltaGetResponse extends BaseDeltaFunctionResponse, Parsable {
    /**
     * The value property
     */
    value?: Device[];
}
/**
 * Provides operations to call the delta method.
 */
export interface DeltaRequestBuilder extends BaseRequestBuilder<DeltaRequestBuilder> {
    /**
     * Invoke function delta
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeltaGetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeltaRequestBuilderGetQueryParameters> | undefined) : Promise<DeltaGetResponse | undefined>;
    /**
     * Invoke function delta
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeltaRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Invoke function delta
 */
export interface DeltaRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDeltaGetResponse(deltaGetResponse: Partial<DeltaGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseDeltaFunctionResponse(deltaGetResponse),
        "value": n => { deltaGetResponse.value = n.getCollectionOfObjectValues<Device>(createDeviceFromDiscriminatorValue); },
    }
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDeltaGetResponse(writer: SerializationWriter, deltaGetResponse: Partial<DeltaGetResponse> | undefined = {}) : void {
    serializeBaseDeltaFunctionResponse(writer, deltaGetResponse)
    writer.writeCollectionOfObjectValues<Device>("value", deltaGetResponse.value, serializeDevice);
}
/**
 * Uri template for the request builder.
 */
export const DeltaRequestBuilderUriTemplate = "{+baseurl}/devices/delta(){?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeltaRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeltaRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DeltaRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeltaGetResponseFromDiscriminatorValue,
        queryParametersMapper: DeltaRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to call the delta method.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Extensions: "extensions",
    MemberOf: "memberOf",
    RegisteredOwners: "registeredOwners",
    RegisteredUsers: "registeredUsers",
    TransitiveMemberOf: "transitiveMemberOf",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    DeletedDateTime: "deletedDateTime",
    DeletedDateTimeDesc: "deletedDateTime desc",
    AccountEnabled: "accountEnabled",
    AccountEnabledDesc: "accountEnabled desc",
    AlternativeSecurityIds: "alternativeSecurityIds",
    AlternativeSecurityIdsDesc: "alternativeSecurityIds desc",
    ApproximateLastSignInDateTime: "approximateLastSignInDateTime",
    ApproximateLastSignInDateTimeDesc: "approximateLastSignInDateTime desc",
    ComplianceExpirationDateTime: "complianceExpirationDateTime",
    ComplianceExpirationDateTimeDesc: "complianceExpirationDateTime desc",
    DeviceCategory: "deviceCategory",
    DeviceCategoryDesc: "deviceCategory desc",
    DeviceId: "deviceId",
    DeviceIdDesc: "deviceId desc",
    DeviceMetadata: "deviceMetadata",
    DeviceMetadataDesc: "deviceMetadata desc",
    DeviceOwnership: "deviceOwnership",
    DeviceOwnershipDesc: "deviceOwnership desc",
    DeviceVersion: "deviceVersion",
    DeviceVersionDesc: "deviceVersion desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    EnrollmentProfileName: "enrollmentProfileName",
    EnrollmentProfileNameDesc: "enrollmentProfileName desc",
    IsCompliant: "isCompliant",
    IsCompliantDesc: "isCompliant desc",
    IsManaged: "isManaged",
    IsManagedDesc: "isManaged desc",
    Manufacturer: "manufacturer",
    ManufacturerDesc: "manufacturer desc",
    MdmAppId: "mdmAppId",
    MdmAppIdDesc: "mdmAppId desc",
    Model: "model",
    ModelDesc: "model desc",
    OnPremisesLastSyncDateTime: "onPremisesLastSyncDateTime",
    OnPremisesLastSyncDateTimeDesc: "onPremisesLastSyncDateTime desc",
    OnPremisesSecurityIdentifier: "onPremisesSecurityIdentifier",
    OnPremisesSecurityIdentifierDesc: "onPremisesSecurityIdentifier desc",
    OnPremisesSyncEnabled: "onPremisesSyncEnabled",
    OnPremisesSyncEnabledDesc: "onPremisesSyncEnabled desc",
    OperatingSystem: "operatingSystem",
    OperatingSystemDesc: "operatingSystem desc",
    OperatingSystemVersion: "operatingSystemVersion",
    OperatingSystemVersionDesc: "operatingSystemVersion desc",
    PhysicalIds: "physicalIds",
    PhysicalIdsDesc: "physicalIds desc",
    ProfileType: "profileType",
    ProfileTypeDesc: "profileType desc",
    RegistrationDateTime: "registrationDateTime",
    RegistrationDateTimeDesc: "registrationDateTime desc",
    SystemLabels: "systemLabels",
    SystemLabelsDesc: "systemLabels desc",
    TrustType: "trustType",
    TrustTypeDesc: "trustType desc",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    AccountEnabled: "accountEnabled",
    AlternativeSecurityIds: "alternativeSecurityIds",
    ApproximateLastSignInDateTime: "approximateLastSignInDateTime",
    ComplianceExpirationDateTime: "complianceExpirationDateTime",
    DeviceCategory: "deviceCategory",
    DeviceId: "deviceId",
    DeviceMetadata: "deviceMetadata",
    DeviceOwnership: "deviceOwnership",
    DeviceVersion: "deviceVersion",
    DisplayName: "displayName",
    EnrollmentProfileName: "enrollmentProfileName",
    IsCompliant: "isCompliant",
    IsManaged: "isManaged",
    Manufacturer: "manufacturer",
    MdmAppId: "mdmAppId",
    Model: "model",
    OnPremisesLastSyncDateTime: "onPremisesLastSyncDateTime",
    OnPremisesSecurityIdentifier: "onPremisesSecurityIdentifier",
    OnPremisesSyncEnabled: "onPremisesSyncEnabled",
    OperatingSystem: "operatingSystem",
    OperatingSystemVersion: "operatingSystemVersion",
    PhysicalIds: "physicalIds",
    ProfileType: "profileType",
    RegistrationDateTime: "registrationDateTime",
    SystemLabels: "systemLabels",
    TrustType: "trustType",
    Extensions: "extensions",
    MemberOf: "memberOf",
    RegisteredOwners: "registeredOwners",
    RegisteredUsers: "registeredUsers",
    TransitiveMemberOf: "transitiveMemberOf",
} as const;
/* tslint:enable */
/* eslint-enable */
