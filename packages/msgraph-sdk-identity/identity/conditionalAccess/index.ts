/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createConditionalAccessRootFromDiscriminatorValue, serializeConditionalAccessRoot, type ConditionalAccessRoot } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { AuthenticationContextClassReferencesRequestBuilderNavigationMetadata, AuthenticationContextClassReferencesRequestBuilderRequestsMetadata, type AuthenticationContextClassReferencesRequestBuilder } from './authenticationContextClassReferences/';
import { AuthenticationStrengthRequestBuilderNavigationMetadata, AuthenticationStrengthRequestBuilderRequestsMetadata, type AuthenticationStrengthRequestBuilder } from './authenticationStrength/';
import { NamedLocationsRequestBuilderNavigationMetadata, NamedLocationsRequestBuilderRequestsMetadata, type NamedLocationsRequestBuilder } from './namedLocations/';
import { PoliciesRequestBuilderNavigationMetadata, PoliciesRequestBuilderRequestsMetadata, type PoliciesRequestBuilder } from './policies/';
import { TemplatesRequestBuilderNavigationMetadata, TemplatesRequestBuilderRequestsMetadata, type TemplatesRequestBuilder } from './templates/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the conditionalAccess property of the microsoft.graph.identityContainer entity.
 */
export interface ConditionalAccessRequestBuilder extends BaseRequestBuilder<ConditionalAccessRequestBuilder> {
    /**
     * Provides operations to manage the authenticationContextClassReferences property of the microsoft.graph.conditionalAccessRoot entity.
     */
    get authenticationContextClassReferences(): AuthenticationContextClassReferencesRequestBuilder;
    /**
     * Provides operations to manage the authenticationStrength property of the microsoft.graph.conditionalAccessRoot entity.
     */
    get authenticationStrength(): AuthenticationStrengthRequestBuilder;
    /**
     * Provides operations to manage the namedLocations property of the microsoft.graph.conditionalAccessRoot entity.
     */
    get namedLocations(): NamedLocationsRequestBuilder;
    /**
     * Provides operations to manage the policies property of the microsoft.graph.conditionalAccessRoot entity.
     */
    get policies(): PoliciesRequestBuilder;
    /**
     * Provides operations to manage the templates property of the microsoft.graph.conditionalAccessRoot entity.
     */
    get templates(): TemplatesRequestBuilder;
    /**
     * Delete navigation property conditionalAccess for identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * the entry point for the Conditional Access (CA) object model.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ConditionalAccessRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ConditionalAccessRequestBuilderGetQueryParameters> | undefined) : Promise<ConditionalAccessRoot | undefined>;
    /**
     * Update the navigation property conditionalAccess in identity
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ConditionalAccessRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: ConditionalAccessRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ConditionalAccessRoot | undefined>;
    /**
     * Delete navigation property conditionalAccess for identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * the entry point for the Conditional Access (CA) object model.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ConditionalAccessRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property conditionalAccess in identity
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: ConditionalAccessRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * the entry point for the Conditional Access (CA) object model.
 */
export interface ConditionalAccessRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ConditionalAccessRequestBuilderUriTemplate = "{+baseurl}/identity/conditionalAccess{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ConditionalAccessRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ConditionalAccessRequestBuilderNavigationMetadata: Record<Exclude<keyof ConditionalAccessRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    authenticationContextClassReferences: {
        requestsMetadata: AuthenticationContextClassReferencesRequestBuilderRequestsMetadata,
        navigationMetadata: AuthenticationContextClassReferencesRequestBuilderNavigationMetadata,
    },
    authenticationStrength: {
        requestsMetadata: AuthenticationStrengthRequestBuilderRequestsMetadata,
        navigationMetadata: AuthenticationStrengthRequestBuilderNavigationMetadata,
    },
    namedLocations: {
        requestsMetadata: NamedLocationsRequestBuilderRequestsMetadata,
        navigationMetadata: NamedLocationsRequestBuilderNavigationMetadata,
    },
    policies: {
        requestsMetadata: PoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: PoliciesRequestBuilderNavigationMetadata,
    },
    templates: {
        requestsMetadata: TemplatesRequestBuilderRequestsMetadata,
        navigationMetadata: TemplatesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ConditionalAccessRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ConditionalAccessRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: ConditionalAccessRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createConditionalAccessRootFromDiscriminatorValue,
        queryParametersMapper: ConditionalAccessRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ConditionalAccessRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createConditionalAccessRootFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeConditionalAccessRoot,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
