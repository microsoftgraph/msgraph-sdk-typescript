/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAuthenticationStrengthRootFromDiscriminatorValue, serializeAuthenticationStrengthRoot, type AuthenticationStrengthRoot } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { AuthenticationMethodModesRequestBuilderNavigationMetadata, AuthenticationMethodModesRequestBuilderRequestsMetadata, type AuthenticationMethodModesRequestBuilder } from './authenticationMethodModes/';
import { PoliciesRequestBuilderNavigationMetadata, PoliciesRequestBuilderRequestsMetadata, type PoliciesRequestBuilder } from './policies/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the authenticationStrength property of the microsoft.graph.conditionalAccessRoot entity.
 */
export interface AuthenticationStrengthRequestBuilder extends BaseRequestBuilder<AuthenticationStrengthRequestBuilder> {
    /**
     * Provides operations to manage the authenticationMethodModes property of the microsoft.graph.authenticationStrengthRoot entity.
     */
    get authenticationMethodModes(): AuthenticationMethodModesRequestBuilder;
    /**
     * Provides operations to manage the policies property of the microsoft.graph.authenticationStrengthRoot entity.
     */
    get policies(): PoliciesRequestBuilder;
    /**
     * Delete navigation property authenticationStrength for identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get authenticationStrength from identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AuthenticationStrengthRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AuthenticationStrengthRequestBuilderGetQueryParameters> | undefined) : Promise<AuthenticationStrengthRoot | undefined>;
    /**
     * Update the navigation property authenticationStrength in identity
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AuthenticationStrengthRoot>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: AuthenticationStrengthRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AuthenticationStrengthRoot | undefined>;
    /**
     * Delete navigation property authenticationStrength for identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get authenticationStrength from identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AuthenticationStrengthRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property authenticationStrength in identity
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AuthenticationStrengthRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get authenticationStrength from identity
 */
export interface AuthenticationStrengthRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const AuthenticationStrengthRequestBuilderUriTemplate = "{+baseurl}/identity/conditionalAccess/authenticationStrength{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AuthenticationStrengthRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AuthenticationStrengthRequestBuilderNavigationMetadata: Record<Exclude<keyof AuthenticationStrengthRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    authenticationMethodModes: {
        requestsMetadata: AuthenticationMethodModesRequestBuilderRequestsMetadata,
        navigationMetadata: AuthenticationMethodModesRequestBuilderNavigationMetadata,
    },
    policies: {
        requestsMetadata: PoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: PoliciesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AuthenticationStrengthRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: AuthenticationStrengthRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: AuthenticationStrengthRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAuthenticationStrengthRootFromDiscriminatorValue,
        queryParametersMapper: AuthenticationStrengthRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: AuthenticationStrengthRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAuthenticationStrengthRootFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAuthenticationStrengthRoot,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
