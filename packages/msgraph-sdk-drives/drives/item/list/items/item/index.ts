/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createListItemFromDiscriminatorValue, serializeListItem, type ListItem } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { AnalyticsRequestBuilderRequestsMetadata, type AnalyticsRequestBuilder } from './analytics/';
// @ts-ignore
import { CreatedByUserRequestBuilderNavigationMetadata, CreatedByUserRequestBuilderRequestsMetadata, type CreatedByUserRequestBuilder } from './createdByUser/';
// @ts-ignore
import { CreateLinkRequestBuilderRequestsMetadata, type CreateLinkRequestBuilder } from './createLink/';
// @ts-ignore
import { DocumentSetVersionsRequestBuilderNavigationMetadata, DocumentSetVersionsRequestBuilderRequestsMetadata, type DocumentSetVersionsRequestBuilder } from './documentSetVersions/';
// @ts-ignore
import { DriveItemRequestBuilderNavigationMetadata, DriveItemRequestBuilderRequestsMetadata, type DriveItemRequestBuilder } from './driveItem/';
// @ts-ignore
import { FieldsRequestBuilderRequestsMetadata, type FieldsRequestBuilder } from './fields/';
// @ts-ignore
import { GetActivitiesByIntervalRequestBuilderRequestsMetadata, type GetActivitiesByIntervalRequestBuilder } from './getActivitiesByInterval/';
// @ts-ignore
import { GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilderRequestsMetadata, type GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder } from './getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval/';
// @ts-ignore
import { LastModifiedByUserRequestBuilderNavigationMetadata, LastModifiedByUserRequestBuilderRequestsMetadata, type LastModifiedByUserRequestBuilder } from './lastModifiedByUser/';
// @ts-ignore
import { type VersionsRequestBuilder, VersionsRequestBuilderNavigationMetadata, VersionsRequestBuilderRequestsMetadata } from './versions/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the items property of the microsoft.graph.list entity.
 */
export interface ListItemItemRequestBuilder extends BaseRequestBuilder<ListItemItemRequestBuilder> {
    /**
     * Provides operations to manage the analytics property of the microsoft.graph.listItem entity.
     */
    get analytics(): AnalyticsRequestBuilder;
    /**
     * Provides operations to manage the createdByUser property of the microsoft.graph.baseItem entity.
     */
    get createdByUser(): CreatedByUserRequestBuilder;
    /**
     * Provides operations to call the createLink method.
     */
    get createLink(): CreateLinkRequestBuilder;
    /**
     * Provides operations to manage the documentSetVersions property of the microsoft.graph.listItem entity.
     */
    get documentSetVersions(): DocumentSetVersionsRequestBuilder;
    /**
     * Provides operations to manage the driveItem property of the microsoft.graph.listItem entity.
     */
    get driveItem(): DriveItemRequestBuilder;
    /**
     * Provides operations to manage the fields property of the microsoft.graph.listItem entity.
     */
    get fields(): FieldsRequestBuilder;
    /**
     * Provides operations to call the getActivitiesByInterval method.
     */
    get getActivitiesByInterval(): GetActivitiesByIntervalRequestBuilder;
    /**
     * Provides operations to manage the lastModifiedByUser property of the microsoft.graph.baseItem entity.
     */
    get lastModifiedByUser(): LastModifiedByUserRequestBuilder;
    /**
     * Provides operations to manage the versions property of the microsoft.graph.listItem entity.
     */
    get versions(): VersionsRequestBuilder;
    /**
     * Delete navigation property items for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * All items contained in the list.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ListItem>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ListItemItemRequestBuilderGetQueryParameters> | undefined) : Promise<ListItem | undefined>;
    /**
     * Provides operations to call the getActivitiesByInterval method.
     * @param endDateTime Usage: endDateTime='{endDateTime}'
     * @param interval Usage: interval='{interval}'
     * @param startDateTime Usage: startDateTime='{startDateTime}'
     * @returns {GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder}
     */
     getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval(endDateTime: string | undefined, interval: string | undefined, startDateTime: string | undefined) : GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
    /**
     * Update the navigation property items in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ListItem>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: ListItem, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ListItem | undefined>;
    /**
     * Delete navigation property items for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * All items contained in the list.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ListItemItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property items in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: ListItem, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * All items contained in the list.
 */
export interface ListItemItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ListItemItemRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/list/items/{listItem%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ListItemItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ListItemItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ListItemItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval: {
        requestsMetadata: GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilderRequestsMetadata,
    },
    analytics: {
        requestsMetadata: AnalyticsRequestBuilderRequestsMetadata,
    },
    createdByUser: {
        requestsMetadata: CreatedByUserRequestBuilderRequestsMetadata,
        navigationMetadata: CreatedByUserRequestBuilderNavigationMetadata,
    },
    createLink: {
        requestsMetadata: CreateLinkRequestBuilderRequestsMetadata,
    },
    documentSetVersions: {
        requestsMetadata: DocumentSetVersionsRequestBuilderRequestsMetadata,
        navigationMetadata: DocumentSetVersionsRequestBuilderNavigationMetadata,
    },
    driveItem: {
        requestsMetadata: DriveItemRequestBuilderRequestsMetadata,
        navigationMetadata: DriveItemRequestBuilderNavigationMetadata,
    },
    fields: {
        requestsMetadata: FieldsRequestBuilderRequestsMetadata,
    },
    getActivitiesByInterval: {
        requestsMetadata: GetActivitiesByIntervalRequestBuilderRequestsMetadata,
    },
    lastModifiedByUser: {
        requestsMetadata: LastModifiedByUserRequestBuilderRequestsMetadata,
        navigationMetadata: LastModifiedByUserRequestBuilderNavigationMetadata,
    },
    versions: {
        requestsMetadata: VersionsRequestBuilderRequestsMetadata,
        navigationMetadata: VersionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ListItemItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ListItemItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ListItemItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createListItemFromDiscriminatorValue,
        queryParametersMapper: ListItemItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ListItemItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createListItemFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeListItem,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
