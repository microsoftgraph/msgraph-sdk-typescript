/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDriveItemFromDiscriminatorValue, deserializeIntoBaseDeltaFunctionResponse, serializeBaseDeltaFunctionResponse, serializeDriveItem, type BaseDeltaFunctionResponse, type DriveItem } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeltaWithTokenGetResponse}
 */
export function createDeltaWithTokenGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeltaWithTokenGetResponse;
}
export interface DeltaWithTokenGetResponse extends BaseDeltaFunctionResponse, Parsable {
    /**
     * The value property
     */
    value?: DriveItem[];
}
/**
 * Provides operations to call the delta method.
 */
export interface DeltaWithTokenRequestBuilder extends BaseRequestBuilder<DeltaWithTokenRequestBuilder> {
    /**
     * Invoke function delta
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeltaWithTokenGetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeltaWithTokenRequestBuilderGetQueryParameters> | undefined) : Promise<DeltaWithTokenGetResponse | undefined>;
    /**
     * Invoke function delta
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeltaWithTokenRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Invoke function delta
 */
export interface DeltaWithTokenRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDeltaWithTokenGetResponse(deltaWithTokenGetResponse: Partial<DeltaWithTokenGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseDeltaFunctionResponse(deltaWithTokenGetResponse),
        "value": n => { deltaWithTokenGetResponse.value = n.getCollectionOfObjectValues<DriveItem>(createDriveItemFromDiscriminatorValue); },
    }
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDeltaWithTokenGetResponse(writer: SerializationWriter, deltaWithTokenGetResponse: Partial<DeltaWithTokenGetResponse> | undefined = {}) : void {
    serializeBaseDeltaFunctionResponse(writer, deltaWithTokenGetResponse)
    writer.writeCollectionOfObjectValues<DriveItem>("value", deltaWithTokenGetResponse.value, serializeDriveItem);
}
/**
 * Uri template for the request builder.
 */
export const DeltaWithTokenRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/delta(token='{token}'){?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeltaWithTokenRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeltaWithTokenRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DeltaWithTokenRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeltaWithTokenGetResponseFromDiscriminatorValue,
        queryParametersMapper: DeltaWithTokenRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to call the delta method.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    CreatedByUser: "createdByUser",
    LastModifiedByUser: "lastModifiedByUser",
    Analytics: "analytics",
    Children: "children",
    ListItem: "listItem",
    Permissions: "permissions",
    RetentionLabel: "retentionLabel",
    Subscriptions: "subscriptions",
    Thumbnails: "thumbnails",
    Versions: "versions",
    Workbook: "workbook",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    CreatedBy: "createdBy",
    CreatedByDesc: "createdBy desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    Description: "description",
    DescriptionDesc: "description desc",
    ETag: "eTag",
    ETagDesc: "eTag desc",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedByDesc: "lastModifiedBy desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    Name: "name",
    NameDesc: "name desc",
    ParentReference: "parentReference",
    ParentReferenceDesc: "parentReference desc",
    WebUrl: "webUrl",
    WebUrlDesc: "webUrl desc",
    Audio: "audio",
    AudioDesc: "audio desc",
    Bundle: "bundle",
    BundleDesc: "bundle desc",
    Content: "content",
    ContentDesc: "content desc",
    CTag: "cTag",
    CTagDesc: "cTag desc",
    Deleted: "deleted",
    DeletedDesc: "deleted desc",
    File: "file",
    FileDesc: "file desc",
    FileSystemInfo: "fileSystemInfo",
    FileSystemInfoDesc: "fileSystemInfo desc",
    Folder: "folder",
    FolderDesc: "folder desc",
    Image: "image",
    ImageDesc: "image desc",
    Location: "location",
    LocationDesc: "location desc",
    Malware: "malware",
    MalwareDesc: "malware desc",
    PackageEscaped: "package",
    PackageDesc: "package desc",
    PendingOperations: "pendingOperations",
    PendingOperationsDesc: "pendingOperations desc",
    Photo: "photo",
    PhotoDesc: "photo desc",
    Publication: "publication",
    PublicationDesc: "publication desc",
    RemoteItem: "remoteItem",
    RemoteItemDesc: "remoteItem desc",
    Root: "root",
    RootDesc: "root desc",
    SearchResult: "searchResult",
    SearchResultDesc: "searchResult desc",
    Shared: "shared",
    SharedDesc: "shared desc",
    SharepointIds: "sharepointIds",
    SharepointIdsDesc: "sharepointIds desc",
    Size: "size",
    SizeDesc: "size desc",
    SpecialFolder: "specialFolder",
    SpecialFolderDesc: "specialFolder desc",
    Video: "video",
    VideoDesc: "video desc",
    WebDavUrl: "webDavUrl",
    WebDavUrlDesc: "webDavUrl desc",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    CreatedBy: "createdBy",
    CreatedDateTime: "createdDateTime",
    Description: "description",
    ETag: "eTag",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedDateTime: "lastModifiedDateTime",
    Name: "name",
    ParentReference: "parentReference",
    WebUrl: "webUrl",
    Audio: "audio",
    Bundle: "bundle",
    Content: "content",
    CTag: "cTag",
    Deleted: "deleted",
    File: "file",
    FileSystemInfo: "fileSystemInfo",
    Folder: "folder",
    Image: "image",
    Location: "location",
    Malware: "malware",
    PackageEscaped: "package",
    PendingOperations: "pendingOperations",
    Photo: "photo",
    Publication: "publication",
    RemoteItem: "remoteItem",
    Root: "root",
    SearchResult: "searchResult",
    Shared: "shared",
    SharepointIds: "sharepointIds",
    Size: "size",
    SpecialFolder: "specialFolder",
    Video: "video",
    WebDavUrl: "webDavUrl",
    CreatedByUser: "createdByUser",
    LastModifiedByUser: "lastModifiedByUser",
    Analytics: "analytics",
    Children: "children",
    ListItem: "listItem",
    Permissions: "permissions",
    RetentionLabel: "retentionLabel",
    Subscriptions: "subscriptions",
    Thumbnails: "thumbnails",
    Versions: "versions",
    Workbook: "workbook",
} as const;
/* tslint:enable */
/* eslint-enable */
