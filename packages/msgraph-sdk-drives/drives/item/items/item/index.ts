/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDriveItemFromDiscriminatorValue, serializeDriveItem, type DriveItem } from '@microsoft/msgraph-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { AnalyticsRequestBuilderNavigationMetadata, AnalyticsRequestBuilderRequestsMetadata, type AnalyticsRequestBuilder } from './analytics/index.js';
// @ts-ignore
import { AssignSensitivityLabelRequestBuilderRequestsMetadata, type AssignSensitivityLabelRequestBuilder } from './assignSensitivityLabel/index.js';
// @ts-ignore
import { CheckinRequestBuilderRequestsMetadata, type CheckinRequestBuilder } from './checkin/index.js';
// @ts-ignore
import { CheckoutRequestBuilderRequestsMetadata, type CheckoutRequestBuilder } from './checkout/index.js';
// @ts-ignore
import { ChildrenRequestBuilderNavigationMetadata, ChildrenRequestBuilderRequestsMetadata, type ChildrenRequestBuilder } from './children/index.js';
// @ts-ignore
import { ContentRequestBuilderRequestsMetadata, type ContentRequestBuilder } from './content/index.js';
// @ts-ignore
import { CopyRequestBuilderRequestsMetadata, type CopyRequestBuilder } from './copy/index.js';
// @ts-ignore
import { CreatedByUserRequestBuilderNavigationMetadata, CreatedByUserRequestBuilderRequestsMetadata, type CreatedByUserRequestBuilder } from './createdByUser/index.js';
// @ts-ignore
import { CreateLinkRequestBuilderRequestsMetadata, type CreateLinkRequestBuilder } from './createLink/index.js';
// @ts-ignore
import { CreateUploadSessionRequestBuilderRequestsMetadata, type CreateUploadSessionRequestBuilder } from './createUploadSession/index.js';
// @ts-ignore
import { DeltaRequestBuilderRequestsMetadata, type DeltaRequestBuilder } from './delta/index.js';
// @ts-ignore
import { DeltaWithTokenRequestBuilderRequestsMetadata, type DeltaWithTokenRequestBuilder } from './deltaWithToken/index.js';
// @ts-ignore
import { ExtractSensitivityLabelsRequestBuilderRequestsMetadata, type ExtractSensitivityLabelsRequestBuilder } from './extractSensitivityLabels/index.js';
// @ts-ignore
import { FollowRequestBuilderRequestsMetadata, type FollowRequestBuilder } from './follow/index.js';
// @ts-ignore
import { GetActivitiesByIntervalRequestBuilderRequestsMetadata, type GetActivitiesByIntervalRequestBuilder } from './getActivitiesByInterval/index.js';
// @ts-ignore
import { GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilderRequestsMetadata, type GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder } from './getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval/index.js';
// @ts-ignore
import { InviteRequestBuilderRequestsMetadata, type InviteRequestBuilder } from './invite/index.js';
// @ts-ignore
import { LastModifiedByUserRequestBuilderNavigationMetadata, LastModifiedByUserRequestBuilderRequestsMetadata, type LastModifiedByUserRequestBuilder } from './lastModifiedByUser/index.js';
// @ts-ignore
import { ListItemRequestBuilderRequestsMetadata, type ListItemRequestBuilder } from './listItem/index.js';
// @ts-ignore
import { PermanentDeleteRequestBuilderRequestsMetadata, type PermanentDeleteRequestBuilder } from './permanentDelete/index.js';
// @ts-ignore
import { PermissionsRequestBuilderNavigationMetadata, PermissionsRequestBuilderRequestsMetadata, type PermissionsRequestBuilder } from './permissions/index.js';
// @ts-ignore
import { PreviewRequestBuilderRequestsMetadata, type PreviewRequestBuilder } from './preview/index.js';
// @ts-ignore
import { RestoreRequestBuilderRequestsMetadata, type RestoreRequestBuilder } from './restore/index.js';
// @ts-ignore
import { RetentionLabelRequestBuilderRequestsMetadata, type RetentionLabelRequestBuilder } from './retentionLabel/index.js';
// @ts-ignore
import { SearchWithQRequestBuilderRequestsMetadata, type SearchWithQRequestBuilder } from './searchWithQ/index.js';
// @ts-ignore
import { SubscriptionsRequestBuilderNavigationMetadata, SubscriptionsRequestBuilderRequestsMetadata, type SubscriptionsRequestBuilder } from './subscriptions/index.js';
// @ts-ignore
import { ThumbnailsRequestBuilderNavigationMetadata, ThumbnailsRequestBuilderRequestsMetadata, type ThumbnailsRequestBuilder } from './thumbnails/index.js';
// @ts-ignore
import { type UnfollowRequestBuilder, UnfollowRequestBuilderRequestsMetadata } from './unfollow/index.js';
// @ts-ignore
import { type ValidatePermissionRequestBuilder, ValidatePermissionRequestBuilderRequestsMetadata } from './validatePermission/index.js';
// @ts-ignore
import { type VersionsRequestBuilder, VersionsRequestBuilderNavigationMetadata, VersionsRequestBuilderRequestsMetadata } from './versions/index.js';
// @ts-ignore
import { type WorkbookRequestBuilder, WorkbookRequestBuilderNavigationMetadata, WorkbookRequestBuilderRequestsMetadata } from './workbook/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the items property of the microsoft.graph.drive entity.
 */
export interface DriveItemItemRequestBuilder extends BaseRequestBuilder<DriveItemItemRequestBuilder> {
    /**
     * Provides operations to manage the analytics property of the microsoft.graph.driveItem entity.
     */
    get analytics(): AnalyticsRequestBuilder;
    /**
     * Provides operations to call the assignSensitivityLabel method.
     */
    get assignSensitivityLabel(): AssignSensitivityLabelRequestBuilder;
    /**
     * Provides operations to call the checkin method.
     */
    get checkin(): CheckinRequestBuilder;
    /**
     * Provides operations to call the checkout method.
     */
    get checkout(): CheckoutRequestBuilder;
    /**
     * Provides operations to manage the children property of the microsoft.graph.driveItem entity.
     */
    get children(): ChildrenRequestBuilder;
    /**
     * Provides operations to manage the media for the drive entity.
     */
    get content(): ContentRequestBuilder;
    /**
     * Provides operations to call the copy method.
     */
    get copy(): CopyRequestBuilder;
    /**
     * Provides operations to manage the createdByUser property of the microsoft.graph.baseItem entity.
     */
    get createdByUser(): CreatedByUserRequestBuilder;
    /**
     * Provides operations to call the createLink method.
     */
    get createLink(): CreateLinkRequestBuilder;
    /**
     * Provides operations to call the createUploadSession method.
     */
    get createUploadSession(): CreateUploadSessionRequestBuilder;
    /**
     * Provides operations to call the delta method.
     */
    get delta(): DeltaRequestBuilder;
    /**
     * Provides operations to call the extractSensitivityLabels method.
     */
    get extractSensitivityLabels(): ExtractSensitivityLabelsRequestBuilder;
    /**
     * Provides operations to call the follow method.
     */
    get follow(): FollowRequestBuilder;
    /**
     * Provides operations to call the getActivitiesByInterval method.
     */
    get getActivitiesByInterval(): GetActivitiesByIntervalRequestBuilder;
    /**
     * Provides operations to call the invite method.
     */
    get invite(): InviteRequestBuilder;
    /**
     * Provides operations to manage the lastModifiedByUser property of the microsoft.graph.baseItem entity.
     */
    get lastModifiedByUser(): LastModifiedByUserRequestBuilder;
    /**
     * Provides operations to manage the listItem property of the microsoft.graph.driveItem entity.
     */
    get listItem(): ListItemRequestBuilder;
    /**
     * Provides operations to call the permanentDelete method.
     */
    get permanentDelete(): PermanentDeleteRequestBuilder;
    /**
     * Provides operations to manage the permissions property of the microsoft.graph.driveItem entity.
     */
    get permissions(): PermissionsRequestBuilder;
    /**
     * Provides operations to call the preview method.
     */
    get preview(): PreviewRequestBuilder;
    /**
     * Provides operations to call the restore method.
     */
    get restore(): RestoreRequestBuilder;
    /**
     * Provides operations to manage the retentionLabel property of the microsoft.graph.driveItem entity.
     */
    get retentionLabel(): RetentionLabelRequestBuilder;
    /**
     * Provides operations to manage the subscriptions property of the microsoft.graph.driveItem entity.
     */
    get subscriptions(): SubscriptionsRequestBuilder;
    /**
     * Provides operations to manage the thumbnails property of the microsoft.graph.driveItem entity.
     */
    get thumbnails(): ThumbnailsRequestBuilder;
    /**
     * Provides operations to call the unfollow method.
     */
    get unfollow(): UnfollowRequestBuilder;
    /**
     * Provides operations to call the validatePermission method.
     */
    get validatePermission(): ValidatePermissionRequestBuilder;
    /**
     * Provides operations to manage the versions property of the microsoft.graph.driveItem entity.
     */
    get versions(): VersionsRequestBuilder;
    /**
     * Provides operations to manage the workbook property of the microsoft.graph.driveItem entity.
     */
    get workbook(): WorkbookRequestBuilder;
    /**
     * Delete navigation property items for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Provides operations to call the delta method.
     * @param token Usage: token='{token}'
     * @returns {DeltaWithTokenRequestBuilder}
     */
     deltaWithToken(token: string | undefined) : DeltaWithTokenRequestBuilder;
    /**
     * All items contained in the drive. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DriveItem>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DriveItemItemRequestBuilderGetQueryParameters> | undefined) : Promise<DriveItem | undefined>;
    /**
     * Provides operations to call the getActivitiesByInterval method.
     * @param endDateTime Usage: endDateTime='{endDateTime}'
     * @param interval Usage: interval='{interval}'
     * @param startDateTime Usage: startDateTime='{startDateTime}'
     * @returns {GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder}
     */
     getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval(endDateTime: string | undefined, interval: string | undefined, startDateTime: string | undefined) : GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
    /**
     * Update the navigation property items in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DriveItem>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: DriveItem, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DriveItem | undefined>;
    /**
     * Provides operations to call the search method.
     * @param q Usage: q='{q}'
     * @returns {SearchWithQRequestBuilder}
     */
     searchWithQ(q: string | undefined) : SearchWithQRequestBuilder;
    /**
     * Delete navigation property items for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * All items contained in the drive. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DriveItemItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property items in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: DriveItem, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * All items contained in the drive. Read-only. Nullable.
 */
export interface DriveItemItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const DriveItemItemRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DriveItemItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DriveItemItemRequestBuilderNavigationMetadata: Record<Exclude<keyof DriveItemItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    deltaWithToken: {
        requestsMetadata: DeltaWithTokenRequestBuilderRequestsMetadata,
        pathParametersMappings: ["token"],
    },
    getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval: {
        requestsMetadata: GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilderRequestsMetadata,
        pathParametersMappings: ["endDateTime", "interval", "startDateTime"],
    },
    searchWithQ: {
        requestsMetadata: SearchWithQRequestBuilderRequestsMetadata,
        pathParametersMappings: ["q"],
    },
    analytics: {
        requestsMetadata: AnalyticsRequestBuilderRequestsMetadata,
        navigationMetadata: AnalyticsRequestBuilderNavigationMetadata,
    },
    assignSensitivityLabel: {
        requestsMetadata: AssignSensitivityLabelRequestBuilderRequestsMetadata,
    },
    checkin: {
        requestsMetadata: CheckinRequestBuilderRequestsMetadata,
    },
    checkout: {
        requestsMetadata: CheckoutRequestBuilderRequestsMetadata,
    },
    children: {
        requestsMetadata: ChildrenRequestBuilderRequestsMetadata,
        navigationMetadata: ChildrenRequestBuilderNavigationMetadata,
    },
    content: {
        requestsMetadata: ContentRequestBuilderRequestsMetadata,
    },
    copy: {
        requestsMetadata: CopyRequestBuilderRequestsMetadata,
    },
    createdByUser: {
        requestsMetadata: CreatedByUserRequestBuilderRequestsMetadata,
        navigationMetadata: CreatedByUserRequestBuilderNavigationMetadata,
    },
    createLink: {
        requestsMetadata: CreateLinkRequestBuilderRequestsMetadata,
    },
    createUploadSession: {
        requestsMetadata: CreateUploadSessionRequestBuilderRequestsMetadata,
    },
    delta: {
        requestsMetadata: DeltaRequestBuilderRequestsMetadata,
    },
    extractSensitivityLabels: {
        requestsMetadata: ExtractSensitivityLabelsRequestBuilderRequestsMetadata,
    },
    follow: {
        requestsMetadata: FollowRequestBuilderRequestsMetadata,
    },
    getActivitiesByInterval: {
        requestsMetadata: GetActivitiesByIntervalRequestBuilderRequestsMetadata,
    },
    invite: {
        requestsMetadata: InviteRequestBuilderRequestsMetadata,
    },
    lastModifiedByUser: {
        requestsMetadata: LastModifiedByUserRequestBuilderRequestsMetadata,
        navigationMetadata: LastModifiedByUserRequestBuilderNavigationMetadata,
    },
    listItem: {
        requestsMetadata: ListItemRequestBuilderRequestsMetadata,
    },
    permanentDelete: {
        requestsMetadata: PermanentDeleteRequestBuilderRequestsMetadata,
    },
    permissions: {
        requestsMetadata: PermissionsRequestBuilderRequestsMetadata,
        navigationMetadata: PermissionsRequestBuilderNavigationMetadata,
    },
    preview: {
        requestsMetadata: PreviewRequestBuilderRequestsMetadata,
    },
    restore: {
        requestsMetadata: RestoreRequestBuilderRequestsMetadata,
    },
    retentionLabel: {
        requestsMetadata: RetentionLabelRequestBuilderRequestsMetadata,
    },
    subscriptions: {
        requestsMetadata: SubscriptionsRequestBuilderRequestsMetadata,
        navigationMetadata: SubscriptionsRequestBuilderNavigationMetadata,
    },
    thumbnails: {
        requestsMetadata: ThumbnailsRequestBuilderRequestsMetadata,
        navigationMetadata: ThumbnailsRequestBuilderNavigationMetadata,
    },
    unfollow: {
        requestsMetadata: UnfollowRequestBuilderRequestsMetadata,
    },
    validatePermission: {
        requestsMetadata: ValidatePermissionRequestBuilderRequestsMetadata,
    },
    versions: {
        requestsMetadata: VersionsRequestBuilderRequestsMetadata,
        navigationMetadata: VersionsRequestBuilderNavigationMetadata,
    },
    workbook: {
        requestsMetadata: WorkbookRequestBuilderRequestsMetadata,
        navigationMetadata: WorkbookRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DriveItemItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DriveItemItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: DriveItemItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDriveItemFromDiscriminatorValue,
        queryParametersMapper: DriveItemItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: DriveItemItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDriveItemFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDriveItem,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
