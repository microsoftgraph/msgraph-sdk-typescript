/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createWorkbookChartFromDiscriminatorValue, type WorkbookChart } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { AxesRequestBuilderRequestsMetadata, type AxesRequestBuilder } from './axes/';
import { DataLabelsRequestBuilderRequestsMetadata, type DataLabelsRequestBuilder } from './dataLabels/';
import { FormatRequestBuilderRequestsMetadata, type FormatRequestBuilder } from './format/';
import { ImageRequestBuilderRequestsMetadata, type ImageRequestBuilder } from './image/';
import { ImageWithWidthRequestBuilderRequestsMetadata, type ImageWithWidthRequestBuilder } from './imageWithWidth/';
import { ImageWithWidthWithHeightRequestBuilderRequestsMetadata, type ImageWithWidthWithHeightRequestBuilder } from './imageWithWidthWithHeight/';
import { ImageWithWidthWithHeightWithFittingModeRequestBuilderRequestsMetadata, type ImageWithWidthWithHeightWithFittingModeRequestBuilder } from './imageWithWidthWithHeightWithFittingMode/';
import { LegendRequestBuilderRequestsMetadata, type LegendRequestBuilder } from './legend/';
import { SeriesRequestBuilderRequestsMetadata, type SeriesRequestBuilder } from './series/';
import { SetDataRequestBuilderRequestsMetadata, type SetDataRequestBuilder } from './setData/';
import { SetPositionRequestBuilderRequestsMetadata, type SetPositionRequestBuilder } from './setPosition/';
import { TitleRequestBuilderRequestsMetadata, type TitleRequestBuilder } from './title/';
import { type WorksheetRequestBuilder, WorksheetRequestBuilderRequestsMetadata } from './worksheet/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to call the item method.
 */
export interface ItemWithNameRequestBuilder extends BaseRequestBuilder<ItemWithNameRequestBuilder> {
    /**
     * Provides operations to manage the axes property of the microsoft.graph.workbookChart entity.
     */
    get axes(): AxesRequestBuilder;
    /**
     * Provides operations to manage the dataLabels property of the microsoft.graph.workbookChart entity.
     */
    get dataLabels(): DataLabelsRequestBuilder;
    /**
     * Provides operations to manage the format property of the microsoft.graph.workbookChart entity.
     */
    get format(): FormatRequestBuilder;
    /**
     * Provides operations to call the image method.
     */
    get image(): ImageRequestBuilder;
    /**
     * Provides operations to manage the legend property of the microsoft.graph.workbookChart entity.
     */
    get legend(): LegendRequestBuilder;
    /**
     * Provides operations to manage the series property of the microsoft.graph.workbookChart entity.
     */
    get series(): SeriesRequestBuilder;
    /**
     * Provides operations to call the setData method.
     */
    get setData(): SetDataRequestBuilder;
    /**
     * Provides operations to call the setPosition method.
     */
    get setPosition(): SetPositionRequestBuilder;
    /**
     * Provides operations to manage the title property of the microsoft.graph.workbookChart entity.
     */
    get title(): TitleRequestBuilder;
    /**
     * Provides operations to manage the worksheet property of the microsoft.graph.workbookChart entity.
     */
    get worksheet(): WorksheetRequestBuilder;
    /**
     * Invoke function item
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WorkbookChart>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WorkbookChart | undefined>;
    /**
     * Provides operations to call the image method.
     * @param width Usage: width={width}
     * @returns {ImageWithWidthRequestBuilder}
     */
     imageWithWidth(width: number | undefined) : ImageWithWidthRequestBuilder;
    /**
     * Provides operations to call the image method.
     * @param height Usage: height={height}
     * @param width Usage: width={width}
     * @returns {ImageWithWidthWithHeightRequestBuilder}
     */
     imageWithWidthWithHeight(height: number | undefined, width: number | undefined) : ImageWithWidthWithHeightRequestBuilder;
    /**
     * Provides operations to call the image method.
     * @param fittingMode Usage: fittingMode='{fittingMode}'
     * @param height Usage: height={height}
     * @param width Usage: width={width}
     * @returns {ImageWithWidthWithHeightWithFittingModeRequestBuilder}
     */
     imageWithWidthWithHeightWithFittingMode(fittingMode: string | undefined, height: number | undefined, width: number | undefined) : ImageWithWidthWithHeightWithFittingModeRequestBuilder;
    /**
     * Invoke function item
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const ItemWithNameRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/worksheets/{workbookWorksheet%2Did}/charts/item(name='{name}')";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ItemWithNameRequestBuilderNavigationMetadata: Record<Exclude<keyof ItemWithNameRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    imageWithWidth: {
        requestsMetadata: ImageWithWidthRequestBuilderRequestsMetadata,
    },
    imageWithWidthWithHeight: {
        requestsMetadata: ImageWithWidthWithHeightRequestBuilderRequestsMetadata,
    },
    imageWithWidthWithHeightWithFittingMode: {
        requestsMetadata: ImageWithWidthWithHeightWithFittingModeRequestBuilderRequestsMetadata,
    },
    axes: {
        requestsMetadata: AxesRequestBuilderRequestsMetadata,
    },
    dataLabels: {
        requestsMetadata: DataLabelsRequestBuilderRequestsMetadata,
    },
    format: {
        requestsMetadata: FormatRequestBuilderRequestsMetadata,
    },
    image: {
        requestsMetadata: ImageRequestBuilderRequestsMetadata,
    },
    legend: {
        requestsMetadata: LegendRequestBuilderRequestsMetadata,
    },
    series: {
        requestsMetadata: SeriesRequestBuilderRequestsMetadata,
    },
    setData: {
        requestsMetadata: SetDataRequestBuilderRequestsMetadata,
    },
    setPosition: {
        requestsMetadata: SetPositionRequestBuilderRequestsMetadata,
    },
    title: {
        requestsMetadata: TitleRequestBuilderRequestsMetadata,
    },
    worksheet: {
        requestsMetadata: WorksheetRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ItemWithNameRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ItemWithNameRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWorkbookChartFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
