/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createWorkbookChartCollectionResponseFromDiscriminatorValue, createWorkbookChartFromDiscriminatorValue, serializeWorkbookChart, type WorkbookChart, type WorkbookChartCollectionResponse } from '@microsoft/msgraph-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { AddRequestBuilderRequestsMetadata, type AddRequestBuilder } from './add/index.js';
// @ts-ignore
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/index.js';
// @ts-ignore
import { type WorkbookChartItemRequestBuilder, WorkbookChartItemRequestBuilderNavigationMetadata, WorkbookChartItemRequestBuilderRequestsMetadata } from './item/index.js';
// @ts-ignore
import { ItemAtWithIndexRequestBuilderNavigationMetadata, ItemAtWithIndexRequestBuilderRequestsMetadata, type ItemAtWithIndexRequestBuilder } from './itemAtWithIndex/index.js';
// @ts-ignore
import { ItemWithNameRequestBuilderNavigationMetadata, ItemWithNameRequestBuilderRequestsMetadata, type ItemWithNameRequestBuilder } from './itemWithName/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the charts property of the microsoft.graph.workbookWorksheet entity.
 */
export interface ChartsRequestBuilder extends BaseRequestBuilder<ChartsRequestBuilder> {
    /**
     * Provides operations to call the add method.
     */
    get add(): AddRequestBuilder;
    /**
     * Provides operations to call the count method.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the charts property of the microsoft.graph.workbookWorksheet entity.
     * @param workbookChartId The unique identifier of workbookChart
     * @returns {WorkbookChartItemRequestBuilder}
     */
     byWorkbookChartId(workbookChartId: string) : WorkbookChartItemRequestBuilder;
    /**
     * The list of charts that are part of the worksheet. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WorkbookChartCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ChartsRequestBuilderGetQueryParameters> | undefined) : Promise<WorkbookChartCollectionResponse | undefined>;
    /**
     * Provides operations to call the itemAt method.
     * @param index Usage: index={index}
     * @returns {ItemAtWithIndexRequestBuilder}
     */
     itemAtWithIndex(index: number | undefined) : ItemAtWithIndexRequestBuilder;
    /**
     * Provides operations to call the item method.
     * @param name Usage: name='{name}'
     * @returns {ItemWithNameRequestBuilder}
     */
     itemWithName(name: string | undefined) : ItemWithNameRequestBuilder;
    /**
     * Create new navigation property to charts for drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WorkbookChart>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: WorkbookChart, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WorkbookChart | undefined>;
    /**
     * The list of charts that are part of the worksheet. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ChartsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to charts for drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: WorkbookChart, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The list of charts that are part of the worksheet. Read-only.
 */
export interface ChartsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const ChartsRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/worksheets/{workbookWorksheet%2Did}/charts{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ChartsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ChartsRequestBuilderNavigationMetadata: Record<Exclude<keyof ChartsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byWorkbookChartId: {
        requestsMetadata: WorkbookChartItemRequestBuilderRequestsMetadata,
        navigationMetadata: WorkbookChartItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["workbookChart%2Did"],
    },
    itemAtWithIndex: {
        requestsMetadata: ItemAtWithIndexRequestBuilderRequestsMetadata,
        navigationMetadata: ItemAtWithIndexRequestBuilderNavigationMetadata,
    },
    itemWithName: {
        requestsMetadata: ItemWithNameRequestBuilderRequestsMetadata,
        navigationMetadata: ItemWithNameRequestBuilderNavigationMetadata,
    },
    add: {
        requestsMetadata: AddRequestBuilderRequestsMetadata,
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ChartsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ChartsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWorkbookChartCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: ChartsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ChartsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWorkbookChartFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWorkbookChart,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
