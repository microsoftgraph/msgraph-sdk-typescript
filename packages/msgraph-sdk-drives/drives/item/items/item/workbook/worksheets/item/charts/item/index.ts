/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createWorkbookChartFromDiscriminatorValue, serializeWorkbookChart, type WorkbookChart } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { AxesRequestBuilderNavigationMetadata, AxesRequestBuilderRequestsMetadata, type AxesRequestBuilder } from './axes/';
// @ts-ignore
import { DataLabelsRequestBuilderNavigationMetadata, DataLabelsRequestBuilderRequestsMetadata, type DataLabelsRequestBuilder } from './dataLabels/';
// @ts-ignore
import { FormatRequestBuilderNavigationMetadata, FormatRequestBuilderRequestsMetadata, type FormatRequestBuilder } from './format/';
// @ts-ignore
import { ImageRequestBuilderRequestsMetadata, type ImageRequestBuilder } from './image/';
// @ts-ignore
import { ImageWithWidthRequestBuilderRequestsMetadata, type ImageWithWidthRequestBuilder } from './imageWithWidth/';
// @ts-ignore
import { ImageWithWidthWithHeightRequestBuilderRequestsMetadata, type ImageWithWidthWithHeightRequestBuilder } from './imageWithWidthWithHeight/';
// @ts-ignore
import { ImageWithWidthWithHeightWithFittingModeRequestBuilderRequestsMetadata, type ImageWithWidthWithHeightWithFittingModeRequestBuilder } from './imageWithWidthWithHeightWithFittingMode/';
// @ts-ignore
import { LegendRequestBuilderNavigationMetadata, LegendRequestBuilderRequestsMetadata, type LegendRequestBuilder } from './legend/';
// @ts-ignore
import { SeriesRequestBuilderNavigationMetadata, SeriesRequestBuilderRequestsMetadata, type SeriesRequestBuilder } from './series/';
// @ts-ignore
import { SetDataRequestBuilderRequestsMetadata, type SetDataRequestBuilder } from './setData/';
// @ts-ignore
import { SetPositionRequestBuilderRequestsMetadata, type SetPositionRequestBuilder } from './setPosition/';
// @ts-ignore
import { TitleRequestBuilderNavigationMetadata, TitleRequestBuilderRequestsMetadata, type TitleRequestBuilder } from './title/';
// @ts-ignore
import { type WorksheetRequestBuilder, WorksheetRequestBuilderRequestsMetadata } from './worksheet/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the charts property of the microsoft.graph.workbookWorksheet entity.
 */
export interface WorkbookChartItemRequestBuilder extends BaseRequestBuilder<WorkbookChartItemRequestBuilder> {
    /**
     * Provides operations to manage the axes property of the microsoft.graph.workbookChart entity.
     */
    get axes(): AxesRequestBuilder;
    /**
     * Provides operations to manage the dataLabels property of the microsoft.graph.workbookChart entity.
     */
    get dataLabels(): DataLabelsRequestBuilder;
    /**
     * Provides operations to manage the format property of the microsoft.graph.workbookChart entity.
     */
    get format(): FormatRequestBuilder;
    /**
     * Provides operations to call the image method.
     */
    get image(): ImageRequestBuilder;
    /**
     * Provides operations to manage the legend property of the microsoft.graph.workbookChart entity.
     */
    get legend(): LegendRequestBuilder;
    /**
     * Provides operations to manage the series property of the microsoft.graph.workbookChart entity.
     */
    get series(): SeriesRequestBuilder;
    /**
     * Provides operations to call the setData method.
     */
    get setData(): SetDataRequestBuilder;
    /**
     * Provides operations to call the setPosition method.
     */
    get setPosition(): SetPositionRequestBuilder;
    /**
     * Provides operations to manage the title property of the microsoft.graph.workbookChart entity.
     */
    get title(): TitleRequestBuilder;
    /**
     * Provides operations to manage the worksheet property of the microsoft.graph.workbookChart entity.
     */
    get worksheet(): WorksheetRequestBuilder;
    /**
     * Deletes the chart object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/chart-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties and relationships of chart object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WorkbookChart>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/chart-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<WorkbookChartItemRequestBuilderGetQueryParameters> | undefined) : Promise<WorkbookChart | undefined>;
    /**
     * Provides operations to call the image method.
     * @param width Usage: width={width}
     * @returns {ImageWithWidthRequestBuilder}
     */
     imageWithWidth(width: number | undefined) : ImageWithWidthRequestBuilder;
    /**
     * Provides operations to call the image method.
     * @param height Usage: height={height}
     * @param width Usage: width={width}
     * @returns {ImageWithWidthWithHeightRequestBuilder}
     */
     imageWithWidthWithHeight(height: number | undefined, width: number | undefined) : ImageWithWidthWithHeightRequestBuilder;
    /**
     * Provides operations to call the image method.
     * @param fittingMode Usage: fittingMode='{fittingMode}'
     * @param height Usage: height={height}
     * @param width Usage: width={width}
     * @returns {ImageWithWidthWithHeightWithFittingModeRequestBuilder}
     */
     imageWithWidthWithHeightWithFittingMode(fittingMode: string | undefined, height: number | undefined, width: number | undefined) : ImageWithWidthWithHeightWithFittingModeRequestBuilder;
    /**
     * Update the properties of chart object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WorkbookChart>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/chart-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: WorkbookChart, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WorkbookChart | undefined>;
    /**
     * Deletes the chart object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties and relationships of chart object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WorkbookChartItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of chart object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: WorkbookChart, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties and relationships of chart object.
 */
export interface WorkbookChartItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const WorkbookChartItemRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/worksheets/{workbookWorksheet%2Did}/charts/{workbookChart%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WorkbookChartItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WorkbookChartItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WorkbookChartItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    imageWithWidth: {
        requestsMetadata: ImageWithWidthRequestBuilderRequestsMetadata,
    },
    imageWithWidthWithHeight: {
        requestsMetadata: ImageWithWidthWithHeightRequestBuilderRequestsMetadata,
    },
    imageWithWidthWithHeightWithFittingMode: {
        requestsMetadata: ImageWithWidthWithHeightWithFittingModeRequestBuilderRequestsMetadata,
    },
    axes: {
        requestsMetadata: AxesRequestBuilderRequestsMetadata,
        navigationMetadata: AxesRequestBuilderNavigationMetadata,
    },
    dataLabels: {
        requestsMetadata: DataLabelsRequestBuilderRequestsMetadata,
        navigationMetadata: DataLabelsRequestBuilderNavigationMetadata,
    },
    format: {
        requestsMetadata: FormatRequestBuilderRequestsMetadata,
        navigationMetadata: FormatRequestBuilderNavigationMetadata,
    },
    image: {
        requestsMetadata: ImageRequestBuilderRequestsMetadata,
    },
    legend: {
        requestsMetadata: LegendRequestBuilderRequestsMetadata,
        navigationMetadata: LegendRequestBuilderNavigationMetadata,
    },
    series: {
        requestsMetadata: SeriesRequestBuilderRequestsMetadata,
        navigationMetadata: SeriesRequestBuilderNavigationMetadata,
    },
    setData: {
        requestsMetadata: SetDataRequestBuilderRequestsMetadata,
    },
    setPosition: {
        requestsMetadata: SetPositionRequestBuilderRequestsMetadata,
    },
    title: {
        requestsMetadata: TitleRequestBuilderRequestsMetadata,
        navigationMetadata: TitleRequestBuilderNavigationMetadata,
    },
    worksheet: {
        requestsMetadata: WorksheetRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WorkbookChartItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: WorkbookChartItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: WorkbookChartItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWorkbookChartFromDiscriminatorValue,
        queryParametersMapper: WorkbookChartItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: WorkbookChartItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWorkbookChartFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWorkbookChart,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
