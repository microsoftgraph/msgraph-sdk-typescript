/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createWorkbookFunctionResultFromDiscriminatorValue, serializeWorkbookFunctionResult, type WorkbookFunctionResult } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { createUntypedNodeFromDiscriminatorValue, type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter, UntypedNode } from '@microsoft/kiota-abstractions';

export interface AccrIntPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The basis property
     */
    basis?: UntypedNode;
    /**
     * The calcMethod property
     */
    calcMethod?: UntypedNode;
    /**
     * The firstInterest property
     */
    firstInterest?: UntypedNode;
    /**
     * The frequency property
     */
    frequency?: UntypedNode;
    /**
     * The issue property
     */
    issue?: UntypedNode;
    /**
     * The par property
     */
    par?: UntypedNode;
    /**
     * The rate property
     */
    rate?: UntypedNode;
    /**
     * The settlement property
     */
    settlement?: UntypedNode;
}
/**
 * Provides operations to call the accrInt method.
 */
export interface AccrIntRequestBuilder extends BaseRequestBuilder<AccrIntRequestBuilder> {
    /**
     * Invoke action accrInt
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<WorkbookFunctionResult>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: AccrIntPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WorkbookFunctionResult | undefined>;
    /**
     * Invoke action accrInt
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: AccrIntPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AccrIntPostRequestBody}
 */
export function createAccrIntPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAccrIntPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAccrIntPostRequestBody(accrIntPostRequestBody: Partial<AccrIntPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { accrIntPostRequestBody.backingStoreEnabled = true; },
        "basis": n => { accrIntPostRequestBody.basis = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "calcMethod": n => { accrIntPostRequestBody.calcMethod = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "firstInterest": n => { accrIntPostRequestBody.firstInterest = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "frequency": n => { accrIntPostRequestBody.frequency = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "issue": n => { accrIntPostRequestBody.issue = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "par": n => { accrIntPostRequestBody.par = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "rate": n => { accrIntPostRequestBody.rate = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
        "settlement": n => { accrIntPostRequestBody.settlement = n.getObjectValue<UntypedNode>(createUntypedNodeFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAccrIntPostRequestBody(writer: SerializationWriter, accrIntPostRequestBody: Partial<AccrIntPostRequestBody> | undefined = {}) : void {
    writer.writeObjectValue("basis", accrIntPostRequestBody.basis);
    writer.writeObjectValue("calcMethod", accrIntPostRequestBody.calcMethod);
    writer.writeObjectValue("firstInterest", accrIntPostRequestBody.firstInterest);
    writer.writeObjectValue("frequency", accrIntPostRequestBody.frequency);
    writer.writeObjectValue("issue", accrIntPostRequestBody.issue);
    writer.writeObjectValue("par", accrIntPostRequestBody.par);
    writer.writeObjectValue("rate", accrIntPostRequestBody.rate);
    writer.writeObjectValue("settlement", accrIntPostRequestBody.settlement);
    writer.writeAdditionalData(accrIntPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const AccrIntRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/functions/accrInt";
/**
 * Metadata for all the requests in the request builder.
 */
export const AccrIntRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: AccrIntRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createWorkbookFunctionResultFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAccrIntPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
