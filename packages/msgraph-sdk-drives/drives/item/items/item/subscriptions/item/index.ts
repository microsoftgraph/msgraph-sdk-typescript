/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSubscriptionFromDiscriminatorValue, serializeSubscription, type Subscription } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { ReauthorizeRequestBuilderRequestsMetadata, type ReauthorizeRequestBuilder } from './reauthorize/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the subscriptions property of the microsoft.graph.driveItem entity.
 */
export interface SubscriptionItemRequestBuilder extends BaseRequestBuilder<SubscriptionItemRequestBuilder> {
    /**
     * Provides operations to call the reauthorize method.
     */
    get reauthorize(): ReauthorizeRequestBuilder;
    /**
     * Delete navigation property subscriptions for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The set of subscriptions on the item. Only supported on the root of a drive.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Subscription>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SubscriptionItemRequestBuilderGetQueryParameters> | undefined) : Promise<Subscription | undefined>;
    /**
     * Update the navigation property subscriptions in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Subscription>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Subscription, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Subscription | undefined>;
    /**
     * Delete navigation property subscriptions for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The set of subscriptions on the item. Only supported on the root of a drive.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SubscriptionItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property subscriptions in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Subscription, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The set of subscriptions on the item. Only supported on the root of a drive.
 */
export interface SubscriptionItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const SubscriptionItemRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/subscriptions/{subscription%2Did}{?%24expand,%24select}";
/**
 * Provides operations to manage the subscriptions property of the microsoft.graph.driveItem entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the subscriptions property of the microsoft.graph.driveItem entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    ApplicationId: "applicationId",
    ChangeType: "changeType",
    ClientState: "clientState",
    CreatorId: "creatorId",
    EncryptionCertificate: "encryptionCertificate",
    EncryptionCertificateId: "encryptionCertificateId",
    ExpirationDateTime: "expirationDateTime",
    IncludeResourceData: "includeResourceData",
    LatestSupportedTlsVersion: "latestSupportedTlsVersion",
    LifecycleNotificationUrl: "lifecycleNotificationUrl",
    NotificationQueryOptions: "notificationQueryOptions",
    NotificationUrl: "notificationUrl",
    NotificationUrlAppId: "notificationUrlAppId",
    Resource: "resource",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SubscriptionItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SubscriptionItemRequestBuilderNavigationMetadata: Record<Exclude<keyof SubscriptionItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    reauthorize: {
        requestsMetadata: ReauthorizeRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SubscriptionItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: SubscriptionItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: SubscriptionItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionFromDiscriminatorValue,
        queryParametersMapper: SubscriptionItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: SubscriptionItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscriptionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSubscription,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
