/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createOnenoteFromDiscriminatorValue, serializeOnenote, type Onenote } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { NotebooksRequestBuilderNavigationMetadata, NotebooksRequestBuilderRequestsMetadata, NotebooksRequestBuilderUriTemplate, type NotebooksRequestBuilder } from './notebooks/';
import { OperationsRequestBuilderNavigationMetadata, OperationsRequestBuilderRequestsMetadata, OperationsRequestBuilderUriTemplate, type OperationsRequestBuilder } from './operations/';
import { PagesRequestBuilderNavigationMetadata, PagesRequestBuilderRequestsMetadata, PagesRequestBuilderUriTemplate, type PagesRequestBuilder } from './pages/';
import { ResourcesRequestBuilderNavigationMetadata, ResourcesRequestBuilderRequestsMetadata, ResourcesRequestBuilderUriTemplate, type ResourcesRequestBuilder } from './resources/';
import { SectionGroupsRequestBuilderNavigationMetadata, SectionGroupsRequestBuilderRequestsMetadata, SectionGroupsRequestBuilderUriTemplate, type SectionGroupsRequestBuilder } from './sectionGroups/';
import { SectionsRequestBuilderNavigationMetadata, SectionsRequestBuilderRequestsMetadata, SectionsRequestBuilderUriTemplate, type SectionsRequestBuilder } from './sections/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the onenote property of the microsoft.graph.site entity.
 */
export interface OnenoteRequestBuilder extends BaseRequestBuilder<OnenoteRequestBuilder> {
    /**
     * Provides operations to manage the notebooks property of the microsoft.graph.onenote entity.
     */
    get notebooks(): NotebooksRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.onenote entity.
     */
    get operations(): OperationsRequestBuilder;
    /**
     * Provides operations to manage the pages property of the microsoft.graph.onenote entity.
     */
    get pages(): PagesRequestBuilder;
    /**
     * Provides operations to manage the resources property of the microsoft.graph.onenote entity.
     */
    get resources(): ResourcesRequestBuilder;
    /**
     * Provides operations to manage the sectionGroups property of the microsoft.graph.onenote entity.
     */
    get sectionGroups(): SectionGroupsRequestBuilder;
    /**
     * Provides operations to manage the sections property of the microsoft.graph.onenote entity.
     */
    get sections(): SectionsRequestBuilder;
    /**
     * Delete navigation property onenote for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Calls the OneNote service for notebook related operations.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Onenote
     */
     get(requestConfiguration?: RequestConfiguration<OnenoteRequestBuilderGetQueryParameters> | undefined) : Promise<Onenote | undefined>;
    /**
     * Update the navigation property onenote in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Onenote
     */
     patch(body: Onenote, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Onenote | undefined>;
    /**
     * Delete navigation property onenote for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Calls the OneNote service for notebook related operations.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<OnenoteRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property onenote in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Onenote, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Calls the OneNote service for notebook related operations.
 */
export interface OnenoteRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const OnenoteRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const OnenoteRequestBuilderNavigationMetadata: Record<Exclude<keyof OnenoteRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    notebooks: {
        uriTemplate: NotebooksRequestBuilderUriTemplate,
        requestsMetadata: NotebooksRequestBuilderRequestsMetadata,
        navigationMetadata: NotebooksRequestBuilderNavigationMetadata,
    },
    operations: {
        uriTemplate: OperationsRequestBuilderUriTemplate,
        requestsMetadata: OperationsRequestBuilderRequestsMetadata,
        navigationMetadata: OperationsRequestBuilderNavigationMetadata,
    },
    pages: {
        uriTemplate: PagesRequestBuilderUriTemplate,
        requestsMetadata: PagesRequestBuilderRequestsMetadata,
        navigationMetadata: PagesRequestBuilderNavigationMetadata,
    },
    resources: {
        uriTemplate: ResourcesRequestBuilderUriTemplate,
        requestsMetadata: ResourcesRequestBuilderRequestsMetadata,
        navigationMetadata: ResourcesRequestBuilderNavigationMetadata,
    },
    sectionGroups: {
        uriTemplate: SectionGroupsRequestBuilderUriTemplate,
        requestsMetadata: SectionGroupsRequestBuilderRequestsMetadata,
        navigationMetadata: SectionGroupsRequestBuilderNavigationMetadata,
    },
    sections: {
        uriTemplate: SectionsRequestBuilderUriTemplate,
        requestsMetadata: SectionsRequestBuilderRequestsMetadata,
        navigationMetadata: SectionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const OnenoteRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createOnenoteFromDiscriminatorValue,
        queryParametersMapper: OnenoteRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createOnenoteFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeOnenote,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const OnenoteRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/sites/{site%2Did}/onenote{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
