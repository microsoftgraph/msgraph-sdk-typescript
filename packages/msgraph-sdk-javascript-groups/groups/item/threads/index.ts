/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createConversationThreadCollectionResponseFromDiscriminatorValue, createConversationThreadFromDiscriminatorValue, serializeConversationThread, type ConversationThread, type ConversationThreadCollectionResponse } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, CountRequestBuilderUriTemplate, type CountRequestBuilder } from './count/';
import { ConversationThreadItemRequestBuilderNavigationMetadata, ConversationThreadItemRequestBuilderRequestsMetadata, ConversationThreadItemRequestBuilderUriTemplate, type ConversationThreadItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the threads property of the microsoft.graph.group entity.
 */
export interface ThreadsRequestBuilder extends BaseRequestBuilder<ThreadsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the threads property of the microsoft.graph.group entity.
     * @param conversationThreadId The unique identifier of conversationThread
     * @returns a ConversationThreadItemRequestBuilder
     */
     byConversationThreadId(conversationThreadId: string) : ConversationThreadItemRequestBuilder;
    /**
     * Get all the threads of a group.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ConversationThreadCollectionResponse
     * @see {@link https://learn.microsoft.com/graph/api/group-list-threads?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ThreadsRequestBuilderGetQueryParameters> | undefined) : Promise<ConversationThreadCollectionResponse | undefined>;
    /**
     * Start a new group conversation by first creating a thread. A new conversation, conversation thread, and post are created in the group.Use reply thread or reply post to further post to that thread. Note: You can also start a new thread in an existing conversation.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ConversationThread
     * @see {@link https://learn.microsoft.com/graph/api/group-post-threads?view=graph-rest-1.0|Find more info here}
     */
     post(body: ConversationThread, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ConversationThread | undefined>;
    /**
     * Get all the threads of a group.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ThreadsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Start a new group conversation by first creating a thread. A new conversation, conversation thread, and post are created in the group.Use reply thread or reply post to further post to that thread. Note: You can also start a new thread in an existing conversation.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: ConversationThread, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get all the threads of a group.
 */
export interface ThreadsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ThreadsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ThreadsRequestBuilderNavigationMetadata: Record<Exclude<keyof ThreadsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byConversationThreadId: {
        uriTemplate: ConversationThreadItemRequestBuilderUriTemplate,
        requestsMetadata: ConversationThreadItemRequestBuilderRequestsMetadata,
        navigationMetadata: ConversationThreadItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["conversationThread%2Did"],
    },
    count: {
        uriTemplate: CountRequestBuilderUriTemplate,
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ThreadsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createConversationThreadCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: ThreadsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createConversationThreadFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeConversationThread,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const ThreadsRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/threads{?%24top,%24skip,%24filter,%24count,%24orderby,%24select}";
/* tslint:enable */
/* eslint-enable */
