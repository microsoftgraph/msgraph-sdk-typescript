/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAgreementAcceptanceCollectionResponseFromDiscriminatorValue, createAgreementAcceptanceFromDiscriminatorValue, serializeAgreementAcceptance, type AgreementAcceptance, type AgreementAcceptanceCollectionResponse } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { AgreementAcceptanceItemRequestBuilderRequestsMetadata, type AgreementAcceptanceItemRequestBuilder } from './item/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of agreementAcceptance entities.
 */
export interface AgreementAcceptancesRequestBuilder extends BaseRequestBuilder<AgreementAcceptancesRequestBuilder> {
    /**
     * Provides operations to manage the collection of agreementAcceptance entities.
     * @param agreementAcceptanceId The unique identifier of agreementAcceptance
     * @returns {AgreementAcceptanceItemRequestBuilder}
     */
     byAgreementAcceptanceId(agreementAcceptanceId: string) : AgreementAcceptanceItemRequestBuilder;
    /**
     * Get entities from agreementAcceptances
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AgreementAcceptanceCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AgreementAcceptancesRequestBuilderGetQueryParameters> | undefined) : Promise<AgreementAcceptanceCollectionResponse | undefined>;
    /**
     * Add new entity to agreementAcceptances
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AgreementAcceptance>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: AgreementAcceptance, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AgreementAcceptance | undefined>;
    /**
     * Get entities from agreementAcceptances
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AgreementAcceptancesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Add new entity to agreementAcceptances
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: AgreementAcceptance, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get entities from agreementAcceptances
 */
export interface AgreementAcceptancesRequestBuilderGetQueryParameters {
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const AgreementAcceptancesRequestBuilderUriTemplate = "{+baseurl}/agreementAcceptances{?%24search,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AgreementAcceptancesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "search": "%24search",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AgreementAcceptancesRequestBuilderNavigationMetadata: Record<Exclude<keyof AgreementAcceptancesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byAgreementAcceptanceId: {
        requestsMetadata: AgreementAcceptanceItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["agreementAcceptance%2Did"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AgreementAcceptancesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AgreementAcceptancesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAgreementAcceptanceCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: AgreementAcceptancesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: AgreementAcceptancesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAgreementAcceptanceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAgreementAcceptance,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
