/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, createWorkbookFunctionResultFromDiscriminatorValue, serializeJson, serializeWorkbookFunctionResult, type Json, type WorkbookFunctionResult } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ppmtPostRequestBody
 */
export function createPpmtPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoPpmtPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoPpmtPostRequestBody(ppmtPostRequestBody: PpmtPostRequestBody | undefined = {} as PpmtPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "fv": n => { ppmtPostRequestBody.fv = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "nper": n => { ppmtPostRequestBody.nper = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "per": n => { ppmtPostRequestBody.per = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "pv": n => { ppmtPostRequestBody.pv = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "rate": n => { ppmtPostRequestBody.rate = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "type": n => { ppmtPostRequestBody.type = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface PpmtPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The fv property
     */
    fv?: Json;
    /**
     * The nper property
     */
    nper?: Json;
    /**
     * The per property
     */
    per?: Json;
    /**
     * The pv property
     */
    pv?: Json;
    /**
     * The rate property
     */
    rate?: Json;
    /**
     * The type property
     */
    type?: Json;
}
/**
 * Provides operations to call the ppmt method.
 */
export interface PpmtRequestBuilder extends BaseRequestBuilder<PpmtRequestBuilder> {
    /**
     * Invoke action ppmt
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WorkbookFunctionResult
     */
     post(body: PpmtPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WorkbookFunctionResult | undefined>;
    /**
     * Invoke action ppmt
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: PpmtPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializePpmtPostRequestBody(writer: SerializationWriter, ppmtPostRequestBody: PpmtPostRequestBody | undefined = {} as PpmtPostRequestBody) : void {
    writer.writeObjectValue<Json>("fv", ppmtPostRequestBody.fv, serializeJson);
    writer.writeObjectValue<Json>("nper", ppmtPostRequestBody.nper, serializeJson);
    writer.writeObjectValue<Json>("per", ppmtPostRequestBody.per, serializeJson);
    writer.writeObjectValue<Json>("pv", ppmtPostRequestBody.pv, serializeJson);
    writer.writeObjectValue<Json>("rate", ppmtPostRequestBody.rate, serializeJson);
    writer.writeObjectValue<Json>("type", ppmtPostRequestBody.type, serializeJson);
    writer.writeAdditionalData(ppmtPostRequestBody.additionalData);
}
/**
 * Metadata for all the requests in the request builder.
 */
export const PpmtRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createWorkbookFunctionResultFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePpmtPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const PpmtRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/functions/ppmt";
/* tslint:enable */
/* eslint-enable */
