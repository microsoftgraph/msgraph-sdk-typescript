/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetVirtualAppointmentJoinWebUrlgetResponse}
 */
// @ts-ignore
export function createGetVirtualAppointmentJoinWebUrlgetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetVirtualAppointmentJoinWebUrlgetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetVirtualAppointmentJoinWebUrlgetResponse(getVirtualAppointmentJoinWebUrlgetResponse: Partial<GetVirtualAppointmentJoinWebUrlgetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { getVirtualAppointmentJoinWebUrlgetResponse.backingStoreEnabled = true; },
        "value": n => { getVirtualAppointmentJoinWebUrlgetResponse.value = n.getStringValue(); },
    }
}
export interface GetVirtualAppointmentJoinWebUrlgetResponse extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The value property
     */
    value?: string | null;
}
/**
 * Provides operations to call the getVirtualAppointmentJoinWebUrl method.
 */
export interface GetVirtualAppointmentJoinWebUrlRequestBuilder extends BaseRequestBuilder<GetVirtualAppointmentJoinWebUrlRequestBuilder> {
    /**
     * Get a join web URL for a Microsoft Virtual Appointment. This web URL includes enhanced business-to-customer experiences such as mobile browser join and virtual lobby rooms. With Teams Premium, you can configure a custom lobby room experience for attendees by adding your company logo and access the Virtual Appointments usage report for organizational analytics.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GetVirtualAppointmentJoinWebUrlgetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/virtualappointment-getvirtualappointmentjoinweburl?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GetVirtualAppointmentJoinWebUrlgetResponse | undefined>;
    /**
     * Get a join web URL for a Microsoft Virtual Appointment. This web URL includes enhanced business-to-customer experiences such as mobile browser join and virtual lobby rooms. With Teams Premium, you can configure a custom lobby room experience for attendees by adding your company logo and access the Virtual Appointments usage report for organizational analytics.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetVirtualAppointmentJoinWebUrlgetResponse(writer: SerializationWriter, getVirtualAppointmentJoinWebUrlgetResponse: Partial<GetVirtualAppointmentJoinWebUrlgetResponse> | undefined | null = {}) : void {
    if (getVirtualAppointmentJoinWebUrlgetResponse) {
        writer.writeStringValue("value", getVirtualAppointmentJoinWebUrlgetResponse.value);
        writer.writeAdditionalData(getVirtualAppointmentJoinWebUrlgetResponse.additionalData);
    }
}
/**
 * Uri template for the request builder.
 */
export const GetVirtualAppointmentJoinWebUrlRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/onlineMeetings/{onlineMeeting%2Did}/getVirtualAppointmentJoinWebUrl()";
/**
 * Metadata for all the requests in the request builder.
 */
export const GetVirtualAppointmentJoinWebUrlRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GetVirtualAppointmentJoinWebUrlRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGetVirtualAppointmentJoinWebUrlgetResponseFromDiscriminatorValue,
    },
};
/* tslint:enable */
/* eslint-enable */
