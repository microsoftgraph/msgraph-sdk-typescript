/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createUserTeamworkFromDiscriminatorValue, serializeUserTeamwork, type UserTeamwork } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { AssociatedTeamsRequestBuilderNavigationMetadata, AssociatedTeamsRequestBuilderRequestsMetadata, type AssociatedTeamsRequestBuilder } from './associatedTeams/';
// @ts-ignore
import { InstalledAppsRequestBuilderNavigationMetadata, InstalledAppsRequestBuilderRequestsMetadata, type InstalledAppsRequestBuilder } from './installedApps/';
// @ts-ignore
import { SendActivityNotificationRequestBuilderRequestsMetadata, type SendActivityNotificationRequestBuilder } from './sendActivityNotification/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the teamwork property of the microsoft.graph.user entity.
 */
export interface TeamworkRequestBuilder extends BaseRequestBuilder<TeamworkRequestBuilder> {
    /**
     * Provides operations to manage the associatedTeams property of the microsoft.graph.userTeamwork entity.
     */
    get associatedTeams(): AssociatedTeamsRequestBuilder;
    /**
     * Provides operations to manage the installedApps property of the microsoft.graph.userTeamwork entity.
     */
    get installedApps(): InstalledAppsRequestBuilder;
    /**
     * Provides operations to call the sendActivityNotification method.
     */
    get sendActivityNotification(): SendActivityNotificationRequestBuilder;
    /**
     * Delete navigation property teamwork for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * A container for Microsoft Teams features available for the user. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UserTeamwork>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<TeamworkRequestBuilderGetQueryParameters> | undefined) : Promise<UserTeamwork | undefined>;
    /**
     * Update the navigation property teamwork in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UserTeamwork>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: UserTeamwork, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UserTeamwork | undefined>;
    /**
     * Delete navigation property teamwork for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * A container for Microsoft Teams features available for the user. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TeamworkRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property teamwork in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: UserTeamwork, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * A container for Microsoft Teams features available for the user. Read-only. Nullable.
 */
export interface TeamworkRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const TeamworkRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/teamwork{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TeamworkRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TeamworkRequestBuilderNavigationMetadata: Record<Exclude<keyof TeamworkRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    associatedTeams: {
        requestsMetadata: AssociatedTeamsRequestBuilderRequestsMetadata,
        navigationMetadata: AssociatedTeamsRequestBuilderNavigationMetadata,
    },
    installedApps: {
        requestsMetadata: InstalledAppsRequestBuilderRequestsMetadata,
        navigationMetadata: InstalledAppsRequestBuilderNavigationMetadata,
    },
    sendActivityNotification: {
        requestsMetadata: SendActivityNotificationRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TeamworkRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: TeamworkRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: TeamworkRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUserTeamworkFromDiscriminatorValue,
        queryParametersMapper: TeamworkRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: TeamworkRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUserTeamworkFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUserTeamwork,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
