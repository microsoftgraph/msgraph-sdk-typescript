/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createChatFromDiscriminatorValue, serializeChat, type Chat } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { HideForUserRequestBuilderRequestsMetadata, type HideForUserRequestBuilder } from './hideForUser/';
// @ts-ignore
import { InstalledAppsRequestBuilderNavigationMetadata, InstalledAppsRequestBuilderRequestsMetadata, type InstalledAppsRequestBuilder } from './installedApps/';
// @ts-ignore
import { LastMessagePreviewRequestBuilderRequestsMetadata, type LastMessagePreviewRequestBuilder } from './lastMessagePreview/';
// @ts-ignore
import { MarkChatReadForUserRequestBuilderRequestsMetadata, type MarkChatReadForUserRequestBuilder } from './markChatReadForUser/';
// @ts-ignore
import { MarkChatUnreadForUserRequestBuilderRequestsMetadata, type MarkChatUnreadForUserRequestBuilder } from './markChatUnreadForUser/';
// @ts-ignore
import { MembersRequestBuilderNavigationMetadata, MembersRequestBuilderRequestsMetadata, type MembersRequestBuilder } from './members/';
// @ts-ignore
import { MessagesRequestBuilderNavigationMetadata, MessagesRequestBuilderRequestsMetadata, type MessagesRequestBuilder } from './messages/';
// @ts-ignore
import { PermissionGrantsRequestBuilderNavigationMetadata, PermissionGrantsRequestBuilderRequestsMetadata, type PermissionGrantsRequestBuilder } from './permissionGrants/';
// @ts-ignore
import { PinnedMessagesRequestBuilderNavigationMetadata, PinnedMessagesRequestBuilderRequestsMetadata, type PinnedMessagesRequestBuilder } from './pinnedMessages/';
// @ts-ignore
import { SendActivityNotificationRequestBuilderRequestsMetadata, type SendActivityNotificationRequestBuilder } from './sendActivityNotification/';
// @ts-ignore
import { TabsRequestBuilderNavigationMetadata, TabsRequestBuilderRequestsMetadata, type TabsRequestBuilder } from './tabs/';
// @ts-ignore
import { type UnhideForUserRequestBuilder, UnhideForUserRequestBuilderRequestsMetadata } from './unhideForUser/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the chats property of the microsoft.graph.user entity.
 */
export interface ChatItemRequestBuilder extends BaseRequestBuilder<ChatItemRequestBuilder> {
    /**
     * Provides operations to call the hideForUser method.
     */
    get hideForUser(): HideForUserRequestBuilder;
    /**
     * Provides operations to manage the installedApps property of the microsoft.graph.chat entity.
     */
    get installedApps(): InstalledAppsRequestBuilder;
    /**
     * Provides operations to manage the lastMessagePreview property of the microsoft.graph.chat entity.
     */
    get lastMessagePreview(): LastMessagePreviewRequestBuilder;
    /**
     * Provides operations to call the markChatReadForUser method.
     */
    get markChatReadForUser(): MarkChatReadForUserRequestBuilder;
    /**
     * Provides operations to call the markChatUnreadForUser method.
     */
    get markChatUnreadForUser(): MarkChatUnreadForUserRequestBuilder;
    /**
     * Provides operations to manage the members property of the microsoft.graph.chat entity.
     */
    get members(): MembersRequestBuilder;
    /**
     * Provides operations to manage the messages property of the microsoft.graph.chat entity.
     */
    get messages(): MessagesRequestBuilder;
    /**
     * Provides operations to manage the permissionGrants property of the microsoft.graph.chat entity.
     */
    get permissionGrants(): PermissionGrantsRequestBuilder;
    /**
     * Provides operations to manage the pinnedMessages property of the microsoft.graph.chat entity.
     */
    get pinnedMessages(): PinnedMessagesRequestBuilder;
    /**
     * Provides operations to call the sendActivityNotification method.
     */
    get sendActivityNotification(): SendActivityNotificationRequestBuilder;
    /**
     * Provides operations to manage the tabs property of the microsoft.graph.chat entity.
     */
    get tabs(): TabsRequestBuilder;
    /**
     * Provides operations to call the unhideForUser method.
     */
    get unhideForUser(): UnhideForUserRequestBuilder;
    /**
     * Delete navigation property chats for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve a single chat (without its messages). This method supports federation. To access a chat, at least one chat member must belong to the tenant the request initiated from.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Chat>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/chat-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ChatItemRequestBuilderGetQueryParameters> | undefined) : Promise<Chat | undefined>;
    /**
     * Update the navigation property chats in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Chat>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Chat, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Chat | undefined>;
    /**
     * Delete navigation property chats for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve a single chat (without its messages). This method supports federation. To access a chat, at least one chat member must belong to the tenant the request initiated from.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ChatItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property chats in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Chat, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve a single chat (without its messages). This method supports federation. To access a chat, at least one chat member must belong to the tenant the request initiated from.
 */
export interface ChatItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ChatItemRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/chats/{chat%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ChatItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ChatItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ChatItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    hideForUser: {
        requestsMetadata: HideForUserRequestBuilderRequestsMetadata,
    },
    installedApps: {
        requestsMetadata: InstalledAppsRequestBuilderRequestsMetadata,
        navigationMetadata: InstalledAppsRequestBuilderNavigationMetadata,
    },
    lastMessagePreview: {
        requestsMetadata: LastMessagePreviewRequestBuilderRequestsMetadata,
    },
    markChatReadForUser: {
        requestsMetadata: MarkChatReadForUserRequestBuilderRequestsMetadata,
    },
    markChatUnreadForUser: {
        requestsMetadata: MarkChatUnreadForUserRequestBuilderRequestsMetadata,
    },
    members: {
        requestsMetadata: MembersRequestBuilderRequestsMetadata,
        navigationMetadata: MembersRequestBuilderNavigationMetadata,
    },
    messages: {
        requestsMetadata: MessagesRequestBuilderRequestsMetadata,
        navigationMetadata: MessagesRequestBuilderNavigationMetadata,
    },
    permissionGrants: {
        requestsMetadata: PermissionGrantsRequestBuilderRequestsMetadata,
        navigationMetadata: PermissionGrantsRequestBuilderNavigationMetadata,
    },
    pinnedMessages: {
        requestsMetadata: PinnedMessagesRequestBuilderRequestsMetadata,
        navigationMetadata: PinnedMessagesRequestBuilderNavigationMetadata,
    },
    sendActivityNotification: {
        requestsMetadata: SendActivityNotificationRequestBuilderRequestsMetadata,
    },
    tabs: {
        requestsMetadata: TabsRequestBuilderRequestsMetadata,
        navigationMetadata: TabsRequestBuilderNavigationMetadata,
    },
    unhideForUser: {
        requestsMetadata: UnhideForUserRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ChatItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ChatItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ChatItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChatFromDiscriminatorValue,
        queryParametersMapper: ChatItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ChatItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChatFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeChat,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
