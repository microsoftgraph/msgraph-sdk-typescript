/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createMessageFromDiscriminatorValue, serializeMessage, type Message } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { AttachmentsRequestBuilderNavigationMetadata, AttachmentsRequestBuilderRequestsMetadata, type AttachmentsRequestBuilder } from './attachments/';
// @ts-ignore
import { CopyRequestBuilderRequestsMetadata, type CopyRequestBuilder } from './copy/';
// @ts-ignore
import { CreateForwardRequestBuilderRequestsMetadata, type CreateForwardRequestBuilder } from './createForward/';
// @ts-ignore
import { CreateReplyRequestBuilderRequestsMetadata, type CreateReplyRequestBuilder } from './createReply/';
// @ts-ignore
import { CreateReplyAllRequestBuilderRequestsMetadata, type CreateReplyAllRequestBuilder } from './createReplyAll/';
// @ts-ignore
import { ExtensionsRequestBuilderNavigationMetadata, ExtensionsRequestBuilderRequestsMetadata, type ExtensionsRequestBuilder } from './extensions/';
// @ts-ignore
import { ForwardRequestBuilderRequestsMetadata, type ForwardRequestBuilder } from './forward/';
// @ts-ignore
import { MoveRequestBuilderRequestsMetadata, type MoveRequestBuilder } from './move/';
// @ts-ignore
import { ReplyRequestBuilderRequestsMetadata, type ReplyRequestBuilder } from './reply/';
// @ts-ignore
import { ReplyAllRequestBuilderRequestsMetadata, type ReplyAllRequestBuilder } from './replyAll/';
// @ts-ignore
import { SendRequestBuilderRequestsMetadata, type SendRequestBuilder } from './send/';
// @ts-ignore
import { ContentRequestBuilderRequestsMetadata, type ContentRequestBuilder } from './value/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the messages property of the microsoft.graph.user entity.
 */
export interface MessageItemRequestBuilder extends BaseRequestBuilder<MessageItemRequestBuilder> {
    /**
     * Provides operations to manage the attachments property of the microsoft.graph.message entity.
     */
    get attachments(): AttachmentsRequestBuilder;
    /**
     * Provides operations to manage the media for the user entity.
     */
    get content(): ContentRequestBuilder;
    /**
     * Provides operations to call the copy method.
     */
    get copy(): CopyRequestBuilder;
    /**
     * Provides operations to call the createForward method.
     */
    get createForward(): CreateForwardRequestBuilder;
    /**
     * Provides operations to call the createReply method.
     */
    get createReply(): CreateReplyRequestBuilder;
    /**
     * Provides operations to call the createReplyAll method.
     */
    get createReplyAll(): CreateReplyAllRequestBuilder;
    /**
     * Provides operations to manage the extensions property of the microsoft.graph.message entity.
     */
    get extensions(): ExtensionsRequestBuilder;
    /**
     * Provides operations to call the forward method.
     */
    get forward(): ForwardRequestBuilder;
    /**
     * Provides operations to call the move method.
     */
    get move(): MoveRequestBuilder;
    /**
     * Provides operations to call the reply method.
     */
    get reply(): ReplyRequestBuilder;
    /**
     * Provides operations to call the replyAll method.
     */
    get replyAll(): ReplyAllRequestBuilder;
    /**
     * Provides operations to call the send method.
     */
    get send(): SendRequestBuilder;
    /**
     * Delete navigation property messages for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The messages in a mailbox or folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Message>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<MessageItemRequestBuilderGetQueryParameters> | undefined) : Promise<Message | undefined>;
    /**
     * Update the navigation property messages in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Message>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Message, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Message | undefined>;
    /**
     * Delete navigation property messages for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The messages in a mailbox or folder. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<MessageItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property messages in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Message, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The messages in a mailbox or folder. Read-only. Nullable.
 */
export interface MessageItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Include Hidden Messages
     */
    includeHiddenMessages?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const MessageItemRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/messages/{message%2Did}{?%24expand,%24select,includeHiddenMessages*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const MessageItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MessageItemRequestBuilderNavigationMetadata: Record<Exclude<keyof MessageItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    attachments: {
        requestsMetadata: AttachmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AttachmentsRequestBuilderNavigationMetadata,
    },
    content: {
        requestsMetadata: ContentRequestBuilderRequestsMetadata,
    },
    copy: {
        requestsMetadata: CopyRequestBuilderRequestsMetadata,
    },
    createForward: {
        requestsMetadata: CreateForwardRequestBuilderRequestsMetadata,
    },
    createReply: {
        requestsMetadata: CreateReplyRequestBuilderRequestsMetadata,
    },
    createReplyAll: {
        requestsMetadata: CreateReplyAllRequestBuilderRequestsMetadata,
    },
    extensions: {
        requestsMetadata: ExtensionsRequestBuilderRequestsMetadata,
        navigationMetadata: ExtensionsRequestBuilderNavigationMetadata,
    },
    forward: {
        requestsMetadata: ForwardRequestBuilderRequestsMetadata,
    },
    move: {
        requestsMetadata: MoveRequestBuilderRequestsMetadata,
    },
    reply: {
        requestsMetadata: ReplyRequestBuilderRequestsMetadata,
    },
    replyAll: {
        requestsMetadata: ReplyAllRequestBuilderRequestsMetadata,
    },
    send: {
        requestsMetadata: SendRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MessageItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: MessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: MessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMessageFromDiscriminatorValue,
        queryParametersMapper: MessageItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: MessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMessageFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMessage,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
