/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createMessageFromDiscriminatorValue, deserializeIntoBaseDeltaFunctionResponse, serializeBaseDeltaFunctionResponse, serializeMessage, type BaseDeltaFunctionResponse, type Message } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeltaGetResponse}
 */
export function createDeltaGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeltaGetResponse;
}
export interface DeltaGetResponse extends BaseDeltaFunctionResponse, Parsable {
    /**
     * The value property
     */
    value?: Message[];
}
/**
 * Provides operations to call the delta method.
 */
export interface DeltaRequestBuilder extends BaseRequestBuilder<DeltaRequestBuilder> {
    /**
     * Get a set of messages that have been added, deleted, or updated in a specified folder. A delta function call for messages in a folder is similar to a GET request, except that by appropriatelyapplying state tokens in one or more of these calls, you can [query for incremental changes in the messages inthat folder](/graph/delta-query-messages). This allows you to maintain and synchronize a local store of a user's messages withouthaving to fetch the entire set of messages from the server every time.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeltaGetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/message-delta?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<DeltaRequestBuilderGetQueryParameters> | undefined) : Promise<DeltaGetResponse | undefined>;
    /**
     * Get a set of messages that have been added, deleted, or updated in a specified folder. A delta function call for messages in a folder is similar to a GET request, except that by appropriatelyapplying state tokens in one or more of these calls, you can [query for incremental changes in the messages inthat folder](/graph/delta-query-messages). This allows you to maintain and synchronize a local store of a user's messages withouthaving to fetch the entire set of messages from the server every time.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeltaRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get a set of messages that have been added, deleted, or updated in a specified folder. A delta function call for messages in a folder is similar to a GET request, except that by appropriatelyapplying state tokens in one or more of these calls, you can [query for incremental changes in the messages inthat folder](/graph/delta-query-messages). This allows you to maintain and synchronize a local store of a user's messages withouthaving to fetch the entire set of messages from the server every time.
 */
export interface DeltaRequestBuilderGetQueryParameters {
    /**
     * A custom query option to filter the delta response based on the type of change. Supported values are created, updated or deleted.
     */
    changeType?: string;
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDeltaGetResponse(deltaGetResponse: Partial<DeltaGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseDeltaFunctionResponse(deltaGetResponse),
        "value": n => { deltaGetResponse.value = n.getCollectionOfObjectValues<Message>(createMessageFromDiscriminatorValue); },
    }
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDeltaGetResponse(writer: SerializationWriter, deltaGetResponse: Partial<DeltaGetResponse> | undefined = {}) : void {
    serializeBaseDeltaFunctionResponse(writer, deltaGetResponse)
    writer.writeCollectionOfObjectValues<Message>("value", deltaGetResponse.value, serializeMessage);
}
/**
 * Uri template for the request builder.
 */
export const DeltaRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/mailFolders/{mailFolder%2Did}/childFolders/{mailFolder%2Did1}/messages/delta(){?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top,changeType*}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeltaRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeltaRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DeltaRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeltaGetResponseFromDiscriminatorValue,
        queryParametersMapper: DeltaRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to call the delta method.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Attachments: "attachments",
    Extensions: "extensions",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Categories: "categories",
    CategoriesDesc: "categories desc",
    ChangeKey: "changeKey",
    ChangeKeyDesc: "changeKey desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    BccRecipients: "bccRecipients",
    BccRecipientsDesc: "bccRecipients desc",
    Body: "body",
    BodyDesc: "body desc",
    BodyPreview: "bodyPreview",
    BodyPreviewDesc: "bodyPreview desc",
    CcRecipients: "ccRecipients",
    CcRecipientsDesc: "ccRecipients desc",
    ConversationId: "conversationId",
    ConversationIdDesc: "conversationId desc",
    ConversationIndex: "conversationIndex",
    ConversationIndexDesc: "conversationIndex desc",
    Flag: "flag",
    FlagDesc: "flag desc",
    From: "from",
    FromDesc: "from desc",
    HasAttachments: "hasAttachments",
    HasAttachmentsDesc: "hasAttachments desc",
    Importance: "importance",
    ImportanceDesc: "importance desc",
    InferenceClassification: "inferenceClassification",
    InferenceClassificationDesc: "inferenceClassification desc",
    InternetMessageHeaders: "internetMessageHeaders",
    InternetMessageHeadersDesc: "internetMessageHeaders desc",
    InternetMessageId: "internetMessageId",
    InternetMessageIdDesc: "internetMessageId desc",
    IsDeliveryReceiptRequested: "isDeliveryReceiptRequested",
    IsDeliveryReceiptRequestedDesc: "isDeliveryReceiptRequested desc",
    IsDraft: "isDraft",
    IsDraftDesc: "isDraft desc",
    IsRead: "isRead",
    IsReadDesc: "isRead desc",
    IsReadReceiptRequested: "isReadReceiptRequested",
    IsReadReceiptRequestedDesc: "isReadReceiptRequested desc",
    ParentFolderId: "parentFolderId",
    ParentFolderIdDesc: "parentFolderId desc",
    ReceivedDateTime: "receivedDateTime",
    ReceivedDateTimeDesc: "receivedDateTime desc",
    ReplyTo: "replyTo",
    ReplyToDesc: "replyTo desc",
    Sender: "sender",
    SenderDesc: "sender desc",
    SentDateTime: "sentDateTime",
    SentDateTimeDesc: "sentDateTime desc",
    Subject: "subject",
    SubjectDesc: "subject desc",
    ToRecipients: "toRecipients",
    ToRecipientsDesc: "toRecipients desc",
    UniqueBody: "uniqueBody",
    UniqueBodyDesc: "uniqueBody desc",
    WebLink: "webLink",
    WebLinkDesc: "webLink desc",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Categories: "categories",
    ChangeKey: "changeKey",
    CreatedDateTime: "createdDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    BccRecipients: "bccRecipients",
    Body: "body",
    BodyPreview: "bodyPreview",
    CcRecipients: "ccRecipients",
    ConversationId: "conversationId",
    ConversationIndex: "conversationIndex",
    Flag: "flag",
    From: "from",
    HasAttachments: "hasAttachments",
    Importance: "importance",
    InferenceClassification: "inferenceClassification",
    InternetMessageHeaders: "internetMessageHeaders",
    InternetMessageId: "internetMessageId",
    IsDeliveryReceiptRequested: "isDeliveryReceiptRequested",
    IsDraft: "isDraft",
    IsRead: "isRead",
    IsReadReceiptRequested: "isReadReceiptRequested",
    ParentFolderId: "parentFolderId",
    ReceivedDateTime: "receivedDateTime",
    ReplyTo: "replyTo",
    Sender: "sender",
    SentDateTime: "sentDateTime",
    Subject: "subject",
    ToRecipients: "toRecipients",
    UniqueBody: "uniqueBody",
    WebLink: "webLink",
    Attachments: "attachments",
    Extensions: "extensions",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/* tslint:enable */
/* eslint-enable */
