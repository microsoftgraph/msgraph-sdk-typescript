/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createEventFromDiscriminatorValue, deserializeIntoBaseDeltaFunctionResponse, serializeBaseDeltaFunctionResponse, serializeEvent, type BaseDeltaFunctionResponse, type Event } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeltaGetResponse}
 */
export function createDeltaGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeltaGetResponse;
}
export interface DeltaGetResponse extends BaseDeltaFunctionResponse, Parsable {
    /**
     * The value property
     */
    value?: Event[];
}
/**
 * Provides operations to call the delta method.
 */
export interface DeltaRequestBuilder extends BaseRequestBuilder<DeltaRequestBuilder> {
    /**
     * Get a set of event resources that have been added, deleted, or updated in a calendarView (a range of events defined by start and end dates) of the user's primary calendar. Typically, synchronizing events in a calendarView in a local store entails a round of multiple delta function calls. The initial call is a full synchronization, and every subsequent delta call in the same round gets the incremental changes (additions, deletions, or updates). This allows you to maintain and synchronize a local store of events in the specified calendarView, without having to fetch all the events of that calendar from the server every time.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeltaGetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/event-delta?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<DeltaRequestBuilderGetQueryParameters> | undefined) : Promise<DeltaGetResponse | undefined>;
    /**
     * Get a set of event resources that have been added, deleted, or updated in a calendarView (a range of events defined by start and end dates) of the user's primary calendar. Typically, synchronizing events in a calendarView in a local store entails a round of multiple delta function calls. The initial call is a full synchronization, and every subsequent delta call in the same round gets the incremental changes (additions, deletions, or updates). This allows you to maintain and synchronize a local store of events in the specified calendarView, without having to fetch all the events of that calendar from the server every time.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeltaRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get a set of event resources that have been added, deleted, or updated in a calendarView (a range of events defined by start and end dates) of the user's primary calendar. Typically, synchronizing events in a calendarView in a local store entails a round of multiple delta function calls. The initial call is a full synchronization, and every subsequent delta call in the same round gets the incremental changes (additions, deletions, or updates). This allows you to maintain and synchronize a local store of events in the specified calendarView, without having to fetch all the events of that calendar from the server every time.
 */
export interface DeltaRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
     */
    endDateTime?: string;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
     */
    startDateTime?: string;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDeltaGetResponse(deltaGetResponse: Partial<DeltaGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseDeltaFunctionResponse(deltaGetResponse),
        "value": n => { deltaGetResponse.value = n.getCollectionOfObjectValues<Event>(createEventFromDiscriminatorValue); },
    }
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDeltaGetResponse(writer: SerializationWriter, deltaGetResponse: Partial<DeltaGetResponse> | undefined = {}) : void {
    serializeBaseDeltaFunctionResponse(writer, deltaGetResponse)
    writer.writeCollectionOfObjectValues<Event>("value", deltaGetResponse.value, serializeEvent);
}
/**
 * Uri template for the request builder.
 */
export const DeltaRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/calendar/calendarView/{event%2Did}/instances/delta()?endDateTime={endDateTime}&startDateTime={startDateTime}{&%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeltaRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeltaRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DeltaRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeltaGetResponseFromDiscriminatorValue,
        queryParametersMapper: DeltaRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to call the delta method.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Attachments: "attachments",
    Calendar: "calendar",
    Extensions: "extensions",
    Instances: "instances",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Categories: "categories",
    CategoriesDesc: "categories desc",
    ChangeKey: "changeKey",
    ChangeKeyDesc: "changeKey desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    AllowNewTimeProposals: "allowNewTimeProposals",
    AllowNewTimeProposalsDesc: "allowNewTimeProposals desc",
    Attendees: "attendees",
    AttendeesDesc: "attendees desc",
    Body: "body",
    BodyDesc: "body desc",
    BodyPreview: "bodyPreview",
    BodyPreviewDesc: "bodyPreview desc",
    End: "end",
    EndDesc: "end desc",
    HasAttachments: "hasAttachments",
    HasAttachmentsDesc: "hasAttachments desc",
    HideAttendees: "hideAttendees",
    HideAttendeesDesc: "hideAttendees desc",
    ICalUId: "iCalUId",
    ICalUIdDesc: "iCalUId desc",
    Importance: "importance",
    ImportanceDesc: "importance desc",
    IsAllDay: "isAllDay",
    IsAllDayDesc: "isAllDay desc",
    IsCancelled: "isCancelled",
    IsCancelledDesc: "isCancelled desc",
    IsDraft: "isDraft",
    IsDraftDesc: "isDraft desc",
    IsOnlineMeeting: "isOnlineMeeting",
    IsOnlineMeetingDesc: "isOnlineMeeting desc",
    IsOrganizer: "isOrganizer",
    IsOrganizerDesc: "isOrganizer desc",
    IsReminderOn: "isReminderOn",
    IsReminderOnDesc: "isReminderOn desc",
    Location: "location",
    LocationDesc: "location desc",
    Locations: "locations",
    LocationsDesc: "locations desc",
    OnlineMeeting: "onlineMeeting",
    OnlineMeetingDesc: "onlineMeeting desc",
    OnlineMeetingProvider: "onlineMeetingProvider",
    OnlineMeetingProviderDesc: "onlineMeetingProvider desc",
    OnlineMeetingUrl: "onlineMeetingUrl",
    OnlineMeetingUrlDesc: "onlineMeetingUrl desc",
    Organizer: "organizer",
    OrganizerDesc: "organizer desc",
    OriginalEndTimeZone: "originalEndTimeZone",
    OriginalEndTimeZoneDesc: "originalEndTimeZone desc",
    OriginalStart: "originalStart",
    OriginalStartDesc: "originalStart desc",
    OriginalStartTimeZone: "originalStartTimeZone",
    OriginalStartTimeZoneDesc: "originalStartTimeZone desc",
    Recurrence: "recurrence",
    RecurrenceDesc: "recurrence desc",
    ReminderMinutesBeforeStart: "reminderMinutesBeforeStart",
    ReminderMinutesBeforeStartDesc: "reminderMinutesBeforeStart desc",
    ResponseRequested: "responseRequested",
    ResponseRequestedDesc: "responseRequested desc",
    ResponseStatus: "responseStatus",
    ResponseStatusDesc: "responseStatus desc",
    Sensitivity: "sensitivity",
    SensitivityDesc: "sensitivity desc",
    SeriesMasterId: "seriesMasterId",
    SeriesMasterIdDesc: "seriesMasterId desc",
    ShowAs: "showAs",
    ShowAsDesc: "showAs desc",
    Start: "start",
    StartDesc: "start desc",
    Subject: "subject",
    SubjectDesc: "subject desc",
    TransactionId: "transactionId",
    TransactionIdDesc: "transactionId desc",
    Type: "type",
    TypeDesc: "type desc",
    WebLink: "webLink",
    WebLinkDesc: "webLink desc",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Categories: "categories",
    ChangeKey: "changeKey",
    CreatedDateTime: "createdDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    AllowNewTimeProposals: "allowNewTimeProposals",
    Attendees: "attendees",
    Body: "body",
    BodyPreview: "bodyPreview",
    End: "end",
    HasAttachments: "hasAttachments",
    HideAttendees: "hideAttendees",
    ICalUId: "iCalUId",
    Importance: "importance",
    IsAllDay: "isAllDay",
    IsCancelled: "isCancelled",
    IsDraft: "isDraft",
    IsOnlineMeeting: "isOnlineMeeting",
    IsOrganizer: "isOrganizer",
    IsReminderOn: "isReminderOn",
    Location: "location",
    Locations: "locations",
    OnlineMeeting: "onlineMeeting",
    OnlineMeetingProvider: "onlineMeetingProvider",
    OnlineMeetingUrl: "onlineMeetingUrl",
    Organizer: "organizer",
    OriginalEndTimeZone: "originalEndTimeZone",
    OriginalStart: "originalStart",
    OriginalStartTimeZone: "originalStartTimeZone",
    Recurrence: "recurrence",
    ReminderMinutesBeforeStart: "reminderMinutesBeforeStart",
    ResponseRequested: "responseRequested",
    ResponseStatus: "responseStatus",
    Sensitivity: "sensitivity",
    SeriesMasterId: "seriesMasterId",
    ShowAs: "showAs",
    Start: "start",
    Subject: "subject",
    TransactionId: "transactionId",
    Type: "type",
    WebLink: "webLink",
    Attachments: "attachments",
    Calendar: "calendar",
    Extensions: "extensions",
    Instances: "instances",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/* tslint:enable */
/* eslint-enable */
