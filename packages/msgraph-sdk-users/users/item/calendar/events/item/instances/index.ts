/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createEventCollectionResponseFromDiscriminatorValue, type EventCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DeltaRequestBuilderRequestsMetadata, type DeltaRequestBuilder } from './delta/';
import { EventItemRequestBuilderNavigationMetadata, EventItemRequestBuilderRequestsMetadata, type EventItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the instances property of the microsoft.graph.event entity.
 */
export interface InstancesRequestBuilder extends BaseRequestBuilder<InstancesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the delta method.
     */
    get delta(): DeltaRequestBuilder;
    /**
     * Provides operations to manage the instances property of the microsoft.graph.event entity.
     * @param eventId1 The unique identifier of event
     * @returns {EventItemRequestBuilder}
     */
     byEventId1(eventId1: string) : EventItemRequestBuilder;
    /**
     * The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EventCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/event-list-instances?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<InstancesRequestBuilderGetQueryParameters> | undefined) : Promise<EventCollectionResponse | undefined>;
    /**
     * The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<InstancesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable.
 */
export interface InstancesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
     */
    endDateTime?: string;
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
     */
    startDateTime?: string;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const InstancesRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/calendar/events/{event%2Did}/instances?endDateTime={endDateTime}&startDateTime={startDateTime}{&%24count,%24filter,%24orderby,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the instances property of the microsoft.graph.event entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Categories: "categories",
    CategoriesDesc: "categories desc",
    ChangeKey: "changeKey",
    ChangeKeyDesc: "changeKey desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    AllowNewTimeProposals: "allowNewTimeProposals",
    AllowNewTimeProposalsDesc: "allowNewTimeProposals desc",
    Attendees: "attendees",
    AttendeesDesc: "attendees desc",
    Body: "body",
    BodyDesc: "body desc",
    BodyPreview: "bodyPreview",
    BodyPreviewDesc: "bodyPreview desc",
    End: "end",
    EndDesc: "end desc",
    HasAttachments: "hasAttachments",
    HasAttachmentsDesc: "hasAttachments desc",
    HideAttendees: "hideAttendees",
    HideAttendeesDesc: "hideAttendees desc",
    ICalUId: "iCalUId",
    ICalUIdDesc: "iCalUId desc",
    Importance: "importance",
    ImportanceDesc: "importance desc",
    IsAllDay: "isAllDay",
    IsAllDayDesc: "isAllDay desc",
    IsCancelled: "isCancelled",
    IsCancelledDesc: "isCancelled desc",
    IsDraft: "isDraft",
    IsDraftDesc: "isDraft desc",
    IsOnlineMeeting: "isOnlineMeeting",
    IsOnlineMeetingDesc: "isOnlineMeeting desc",
    IsOrganizer: "isOrganizer",
    IsOrganizerDesc: "isOrganizer desc",
    IsReminderOn: "isReminderOn",
    IsReminderOnDesc: "isReminderOn desc",
    Location: "location",
    LocationDesc: "location desc",
    Locations: "locations",
    LocationsDesc: "locations desc",
    OnlineMeeting: "onlineMeeting",
    OnlineMeetingDesc: "onlineMeeting desc",
    OnlineMeetingProvider: "onlineMeetingProvider",
    OnlineMeetingProviderDesc: "onlineMeetingProvider desc",
    OnlineMeetingUrl: "onlineMeetingUrl",
    OnlineMeetingUrlDesc: "onlineMeetingUrl desc",
    Organizer: "organizer",
    OrganizerDesc: "organizer desc",
    OriginalEndTimeZone: "originalEndTimeZone",
    OriginalEndTimeZoneDesc: "originalEndTimeZone desc",
    OriginalStart: "originalStart",
    OriginalStartDesc: "originalStart desc",
    OriginalStartTimeZone: "originalStartTimeZone",
    OriginalStartTimeZoneDesc: "originalStartTimeZone desc",
    Recurrence: "recurrence",
    RecurrenceDesc: "recurrence desc",
    ReminderMinutesBeforeStart: "reminderMinutesBeforeStart",
    ReminderMinutesBeforeStartDesc: "reminderMinutesBeforeStart desc",
    ResponseRequested: "responseRequested",
    ResponseRequestedDesc: "responseRequested desc",
    ResponseStatus: "responseStatus",
    ResponseStatusDesc: "responseStatus desc",
    Sensitivity: "sensitivity",
    SensitivityDesc: "sensitivity desc",
    SeriesMasterId: "seriesMasterId",
    SeriesMasterIdDesc: "seriesMasterId desc",
    ShowAs: "showAs",
    ShowAsDesc: "showAs desc",
    Start: "start",
    StartDesc: "start desc",
    Subject: "subject",
    SubjectDesc: "subject desc",
    TransactionId: "transactionId",
    TransactionIdDesc: "transactionId desc",
    Type: "type",
    TypeDesc: "type desc",
    WebLink: "webLink",
    WebLinkDesc: "webLink desc",
} as const;
/**
 * Provides operations to manage the instances property of the microsoft.graph.event entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Categories: "categories",
    ChangeKey: "changeKey",
    CreatedDateTime: "createdDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    AllowNewTimeProposals: "allowNewTimeProposals",
    Attendees: "attendees",
    Body: "body",
    BodyPreview: "bodyPreview",
    End: "end",
    HasAttachments: "hasAttachments",
    HideAttendees: "hideAttendees",
    ICalUId: "iCalUId",
    Importance: "importance",
    IsAllDay: "isAllDay",
    IsCancelled: "isCancelled",
    IsDraft: "isDraft",
    IsOnlineMeeting: "isOnlineMeeting",
    IsOrganizer: "isOrganizer",
    IsReminderOn: "isReminderOn",
    Location: "location",
    Locations: "locations",
    OnlineMeeting: "onlineMeeting",
    OnlineMeetingProvider: "onlineMeetingProvider",
    OnlineMeetingUrl: "onlineMeetingUrl",
    Organizer: "organizer",
    OriginalEndTimeZone: "originalEndTimeZone",
    OriginalStart: "originalStart",
    OriginalStartTimeZone: "originalStartTimeZone",
    Recurrence: "recurrence",
    ReminderMinutesBeforeStart: "reminderMinutesBeforeStart",
    ResponseRequested: "responseRequested",
    ResponseStatus: "responseStatus",
    Sensitivity: "sensitivity",
    SeriesMasterId: "seriesMasterId",
    ShowAs: "showAs",
    Start: "start",
    Subject: "subject",
    TransactionId: "transactionId",
    Type: "type",
    WebLink: "webLink",
    Attachments: "attachments",
    Calendar: "calendar",
    Extensions: "extensions",
    Instances: "instances",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const InstancesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const InstancesRequestBuilderNavigationMetadata: Record<Exclude<keyof InstancesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byEventId1: {
        requestsMetadata: EventItemRequestBuilderRequestsMetadata,
        navigationMetadata: EventItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["event%2Did1"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    delta: {
        requestsMetadata: DeltaRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const InstancesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: InstancesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEventCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: InstancesRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
