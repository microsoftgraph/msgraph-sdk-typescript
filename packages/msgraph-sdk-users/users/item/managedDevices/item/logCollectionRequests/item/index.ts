/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDeviceLogCollectionResponseFromDiscriminatorValue, serializeDeviceLogCollectionResponse, type DeviceLogCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CreateDownloadUrlRequestBuilderRequestsMetadata, type CreateDownloadUrlRequestBuilder } from './createDownloadUrl/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the logCollectionRequests property of the microsoft.graph.managedDevice entity.
 */
export interface DeviceLogCollectionResponseItemRequestBuilder extends BaseRequestBuilder<DeviceLogCollectionResponseItemRequestBuilder> {
    /**
     * Provides operations to call the createDownloadUrl method.
     */
    get createDownloadUrl(): CreateDownloadUrlRequestBuilder;
    /**
     * Delete navigation property logCollectionRequests for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * List of log collection requests
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceLogCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeviceLogCollectionResponseItemRequestBuilderGetQueryParameters> | undefined) : Promise<DeviceLogCollectionResponse | undefined>;
    /**
     * Update the navigation property logCollectionRequests in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceLogCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: DeviceLogCollectionResponse, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DeviceLogCollectionResponse | undefined>;
    /**
     * Delete navigation property logCollectionRequests for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * List of log collection requests
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeviceLogCollectionResponseItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property logCollectionRequests in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: DeviceLogCollectionResponse, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * List of log collection requests
 */
export interface DeviceLogCollectionResponseItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const DeviceLogCollectionResponseItemRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/managedDevices/{managedDevice%2Did}/logCollectionRequests/{deviceLogCollectionResponse%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeviceLogCollectionResponseItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DeviceLogCollectionResponseItemRequestBuilderNavigationMetadata: Record<Exclude<keyof DeviceLogCollectionResponseItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    createDownloadUrl: {
        requestsMetadata: CreateDownloadUrlRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeviceLogCollectionResponseItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DeviceLogCollectionResponseItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: DeviceLogCollectionResponseItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createDeviceLogCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: DeviceLogCollectionResponseItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: DeviceLogCollectionResponseItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createDeviceLogCollectionResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeviceLogCollectionResponse,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
