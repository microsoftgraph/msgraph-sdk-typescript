/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createManagedDeviceFromDiscriminatorValue, serializeManagedDevice, type ManagedDevice } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { BypassActivationLockRequestBuilderRequestsMetadata, type BypassActivationLockRequestBuilder } from './bypassActivationLock/';
// @ts-ignore
import { CleanWindowsDeviceRequestBuilderRequestsMetadata, type CleanWindowsDeviceRequestBuilder } from './cleanWindowsDevice/';
// @ts-ignore
import { DeleteUserFromSharedAppleDeviceRequestBuilderRequestsMetadata, type DeleteUserFromSharedAppleDeviceRequestBuilder } from './deleteUserFromSharedAppleDevice/';
// @ts-ignore
import { DeviceCategoryRequestBuilderRequestsMetadata, type DeviceCategoryRequestBuilder } from './deviceCategory/';
// @ts-ignore
import { DeviceCompliancePolicyStatesRequestBuilderNavigationMetadata, DeviceCompliancePolicyStatesRequestBuilderRequestsMetadata, type DeviceCompliancePolicyStatesRequestBuilder } from './deviceCompliancePolicyStates/';
// @ts-ignore
import { DeviceConfigurationStatesRequestBuilderNavigationMetadata, DeviceConfigurationStatesRequestBuilderRequestsMetadata, type DeviceConfigurationStatesRequestBuilder } from './deviceConfigurationStates/';
// @ts-ignore
import { DisableLostModeRequestBuilderRequestsMetadata, type DisableLostModeRequestBuilder } from './disableLostMode/';
// @ts-ignore
import { LocateDeviceRequestBuilderRequestsMetadata, type LocateDeviceRequestBuilder } from './locateDevice/';
// @ts-ignore
import { LogCollectionRequestsRequestBuilderNavigationMetadata, LogCollectionRequestsRequestBuilderRequestsMetadata, type LogCollectionRequestsRequestBuilder } from './logCollectionRequests/';
// @ts-ignore
import { LogoutSharedAppleDeviceActiveUserRequestBuilderRequestsMetadata, type LogoutSharedAppleDeviceActiveUserRequestBuilder } from './logoutSharedAppleDeviceActiveUser/';
// @ts-ignore
import { RebootNowRequestBuilderRequestsMetadata, type RebootNowRequestBuilder } from './rebootNow/';
// @ts-ignore
import { RecoverPasscodeRequestBuilderRequestsMetadata, type RecoverPasscodeRequestBuilder } from './recoverPasscode/';
// @ts-ignore
import { RemoteLockRequestBuilderRequestsMetadata, type RemoteLockRequestBuilder } from './remoteLock/';
// @ts-ignore
import { RequestRemoteAssistanceRequestBuilderRequestsMetadata, type RequestRemoteAssistanceRequestBuilder } from './requestRemoteAssistance/';
// @ts-ignore
import { ResetPasscodeRequestBuilderRequestsMetadata, type ResetPasscodeRequestBuilder } from './resetPasscode/';
// @ts-ignore
import { RetireRequestBuilderRequestsMetadata, type RetireRequestBuilder } from './retire/';
// @ts-ignore
import { ShutDownRequestBuilderRequestsMetadata, type ShutDownRequestBuilder } from './shutDown/';
// @ts-ignore
import { SyncDeviceRequestBuilderRequestsMetadata, type SyncDeviceRequestBuilder } from './syncDevice/';
// @ts-ignore
import { type UpdateWindowsDeviceAccountRequestBuilder, UpdateWindowsDeviceAccountRequestBuilderRequestsMetadata } from './updateWindowsDeviceAccount/';
// @ts-ignore
import { type UsersRequestBuilder, UsersRequestBuilderRequestsMetadata } from './users/';
// @ts-ignore
import { type WindowsDefenderScanRequestBuilder, WindowsDefenderScanRequestBuilderRequestsMetadata } from './windowsDefenderScan/';
// @ts-ignore
import { type WindowsDefenderUpdateSignaturesRequestBuilder, WindowsDefenderUpdateSignaturesRequestBuilderRequestsMetadata } from './windowsDefenderUpdateSignatures/';
// @ts-ignore
import { type WindowsProtectionStateRequestBuilder, WindowsProtectionStateRequestBuilderNavigationMetadata, WindowsProtectionStateRequestBuilderRequestsMetadata } from './windowsProtectionState/';
// @ts-ignore
import { type WipeRequestBuilder, WipeRequestBuilderRequestsMetadata } from './wipe/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the managedDevices property of the microsoft.graph.user entity.
 */
export interface ManagedDeviceItemRequestBuilder extends BaseRequestBuilder<ManagedDeviceItemRequestBuilder> {
    /**
     * Provides operations to call the bypassActivationLock method.
     */
    get bypassActivationLock(): BypassActivationLockRequestBuilder;
    /**
     * Provides operations to call the cleanWindowsDevice method.
     */
    get cleanWindowsDevice(): CleanWindowsDeviceRequestBuilder;
    /**
     * Provides operations to call the deleteUserFromSharedAppleDevice method.
     */
    get deleteUserFromSharedAppleDevice(): DeleteUserFromSharedAppleDeviceRequestBuilder;
    /**
     * Provides operations to manage the deviceCategory property of the microsoft.graph.managedDevice entity.
     */
    get deviceCategory(): DeviceCategoryRequestBuilder;
    /**
     * Provides operations to manage the deviceCompliancePolicyStates property of the microsoft.graph.managedDevice entity.
     */
    get deviceCompliancePolicyStates(): DeviceCompliancePolicyStatesRequestBuilder;
    /**
     * Provides operations to manage the deviceConfigurationStates property of the microsoft.graph.managedDevice entity.
     */
    get deviceConfigurationStates(): DeviceConfigurationStatesRequestBuilder;
    /**
     * Provides operations to call the disableLostMode method.
     */
    get disableLostMode(): DisableLostModeRequestBuilder;
    /**
     * Provides operations to call the locateDevice method.
     */
    get locateDevice(): LocateDeviceRequestBuilder;
    /**
     * Provides operations to manage the logCollectionRequests property of the microsoft.graph.managedDevice entity.
     */
    get logCollectionRequests(): LogCollectionRequestsRequestBuilder;
    /**
     * Provides operations to call the logoutSharedAppleDeviceActiveUser method.
     */
    get logoutSharedAppleDeviceActiveUser(): LogoutSharedAppleDeviceActiveUserRequestBuilder;
    /**
     * Provides operations to call the rebootNow method.
     */
    get rebootNow(): RebootNowRequestBuilder;
    /**
     * Provides operations to call the recoverPasscode method.
     */
    get recoverPasscode(): RecoverPasscodeRequestBuilder;
    /**
     * Provides operations to call the remoteLock method.
     */
    get remoteLock(): RemoteLockRequestBuilder;
    /**
     * Provides operations to call the requestRemoteAssistance method.
     */
    get requestRemoteAssistance(): RequestRemoteAssistanceRequestBuilder;
    /**
     * Provides operations to call the resetPasscode method.
     */
    get resetPasscode(): ResetPasscodeRequestBuilder;
    /**
     * Provides operations to call the retire method.
     */
    get retire(): RetireRequestBuilder;
    /**
     * Provides operations to call the shutDown method.
     */
    get shutDown(): ShutDownRequestBuilder;
    /**
     * Provides operations to call the syncDevice method.
     */
    get syncDevice(): SyncDeviceRequestBuilder;
    /**
     * Provides operations to call the updateWindowsDeviceAccount method.
     */
    get updateWindowsDeviceAccount(): UpdateWindowsDeviceAccountRequestBuilder;
    /**
     * Provides operations to manage the users property of the microsoft.graph.managedDevice entity.
     */
    get users(): UsersRequestBuilder;
    /**
     * Provides operations to call the windowsDefenderScan method.
     */
    get windowsDefenderScan(): WindowsDefenderScanRequestBuilder;
    /**
     * Provides operations to call the windowsDefenderUpdateSignatures method.
     */
    get windowsDefenderUpdateSignatures(): WindowsDefenderUpdateSignaturesRequestBuilder;
    /**
     * Provides operations to manage the windowsProtectionState property of the microsoft.graph.managedDevice entity.
     */
    get windowsProtectionState(): WindowsProtectionStateRequestBuilder;
    /**
     * Provides operations to call the wipe method.
     */
    get wipe(): WipeRequestBuilder;
    /**
     * Delete navigation property managedDevices for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The managed devices associated with the user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ManagedDevice>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ManagedDeviceItemRequestBuilderGetQueryParameters> | undefined) : Promise<ManagedDevice | undefined>;
    /**
     * Update the navigation property managedDevices in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ManagedDevice>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: ManagedDevice, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ManagedDevice | undefined>;
    /**
     * Delete navigation property managedDevices for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The managed devices associated with the user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ManagedDeviceItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property managedDevices in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: ManagedDevice, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The managed devices associated with the user.
 */
export interface ManagedDeviceItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ManagedDeviceItemRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/managedDevices/{managedDevice%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ManagedDeviceItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ManagedDeviceItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ManagedDeviceItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bypassActivationLock: {
        requestsMetadata: BypassActivationLockRequestBuilderRequestsMetadata,
    },
    cleanWindowsDevice: {
        requestsMetadata: CleanWindowsDeviceRequestBuilderRequestsMetadata,
    },
    deleteUserFromSharedAppleDevice: {
        requestsMetadata: DeleteUserFromSharedAppleDeviceRequestBuilderRequestsMetadata,
    },
    deviceCategory: {
        requestsMetadata: DeviceCategoryRequestBuilderRequestsMetadata,
    },
    deviceCompliancePolicyStates: {
        requestsMetadata: DeviceCompliancePolicyStatesRequestBuilderRequestsMetadata,
        navigationMetadata: DeviceCompliancePolicyStatesRequestBuilderNavigationMetadata,
    },
    deviceConfigurationStates: {
        requestsMetadata: DeviceConfigurationStatesRequestBuilderRequestsMetadata,
        navigationMetadata: DeviceConfigurationStatesRequestBuilderNavigationMetadata,
    },
    disableLostMode: {
        requestsMetadata: DisableLostModeRequestBuilderRequestsMetadata,
    },
    locateDevice: {
        requestsMetadata: LocateDeviceRequestBuilderRequestsMetadata,
    },
    logCollectionRequests: {
        requestsMetadata: LogCollectionRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: LogCollectionRequestsRequestBuilderNavigationMetadata,
    },
    logoutSharedAppleDeviceActiveUser: {
        requestsMetadata: LogoutSharedAppleDeviceActiveUserRequestBuilderRequestsMetadata,
    },
    rebootNow: {
        requestsMetadata: RebootNowRequestBuilderRequestsMetadata,
    },
    recoverPasscode: {
        requestsMetadata: RecoverPasscodeRequestBuilderRequestsMetadata,
    },
    remoteLock: {
        requestsMetadata: RemoteLockRequestBuilderRequestsMetadata,
    },
    requestRemoteAssistance: {
        requestsMetadata: RequestRemoteAssistanceRequestBuilderRequestsMetadata,
    },
    resetPasscode: {
        requestsMetadata: ResetPasscodeRequestBuilderRequestsMetadata,
    },
    retire: {
        requestsMetadata: RetireRequestBuilderRequestsMetadata,
    },
    shutDown: {
        requestsMetadata: ShutDownRequestBuilderRequestsMetadata,
    },
    syncDevice: {
        requestsMetadata: SyncDeviceRequestBuilderRequestsMetadata,
    },
    updateWindowsDeviceAccount: {
        requestsMetadata: UpdateWindowsDeviceAccountRequestBuilderRequestsMetadata,
    },
    users: {
        requestsMetadata: UsersRequestBuilderRequestsMetadata,
    },
    windowsDefenderScan: {
        requestsMetadata: WindowsDefenderScanRequestBuilderRequestsMetadata,
    },
    windowsDefenderUpdateSignatures: {
        requestsMetadata: WindowsDefenderUpdateSignaturesRequestBuilderRequestsMetadata,
    },
    windowsProtectionState: {
        requestsMetadata: WindowsProtectionStateRequestBuilderRequestsMetadata,
        navigationMetadata: WindowsProtectionStateRequestBuilderNavigationMetadata,
    },
    wipe: {
        requestsMetadata: WipeRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ManagedDeviceItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ManagedDeviceItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ManagedDeviceItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createManagedDeviceFromDiscriminatorValue,
        queryParametersMapper: ManagedDeviceItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ManagedDeviceItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createManagedDeviceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeManagedDevice,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
