/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDeviceMetadataFromDiscriminatorValue, createIntegratedApplicationMetadataFromDiscriminatorValue, createPolicyLocationFromDiscriminatorValue, createPolicyUserScopeFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, PolicyPivotProperty, PolicyPivotPropertyObject, serializeBaseCollectionPaginationCountResponse, serializeDeviceMetadata, serializeIntegratedApplicationMetadata, serializePolicyLocation, serializePolicyUserScope, type BaseCollectionPaginationCountResponse, type DeviceMetadata, type IntegratedApplicationMetadata, type PolicyLocation, type PolicyUserScope, UserActivityTypes, UserActivityTypesObject } from '@microsoft/msgraph-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ComputePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The activities property
     */
    activities?: UserActivityTypes[] | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The deviceMetadata property
     */
    deviceMetadata?: DeviceMetadata | null;
    /**
     * The integratedAppMetadata property
     */
    integratedAppMetadata?: IntegratedApplicationMetadata | null;
    /**
     * The locations property
     */
    locations?: PolicyLocation[] | null;
    /**
     * The pivotOn property
     */
    pivotOn?: PolicyPivotProperty | null;
}
export interface ComputePostResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: PolicyUserScope[] | null;
}
/**
 * Provides operations to call the compute method.
 */
export interface ComputeRequestBuilder extends BaseRequestBuilder<ComputeRequestBuilder> {
    /**
     * Invoke action compute
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ComputePostResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: ComputePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ComputePostResponse | undefined>;
    /**
     * Invoke action compute
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ComputePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ComputePostRequestBody}
 */
// @ts-ignore
export function createComputePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoComputePostRequestBody;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ComputePostResponse}
 */
// @ts-ignore
export function createComputePostResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoComputePostResponse;
}
/**
 * The deserialization information for the current model
 * @param ComputePostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoComputePostRequestBody(computePostRequestBody: Partial<ComputePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "activities": n => { computePostRequestBody.activities = n.getCollectionOfEnumValues<UserActivityTypes>(UserActivityTypesObject); },
        "backingStoreEnabled": n => { computePostRequestBody.backingStoreEnabled = true; },
        "deviceMetadata": n => { computePostRequestBody.deviceMetadata = n.getObjectValue<DeviceMetadata>(createDeviceMetadataFromDiscriminatorValue); },
        "integratedAppMetadata": n => { computePostRequestBody.integratedAppMetadata = n.getObjectValue<IntegratedApplicationMetadata>(createIntegratedApplicationMetadataFromDiscriminatorValue); },
        "locations": n => { computePostRequestBody.locations = n.getCollectionOfObjectValues<PolicyLocation>(createPolicyLocationFromDiscriminatorValue); },
        "pivotOn": n => { computePostRequestBody.pivotOn = n.getEnumValue<PolicyPivotProperty>(PolicyPivotPropertyObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param ComputePostResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoComputePostResponse(computePostResponse: Partial<ComputePostResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(computePostResponse),
        "value": n => { computePostResponse.value = n.getCollectionOfObjectValues<PolicyUserScope>(createPolicyUserScopeFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param ComputePostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeComputePostRequestBody(writer: SerializationWriter, computePostRequestBody: Partial<ComputePostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!computePostRequestBody || isSerializingDerivedType) { return; }
    writer.writeEnumValue<UserActivityTypes[]>("activities", computePostRequestBody.activities);
    writer.writeObjectValue<DeviceMetadata>("deviceMetadata", computePostRequestBody.deviceMetadata, serializeDeviceMetadata);
    writer.writeObjectValue<IntegratedApplicationMetadata>("integratedAppMetadata", computePostRequestBody.integratedAppMetadata, serializeIntegratedApplicationMetadata);
    writer.writeCollectionOfObjectValues<PolicyLocation>("locations", computePostRequestBody.locations, serializePolicyLocation);
    writer.writeEnumValue<PolicyPivotProperty>("pivotOn", computePostRequestBody.pivotOn);
    writer.writeAdditionalData(computePostRequestBody.additionalData);
}
/**
 * Serializes information the current object
 * @param ComputePostResponse The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeComputePostResponse(writer: SerializationWriter, computePostResponse: Partial<ComputePostResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!computePostResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, computePostResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<PolicyUserScope>("value", computePostResponse.value, serializePolicyUserScope);
}
/**
 * Uri template for the request builder.
 */
export const ComputeRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/dataSecurityAndGovernance/protectionScopes/compute";
/**
 * Metadata for all the requests in the request builder.
 */
export const ComputeRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ComputeRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createComputePostResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeComputePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
