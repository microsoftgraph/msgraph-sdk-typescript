/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createProfilePhotoFromDiscriminatorValue, serializeProfilePhoto, type ProfilePhoto } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { ContentRequestBuilderRequestsMetadata, type ContentRequestBuilder } from './value/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the photo property of the microsoft.graph.contact entity.
 */
export interface PhotoRequestBuilder extends BaseRequestBuilder<PhotoRequestBuilder> {
    /**
     * Provides operations to manage the media for the user entity.
     */
    get content(): ContentRequestBuilder;
    /**
     * Optional contact picture. You can get or set a photo for a contact.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProfilePhoto>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<PhotoRequestBuilderGetQueryParameters> | undefined) : Promise<ProfilePhoto | undefined>;
    /**
     * Update the navigation property photo in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ProfilePhoto>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: ProfilePhoto, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ProfilePhoto | undefined>;
    /**
     * Optional contact picture. You can get or set a photo for a contact.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PhotoRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property photo in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: ProfilePhoto, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Optional contact picture. You can get or set a photo for a contact.
 */
export interface PhotoRequestBuilderGetQueryParameters {
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const PhotoRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/contactFolders/{contactFolder%2Did}/contacts/{contact%2Did}/photo{?%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PhotoRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PhotoRequestBuilderNavigationMetadata: Record<Exclude<keyof PhotoRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    content: {
        requestsMetadata: ContentRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PhotoRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PhotoRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createProfilePhotoFromDiscriminatorValue,
        queryParametersMapper: PhotoRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: PhotoRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createProfilePhotoFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeProfilePhoto,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
