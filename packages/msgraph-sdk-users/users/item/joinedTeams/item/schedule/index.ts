/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createScheduleFromDiscriminatorValue, serializeSchedule, type Schedule } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { OfferShiftRequestsRequestBuilderNavigationMetadata, OfferShiftRequestsRequestBuilderRequestsMetadata, type OfferShiftRequestsRequestBuilder } from './offerShiftRequests/';
// @ts-ignore
import { OpenShiftChangeRequestsRequestBuilderNavigationMetadata, OpenShiftChangeRequestsRequestBuilderRequestsMetadata, type OpenShiftChangeRequestsRequestBuilder } from './openShiftChangeRequests/';
// @ts-ignore
import { OpenShiftsRequestBuilderNavigationMetadata, OpenShiftsRequestBuilderRequestsMetadata, type OpenShiftsRequestBuilder } from './openShifts/';
// @ts-ignore
import { SchedulingGroupsRequestBuilderNavigationMetadata, SchedulingGroupsRequestBuilderRequestsMetadata, type SchedulingGroupsRequestBuilder } from './schedulingGroups/';
// @ts-ignore
import { ShareRequestBuilderRequestsMetadata, type ShareRequestBuilder } from './share/';
// @ts-ignore
import { ShiftsRequestBuilderNavigationMetadata, ShiftsRequestBuilderRequestsMetadata, type ShiftsRequestBuilder } from './shifts/';
// @ts-ignore
import { SwapShiftsChangeRequestsRequestBuilderNavigationMetadata, SwapShiftsChangeRequestsRequestBuilderRequestsMetadata, type SwapShiftsChangeRequestsRequestBuilder } from './swapShiftsChangeRequests/';
// @ts-ignore
import { TimeOffReasonsRequestBuilderNavigationMetadata, TimeOffReasonsRequestBuilderRequestsMetadata, type TimeOffReasonsRequestBuilder } from './timeOffReasons/';
// @ts-ignore
import { TimeOffRequestsRequestBuilderNavigationMetadata, TimeOffRequestsRequestBuilderRequestsMetadata, type TimeOffRequestsRequestBuilder } from './timeOffRequests/';
// @ts-ignore
import { TimesOffRequestBuilderNavigationMetadata, TimesOffRequestBuilderRequestsMetadata, type TimesOffRequestBuilder } from './timesOff/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the schedule property of the microsoft.graph.team entity.
 */
export interface ScheduleRequestBuilder extends BaseRequestBuilder<ScheduleRequestBuilder> {
    /**
     * Provides operations to manage the offerShiftRequests property of the microsoft.graph.schedule entity.
     */
    get offerShiftRequests(): OfferShiftRequestsRequestBuilder;
    /**
     * Provides operations to manage the openShiftChangeRequests property of the microsoft.graph.schedule entity.
     */
    get openShiftChangeRequests(): OpenShiftChangeRequestsRequestBuilder;
    /**
     * Provides operations to manage the openShifts property of the microsoft.graph.schedule entity.
     */
    get openShifts(): OpenShiftsRequestBuilder;
    /**
     * Provides operations to manage the schedulingGroups property of the microsoft.graph.schedule entity.
     */
    get schedulingGroups(): SchedulingGroupsRequestBuilder;
    /**
     * Provides operations to call the share method.
     */
    get share(): ShareRequestBuilder;
    /**
     * Provides operations to manage the shifts property of the microsoft.graph.schedule entity.
     */
    get shifts(): ShiftsRequestBuilder;
    /**
     * Provides operations to manage the swapShiftsChangeRequests property of the microsoft.graph.schedule entity.
     */
    get swapShiftsChangeRequests(): SwapShiftsChangeRequestsRequestBuilder;
    /**
     * Provides operations to manage the timeOffReasons property of the microsoft.graph.schedule entity.
     */
    get timeOffReasons(): TimeOffReasonsRequestBuilder;
    /**
     * Provides operations to manage the timeOffRequests property of the microsoft.graph.schedule entity.
     */
    get timeOffRequests(): TimeOffRequestsRequestBuilder;
    /**
     * Provides operations to manage the timesOff property of the microsoft.graph.schedule entity.
     */
    get timesOff(): TimesOffRequestBuilder;
    /**
     * Delete navigation property schedule for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties and relationships of a schedule object. The schedule creation process conforms to the One API guideline for resource based long running operations (RELO).When clients use the PUT method, if the schedule is provisioned, the operation updates the schedule; otherwise, the operation starts the schedule provisioning process in the background. During schedule provisioning, clients can use the GET method to get the schedule and look at the provisionStatus property for the current state of the provisioning. If the provisioning failed, clients can get additional information from the provisionStatusCode property. Clients can also inspect the configuration of the schedule.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Schedule>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/schedule-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ScheduleRequestBuilderGetQueryParameters> | undefined) : Promise<Schedule | undefined>;
    /**
     * Update the navigation property schedule in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Schedule>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     put(body: Schedule, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Schedule | undefined>;
    /**
     * Delete navigation property schedule for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties and relationships of a schedule object. The schedule creation process conforms to the One API guideline for resource based long running operations (RELO).When clients use the PUT method, if the schedule is provisioned, the operation updates the schedule; otherwise, the operation starts the schedule provisioning process in the background. During schedule provisioning, clients can use the GET method to get the schedule and look at the provisionStatus property for the current state of the provisioning. If the provisioning failed, clients can get additional information from the provisionStatusCode property. Clients can also inspect the configuration of the schedule.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ScheduleRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property schedule in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: Schedule, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties and relationships of a schedule object. The schedule creation process conforms to the One API guideline for resource based long running operations (RELO).When clients use the PUT method, if the schedule is provisioned, the operation updates the schedule; otherwise, the operation starts the schedule provisioning process in the background. During schedule provisioning, clients can use the GET method to get the schedule and look at the provisionStatus property for the current state of the provisioning. If the provisioning failed, clients can get additional information from the provisionStatusCode property. Clients can also inspect the configuration of the schedule.
 */
export interface ScheduleRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ScheduleRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/joinedTeams/{team%2Did}/schedule{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ScheduleRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ScheduleRequestBuilderNavigationMetadata: Record<Exclude<keyof ScheduleRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    offerShiftRequests: {
        requestsMetadata: OfferShiftRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: OfferShiftRequestsRequestBuilderNavigationMetadata,
    },
    openShiftChangeRequests: {
        requestsMetadata: OpenShiftChangeRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: OpenShiftChangeRequestsRequestBuilderNavigationMetadata,
    },
    openShifts: {
        requestsMetadata: OpenShiftsRequestBuilderRequestsMetadata,
        navigationMetadata: OpenShiftsRequestBuilderNavigationMetadata,
    },
    schedulingGroups: {
        requestsMetadata: SchedulingGroupsRequestBuilderRequestsMetadata,
        navigationMetadata: SchedulingGroupsRequestBuilderNavigationMetadata,
    },
    share: {
        requestsMetadata: ShareRequestBuilderRequestsMetadata,
    },
    shifts: {
        requestsMetadata: ShiftsRequestBuilderRequestsMetadata,
        navigationMetadata: ShiftsRequestBuilderNavigationMetadata,
    },
    swapShiftsChangeRequests: {
        requestsMetadata: SwapShiftsChangeRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: SwapShiftsChangeRequestsRequestBuilderNavigationMetadata,
    },
    timeOffReasons: {
        requestsMetadata: TimeOffReasonsRequestBuilderRequestsMetadata,
        navigationMetadata: TimeOffReasonsRequestBuilderNavigationMetadata,
    },
    timeOffRequests: {
        requestsMetadata: TimeOffRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: TimeOffRequestsRequestBuilderNavigationMetadata,
    },
    timesOff: {
        requestsMetadata: TimesOffRequestBuilderRequestsMetadata,
        navigationMetadata: TimesOffRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ScheduleRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ScheduleRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ScheduleRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createScheduleFromDiscriminatorValue,
        queryParametersMapper: ScheduleRequestBuilderGetQueryParametersMapper,
    },
    put: {
        uriTemplate: ScheduleRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createScheduleFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSchedule,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
