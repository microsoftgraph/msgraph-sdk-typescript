/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSharedWithChannelTeamInfoFromDiscriminatorValue, serializeSharedWithChannelTeamInfo, type SharedWithChannelTeamInfo } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { AllowedMembersRequestBuilderNavigationMetadata, AllowedMembersRequestBuilderRequestsMetadata, type AllowedMembersRequestBuilder } from './allowedMembers/';
import { TeamRequestBuilderRequestsMetadata, type TeamRequestBuilder } from './team/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the sharedWithTeams property of the microsoft.graph.channel entity.
 */
export interface SharedWithChannelTeamInfoItemRequestBuilder extends BaseRequestBuilder<SharedWithChannelTeamInfoItemRequestBuilder> {
    /**
     * Provides operations to manage the allowedMembers property of the microsoft.graph.sharedWithChannelTeamInfo entity.
     */
    get allowedMembers(): AllowedMembersRequestBuilder;
    /**
     * Provides operations to manage the team property of the microsoft.graph.teamInfo entity.
     */
    get team(): TeamRequestBuilder;
    /**
     * Unshare a channel with a team by deleting the corresponding sharedWithChannelTeamInfo resource. This operation is allowed only for channels with a membershipType value of shared.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/sharedwithchannelteaminfo-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get a team that has been shared with a specified channel. This operation is allowed only for channels with a membershipType value of shared.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SharedWithChannelTeamInfo>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/sharedwithchannelteaminfo-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<SharedWithChannelTeamInfoItemRequestBuilderGetQueryParameters> | undefined) : Promise<SharedWithChannelTeamInfo | undefined>;
    /**
     * Update the navigation property sharedWithTeams in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SharedWithChannelTeamInfo>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: SharedWithChannelTeamInfo, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SharedWithChannelTeamInfo | undefined>;
    /**
     * Unshare a channel with a team by deleting the corresponding sharedWithChannelTeamInfo resource. This operation is allowed only for channels with a membershipType value of shared.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get a team that has been shared with a specified channel. This operation is allowed only for channels with a membershipType value of shared.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SharedWithChannelTeamInfoItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property sharedWithTeams in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: SharedWithChannelTeamInfo, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a team that has been shared with a specified channel. This operation is allowed only for channels with a membershipType value of shared.
 */
export interface SharedWithChannelTeamInfoItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const SharedWithChannelTeamInfoItemRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/joinedTeams/{team%2Did}/primaryChannel/sharedWithTeams/{sharedWithChannelTeamInfo%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SharedWithChannelTeamInfoItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SharedWithChannelTeamInfoItemRequestBuilderNavigationMetadata: Record<Exclude<keyof SharedWithChannelTeamInfoItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    allowedMembers: {
        requestsMetadata: AllowedMembersRequestBuilderRequestsMetadata,
        navigationMetadata: AllowedMembersRequestBuilderNavigationMetadata,
    },
    team: {
        requestsMetadata: TeamRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SharedWithChannelTeamInfoItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: SharedWithChannelTeamInfoItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: SharedWithChannelTeamInfoItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSharedWithChannelTeamInfoFromDiscriminatorValue,
        queryParametersMapper: SharedWithChannelTeamInfoItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: SharedWithChannelTeamInfoItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSharedWithChannelTeamInfoFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSharedWithChannelTeamInfo,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
