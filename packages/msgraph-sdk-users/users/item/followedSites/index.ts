/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSiteCollectionResponseFromDiscriminatorValue, type SiteCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { SiteItemRequestBuilderRequestsMetadata, type SiteItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the followedSites property of the microsoft.graph.user entity.
 */
export interface FollowedSitesRequestBuilder extends BaseRequestBuilder<FollowedSitesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the followedSites property of the microsoft.graph.user entity.
     * @param siteId The unique identifier of site
     * @returns {SiteItemRequestBuilder}
     */
     bySiteId(siteId: string) : SiteItemRequestBuilder;
    /**
     * List the sites that have been followed by the signed in user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SiteCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/sites-list-followed?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<FollowedSitesRequestBuilderGetQueryParameters> | undefined) : Promise<SiteCollectionResponse | undefined>;
    /**
     * List the sites that have been followed by the signed in user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<FollowedSitesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * List the sites that have been followed by the signed in user.
 */
export interface FollowedSitesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const FollowedSitesRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/followedSites{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const FollowedSitesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const FollowedSitesRequestBuilderNavigationMetadata: Record<Exclude<keyof FollowedSitesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySiteId: {
        requestsMetadata: SiteItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["site%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const FollowedSitesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: FollowedSitesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSiteCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: FollowedSitesRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to manage the followedSites property of the microsoft.graph.user entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    CreatedByUser: "createdByUser",
    LastModifiedByUser: "lastModifiedByUser",
    Analytics: "analytics",
    Columns: "columns",
    ContentTypes: "contentTypes",
    Drive: "drive",
    Drives: "drives",
    ExternalColumns: "externalColumns",
    Items: "items",
    Lists: "lists",
    Onenote: "onenote",
    Operations: "operations",
    Permissions: "permissions",
    Sites: "sites",
    TermStore: "termStore",
    TermStores: "termStores",
} as const;
/**
 * Provides operations to manage the followedSites property of the microsoft.graph.user entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    CreatedBy: "createdBy",
    CreatedByDesc: "createdBy desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    Description: "description",
    DescriptionDesc: "description desc",
    ETag: "eTag",
    ETagDesc: "eTag desc",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedByDesc: "lastModifiedBy desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    Name: "name",
    NameDesc: "name desc",
    ParentReference: "parentReference",
    ParentReferenceDesc: "parentReference desc",
    WebUrl: "webUrl",
    WebUrlDesc: "webUrl desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    ErrorEscaped: "error",
    ErrorDesc: "error desc",
    IsPersonalSite: "isPersonalSite",
    IsPersonalSiteDesc: "isPersonalSite desc",
    Root: "root",
    RootDesc: "root desc",
    SharepointIds: "sharepointIds",
    SharepointIdsDesc: "sharepointIds desc",
    SiteCollection: "siteCollection",
    SiteCollectionDesc: "siteCollection desc",
} as const;
/**
 * Provides operations to manage the followedSites property of the microsoft.graph.user entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    CreatedBy: "createdBy",
    CreatedDateTime: "createdDateTime",
    Description: "description",
    ETag: "eTag",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedDateTime: "lastModifiedDateTime",
    Name: "name",
    ParentReference: "parentReference",
    WebUrl: "webUrl",
    DisplayName: "displayName",
    ErrorEscaped: "error",
    IsPersonalSite: "isPersonalSite",
    Root: "root",
    SharepointIds: "sharepointIds",
    SiteCollection: "siteCollection",
    CreatedByUser: "createdByUser",
    LastModifiedByUser: "lastModifiedByUser",
    Analytics: "analytics",
    Columns: "columns",
    ContentTypes: "contentTypes",
    Drive: "drive",
    Drives: "drives",
    ExternalColumns: "externalColumns",
    Items: "items",
    Lists: "lists",
    Onenote: "onenote",
    Operations: "operations",
    Permissions: "permissions",
    Sites: "sites",
    TermStore: "termStore",
    TermStores: "termStores",
} as const;
/* tslint:enable */
/* eslint-enable */
