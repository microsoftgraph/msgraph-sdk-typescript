/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createEmployeeExperienceUserFromDiscriminatorValue, serializeEmployeeExperienceUser, type EmployeeExperienceUser } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { LearningCourseActivitiesRequestBuilderNavigationMetadata, LearningCourseActivitiesRequestBuilderRequestsMetadata, type LearningCourseActivitiesRequestBuilder } from './learningCourseActivities/';
import { LearningCourseActivitiesWithExternalcourseActivityIdRequestBuilderRequestsMetadata, type LearningCourseActivitiesWithExternalcourseActivityIdRequestBuilder } from './learningCourseActivitiesWithExternalcourseActivityId/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the employeeExperience property of the microsoft.graph.user entity.
 */
export interface EmployeeExperienceRequestBuilder extends BaseRequestBuilder<EmployeeExperienceRequestBuilder> {
    /**
     * Provides operations to manage the learningCourseActivities property of the microsoft.graph.employeeExperienceUser entity.
     */
    get learningCourseActivities(): LearningCourseActivitiesRequestBuilder;
    /**
     * Delete navigation property employeeExperience for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get employeeExperience from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EmployeeExperienceUser>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<EmployeeExperienceRequestBuilderGetQueryParameters> | undefined) : Promise<EmployeeExperienceUser | undefined>;
    /**
     * Provides operations to manage the learningCourseActivities property of the microsoft.graph.employeeExperienceUser entity.
     * @param externalcourseActivityId Alternate key of learningCourseActivity
     * @returns {LearningCourseActivitiesWithExternalcourseActivityIdRequestBuilder}
     */
     learningCourseActivitiesWithExternalcourseActivityId(externalcourseActivityId: string | undefined) : LearningCourseActivitiesWithExternalcourseActivityIdRequestBuilder;
    /**
     * Update the navigation property employeeExperience in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EmployeeExperienceUser>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: EmployeeExperienceUser, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<EmployeeExperienceUser | undefined>;
    /**
     * Delete navigation property employeeExperience for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get employeeExperience from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EmployeeExperienceRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property employeeExperience in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: EmployeeExperienceUser, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get employeeExperience from users
 */
export interface EmployeeExperienceRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const EmployeeExperienceRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/employeeExperience{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EmployeeExperienceRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EmployeeExperienceRequestBuilderNavigationMetadata: Record<Exclude<keyof EmployeeExperienceRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    learningCourseActivitiesWithExternalcourseActivityId: {
        requestsMetadata: LearningCourseActivitiesWithExternalcourseActivityIdRequestBuilderRequestsMetadata,
    },
    learningCourseActivities: {
        requestsMetadata: LearningCourseActivitiesRequestBuilderRequestsMetadata,
        navigationMetadata: LearningCourseActivitiesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EmployeeExperienceRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: EmployeeExperienceRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: EmployeeExperienceRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createEmployeeExperienceUserFromDiscriminatorValue,
        queryParametersMapper: EmployeeExperienceRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: EmployeeExperienceRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createEmployeeExperienceUserFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeEmployeeExperienceUser,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
