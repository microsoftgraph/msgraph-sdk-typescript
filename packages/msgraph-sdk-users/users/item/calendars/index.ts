/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCalendarCollectionResponseFromDiscriminatorValue, createCalendarFromDiscriminatorValue, serializeCalendar, type Calendar, type CalendarCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { CalendarItemRequestBuilderNavigationMetadata, CalendarItemRequestBuilderRequestsMetadata, type CalendarItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the calendars property of the microsoft.graph.user entity.
 */
export interface CalendarsRequestBuilder extends BaseRequestBuilder<CalendarsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the calendars property of the microsoft.graph.user entity.
     * @param calendarId The unique identifier of calendar
     * @returns {CalendarItemRequestBuilder}
     */
     byCalendarId(calendarId: string) : CalendarItemRequestBuilder;
    /**
     * Get all the user's calendars (/calendars navigation property), get the calendars from the default calendar group or from a specific calendar group.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CalendarCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/user-list-calendars?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<CalendarsRequestBuilderGetQueryParameters> | undefined) : Promise<CalendarCollectionResponse | undefined>;
    /**
     * Create a new calendar for a user.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Calendar>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/user-post-calendars?view=graph-rest-1.0|Find more info here}
     */
     post(body: Calendar, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Calendar | undefined>;
    /**
     * Get all the user's calendars (/calendars navigation property), get the calendars from the default calendar group or from a specific calendar group.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CalendarsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new calendar for a user.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Calendar, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get all the user's calendars (/calendars navigation property), get the calendars from the default calendar group or from a specific calendar group.
 */
export interface CalendarsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const CalendarsRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/calendars{?%24count,%24expand,%24filter,%24orderby,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CalendarsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CalendarsRequestBuilderNavigationMetadata: Record<Exclude<keyof CalendarsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byCalendarId: {
        requestsMetadata: CalendarItemRequestBuilderRequestsMetadata,
        navigationMetadata: CalendarItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["calendar%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CalendarsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CalendarsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCalendarCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: CalendarsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: CalendarsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCalendarFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCalendar,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the calendars property of the microsoft.graph.user entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    CalendarPermissions: "calendarPermissions",
    CalendarView: "calendarView",
    Events: "events",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/**
 * Provides operations to manage the calendars property of the microsoft.graph.user entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AllowedOnlineMeetingProviders: "allowedOnlineMeetingProviders",
    AllowedOnlineMeetingProvidersDesc: "allowedOnlineMeetingProviders desc",
    CanEdit: "canEdit",
    CanEditDesc: "canEdit desc",
    CanShare: "canShare",
    CanShareDesc: "canShare desc",
    CanViewPrivateItems: "canViewPrivateItems",
    CanViewPrivateItemsDesc: "canViewPrivateItems desc",
    ChangeKey: "changeKey",
    ChangeKeyDesc: "changeKey desc",
    Color: "color",
    ColorDesc: "color desc",
    DefaultOnlineMeetingProvider: "defaultOnlineMeetingProvider",
    DefaultOnlineMeetingProviderDesc: "defaultOnlineMeetingProvider desc",
    HexColor: "hexColor",
    HexColorDesc: "hexColor desc",
    IsDefaultCalendar: "isDefaultCalendar",
    IsDefaultCalendarDesc: "isDefaultCalendar desc",
    IsRemovable: "isRemovable",
    IsRemovableDesc: "isRemovable desc",
    IsTallyingResponses: "isTallyingResponses",
    IsTallyingResponsesDesc: "isTallyingResponses desc",
    Name: "name",
    NameDesc: "name desc",
    Owner: "owner",
    OwnerDesc: "owner desc",
} as const;
/**
 * Provides operations to manage the calendars property of the microsoft.graph.user entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AllowedOnlineMeetingProviders: "allowedOnlineMeetingProviders",
    CanEdit: "canEdit",
    CanShare: "canShare",
    CanViewPrivateItems: "canViewPrivateItems",
    ChangeKey: "changeKey",
    Color: "color",
    DefaultOnlineMeetingProvider: "defaultOnlineMeetingProvider",
    HexColor: "hexColor",
    IsDefaultCalendar: "isDefaultCalendar",
    IsRemovable: "isRemovable",
    IsTallyingResponses: "isTallyingResponses",
    Name: "name",
    Owner: "owner",
    CalendarPermissions: "calendarPermissions",
    CalendarView: "calendarView",
    Events: "events",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/* tslint:enable */
/* eslint-enable */
