/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCalendarGroupCollectionResponseFromDiscriminatorValue, createCalendarGroupFromDiscriminatorValue, serializeCalendarGroup, type CalendarGroup, type CalendarGroupCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { CalendarGroupItemRequestBuilderNavigationMetadata, CalendarGroupItemRequestBuilderRequestsMetadata, type CalendarGroupItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the calendarGroups property of the microsoft.graph.user entity.
 */
export interface CalendarGroupsRequestBuilder extends BaseRequestBuilder<CalendarGroupsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the calendarGroups property of the microsoft.graph.user entity.
     * @param calendarGroupId The unique identifier of calendarGroup
     * @returns {CalendarGroupItemRequestBuilder}
     */
     byCalendarGroupId(calendarGroupId: string) : CalendarGroupItemRequestBuilder;
    /**
     * Get the user's calendar groups.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CalendarGroupCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/user-list-calendargroups?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<CalendarGroupsRequestBuilderGetQueryParameters> | undefined) : Promise<CalendarGroupCollectionResponse | undefined>;
    /**
     * Use this API to create a new CalendarGroup.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CalendarGroup>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/user-post-calendargroups?view=graph-rest-1.0|Find more info here}
     */
     post(body: CalendarGroup, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CalendarGroup | undefined>;
    /**
     * Get the user's calendar groups.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CalendarGroupsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Use this API to create a new CalendarGroup.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CalendarGroup, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the user's calendar groups.
 */
export interface CalendarGroupsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const CalendarGroupsRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/calendarGroups{?%24count,%24filter,%24orderby,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CalendarGroupsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CalendarGroupsRequestBuilderNavigationMetadata: Record<Exclude<keyof CalendarGroupsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byCalendarGroupId: {
        requestsMetadata: CalendarGroupItemRequestBuilderRequestsMetadata,
        navigationMetadata: CalendarGroupItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["calendarGroup%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CalendarGroupsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: CalendarGroupsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createCalendarGroupCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: CalendarGroupsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: CalendarGroupsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createCalendarGroupFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCalendarGroup,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
