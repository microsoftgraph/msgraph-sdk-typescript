/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAppCatalogsFromDiscriminatorValue, serializeAppCatalogs, type AppCatalogs } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { TeamsAppsRequestBuilderNavigationMetadata, TeamsAppsRequestBuilderRequestsMetadata, type TeamsAppsRequestBuilder } from './teamsApps/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the appCatalogs singleton.
 */
export interface AppCatalogsRequestBuilder extends BaseRequestBuilder<AppCatalogsRequestBuilder> {
    /**
     * Provides operations to manage the teamsApps property of the microsoft.graph.appCatalogs entity.
     */
    get teamsApps(): TeamsAppsRequestBuilder;
    /**
     * Get appCatalogs
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AppCatalogs>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AppCatalogsRequestBuilderGetQueryParameters> | undefined) : Promise<AppCatalogs | undefined>;
    /**
     * Update appCatalogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AppCatalogs>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: AppCatalogs, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AppCatalogs | undefined>;
    /**
     * Get appCatalogs
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AppCatalogsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update appCatalogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AppCatalogs, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get appCatalogs
 */
export interface AppCatalogsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const AppCatalogsRequestBuilderUriTemplate = "{+baseurl}/appCatalogs{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AppCatalogsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AppCatalogsRequestBuilderNavigationMetadata: Record<Exclude<keyof AppCatalogsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    teamsApps: {
        requestsMetadata: TeamsAppsRequestBuilderRequestsMetadata,
        navigationMetadata: TeamsAppsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AppCatalogsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AppCatalogsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAppCatalogsFromDiscriminatorValue,
        queryParametersMapper: AppCatalogsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: AppCatalogsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAppCatalogsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAppCatalogs,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
