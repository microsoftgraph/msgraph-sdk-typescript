/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDirectoryRoleCollectionResponseFromDiscriminatorValue, createDirectoryRoleFromDiscriminatorValue, serializeDirectoryRole, type DirectoryRole, type DirectoryRoleCollectionResponse } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, CountRequestBuilderUriTemplate, type CountRequestBuilder } from './count/';
import { DeltaRequestBuilderRequestsMetadata, DeltaRequestBuilderUriTemplate, type DeltaRequestBuilder } from './delta/';
import { GetAvailableExtensionPropertiesRequestBuilderRequestsMetadata, GetAvailableExtensionPropertiesRequestBuilderUriTemplate, type GetAvailableExtensionPropertiesRequestBuilder } from './getAvailableExtensionProperties/';
import { GetByIdsRequestBuilderRequestsMetadata, GetByIdsRequestBuilderUriTemplate, type GetByIdsRequestBuilder } from './getByIds/';
import { DirectoryRoleItemRequestBuilderNavigationMetadata, DirectoryRoleItemRequestBuilderRequestsMetadata, DirectoryRoleItemRequestBuilderUriTemplate, type DirectoryRoleItemRequestBuilder } from './item/';
import { type ValidatePropertiesRequestBuilder, ValidatePropertiesRequestBuilderRequestsMetadata, ValidatePropertiesRequestBuilderUriTemplate } from './validateProperties/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of directoryRole entities.
 */
export interface DirectoryRolesRequestBuilder extends BaseRequestBuilder<DirectoryRolesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the delta method.
     */
    get delta(): DeltaRequestBuilder;
    /**
     * Provides operations to call the getAvailableExtensionProperties method.
     */
    get getAvailableExtensionProperties(): GetAvailableExtensionPropertiesRequestBuilder;
    /**
     * Provides operations to call the getByIds method.
     */
    get getByIds(): GetByIdsRequestBuilder;
    /**
     * Provides operations to call the validateProperties method.
     */
    get validateProperties(): ValidatePropertiesRequestBuilder;
    /**
     * Provides operations to manage the collection of directoryRole entities.
     * @param directoryRoleId The unique identifier of directoryRole
     * @returns a DirectoryRoleItemRequestBuilder
     */
     byDirectoryRoleId(directoryRoleId: string) : DirectoryRoleItemRequestBuilder;
    /**
     * List the directory roles that are activated in the tenant. This operation only returns roles that have been activated. A role becomes activated when an admin activates the role using the Activate directoryRole API. Not all built-in roles are initially activated.  When assigning a role using the Microsoft Entra admin center, the role activation step is implicitly done on the admin's behalf. To get the full list of roles that are available in Microsoft Entra ID, use List directoryRoleTemplates.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of DirectoryRoleCollectionResponse
     * @see {@link https://learn.microsoft.com/graph/api/directoryrole-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<DirectoryRolesRequestBuilderGetQueryParameters> | undefined) : Promise<DirectoryRoleCollectionResponse | undefined>;
    /**
     * Activate a directory role. To read a directory role or update its members, it must first be activated in the tenant. The Company Administrators and the implicit user directory roles (User, Guest User, and Restricted Guest User roles) are activated by default. To access and assign members to other directory roles, you must first activate it with its corresponding directory role template ID.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of DirectoryRole
     * @see {@link https://learn.microsoft.com/graph/api/directoryrole-post-directoryroles?view=graph-rest-1.0|Find more info here}
     */
     post(body: DirectoryRole, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DirectoryRole | undefined>;
    /**
     * List the directory roles that are activated in the tenant. This operation only returns roles that have been activated. A role becomes activated when an admin activates the role using the Activate directoryRole API. Not all built-in roles are initially activated.  When assigning a role using the Microsoft Entra admin center, the role activation step is implicitly done on the admin's behalf. To get the full list of roles that are available in Microsoft Entra ID, use List directoryRoleTemplates.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DirectoryRolesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Activate a directory role. To read a directory role or update its members, it must first be activated in the tenant. The Company Administrators and the implicit user directory roles (User, Guest User, and Restricted Guest User roles) are activated by default. To access and assign members to other directory roles, you must first activate it with its corresponding directory role template ID.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: DirectoryRole, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * List the directory roles that are activated in the tenant. This operation only returns roles that have been activated. A role becomes activated when an admin activates the role using the Activate directoryRole API. Not all built-in roles are initially activated.  When assigning a role using the Microsoft Entra admin center, the role activation step is implicitly done on the admin's behalf. To get the full list of roles that are available in Microsoft Entra ID, use List directoryRoleTemplates.
 */
export interface DirectoryRolesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DirectoryRolesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DirectoryRolesRequestBuilderNavigationMetadata: Record<Exclude<keyof DirectoryRolesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDirectoryRoleId: {
        uriTemplate: DirectoryRoleItemRequestBuilderUriTemplate,
        requestsMetadata: DirectoryRoleItemRequestBuilderRequestsMetadata,
        navigationMetadata: DirectoryRoleItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["directoryRole%2Did"],
    },
    count: {
        uriTemplate: CountRequestBuilderUriTemplate,
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    delta: {
        uriTemplate: DeltaRequestBuilderUriTemplate,
        requestsMetadata: DeltaRequestBuilderRequestsMetadata,
    },
    getAvailableExtensionProperties: {
        uriTemplate: GetAvailableExtensionPropertiesRequestBuilderUriTemplate,
        requestsMetadata: GetAvailableExtensionPropertiesRequestBuilderRequestsMetadata,
    },
    getByIds: {
        uriTemplate: GetByIdsRequestBuilderUriTemplate,
        requestsMetadata: GetByIdsRequestBuilderRequestsMetadata,
    },
    validateProperties: {
        uriTemplate: ValidatePropertiesRequestBuilderUriTemplate,
        requestsMetadata: ValidatePropertiesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DirectoryRolesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createDirectoryRoleCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: DirectoryRolesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createDirectoryRoleFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDirectoryRole,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const DirectoryRolesRequestBuilderUriTemplate = "{+baseurl}/directoryRoles{?%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
