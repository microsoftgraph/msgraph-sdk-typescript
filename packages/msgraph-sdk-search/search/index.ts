/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createSearchEntityFromDiscriminatorValue, serializeSearchEntity, type SearchEntity } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { AcronymsRequestBuilderNavigationMetadata, AcronymsRequestBuilderRequestsMetadata, type AcronymsRequestBuilder } from './acronyms/';
// @ts-ignore
import { BookmarksRequestBuilderNavigationMetadata, BookmarksRequestBuilderRequestsMetadata, type BookmarksRequestBuilder } from './bookmarks/';
// @ts-ignore
import { QnasRequestBuilderNavigationMetadata, QnasRequestBuilderRequestsMetadata, type QnasRequestBuilder } from './qnas/';
// @ts-ignore
import { QueryRequestBuilderRequestsMetadata, type QueryRequestBuilder } from './query/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the searchEntity singleton.
 */
export interface SearchRequestBuilder extends BaseRequestBuilder<SearchRequestBuilder> {
    /**
     * Provides operations to manage the acronyms property of the microsoft.graph.searchEntity entity.
     */
    get acronyms(): AcronymsRequestBuilder;
    /**
     * Provides operations to manage the bookmarks property of the microsoft.graph.searchEntity entity.
     */
    get bookmarks(): BookmarksRequestBuilder;
    /**
     * Provides operations to manage the qnas property of the microsoft.graph.searchEntity entity.
     */
    get qnas(): QnasRequestBuilder;
    /**
     * Provides operations to call the query method.
     */
    get query(): QueryRequestBuilder;
    /**
     * Get search
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SearchEntity>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SearchRequestBuilderGetQueryParameters> | undefined) : Promise<SearchEntity | undefined>;
    /**
     * Update search
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SearchEntity>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: SearchEntity, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SearchEntity | undefined>;
    /**
     * Get search
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SearchRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update search
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: SearchEntity, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get search
 */
export interface SearchRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const SearchRequestBuilderUriTemplate = "{+baseurl}/search{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SearchRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SearchRequestBuilderNavigationMetadata: Record<Exclude<keyof SearchRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    acronyms: {
        requestsMetadata: AcronymsRequestBuilderRequestsMetadata,
        navigationMetadata: AcronymsRequestBuilderNavigationMetadata,
    },
    bookmarks: {
        requestsMetadata: BookmarksRequestBuilderRequestsMetadata,
        navigationMetadata: BookmarksRequestBuilderNavigationMetadata,
    },
    qnas: {
        requestsMetadata: QnasRequestBuilderRequestsMetadata,
        navigationMetadata: QnasRequestBuilderNavigationMetadata,
    },
    query: {
        requestsMetadata: QueryRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SearchRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SearchRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSearchEntityFromDiscriminatorValue,
        queryParametersMapper: SearchRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: SearchRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSearchEntityFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSearchEntity,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
