/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAgreementFileLocalizationFromDiscriminatorValue, serializeAgreementFileLocalization, type AgreementFileLocalization } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type VersionsRequestBuilder, VersionsRequestBuilderNavigationMetadata, VersionsRequestBuilderRequestsMetadata } from './versions/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the localizations property of the microsoft.graph.agreementFile entity.
 */
export interface AgreementFileLocalizationItemRequestBuilder extends BaseRequestBuilder<AgreementFileLocalizationItemRequestBuilder> {
    /**
     * Provides operations to manage the versions property of the microsoft.graph.agreementFileLocalization entity.
     */
    get versions(): VersionsRequestBuilder;
    /**
     * Delete navigation property localizations for agreements
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The localized version of the terms of use agreement files attached to the agreement.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AgreementFileLocalization>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<AgreementFileLocalizationItemRequestBuilderGetQueryParameters> | undefined) : Promise<AgreementFileLocalization | undefined>;
    /**
     * Update the navigation property localizations in agreements
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AgreementFileLocalization>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: AgreementFileLocalization, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AgreementFileLocalization | undefined>;
    /**
     * Delete navigation property localizations for agreements
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The localized version of the terms of use agreement files attached to the agreement.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AgreementFileLocalizationItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property localizations in agreements
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: AgreementFileLocalization, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The localized version of the terms of use agreement files attached to the agreement.
 */
export interface AgreementFileLocalizationItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const AgreementFileLocalizationItemRequestBuilderUriTemplate = "{+baseurl}/agreements/{agreement%2Did}/file/localizations/{agreementFileLocalization%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AgreementFileLocalizationItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AgreementFileLocalizationItemRequestBuilderNavigationMetadata: Record<Exclude<keyof AgreementFileLocalizationItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    versions: {
        requestsMetadata: VersionsRequestBuilderRequestsMetadata,
        navigationMetadata: VersionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AgreementFileLocalizationItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: AgreementFileLocalizationItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: AgreementFileLocalizationItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAgreementFileLocalizationFromDiscriminatorValue,
        queryParametersMapper: AgreementFileLocalizationItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: AgreementFileLocalizationItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAgreementFileLocalizationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAgreementFileLocalization,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
