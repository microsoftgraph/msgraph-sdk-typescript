/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createInvitationParticipantInfoFromDiscriminatorValue, createParticipantInfoFromDiscriminatorValue, serializeInvitationParticipantInfo, serializeParticipantInfo, type InvitationParticipantInfo, type ParticipantInfo } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {TransferPostRequestBody}
 */
export function createTransferPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTransferPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoTransferPostRequestBody(transferPostRequestBody: Partial<TransferPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { transferPostRequestBody.backingStoreEnabled = true; },
        "transferee": n => { transferPostRequestBody.transferee = n.getObjectValue<ParticipantInfo>(createParticipantInfoFromDiscriminatorValue); },
        "transferTarget": n => { transferPostRequestBody.transferTarget = n.getObjectValue<InvitationParticipantInfo>(createInvitationParticipantInfoFromDiscriminatorValue); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTransferPostRequestBody(writer: SerializationWriter, transferPostRequestBody: Partial<TransferPostRequestBody> | undefined = {}) : void {
    writer.writeObjectValue<ParticipantInfo>("transferee", transferPostRequestBody.transferee, serializeParticipantInfo);
    writer.writeObjectValue<InvitationParticipantInfo>("transferTarget", transferPostRequestBody.transferTarget, serializeInvitationParticipantInfo);
    writer.writeAdditionalData(transferPostRequestBody.additionalData);
}
export interface TransferPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The transferee property
     */
    transferee?: ParticipantInfo;
    /**
     * The transferTarget property
     */
    transferTarget?: InvitationParticipantInfo;
}
/**
 * Provides operations to call the transfer method.
 */
export interface TransferRequestBuilder extends BaseRequestBuilder<TransferRequestBuilder> {
    /**
     * Transfer an active peer-to-peer call or group call. A consultative transfer means that the transferor can inform the person they want to transfer the call to (the transferee), before the transfer is made. This is opposed to transfering the call directly.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/call-transfer?view=graph-rest-1.0|Find more info here}
     */
     post(body: TransferPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Transfer an active peer-to-peer call or group call. A consultative transfer means that the transferor can inform the person they want to transfer the call to (the transferee), before the transfer is made. This is opposed to transfering the call directly.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: TransferPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const TransferRequestBuilderUriTemplate = "{+baseurl}/communications/calls/{call%2Did}/transfer";
/**
 * Metadata for all the requests in the request builder.
 */
export const TransferRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: TransferRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTransferPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
