/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createIncomingCallOptionsFromDiscriminatorValue, createMediaConfigFromDiscriminatorValue, Modality, ModalityObject, serializeIncomingCallOptions, serializeMediaConfig, type IncomingCallOptions, type MediaConfig } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AnswerPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The acceptedModalities property
     */
    acceptedModalities?: Modality[];
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The callbackUri property
     */
    callbackUri?: string;
    /**
     * The callOptions property
     */
    callOptions?: IncomingCallOptions;
    /**
     * The mediaConfig property
     */
    mediaConfig?: MediaConfig;
    /**
     * The participantCapacity property
     */
    participantCapacity?: number;
}
/**
 * Provides operations to call the answer method.
 */
export interface AnswerRequestBuilder extends BaseRequestBuilder<AnswerRequestBuilder> {
    /**
     * Enable a bot to answer an incoming call. The incoming call request can be an invite from a participant in a group call or a peer-to-peer call. If an invite to a group call is received, the notification will contain the chatInfo and meetingInfo parameters. The bot is expected to answer, reject, or redirect the call before the call times out. The current timeout value is 15 seconds for regular scenarios, and 5 seconds for policy-based recording scenarios.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/call-answer?view=graph-rest-1.0|Find more info here}
     */
     post(body: AnswerPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Enable a bot to answer an incoming call. The incoming call request can be an invite from a participant in a group call or a peer-to-peer call. If an invite to a group call is received, the notification will contain the chatInfo and meetingInfo parameters. The bot is expected to answer, reject, or redirect the call before the call times out. The current timeout value is 15 seconds for regular scenarios, and 5 seconds for policy-based recording scenarios.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: AnswerPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AnswerPostRequestBody}
 */
export function createAnswerPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAnswerPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAnswerPostRequestBody(answerPostRequestBody: Partial<AnswerPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "acceptedModalities": n => { answerPostRequestBody.acceptedModalities = n.getCollectionOfEnumValues<Modality>(ModalityObject); },
        "backingStoreEnabled": n => { answerPostRequestBody.backingStoreEnabled = true; },
        "callbackUri": n => { answerPostRequestBody.callbackUri = n.getStringValue(); },
        "callOptions": n => { answerPostRequestBody.callOptions = n.getObjectValue<IncomingCallOptions>(createIncomingCallOptionsFromDiscriminatorValue); },
        "mediaConfig": n => { answerPostRequestBody.mediaConfig = n.getObjectValue<MediaConfig>(createMediaConfigFromDiscriminatorValue); },
        "participantCapacity": n => { answerPostRequestBody.participantCapacity = n.getNumberValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAnswerPostRequestBody(writer: SerializationWriter, answerPostRequestBody: Partial<AnswerPostRequestBody> | undefined = {}) : void {
    if(answerPostRequestBody.acceptedModalities)
    writer.writeEnumValue<Modality>("acceptedModalities", ...answerPostRequestBody.acceptedModalities);
    writer.writeStringValue("callbackUri", answerPostRequestBody.callbackUri);
    writer.writeObjectValue<IncomingCallOptions>("callOptions", answerPostRequestBody.callOptions, serializeIncomingCallOptions);
    writer.writeObjectValue<MediaConfig>("mediaConfig", answerPostRequestBody.mediaConfig, serializeMediaConfig);
    writer.writeNumberValue("participantCapacity", answerPostRequestBody.participantCapacity);
    writer.writeAdditionalData(answerPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const AnswerRequestBuilderUriTemplate = "{+baseurl}/communications/calls/{call%2Did}/answer";
/**
 * Metadata for all the requests in the request builder.
 */
export const AnswerRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: AnswerRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAnswerPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
