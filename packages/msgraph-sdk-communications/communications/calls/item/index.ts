/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCallFromDiscriminatorValue, serializeCall, type Call } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { AddLargeGalleryViewRequestBuilderRequestsMetadata, type AddLargeGalleryViewRequestBuilder } from './addLargeGalleryView/';
// @ts-ignore
import { AnswerRequestBuilderRequestsMetadata, type AnswerRequestBuilder } from './answer/';
// @ts-ignore
import { AudioRoutingGroupsRequestBuilderNavigationMetadata, AudioRoutingGroupsRequestBuilderRequestsMetadata, type AudioRoutingGroupsRequestBuilder } from './audioRoutingGroups/';
// @ts-ignore
import { CancelMediaProcessingRequestBuilderRequestsMetadata, type CancelMediaProcessingRequestBuilder } from './cancelMediaProcessing/';
// @ts-ignore
import { ChangeScreenSharingRoleRequestBuilderRequestsMetadata, type ChangeScreenSharingRoleRequestBuilder } from './changeScreenSharingRole/';
// @ts-ignore
import { ContentSharingSessionsRequestBuilderNavigationMetadata, ContentSharingSessionsRequestBuilderRequestsMetadata, type ContentSharingSessionsRequestBuilder } from './contentSharingSessions/';
// @ts-ignore
import { KeepAliveRequestBuilderRequestsMetadata, type KeepAliveRequestBuilder } from './keepAlive/';
// @ts-ignore
import { MuteRequestBuilderRequestsMetadata, type MuteRequestBuilder } from './mute/';
// @ts-ignore
import { OperationsRequestBuilderNavigationMetadata, OperationsRequestBuilderRequestsMetadata, type OperationsRequestBuilder } from './operations/';
// @ts-ignore
import { ParticipantsRequestBuilderNavigationMetadata, ParticipantsRequestBuilderRequestsMetadata, type ParticipantsRequestBuilder } from './participants/';
// @ts-ignore
import { PlayPromptRequestBuilderRequestsMetadata, type PlayPromptRequestBuilder } from './playPrompt/';
// @ts-ignore
import { RecordResponseRequestBuilderRequestsMetadata, type RecordResponseRequestBuilder } from './recordResponse/';
// @ts-ignore
import { RedirectRequestBuilderRequestsMetadata, type RedirectRequestBuilder } from './redirect/';
// @ts-ignore
import { RejectRequestBuilderRequestsMetadata, type RejectRequestBuilder } from './reject/';
// @ts-ignore
import { SendDtmfTonesRequestBuilderRequestsMetadata, type SendDtmfTonesRequestBuilder } from './sendDtmfTones/';
// @ts-ignore
import { SubscribeToToneRequestBuilderRequestsMetadata, type SubscribeToToneRequestBuilder } from './subscribeToTone/';
// @ts-ignore
import { TransferRequestBuilderRequestsMetadata, type TransferRequestBuilder } from './transfer/';
// @ts-ignore
import { type UnmuteRequestBuilder, UnmuteRequestBuilderRequestsMetadata } from './unmute/';
// @ts-ignore
import { type UpdateRecordingStatusRequestBuilder, UpdateRecordingStatusRequestBuilderRequestsMetadata } from './updateRecordingStatus/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the calls property of the microsoft.graph.cloudCommunications entity.
 */
export interface CallItemRequestBuilder extends BaseRequestBuilder<CallItemRequestBuilder> {
    /**
     * Provides operations to call the addLargeGalleryView method.
     */
    get addLargeGalleryView(): AddLargeGalleryViewRequestBuilder;
    /**
     * Provides operations to call the answer method.
     */
    get answer(): AnswerRequestBuilder;
    /**
     * Provides operations to manage the audioRoutingGroups property of the microsoft.graph.call entity.
     */
    get audioRoutingGroups(): AudioRoutingGroupsRequestBuilder;
    /**
     * Provides operations to call the cancelMediaProcessing method.
     */
    get cancelMediaProcessing(): CancelMediaProcessingRequestBuilder;
    /**
     * Provides operations to call the changeScreenSharingRole method.
     */
    get changeScreenSharingRole(): ChangeScreenSharingRoleRequestBuilder;
    /**
     * Provides operations to manage the contentSharingSessions property of the microsoft.graph.call entity.
     */
    get contentSharingSessions(): ContentSharingSessionsRequestBuilder;
    /**
     * Provides operations to call the keepAlive method.
     */
    get keepAlive(): KeepAliveRequestBuilder;
    /**
     * Provides operations to call the mute method.
     */
    get mute(): MuteRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.call entity.
     */
    get operations(): OperationsRequestBuilder;
    /**
     * Provides operations to manage the participants property of the microsoft.graph.call entity.
     */
    get participants(): ParticipantsRequestBuilder;
    /**
     * Provides operations to call the playPrompt method.
     */
    get playPrompt(): PlayPromptRequestBuilder;
    /**
     * Provides operations to call the recordResponse method.
     */
    get recordResponse(): RecordResponseRequestBuilder;
    /**
     * Provides operations to call the redirect method.
     */
    get redirect(): RedirectRequestBuilder;
    /**
     * Provides operations to call the reject method.
     */
    get reject(): RejectRequestBuilder;
    /**
     * Provides operations to call the sendDtmfTones method.
     */
    get sendDtmfTones(): SendDtmfTonesRequestBuilder;
    /**
     * Provides operations to call the subscribeToTone method.
     */
    get subscribeToTone(): SubscribeToToneRequestBuilder;
    /**
     * Provides operations to call the transfer method.
     */
    get transfer(): TransferRequestBuilder;
    /**
     * Provides operations to call the unmute method.
     */
    get unmute(): UnmuteRequestBuilder;
    /**
     * Provides operations to call the updateRecordingStatus method.
     */
    get updateRecordingStatus(): UpdateRecordingStatusRequestBuilder;
    /**
     * Delete navigation property calls for communications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get calls from communications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Call>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<CallItemRequestBuilderGetQueryParameters> | undefined) : Promise<Call | undefined>;
    /**
     * Update the navigation property calls in communications
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Call>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Call, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Call | undefined>;
    /**
     * Delete navigation property calls for communications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get calls from communications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CallItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property calls in communications
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Call, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get calls from communications
 */
export interface CallItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const CallItemRequestBuilderUriTemplate = "{+baseurl}/communications/calls/{call%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CallItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CallItemRequestBuilderNavigationMetadata: Record<Exclude<keyof CallItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    addLargeGalleryView: {
        requestsMetadata: AddLargeGalleryViewRequestBuilderRequestsMetadata,
    },
    answer: {
        requestsMetadata: AnswerRequestBuilderRequestsMetadata,
    },
    audioRoutingGroups: {
        requestsMetadata: AudioRoutingGroupsRequestBuilderRequestsMetadata,
        navigationMetadata: AudioRoutingGroupsRequestBuilderNavigationMetadata,
    },
    cancelMediaProcessing: {
        requestsMetadata: CancelMediaProcessingRequestBuilderRequestsMetadata,
    },
    changeScreenSharingRole: {
        requestsMetadata: ChangeScreenSharingRoleRequestBuilderRequestsMetadata,
    },
    contentSharingSessions: {
        requestsMetadata: ContentSharingSessionsRequestBuilderRequestsMetadata,
        navigationMetadata: ContentSharingSessionsRequestBuilderNavigationMetadata,
    },
    keepAlive: {
        requestsMetadata: KeepAliveRequestBuilderRequestsMetadata,
    },
    mute: {
        requestsMetadata: MuteRequestBuilderRequestsMetadata,
    },
    operations: {
        requestsMetadata: OperationsRequestBuilderRequestsMetadata,
        navigationMetadata: OperationsRequestBuilderNavigationMetadata,
    },
    participants: {
        requestsMetadata: ParticipantsRequestBuilderRequestsMetadata,
        navigationMetadata: ParticipantsRequestBuilderNavigationMetadata,
    },
    playPrompt: {
        requestsMetadata: PlayPromptRequestBuilderRequestsMetadata,
    },
    recordResponse: {
        requestsMetadata: RecordResponseRequestBuilderRequestsMetadata,
    },
    redirect: {
        requestsMetadata: RedirectRequestBuilderRequestsMetadata,
    },
    reject: {
        requestsMetadata: RejectRequestBuilderRequestsMetadata,
    },
    sendDtmfTones: {
        requestsMetadata: SendDtmfTonesRequestBuilderRequestsMetadata,
    },
    subscribeToTone: {
        requestsMetadata: SubscribeToToneRequestBuilderRequestsMetadata,
    },
    transfer: {
        requestsMetadata: TransferRequestBuilderRequestsMetadata,
    },
    unmute: {
        requestsMetadata: UnmuteRequestBuilderRequestsMetadata,
    },
    updateRecordingStatus: {
        requestsMetadata: UpdateRecordingStatusRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CallItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: CallItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: CallItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCallFromDiscriminatorValue,
        queryParametersMapper: CallItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: CallItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCallFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCall,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
