/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createContentSharingSessionCollectionResponseFromDiscriminatorValue, createContentSharingSessionFromDiscriminatorValue, serializeContentSharingSession, type ContentSharingSession, type ContentSharingSessionCollectionResponse } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
// @ts-ignore
import { ContentSharingSessionItemRequestBuilderRequestsMetadata, type ContentSharingSessionItemRequestBuilder } from './item/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the contentSharingSessions property of the microsoft.graph.call entity.
 */
export interface ContentSharingSessionsRequestBuilder extends BaseRequestBuilder<ContentSharingSessionsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the contentSharingSessions property of the microsoft.graph.call entity.
     * @param contentSharingSessionId The unique identifier of contentSharingSession
     * @returns {ContentSharingSessionItemRequestBuilder}
     */
     byContentSharingSessionId(contentSharingSessionId: string) : ContentSharingSessionItemRequestBuilder;
    /**
     * Get contentSharingSessions from communications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ContentSharingSessionCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ContentSharingSessionsRequestBuilderGetQueryParameters> | undefined) : Promise<ContentSharingSessionCollectionResponse | undefined>;
    /**
     * Create new navigation property to contentSharingSessions for communications
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ContentSharingSession>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: ContentSharingSession, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ContentSharingSession | undefined>;
    /**
     * Get contentSharingSessions from communications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ContentSharingSessionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to contentSharingSessions for communications
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ContentSharingSession, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get contentSharingSessions from communications
 */
export interface ContentSharingSessionsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const ContentSharingSessionsRequestBuilderUriTemplate = "{+baseurl}/communications/calls/{call%2Did}/contentSharingSessions{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ContentSharingSessionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ContentSharingSessionsRequestBuilderNavigationMetadata: Record<Exclude<keyof ContentSharingSessionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byContentSharingSessionId: {
        requestsMetadata: ContentSharingSessionItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["contentSharingSession%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ContentSharingSessionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ContentSharingSessionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createContentSharingSessionCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: ContentSharingSessionsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ContentSharingSessionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createContentSharingSessionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeContentSharingSession,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
