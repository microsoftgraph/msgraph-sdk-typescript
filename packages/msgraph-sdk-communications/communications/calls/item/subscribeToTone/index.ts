/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createSubscribeToToneOperationFromDiscriminatorValue, serializeSubscribeToToneOperation, type SubscribeToToneOperation } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SubscribeToTonePostRequestBody}
 */
export function createSubscribeToTonePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSubscribeToTonePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoSubscribeToTonePostRequestBody(subscribeToTonePostRequestBody: Partial<SubscribeToTonePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { subscribeToTonePostRequestBody.backingStoreEnabled = true; },
        "clientContext": n => { subscribeToTonePostRequestBody.clientContext = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSubscribeToTonePostRequestBody(writer: SerializationWriter, subscribeToTonePostRequestBody: Partial<SubscribeToTonePostRequestBody> | undefined = {}) : void {
    writer.writeStringValue("clientContext", subscribeToTonePostRequestBody.clientContext);
    writer.writeAdditionalData(subscribeToTonePostRequestBody.additionalData);
}
export interface SubscribeToTonePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The clientContext property
     */
    clientContext?: string;
}
/**
 * Provides operations to call the subscribeToTone method.
 */
export interface SubscribeToToneRequestBuilder extends BaseRequestBuilder<SubscribeToToneRequestBuilder> {
    /**
     * Subscribe to DTMF (dual-tone multi-frequency signaling) which allows you to be notified when the user presses keys on a 'dialpad'.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscribeToToneOperation>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/call-subscribetotone?view=graph-rest-1.0|Find more info here}
     */
     post(body: SubscribeToTonePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscribeToToneOperation | undefined>;
    /**
     * Subscribe to DTMF (dual-tone multi-frequency signaling) which allows you to be notified when the user presses keys on a 'dialpad'.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SubscribeToTonePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const SubscribeToToneRequestBuilderUriTemplate = "{+baseurl}/communications/calls/{call%2Did}/subscribeToTone";
/**
 * Metadata for all the requests in the request builder.
 */
export const SubscribeToToneRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: SubscribeToToneRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscribeToToneOperationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSubscribeToTonePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
