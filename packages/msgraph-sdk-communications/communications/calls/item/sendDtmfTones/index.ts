/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSendDtmfTonesOperationFromDiscriminatorValue, serializeSendDtmfTonesOperation, Tone, ToneObject, type SendDtmfTonesOperation } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SendDtmfTonesPostRequestBody}
 */
export function createSendDtmfTonesPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSendDtmfTonesPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoSendDtmfTonesPostRequestBody(sendDtmfTonesPostRequestBody: Partial<SendDtmfTonesPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { sendDtmfTonesPostRequestBody.backingStoreEnabled = true; },
        "clientContext": n => { sendDtmfTonesPostRequestBody.clientContext = n.getStringValue(); },
        "delayBetweenTonesMs": n => { sendDtmfTonesPostRequestBody.delayBetweenTonesMs = n.getNumberValue(); },
        "tones": n => { sendDtmfTonesPostRequestBody.tones = n.getCollectionOfEnumValues<Tone>(ToneObject); },
    }
}
export interface SendDtmfTonesPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The clientContext property
     */
    clientContext?: string;
    /**
     * The delayBetweenTonesMs property
     */
    delayBetweenTonesMs?: number;
    /**
     * The tones property
     */
    tones?: Tone[];
}
/**
 * Provides operations to call the sendDtmfTones method.
 */
export interface SendDtmfTonesRequestBuilder extends BaseRequestBuilder<SendDtmfTonesRequestBuilder> {
    /**
     * Invoke action sendDtmfTones
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SendDtmfTonesOperation>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: SendDtmfTonesPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SendDtmfTonesOperation | undefined>;
    /**
     * Invoke action sendDtmfTones
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SendDtmfTonesPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeSendDtmfTonesPostRequestBody(writer: SerializationWriter, sendDtmfTonesPostRequestBody: Partial<SendDtmfTonesPostRequestBody> | undefined = {}) : void {
    writer.writeStringValue("clientContext", sendDtmfTonesPostRequestBody.clientContext);
    writer.writeNumberValue("delayBetweenTonesMs", sendDtmfTonesPostRequestBody.delayBetweenTonesMs);
    if(sendDtmfTonesPostRequestBody.tones)
    writer.writeEnumValue<Tone>("tones", ...sendDtmfTonesPostRequestBody.tones);
    writer.writeAdditionalData(sendDtmfTonesPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const SendDtmfTonesRequestBuilderUriTemplate = "{+baseurl}/communications/calls/{call%2Did}/sendDtmfTones";
/**
 * Metadata for all the requests in the request builder.
 */
export const SendDtmfTonesRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: SendDtmfTonesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSendDtmfTonesOperationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSendDtmfTonesPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
