/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createInvitationParticipantInfoFromDiscriminatorValue, serializeInvitationParticipantInfo, type InvitationParticipantInfo } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RedirectPostRequestBody}
 */
export function createRedirectPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRedirectPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRedirectPostRequestBody(redirectPostRequestBody: Partial<RedirectPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { redirectPostRequestBody.backingStoreEnabled = true; },
        "callbackUri": n => { redirectPostRequestBody.callbackUri = n.getStringValue(); },
        "targets": n => { redirectPostRequestBody.targets = n.getCollectionOfObjectValues<InvitationParticipantInfo>(createInvitationParticipantInfoFromDiscriminatorValue); },
        "timeout": n => { redirectPostRequestBody.timeout = n.getNumberValue(); },
    }
}
export interface RedirectPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The callbackUri property
     */
    callbackUri?: string;
    /**
     * The targets property
     */
    targets?: InvitationParticipantInfo[];
    /**
     * The timeout property
     */
    timeout?: number;
}
/**
 * Provides operations to call the redirect method.
 */
export interface RedirectRequestBuilder extends BaseRequestBuilder<RedirectRequestBuilder> {
    /**
     * Redirect an incoming call that hasn't been answered or rejected yet. The terms 'redirecting' and 'forwarding' a call are used interchangeably. The bot is expected to redirect the call before the call times out. The current timeout value is 15 seconds.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/call-redirect?view=graph-rest-1.0|Find more info here}
     */
     post(body: RedirectPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Redirect an incoming call that hasn't been answered or rejected yet. The terms 'redirecting' and 'forwarding' a call are used interchangeably. The bot is expected to redirect the call before the call times out. The current timeout value is 15 seconds.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: RedirectPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRedirectPostRequestBody(writer: SerializationWriter, redirectPostRequestBody: Partial<RedirectPostRequestBody> | undefined = {}) : void {
    writer.writeStringValue("callbackUri", redirectPostRequestBody.callbackUri);
    writer.writeCollectionOfObjectValues<InvitationParticipantInfo>("targets", redirectPostRequestBody.targets, serializeInvitationParticipantInfo);
    writer.writeNumberValue("timeout", redirectPostRequestBody.timeout);
    writer.writeAdditionalData(redirectPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const RedirectRequestBuilderUriTemplate = "{+baseurl}/communications/calls/{call%2Did}/redirect";
/**
 * Metadata for all the requests in the request builder.
 */
export const RedirectRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: RedirectRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRedirectPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
