/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createMuteParticipantOperationFromDiscriminatorValue, serializeMuteParticipantOperation, type MuteParticipantOperation } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MutePostRequestBody}
 */
export function createMutePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMutePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoMutePostRequestBody(mutePostRequestBody: Partial<MutePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { mutePostRequestBody.backingStoreEnabled = true; },
        "clientContext": n => { mutePostRequestBody.clientContext = n.getStringValue(); },
    }
}
export interface MutePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The clientContext property
     */
    clientContext?: string;
}
/**
 * Provides operations to call the mute method.
 */
export interface MuteRequestBuilder extends BaseRequestBuilder<MuteRequestBuilder> {
    /**
     * Mute a specific participant in the call. This is a server mute, meaning that the server will drop all audio packets for this participant, even if the participant continues to stream audio. For more information about how to handle mute operations, see muteParticipantOperation.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<MuteParticipantOperation>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/participant-mute?view=graph-rest-1.0|Find more info here}
     */
     post(body: MutePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<MuteParticipantOperation | undefined>;
    /**
     * Mute a specific participant in the call. This is a server mute, meaning that the server will drop all audio packets for this participant, even if the participant continues to stream audio. For more information about how to handle mute operations, see muteParticipantOperation.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: MutePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeMutePostRequestBody(writer: SerializationWriter, mutePostRequestBody: Partial<MutePostRequestBody> | undefined = {}) : void {
    writer.writeStringValue("clientContext", mutePostRequestBody.clientContext);
    writer.writeAdditionalData(mutePostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const MuteRequestBuilderUriTemplate = "{+baseurl}/communications/calls/{call%2Did}/participants/{participant%2Did}/mute";
/**
 * Metadata for all the requests in the request builder.
 */
export const MuteRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: MuteRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createMuteParticipantOperationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMutePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
