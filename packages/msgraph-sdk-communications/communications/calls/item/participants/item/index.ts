/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createParticipantFromDiscriminatorValue, serializeParticipant, type Participant } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { MuteRequestBuilderRequestsMetadata, type MuteRequestBuilder } from './mute/';
// @ts-ignore
import { StartHoldMusicRequestBuilderRequestsMetadata, type StartHoldMusicRequestBuilder } from './startHoldMusic/';
// @ts-ignore
import { StopHoldMusicRequestBuilderRequestsMetadata, type StopHoldMusicRequestBuilder } from './stopHoldMusic/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the participants property of the microsoft.graph.call entity.
 */
export interface ParticipantItemRequestBuilder extends BaseRequestBuilder<ParticipantItemRequestBuilder> {
    /**
     * Provides operations to call the mute method.
     */
    get mute(): MuteRequestBuilder;
    /**
     * Provides operations to call the startHoldMusic method.
     */
    get startHoldMusic(): StartHoldMusicRequestBuilder;
    /**
     * Provides operations to call the stopHoldMusic method.
     */
    get stopHoldMusic(): StopHoldMusicRequestBuilder;
    /**
     * Delete a specific participant in a call. In some situations, it is appropriate for an application to remove a participant from an active call. This action can be done before or after the participant answers the call. When an active caller is removed, they are immediately dropped from the call with no pre- or post-removal notification. When an invited participant is removed, any outstanding add participant request is canceled. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/participant-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties and relationships of a participant object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Participant>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/participant-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ParticipantItemRequestBuilderGetQueryParameters> | undefined) : Promise<Participant | undefined>;
    /**
     * Update the navigation property participants in communications
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Participant>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Participant, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Participant | undefined>;
    /**
     * Delete a specific participant in a call. In some situations, it is appropriate for an application to remove a participant from an active call. This action can be done before or after the participant answers the call. When an active caller is removed, they are immediately dropped from the call with no pre- or post-removal notification. When an invited participant is removed, any outstanding add participant request is canceled. 
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties and relationships of a participant object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ParticipantItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property participants in communications
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Participant, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties and relationships of a participant object.
 */
export interface ParticipantItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ParticipantItemRequestBuilderUriTemplate = "{+baseurl}/communications/calls/{call%2Did}/participants/{participant%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ParticipantItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ParticipantItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ParticipantItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    mute: {
        requestsMetadata: MuteRequestBuilderRequestsMetadata,
    },
    startHoldMusic: {
        requestsMetadata: StartHoldMusicRequestBuilderRequestsMetadata,
    },
    stopHoldMusic: {
        requestsMetadata: StopHoldMusicRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ParticipantItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ParticipantItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ParticipantItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createParticipantFromDiscriminatorValue,
        queryParametersMapper: ParticipantItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ParticipantItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createParticipantFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeParticipant,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
