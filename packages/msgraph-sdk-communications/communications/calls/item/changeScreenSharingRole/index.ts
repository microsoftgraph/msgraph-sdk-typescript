/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { ScreenSharingRole, ScreenSharingRoleObject } from '@microsoft/msgraph-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ChangeScreenSharingRolePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The role property
     */
    role?: ScreenSharingRole | null;
}
/**
 * Provides operations to call the changeScreenSharingRole method.
 */
export interface ChangeScreenSharingRoleRequestBuilder extends BaseRequestBuilder<ChangeScreenSharingRoleRequestBuilder> {
    /**
     * Allow applications to share screen content with the participants of a group call.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/call-changescreensharingrole?view=graph-rest-1.0|Find more info here}
     */
     post(body: ChangeScreenSharingRolePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Allow applications to share screen content with the participants of a group call.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ChangeScreenSharingRolePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ChangeScreenSharingRolePostRequestBody}
 */
// @ts-ignore
export function createChangeScreenSharingRolePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoChangeScreenSharingRolePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param ChangeScreenSharingRolePostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoChangeScreenSharingRolePostRequestBody(changeScreenSharingRolePostRequestBody: Partial<ChangeScreenSharingRolePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { changeScreenSharingRolePostRequestBody.backingStoreEnabled = true; },
        "role": n => { changeScreenSharingRolePostRequestBody.role = n.getEnumValue<ScreenSharingRole>(ScreenSharingRoleObject); },
    }
}
/**
 * Serializes information the current object
 * @param ChangeScreenSharingRolePostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeChangeScreenSharingRolePostRequestBody(writer: SerializationWriter, changeScreenSharingRolePostRequestBody: Partial<ChangeScreenSharingRolePostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!changeScreenSharingRolePostRequestBody || isSerializingDerivedType) { return; }
    writer.writeEnumValue<ScreenSharingRole>("role", changeScreenSharingRolePostRequestBody.role);
    writer.writeAdditionalData(changeScreenSharingRolePostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const ChangeScreenSharingRoleRequestBuilderUriTemplate = "{+baseurl}/communications/calls/{call%2Did}/changeScreenSharingRole";
/**
 * Metadata for all the requests in the request builder.
 */
export const ChangeScreenSharingRoleRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: ChangeScreenSharingRoleRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeChangeScreenSharingRolePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
