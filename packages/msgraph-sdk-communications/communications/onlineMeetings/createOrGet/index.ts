/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createChatInfoFromDiscriminatorValue, createMeetingParticipantsFromDiscriminatorValue, createOnlineMeetingFromDiscriminatorValue, serializeChatInfo, serializeMeetingParticipants, serializeOnlineMeeting, type ChatInfo, type MeetingParticipants, type OnlineMeeting } from '@microsoft/msgraph-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateOrGetPostRequestBody}
 */
// @ts-ignore
export function createCreateOrGetPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateOrGetPostRequestBody;
}
export interface CreateOrGetPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The chatInfo property
     */
    chatInfo?: ChatInfo | null;
    /**
     * The endDateTime property
     */
    endDateTime?: Date | null;
    /**
     * The externalId property
     */
    externalId?: string | null;
    /**
     * The participants property
     */
    participants?: MeetingParticipants | null;
    /**
     * The startDateTime property
     */
    startDateTime?: Date | null;
    /**
     * The subject property
     */
    subject?: string | null;
}
/**
 * Provides operations to call the createOrGet method.
 */
export interface CreateOrGetRequestBuilder extends BaseRequestBuilder<CreateOrGetRequestBuilder> {
    /**
     * Create an onlineMeeting object with a custom specified external ID. If the external ID already exists, this API will return the onlineMeeting object with that external ID. 
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OnlineMeeting>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/onlinemeeting-createorget?view=graph-rest-1.0|Find more info here}
     */
     post(body: CreateOrGetPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<OnlineMeeting | undefined>;
    /**
     * Create an onlineMeeting object with a custom specified external ID. If the external ID already exists, this API will return the onlineMeeting object with that external ID. 
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CreateOrGetPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The deserialization information for the current model
 * @param CreateOrGetPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateOrGetPostRequestBody(createOrGetPostRequestBody: Partial<CreateOrGetPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { createOrGetPostRequestBody.backingStoreEnabled = true; },
        "chatInfo": n => { createOrGetPostRequestBody.chatInfo = n.getObjectValue<ChatInfo>(createChatInfoFromDiscriminatorValue); },
        "endDateTime": n => { createOrGetPostRequestBody.endDateTime = n.getDateValue(); },
        "externalId": n => { createOrGetPostRequestBody.externalId = n.getStringValue(); },
        "participants": n => { createOrGetPostRequestBody.participants = n.getObjectValue<MeetingParticipants>(createMeetingParticipantsFromDiscriminatorValue); },
        "startDateTime": n => { createOrGetPostRequestBody.startDateTime = n.getDateValue(); },
        "subject": n => { createOrGetPostRequestBody.subject = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param CreateOrGetPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateOrGetPostRequestBody(writer: SerializationWriter, createOrGetPostRequestBody: Partial<CreateOrGetPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!createOrGetPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeObjectValue<ChatInfo>("chatInfo", createOrGetPostRequestBody.chatInfo, serializeChatInfo);
    writer.writeDateValue("endDateTime", createOrGetPostRequestBody.endDateTime);
    writer.writeStringValue("externalId", createOrGetPostRequestBody.externalId);
    writer.writeObjectValue<MeetingParticipants>("participants", createOrGetPostRequestBody.participants, serializeMeetingParticipants);
    writer.writeDateValue("startDateTime", createOrGetPostRequestBody.startDateTime);
    writer.writeStringValue("subject", createOrGetPostRequestBody.subject);
    writer.writeAdditionalData(createOrGetPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const CreateOrGetRequestBuilderUriTemplate = "{+baseurl}/communications/onlineMeetings/createOrGet";
/**
 * Metadata for all the requests in the request builder.
 */
export const CreateOrGetRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: CreateOrGetRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createOnlineMeetingFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCreateOrGetPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
