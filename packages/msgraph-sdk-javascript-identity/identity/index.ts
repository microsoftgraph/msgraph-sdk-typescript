/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createIdentityContainerFromDiscriminatorValue, serializeIdentityContainer, type IdentityContainer } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { ApiConnectorsRequestBuilderNavigationMetadata, ApiConnectorsRequestBuilderRequestsMetadata, ApiConnectorsRequestBuilderUriTemplate, type ApiConnectorsRequestBuilder } from './apiConnectors/';
import { B2xUserFlowsRequestBuilderNavigationMetadata, B2xUserFlowsRequestBuilderRequestsMetadata, B2xUserFlowsRequestBuilderUriTemplate, type B2xUserFlowsRequestBuilder } from './b2xUserFlows/';
import { ConditionalAccessRequestBuilderNavigationMetadata, ConditionalAccessRequestBuilderRequestsMetadata, ConditionalAccessRequestBuilderUriTemplate, type ConditionalAccessRequestBuilder } from './conditionalAccess/';
import { IdentityProvidersRequestBuilderNavigationMetadata, IdentityProvidersRequestBuilderRequestsMetadata, IdentityProvidersRequestBuilderUriTemplate, type IdentityProvidersRequestBuilder } from './identityProviders/';
import { type UserFlowAttributesRequestBuilder, UserFlowAttributesRequestBuilderNavigationMetadata, UserFlowAttributesRequestBuilderRequestsMetadata, UserFlowAttributesRequestBuilderUriTemplate } from './userFlowAttributes/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the identityContainer singleton.
 */
export interface IdentityRequestBuilder extends BaseRequestBuilder<IdentityRequestBuilder> {
    /**
     * Provides operations to manage the apiConnectors property of the microsoft.graph.identityContainer entity.
     */
    get apiConnectors(): ApiConnectorsRequestBuilder;
    /**
     * Provides operations to manage the b2xUserFlows property of the microsoft.graph.identityContainer entity.
     */
    get b2xUserFlows(): B2xUserFlowsRequestBuilder;
    /**
     * Provides operations to manage the conditionalAccess property of the microsoft.graph.identityContainer entity.
     */
    get conditionalAccess(): ConditionalAccessRequestBuilder;
    /**
     * Provides operations to manage the identityProviders property of the microsoft.graph.identityContainer entity.
     */
    get identityProviders(): IdentityProvidersRequestBuilder;
    /**
     * Provides operations to manage the userFlowAttributes property of the microsoft.graph.identityContainer entity.
     */
    get userFlowAttributes(): UserFlowAttributesRequestBuilder;
    /**
     * Get identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of IdentityContainer
     */
     get(requestConfiguration?: RequestConfiguration<IdentityRequestBuilderGetQueryParameters> | undefined) : Promise<IdentityContainer | undefined>;
    /**
     * Update identity
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of IdentityContainer
     */
     patch(body: IdentityContainer, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<IdentityContainer | undefined>;
    /**
     * Get identity
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<IdentityRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update identity
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: IdentityContainer, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get identity
 */
export interface IdentityRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const IdentityRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const IdentityRequestBuilderNavigationMetadata: Record<Exclude<keyof IdentityRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    apiConnectors: {
        uriTemplate: ApiConnectorsRequestBuilderUriTemplate,
        requestsMetadata: ApiConnectorsRequestBuilderRequestsMetadata,
        navigationMetadata: ApiConnectorsRequestBuilderNavigationMetadata,
    },
    b2xUserFlows: {
        uriTemplate: B2xUserFlowsRequestBuilderUriTemplate,
        requestsMetadata: B2xUserFlowsRequestBuilderRequestsMetadata,
        navigationMetadata: B2xUserFlowsRequestBuilderNavigationMetadata,
    },
    conditionalAccess: {
        uriTemplate: ConditionalAccessRequestBuilderUriTemplate,
        requestsMetadata: ConditionalAccessRequestBuilderRequestsMetadata,
        navigationMetadata: ConditionalAccessRequestBuilderNavigationMetadata,
    },
    identityProviders: {
        uriTemplate: IdentityProvidersRequestBuilderUriTemplate,
        requestsMetadata: IdentityProvidersRequestBuilderRequestsMetadata,
        navigationMetadata: IdentityProvidersRequestBuilderNavigationMetadata,
    },
    userFlowAttributes: {
        uriTemplate: UserFlowAttributesRequestBuilderUriTemplate,
        requestsMetadata: UserFlowAttributesRequestBuilderRequestsMetadata,
        navigationMetadata: UserFlowAttributesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const IdentityRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createIdentityContainerFromDiscriminatorValue,
        queryParametersMapper: IdentityRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createIdentityContainerFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeIdentityContainer,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const IdentityRequestBuilderUriTemplate = "{+baseurl}/identity{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
