/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createApplicationCollectionResponseFromDiscriminatorValue, createApplicationFromDiscriminatorValue, serializeApplication, type Application, type ApplicationCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DeltaRequestBuilderRequestsMetadata, type DeltaRequestBuilder } from './delta/';
import { GetAvailableExtensionPropertiesRequestBuilderRequestsMetadata, type GetAvailableExtensionPropertiesRequestBuilder } from './getAvailableExtensionProperties/';
import { GetByIdsRequestBuilderRequestsMetadata, type GetByIdsRequestBuilder } from './getByIds/';
import { ApplicationItemRequestBuilderNavigationMetadata, ApplicationItemRequestBuilderRequestsMetadata, type ApplicationItemRequestBuilder } from './item/';
import { type ValidatePropertiesRequestBuilder, ValidatePropertiesRequestBuilderRequestsMetadata } from './validateProperties/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of application entities.
 */
export interface ApplicationsRequestBuilder extends BaseRequestBuilder<ApplicationsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the delta method.
     */
    get delta(): DeltaRequestBuilder;
    /**
     * Provides operations to call the getAvailableExtensionProperties method.
     */
    get getAvailableExtensionProperties(): GetAvailableExtensionPropertiesRequestBuilder;
    /**
     * Provides operations to call the getByIds method.
     */
    get getByIds(): GetByIdsRequestBuilder;
    /**
     * Provides operations to call the validateProperties method.
     */
    get validateProperties(): ValidatePropertiesRequestBuilder;
    /**
     * Provides operations to manage the collection of application entities.
     * @param applicationId The unique identifier of application
     * @returns {ApplicationItemRequestBuilder}
     */
     byApplicationId(applicationId: string) : ApplicationItemRequestBuilder;
    /**
     * Get the list of applications in this organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ApplicationCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/application-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ApplicationsRequestBuilderGetQueryParameters> | undefined) : Promise<ApplicationCollectionResponse | undefined>;
    /**
     * Create a new application object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Application>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/application-post-applications?view=graph-rest-1.0|Find more info here}
     */
     post(body: Application, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Application | undefined>;
    /**
     * Get the list of applications in this organization.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ApplicationsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new application object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Application, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the list of applications in this organization.
 */
export interface ApplicationsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const ApplicationsRequestBuilderUriTemplate = "{+baseurl}/applications{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ApplicationsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ApplicationsRequestBuilderNavigationMetadata: Record<Exclude<keyof ApplicationsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byApplicationId: {
        requestsMetadata: ApplicationItemRequestBuilderRequestsMetadata,
        navigationMetadata: ApplicationItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["application%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    delta: {
        requestsMetadata: DeltaRequestBuilderRequestsMetadata,
    },
    getAvailableExtensionProperties: {
        requestsMetadata: GetAvailableExtensionPropertiesRequestBuilderRequestsMetadata,
    },
    getByIds: {
        requestsMetadata: GetByIdsRequestBuilderRequestsMetadata,
    },
    validateProperties: {
        requestsMetadata: ValidatePropertiesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ApplicationsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ApplicationsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApplicationCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: ApplicationsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ApplicationsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createApplicationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApplication,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the collection of application entities.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AppManagementPolicies: "appManagementPolicies",
    CreatedOnBehalfOf: "createdOnBehalfOf",
    ExtensionProperties: "extensionProperties",
    FederatedIdentityCredentials: "federatedIdentityCredentials",
    HomeRealmDiscoveryPolicies: "homeRealmDiscoveryPolicies",
    Owners: "owners",
    Synchronization: "synchronization",
    TokenIssuancePolicies: "tokenIssuancePolicies",
    TokenLifetimePolicies: "tokenLifetimePolicies",
} as const;
/**
 * Provides operations to manage the collection of application entities.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    DeletedDateTime: "deletedDateTime",
    DeletedDateTimeDesc: "deletedDateTime desc",
    AddIns: "addIns",
    AddInsDesc: "addIns desc",
    Api: "api",
    ApiDesc: "api desc",
    AppId: "appId",
    AppIdDesc: "appId desc",
    ApplicationTemplateId: "applicationTemplateId",
    ApplicationTemplateIdDesc: "applicationTemplateId desc",
    AppRoles: "appRoles",
    AppRolesDesc: "appRoles desc",
    Certification: "certification",
    CertificationDesc: "certification desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    DefaultRedirectUri: "defaultRedirectUri",
    DefaultRedirectUriDesc: "defaultRedirectUri desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisabledByMicrosoftStatus: "disabledByMicrosoftStatus",
    DisabledByMicrosoftStatusDesc: "disabledByMicrosoftStatus desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    GroupMembershipClaims: "groupMembershipClaims",
    GroupMembershipClaimsDesc: "groupMembershipClaims desc",
    IdentifierUris: "identifierUris",
    IdentifierUrisDesc: "identifierUris desc",
    Info: "info",
    InfoDesc: "info desc",
    IsDeviceOnlyAuthSupported: "isDeviceOnlyAuthSupported",
    IsDeviceOnlyAuthSupportedDesc: "isDeviceOnlyAuthSupported desc",
    IsFallbackPublicClient: "isFallbackPublicClient",
    IsFallbackPublicClientDesc: "isFallbackPublicClient desc",
    KeyCredentials: "keyCredentials",
    KeyCredentialsDesc: "keyCredentials desc",
    Logo: "logo",
    LogoDesc: "logo desc",
    Notes: "notes",
    NotesDesc: "notes desc",
    Oauth2RequirePostResponse: "oauth2RequirePostResponse",
    Oauth2RequirePostResponseDesc: "oauth2RequirePostResponse desc",
    OptionalClaims: "optionalClaims",
    OptionalClaimsDesc: "optionalClaims desc",
    ParentalControlSettings: "parentalControlSettings",
    ParentalControlSettingsDesc: "parentalControlSettings desc",
    PasswordCredentials: "passwordCredentials",
    PasswordCredentialsDesc: "passwordCredentials desc",
    PublicClient: "publicClient",
    PublicClientDesc: "publicClient desc",
    PublisherDomain: "publisherDomain",
    PublisherDomainDesc: "publisherDomain desc",
    RequestSignatureVerification: "requestSignatureVerification",
    RequestSignatureVerificationDesc: "requestSignatureVerification desc",
    RequiredResourceAccess: "requiredResourceAccess",
    RequiredResourceAccessDesc: "requiredResourceAccess desc",
    SamlMetadataUrl: "samlMetadataUrl",
    SamlMetadataUrlDesc: "samlMetadataUrl desc",
    ServiceManagementReference: "serviceManagementReference",
    ServiceManagementReferenceDesc: "serviceManagementReference desc",
    ServicePrincipalLockConfiguration: "servicePrincipalLockConfiguration",
    ServicePrincipalLockConfigurationDesc: "servicePrincipalLockConfiguration desc",
    SignInAudience: "signInAudience",
    SignInAudienceDesc: "signInAudience desc",
    Spa: "spa",
    SpaDesc: "spa desc",
    Tags: "tags",
    TagsDesc: "tags desc",
    TokenEncryptionKeyId: "tokenEncryptionKeyId",
    TokenEncryptionKeyIdDesc: "tokenEncryptionKeyId desc",
    UniqueName: "uniqueName",
    UniqueNameDesc: "uniqueName desc",
    VerifiedPublisher: "verifiedPublisher",
    VerifiedPublisherDesc: "verifiedPublisher desc",
    Web: "web",
    WebDesc: "web desc",
} as const;
/**
 * Provides operations to manage the collection of application entities.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    AddIns: "addIns",
    Api: "api",
    AppId: "appId",
    ApplicationTemplateId: "applicationTemplateId",
    AppRoles: "appRoles",
    Certification: "certification",
    CreatedDateTime: "createdDateTime",
    DefaultRedirectUri: "defaultRedirectUri",
    Description: "description",
    DisabledByMicrosoftStatus: "disabledByMicrosoftStatus",
    DisplayName: "displayName",
    GroupMembershipClaims: "groupMembershipClaims",
    IdentifierUris: "identifierUris",
    Info: "info",
    IsDeviceOnlyAuthSupported: "isDeviceOnlyAuthSupported",
    IsFallbackPublicClient: "isFallbackPublicClient",
    KeyCredentials: "keyCredentials",
    Logo: "logo",
    Notes: "notes",
    Oauth2RequirePostResponse: "oauth2RequirePostResponse",
    OptionalClaims: "optionalClaims",
    ParentalControlSettings: "parentalControlSettings",
    PasswordCredentials: "passwordCredentials",
    PublicClient: "publicClient",
    PublisherDomain: "publisherDomain",
    RequestSignatureVerification: "requestSignatureVerification",
    RequiredResourceAccess: "requiredResourceAccess",
    SamlMetadataUrl: "samlMetadataUrl",
    ServiceManagementReference: "serviceManagementReference",
    ServicePrincipalLockConfiguration: "servicePrincipalLockConfiguration",
    SignInAudience: "signInAudience",
    Spa: "spa",
    Tags: "tags",
    TokenEncryptionKeyId: "tokenEncryptionKeyId",
    UniqueName: "uniqueName",
    VerifiedPublisher: "verifiedPublisher",
    Web: "web",
    AppManagementPolicies: "appManagementPolicies",
    CreatedOnBehalfOf: "createdOnBehalfOf",
    ExtensionProperties: "extensionProperties",
    FederatedIdentityCredentials: "federatedIdentityCredentials",
    HomeRealmDiscoveryPolicies: "homeRealmDiscoveryPolicies",
    Owners: "owners",
    Synchronization: "synchronization",
    TokenIssuancePolicies: "tokenIssuancePolicies",
    TokenLifetimePolicies: "tokenLifetimePolicies",
} as const;
/* tslint:enable */
/* eslint-enable */
