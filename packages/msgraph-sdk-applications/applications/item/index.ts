/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createApplicationFromDiscriminatorValue, serializeApplication, type Application } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { AddKeyRequestBuilderRequestsMetadata, type AddKeyRequestBuilder } from './addKey/';
import { AddPasswordRequestBuilderRequestsMetadata, type AddPasswordRequestBuilder } from './addPassword/';
import { AppManagementPoliciesRequestBuilderNavigationMetadata, AppManagementPoliciesRequestBuilderRequestsMetadata, type AppManagementPoliciesRequestBuilder } from './appManagementPolicies/';
import { CheckMemberGroupsRequestBuilderRequestsMetadata, type CheckMemberGroupsRequestBuilder } from './checkMemberGroups/';
import { CheckMemberObjectsRequestBuilderRequestsMetadata, type CheckMemberObjectsRequestBuilder } from './checkMemberObjects/';
import { CreatedOnBehalfOfRequestBuilderRequestsMetadata, type CreatedOnBehalfOfRequestBuilder } from './createdOnBehalfOf/';
import { ExtensionPropertiesRequestBuilderNavigationMetadata, ExtensionPropertiesRequestBuilderRequestsMetadata, type ExtensionPropertiesRequestBuilder } from './extensionProperties/';
import { FederatedIdentityCredentialsRequestBuilderNavigationMetadata, FederatedIdentityCredentialsRequestBuilderRequestsMetadata, type FederatedIdentityCredentialsRequestBuilder } from './federatedIdentityCredentials/';
import { GetMemberGroupsRequestBuilderRequestsMetadata, type GetMemberGroupsRequestBuilder } from './getMemberGroups/';
import { GetMemberObjectsRequestBuilderRequestsMetadata, type GetMemberObjectsRequestBuilder } from './getMemberObjects/';
import { HomeRealmDiscoveryPoliciesRequestBuilderNavigationMetadata, HomeRealmDiscoveryPoliciesRequestBuilderRequestsMetadata, type HomeRealmDiscoveryPoliciesRequestBuilder } from './homeRealmDiscoveryPolicies/';
import { LogoRequestBuilderRequestsMetadata, type LogoRequestBuilder } from './logo/';
import { OwnersRequestBuilderNavigationMetadata, OwnersRequestBuilderRequestsMetadata, type OwnersRequestBuilder } from './owners/';
import { RemoveKeyRequestBuilderRequestsMetadata, type RemoveKeyRequestBuilder } from './removeKey/';
import { RemovePasswordRequestBuilderRequestsMetadata, type RemovePasswordRequestBuilder } from './removePassword/';
import { RestoreRequestBuilderRequestsMetadata, type RestoreRequestBuilder } from './restore/';
import { SetVerifiedPublisherRequestBuilderRequestsMetadata, type SetVerifiedPublisherRequestBuilder } from './setVerifiedPublisher/';
import { SynchronizationRequestBuilderNavigationMetadata, SynchronizationRequestBuilderRequestsMetadata, type SynchronizationRequestBuilder } from './synchronization/';
import { TokenIssuancePoliciesRequestBuilderNavigationMetadata, TokenIssuancePoliciesRequestBuilderRequestsMetadata, type TokenIssuancePoliciesRequestBuilder } from './tokenIssuancePolicies/';
import { TokenLifetimePoliciesRequestBuilderNavigationMetadata, TokenLifetimePoliciesRequestBuilderRequestsMetadata, type TokenLifetimePoliciesRequestBuilder } from './tokenLifetimePolicies/';
import { type UnsetVerifiedPublisherRequestBuilder, UnsetVerifiedPublisherRequestBuilderRequestsMetadata } from './unsetVerifiedPublisher/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of application entities.
 */
export interface ApplicationItemRequestBuilder extends BaseRequestBuilder<ApplicationItemRequestBuilder> {
    /**
     * Provides operations to call the addKey method.
     */
    get addKey(): AddKeyRequestBuilder;
    /**
     * Provides operations to call the addPassword method.
     */
    get addPassword(): AddPasswordRequestBuilder;
    /**
     * Provides operations to manage the appManagementPolicies property of the microsoft.graph.application entity.
     */
    get appManagementPolicies(): AppManagementPoliciesRequestBuilder;
    /**
     * Provides operations to call the checkMemberGroups method.
     */
    get checkMemberGroups(): CheckMemberGroupsRequestBuilder;
    /**
     * Provides operations to call the checkMemberObjects method.
     */
    get checkMemberObjects(): CheckMemberObjectsRequestBuilder;
    /**
     * Provides operations to manage the createdOnBehalfOf property of the microsoft.graph.application entity.
     */
    get createdOnBehalfOf(): CreatedOnBehalfOfRequestBuilder;
    /**
     * Provides operations to manage the extensionProperties property of the microsoft.graph.application entity.
     */
    get extensionProperties(): ExtensionPropertiesRequestBuilder;
    /**
     * Provides operations to manage the federatedIdentityCredentials property of the microsoft.graph.application entity.
     */
    get federatedIdentityCredentials(): FederatedIdentityCredentialsRequestBuilder;
    /**
     * Provides operations to call the getMemberGroups method.
     */
    get getMemberGroups(): GetMemberGroupsRequestBuilder;
    /**
     * Provides operations to call the getMemberObjects method.
     */
    get getMemberObjects(): GetMemberObjectsRequestBuilder;
    /**
     * Provides operations to manage the homeRealmDiscoveryPolicies property of the microsoft.graph.application entity.
     */
    get homeRealmDiscoveryPolicies(): HomeRealmDiscoveryPoliciesRequestBuilder;
    /**
     * Provides operations to manage the media for the application entity.
     */
    get logo(): LogoRequestBuilder;
    /**
     * Provides operations to manage the owners property of the microsoft.graph.application entity.
     */
    get owners(): OwnersRequestBuilder;
    /**
     * Provides operations to call the removeKey method.
     */
    get removeKey(): RemoveKeyRequestBuilder;
    /**
     * Provides operations to call the removePassword method.
     */
    get removePassword(): RemovePasswordRequestBuilder;
    /**
     * Provides operations to call the restore method.
     */
    get restore(): RestoreRequestBuilder;
    /**
     * Provides operations to call the setVerifiedPublisher method.
     */
    get setVerifiedPublisher(): SetVerifiedPublisherRequestBuilder;
    /**
     * Provides operations to manage the synchronization property of the microsoft.graph.application entity.
     */
    get synchronization(): SynchronizationRequestBuilder;
    /**
     * Provides operations to manage the tokenIssuancePolicies property of the microsoft.graph.application entity.
     */
    get tokenIssuancePolicies(): TokenIssuancePoliciesRequestBuilder;
    /**
     * Provides operations to manage the tokenLifetimePolicies property of the microsoft.graph.application entity.
     */
    get tokenLifetimePolicies(): TokenLifetimePoliciesRequestBuilder;
    /**
     * Provides operations to call the unsetVerifiedPublisher method.
     */
    get unsetVerifiedPublisher(): UnsetVerifiedPublisherRequestBuilder;
    /**
     * Delete an application object. When deleted, apps are moved to a temporary container and can be restored within 30 days. After that time, they are permanently deleted.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/application-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get the properties and relationships of an application object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Application>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/application-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ApplicationItemRequestBuilderGetQueryParameters> | undefined) : Promise<Application | undefined>;
    /**
     * Update the properties of an application object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Application>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/application-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: Application, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Application | undefined>;
    /**
     * Delete an application object. When deleted, apps are moved to a temporary container and can be restored within 30 days. After that time, they are permanently deleted.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get the properties and relationships of an application object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ApplicationItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of an application object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Application, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the properties and relationships of an application object.
 */
export interface ApplicationItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ApplicationItemRequestBuilderUriTemplate = "{+baseurl}/applications/{application%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ApplicationItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ApplicationItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ApplicationItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    addKey: {
        requestsMetadata: AddKeyRequestBuilderRequestsMetadata,
    },
    addPassword: {
        requestsMetadata: AddPasswordRequestBuilderRequestsMetadata,
    },
    appManagementPolicies: {
        requestsMetadata: AppManagementPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: AppManagementPoliciesRequestBuilderNavigationMetadata,
    },
    checkMemberGroups: {
        requestsMetadata: CheckMemberGroupsRequestBuilderRequestsMetadata,
    },
    checkMemberObjects: {
        requestsMetadata: CheckMemberObjectsRequestBuilderRequestsMetadata,
    },
    createdOnBehalfOf: {
        requestsMetadata: CreatedOnBehalfOfRequestBuilderRequestsMetadata,
    },
    extensionProperties: {
        requestsMetadata: ExtensionPropertiesRequestBuilderRequestsMetadata,
        navigationMetadata: ExtensionPropertiesRequestBuilderNavigationMetadata,
    },
    federatedIdentityCredentials: {
        requestsMetadata: FederatedIdentityCredentialsRequestBuilderRequestsMetadata,
        navigationMetadata: FederatedIdentityCredentialsRequestBuilderNavigationMetadata,
    },
    getMemberGroups: {
        requestsMetadata: GetMemberGroupsRequestBuilderRequestsMetadata,
    },
    getMemberObjects: {
        requestsMetadata: GetMemberObjectsRequestBuilderRequestsMetadata,
    },
    homeRealmDiscoveryPolicies: {
        requestsMetadata: HomeRealmDiscoveryPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: HomeRealmDiscoveryPoliciesRequestBuilderNavigationMetadata,
    },
    logo: {
        requestsMetadata: LogoRequestBuilderRequestsMetadata,
    },
    owners: {
        requestsMetadata: OwnersRequestBuilderRequestsMetadata,
        navigationMetadata: OwnersRequestBuilderNavigationMetadata,
    },
    removeKey: {
        requestsMetadata: RemoveKeyRequestBuilderRequestsMetadata,
    },
    removePassword: {
        requestsMetadata: RemovePasswordRequestBuilderRequestsMetadata,
    },
    restore: {
        requestsMetadata: RestoreRequestBuilderRequestsMetadata,
    },
    setVerifiedPublisher: {
        requestsMetadata: SetVerifiedPublisherRequestBuilderRequestsMetadata,
    },
    synchronization: {
        requestsMetadata: SynchronizationRequestBuilderRequestsMetadata,
        navigationMetadata: SynchronizationRequestBuilderNavigationMetadata,
    },
    tokenIssuancePolicies: {
        requestsMetadata: TokenIssuancePoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: TokenIssuancePoliciesRequestBuilderNavigationMetadata,
    },
    tokenLifetimePolicies: {
        requestsMetadata: TokenLifetimePoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: TokenLifetimePoliciesRequestBuilderNavigationMetadata,
    },
    unsetVerifiedPublisher: {
        requestsMetadata: UnsetVerifiedPublisherRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ApplicationItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ApplicationItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: ApplicationItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createApplicationFromDiscriminatorValue,
        queryParametersMapper: ApplicationItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ApplicationItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createApplicationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeApplication,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
