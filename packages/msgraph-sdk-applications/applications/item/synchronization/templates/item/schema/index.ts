/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSynchronizationSchemaFromDiscriminatorValue, serializeSynchronizationSchema, type SynchronizationSchema } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { DirectoriesRequestBuilderNavigationMetadata, DirectoriesRequestBuilderRequestsMetadata, type DirectoriesRequestBuilder } from './directories/';
import { FilterOperatorsRequestBuilderRequestsMetadata, type FilterOperatorsRequestBuilder } from './filterOperators/';
import { FunctionsRequestBuilderRequestsMetadata, type FunctionsRequestBuilder } from './functions/';
import { ParseExpressionRequestBuilderRequestsMetadata, type ParseExpressionRequestBuilder } from './parseExpression/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the schema property of the microsoft.graph.synchronizationTemplate entity.
 */
export interface SchemaRequestBuilder extends BaseRequestBuilder<SchemaRequestBuilder> {
    /**
     * Provides operations to manage the directories property of the microsoft.graph.synchronizationSchema entity.
     */
    get directories(): DirectoriesRequestBuilder;
    /**
     * Provides operations to call the filterOperators method.
     */
    get filterOperators(): FilterOperatorsRequestBuilder;
    /**
     * Provides operations to call the functions method.
     */
    get functions(): FunctionsRequestBuilder;
    /**
     * Provides operations to call the parseExpression method.
     */
    get parseExpression(): ParseExpressionRequestBuilder;
    /**
     * Delete navigation property schema for applications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Default synchronization schema for the jobs based on this template.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SynchronizationSchema>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SchemaRequestBuilderGetQueryParameters> | undefined) : Promise<SynchronizationSchema | undefined>;
    /**
     * Update the navigation property schema in applications
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SynchronizationSchema>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: SynchronizationSchema, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SynchronizationSchema | undefined>;
    /**
     * Delete navigation property schema for applications
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Default synchronization schema for the jobs based on this template.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SchemaRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property schema in applications
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: SynchronizationSchema, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Default synchronization schema for the jobs based on this template.
 */
export interface SchemaRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const SchemaRequestBuilderUriTemplate = "{+baseurl}/applications/{application%2Did}/synchronization/templates/{synchronizationTemplate%2Did}/schema{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SchemaRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SchemaRequestBuilderNavigationMetadata: Record<Exclude<keyof SchemaRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    directories: {
        requestsMetadata: DirectoriesRequestBuilderRequestsMetadata,
        navigationMetadata: DirectoriesRequestBuilderNavigationMetadata,
    },
    filterOperators: {
        requestsMetadata: FilterOperatorsRequestBuilderRequestsMetadata,
    },
    functions: {
        requestsMetadata: FunctionsRequestBuilderRequestsMetadata,
    },
    parseExpression: {
        requestsMetadata: ParseExpressionRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SchemaRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: SchemaRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: SchemaRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSynchronizationSchemaFromDiscriminatorValue,
        queryParametersMapper: SchemaRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: SchemaRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSynchronizationSchemaFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSynchronizationSchema,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
