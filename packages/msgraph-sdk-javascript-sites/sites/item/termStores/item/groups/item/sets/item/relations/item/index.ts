/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { createRelationFromDiscriminatorValue, serializeRelation, type Relation } from '@microsoft/msgraph-sdk-javascript/models/termStore/';
import { FromTermRequestBuilderRequestsMetadata, FromTermRequestBuilderUriTemplate, type FromTermRequestBuilder } from './fromTerm/';
import { SetRequestBuilderRequestsMetadata, SetRequestBuilderUriTemplate, type SetRequestBuilder } from './set/';
import { ToTermRequestBuilderRequestsMetadata, ToTermRequestBuilderUriTemplate, type ToTermRequestBuilder } from './toTerm/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the relations property of the microsoft.graph.termStore.set entity.
 */
export interface RelationItemRequestBuilder extends BaseRequestBuilder<RelationItemRequestBuilder> {
    /**
     * Provides operations to manage the fromTerm property of the microsoft.graph.termStore.relation entity.
     */
    get fromTerm(): FromTermRequestBuilder;
    /**
     * Provides operations to manage the set property of the microsoft.graph.termStore.relation entity.
     */
    get set(): SetRequestBuilder;
    /**
     * Provides operations to manage the toTerm property of the microsoft.graph.termStore.relation entity.
     */
    get toTerm(): ToTermRequestBuilder;
    /**
     * Delete navigation property relations for sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Indicates which terms have been pinned or reused directly under the set.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Relation
     */
     get(requestConfiguration?: RequestConfiguration<RelationItemRequestBuilderGetQueryParameters> | undefined) : Promise<Relation | undefined>;
    /**
     * Update the navigation property relations in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Relation
     */
     patch(body: Relation, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Relation | undefined>;
    /**
     * Delete navigation property relations for sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Indicates which terms have been pinned or reused directly under the set.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RelationItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property relations in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Relation, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Indicates which terms have been pinned or reused directly under the set.
 */
export interface RelationItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RelationItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RelationItemRequestBuilderNavigationMetadata: Record<Exclude<keyof RelationItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    fromTerm: {
        uriTemplate: FromTermRequestBuilderUriTemplate,
        requestsMetadata: FromTermRequestBuilderRequestsMetadata,
    },
    set: {
        uriTemplate: SetRequestBuilderUriTemplate,
        requestsMetadata: SetRequestBuilderRequestsMetadata,
    },
    toTerm: {
        uriTemplate: ToTermRequestBuilderUriTemplate,
        requestsMetadata: ToTermRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RelationItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createRelationFromDiscriminatorValue,
        queryParametersMapper: RelationItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createRelationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRelation,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const RelationItemRequestBuilderUriTemplate = "{+baseurl}/sites/{site%2Did}/termStores/{store%2Did}/groups/{group%2Did}/sets/{set%2Did}/relations/{relation%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
