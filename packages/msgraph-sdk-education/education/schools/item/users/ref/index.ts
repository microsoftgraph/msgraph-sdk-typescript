/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createStringCollectionResponseFromDiscriminatorValue, serializeReferenceCreate, type ReferenceCreate, type StringCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
/**
 * Provides operations to manage the collection of educationRoot entities.
 */
export interface RefRequestBuilder extends BaseRequestBuilder<RefRequestBuilder> {
    /**
     * Delete a user from a school.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/educationschool-delete-users?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<RefRequestBuilderDeleteQueryParameters> | undefined) : Promise<void>;
    /**
     * Get the educationUser resources associated with an educationSchool.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<StringCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/educationschool-list-users?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<RefRequestBuilderGetQueryParameters> | undefined) : Promise<StringCollectionResponse | undefined>;
    /**
     * Add a user to a school.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/educationschool-post-users?view=graph-rest-1.0|Find more info here}
     */
     post(body: ReferenceCreate, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Delete a user from a school.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<RefRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation;
    /**
     * Get the educationUser resources associated with an educationSchool.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RefRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Add a user to a school.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ReferenceCreate, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Delete a user from a school.
 */
export interface RefRequestBuilderDeleteQueryParameters {
    /**
     * The delete Uri
     */
    id?: string;
}
/**
 * Get the educationUser resources associated with an educationSchool.
 */
export interface RefRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const RefRequestBuilderUriTemplate = "{+baseurl}/education/schools/{educationSchool%2Did}/users/$ref{?%24count,%24filter,%24orderby,%24search,%24skip,%24top}";
/**
 * Provides operations to manage the collection of educationRoot entities.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AccountEnabled: "accountEnabled",
    AccountEnabledDesc: "accountEnabled desc",
    AssignedLicenses: "assignedLicenses",
    AssignedLicensesDesc: "assignedLicenses desc",
    AssignedPlans: "assignedPlans",
    AssignedPlansDesc: "assignedPlans desc",
    BusinessPhones: "businessPhones",
    BusinessPhonesDesc: "businessPhones desc",
    CreatedBy: "createdBy",
    CreatedByDesc: "createdBy desc",
    Department: "department",
    DepartmentDesc: "department desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    ExternalSource: "externalSource",
    ExternalSourceDesc: "externalSource desc",
    ExternalSourceDetail: "externalSourceDetail",
    ExternalSourceDetailDesc: "externalSourceDetail desc",
    GivenName: "givenName",
    GivenNameDesc: "givenName desc",
    Mail: "mail",
    MailDesc: "mail desc",
    MailingAddress: "mailingAddress",
    MailingAddressDesc: "mailingAddress desc",
    MailNickname: "mailNickname",
    MailNicknameDesc: "mailNickname desc",
    MiddleName: "middleName",
    MiddleNameDesc: "middleName desc",
    MobilePhone: "mobilePhone",
    MobilePhoneDesc: "mobilePhone desc",
    OfficeLocation: "officeLocation",
    OfficeLocationDesc: "officeLocation desc",
    OnPremisesInfo: "onPremisesInfo",
    OnPremisesInfoDesc: "onPremisesInfo desc",
    PasswordPolicies: "passwordPolicies",
    PasswordPoliciesDesc: "passwordPolicies desc",
    PasswordProfile: "passwordProfile",
    PasswordProfileDesc: "passwordProfile desc",
    PreferredLanguage: "preferredLanguage",
    PreferredLanguageDesc: "preferredLanguage desc",
    PrimaryRole: "primaryRole",
    PrimaryRoleDesc: "primaryRole desc",
    ProvisionedPlans: "provisionedPlans",
    ProvisionedPlansDesc: "provisionedPlans desc",
    RefreshTokensValidFromDateTime: "refreshTokensValidFromDateTime",
    RefreshTokensValidFromDateTimeDesc: "refreshTokensValidFromDateTime desc",
    RelatedContacts: "relatedContacts",
    RelatedContactsDesc: "relatedContacts desc",
    ResidenceAddress: "residenceAddress",
    ResidenceAddressDesc: "residenceAddress desc",
    ShowInAddressList: "showInAddressList",
    ShowInAddressListDesc: "showInAddressList desc",
    Student: "student",
    StudentDesc: "student desc",
    Surname: "surname",
    SurnameDesc: "surname desc",
    Teacher: "teacher",
    TeacherDesc: "teacher desc",
    UsageLocation: "usageLocation",
    UsageLocationDesc: "usageLocation desc",
    UserPrincipalName: "userPrincipalName",
    UserPrincipalNameDesc: "userPrincipalName desc",
    UserType: "userType",
    UserTypeDesc: "userType desc",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RefRequestBuilderDeleteQueryParametersMapper: Record<string, string> = {
    "id": "%40id",
};
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RefRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RefRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: RefRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        queryParametersMapper: RefRequestBuilderDeleteQueryParametersMapper,
    },
    get: {
        uriTemplate: RefRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createStringCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: RefRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: RefRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeReferenceCreate,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
