/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createServicePrincipalFromDiscriminatorValue, deserializeIntoBaseDeltaFunctionResponse, serializeBaseDeltaFunctionResponse, serializeServicePrincipal, type BaseDeltaFunctionResponse, type ServicePrincipal } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {DeltaGetResponse}
 */
export function createDeltaGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoDeltaGetResponse;
}
export interface DeltaGetResponse extends BaseDeltaFunctionResponse, Parsable {
    /**
     * The value property
     */
    value?: ServicePrincipal[];
}
/**
 * Provides operations to call the delta method.
 */
export interface DeltaRequestBuilder extends BaseRequestBuilder<DeltaRequestBuilder> {
    /**
     * Invoke function delta
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeltaGetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DeltaRequestBuilderGetQueryParameters> | undefined) : Promise<DeltaGetResponse | undefined>;
    /**
     * Invoke function delta
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeltaRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Invoke function delta
 */
export interface DeltaRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoDeltaGetResponse(deltaGetResponse: Partial<DeltaGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseDeltaFunctionResponse(deltaGetResponse),
        "value": n => { deltaGetResponse.value = n.getCollectionOfObjectValues<ServicePrincipal>(createServicePrincipalFromDiscriminatorValue); },
    }
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeDeltaGetResponse(writer: SerializationWriter, deltaGetResponse: Partial<DeltaGetResponse> | undefined = {}) : void {
    serializeBaseDeltaFunctionResponse(writer, deltaGetResponse)
    writer.writeCollectionOfObjectValues<ServicePrincipal>("value", deltaGetResponse.value, serializeServicePrincipal);
}
/**
 * Uri template for the request builder.
 */
export const DeltaRequestBuilderUriTemplate = "{+baseurl}/servicePrincipals/delta(){?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeltaRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeltaRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DeltaRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeltaGetResponseFromDiscriminatorValue,
        queryParametersMapper: DeltaRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to call the delta method.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AppManagementPolicies: "appManagementPolicies",
    AppRoleAssignedTo: "appRoleAssignedTo",
    AppRoleAssignments: "appRoleAssignments",
    ClaimsMappingPolicies: "claimsMappingPolicies",
    CreatedObjects: "createdObjects",
    DelegatedPermissionClassifications: "delegatedPermissionClassifications",
    Endpoints: "endpoints",
    FederatedIdentityCredentials: "federatedIdentityCredentials",
    HomeRealmDiscoveryPolicies: "homeRealmDiscoveryPolicies",
    MemberOf: "memberOf",
    Oauth2PermissionGrants: "oauth2PermissionGrants",
    OwnedObjects: "ownedObjects",
    Owners: "owners",
    RemoteDesktopSecurityConfiguration: "remoteDesktopSecurityConfiguration",
    Synchronization: "synchronization",
    TokenIssuancePolicies: "tokenIssuancePolicies",
    TokenLifetimePolicies: "tokenLifetimePolicies",
    TransitiveMemberOf: "transitiveMemberOf",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    DeletedDateTime: "deletedDateTime",
    DeletedDateTimeDesc: "deletedDateTime desc",
    AccountEnabled: "accountEnabled",
    AccountEnabledDesc: "accountEnabled desc",
    AddIns: "addIns",
    AddInsDesc: "addIns desc",
    AlternativeNames: "alternativeNames",
    AlternativeNamesDesc: "alternativeNames desc",
    AppDescription: "appDescription",
    AppDescriptionDesc: "appDescription desc",
    AppDisplayName: "appDisplayName",
    AppDisplayNameDesc: "appDisplayName desc",
    AppId: "appId",
    AppIdDesc: "appId desc",
    ApplicationTemplateId: "applicationTemplateId",
    ApplicationTemplateIdDesc: "applicationTemplateId desc",
    AppOwnerOrganizationId: "appOwnerOrganizationId",
    AppOwnerOrganizationIdDesc: "appOwnerOrganizationId desc",
    AppRoleAssignmentRequired: "appRoleAssignmentRequired",
    AppRoleAssignmentRequiredDesc: "appRoleAssignmentRequired desc",
    AppRoles: "appRoles",
    AppRolesDesc: "appRoles desc",
    CustomSecurityAttributes: "customSecurityAttributes",
    CustomSecurityAttributesDesc: "customSecurityAttributes desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisabledByMicrosoftStatus: "disabledByMicrosoftStatus",
    DisabledByMicrosoftStatusDesc: "disabledByMicrosoftStatus desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    Homepage: "homepage",
    HomepageDesc: "homepage desc",
    Info: "info",
    InfoDesc: "info desc",
    KeyCredentials: "keyCredentials",
    KeyCredentialsDesc: "keyCredentials desc",
    LoginUrl: "loginUrl",
    LoginUrlDesc: "loginUrl desc",
    LogoutUrl: "logoutUrl",
    LogoutUrlDesc: "logoutUrl desc",
    Notes: "notes",
    NotesDesc: "notes desc",
    NotificationEmailAddresses: "notificationEmailAddresses",
    NotificationEmailAddressesDesc: "notificationEmailAddresses desc",
    Oauth2PermissionScopes: "oauth2PermissionScopes",
    Oauth2PermissionScopesDesc: "oauth2PermissionScopes desc",
    PasswordCredentials: "passwordCredentials",
    PasswordCredentialsDesc: "passwordCredentials desc",
    PreferredSingleSignOnMode: "preferredSingleSignOnMode",
    PreferredSingleSignOnModeDesc: "preferredSingleSignOnMode desc",
    PreferredTokenSigningKeyThumbprint: "preferredTokenSigningKeyThumbprint",
    PreferredTokenSigningKeyThumbprintDesc: "preferredTokenSigningKeyThumbprint desc",
    ReplyUrls: "replyUrls",
    ReplyUrlsDesc: "replyUrls desc",
    ResourceSpecificApplicationPermissions: "resourceSpecificApplicationPermissions",
    ResourceSpecificApplicationPermissionsDesc: "resourceSpecificApplicationPermissions desc",
    SamlSingleSignOnSettings: "samlSingleSignOnSettings",
    SamlSingleSignOnSettingsDesc: "samlSingleSignOnSettings desc",
    ServicePrincipalNames: "servicePrincipalNames",
    ServicePrincipalNamesDesc: "servicePrincipalNames desc",
    ServicePrincipalType: "servicePrincipalType",
    ServicePrincipalTypeDesc: "servicePrincipalType desc",
    SignInAudience: "signInAudience",
    SignInAudienceDesc: "signInAudience desc",
    Tags: "tags",
    TagsDesc: "tags desc",
    TokenEncryptionKeyId: "tokenEncryptionKeyId",
    TokenEncryptionKeyIdDesc: "tokenEncryptionKeyId desc",
    VerifiedPublisher: "verifiedPublisher",
    VerifiedPublisherDesc: "verifiedPublisher desc",
} as const;
/**
 * Provides operations to call the delta method.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DeletedDateTime: "deletedDateTime",
    AccountEnabled: "accountEnabled",
    AddIns: "addIns",
    AlternativeNames: "alternativeNames",
    AppDescription: "appDescription",
    AppDisplayName: "appDisplayName",
    AppId: "appId",
    ApplicationTemplateId: "applicationTemplateId",
    AppOwnerOrganizationId: "appOwnerOrganizationId",
    AppRoleAssignmentRequired: "appRoleAssignmentRequired",
    AppRoles: "appRoles",
    CustomSecurityAttributes: "customSecurityAttributes",
    Description: "description",
    DisabledByMicrosoftStatus: "disabledByMicrosoftStatus",
    DisplayName: "displayName",
    Homepage: "homepage",
    Info: "info",
    KeyCredentials: "keyCredentials",
    LoginUrl: "loginUrl",
    LogoutUrl: "logoutUrl",
    Notes: "notes",
    NotificationEmailAddresses: "notificationEmailAddresses",
    Oauth2PermissionScopes: "oauth2PermissionScopes",
    PasswordCredentials: "passwordCredentials",
    PreferredSingleSignOnMode: "preferredSingleSignOnMode",
    PreferredTokenSigningKeyThumbprint: "preferredTokenSigningKeyThumbprint",
    ReplyUrls: "replyUrls",
    ResourceSpecificApplicationPermissions: "resourceSpecificApplicationPermissions",
    SamlSingleSignOnSettings: "samlSingleSignOnSettings",
    ServicePrincipalNames: "servicePrincipalNames",
    ServicePrincipalType: "servicePrincipalType",
    SignInAudience: "signInAudience",
    Tags: "tags",
    TokenEncryptionKeyId: "tokenEncryptionKeyId",
    VerifiedPublisher: "verifiedPublisher",
    AppManagementPolicies: "appManagementPolicies",
    AppRoleAssignedTo: "appRoleAssignedTo",
    AppRoleAssignments: "appRoleAssignments",
    ClaimsMappingPolicies: "claimsMappingPolicies",
    CreatedObjects: "createdObjects",
    DelegatedPermissionClassifications: "delegatedPermissionClassifications",
    Endpoints: "endpoints",
    FederatedIdentityCredentials: "federatedIdentityCredentials",
    HomeRealmDiscoveryPolicies: "homeRealmDiscoveryPolicies",
    MemberOf: "memberOf",
    Oauth2PermissionGrants: "oauth2PermissionGrants",
    OwnedObjects: "ownedObjects",
    Owners: "owners",
    RemoteDesktopSecurityConfiguration: "remoteDesktopSecurityConfiguration",
    Synchronization: "synchronization",
    TokenIssuancePolicies: "tokenIssuancePolicies",
    TokenLifetimePolicies: "tokenLifetimePolicies",
    TransitiveMemberOf: "transitiveMemberOf",
} as const;
/* tslint:enable */
/* eslint-enable */
