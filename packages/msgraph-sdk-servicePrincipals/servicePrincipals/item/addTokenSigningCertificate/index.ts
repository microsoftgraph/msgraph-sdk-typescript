/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSelfSignedCertificateFromDiscriminatorValue, serializeSelfSignedCertificate, type SelfSignedCertificate } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AddTokenSigningCertificatePostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The endDateTime property
     */
    endDateTime?: Date;
}
/**
 * Provides operations to call the addTokenSigningCertificate method.
 */
export interface AddTokenSigningCertificateRequestBuilder extends BaseRequestBuilder<AddTokenSigningCertificateRequestBuilder> {
    /**
     * Create a self-signed signing certificate and return a selfSignedCertificate object, which is the public part of the generated certificate.  The self-signed signing certificate is composed of the following objects, which are added to the servicePrincipal: + The keyCredentials object with the following objects:    + A private key object with usage set to Sign.    + A public key object with usage set to Verify.+ The passwordCredentials object.  All the objects have the same value of customKeyIdentifier. The passwordCredential is used to open the PFX file (private key). It and the associated private key object have the same value of keyId. When set during creation through the displayName property, the subject of the certificate cannot be updated. The startDateTime is set to the same time the certificate is created using the action. The endDateTime can be up to three years after the certificate is created.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SelfSignedCertificate>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/serviceprincipal-addtokensigningcertificate?view=graph-rest-1.0|Find more info here}
     */
     post(body: AddTokenSigningCertificatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SelfSignedCertificate | undefined>;
    /**
     * Create a self-signed signing certificate and return a selfSignedCertificate object, which is the public part of the generated certificate.  The self-signed signing certificate is composed of the following objects, which are added to the servicePrincipal: + The keyCredentials object with the following objects:    + A private key object with usage set to Sign.    + A public key object with usage set to Verify.+ The passwordCredentials object.  All the objects have the same value of customKeyIdentifier. The passwordCredential is used to open the PFX file (private key). It and the associated private key object have the same value of keyId. When set during creation through the displayName property, the subject of the certificate cannot be updated. The startDateTime is set to the same time the certificate is created using the action. The endDateTime can be up to three years after the certificate is created.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: AddTokenSigningCertificatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddTokenSigningCertificatePostRequestBody}
 */
export function createAddTokenSigningCertificatePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddTokenSigningCertificatePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAddTokenSigningCertificatePostRequestBody(addTokenSigningCertificatePostRequestBody: Partial<AddTokenSigningCertificatePostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { addTokenSigningCertificatePostRequestBody.backingStoreEnabled = true; },
        "displayName": n => { addTokenSigningCertificatePostRequestBody.displayName = n.getStringValue(); },
        "endDateTime": n => { addTokenSigningCertificatePostRequestBody.endDateTime = n.getDateValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAddTokenSigningCertificatePostRequestBody(writer: SerializationWriter, addTokenSigningCertificatePostRequestBody: Partial<AddTokenSigningCertificatePostRequestBody> | undefined = {}) : void {
    writer.writeStringValue("displayName", addTokenSigningCertificatePostRequestBody.displayName);
    writer.writeDateValue("endDateTime", addTokenSigningCertificatePostRequestBody.endDateTime);
    writer.writeAdditionalData(addTokenSigningCertificatePostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const AddTokenSigningCertificateRequestBuilderUriTemplate = "{+baseurl}/servicePrincipals/{servicePrincipal%2Did}/addTokenSigningCertificate";
/**
 * Metadata for all the requests in the request builder.
 */
export const AddTokenSigningCertificateRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: AddTokenSigningCertificateRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSelfSignedCertificateFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAddTokenSigningCertificatePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
