/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createInformationProtectionFromDiscriminatorValue, serializeInformationProtection, type InformationProtection } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { BitlockerRequestBuilderNavigationMetadata, BitlockerRequestBuilderRequestsMetadata, BitlockerRequestBuilderUriTemplate, type BitlockerRequestBuilder } from './bitlocker/';
import { ThreatAssessmentRequestsRequestBuilderNavigationMetadata, ThreatAssessmentRequestsRequestBuilderRequestsMetadata, ThreatAssessmentRequestsRequestBuilderUriTemplate, type ThreatAssessmentRequestsRequestBuilder } from './threatAssessmentRequests/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the informationProtection singleton.
 */
export interface InformationProtectionRequestBuilder extends BaseRequestBuilder<InformationProtectionRequestBuilder> {
    /**
     * Provides operations to manage the bitlocker property of the microsoft.graph.informationProtection entity.
     */
    get bitlocker(): BitlockerRequestBuilder;
    /**
     * Provides operations to manage the threatAssessmentRequests property of the microsoft.graph.informationProtection entity.
     */
    get threatAssessmentRequests(): ThreatAssessmentRequestsRequestBuilder;
    /**
     * Get informationProtection
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of InformationProtection
     */
     get(requestConfiguration?: RequestConfiguration<InformationProtectionRequestBuilderGetQueryParameters> | undefined) : Promise<InformationProtection | undefined>;
    /**
     * Update informationProtection
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of InformationProtection
     */
     patch(body: InformationProtection, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<InformationProtection | undefined>;
    /**
     * Get informationProtection
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<InformationProtectionRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update informationProtection
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: InformationProtection, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get informationProtection
 */
export interface InformationProtectionRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const InformationProtectionRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const InformationProtectionRequestBuilderNavigationMetadata: Record<Exclude<keyof InformationProtectionRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bitlocker: {
        uriTemplate: BitlockerRequestBuilderUriTemplate,
        requestsMetadata: BitlockerRequestBuilderRequestsMetadata,
        navigationMetadata: BitlockerRequestBuilderNavigationMetadata,
    },
    threatAssessmentRequests: {
        uriTemplate: ThreatAssessmentRequestsRequestBuilderUriTemplate,
        requestsMetadata: ThreatAssessmentRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: ThreatAssessmentRequestsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const InformationProtectionRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createInformationProtectionFromDiscriminatorValue,
        queryParametersMapper: InformationProtectionRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createInformationProtectionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeInformationProtection,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const InformationProtectionRequestBuilderUriTemplate = "{+baseurl}/informationProtection{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
