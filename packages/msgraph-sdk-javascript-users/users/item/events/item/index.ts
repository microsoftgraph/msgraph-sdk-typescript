/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createEventFromDiscriminatorValue, serializeEvent, type Event } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { AcceptRequestBuilderRequestsMetadata, AcceptRequestBuilderUriTemplate, type AcceptRequestBuilder } from './accept/';
import { AttachmentsRequestBuilderNavigationMetadata, AttachmentsRequestBuilderRequestsMetadata, AttachmentsRequestBuilderUriTemplate, type AttachmentsRequestBuilder } from './attachments/';
import { CalendarRequestBuilderRequestsMetadata, CalendarRequestBuilderUriTemplate, type CalendarRequestBuilder } from './calendar/';
import { CancelRequestBuilderRequestsMetadata, CancelRequestBuilderUriTemplate, type CancelRequestBuilder } from './cancel/';
import { DeclineRequestBuilderRequestsMetadata, DeclineRequestBuilderUriTemplate, type DeclineRequestBuilder } from './decline/';
import { DismissReminderRequestBuilderRequestsMetadata, DismissReminderRequestBuilderUriTemplate, type DismissReminderRequestBuilder } from './dismissReminder/';
import { ExtensionsRequestBuilderNavigationMetadata, ExtensionsRequestBuilderRequestsMetadata, ExtensionsRequestBuilderUriTemplate, type ExtensionsRequestBuilder } from './extensions/';
import { ForwardRequestBuilderRequestsMetadata, ForwardRequestBuilderUriTemplate, type ForwardRequestBuilder } from './forward/';
import { InstancesRequestBuilderNavigationMetadata, InstancesRequestBuilderRequestsMetadata, InstancesRequestBuilderUriTemplate, type InstancesRequestBuilder } from './instances/';
import { SnoozeReminderRequestBuilderRequestsMetadata, SnoozeReminderRequestBuilderUriTemplate, type SnoozeReminderRequestBuilder } from './snoozeReminder/';
import { TentativelyAcceptRequestBuilderRequestsMetadata, TentativelyAcceptRequestBuilderUriTemplate, type TentativelyAcceptRequestBuilder } from './tentativelyAccept/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the events property of the microsoft.graph.user entity.
 */
export interface EventItemRequestBuilder extends BaseRequestBuilder<EventItemRequestBuilder> {
    /**
     * Provides operations to call the accept method.
     */
    get accept(): AcceptRequestBuilder;
    /**
     * Provides operations to manage the attachments property of the microsoft.graph.event entity.
     */
    get attachments(): AttachmentsRequestBuilder;
    /**
     * Provides operations to manage the calendar property of the microsoft.graph.event entity.
     */
    get calendar(): CalendarRequestBuilder;
    /**
     * Provides operations to call the cancel method.
     */
    get cancel(): CancelRequestBuilder;
    /**
     * Provides operations to call the decline method.
     */
    get decline(): DeclineRequestBuilder;
    /**
     * Provides operations to call the dismissReminder method.
     */
    get dismissReminder(): DismissReminderRequestBuilder;
    /**
     * Provides operations to manage the extensions property of the microsoft.graph.event entity.
     */
    get extensions(): ExtensionsRequestBuilder;
    /**
     * Provides operations to call the forward method.
     */
    get forward(): ForwardRequestBuilder;
    /**
     * Provides operations to manage the instances property of the microsoft.graph.event entity.
     */
    get instances(): InstancesRequestBuilder;
    /**
     * Provides operations to call the snoozeReminder method.
     */
    get snoozeReminder(): SnoozeReminderRequestBuilder;
    /**
     * Provides operations to call the tentativelyAccept method.
     */
    get tentativelyAccept(): TentativelyAcceptRequestBuilder;
    /**
     * Removes the specified event from the containing calendar.  If the event is a meeting, deleting the event on the organizer's calendar sends a cancellation message to the meeting attendees.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @see {@link https://learn.microsoft.com/graph/api/event-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get the properties and relationships of the specified event object. Currently, this operation returns event bodies in only HTML format. There are two scenarios where an app can get an event in another user's calendar: Since the event resource supports extensions, you can also use the GET operation to get custom properties and extension data in an event instance.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Event
     * @see {@link https://learn.microsoft.com/graph/api/event-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<EventItemRequestBuilderGetQueryParameters> | undefined) : Promise<Event | undefined>;
    /**
     * Update the properties of the event object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Event
     * @see {@link https://learn.microsoft.com/graph/api/event-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: Event, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Event | undefined>;
    /**
     * Removes the specified event from the containing calendar.  If the event is a meeting, deleting the event on the organizer's calendar sends a cancellation message to the meeting attendees.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get the properties and relationships of the specified event object. Currently, this operation returns event bodies in only HTML format. There are two scenarios where an app can get an event in another user's calendar: Since the event resource supports extensions, you can also use the GET operation to get custom properties and extension data in an event instance.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EventItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of the event object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Event, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the properties and relationships of the specified event object. Currently, this operation returns event bodies in only HTML format. There are two scenarios where an app can get an event in another user's calendar: Since the event resource supports extensions, you can also use the GET operation to get custom properties and extension data in an event instance.
 */
export interface EventItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EventItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EventItemRequestBuilderNavigationMetadata: Record<Exclude<keyof EventItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accept: {
        uriTemplate: AcceptRequestBuilderUriTemplate,
        requestsMetadata: AcceptRequestBuilderRequestsMetadata,
    },
    attachments: {
        uriTemplate: AttachmentsRequestBuilderUriTemplate,
        requestsMetadata: AttachmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AttachmentsRequestBuilderNavigationMetadata,
    },
    calendar: {
        uriTemplate: CalendarRequestBuilderUriTemplate,
        requestsMetadata: CalendarRequestBuilderRequestsMetadata,
    },
    cancel: {
        uriTemplate: CancelRequestBuilderUriTemplate,
        requestsMetadata: CancelRequestBuilderRequestsMetadata,
    },
    decline: {
        uriTemplate: DeclineRequestBuilderUriTemplate,
        requestsMetadata: DeclineRequestBuilderRequestsMetadata,
    },
    dismissReminder: {
        uriTemplate: DismissReminderRequestBuilderUriTemplate,
        requestsMetadata: DismissReminderRequestBuilderRequestsMetadata,
    },
    extensions: {
        uriTemplate: ExtensionsRequestBuilderUriTemplate,
        requestsMetadata: ExtensionsRequestBuilderRequestsMetadata,
        navigationMetadata: ExtensionsRequestBuilderNavigationMetadata,
    },
    forward: {
        uriTemplate: ForwardRequestBuilderUriTemplate,
        requestsMetadata: ForwardRequestBuilderRequestsMetadata,
    },
    instances: {
        uriTemplate: InstancesRequestBuilderUriTemplate,
        requestsMetadata: InstancesRequestBuilderRequestsMetadata,
        navigationMetadata: InstancesRequestBuilderNavigationMetadata,
    },
    snoozeReminder: {
        uriTemplate: SnoozeReminderRequestBuilderUriTemplate,
        requestsMetadata: SnoozeReminderRequestBuilderRequestsMetadata,
    },
    tentativelyAccept: {
        uriTemplate: TentativelyAcceptRequestBuilderUriTemplate,
        requestsMetadata: TentativelyAcceptRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EventItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createEventFromDiscriminatorValue,
        queryParametersMapper: EventItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createEventFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeEvent,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const EventItemRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/events/{event%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
