/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createOfficeGraphInsightsFromDiscriminatorValue, serializeOfficeGraphInsights, type OfficeGraphInsights } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { SharedRequestBuilderNavigationMetadata, SharedRequestBuilderRequestsMetadata, SharedRequestBuilderUriTemplate, type SharedRequestBuilder } from './shared/';
import { TrendingRequestBuilderNavigationMetadata, TrendingRequestBuilderRequestsMetadata, TrendingRequestBuilderUriTemplate, type TrendingRequestBuilder } from './trending/';
import { type UsedRequestBuilder, UsedRequestBuilderNavigationMetadata, UsedRequestBuilderRequestsMetadata, UsedRequestBuilderUriTemplate } from './used/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the insights property of the microsoft.graph.user entity.
 */
export interface InsightsRequestBuilder extends BaseRequestBuilder<InsightsRequestBuilder> {
    /**
     * Provides operations to manage the shared property of the microsoft.graph.officeGraphInsights entity.
     */
    get shared(): SharedRequestBuilder;
    /**
     * Provides operations to manage the trending property of the microsoft.graph.officeGraphInsights entity.
     */
    get trending(): TrendingRequestBuilder;
    /**
     * Provides operations to manage the used property of the microsoft.graph.officeGraphInsights entity.
     */
    get used(): UsedRequestBuilder;
    /**
     * Delete navigation property insights for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get insights from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of OfficeGraphInsights
     */
     get(requestConfiguration?: RequestConfiguration<InsightsRequestBuilderGetQueryParameters> | undefined) : Promise<OfficeGraphInsights | undefined>;
    /**
     * Update the navigation property insights in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of OfficeGraphInsights
     */
     patch(body: OfficeGraphInsights, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<OfficeGraphInsights | undefined>;
    /**
     * Delete navigation property insights for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get insights from users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<InsightsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property insights in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: OfficeGraphInsights, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get insights from users
 */
export interface InsightsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const InsightsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const InsightsRequestBuilderNavigationMetadata: Record<Exclude<keyof InsightsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    shared: {
        uriTemplate: SharedRequestBuilderUriTemplate,
        requestsMetadata: SharedRequestBuilderRequestsMetadata,
        navigationMetadata: SharedRequestBuilderNavigationMetadata,
    },
    trending: {
        uriTemplate: TrendingRequestBuilderUriTemplate,
        requestsMetadata: TrendingRequestBuilderRequestsMetadata,
        navigationMetadata: TrendingRequestBuilderNavigationMetadata,
    },
    used: {
        uriTemplate: UsedRequestBuilderUriTemplate,
        requestsMetadata: UsedRequestBuilderRequestsMetadata,
        navigationMetadata: UsedRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const InsightsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createOfficeGraphInsightsFromDiscriminatorValue,
        queryParametersMapper: InsightsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createOfficeGraphInsightsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeOfficeGraphInsights,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const InsightsRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/insights{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
