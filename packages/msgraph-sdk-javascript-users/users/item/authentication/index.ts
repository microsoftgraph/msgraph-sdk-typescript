/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAuthenticationFromDiscriminatorValue, serializeAuthentication, type Authentication } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { EmailMethodsRequestBuilderNavigationMetadata, EmailMethodsRequestBuilderRequestsMetadata, EmailMethodsRequestBuilderUriTemplate, type EmailMethodsRequestBuilder } from './emailMethods/';
import { Fido2MethodsRequestBuilderNavigationMetadata, Fido2MethodsRequestBuilderRequestsMetadata, Fido2MethodsRequestBuilderUriTemplate, type Fido2MethodsRequestBuilder } from './fido2Methods/';
import { MethodsRequestBuilderNavigationMetadata, MethodsRequestBuilderRequestsMetadata, MethodsRequestBuilderUriTemplate, type MethodsRequestBuilder } from './methods/';
import { MicrosoftAuthenticatorMethodsRequestBuilderNavigationMetadata, MicrosoftAuthenticatorMethodsRequestBuilderRequestsMetadata, MicrosoftAuthenticatorMethodsRequestBuilderUriTemplate, type MicrosoftAuthenticatorMethodsRequestBuilder } from './microsoftAuthenticatorMethods/';
import { OperationsRequestBuilderNavigationMetadata, OperationsRequestBuilderRequestsMetadata, OperationsRequestBuilderUriTemplate, type OperationsRequestBuilder } from './operations/';
import { PasswordMethodsRequestBuilderNavigationMetadata, PasswordMethodsRequestBuilderRequestsMetadata, PasswordMethodsRequestBuilderUriTemplate, type PasswordMethodsRequestBuilder } from './passwordMethods/';
import { PhoneMethodsRequestBuilderNavigationMetadata, PhoneMethodsRequestBuilderRequestsMetadata, PhoneMethodsRequestBuilderUriTemplate, type PhoneMethodsRequestBuilder } from './phoneMethods/';
import { SoftwareOathMethodsRequestBuilderNavigationMetadata, SoftwareOathMethodsRequestBuilderRequestsMetadata, SoftwareOathMethodsRequestBuilderUriTemplate, type SoftwareOathMethodsRequestBuilder } from './softwareOathMethods/';
import { TemporaryAccessPassMethodsRequestBuilderNavigationMetadata, TemporaryAccessPassMethodsRequestBuilderRequestsMetadata, TemporaryAccessPassMethodsRequestBuilderUriTemplate, type TemporaryAccessPassMethodsRequestBuilder } from './temporaryAccessPassMethods/';
import { type WindowsHelloForBusinessMethodsRequestBuilder, WindowsHelloForBusinessMethodsRequestBuilderNavigationMetadata, WindowsHelloForBusinessMethodsRequestBuilderRequestsMetadata, WindowsHelloForBusinessMethodsRequestBuilderUriTemplate } from './windowsHelloForBusinessMethods/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the authentication property of the microsoft.graph.user entity.
 */
export interface AuthenticationRequestBuilder extends BaseRequestBuilder<AuthenticationRequestBuilder> {
    /**
     * Provides operations to manage the emailMethods property of the microsoft.graph.authentication entity.
     */
    get emailMethods(): EmailMethodsRequestBuilder;
    /**
     * Provides operations to manage the fido2Methods property of the microsoft.graph.authentication entity.
     */
    get fido2Methods(): Fido2MethodsRequestBuilder;
    /**
     * Provides operations to manage the methods property of the microsoft.graph.authentication entity.
     */
    get methods(): MethodsRequestBuilder;
    /**
     * Provides operations to manage the microsoftAuthenticatorMethods property of the microsoft.graph.authentication entity.
     */
    get microsoftAuthenticatorMethods(): MicrosoftAuthenticatorMethodsRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.authentication entity.
     */
    get operations(): OperationsRequestBuilder;
    /**
     * Provides operations to manage the passwordMethods property of the microsoft.graph.authentication entity.
     */
    get passwordMethods(): PasswordMethodsRequestBuilder;
    /**
     * Provides operations to manage the phoneMethods property of the microsoft.graph.authentication entity.
     */
    get phoneMethods(): PhoneMethodsRequestBuilder;
    /**
     * Provides operations to manage the softwareOathMethods property of the microsoft.graph.authentication entity.
     */
    get softwareOathMethods(): SoftwareOathMethodsRequestBuilder;
    /**
     * Provides operations to manage the temporaryAccessPassMethods property of the microsoft.graph.authentication entity.
     */
    get temporaryAccessPassMethods(): TemporaryAccessPassMethodsRequestBuilder;
    /**
     * Provides operations to manage the windowsHelloForBusinessMethods property of the microsoft.graph.authentication entity.
     */
    get windowsHelloForBusinessMethods(): WindowsHelloForBusinessMethodsRequestBuilder;
    /**
     * Delete navigation property authentication for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The authentication methods that are supported for the user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Authentication
     */
     get(requestConfiguration?: RequestConfiguration<AuthenticationRequestBuilderGetQueryParameters> | undefined) : Promise<Authentication | undefined>;
    /**
     * Update the navigation property authentication in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Authentication
     */
     patch(body: Authentication, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Authentication | undefined>;
    /**
     * Delete navigation property authentication for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The authentication methods that are supported for the user.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AuthenticationRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property authentication in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Authentication, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The authentication methods that are supported for the user.
 */
export interface AuthenticationRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AuthenticationRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AuthenticationRequestBuilderNavigationMetadata: Record<Exclude<keyof AuthenticationRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    emailMethods: {
        uriTemplate: EmailMethodsRequestBuilderUriTemplate,
        requestsMetadata: EmailMethodsRequestBuilderRequestsMetadata,
        navigationMetadata: EmailMethodsRequestBuilderNavigationMetadata,
    },
    fido2Methods: {
        uriTemplate: Fido2MethodsRequestBuilderUriTemplate,
        requestsMetadata: Fido2MethodsRequestBuilderRequestsMetadata,
        navigationMetadata: Fido2MethodsRequestBuilderNavigationMetadata,
    },
    methods: {
        uriTemplate: MethodsRequestBuilderUriTemplate,
        requestsMetadata: MethodsRequestBuilderRequestsMetadata,
        navigationMetadata: MethodsRequestBuilderNavigationMetadata,
    },
    microsoftAuthenticatorMethods: {
        uriTemplate: MicrosoftAuthenticatorMethodsRequestBuilderUriTemplate,
        requestsMetadata: MicrosoftAuthenticatorMethodsRequestBuilderRequestsMetadata,
        navigationMetadata: MicrosoftAuthenticatorMethodsRequestBuilderNavigationMetadata,
    },
    operations: {
        uriTemplate: OperationsRequestBuilderUriTemplate,
        requestsMetadata: OperationsRequestBuilderRequestsMetadata,
        navigationMetadata: OperationsRequestBuilderNavigationMetadata,
    },
    passwordMethods: {
        uriTemplate: PasswordMethodsRequestBuilderUriTemplate,
        requestsMetadata: PasswordMethodsRequestBuilderRequestsMetadata,
        navigationMetadata: PasswordMethodsRequestBuilderNavigationMetadata,
    },
    phoneMethods: {
        uriTemplate: PhoneMethodsRequestBuilderUriTemplate,
        requestsMetadata: PhoneMethodsRequestBuilderRequestsMetadata,
        navigationMetadata: PhoneMethodsRequestBuilderNavigationMetadata,
    },
    softwareOathMethods: {
        uriTemplate: SoftwareOathMethodsRequestBuilderUriTemplate,
        requestsMetadata: SoftwareOathMethodsRequestBuilderRequestsMetadata,
        navigationMetadata: SoftwareOathMethodsRequestBuilderNavigationMetadata,
    },
    temporaryAccessPassMethods: {
        uriTemplate: TemporaryAccessPassMethodsRequestBuilderUriTemplate,
        requestsMetadata: TemporaryAccessPassMethodsRequestBuilderRequestsMetadata,
        navigationMetadata: TemporaryAccessPassMethodsRequestBuilderNavigationMetadata,
    },
    windowsHelloForBusinessMethods: {
        uriTemplate: WindowsHelloForBusinessMethodsRequestBuilderUriTemplate,
        requestsMetadata: WindowsHelloForBusinessMethodsRequestBuilderRequestsMetadata,
        navigationMetadata: WindowsHelloForBusinessMethodsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AuthenticationRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAuthenticationFromDiscriminatorValue,
        queryParametersMapper: AuthenticationRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAuthenticationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAuthentication,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const AuthenticationRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/authentication{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
