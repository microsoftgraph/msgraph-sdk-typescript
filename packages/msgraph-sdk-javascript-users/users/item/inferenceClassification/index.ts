/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createInferenceClassificationFromDiscriminatorValue, serializeInferenceClassification, type InferenceClassification } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { OverridesRequestBuilderNavigationMetadata, OverridesRequestBuilderRequestsMetadata, OverridesRequestBuilderUriTemplate, type OverridesRequestBuilder } from './overrides/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the inferenceClassification property of the microsoft.graph.user entity.
 */
export interface InferenceClassificationRequestBuilder extends BaseRequestBuilder<InferenceClassificationRequestBuilder> {
    /**
     * Provides operations to manage the overrides property of the microsoft.graph.inferenceClassification entity.
     */
    get overrides(): OverridesRequestBuilder;
    /**
     * Relevance classification of the user's messages based on explicit designations that override inferred relevance or importance.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of InferenceClassification
     */
     get(requestConfiguration?: RequestConfiguration<InferenceClassificationRequestBuilderGetQueryParameters> | undefined) : Promise<InferenceClassification | undefined>;
    /**
     * Update the navigation property inferenceClassification in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of InferenceClassification
     */
     patch(body: InferenceClassification, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<InferenceClassification | undefined>;
    /**
     * Relevance classification of the user's messages based on explicit designations that override inferred relevance or importance.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<InferenceClassificationRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property inferenceClassification in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: InferenceClassification, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Relevance classification of the user's messages based on explicit designations that override inferred relevance or importance.
 */
export interface InferenceClassificationRequestBuilderGetQueryParameters {
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const InferenceClassificationRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const InferenceClassificationRequestBuilderNavigationMetadata: Record<Exclude<keyof InferenceClassificationRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    overrides: {
        uriTemplate: OverridesRequestBuilderUriTemplate,
        requestsMetadata: OverridesRequestBuilderRequestsMetadata,
        navigationMetadata: OverridesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const InferenceClassificationRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createInferenceClassificationFromDiscriminatorValue,
        queryParametersMapper: InferenceClassificationRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createInferenceClassificationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeInferenceClassification,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const InferenceClassificationRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/inferenceClassification{?%24select}";
/* tslint:enable */
/* eslint-enable */

