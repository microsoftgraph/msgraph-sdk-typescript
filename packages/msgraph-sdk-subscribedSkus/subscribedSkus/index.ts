/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createSubscribedSkuCollectionResponseFromDiscriminatorValue, createSubscribedSkuFromDiscriminatorValue, serializeSubscribedSku, type SubscribedSku, type SubscribedSkuCollectionResponse } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { SubscribedSkuItemRequestBuilderRequestsMetadata, type SubscribedSkuItemRequestBuilder } from './item/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of subscribedSku entities.
 */
export interface SubscribedSkusRequestBuilder extends BaseRequestBuilder<SubscribedSkusRequestBuilder> {
    /**
     * Provides operations to manage the collection of subscribedSku entities.
     * @param subscribedSkuId The unique identifier of subscribedSku
     * @returns {SubscribedSkuItemRequestBuilder}
     */
     bySubscribedSkuId(subscribedSkuId: string) : SubscribedSkuItemRequestBuilder;
    /**
     * Get the list of commercial subscriptions that an organization has acquired. For the mapping of license names as displayed on the Microsoft Entra admin center or the Microsoft 365 admin center against their Microsoft Graph skuId and skuPartNumber properties, see Product names and service plan identifiers for licensing.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscribedSkuCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/subscribedsku-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<SubscribedSkusRequestBuilderGetQueryParameters> | undefined) : Promise<SubscribedSkuCollectionResponse | undefined>;
    /**
     * Add new entity to subscribedSkus
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<SubscribedSku>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: SubscribedSku, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SubscribedSku | undefined>;
    /**
     * Get the list of commercial subscriptions that an organization has acquired. For the mapping of license names as displayed on the Microsoft Entra admin center or the Microsoft 365 admin center against their Microsoft Graph skuId and skuPartNumber properties, see Product names and service plan identifiers for licensing.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SubscribedSkusRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Add new entity to subscribedSkus
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: SubscribedSku, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the list of commercial subscriptions that an organization has acquired. For the mapping of license names as displayed on the Microsoft Entra admin center or the Microsoft 365 admin center against their Microsoft Graph skuId and skuPartNumber properties, see Product names and service plan identifiers for licensing.
 */
export interface SubscribedSkusRequestBuilderGetQueryParameters {
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const SubscribedSkusRequestBuilderUriTemplate = "{+baseurl}/subscribedSkus{?%24orderby,%24search,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SubscribedSkusRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SubscribedSkusRequestBuilderNavigationMetadata: Record<Exclude<keyof SubscribedSkusRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bySubscribedSkuId: {
        requestsMetadata: SubscribedSkuItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["subscribedSku%2Did"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SubscribedSkusRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SubscribedSkusRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscribedSkuCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: SubscribedSkusRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: SubscribedSkusRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createSubscribedSkuFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSubscribedSku,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
