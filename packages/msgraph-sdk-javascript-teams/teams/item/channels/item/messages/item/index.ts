/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createChatMessageFromDiscriminatorValue, serializeChatMessage, type ChatMessage } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { HostedContentsRequestBuilderNavigationMetadata, HostedContentsRequestBuilderRequestsMetadata, HostedContentsRequestBuilderUriTemplate, type HostedContentsRequestBuilder } from './hostedContents/';
import { RepliesRequestBuilderNavigationMetadata, RepliesRequestBuilderRequestsMetadata, RepliesRequestBuilderUriTemplate, type RepliesRequestBuilder } from './replies/';
import { SetReactionRequestBuilderRequestsMetadata, SetReactionRequestBuilderUriTemplate, type SetReactionRequestBuilder } from './setReaction/';
import { SoftDeleteRequestBuilderRequestsMetadata, SoftDeleteRequestBuilderUriTemplate, type SoftDeleteRequestBuilder } from './softDelete/';
import { type UndoSoftDeleteRequestBuilder, UndoSoftDeleteRequestBuilderRequestsMetadata, UndoSoftDeleteRequestBuilderUriTemplate } from './undoSoftDelete/';
import { type UnsetReactionRequestBuilder, UnsetReactionRequestBuilderRequestsMetadata, UnsetReactionRequestBuilderUriTemplate } from './unsetReaction/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the messages property of the microsoft.graph.channel entity.
 */
export interface ChatMessageItemRequestBuilder extends BaseRequestBuilder<ChatMessageItemRequestBuilder> {
    /**
     * Provides operations to manage the hostedContents property of the microsoft.graph.chatMessage entity.
     */
    get hostedContents(): HostedContentsRequestBuilder;
    /**
     * Provides operations to manage the replies property of the microsoft.graph.chatMessage entity.
     */
    get replies(): RepliesRequestBuilder;
    /**
     * Provides operations to call the setReaction method.
     */
    get setReaction(): SetReactionRequestBuilder;
    /**
     * Provides operations to call the softDelete method.
     */
    get softDelete(): SoftDeleteRequestBuilder;
    /**
     * Provides operations to call the undoSoftDelete method.
     */
    get undoSoftDelete(): UndoSoftDeleteRequestBuilder;
    /**
     * Provides operations to call the unsetReaction method.
     */
    get unsetReaction(): UnsetReactionRequestBuilder;
    /**
     * Delete navigation property messages for teams
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve a single message or a message reply in a channel or a chat.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ChatMessage
     * @see {@link https://learn.microsoft.com/graph/api/chatmessage-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ChatMessageItemRequestBuilderGetQueryParameters> | undefined) : Promise<ChatMessage | undefined>;
    /**
     * Update a chatMessage object. With the exception of the policyViolation property, all properties of a chatMessage can be updated in delegated permissions scenarios.Only the policyViolation property of a chatMessage can be updated in application permissions scenarios. The update only works for chats where members are Microsoft Teams users. If one of the participants is using Skype, the operation will fail. This method does not support federation. Only the user in the tenant who sent the message can perform data loss prevention (DLP) updates on the specified chat message.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ChatMessage
     * @see {@link https://learn.microsoft.com/graph/api/chatmessage-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: ChatMessage, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ChatMessage | undefined>;
    /**
     * Delete navigation property messages for teams
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve a single message or a message reply in a channel or a chat.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ChatMessageItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update a chatMessage object. With the exception of the policyViolation property, all properties of a chatMessage can be updated in delegated permissions scenarios.Only the policyViolation property of a chatMessage can be updated in application permissions scenarios. The update only works for chats where members are Microsoft Teams users. If one of the participants is using Skype, the operation will fail. This method does not support federation. Only the user in the tenant who sent the message can perform data loss prevention (DLP) updates on the specified chat message.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: ChatMessage, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve a single message or a message reply in a channel or a chat.
 */
export interface ChatMessageItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ChatMessageItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ChatMessageItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ChatMessageItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    hostedContents: {
        uriTemplate: HostedContentsRequestBuilderUriTemplate,
        requestsMetadata: HostedContentsRequestBuilderRequestsMetadata,
        navigationMetadata: HostedContentsRequestBuilderNavigationMetadata,
    },
    replies: {
        uriTemplate: RepliesRequestBuilderUriTemplate,
        requestsMetadata: RepliesRequestBuilderRequestsMetadata,
        navigationMetadata: RepliesRequestBuilderNavigationMetadata,
    },
    setReaction: {
        uriTemplate: SetReactionRequestBuilderUriTemplate,
        requestsMetadata: SetReactionRequestBuilderRequestsMetadata,
    },
    softDelete: {
        uriTemplate: SoftDeleteRequestBuilderUriTemplate,
        requestsMetadata: SoftDeleteRequestBuilderRequestsMetadata,
    },
    undoSoftDelete: {
        uriTemplate: UndoSoftDeleteRequestBuilderUriTemplate,
        requestsMetadata: UndoSoftDeleteRequestBuilderRequestsMetadata,
    },
    unsetReaction: {
        uriTemplate: UnsetReactionRequestBuilderUriTemplate,
        requestsMetadata: UnsetReactionRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ChatMessageItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createChatMessageFromDiscriminatorValue,
        queryParametersMapper: ChatMessageItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createChatMessageFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeChatMessage,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const ChatMessageItemRequestBuilderUriTemplate = "{+baseurl}/teams/{team%2Did}/channels/{channel%2Did}/messages/{chatMessage%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
