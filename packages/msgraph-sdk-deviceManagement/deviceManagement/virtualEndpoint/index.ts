/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createVirtualEndpointFromDiscriminatorValue, serializeVirtualEndpoint, type VirtualEndpoint } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { AuditEventsRequestBuilderNavigationMetadata, AuditEventsRequestBuilderRequestsMetadata, type AuditEventsRequestBuilder } from './auditEvents/';
// @ts-ignore
import { CloudPCsRequestBuilderNavigationMetadata, CloudPCsRequestBuilderRequestsMetadata, type CloudPCsRequestBuilder } from './cloudPCs/';
// @ts-ignore
import { DeviceImagesRequestBuilderNavigationMetadata, DeviceImagesRequestBuilderRequestsMetadata, type DeviceImagesRequestBuilder } from './deviceImages/';
// @ts-ignore
import { GalleryImagesRequestBuilderNavigationMetadata, GalleryImagesRequestBuilderRequestsMetadata, type GalleryImagesRequestBuilder } from './galleryImages/';
// @ts-ignore
import { OnPremisesConnectionsRequestBuilderNavigationMetadata, OnPremisesConnectionsRequestBuilderRequestsMetadata, type OnPremisesConnectionsRequestBuilder } from './onPremisesConnections/';
// @ts-ignore
import { ProvisioningPoliciesRequestBuilderNavigationMetadata, ProvisioningPoliciesRequestBuilderRequestsMetadata, type ProvisioningPoliciesRequestBuilder } from './provisioningPolicies/';
// @ts-ignore
import { type UserSettingsRequestBuilder, UserSettingsRequestBuilderNavigationMetadata, UserSettingsRequestBuilderRequestsMetadata } from './userSettings/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the virtualEndpoint property of the microsoft.graph.deviceManagement entity.
 */
export interface VirtualEndpointRequestBuilder extends BaseRequestBuilder<VirtualEndpointRequestBuilder> {
    /**
     * Provides operations to manage the auditEvents property of the microsoft.graph.virtualEndpoint entity.
     */
    get auditEvents(): AuditEventsRequestBuilder;
    /**
     * Provides operations to manage the cloudPCs property of the microsoft.graph.virtualEndpoint entity.
     */
    get cloudPCs(): CloudPCsRequestBuilder;
    /**
     * Provides operations to manage the deviceImages property of the microsoft.graph.virtualEndpoint entity.
     */
    get deviceImages(): DeviceImagesRequestBuilder;
    /**
     * Provides operations to manage the galleryImages property of the microsoft.graph.virtualEndpoint entity.
     */
    get galleryImages(): GalleryImagesRequestBuilder;
    /**
     * Provides operations to manage the onPremisesConnections property of the microsoft.graph.virtualEndpoint entity.
     */
    get onPremisesConnections(): OnPremisesConnectionsRequestBuilder;
    /**
     * Provides operations to manage the provisioningPolicies property of the microsoft.graph.virtualEndpoint entity.
     */
    get provisioningPolicies(): ProvisioningPoliciesRequestBuilder;
    /**
     * Provides operations to manage the userSettings property of the microsoft.graph.virtualEndpoint entity.
     */
    get userSettings(): UserSettingsRequestBuilder;
    /**
     * Delete navigation property virtualEndpoint for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Virtual endpoint
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VirtualEndpoint>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<VirtualEndpointRequestBuilderGetQueryParameters> | undefined) : Promise<VirtualEndpoint | undefined>;
    /**
     * Update the navigation property virtualEndpoint in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VirtualEndpoint>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: VirtualEndpoint, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<VirtualEndpoint | undefined>;
    /**
     * Delete navigation property virtualEndpoint for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Virtual endpoint
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<VirtualEndpointRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property virtualEndpoint in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: VirtualEndpoint, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Virtual endpoint
 */
export interface VirtualEndpointRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const VirtualEndpointRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/virtualEndpoint{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const VirtualEndpointRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const VirtualEndpointRequestBuilderNavigationMetadata: Record<Exclude<keyof VirtualEndpointRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    auditEvents: {
        requestsMetadata: AuditEventsRequestBuilderRequestsMetadata,
        navigationMetadata: AuditEventsRequestBuilderNavigationMetadata,
    },
    cloudPCs: {
        requestsMetadata: CloudPCsRequestBuilderRequestsMetadata,
        navigationMetadata: CloudPCsRequestBuilderNavigationMetadata,
    },
    deviceImages: {
        requestsMetadata: DeviceImagesRequestBuilderRequestsMetadata,
        navigationMetadata: DeviceImagesRequestBuilderNavigationMetadata,
    },
    galleryImages: {
        requestsMetadata: GalleryImagesRequestBuilderRequestsMetadata,
        navigationMetadata: GalleryImagesRequestBuilderNavigationMetadata,
    },
    onPremisesConnections: {
        requestsMetadata: OnPremisesConnectionsRequestBuilderRequestsMetadata,
        navigationMetadata: OnPremisesConnectionsRequestBuilderNavigationMetadata,
    },
    provisioningPolicies: {
        requestsMetadata: ProvisioningPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: ProvisioningPoliciesRequestBuilderNavigationMetadata,
    },
    userSettings: {
        requestsMetadata: UserSettingsRequestBuilderRequestsMetadata,
        navigationMetadata: UserSettingsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const VirtualEndpointRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: VirtualEndpointRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: VirtualEndpointRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVirtualEndpointFromDiscriminatorValue,
        queryParametersMapper: VirtualEndpointRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: VirtualEndpointRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVirtualEndpointFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVirtualEndpoint,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
