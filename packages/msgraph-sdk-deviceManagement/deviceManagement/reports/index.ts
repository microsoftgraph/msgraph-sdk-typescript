/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createDeviceManagementReportsFromDiscriminatorValue, serializeDeviceManagementReports, type DeviceManagementReports } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { ExportJobsRequestBuilderNavigationMetadata, ExportJobsRequestBuilderRequestsMetadata, type ExportJobsRequestBuilder } from './exportJobs/';
// @ts-ignore
import { GetCachedReportRequestBuilderRequestsMetadata, type GetCachedReportRequestBuilder } from './getCachedReport/';
// @ts-ignore
import { GetCompliancePolicyNonComplianceReportRequestBuilderRequestsMetadata, type GetCompliancePolicyNonComplianceReportRequestBuilder } from './getCompliancePolicyNonComplianceReport/';
// @ts-ignore
import { GetCompliancePolicyNonComplianceSummaryReportRequestBuilderRequestsMetadata, type GetCompliancePolicyNonComplianceSummaryReportRequestBuilder } from './getCompliancePolicyNonComplianceSummaryReport/';
// @ts-ignore
import { GetComplianceSettingNonComplianceReportRequestBuilderRequestsMetadata, type GetComplianceSettingNonComplianceReportRequestBuilder } from './getComplianceSettingNonComplianceReport/';
// @ts-ignore
import { GetConfigurationPolicyNonComplianceReportRequestBuilderRequestsMetadata, type GetConfigurationPolicyNonComplianceReportRequestBuilder } from './getConfigurationPolicyNonComplianceReport/';
// @ts-ignore
import { GetConfigurationPolicyNonComplianceSummaryReportRequestBuilderRequestsMetadata, type GetConfigurationPolicyNonComplianceSummaryReportRequestBuilder } from './getConfigurationPolicyNonComplianceSummaryReport/';
// @ts-ignore
import { GetConfigurationSettingNonComplianceReportRequestBuilderRequestsMetadata, type GetConfigurationSettingNonComplianceReportRequestBuilder } from './getConfigurationSettingNonComplianceReport/';
// @ts-ignore
import { GetDeviceManagementIntentPerSettingContributingProfilesRequestBuilderRequestsMetadata, type GetDeviceManagementIntentPerSettingContributingProfilesRequestBuilder } from './getDeviceManagementIntentPerSettingContributingProfiles/';
// @ts-ignore
import { GetDeviceManagementIntentSettingsReportRequestBuilderRequestsMetadata, type GetDeviceManagementIntentSettingsReportRequestBuilder } from './getDeviceManagementIntentSettingsReport/';
// @ts-ignore
import { GetDeviceNonComplianceReportRequestBuilderRequestsMetadata, type GetDeviceNonComplianceReportRequestBuilder } from './getDeviceNonComplianceReport/';
// @ts-ignore
import { GetDevicesWithoutCompliancePolicyReportRequestBuilderRequestsMetadata, type GetDevicesWithoutCompliancePolicyReportRequestBuilder } from './getDevicesWithoutCompliancePolicyReport/';
// @ts-ignore
import { GetHistoricalReportRequestBuilderRequestsMetadata, type GetHistoricalReportRequestBuilder } from './getHistoricalReport/';
// @ts-ignore
import { GetNoncompliantDevicesAndSettingsReportRequestBuilderRequestsMetadata, type GetNoncompliantDevicesAndSettingsReportRequestBuilder } from './getNoncompliantDevicesAndSettingsReport/';
// @ts-ignore
import { GetPolicyNonComplianceMetadataRequestBuilderRequestsMetadata, type GetPolicyNonComplianceMetadataRequestBuilder } from './getPolicyNonComplianceMetadata/';
// @ts-ignore
import { GetPolicyNonComplianceReportRequestBuilderRequestsMetadata, type GetPolicyNonComplianceReportRequestBuilder } from './getPolicyNonComplianceReport/';
// @ts-ignore
import { GetPolicyNonComplianceSummaryReportRequestBuilderRequestsMetadata, type GetPolicyNonComplianceSummaryReportRequestBuilder } from './getPolicyNonComplianceSummaryReport/';
// @ts-ignore
import { GetReportFiltersRequestBuilderRequestsMetadata, type GetReportFiltersRequestBuilder } from './getReportFilters/';
// @ts-ignore
import { GetSettingNonComplianceReportRequestBuilderRequestsMetadata, type GetSettingNonComplianceReportRequestBuilder } from './getSettingNonComplianceReport/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the reports property of the microsoft.graph.deviceManagement entity.
 */
export interface ReportsRequestBuilder extends BaseRequestBuilder<ReportsRequestBuilder> {
    /**
     * Provides operations to manage the exportJobs property of the microsoft.graph.deviceManagementReports entity.
     */
    get exportJobs(): ExportJobsRequestBuilder;
    /**
     * Provides operations to call the getCachedReport method.
     */
    get getCachedReport(): GetCachedReportRequestBuilder;
    /**
     * Provides operations to call the getCompliancePolicyNonComplianceReport method.
     */
    get getCompliancePolicyNonComplianceReport(): GetCompliancePolicyNonComplianceReportRequestBuilder;
    /**
     * Provides operations to call the getCompliancePolicyNonComplianceSummaryReport method.
     */
    get getCompliancePolicyNonComplianceSummaryReport(): GetCompliancePolicyNonComplianceSummaryReportRequestBuilder;
    /**
     * Provides operations to call the getComplianceSettingNonComplianceReport method.
     */
    get getComplianceSettingNonComplianceReport(): GetComplianceSettingNonComplianceReportRequestBuilder;
    /**
     * Provides operations to call the getConfigurationPolicyNonComplianceReport method.
     */
    get getConfigurationPolicyNonComplianceReport(): GetConfigurationPolicyNonComplianceReportRequestBuilder;
    /**
     * Provides operations to call the getConfigurationPolicyNonComplianceSummaryReport method.
     */
    get getConfigurationPolicyNonComplianceSummaryReport(): GetConfigurationPolicyNonComplianceSummaryReportRequestBuilder;
    /**
     * Provides operations to call the getConfigurationSettingNonComplianceReport method.
     */
    get getConfigurationSettingNonComplianceReport(): GetConfigurationSettingNonComplianceReportRequestBuilder;
    /**
     * Provides operations to call the getDeviceManagementIntentPerSettingContributingProfiles method.
     */
    get getDeviceManagementIntentPerSettingContributingProfiles(): GetDeviceManagementIntentPerSettingContributingProfilesRequestBuilder;
    /**
     * Provides operations to call the getDeviceManagementIntentSettingsReport method.
     */
    get getDeviceManagementIntentSettingsReport(): GetDeviceManagementIntentSettingsReportRequestBuilder;
    /**
     * Provides operations to call the getDeviceNonComplianceReport method.
     */
    get getDeviceNonComplianceReport(): GetDeviceNonComplianceReportRequestBuilder;
    /**
     * Provides operations to call the getDevicesWithoutCompliancePolicyReport method.
     */
    get getDevicesWithoutCompliancePolicyReport(): GetDevicesWithoutCompliancePolicyReportRequestBuilder;
    /**
     * Provides operations to call the getHistoricalReport method.
     */
    get getHistoricalReport(): GetHistoricalReportRequestBuilder;
    /**
     * Provides operations to call the getNoncompliantDevicesAndSettingsReport method.
     */
    get getNoncompliantDevicesAndSettingsReport(): GetNoncompliantDevicesAndSettingsReportRequestBuilder;
    /**
     * Provides operations to call the getPolicyNonComplianceMetadata method.
     */
    get getPolicyNonComplianceMetadata(): GetPolicyNonComplianceMetadataRequestBuilder;
    /**
     * Provides operations to call the getPolicyNonComplianceReport method.
     */
    get getPolicyNonComplianceReport(): GetPolicyNonComplianceReportRequestBuilder;
    /**
     * Provides operations to call the getPolicyNonComplianceSummaryReport method.
     */
    get getPolicyNonComplianceSummaryReport(): GetPolicyNonComplianceSummaryReportRequestBuilder;
    /**
     * Provides operations to call the getReportFilters method.
     */
    get getReportFilters(): GetReportFiltersRequestBuilder;
    /**
     * Provides operations to call the getSettingNonComplianceReport method.
     */
    get getSettingNonComplianceReport(): GetSettingNonComplianceReportRequestBuilder;
    /**
     * Delete navigation property reports for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Reports singleton
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementReports>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ReportsRequestBuilderGetQueryParameters> | undefined) : Promise<DeviceManagementReports | undefined>;
    /**
     * Update the navigation property reports in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DeviceManagementReports>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: DeviceManagementReports, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<DeviceManagementReports | undefined>;
    /**
     * Delete navigation property reports for deviceManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Reports singleton
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ReportsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property reports in deviceManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: DeviceManagementReports, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Reports singleton
 */
export interface ReportsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ReportsRequestBuilderUriTemplate = "{+baseurl}/deviceManagement/reports{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ReportsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ReportsRequestBuilderNavigationMetadata: Record<Exclude<keyof ReportsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    exportJobs: {
        requestsMetadata: ExportJobsRequestBuilderRequestsMetadata,
        navigationMetadata: ExportJobsRequestBuilderNavigationMetadata,
    },
    getCachedReport: {
        requestsMetadata: GetCachedReportRequestBuilderRequestsMetadata,
    },
    getCompliancePolicyNonComplianceReport: {
        requestsMetadata: GetCompliancePolicyNonComplianceReportRequestBuilderRequestsMetadata,
    },
    getCompliancePolicyNonComplianceSummaryReport: {
        requestsMetadata: GetCompliancePolicyNonComplianceSummaryReportRequestBuilderRequestsMetadata,
    },
    getComplianceSettingNonComplianceReport: {
        requestsMetadata: GetComplianceSettingNonComplianceReportRequestBuilderRequestsMetadata,
    },
    getConfigurationPolicyNonComplianceReport: {
        requestsMetadata: GetConfigurationPolicyNonComplianceReportRequestBuilderRequestsMetadata,
    },
    getConfigurationPolicyNonComplianceSummaryReport: {
        requestsMetadata: GetConfigurationPolicyNonComplianceSummaryReportRequestBuilderRequestsMetadata,
    },
    getConfigurationSettingNonComplianceReport: {
        requestsMetadata: GetConfigurationSettingNonComplianceReportRequestBuilderRequestsMetadata,
    },
    getDeviceManagementIntentPerSettingContributingProfiles: {
        requestsMetadata: GetDeviceManagementIntentPerSettingContributingProfilesRequestBuilderRequestsMetadata,
    },
    getDeviceManagementIntentSettingsReport: {
        requestsMetadata: GetDeviceManagementIntentSettingsReportRequestBuilderRequestsMetadata,
    },
    getDeviceNonComplianceReport: {
        requestsMetadata: GetDeviceNonComplianceReportRequestBuilderRequestsMetadata,
    },
    getDevicesWithoutCompliancePolicyReport: {
        requestsMetadata: GetDevicesWithoutCompliancePolicyReportRequestBuilderRequestsMetadata,
    },
    getHistoricalReport: {
        requestsMetadata: GetHistoricalReportRequestBuilderRequestsMetadata,
    },
    getNoncompliantDevicesAndSettingsReport: {
        requestsMetadata: GetNoncompliantDevicesAndSettingsReportRequestBuilderRequestsMetadata,
    },
    getPolicyNonComplianceMetadata: {
        requestsMetadata: GetPolicyNonComplianceMetadataRequestBuilderRequestsMetadata,
    },
    getPolicyNonComplianceReport: {
        requestsMetadata: GetPolicyNonComplianceReportRequestBuilderRequestsMetadata,
    },
    getPolicyNonComplianceSummaryReport: {
        requestsMetadata: GetPolicyNonComplianceSummaryReportRequestBuilderRequestsMetadata,
    },
    getReportFilters: {
        requestsMetadata: GetReportFiltersRequestBuilderRequestsMetadata,
    },
    getSettingNonComplianceReport: {
        requestsMetadata: GetSettingNonComplianceReportRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ReportsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ReportsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ReportsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceManagementReportsFromDiscriminatorValue,
        queryParametersMapper: ReportsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ReportsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDeviceManagementReportsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDeviceManagementReports,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
