/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createBookingAppointmentFromDiscriminatorValue, serializeBookingAppointment, type BookingAppointment } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CancelRequestBuilderRequestsMetadata, type CancelRequestBuilder } from './cancel/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the appointments property of the microsoft.graph.bookingBusiness entity.
 */
export interface BookingAppointmentItemRequestBuilder extends BaseRequestBuilder<BookingAppointmentItemRequestBuilder> {
    /**
     * Provides operations to call the cancel method.
     */
    get cancel(): CancelRequestBuilder;
    /**
     * Delete a bookingAppointment in the specified bookingBusiness.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/bookingappointment-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get the properties and relationships of a bookingAppointment object in the specified bookingBusiness. The startDateTime and endDateTime properties are always returned in UTC.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BookingAppointment>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/bookingappointment-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<BookingAppointmentItemRequestBuilderGetQueryParameters> | undefined) : Promise<BookingAppointment | undefined>;
    /**
     * Update the properties of a bookingAppointment object in the specified bookingBusiness.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<BookingAppointment>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/bookingappointment-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: BookingAppointment, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<BookingAppointment | undefined>;
    /**
     * Delete a bookingAppointment in the specified bookingBusiness.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get the properties and relationships of a bookingAppointment object in the specified bookingBusiness. The startDateTime and endDateTime properties are always returned in UTC.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<BookingAppointmentItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of a bookingAppointment object in the specified bookingBusiness.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: BookingAppointment, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the properties and relationships of a bookingAppointment object in the specified bookingBusiness. The startDateTime and endDateTime properties are always returned in UTC.
 */
export interface BookingAppointmentItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const BookingAppointmentItemRequestBuilderUriTemplate = "{+baseurl}/solutions/bookingBusinesses/{bookingBusiness%2Did}/appointments/{bookingAppointment%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const BookingAppointmentItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const BookingAppointmentItemRequestBuilderNavigationMetadata: Record<Exclude<keyof BookingAppointmentItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    cancel: {
        requestsMetadata: CancelRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const BookingAppointmentItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: BookingAppointmentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: BookingAppointmentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBookingAppointmentFromDiscriminatorValue,
        queryParametersMapper: BookingAppointmentItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: BookingAppointmentItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createBookingAppointmentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeBookingAppointment,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the appointments property of the microsoft.graph.bookingBusiness entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the appointments property of the microsoft.graph.bookingBusiness entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AdditionalInformation: "additionalInformation",
    AnonymousJoinWebUrl: "anonymousJoinWebUrl",
    Customers: "customers",
    CustomerTimeZone: "customerTimeZone",
    Duration: "duration",
    EndDateTime: "endDateTime",
    FilledAttendeesCount: "filledAttendeesCount",
    IsLocationOnline: "isLocationOnline",
    JoinWebUrl: "joinWebUrl",
    MaximumAttendeesCount: "maximumAttendeesCount",
    OptOutOfCustomerEmail: "optOutOfCustomerEmail",
    PostBuffer: "postBuffer",
    PreBuffer: "preBuffer",
    Price: "price",
    PriceType: "priceType",
    Reminders: "reminders",
    SelfServiceAppointmentId: "selfServiceAppointmentId",
    ServiceId: "serviceId",
    ServiceLocation: "serviceLocation",
    ServiceName: "serviceName",
    ServiceNotes: "serviceNotes",
    SmsNotificationsEnabled: "smsNotificationsEnabled",
    StaffMemberIds: "staffMemberIds",
    StartDateTime: "startDateTime",
} as const;
/* tslint:enable */
/* eslint-enable */
