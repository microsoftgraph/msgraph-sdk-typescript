/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createVirtualEventSessionCollectionResponseFromDiscriminatorValue, createVirtualEventSessionFromDiscriminatorValue, serializeVirtualEventSession, type VirtualEventSession, type VirtualEventSessionCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { type VirtualEventSessionItemRequestBuilder, VirtualEventSessionItemRequestBuilderNavigationMetadata, VirtualEventSessionItemRequestBuilderRequestsMetadata } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the sessions property of the microsoft.graph.virtualEvent entity.
 */
export interface SessionsRequestBuilder extends BaseRequestBuilder<SessionsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the sessions property of the microsoft.graph.virtualEvent entity.
     * @param virtualEventSessionId The unique identifier of virtualEventSession
     * @returns {VirtualEventSessionItemRequestBuilder}
     */
     byVirtualEventSessionId(virtualEventSessionId: string) : VirtualEventSessionItemRequestBuilder;
    /**
     * Sessions for the virtual event.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VirtualEventSessionCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SessionsRequestBuilderGetQueryParameters> | undefined) : Promise<VirtualEventSessionCollectionResponse | undefined>;
    /**
     * Create new navigation property to sessions for solutions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<VirtualEventSession>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: VirtualEventSession, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<VirtualEventSession | undefined>;
    /**
     * Sessions for the virtual event.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SessionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to sessions for solutions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: VirtualEventSession, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Sessions for the virtual event.
 */
export interface SessionsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const SessionsRequestBuilderUriTemplate = "{+baseurl}/solutions/virtualEvents/events/{virtualEvent%2Did}/sessions{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the sessions property of the microsoft.graph.virtualEvent entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    AttendanceReports: "attendanceReports",
} as const;
/**
 * Provides operations to manage the sessions property of the microsoft.graph.virtualEvent entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AllowAttendeeToEnableCamera: "allowAttendeeToEnableCamera",
    AllowAttendeeToEnableCameraDesc: "allowAttendeeToEnableCamera desc",
    AllowAttendeeToEnableMic: "allowAttendeeToEnableMic",
    AllowAttendeeToEnableMicDesc: "allowAttendeeToEnableMic desc",
    AllowedPresenters: "allowedPresenters",
    AllowedPresentersDesc: "allowedPresenters desc",
    AllowMeetingChat: "allowMeetingChat",
    AllowMeetingChatDesc: "allowMeetingChat desc",
    AllowParticipantsToChangeName: "allowParticipantsToChangeName",
    AllowParticipantsToChangeNameDesc: "allowParticipantsToChangeName desc",
    AllowTeamworkReactions: "allowTeamworkReactions",
    AllowTeamworkReactionsDesc: "allowTeamworkReactions desc",
    AudioConferencing: "audioConferencing",
    AudioConferencingDesc: "audioConferencing desc",
    ChatInfo: "chatInfo",
    ChatInfoDesc: "chatInfo desc",
    IsEntryExitAnnounced: "isEntryExitAnnounced",
    IsEntryExitAnnouncedDesc: "isEntryExitAnnounced desc",
    JoinInformation: "joinInformation",
    JoinInformationDesc: "joinInformation desc",
    JoinMeetingIdSettings: "joinMeetingIdSettings",
    JoinMeetingIdSettingsDesc: "joinMeetingIdSettings desc",
    JoinWebUrl: "joinWebUrl",
    JoinWebUrlDesc: "joinWebUrl desc",
    LobbyBypassSettings: "lobbyBypassSettings",
    LobbyBypassSettingsDesc: "lobbyBypassSettings desc",
    RecordAutomatically: "recordAutomatically",
    RecordAutomaticallyDesc: "recordAutomatically desc",
    ShareMeetingChatHistoryDefault: "shareMeetingChatHistoryDefault",
    ShareMeetingChatHistoryDefaultDesc: "shareMeetingChatHistoryDefault desc",
    Subject: "subject",
    SubjectDesc: "subject desc",
    VideoTeleconferenceId: "videoTeleconferenceId",
    VideoTeleconferenceIdDesc: "videoTeleconferenceId desc",
    WatermarkProtection: "watermarkProtection",
    WatermarkProtectionDesc: "watermarkProtection desc",
    EndDateTime: "endDateTime",
    EndDateTimeDesc: "endDateTime desc",
    StartDateTime: "startDateTime",
    StartDateTimeDesc: "startDateTime desc",
} as const;
/**
 * Provides operations to manage the sessions property of the microsoft.graph.virtualEvent entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AllowAttendeeToEnableCamera: "allowAttendeeToEnableCamera",
    AllowAttendeeToEnableMic: "allowAttendeeToEnableMic",
    AllowedPresenters: "allowedPresenters",
    AllowMeetingChat: "allowMeetingChat",
    AllowParticipantsToChangeName: "allowParticipantsToChangeName",
    AllowTeamworkReactions: "allowTeamworkReactions",
    AudioConferencing: "audioConferencing",
    ChatInfo: "chatInfo",
    IsEntryExitAnnounced: "isEntryExitAnnounced",
    JoinInformation: "joinInformation",
    JoinMeetingIdSettings: "joinMeetingIdSettings",
    JoinWebUrl: "joinWebUrl",
    LobbyBypassSettings: "lobbyBypassSettings",
    RecordAutomatically: "recordAutomatically",
    ShareMeetingChatHistoryDefault: "shareMeetingChatHistoryDefault",
    Subject: "subject",
    VideoTeleconferenceId: "videoTeleconferenceId",
    WatermarkProtection: "watermarkProtection",
    EndDateTime: "endDateTime",
    StartDateTime: "startDateTime",
    AttendanceReports: "attendanceReports",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SessionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SessionsRequestBuilderNavigationMetadata: Record<Exclude<keyof SessionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byVirtualEventSessionId: {
        requestsMetadata: VirtualEventSessionItemRequestBuilderRequestsMetadata,
        navigationMetadata: VirtualEventSessionItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["virtualEventSession%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SessionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SessionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVirtualEventSessionCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: SessionsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: SessionsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createVirtualEventSessionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeVirtualEventSession,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
