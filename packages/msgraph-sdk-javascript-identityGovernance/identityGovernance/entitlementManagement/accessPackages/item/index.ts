/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAccessPackageFromDiscriminatorValue, serializeAccessPackage, type AccessPackage } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { AccessPackagesIncompatibleWithRequestBuilderNavigationMetadata, AccessPackagesIncompatibleWithRequestBuilderRequestsMetadata, AccessPackagesIncompatibleWithRequestBuilderUriTemplate, type AccessPackagesIncompatibleWithRequestBuilder } from './accessPackagesIncompatibleWith/';
import { AssignmentPoliciesRequestBuilderNavigationMetadata, AssignmentPoliciesRequestBuilderRequestsMetadata, AssignmentPoliciesRequestBuilderUriTemplate, type AssignmentPoliciesRequestBuilder } from './assignmentPolicies/';
import { CatalogRequestBuilderRequestsMetadata, CatalogRequestBuilderUriTemplate, type CatalogRequestBuilder } from './catalog/';
import { GetApplicablePolicyRequirementsRequestBuilderRequestsMetadata, GetApplicablePolicyRequirementsRequestBuilderUriTemplate, type GetApplicablePolicyRequirementsRequestBuilder } from './getApplicablePolicyRequirements/';
import { IncompatibleAccessPackagesRequestBuilderNavigationMetadata, IncompatibleAccessPackagesRequestBuilderRequestsMetadata, IncompatibleAccessPackagesRequestBuilderUriTemplate, type IncompatibleAccessPackagesRequestBuilder } from './incompatibleAccessPackages/';
import { IncompatibleGroupsRequestBuilderNavigationMetadata, IncompatibleGroupsRequestBuilderRequestsMetadata, IncompatibleGroupsRequestBuilderUriTemplate, type IncompatibleGroupsRequestBuilder } from './incompatibleGroups/';
import { ResourceRoleScopesRequestBuilderNavigationMetadata, ResourceRoleScopesRequestBuilderRequestsMetadata, ResourceRoleScopesRequestBuilderUriTemplate, type ResourceRoleScopesRequestBuilder } from './resourceRoleScopes/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the accessPackages property of the microsoft.graph.entitlementManagement entity.
 */
export interface AccessPackageItemRequestBuilder extends BaseRequestBuilder<AccessPackageItemRequestBuilder> {
    /**
     * Provides operations to manage the accessPackagesIncompatibleWith property of the microsoft.graph.accessPackage entity.
     */
    get accessPackagesIncompatibleWith(): AccessPackagesIncompatibleWithRequestBuilder;
    /**
     * Provides operations to manage the assignmentPolicies property of the microsoft.graph.accessPackage entity.
     */
    get assignmentPolicies(): AssignmentPoliciesRequestBuilder;
    /**
     * Provides operations to manage the catalog property of the microsoft.graph.accessPackage entity.
     */
    get catalog(): CatalogRequestBuilder;
    /**
     * Provides operations to call the getApplicablePolicyRequirements method.
     */
    get getApplicablePolicyRequirements(): GetApplicablePolicyRequirementsRequestBuilder;
    /**
     * Provides operations to manage the incompatibleAccessPackages property of the microsoft.graph.accessPackage entity.
     */
    get incompatibleAccessPackages(): IncompatibleAccessPackagesRequestBuilder;
    /**
     * Provides operations to manage the incompatibleGroups property of the microsoft.graph.accessPackage entity.
     */
    get incompatibleGroups(): IncompatibleGroupsRequestBuilder;
    /**
     * Provides operations to manage the resourceRoleScopes property of the microsoft.graph.accessPackage entity.
     */
    get resourceRoleScopes(): ResourceRoleScopesRequestBuilder;
    /**
     * Delete an accessPackage object. You cannot delete an access package if it has any accessPackageAssignment.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @see {@link https://learn.microsoft.com/graph/api/accesspackage-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve an access package with a list of accessPackageResourceRoleScope objects. These objects represent the resource roles that an access package assigns to each subject. Each object links to an accessPackageResourceRole and an accessPackageResourceScope.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccessPackage
     * @see {@link https://learn.microsoft.com/graph/api/accesspackage-list-resourcerolescopes?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<AccessPackageItemRequestBuilderGetQueryParameters> | undefined) : Promise<AccessPackage | undefined>;
    /**
     * Update an existing accessPackage object to change one or more of its properties, such as the display name or description.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccessPackage
     * @see {@link https://learn.microsoft.com/graph/api/accesspackage-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: AccessPackage, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AccessPackage | undefined>;
    /**
     * Delete an accessPackage object. You cannot delete an access package if it has any accessPackageAssignment.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve an access package with a list of accessPackageResourceRoleScope objects. These objects represent the resource roles that an access package assigns to each subject. Each object links to an accessPackageResourceRole and an accessPackageResourceScope.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AccessPackageItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update an existing accessPackage object to change one or more of its properties, such as the display name or description.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: AccessPackage, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve an access package with a list of accessPackageResourceRoleScope objects. These objects represent the resource roles that an access package assigns to each subject. Each object links to an accessPackageResourceRole and an accessPackageResourceScope.
 */
export interface AccessPackageItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AccessPackageItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AccessPackageItemRequestBuilderNavigationMetadata: Record<Exclude<keyof AccessPackageItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accessPackagesIncompatibleWith: {
        uriTemplate: AccessPackagesIncompatibleWithRequestBuilderUriTemplate,
        requestsMetadata: AccessPackagesIncompatibleWithRequestBuilderRequestsMetadata,
        navigationMetadata: AccessPackagesIncompatibleWithRequestBuilderNavigationMetadata,
    },
    assignmentPolicies: {
        uriTemplate: AssignmentPoliciesRequestBuilderUriTemplate,
        requestsMetadata: AssignmentPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: AssignmentPoliciesRequestBuilderNavigationMetadata,
    },
    catalog: {
        uriTemplate: CatalogRequestBuilderUriTemplate,
        requestsMetadata: CatalogRequestBuilderRequestsMetadata,
    },
    getApplicablePolicyRequirements: {
        uriTemplate: GetApplicablePolicyRequirementsRequestBuilderUriTemplate,
        requestsMetadata: GetApplicablePolicyRequirementsRequestBuilderRequestsMetadata,
    },
    incompatibleAccessPackages: {
        uriTemplate: IncompatibleAccessPackagesRequestBuilderUriTemplate,
        requestsMetadata: IncompatibleAccessPackagesRequestBuilderRequestsMetadata,
        navigationMetadata: IncompatibleAccessPackagesRequestBuilderNavigationMetadata,
    },
    incompatibleGroups: {
        uriTemplate: IncompatibleGroupsRequestBuilderUriTemplate,
        requestsMetadata: IncompatibleGroupsRequestBuilderRequestsMetadata,
        navigationMetadata: IncompatibleGroupsRequestBuilderNavigationMetadata,
    },
    resourceRoleScopes: {
        uriTemplate: ResourceRoleScopesRequestBuilderUriTemplate,
        requestsMetadata: ResourceRoleScopesRequestBuilderRequestsMetadata,
        navigationMetadata: ResourceRoleScopesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AccessPackageItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAccessPackageFromDiscriminatorValue,
        queryParametersMapper: AccessPackageItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAccessPackageFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAccessPackage,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const AccessPackageItemRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/entitlementManagement/accessPackages/{accessPackage%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
