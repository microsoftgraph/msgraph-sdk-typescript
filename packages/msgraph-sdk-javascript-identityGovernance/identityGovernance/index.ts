/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createIdentityGovernanceFromDiscriminatorValue, serializeIdentityGovernance, type IdentityGovernance } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { AccessReviewsRequestBuilderNavigationMetadata, AccessReviewsRequestBuilderRequestsMetadata, AccessReviewsRequestBuilderUriTemplate, type AccessReviewsRequestBuilder } from './accessReviews/';
import { AppConsentRequestBuilderNavigationMetadata, AppConsentRequestBuilderRequestsMetadata, AppConsentRequestBuilderUriTemplate, type AppConsentRequestBuilder } from './appConsent/';
import { EntitlementManagementRequestBuilderNavigationMetadata, EntitlementManagementRequestBuilderRequestsMetadata, EntitlementManagementRequestBuilderUriTemplate, type EntitlementManagementRequestBuilder } from './entitlementManagement/';
import { LifecycleWorkflowsRequestBuilderNavigationMetadata, LifecycleWorkflowsRequestBuilderRequestsMetadata, LifecycleWorkflowsRequestBuilderUriTemplate, type LifecycleWorkflowsRequestBuilder } from './lifecycleWorkflows/';
import { PrivilegedAccessRequestBuilderNavigationMetadata, PrivilegedAccessRequestBuilderRequestsMetadata, PrivilegedAccessRequestBuilderUriTemplate, type PrivilegedAccessRequestBuilder } from './privilegedAccess/';
import { TermsOfUseRequestBuilderNavigationMetadata, TermsOfUseRequestBuilderRequestsMetadata, TermsOfUseRequestBuilderUriTemplate, type TermsOfUseRequestBuilder } from './termsOfUse/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the identityGovernance singleton.
 */
export interface IdentityGovernanceRequestBuilder extends BaseRequestBuilder<IdentityGovernanceRequestBuilder> {
    /**
     * Provides operations to manage the accessReviews property of the microsoft.graph.identityGovernance entity.
     */
    get accessReviews(): AccessReviewsRequestBuilder;
    /**
     * Provides operations to manage the appConsent property of the microsoft.graph.identityGovernance entity.
     */
    get appConsent(): AppConsentRequestBuilder;
    /**
     * Provides operations to manage the entitlementManagement property of the microsoft.graph.identityGovernance entity.
     */
    get entitlementManagement(): EntitlementManagementRequestBuilder;
    /**
     * Provides operations to manage the lifecycleWorkflows property of the microsoft.graph.identityGovernance entity.
     */
    get lifecycleWorkflows(): LifecycleWorkflowsRequestBuilder;
    /**
     * Provides operations to manage the privilegedAccess property of the microsoft.graph.identityGovernance entity.
     */
    get privilegedAccess(): PrivilegedAccessRequestBuilder;
    /**
     * Provides operations to manage the termsOfUse property of the microsoft.graph.identityGovernance entity.
     */
    get termsOfUse(): TermsOfUseRequestBuilder;
    /**
     * Get identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of IdentityGovernance
     */
     get(requestConfiguration?: RequestConfiguration<IdentityGovernanceRequestBuilderGetQueryParameters> | undefined) : Promise<IdentityGovernance | undefined>;
    /**
     * Update identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of IdentityGovernance
     */
     patch(body: IdentityGovernance, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<IdentityGovernance | undefined>;
    /**
     * Get identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<IdentityGovernanceRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: IdentityGovernance, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get identityGovernance
 */
export interface IdentityGovernanceRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const IdentityGovernanceRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const IdentityGovernanceRequestBuilderNavigationMetadata: Record<Exclude<keyof IdentityGovernanceRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accessReviews: {
        uriTemplate: AccessReviewsRequestBuilderUriTemplate,
        requestsMetadata: AccessReviewsRequestBuilderRequestsMetadata,
        navigationMetadata: AccessReviewsRequestBuilderNavigationMetadata,
    },
    appConsent: {
        uriTemplate: AppConsentRequestBuilderUriTemplate,
        requestsMetadata: AppConsentRequestBuilderRequestsMetadata,
        navigationMetadata: AppConsentRequestBuilderNavigationMetadata,
    },
    entitlementManagement: {
        uriTemplate: EntitlementManagementRequestBuilderUriTemplate,
        requestsMetadata: EntitlementManagementRequestBuilderRequestsMetadata,
        navigationMetadata: EntitlementManagementRequestBuilderNavigationMetadata,
    },
    lifecycleWorkflows: {
        uriTemplate: LifecycleWorkflowsRequestBuilderUriTemplate,
        requestsMetadata: LifecycleWorkflowsRequestBuilderRequestsMetadata,
        navigationMetadata: LifecycleWorkflowsRequestBuilderNavigationMetadata,
    },
    privilegedAccess: {
        uriTemplate: PrivilegedAccessRequestBuilderUriTemplate,
        requestsMetadata: PrivilegedAccessRequestBuilderRequestsMetadata,
        navigationMetadata: PrivilegedAccessRequestBuilderNavigationMetadata,
    },
    termsOfUse: {
        uriTemplate: TermsOfUseRequestBuilderUriTemplate,
        requestsMetadata: TermsOfUseRequestBuilderRequestsMetadata,
        navigationMetadata: TermsOfUseRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const IdentityGovernanceRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createIdentityGovernanceFromDiscriminatorValue,
        queryParametersMapper: IdentityGovernanceRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createIdentityGovernanceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeIdentityGovernance,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const IdentityGovernanceRequestBuilderUriTemplate = "{+baseurl}/identityGovernance{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
