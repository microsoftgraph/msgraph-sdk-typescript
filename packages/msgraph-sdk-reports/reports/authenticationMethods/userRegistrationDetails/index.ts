/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createUserRegistrationDetailsCollectionResponseFromDiscriminatorValue, createUserRegistrationDetailsFromDiscriminatorValue, serializeUserRegistrationDetails, type UserRegistrationDetails, type UserRegistrationDetailsCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { type UserRegistrationDetailsItemRequestBuilder, UserRegistrationDetailsItemRequestBuilderRequestsMetadata } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the userRegistrationDetails property of the microsoft.graph.authenticationMethodsRoot entity.
 */
export interface UserRegistrationDetailsRequestBuilder extends BaseRequestBuilder<UserRegistrationDetailsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the userRegistrationDetails property of the microsoft.graph.authenticationMethodsRoot entity.
     * @param userRegistrationDetailsId The unique identifier of userRegistrationDetails
     * @returns {UserRegistrationDetailsItemRequestBuilder}
     */
     byUserRegistrationDetailsId(userRegistrationDetailsId: string) : UserRegistrationDetailsItemRequestBuilder;
    /**
     * Get a list of the authentication methods registered for a user as defined in the userRegistrationDetails object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UserRegistrationDetailsCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/authenticationmethodsroot-list-userregistrationdetails?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<UserRegistrationDetailsRequestBuilderGetQueryParameters> | undefined) : Promise<UserRegistrationDetailsCollectionResponse | undefined>;
    /**
     * Create new navigation property to userRegistrationDetails for reports
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<UserRegistrationDetails>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: UserRegistrationDetails, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<UserRegistrationDetails | undefined>;
    /**
     * Get a list of the authentication methods registered for a user as defined in the userRegistrationDetails object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<UserRegistrationDetailsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to userRegistrationDetails for reports
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: UserRegistrationDetails, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get a list of the authentication methods registered for a user as defined in the userRegistrationDetails object.
 */
export interface UserRegistrationDetailsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const UserRegistrationDetailsRequestBuilderUriTemplate = "{+baseurl}/reports/authenticationMethods/userRegistrationDetails{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the userRegistrationDetails property of the microsoft.graph.authenticationMethodsRoot entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the userRegistrationDetails property of the microsoft.graph.authenticationMethodsRoot entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    IsAdmin: "isAdmin",
    IsAdminDesc: "isAdmin desc",
    IsMfaCapable: "isMfaCapable",
    IsMfaCapableDesc: "isMfaCapable desc",
    IsMfaRegistered: "isMfaRegistered",
    IsMfaRegisteredDesc: "isMfaRegistered desc",
    IsPasswordlessCapable: "isPasswordlessCapable",
    IsPasswordlessCapableDesc: "isPasswordlessCapable desc",
    IsSsprCapable: "isSsprCapable",
    IsSsprCapableDesc: "isSsprCapable desc",
    IsSsprEnabled: "isSsprEnabled",
    IsSsprEnabledDesc: "isSsprEnabled desc",
    IsSsprRegistered: "isSsprRegistered",
    IsSsprRegisteredDesc: "isSsprRegistered desc",
    IsSystemPreferredAuthenticationMethodEnabled: "isSystemPreferredAuthenticationMethodEnabled",
    IsSystemPreferredAuthenticationMethodEnabledDesc: "isSystemPreferredAuthenticationMethodEnabled desc",
    LastUpdatedDateTime: "lastUpdatedDateTime",
    LastUpdatedDateTimeDesc: "lastUpdatedDateTime desc",
    MethodsRegistered: "methodsRegistered",
    MethodsRegisteredDesc: "methodsRegistered desc",
    SystemPreferredAuthenticationMethods: "systemPreferredAuthenticationMethods",
    SystemPreferredAuthenticationMethodsDesc: "systemPreferredAuthenticationMethods desc",
    UserDisplayName: "userDisplayName",
    UserDisplayNameDesc: "userDisplayName desc",
    UserPreferredMethodForSecondaryAuthentication: "userPreferredMethodForSecondaryAuthentication",
    UserPreferredMethodForSecondaryAuthenticationDesc: "userPreferredMethodForSecondaryAuthentication desc",
    UserPrincipalName: "userPrincipalName",
    UserPrincipalNameDesc: "userPrincipalName desc",
    UserType: "userType",
    UserTypeDesc: "userType desc",
} as const;
/**
 * Provides operations to manage the userRegistrationDetails property of the microsoft.graph.authenticationMethodsRoot entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    IsAdmin: "isAdmin",
    IsMfaCapable: "isMfaCapable",
    IsMfaRegistered: "isMfaRegistered",
    IsPasswordlessCapable: "isPasswordlessCapable",
    IsSsprCapable: "isSsprCapable",
    IsSsprEnabled: "isSsprEnabled",
    IsSsprRegistered: "isSsprRegistered",
    IsSystemPreferredAuthenticationMethodEnabled: "isSystemPreferredAuthenticationMethodEnabled",
    LastUpdatedDateTime: "lastUpdatedDateTime",
    MethodsRegistered: "methodsRegistered",
    SystemPreferredAuthenticationMethods: "systemPreferredAuthenticationMethods",
    UserDisplayName: "userDisplayName",
    UserPreferredMethodForSecondaryAuthentication: "userPreferredMethodForSecondaryAuthentication",
    UserPrincipalName: "userPrincipalName",
    UserType: "userType",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const UserRegistrationDetailsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const UserRegistrationDetailsRequestBuilderNavigationMetadata: Record<Exclude<keyof UserRegistrationDetailsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byUserRegistrationDetailsId: {
        requestsMetadata: UserRegistrationDetailsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["userRegistrationDetails%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const UserRegistrationDetailsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: UserRegistrationDetailsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUserRegistrationDetailsCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: UserRegistrationDetailsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: UserRegistrationDetailsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createUserRegistrationDetailsFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUserRegistrationDetails,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
