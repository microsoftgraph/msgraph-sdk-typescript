/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createOnenoteOperationFromDiscriminatorValue, serializeOnenoteOperation, type OnenoteOperation } from '@microsoft/msgraph-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CopyToSectionPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The groupId property
     */
    groupId?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The siteCollectionId property
     */
    siteCollectionId?: string | null;
    /**
     * The siteId property
     */
    siteId?: string | null;
}
/**
 * Provides operations to call the copyToSection method.
 */
export interface CopyToSectionRequestBuilder extends BaseRequestBuilder<CopyToSectionRequestBuilder> {
    /**
     * Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<OnenoteOperation>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/page-copytosection?view=graph-rest-1.0|Find more info here}
     */
     post(body: CopyToSectionPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<OnenoteOperation | undefined>;
    /**
     * Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CopyToSectionPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CopyToSectionPostRequestBody}
 */
// @ts-ignore
export function createCopyToSectionPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCopyToSectionPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @param CopyToSectionPostRequestBody The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCopyToSectionPostRequestBody(copyToSectionPostRequestBody: Partial<CopyToSectionPostRequestBody> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { copyToSectionPostRequestBody.backingStoreEnabled = true; },
        "groupId": n => { copyToSectionPostRequestBody.groupId = n.getStringValue(); },
        "id": n => { copyToSectionPostRequestBody.id = n.getStringValue(); },
        "siteCollectionId": n => { copyToSectionPostRequestBody.siteCollectionId = n.getStringValue(); },
        "siteId": n => { copyToSectionPostRequestBody.siteId = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param CopyToSectionPostRequestBody The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCopyToSectionPostRequestBody(writer: SerializationWriter, copyToSectionPostRequestBody: Partial<CopyToSectionPostRequestBody> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!copyToSectionPostRequestBody || isSerializingDerivedType) { return; }
    writer.writeStringValue("groupId", copyToSectionPostRequestBody.groupId);
    writer.writeStringValue("id", copyToSectionPostRequestBody.id);
    writer.writeStringValue("siteCollectionId", copyToSectionPostRequestBody.siteCollectionId);
    writer.writeStringValue("siteId", copyToSectionPostRequestBody.siteId);
    writer.writeAdditionalData(copyToSectionPostRequestBody.additionalData);
}
/**
 * Uri template for the request builder.
 */
export const CopyToSectionRequestBuilderUriTemplate = "{+baseurl}/sites/{site%2Did}/onenote/notebooks/{notebook%2Did}/sections/{onenoteSection%2Did}/pages/{onenotePage%2Did}/copyToSection";
/**
 * Metadata for all the requests in the request builder.
 */
export const CopyToSectionRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: CopyToSectionRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createOnenoteOperationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCopyToSectionPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
