/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createContentTypeFromDiscriminatorValue, type ContentType } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the baseTypes property of the microsoft.graph.contentType entity.
 */
export interface ContentTypeItemRequestBuilder extends BaseRequestBuilder<ContentTypeItemRequestBuilder> {
    /**
     * The collection of content types that are ancestors of this content type.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ContentType>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ContentTypeItemRequestBuilderGetQueryParameters> | undefined) : Promise<ContentType | undefined>;
    /**
     * The collection of content types that are ancestors of this content type.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ContentTypeItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * The collection of content types that are ancestors of this content type.
 */
export interface ContentTypeItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const ContentTypeItemRequestBuilderUriTemplate = "{+baseurl}/sites/{site%2Did}/contentTypes/{contentType%2Did}/baseTypes/{contentType%2Did1}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ContentTypeItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ContentTypeItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ContentTypeItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createContentTypeFromDiscriminatorValue,
        queryParametersMapper: ContentTypeItemRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to manage the baseTypes property of the microsoft.graph.contentType entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Base: "base",
    BaseTypes: "baseTypes",
    ColumnLinks: "columnLinks",
    ColumnPositions: "columnPositions",
    Columns: "columns",
} as const;
/**
 * Provides operations to manage the baseTypes property of the microsoft.graph.contentType entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AssociatedHubsUrls: "associatedHubsUrls",
    Description: "description",
    DocumentSet: "documentSet",
    DocumentTemplate: "documentTemplate",
    Group: "group",
    Hidden: "hidden",
    InheritedFrom: "inheritedFrom",
    IsBuiltIn: "isBuiltIn",
    Name: "name",
    Order: "order",
    ParentId: "parentId",
    PropagateChanges: "propagateChanges",
    ReadOnly: "readOnly",
    Sealed: "sealed",
    Base: "base",
    BaseTypes: "baseTypes",
    ColumnLinks: "columnLinks",
    ColumnPositions: "columnPositions",
    Columns: "columns",
} as const;
/* tslint:enable */
/* eslint-enable */
