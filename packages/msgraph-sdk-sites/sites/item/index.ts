/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSiteFromDiscriminatorValue, serializeSite, type Site } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { AnalyticsRequestBuilderNavigationMetadata, AnalyticsRequestBuilderRequestsMetadata, type AnalyticsRequestBuilder } from './analytics/';
import { ColumnsRequestBuilderNavigationMetadata, ColumnsRequestBuilderRequestsMetadata, type ColumnsRequestBuilder } from './columns/';
import { ContentTypesRequestBuilderNavigationMetadata, ContentTypesRequestBuilderRequestsMetadata, type ContentTypesRequestBuilder } from './contentTypes/';
import { CreatedByUserRequestBuilderNavigationMetadata, CreatedByUserRequestBuilderRequestsMetadata, type CreatedByUserRequestBuilder } from './createdByUser/';
import { DriveRequestBuilderRequestsMetadata, type DriveRequestBuilder } from './drive/';
import { DrivesRequestBuilderNavigationMetadata, DrivesRequestBuilderRequestsMetadata, type DrivesRequestBuilder } from './drives/';
import { ExternalColumnsRequestBuilderNavigationMetadata, ExternalColumnsRequestBuilderRequestsMetadata, type ExternalColumnsRequestBuilder } from './externalColumns/';
import { GetActivitiesByIntervalRequestBuilderRequestsMetadata, type GetActivitiesByIntervalRequestBuilder } from './getActivitiesByInterval/';
import { GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilderRequestsMetadata, type GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder } from './getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval/';
import { GetApplicableContentTypesForListWithListIdRequestBuilderRequestsMetadata, type GetApplicableContentTypesForListWithListIdRequestBuilder } from './getApplicableContentTypesForListWithListId/';
import { GetByPathWithPathRequestBuilderNavigationMetadata, GetByPathWithPathRequestBuilderRequestsMetadata, type GetByPathWithPathRequestBuilder } from './getByPathWithPath/';
import { ItemsRequestBuilderNavigationMetadata, ItemsRequestBuilderRequestsMetadata, type ItemsRequestBuilder } from './items/';
import { LastModifiedByUserRequestBuilderNavigationMetadata, LastModifiedByUserRequestBuilderRequestsMetadata, type LastModifiedByUserRequestBuilder } from './lastModifiedByUser/';
import { ListsRequestBuilderNavigationMetadata, ListsRequestBuilderRequestsMetadata, type ListsRequestBuilder } from './lists/';
import { OnenoteRequestBuilderNavigationMetadata, OnenoteRequestBuilderRequestsMetadata, type OnenoteRequestBuilder } from './onenote/';
import { OperationsRequestBuilderNavigationMetadata, OperationsRequestBuilderRequestsMetadata, type OperationsRequestBuilder } from './operations/';
import { PermissionsRequestBuilderNavigationMetadata, PermissionsRequestBuilderRequestsMetadata, type PermissionsRequestBuilder } from './permissions/';
import { SitesRequestBuilderNavigationMetadata, SitesRequestBuilderRequestsMetadata, type SitesRequestBuilder } from './sites/';
import { TermStoreRequestBuilderNavigationMetadata, TermStoreRequestBuilderRequestsMetadata, type TermStoreRequestBuilder } from './termStore/';
import { TermStoresRequestBuilderNavigationMetadata, TermStoresRequestBuilderRequestsMetadata, type TermStoresRequestBuilder } from './termStores/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of site entities.
 */
export interface SiteItemRequestBuilder extends BaseRequestBuilder<SiteItemRequestBuilder> {
    /**
     * Provides operations to manage the analytics property of the microsoft.graph.site entity.
     */
    get analytics(): AnalyticsRequestBuilder;
    /**
     * Provides operations to manage the columns property of the microsoft.graph.site entity.
     */
    get columns(): ColumnsRequestBuilder;
    /**
     * Provides operations to manage the contentTypes property of the microsoft.graph.site entity.
     */
    get contentTypes(): ContentTypesRequestBuilder;
    /**
     * Provides operations to manage the createdByUser property of the microsoft.graph.baseItem entity.
     */
    get createdByUser(): CreatedByUserRequestBuilder;
    /**
     * Provides operations to manage the drive property of the microsoft.graph.site entity.
     */
    get drive(): DriveRequestBuilder;
    /**
     * Provides operations to manage the drives property of the microsoft.graph.site entity.
     */
    get drives(): DrivesRequestBuilder;
    /**
     * Provides operations to manage the externalColumns property of the microsoft.graph.site entity.
     */
    get externalColumns(): ExternalColumnsRequestBuilder;
    /**
     * Provides operations to call the getActivitiesByInterval method.
     */
    get getActivitiesByInterval(): GetActivitiesByIntervalRequestBuilder;
    /**
     * Provides operations to manage the items property of the microsoft.graph.site entity.
     */
    get items(): ItemsRequestBuilder;
    /**
     * Provides operations to manage the lastModifiedByUser property of the microsoft.graph.baseItem entity.
     */
    get lastModifiedByUser(): LastModifiedByUserRequestBuilder;
    /**
     * Provides operations to manage the lists property of the microsoft.graph.site entity.
     */
    get lists(): ListsRequestBuilder;
    /**
     * Provides operations to manage the onenote property of the microsoft.graph.site entity.
     */
    get onenote(): OnenoteRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.site entity.
     */
    get operations(): OperationsRequestBuilder;
    /**
     * Provides operations to manage the permissions property of the microsoft.graph.site entity.
     */
    get permissions(): PermissionsRequestBuilder;
    /**
     * Provides operations to manage the sites property of the microsoft.graph.site entity.
     */
    get sites(): SitesRequestBuilder;
    /**
     * Provides operations to manage the termStore property of the microsoft.graph.site entity.
     */
    get termStore(): TermStoreRequestBuilder;
    /**
     * Provides operations to manage the termStores property of the microsoft.graph.site entity.
     */
    get termStores(): TermStoresRequestBuilder;
    /**
     * Retrieve properties and relationships for a [site][] resource.A site resource represents a team site in SharePoint.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Site>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/site-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<SiteItemRequestBuilderGetQueryParameters> | undefined) : Promise<Site | undefined>;
    /**
     * Provides operations to call the getActivitiesByInterval method.
     * @param endDateTime Usage: endDateTime='{endDateTime}'
     * @param interval Usage: interval='{interval}'
     * @param startDateTime Usage: startDateTime='{startDateTime}'
     * @returns {GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder}
     */
     getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval(endDateTime: string | undefined, interval: string | undefined, startDateTime: string | undefined) : GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilder;
    /**
     * Provides operations to call the getApplicableContentTypesForList method.
     * @param listId Usage: listId='{listId}'
     * @returns {GetApplicableContentTypesForListWithListIdRequestBuilder}
     */
     getApplicableContentTypesForListWithListId(listId: string | undefined) : GetApplicableContentTypesForListWithListIdRequestBuilder;
    /**
     * Provides operations to call the getByPath method.
     * @param path Usage: path='{path}'
     * @returns {GetByPathWithPathRequestBuilder}
     */
     getByPathWithPath(path: string | undefined) : GetByPathWithPathRequestBuilder;
    /**
     * Update entity in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Site>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Site, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Site | undefined>;
    /**
     * Retrieve properties and relationships for a [site][] resource.A site resource represents a team site in SharePoint.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SiteItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update entity in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Site, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve properties and relationships for a [site][] resource.A site resource represents a team site in SharePoint.
 */
export interface SiteItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const SiteItemRequestBuilderUriTemplate = "{+baseurl}/sites/{site%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SiteItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SiteItemRequestBuilderNavigationMetadata: Record<Exclude<keyof SiteItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    getActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithInterval: {
        requestsMetadata: GetActivitiesByIntervalWithStartDateTimeWithEndDateTimeWithIntervalRequestBuilderRequestsMetadata,
    },
    getApplicableContentTypesForListWithListId: {
        requestsMetadata: GetApplicableContentTypesForListWithListIdRequestBuilderRequestsMetadata,
    },
    getByPathWithPath: {
        requestsMetadata: GetByPathWithPathRequestBuilderRequestsMetadata,
        navigationMetadata: GetByPathWithPathRequestBuilderNavigationMetadata,
    },
    analytics: {
        requestsMetadata: AnalyticsRequestBuilderRequestsMetadata,
        navigationMetadata: AnalyticsRequestBuilderNavigationMetadata,
    },
    columns: {
        requestsMetadata: ColumnsRequestBuilderRequestsMetadata,
        navigationMetadata: ColumnsRequestBuilderNavigationMetadata,
    },
    contentTypes: {
        requestsMetadata: ContentTypesRequestBuilderRequestsMetadata,
        navigationMetadata: ContentTypesRequestBuilderNavigationMetadata,
    },
    createdByUser: {
        requestsMetadata: CreatedByUserRequestBuilderRequestsMetadata,
        navigationMetadata: CreatedByUserRequestBuilderNavigationMetadata,
    },
    drive: {
        requestsMetadata: DriveRequestBuilderRequestsMetadata,
    },
    drives: {
        requestsMetadata: DrivesRequestBuilderRequestsMetadata,
        navigationMetadata: DrivesRequestBuilderNavigationMetadata,
    },
    externalColumns: {
        requestsMetadata: ExternalColumnsRequestBuilderRequestsMetadata,
        navigationMetadata: ExternalColumnsRequestBuilderNavigationMetadata,
    },
    getActivitiesByInterval: {
        requestsMetadata: GetActivitiesByIntervalRequestBuilderRequestsMetadata,
    },
    items: {
        requestsMetadata: ItemsRequestBuilderRequestsMetadata,
        navigationMetadata: ItemsRequestBuilderNavigationMetadata,
    },
    lastModifiedByUser: {
        requestsMetadata: LastModifiedByUserRequestBuilderRequestsMetadata,
        navigationMetadata: LastModifiedByUserRequestBuilderNavigationMetadata,
    },
    lists: {
        requestsMetadata: ListsRequestBuilderRequestsMetadata,
        navigationMetadata: ListsRequestBuilderNavigationMetadata,
    },
    onenote: {
        requestsMetadata: OnenoteRequestBuilderRequestsMetadata,
        navigationMetadata: OnenoteRequestBuilderNavigationMetadata,
    },
    operations: {
        requestsMetadata: OperationsRequestBuilderRequestsMetadata,
        navigationMetadata: OperationsRequestBuilderNavigationMetadata,
    },
    permissions: {
        requestsMetadata: PermissionsRequestBuilderRequestsMetadata,
        navigationMetadata: PermissionsRequestBuilderNavigationMetadata,
    },
    sites: {
        requestsMetadata: SitesRequestBuilderRequestsMetadata,
        navigationMetadata: SitesRequestBuilderNavigationMetadata,
    },
    termStore: {
        requestsMetadata: TermStoreRequestBuilderRequestsMetadata,
        navigationMetadata: TermStoreRequestBuilderNavigationMetadata,
    },
    termStores: {
        requestsMetadata: TermStoresRequestBuilderRequestsMetadata,
        navigationMetadata: TermStoresRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SiteItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: SiteItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSiteFromDiscriminatorValue,
        queryParametersMapper: SiteItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: SiteItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSiteFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSite,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
