/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { createSetFromDiscriminatorValue, serializeSet, type Set } from '@microsoft/msgraph-sdk/models/termStore/';
import { ChildrenRequestBuilderNavigationMetadata, ChildrenRequestBuilderRequestsMetadata, type ChildrenRequestBuilder } from './children/';
import { ParentGroupRequestBuilderRequestsMetadata, type ParentGroupRequestBuilder } from './parentGroup/';
import { RelationsRequestBuilderNavigationMetadata, RelationsRequestBuilderRequestsMetadata, type RelationsRequestBuilder } from './relations/';
import { TermsRequestBuilderNavigationMetadata, TermsRequestBuilderRequestsMetadata, type TermsRequestBuilder } from './terms/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the sets property of the microsoft.graph.termStore.group entity.
 */
export interface SetItemRequestBuilder extends BaseRequestBuilder<SetItemRequestBuilder> {
    /**
     * Provides operations to manage the children property of the microsoft.graph.termStore.set entity.
     */
    get children(): ChildrenRequestBuilder;
    /**
     * Provides operations to manage the parentGroup property of the microsoft.graph.termStore.set entity.
     */
    get parentGroup(): ParentGroupRequestBuilder;
    /**
     * Provides operations to manage the relations property of the microsoft.graph.termStore.set entity.
     */
    get relations(): RelationsRequestBuilder;
    /**
     * Provides operations to manage the terms property of the microsoft.graph.termStore.set entity.
     */
    get terms(): TermsRequestBuilder;
    /**
     * Delete navigation property sets for sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * All sets under the group in a term [store].
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Set>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SetItemRequestBuilderGetQueryParameters> | undefined) : Promise<Set | undefined>;
    /**
     * Update the navigation property sets in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Set>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Set, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Set | undefined>;
    /**
     * Delete navigation property sets for sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * All sets under the group in a term [store].
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SetItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property sets in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Set, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * All sets under the group in a term [store].
 */
export interface SetItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const SetItemRequestBuilderUriTemplate = "{+baseurl}/sites/{site%2Did}/termStore/groups/{group%2Did}/sets/{set%2Did}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SetItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SetItemRequestBuilderNavigationMetadata: Record<Exclude<keyof SetItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    children: {
        requestsMetadata: ChildrenRequestBuilderRequestsMetadata,
        navigationMetadata: ChildrenRequestBuilderNavigationMetadata,
    },
    parentGroup: {
        requestsMetadata: ParentGroupRequestBuilderRequestsMetadata,
    },
    relations: {
        requestsMetadata: RelationsRequestBuilderRequestsMetadata,
        navigationMetadata: RelationsRequestBuilderNavigationMetadata,
    },
    terms: {
        requestsMetadata: TermsRequestBuilderRequestsMetadata,
        navigationMetadata: TermsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SetItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: SetItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: SetItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSetFromDiscriminatorValue,
        queryParametersMapper: SetItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: SetItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSetFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSet,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
