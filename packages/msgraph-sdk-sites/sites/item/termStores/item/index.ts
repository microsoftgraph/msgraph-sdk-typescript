/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { createStoreFromDiscriminatorValue, serializeStore, type Store } from '@microsoft/msgraph-sdk/models/termStore/';
import { GroupsRequestBuilderNavigationMetadata, GroupsRequestBuilderRequestsMetadata, type GroupsRequestBuilder } from './groups/';
import { SetsRequestBuilderNavigationMetadata, SetsRequestBuilderRequestsMetadata, type SetsRequestBuilder } from './sets/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the termStores property of the microsoft.graph.site entity.
 */
export interface StoreItemRequestBuilder extends BaseRequestBuilder<StoreItemRequestBuilder> {
    /**
     * Provides operations to manage the groups property of the microsoft.graph.termStore.store entity.
     */
    get groups(): GroupsRequestBuilder;
    /**
     * Provides operations to manage the sets property of the microsoft.graph.termStore.store entity.
     */
    get sets(): SetsRequestBuilder;
    /**
     * Delete navigation property termStores for sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The collection of termStores under this site.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Store>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<StoreItemRequestBuilderGetQueryParameters> | undefined) : Promise<Store | undefined>;
    /**
     * Update the navigation property termStores in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Store>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Store, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Store | undefined>;
    /**
     * Delete navigation property termStores for sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The collection of termStores under this site.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<StoreItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property termStores in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Store, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The collection of termStores under this site.
 */
export interface StoreItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
}
/**
 * Uri template for the request builder.
 */
export const StoreItemRequestBuilderUriTemplate = "{+baseurl}/sites/{site%2Did}/termStores/{store%2Did}{?%24expand,%24select}";
/**
 * Provides operations to manage the termStores property of the microsoft.graph.site entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Groups: "groups",
    Sets: "sets",
} as const;
/**
 * Provides operations to manage the termStores property of the microsoft.graph.site entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    DefaultLanguageTag: "defaultLanguageTag",
    LanguageTags: "languageTags",
    Groups: "groups",
    Sets: "sets",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const StoreItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const StoreItemRequestBuilderNavigationMetadata: Record<Exclude<keyof StoreItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    groups: {
        requestsMetadata: GroupsRequestBuilderRequestsMetadata,
        navigationMetadata: GroupsRequestBuilderNavigationMetadata,
    },
    sets: {
        requestsMetadata: SetsRequestBuilderRequestsMetadata,
        navigationMetadata: SetsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const StoreItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: StoreItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: StoreItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createStoreFromDiscriminatorValue,
        queryParametersMapper: StoreItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: StoreItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createStoreFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeStore,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
