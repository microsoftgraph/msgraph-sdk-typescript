/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createRbacApplicationFromDiscriminatorValue, serializeRbacApplication, type RbacApplication } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { ResourceNamespacesRequestBuilderNavigationMetadata, ResourceNamespacesRequestBuilderRequestsMetadata, type ResourceNamespacesRequestBuilder } from './resourceNamespaces/';
// @ts-ignore
import { RoleAssignmentsRequestBuilderNavigationMetadata, RoleAssignmentsRequestBuilderRequestsMetadata, type RoleAssignmentsRequestBuilder } from './roleAssignments/';
// @ts-ignore
import { RoleAssignmentScheduleInstancesRequestBuilderNavigationMetadata, RoleAssignmentScheduleInstancesRequestBuilderRequestsMetadata, type RoleAssignmentScheduleInstancesRequestBuilder } from './roleAssignmentScheduleInstances/';
// @ts-ignore
import { RoleAssignmentScheduleRequestsRequestBuilderNavigationMetadata, RoleAssignmentScheduleRequestsRequestBuilderRequestsMetadata, type RoleAssignmentScheduleRequestsRequestBuilder } from './roleAssignmentScheduleRequests/';
// @ts-ignore
import { RoleAssignmentSchedulesRequestBuilderNavigationMetadata, RoleAssignmentSchedulesRequestBuilderRequestsMetadata, type RoleAssignmentSchedulesRequestBuilder } from './roleAssignmentSchedules/';
// @ts-ignore
import { RoleDefinitionsRequestBuilderNavigationMetadata, RoleDefinitionsRequestBuilderRequestsMetadata, type RoleDefinitionsRequestBuilder } from './roleDefinitions/';
// @ts-ignore
import { RoleEligibilityScheduleInstancesRequestBuilderNavigationMetadata, RoleEligibilityScheduleInstancesRequestBuilderRequestsMetadata, type RoleEligibilityScheduleInstancesRequestBuilder } from './roleEligibilityScheduleInstances/';
// @ts-ignore
import { RoleEligibilityScheduleRequestsRequestBuilderNavigationMetadata, RoleEligibilityScheduleRequestsRequestBuilderRequestsMetadata, type RoleEligibilityScheduleRequestsRequestBuilder } from './roleEligibilityScheduleRequests/';
// @ts-ignore
import { RoleEligibilitySchedulesRequestBuilderNavigationMetadata, RoleEligibilitySchedulesRequestBuilderRequestsMetadata, type RoleEligibilitySchedulesRequestBuilder } from './roleEligibilitySchedules/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the directory property of the microsoft.graph.roleManagement entity.
 */
export interface DirectoryRequestBuilder extends BaseRequestBuilder<DirectoryRequestBuilder> {
    /**
     * Provides operations to manage the resourceNamespaces property of the microsoft.graph.rbacApplication entity.
     */
    get resourceNamespaces(): ResourceNamespacesRequestBuilder;
    /**
     * Provides operations to manage the roleAssignments property of the microsoft.graph.rbacApplication entity.
     */
    get roleAssignments(): RoleAssignmentsRequestBuilder;
    /**
     * Provides operations to manage the roleAssignmentScheduleInstances property of the microsoft.graph.rbacApplication entity.
     */
    get roleAssignmentScheduleInstances(): RoleAssignmentScheduleInstancesRequestBuilder;
    /**
     * Provides operations to manage the roleAssignmentScheduleRequests property of the microsoft.graph.rbacApplication entity.
     */
    get roleAssignmentScheduleRequests(): RoleAssignmentScheduleRequestsRequestBuilder;
    /**
     * Provides operations to manage the roleAssignmentSchedules property of the microsoft.graph.rbacApplication entity.
     */
    get roleAssignmentSchedules(): RoleAssignmentSchedulesRequestBuilder;
    /**
     * Provides operations to manage the roleDefinitions property of the microsoft.graph.rbacApplication entity.
     */
    get roleDefinitions(): RoleDefinitionsRequestBuilder;
    /**
     * Provides operations to manage the roleEligibilityScheduleInstances property of the microsoft.graph.rbacApplication entity.
     */
    get roleEligibilityScheduleInstances(): RoleEligibilityScheduleInstancesRequestBuilder;
    /**
     * Provides operations to manage the roleEligibilityScheduleRequests property of the microsoft.graph.rbacApplication entity.
     */
    get roleEligibilityScheduleRequests(): RoleEligibilityScheduleRequestsRequestBuilder;
    /**
     * Provides operations to manage the roleEligibilitySchedules property of the microsoft.graph.rbacApplication entity.
     */
    get roleEligibilitySchedules(): RoleEligibilitySchedulesRequestBuilder;
    /**
     * Delete navigation property directory for roleManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get directory from roleManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RbacApplication>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DirectoryRequestBuilderGetQueryParameters> | undefined) : Promise<RbacApplication | undefined>;
    /**
     * Update the navigation property directory in roleManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RbacApplication>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: RbacApplication, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<RbacApplication | undefined>;
    /**
     * Delete navigation property directory for roleManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get directory from roleManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DirectoryRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property directory in roleManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: RbacApplication, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get directory from roleManagement
 */
export interface DirectoryRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const DirectoryRequestBuilderUriTemplate = "{+baseurl}/roleManagement/directory{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DirectoryRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DirectoryRequestBuilderNavigationMetadata: Record<Exclude<keyof DirectoryRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    resourceNamespaces: {
        requestsMetadata: ResourceNamespacesRequestBuilderRequestsMetadata,
        navigationMetadata: ResourceNamespacesRequestBuilderNavigationMetadata,
    },
    roleAssignments: {
        requestsMetadata: RoleAssignmentsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleAssignmentsRequestBuilderNavigationMetadata,
    },
    roleAssignmentScheduleInstances: {
        requestsMetadata: RoleAssignmentScheduleInstancesRequestBuilderRequestsMetadata,
        navigationMetadata: RoleAssignmentScheduleInstancesRequestBuilderNavigationMetadata,
    },
    roleAssignmentScheduleRequests: {
        requestsMetadata: RoleAssignmentScheduleRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleAssignmentScheduleRequestsRequestBuilderNavigationMetadata,
    },
    roleAssignmentSchedules: {
        requestsMetadata: RoleAssignmentSchedulesRequestBuilderRequestsMetadata,
        navigationMetadata: RoleAssignmentSchedulesRequestBuilderNavigationMetadata,
    },
    roleDefinitions: {
        requestsMetadata: RoleDefinitionsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleDefinitionsRequestBuilderNavigationMetadata,
    },
    roleEligibilityScheduleInstances: {
        requestsMetadata: RoleEligibilityScheduleInstancesRequestBuilderRequestsMetadata,
        navigationMetadata: RoleEligibilityScheduleInstancesRequestBuilderNavigationMetadata,
    },
    roleEligibilityScheduleRequests: {
        requestsMetadata: RoleEligibilityScheduleRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleEligibilityScheduleRequestsRequestBuilderNavigationMetadata,
    },
    roleEligibilitySchedules: {
        requestsMetadata: RoleEligibilitySchedulesRequestBuilderRequestsMetadata,
        navigationMetadata: RoleEligibilitySchedulesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DirectoryRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: DirectoryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: DirectoryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRbacApplicationFromDiscriminatorValue,
        queryParametersMapper: DirectoryRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: DirectoryRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRbacApplicationFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRbacApplication,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
