/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDriveCollectionResponseFromDiscriminatorValue, type DriveCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DriveItemRequestBuilderRequestsMetadata, type DriveItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the drives property of the microsoft.graph.group entity.
 */
export interface DrivesRequestBuilder extends BaseRequestBuilder<DrivesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the drives property of the microsoft.graph.group entity.
     * @param driveId The unique identifier of drive
     * @returns {DriveItemRequestBuilder}
     */
     byDriveId(driveId: string) : DriveItemRequestBuilder;
    /**
     * The group's drives. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<DriveCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<DrivesRequestBuilderGetQueryParameters> | undefined) : Promise<DriveCollectionResponse | undefined>;
    /**
     * The group's drives. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DrivesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * The group's drives. Read-only.
 */
export interface DrivesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const DrivesRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/drives{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DrivesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DrivesRequestBuilderNavigationMetadata: Record<Exclude<keyof DrivesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byDriveId: {
        requestsMetadata: DriveItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["drive%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DrivesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: DrivesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createDriveCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: DrivesRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to manage the drives property of the microsoft.graph.group entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    CreatedByUser: "createdByUser",
    LastModifiedByUser: "lastModifiedByUser",
    Bundles: "bundles",
    Following: "following",
    Items: "items",
    List: "list",
    Root: "root",
    Special: "special",
} as const;
/**
 * Provides operations to manage the drives property of the microsoft.graph.group entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    CreatedBy: "createdBy",
    CreatedByDesc: "createdBy desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    Description: "description",
    DescriptionDesc: "description desc",
    ETag: "eTag",
    ETagDesc: "eTag desc",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedByDesc: "lastModifiedBy desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    Name: "name",
    NameDesc: "name desc",
    ParentReference: "parentReference",
    ParentReferenceDesc: "parentReference desc",
    WebUrl: "webUrl",
    WebUrlDesc: "webUrl desc",
    DriveType: "driveType",
    DriveTypeDesc: "driveType desc",
    Owner: "owner",
    OwnerDesc: "owner desc",
    Quota: "quota",
    QuotaDesc: "quota desc",
    SharePointIds: "sharePointIds",
    SharePointIdsDesc: "sharePointIds desc",
    System: "system",
    SystemDesc: "system desc",
} as const;
/**
 * Provides operations to manage the drives property of the microsoft.graph.group entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    CreatedBy: "createdBy",
    CreatedDateTime: "createdDateTime",
    Description: "description",
    ETag: "eTag",
    LastModifiedBy: "lastModifiedBy",
    LastModifiedDateTime: "lastModifiedDateTime",
    Name: "name",
    ParentReference: "parentReference",
    WebUrl: "webUrl",
    DriveType: "driveType",
    Owner: "owner",
    Quota: "quota",
    SharePointIds: "sharePointIds",
    System: "system",
    CreatedByUser: "createdByUser",
    LastModifiedByUser: "lastModifiedByUser",
    Bundles: "bundles",
    Following: "following",
    Items: "items",
    List: "list",
    Root: "root",
    Special: "special",
} as const;
/* tslint:enable */
/* eslint-enable */
