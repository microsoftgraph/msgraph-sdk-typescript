/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createEventCollectionResponseFromDiscriminatorValue, createEventFromDiscriminatorValue, serializeEvent, type Event, type EventCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DeltaRequestBuilderRequestsMetadata, type DeltaRequestBuilder } from './delta/';
import { EventItemRequestBuilderNavigationMetadata, EventItemRequestBuilderRequestsMetadata, type EventItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the events property of the microsoft.graph.calendar entity.
 */
export interface EventsRequestBuilder extends BaseRequestBuilder<EventsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the delta method.
     */
    get delta(): DeltaRequestBuilder;
    /**
     * Provides operations to manage the events property of the microsoft.graph.calendar entity.
     * @param eventId The unique identifier of event
     * @returns {EventItemRequestBuilder}
     */
     byEventId(eventId: string) : EventItemRequestBuilder;
    /**
     * Retrieve a list of events in a calendar. The calendar can be one for a user, or the default calendar of a Microsoft 365 group. The list of events contains single instance meetings and series masters. To get expanded event instances, you can get the calendar view, orget the instances of an event.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<EventCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/calendar-list-events?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<EventsRequestBuilderGetQueryParameters> | undefined) : Promise<EventCollectionResponse | undefined>;
    /**
     * Use this API to create a new event in a calendar. The calendar can be one for a user, or the default calendar of a Microsoft 365 group.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Event>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/calendar-post-events?view=graph-rest-1.0|Find more info here}
     */
     post(body: Event, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Event | undefined>;
    /**
     * Retrieve a list of events in a calendar. The calendar can be one for a user, or the default calendar of a Microsoft 365 group. The list of events contains single instance meetings and series masters. To get expanded event instances, you can get the calendar view, orget the instances of an event.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EventsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Use this API to create a new event in a calendar. The calendar can be one for a user, or the default calendar of a Microsoft 365 group.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Event, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve a list of events in a calendar. The calendar can be one for a user, or the default calendar of a Microsoft 365 group. The list of events contains single instance meetings and series masters. To get expanded event instances, you can get the calendar view, orget the instances of an event.
 */
export interface EventsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const EventsRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/calendar/events{?%24count,%24expand,%24filter,%24orderby,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EventsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EventsRequestBuilderNavigationMetadata: Record<Exclude<keyof EventsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byEventId: {
        requestsMetadata: EventItemRequestBuilderRequestsMetadata,
        navigationMetadata: EventItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["event%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    delta: {
        requestsMetadata: DeltaRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EventsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: EventsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEventCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: EventsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: EventsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEventFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeEvent,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the events property of the microsoft.graph.calendar entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Attachments: "attachments",
    Calendar: "calendar",
    Extensions: "extensions",
    Instances: "instances",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/**
 * Provides operations to manage the events property of the microsoft.graph.calendar entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Categories: "categories",
    CategoriesDesc: "categories desc",
    ChangeKey: "changeKey",
    ChangeKeyDesc: "changeKey desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    AllowNewTimeProposals: "allowNewTimeProposals",
    AllowNewTimeProposalsDesc: "allowNewTimeProposals desc",
    Attendees: "attendees",
    AttendeesDesc: "attendees desc",
    Body: "body",
    BodyDesc: "body desc",
    BodyPreview: "bodyPreview",
    BodyPreviewDesc: "bodyPreview desc",
    End: "end",
    EndDesc: "end desc",
    HasAttachments: "hasAttachments",
    HasAttachmentsDesc: "hasAttachments desc",
    HideAttendees: "hideAttendees",
    HideAttendeesDesc: "hideAttendees desc",
    ICalUId: "iCalUId",
    ICalUIdDesc: "iCalUId desc",
    Importance: "importance",
    ImportanceDesc: "importance desc",
    IsAllDay: "isAllDay",
    IsAllDayDesc: "isAllDay desc",
    IsCancelled: "isCancelled",
    IsCancelledDesc: "isCancelled desc",
    IsDraft: "isDraft",
    IsDraftDesc: "isDraft desc",
    IsOnlineMeeting: "isOnlineMeeting",
    IsOnlineMeetingDesc: "isOnlineMeeting desc",
    IsOrganizer: "isOrganizer",
    IsOrganizerDesc: "isOrganizer desc",
    IsReminderOn: "isReminderOn",
    IsReminderOnDesc: "isReminderOn desc",
    Location: "location",
    LocationDesc: "location desc",
    Locations: "locations",
    LocationsDesc: "locations desc",
    OnlineMeeting: "onlineMeeting",
    OnlineMeetingDesc: "onlineMeeting desc",
    OnlineMeetingProvider: "onlineMeetingProvider",
    OnlineMeetingProviderDesc: "onlineMeetingProvider desc",
    OnlineMeetingUrl: "onlineMeetingUrl",
    OnlineMeetingUrlDesc: "onlineMeetingUrl desc",
    Organizer: "organizer",
    OrganizerDesc: "organizer desc",
    OriginalEndTimeZone: "originalEndTimeZone",
    OriginalEndTimeZoneDesc: "originalEndTimeZone desc",
    OriginalStart: "originalStart",
    OriginalStartDesc: "originalStart desc",
    OriginalStartTimeZone: "originalStartTimeZone",
    OriginalStartTimeZoneDesc: "originalStartTimeZone desc",
    Recurrence: "recurrence",
    RecurrenceDesc: "recurrence desc",
    ReminderMinutesBeforeStart: "reminderMinutesBeforeStart",
    ReminderMinutesBeforeStartDesc: "reminderMinutesBeforeStart desc",
    ResponseRequested: "responseRequested",
    ResponseRequestedDesc: "responseRequested desc",
    ResponseStatus: "responseStatus",
    ResponseStatusDesc: "responseStatus desc",
    Sensitivity: "sensitivity",
    SensitivityDesc: "sensitivity desc",
    SeriesMasterId: "seriesMasterId",
    SeriesMasterIdDesc: "seriesMasterId desc",
    ShowAs: "showAs",
    ShowAsDesc: "showAs desc",
    Start: "start",
    StartDesc: "start desc",
    Subject: "subject",
    SubjectDesc: "subject desc",
    TransactionId: "transactionId",
    TransactionIdDesc: "transactionId desc",
    Type: "type",
    TypeDesc: "type desc",
    WebLink: "webLink",
    WebLinkDesc: "webLink desc",
} as const;
/**
 * Provides operations to manage the events property of the microsoft.graph.calendar entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Categories: "categories",
    ChangeKey: "changeKey",
    CreatedDateTime: "createdDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    AllowNewTimeProposals: "allowNewTimeProposals",
    Attendees: "attendees",
    Body: "body",
    BodyPreview: "bodyPreview",
    End: "end",
    HasAttachments: "hasAttachments",
    HideAttendees: "hideAttendees",
    ICalUId: "iCalUId",
    Importance: "importance",
    IsAllDay: "isAllDay",
    IsCancelled: "isCancelled",
    IsDraft: "isDraft",
    IsOnlineMeeting: "isOnlineMeeting",
    IsOrganizer: "isOrganizer",
    IsReminderOn: "isReminderOn",
    Location: "location",
    Locations: "locations",
    OnlineMeeting: "onlineMeeting",
    OnlineMeetingProvider: "onlineMeetingProvider",
    OnlineMeetingUrl: "onlineMeetingUrl",
    Organizer: "organizer",
    OriginalEndTimeZone: "originalEndTimeZone",
    OriginalStart: "originalStart",
    OriginalStartTimeZone: "originalStartTimeZone",
    Recurrence: "recurrence",
    ReminderMinutesBeforeStart: "reminderMinutesBeforeStart",
    ResponseRequested: "responseRequested",
    ResponseStatus: "responseStatus",
    Sensitivity: "sensitivity",
    SeriesMasterId: "seriesMasterId",
    ShowAs: "showAs",
    Start: "start",
    Subject: "subject",
    TransactionId: "transactionId",
    Type: "type",
    WebLink: "webLink",
    Attachments: "attachments",
    Calendar: "calendar",
    Extensions: "extensions",
    Instances: "instances",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/* tslint:enable */
/* eslint-enable */
