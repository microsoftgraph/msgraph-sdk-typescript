/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createChatMessageFromDiscriminatorValue, serializeChatMessage, type ChatMessage } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { HostedContentsRequestBuilderNavigationMetadata, HostedContentsRequestBuilderRequestsMetadata, type HostedContentsRequestBuilder } from './hostedContents/';
// @ts-ignore
import { SetReactionRequestBuilderRequestsMetadata, type SetReactionRequestBuilder } from './setReaction/';
// @ts-ignore
import { SoftDeleteRequestBuilderRequestsMetadata, type SoftDeleteRequestBuilder } from './softDelete/';
// @ts-ignore
import { type UndoSoftDeleteRequestBuilder, UndoSoftDeleteRequestBuilderRequestsMetadata } from './undoSoftDelete/';
// @ts-ignore
import { type UnsetReactionRequestBuilder, UnsetReactionRequestBuilderRequestsMetadata } from './unsetReaction/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the replies property of the microsoft.graph.chatMessage entity.
 */
export interface ChatMessageItemRequestBuilder extends BaseRequestBuilder<ChatMessageItemRequestBuilder> {
    /**
     * Provides operations to manage the hostedContents property of the microsoft.graph.chatMessage entity.
     */
    get hostedContents(): HostedContentsRequestBuilder;
    /**
     * Provides operations to call the setReaction method.
     */
    get setReaction(): SetReactionRequestBuilder;
    /**
     * Provides operations to call the softDelete method.
     */
    get softDelete(): SoftDeleteRequestBuilder;
    /**
     * Provides operations to call the undoSoftDelete method.
     */
    get undoSoftDelete(): UndoSoftDeleteRequestBuilder;
    /**
     * Provides operations to call the unsetReaction method.
     */
    get unsetReaction(): UnsetReactionRequestBuilder;
    /**
     * Delete navigation property replies for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Replies for a specified message. Supports $expand for channel messages.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ChatMessage>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ChatMessageItemRequestBuilderGetQueryParameters> | undefined) : Promise<ChatMessage | undefined>;
    /**
     * Update the navigation property replies in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ChatMessage>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: ChatMessage, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ChatMessage | undefined>;
    /**
     * Delete navigation property replies for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Replies for a specified message. Supports $expand for channel messages.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ChatMessageItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property replies in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: ChatMessage, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Replies for a specified message. Supports $expand for channel messages.
 */
export interface ChatMessageItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ChatMessageItemRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/team/channels/{channel%2Did}/messages/{chatMessage%2Did}/replies/{chatMessage%2Did1}{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ChatMessageItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ChatMessageItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ChatMessageItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    hostedContents: {
        requestsMetadata: HostedContentsRequestBuilderRequestsMetadata,
        navigationMetadata: HostedContentsRequestBuilderNavigationMetadata,
    },
    setReaction: {
        requestsMetadata: SetReactionRequestBuilderRequestsMetadata,
    },
    softDelete: {
        requestsMetadata: SoftDeleteRequestBuilderRequestsMetadata,
    },
    undoSoftDelete: {
        requestsMetadata: UndoSoftDeleteRequestBuilderRequestsMetadata,
    },
    unsetReaction: {
        requestsMetadata: UnsetReactionRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ChatMessageItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ChatMessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: ChatMessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChatMessageFromDiscriminatorValue,
        queryParametersMapper: ChatMessageItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ChatMessageItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChatMessageFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeChatMessage,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
