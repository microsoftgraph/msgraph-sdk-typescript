/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createChatMessageCollectionResponseFromDiscriminatorValue, createChatMessageFromDiscriminatorValue, serializeChatMessage, type ChatMessage, type ChatMessageCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { DeltaRequestBuilderRequestsMetadata, type DeltaRequestBuilder } from './delta/';
import { ChatMessageItemRequestBuilderNavigationMetadata, ChatMessageItemRequestBuilderRequestsMetadata, type ChatMessageItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the messages property of the microsoft.graph.channel entity.
 */
export interface MessagesRequestBuilder extends BaseRequestBuilder<MessagesRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the delta method.
     */
    get delta(): DeltaRequestBuilder;
    /**
     * Provides operations to manage the messages property of the microsoft.graph.channel entity.
     * @param chatMessageId The unique identifier of chatMessage
     * @returns {ChatMessageItemRequestBuilder}
     */
     byChatMessageId(chatMessageId: string) : ChatMessageItemRequestBuilder;
    /**
     * Retrieve the list of messages (without the replies) in a channel of a team.  To get the replies for a message, call the list message replies or the get message reply API.  This method supports federation. To list channel messages in application context, the request must be made from the tenant that the channel owner belongs to (represented by the tenantId property on the channel).
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ChatMessageCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/channel-list-messages?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<MessagesRequestBuilderGetQueryParameters> | undefined) : Promise<ChatMessageCollectionResponse | undefined>;
    /**
     * Send a new chatMessage in the specified channel.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ChatMessage>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/channel-post-messages?view=graph-rest-1.0|Find more info here}
     */
     post(body: ChatMessage, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ChatMessage | undefined>;
    /**
     * Retrieve the list of messages (without the replies) in a channel of a team.  To get the replies for a message, call the list message replies or the get message reply API.  This method supports federation. To list channel messages in application context, the request must be made from the tenant that the channel owner belongs to (represented by the tenantId property on the channel).
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<MessagesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Send a new chatMessage in the specified channel.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ChatMessage, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the list of messages (without the replies) in a channel of a team.  To get the replies for a message, call the list message replies or the get message reply API.  This method supports federation. To list channel messages in application context, the request must be made from the tenant that the channel owner belongs to (represented by the tenantId property on the channel).
 */
export interface MessagesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const MessagesRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/team/channels/{channel%2Did}/messages{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the messages property of the microsoft.graph.channel entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    HostedContents: "hostedContents",
    Replies: "replies",
} as const;
/**
 * Provides operations to manage the messages property of the microsoft.graph.channel entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Attachments: "attachments",
    AttachmentsDesc: "attachments desc",
    Body: "body",
    BodyDesc: "body desc",
    ChannelIdentity: "channelIdentity",
    ChannelIdentityDesc: "channelIdentity desc",
    ChatId: "chatId",
    ChatIdDesc: "chatId desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    DeletedDateTime: "deletedDateTime",
    DeletedDateTimeDesc: "deletedDateTime desc",
    Etag: "etag",
    EtagDesc: "etag desc",
    EventDetail: "eventDetail",
    EventDetailDesc: "eventDetail desc",
    From: "from",
    FromDesc: "from desc",
    Importance: "importance",
    ImportanceDesc: "importance desc",
    LastEditedDateTime: "lastEditedDateTime",
    LastEditedDateTimeDesc: "lastEditedDateTime desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    Locale: "locale",
    LocaleDesc: "locale desc",
    Mentions: "mentions",
    MentionsDesc: "mentions desc",
    MessageHistory: "messageHistory",
    MessageHistoryDesc: "messageHistory desc",
    MessageType: "messageType",
    MessageTypeDesc: "messageType desc",
    PolicyViolation: "policyViolation",
    PolicyViolationDesc: "policyViolation desc",
    Reactions: "reactions",
    ReactionsDesc: "reactions desc",
    ReplyToId: "replyToId",
    ReplyToIdDesc: "replyToId desc",
    Subject: "subject",
    SubjectDesc: "subject desc",
    Summary: "summary",
    SummaryDesc: "summary desc",
    WebUrl: "webUrl",
    WebUrlDesc: "webUrl desc",
} as const;
/**
 * Provides operations to manage the messages property of the microsoft.graph.channel entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Attachments: "attachments",
    Body: "body",
    ChannelIdentity: "channelIdentity",
    ChatId: "chatId",
    CreatedDateTime: "createdDateTime",
    DeletedDateTime: "deletedDateTime",
    Etag: "etag",
    EventDetail: "eventDetail",
    From: "from",
    Importance: "importance",
    LastEditedDateTime: "lastEditedDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    Locale: "locale",
    Mentions: "mentions",
    MessageHistory: "messageHistory",
    MessageType: "messageType",
    PolicyViolation: "policyViolation",
    Reactions: "reactions",
    ReplyToId: "replyToId",
    Subject: "subject",
    Summary: "summary",
    WebUrl: "webUrl",
    HostedContents: "hostedContents",
    Replies: "replies",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const MessagesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MessagesRequestBuilderNavigationMetadata: Record<Exclude<keyof MessagesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byChatMessageId: {
        requestsMetadata: ChatMessageItemRequestBuilderRequestsMetadata,
        navigationMetadata: ChatMessageItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["chatMessage%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    delta: {
        requestsMetadata: DeltaRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MessagesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: MessagesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChatMessageCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: MessagesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: MessagesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createChatMessageFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeChatMessage,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
