/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPostCollectionResponseFromDiscriminatorValue, type PostCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { PostItemRequestBuilderNavigationMetadata, PostItemRequestBuilderRequestsMetadata, type PostItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the posts property of the microsoft.graph.conversationThread entity.
 */
export interface PostsRequestBuilder extends BaseRequestBuilder<PostsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the posts property of the microsoft.graph.conversationThread entity.
     * @param postId The unique identifier of post
     * @returns {PostItemRequestBuilder}
     */
     byPostId(postId: string) : PostItemRequestBuilder;
    /**
     * Get the posts of the specified thread. You can specify both the parent conversation and the thread, or,you can specify the thread without referencing the parent conversation.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<PostCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/conversationthread-list-posts?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<PostsRequestBuilderGetQueryParameters> | undefined) : Promise<PostCollectionResponse | undefined>;
    /**
     * Get the posts of the specified thread. You can specify both the parent conversation and the thread, or,you can specify the thread without referencing the parent conversation.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PostsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get the posts of the specified thread. You can specify both the parent conversation and the thread, or,you can specify the thread without referencing the parent conversation.
 */
export interface PostsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const PostsRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/conversations/{conversation%2Did}/threads/{conversationThread%2Did}/posts{?%24count,%24expand,%24filter,%24orderby,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the posts property of the microsoft.graph.conversationThread entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Attachments: "attachments",
    Extensions: "extensions",
    InReplyTo: "inReplyTo",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/**
 * Provides operations to manage the posts property of the microsoft.graph.conversationThread entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Categories: "categories",
    CategoriesDesc: "categories desc",
    ChangeKey: "changeKey",
    ChangeKeyDesc: "changeKey desc",
    CreatedDateTime: "createdDateTime",
    CreatedDateTimeDesc: "createdDateTime desc",
    LastModifiedDateTime: "lastModifiedDateTime",
    LastModifiedDateTimeDesc: "lastModifiedDateTime desc",
    Body: "body",
    BodyDesc: "body desc",
    ConversationId: "conversationId",
    ConversationIdDesc: "conversationId desc",
    ConversationThreadId: "conversationThreadId",
    ConversationThreadIdDesc: "conversationThreadId desc",
    From: "from",
    FromDesc: "from desc",
    HasAttachments: "hasAttachments",
    HasAttachmentsDesc: "hasAttachments desc",
    NewParticipants: "newParticipants",
    NewParticipantsDesc: "newParticipants desc",
    ReceivedDateTime: "receivedDateTime",
    ReceivedDateTimeDesc: "receivedDateTime desc",
    Sender: "sender",
    SenderDesc: "sender desc",
} as const;
/**
 * Provides operations to manage the posts property of the microsoft.graph.conversationThread entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Categories: "categories",
    ChangeKey: "changeKey",
    CreatedDateTime: "createdDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    Body: "body",
    ConversationId: "conversationId",
    ConversationThreadId: "conversationThreadId",
    From: "from",
    HasAttachments: "hasAttachments",
    NewParticipants: "newParticipants",
    ReceivedDateTime: "receivedDateTime",
    Sender: "sender",
    Attachments: "attachments",
    Extensions: "extensions",
    InReplyTo: "inReplyTo",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PostsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PostsRequestBuilderNavigationMetadata: Record<Exclude<keyof PostsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPostId: {
        requestsMetadata: PostItemRequestBuilderRequestsMetadata,
        navigationMetadata: PostItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["post%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PostsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PostsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createPostCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: PostsRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
