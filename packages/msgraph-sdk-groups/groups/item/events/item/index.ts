/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createEventFromDiscriminatorValue, serializeEvent, type Event } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { AcceptRequestBuilderRequestsMetadata, type AcceptRequestBuilder } from './accept/';
// @ts-ignore
import { AttachmentsRequestBuilderNavigationMetadata, AttachmentsRequestBuilderRequestsMetadata, type AttachmentsRequestBuilder } from './attachments/';
// @ts-ignore
import { CalendarRequestBuilderRequestsMetadata, type CalendarRequestBuilder } from './calendar/';
// @ts-ignore
import { CancelRequestBuilderRequestsMetadata, type CancelRequestBuilder } from './cancel/';
// @ts-ignore
import { DeclineRequestBuilderRequestsMetadata, type DeclineRequestBuilder } from './decline/';
// @ts-ignore
import { DismissReminderRequestBuilderRequestsMetadata, type DismissReminderRequestBuilder } from './dismissReminder/';
// @ts-ignore
import { ExtensionsRequestBuilderNavigationMetadata, ExtensionsRequestBuilderRequestsMetadata, type ExtensionsRequestBuilder } from './extensions/';
// @ts-ignore
import { ForwardRequestBuilderRequestsMetadata, type ForwardRequestBuilder } from './forward/';
// @ts-ignore
import { InstancesRequestBuilderNavigationMetadata, InstancesRequestBuilderRequestsMetadata, type InstancesRequestBuilder } from './instances/';
// @ts-ignore
import { SnoozeReminderRequestBuilderRequestsMetadata, type SnoozeReminderRequestBuilder } from './snoozeReminder/';
// @ts-ignore
import { TentativelyAcceptRequestBuilderRequestsMetadata, type TentativelyAcceptRequestBuilder } from './tentativelyAccept/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the events property of the microsoft.graph.group entity.
 */
export interface EventItemRequestBuilder extends BaseRequestBuilder<EventItemRequestBuilder> {
    /**
     * Provides operations to call the accept method.
     */
    get accept(): AcceptRequestBuilder;
    /**
     * Provides operations to manage the attachments property of the microsoft.graph.event entity.
     */
    get attachments(): AttachmentsRequestBuilder;
    /**
     * Provides operations to manage the calendar property of the microsoft.graph.event entity.
     */
    get calendar(): CalendarRequestBuilder;
    /**
     * Provides operations to call the cancel method.
     */
    get cancel(): CancelRequestBuilder;
    /**
     * Provides operations to call the decline method.
     */
    get decline(): DeclineRequestBuilder;
    /**
     * Provides operations to call the dismissReminder method.
     */
    get dismissReminder(): DismissReminderRequestBuilder;
    /**
     * Provides operations to manage the extensions property of the microsoft.graph.event entity.
     */
    get extensions(): ExtensionsRequestBuilder;
    /**
     * Provides operations to call the forward method.
     */
    get forward(): ForwardRequestBuilder;
    /**
     * Provides operations to manage the instances property of the microsoft.graph.event entity.
     */
    get instances(): InstancesRequestBuilder;
    /**
     * Provides operations to call the snoozeReminder method.
     */
    get snoozeReminder(): SnoozeReminderRequestBuilder;
    /**
     * Provides operations to call the tentativelyAccept method.
     */
    get tentativelyAccept(): TentativelyAcceptRequestBuilder;
    /**
     * Delete navigation property events for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The group's calendar events.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Event>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<EventItemRequestBuilderGetQueryParameters> | undefined) : Promise<Event | undefined>;
    /**
     * Update the navigation property events in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Event>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Event, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Event | undefined>;
    /**
     * Delete navigation property events for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The group's calendar events.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EventItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property events in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Event, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The group's calendar events.
 */
export interface EventItemRequestBuilderGetQueryParameters {
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const EventItemRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/events/{event%2Did}{?%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EventItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EventItemRequestBuilderNavigationMetadata: Record<Exclude<keyof EventItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accept: {
        requestsMetadata: AcceptRequestBuilderRequestsMetadata,
    },
    attachments: {
        requestsMetadata: AttachmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AttachmentsRequestBuilderNavigationMetadata,
    },
    calendar: {
        requestsMetadata: CalendarRequestBuilderRequestsMetadata,
    },
    cancel: {
        requestsMetadata: CancelRequestBuilderRequestsMetadata,
    },
    decline: {
        requestsMetadata: DeclineRequestBuilderRequestsMetadata,
    },
    dismissReminder: {
        requestsMetadata: DismissReminderRequestBuilderRequestsMetadata,
    },
    extensions: {
        requestsMetadata: ExtensionsRequestBuilderRequestsMetadata,
        navigationMetadata: ExtensionsRequestBuilderNavigationMetadata,
    },
    forward: {
        requestsMetadata: ForwardRequestBuilderRequestsMetadata,
    },
    instances: {
        requestsMetadata: InstancesRequestBuilderRequestsMetadata,
        navigationMetadata: InstancesRequestBuilderNavigationMetadata,
    },
    snoozeReminder: {
        requestsMetadata: SnoozeReminderRequestBuilderRequestsMetadata,
    },
    tentativelyAccept: {
        requestsMetadata: TentativelyAcceptRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EventItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: EventItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: EventItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEventFromDiscriminatorValue,
        queryParametersMapper: EventItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: EventItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEventFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeEvent,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
