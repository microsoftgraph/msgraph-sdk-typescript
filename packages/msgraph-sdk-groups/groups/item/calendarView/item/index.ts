/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createEventFromDiscriminatorValue, type Event } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { AcceptRequestBuilderRequestsMetadata, type AcceptRequestBuilder } from './accept/';
import { AttachmentsRequestBuilderNavigationMetadata, AttachmentsRequestBuilderRequestsMetadata, type AttachmentsRequestBuilder } from './attachments/';
import { CalendarRequestBuilderRequestsMetadata, type CalendarRequestBuilder } from './calendar/';
import { CancelRequestBuilderRequestsMetadata, type CancelRequestBuilder } from './cancel/';
import { DeclineRequestBuilderRequestsMetadata, type DeclineRequestBuilder } from './decline/';
import { DismissReminderRequestBuilderRequestsMetadata, type DismissReminderRequestBuilder } from './dismissReminder/';
import { ExtensionsRequestBuilderNavigationMetadata, ExtensionsRequestBuilderRequestsMetadata, type ExtensionsRequestBuilder } from './extensions/';
import { ForwardRequestBuilderRequestsMetadata, type ForwardRequestBuilder } from './forward/';
import { InstancesRequestBuilderNavigationMetadata, InstancesRequestBuilderRequestsMetadata, type InstancesRequestBuilder } from './instances/';
import { SnoozeReminderRequestBuilderRequestsMetadata, type SnoozeReminderRequestBuilder } from './snoozeReminder/';
import { TentativelyAcceptRequestBuilderRequestsMetadata, type TentativelyAcceptRequestBuilder } from './tentativelyAccept/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the calendarView property of the microsoft.graph.group entity.
 */
export interface EventItemRequestBuilder extends BaseRequestBuilder<EventItemRequestBuilder> {
    /**
     * Provides operations to call the accept method.
     */
    get accept(): AcceptRequestBuilder;
    /**
     * Provides operations to manage the attachments property of the microsoft.graph.event entity.
     */
    get attachments(): AttachmentsRequestBuilder;
    /**
     * Provides operations to manage the calendar property of the microsoft.graph.event entity.
     */
    get calendar(): CalendarRequestBuilder;
    /**
     * Provides operations to call the cancel method.
     */
    get cancel(): CancelRequestBuilder;
    /**
     * Provides operations to call the decline method.
     */
    get decline(): DeclineRequestBuilder;
    /**
     * Provides operations to call the dismissReminder method.
     */
    get dismissReminder(): DismissReminderRequestBuilder;
    /**
     * Provides operations to manage the extensions property of the microsoft.graph.event entity.
     */
    get extensions(): ExtensionsRequestBuilder;
    /**
     * Provides operations to call the forward method.
     */
    get forward(): ForwardRequestBuilder;
    /**
     * Provides operations to manage the instances property of the microsoft.graph.event entity.
     */
    get instances(): InstancesRequestBuilder;
    /**
     * Provides operations to call the snoozeReminder method.
     */
    get snoozeReminder(): SnoozeReminderRequestBuilder;
    /**
     * Provides operations to call the tentativelyAccept method.
     */
    get tentativelyAccept(): TentativelyAcceptRequestBuilder;
    /**
     * The calendar view for the calendar. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Event>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<EventItemRequestBuilderGetQueryParameters> | undefined) : Promise<Event | undefined>;
    /**
     * The calendar view for the calendar. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EventItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * The calendar view for the calendar. Read-only.
 */
export interface EventItemRequestBuilderGetQueryParameters {
    /**
     * The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
     */
    endDateTime?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
     */
    startDateTime?: string;
}
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const EventItemRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/calendarView/{event%2Did}?endDateTime={endDateTime}&startDateTime={startDateTime}{&%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EventItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EventItemRequestBuilderNavigationMetadata: Record<Exclude<keyof EventItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accept: {
        requestsMetadata: AcceptRequestBuilderRequestsMetadata,
    },
    attachments: {
        requestsMetadata: AttachmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AttachmentsRequestBuilderNavigationMetadata,
    },
    calendar: {
        requestsMetadata: CalendarRequestBuilderRequestsMetadata,
    },
    cancel: {
        requestsMetadata: CancelRequestBuilderRequestsMetadata,
    },
    decline: {
        requestsMetadata: DeclineRequestBuilderRequestsMetadata,
    },
    dismissReminder: {
        requestsMetadata: DismissReminderRequestBuilderRequestsMetadata,
    },
    extensions: {
        requestsMetadata: ExtensionsRequestBuilderRequestsMetadata,
        navigationMetadata: ExtensionsRequestBuilderNavigationMetadata,
    },
    forward: {
        requestsMetadata: ForwardRequestBuilderRequestsMetadata,
    },
    instances: {
        requestsMetadata: InstancesRequestBuilderRequestsMetadata,
        navigationMetadata: InstancesRequestBuilderNavigationMetadata,
    },
    snoozeReminder: {
        requestsMetadata: SnoozeReminderRequestBuilderRequestsMetadata,
    },
    tentativelyAccept: {
        requestsMetadata: TentativelyAcceptRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EventItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: EventItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEventFromDiscriminatorValue,
        queryParametersMapper: EventItemRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to manage the calendarView property of the microsoft.graph.group entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Categories: "categories",
    ChangeKey: "changeKey",
    CreatedDateTime: "createdDateTime",
    LastModifiedDateTime: "lastModifiedDateTime",
    AllowNewTimeProposals: "allowNewTimeProposals",
    Attendees: "attendees",
    Body: "body",
    BodyPreview: "bodyPreview",
    End: "end",
    HasAttachments: "hasAttachments",
    HideAttendees: "hideAttendees",
    ICalUId: "iCalUId",
    Importance: "importance",
    IsAllDay: "isAllDay",
    IsCancelled: "isCancelled",
    IsDraft: "isDraft",
    IsOnlineMeeting: "isOnlineMeeting",
    IsOrganizer: "isOrganizer",
    IsReminderOn: "isReminderOn",
    Location: "location",
    Locations: "locations",
    OnlineMeeting: "onlineMeeting",
    OnlineMeetingProvider: "onlineMeetingProvider",
    OnlineMeetingUrl: "onlineMeetingUrl",
    Organizer: "organizer",
    OriginalEndTimeZone: "originalEndTimeZone",
    OriginalStart: "originalStart",
    OriginalStartTimeZone: "originalStartTimeZone",
    Recurrence: "recurrence",
    ReminderMinutesBeforeStart: "reminderMinutesBeforeStart",
    ResponseRequested: "responseRequested",
    ResponseStatus: "responseStatus",
    Sensitivity: "sensitivity",
    SeriesMasterId: "seriesMasterId",
    ShowAs: "showAs",
    Start: "start",
    Subject: "subject",
    TransactionId: "transactionId",
    Type: "type",
    WebLink: "webLink",
    Attachments: "attachments",
    Calendar: "calendar",
    Extensions: "extensions",
    Instances: "instances",
    MultiValueExtendedProperties: "multiValueExtendedProperties",
    SingleValueExtendedProperties: "singleValueExtendedProperties",
} as const;
/* tslint:enable */
/* eslint-enable */
