/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createCanvasLayoutFromDiscriminatorValue, serializeCanvasLayout, type CanvasLayout } from '@microsoft/msgraph-sdk/models/index.js';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/index.js';
// @ts-ignore
import { HorizontalSectionsRequestBuilderNavigationMetadata, HorizontalSectionsRequestBuilderRequestsMetadata, type HorizontalSectionsRequestBuilder } from './horizontalSections/index.js';
// @ts-ignore
import { type VerticalSectionRequestBuilder, VerticalSectionRequestBuilderNavigationMetadata, VerticalSectionRequestBuilderRequestsMetadata } from './verticalSection/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the canvasLayout property of the microsoft.graph.sitePage entity.
 */
export interface CanvasLayoutRequestBuilder extends BaseRequestBuilder<CanvasLayoutRequestBuilder> {
    /**
     * Provides operations to manage the horizontalSections property of the microsoft.graph.canvasLayout entity.
     */
    get horizontalSections(): HorizontalSectionsRequestBuilder;
    /**
     * Provides operations to manage the verticalSection property of the microsoft.graph.canvasLayout entity.
     */
    get verticalSection(): VerticalSectionRequestBuilder;
    /**
     * Delete navigation property canvasLayout for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Indicates the layout of the content in a given SharePoint page, including horizontal sections and vertical sections.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CanvasLayout>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<CanvasLayoutRequestBuilderGetQueryParameters> | undefined) : Promise<CanvasLayout | undefined>;
    /**
     * Update the navigation property canvasLayout in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<CanvasLayout>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: CanvasLayout, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CanvasLayout | undefined>;
    /**
     * Delete navigation property canvasLayout for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Indicates the layout of the content in a given SharePoint page, including horizontal sections and vertical sections.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CanvasLayoutRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property canvasLayout in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: CanvasLayout, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Indicates the layout of the content in a given SharePoint page, including horizontal sections and vertical sections.
 */
export interface CanvasLayoutRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const CanvasLayoutRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/sites/{site%2Did}/pages/{baseSitePage%2Did}/graph.sitePage/canvasLayout{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CanvasLayoutRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CanvasLayoutRequestBuilderNavigationMetadata: Record<Exclude<keyof CanvasLayoutRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    horizontalSections: {
        requestsMetadata: HorizontalSectionsRequestBuilderRequestsMetadata,
        navigationMetadata: HorizontalSectionsRequestBuilderNavigationMetadata,
    },
    verticalSection: {
        requestsMetadata: VerticalSectionRequestBuilderRequestsMetadata,
        navigationMetadata: VerticalSectionRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CanvasLayoutRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: CanvasLayoutRequestBuilderUriTemplate,
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: CanvasLayoutRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCanvasLayoutFromDiscriminatorValue,
        queryParametersMapper: CanvasLayoutRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: CanvasLayoutRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createCanvasLayoutFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCanvasLayout,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
