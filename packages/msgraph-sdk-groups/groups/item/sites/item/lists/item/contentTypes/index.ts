/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createContentTypeCollectionResponseFromDiscriminatorValue, createContentTypeFromDiscriminatorValue, serializeContentType, type ContentType, type ContentTypeCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { AddCopyRequestBuilderRequestsMetadata, type AddCopyRequestBuilder } from './addCopy/';
import { AddCopyFromContentTypeHubRequestBuilderRequestsMetadata, type AddCopyFromContentTypeHubRequestBuilder } from './addCopyFromContentTypeHub/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { GetCompatibleHubContentTypesRequestBuilderRequestsMetadata, type GetCompatibleHubContentTypesRequestBuilder } from './getCompatibleHubContentTypes/';
import { ContentTypeItemRequestBuilderNavigationMetadata, ContentTypeItemRequestBuilderRequestsMetadata, type ContentTypeItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the contentTypes property of the microsoft.graph.list entity.
 */
export interface ContentTypesRequestBuilder extends BaseRequestBuilder<ContentTypesRequestBuilder> {
    /**
     * Provides operations to call the addCopy method.
     */
    get addCopy(): AddCopyRequestBuilder;
    /**
     * Provides operations to call the addCopyFromContentTypeHub method.
     */
    get addCopyFromContentTypeHub(): AddCopyFromContentTypeHubRequestBuilder;
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to call the getCompatibleHubContentTypes method.
     */
    get getCompatibleHubContentTypes(): GetCompatibleHubContentTypesRequestBuilder;
    /**
     * Provides operations to manage the contentTypes property of the microsoft.graph.list entity.
     * @param contentTypeId The unique identifier of contentType
     * @returns {ContentTypeItemRequestBuilder}
     */
     byContentTypeId(contentTypeId: string) : ContentTypeItemRequestBuilder;
    /**
     * Get the collection of [contentType][contentType] resources in a [list][].
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ContentTypeCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/list-list-contenttypes?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ContentTypesRequestBuilderGetQueryParameters> | undefined) : Promise<ContentTypeCollectionResponse | undefined>;
    /**
     * Create new navigation property to contentTypes for groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ContentType>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: ContentType, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ContentType | undefined>;
    /**
     * Get the collection of [contentType][contentType] resources in a [list][].
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ContentTypesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to contentTypes for groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ContentType, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the collection of [contentType][contentType] resources in a [list][].
 */
export interface ContentTypesRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const ContentTypesRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/sites/{site%2Did}/lists/{list%2Did}/contentTypes{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ContentTypesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ContentTypesRequestBuilderNavigationMetadata: Record<Exclude<keyof ContentTypesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byContentTypeId: {
        requestsMetadata: ContentTypeItemRequestBuilderRequestsMetadata,
        navigationMetadata: ContentTypeItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["contentType%2Did"],
    },
    addCopy: {
        requestsMetadata: AddCopyRequestBuilderRequestsMetadata,
    },
    addCopyFromContentTypeHub: {
        requestsMetadata: AddCopyFromContentTypeHubRequestBuilderRequestsMetadata,
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
    getCompatibleHubContentTypes: {
        requestsMetadata: GetCompatibleHubContentTypesRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ContentTypesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ContentTypesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createContentTypeCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: ContentTypesRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ContentTypesRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createContentTypeFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeContentType,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the contentTypes property of the microsoft.graph.list entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Base: "base",
    BaseTypes: "baseTypes",
    ColumnLinks: "columnLinks",
    ColumnPositions: "columnPositions",
    Columns: "columns",
} as const;
/**
 * Provides operations to manage the contentTypes property of the microsoft.graph.list entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AssociatedHubsUrls: "associatedHubsUrls",
    AssociatedHubsUrlsDesc: "associatedHubsUrls desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DocumentSet: "documentSet",
    DocumentSetDesc: "documentSet desc",
    DocumentTemplate: "documentTemplate",
    DocumentTemplateDesc: "documentTemplate desc",
    Group: "group",
    GroupDesc: "group desc",
    Hidden: "hidden",
    HiddenDesc: "hidden desc",
    InheritedFrom: "inheritedFrom",
    InheritedFromDesc: "inheritedFrom desc",
    IsBuiltIn: "isBuiltIn",
    IsBuiltInDesc: "isBuiltIn desc",
    Name: "name",
    NameDesc: "name desc",
    Order: "order",
    OrderDesc: "order desc",
    ParentId: "parentId",
    ParentIdDesc: "parentId desc",
    PropagateChanges: "propagateChanges",
    PropagateChangesDesc: "propagateChanges desc",
    ReadOnly: "readOnly",
    ReadOnlyDesc: "readOnly desc",
    Sealed: "sealed",
    SealedDesc: "sealed desc",
} as const;
/**
 * Provides operations to manage the contentTypes property of the microsoft.graph.list entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AssociatedHubsUrls: "associatedHubsUrls",
    Description: "description",
    DocumentSet: "documentSet",
    DocumentTemplate: "documentTemplate",
    Group: "group",
    Hidden: "hidden",
    InheritedFrom: "inheritedFrom",
    IsBuiltIn: "isBuiltIn",
    Name: "name",
    Order: "order",
    ParentId: "parentId",
    PropagateChanges: "propagateChanges",
    ReadOnly: "readOnly",
    Sealed: "sealed",
    Base: "base",
    BaseTypes: "baseTypes",
    ColumnLinks: "columnLinks",
    ColumnPositions: "columnPositions",
    Columns: "columns",
} as const;
/* tslint:enable */
/* eslint-enable */
