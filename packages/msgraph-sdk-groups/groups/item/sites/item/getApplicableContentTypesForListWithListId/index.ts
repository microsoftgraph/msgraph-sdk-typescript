/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createContentTypeFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, serializeContentType, type BaseCollectionPaginationCountResponse, type ContentType } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetApplicableContentTypesForListWithListIdGetResponse}
 */
export function createGetApplicableContentTypesForListWithListIdGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetApplicableContentTypesForListWithListIdGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoGetApplicableContentTypesForListWithListIdGetResponse(getApplicableContentTypesForListWithListIdGetResponse: Partial<GetApplicableContentTypesForListWithListIdGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(getApplicableContentTypesForListWithListIdGetResponse),
        "value": n => { getApplicableContentTypesForListWithListIdGetResponse.value = n.getCollectionOfObjectValues<ContentType>(createContentTypeFromDiscriminatorValue); },
    }
}
export interface GetApplicableContentTypesForListWithListIdGetResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ContentType[];
}
/**
 * Provides operations to call the getApplicableContentTypesForList method.
 */
export interface GetApplicableContentTypesForListWithListIdRequestBuilder extends BaseRequestBuilder<GetApplicableContentTypesForListWithListIdRequestBuilder> {
    /**
     * Invoke function getApplicableContentTypesForList
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GetApplicableContentTypesForListWithListIdGetResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<GetApplicableContentTypesForListWithListIdRequestBuilderGetQueryParameters> | undefined) : Promise<GetApplicableContentTypesForListWithListIdGetResponse | undefined>;
    /**
     * Invoke function getApplicableContentTypesForList
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<GetApplicableContentTypesForListWithListIdRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Invoke function getApplicableContentTypesForList
 */
export interface GetApplicableContentTypesForListWithListIdRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeGetApplicableContentTypesForListWithListIdGetResponse(writer: SerializationWriter, getApplicableContentTypesForListWithListIdGetResponse: Partial<GetApplicableContentTypesForListWithListIdGetResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, getApplicableContentTypesForListWithListIdGetResponse)
    writer.writeCollectionOfObjectValues<ContentType>("value", getApplicableContentTypesForListWithListIdGetResponse.value, serializeContentType);
}
/**
 * Uri template for the request builder.
 */
export const GetApplicableContentTypesForListWithListIdRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/sites/{site%2Did}/getApplicableContentTypesForList(listId='{listId}'){?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const GetApplicableContentTypesForListWithListIdRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GetApplicableContentTypesForListWithListIdRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GetApplicableContentTypesForListWithListIdRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGetApplicableContentTypesForListWithListIdGetResponseFromDiscriminatorValue,
        queryParametersMapper: GetApplicableContentTypesForListWithListIdRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Provides operations to call the getApplicableContentTypesForList method.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    Base: "base",
    BaseTypes: "baseTypes",
    ColumnLinks: "columnLinks",
    ColumnPositions: "columnPositions",
    Columns: "columns",
} as const;
/**
 * Provides operations to call the getApplicableContentTypesForList method.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    AssociatedHubsUrls: "associatedHubsUrls",
    AssociatedHubsUrlsDesc: "associatedHubsUrls desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DocumentSet: "documentSet",
    DocumentSetDesc: "documentSet desc",
    DocumentTemplate: "documentTemplate",
    DocumentTemplateDesc: "documentTemplate desc",
    Group: "group",
    GroupDesc: "group desc",
    Hidden: "hidden",
    HiddenDesc: "hidden desc",
    InheritedFrom: "inheritedFrom",
    InheritedFromDesc: "inheritedFrom desc",
    IsBuiltIn: "isBuiltIn",
    IsBuiltInDesc: "isBuiltIn desc",
    Name: "name",
    NameDesc: "name desc",
    Order: "order",
    OrderDesc: "order desc",
    ParentId: "parentId",
    ParentIdDesc: "parentId desc",
    PropagateChanges: "propagateChanges",
    PropagateChangesDesc: "propagateChanges desc",
    ReadOnly: "readOnly",
    ReadOnlyDesc: "readOnly desc",
    Sealed: "sealed",
    SealedDesc: "sealed desc",
} as const;
/**
 * Provides operations to call the getApplicableContentTypesForList method.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    AssociatedHubsUrls: "associatedHubsUrls",
    Description: "description",
    DocumentSet: "documentSet",
    DocumentTemplate: "documentTemplate",
    Group: "group",
    Hidden: "hidden",
    InheritedFrom: "inheritedFrom",
    IsBuiltIn: "isBuiltIn",
    Name: "name",
    Order: "order",
    ParentId: "parentId",
    PropagateChanges: "propagateChanges",
    ReadOnly: "readOnly",
    Sealed: "sealed",
    Base: "base",
    BaseTypes: "baseTypes",
    ColumnLinks: "columnLinks",
    ColumnPositions: "columnPositions",
    Columns: "columns",
} as const;
/* tslint:enable */
/* eslint-enable */
