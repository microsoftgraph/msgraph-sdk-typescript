/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createColumnDefinitionCollectionResponseFromDiscriminatorValue, createColumnDefinitionFromDiscriminatorValue, serializeColumnDefinition, type ColumnDefinition, type ColumnDefinitionCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the columns property of the microsoft.graph.site entity.
 */
export interface ColumnsRequestBuilder extends BaseRequestBuilder<ColumnsRequestBuilder> {
    /**
     * Get the collection of columns represented as [columnDefinition][columnDefinition] resources in a [site][site].
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ColumnDefinitionCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/site-list-columns?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<ColumnsRequestBuilderGetQueryParameters> | undefined) : Promise<ColumnDefinitionCollectionResponse | undefined>;
    /**
     * Create a column for a [site][site] with a request that specifies a [columnDefinition][columnDefinition].
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ColumnDefinition>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     * @see {@link https://learn.microsoft.com/graph/api/site-post-columns?view=graph-rest-1.0|Find more info here}
     */
     post(body: ColumnDefinition, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ColumnDefinition | undefined>;
    /**
     * Get the collection of columns represented as [columnDefinition][columnDefinition] resources in a [site][site].
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ColumnsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a column for a [site][site] with a request that specifies a [columnDefinition][columnDefinition].
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: ColumnDefinition, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the collection of columns represented as [columnDefinition][columnDefinition] resources in a [site][site].
 */
export interface ColumnsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Uri template for the request builder.
 */
export const ColumnsRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/sites/{site%2Did}/getByPath(path='{path}')/getByPath(path='{path1}')/columns{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ColumnsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ColumnsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: ColumnsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createColumnDefinitionCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: ColumnsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: ColumnsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createColumnDefinitionFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeColumnDefinition,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Provides operations to manage the columns property of the microsoft.graph.site entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
    SourceColumn: "sourceColumn",
} as const;
/**
 * Provides operations to manage the columns property of the microsoft.graph.site entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Boolean: "boolean",
    BooleanDesc: "boolean desc",
    Calculated: "calculated",
    CalculatedDesc: "calculated desc",
    Choice: "choice",
    ChoiceDesc: "choice desc",
    ColumnGroup: "columnGroup",
    ColumnGroupDesc: "columnGroup desc",
    ContentApprovalStatus: "contentApprovalStatus",
    ContentApprovalStatusDesc: "contentApprovalStatus desc",
    Currency: "currency",
    CurrencyDesc: "currency desc",
    DateTime: "dateTime",
    DateTimeDesc: "dateTime desc",
    DefaultValue: "defaultValue",
    DefaultValueDesc: "defaultValue desc",
    Description: "description",
    DescriptionDesc: "description desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    EnforceUniqueValues: "enforceUniqueValues",
    EnforceUniqueValuesDesc: "enforceUniqueValues desc",
    Geolocation: "geolocation",
    GeolocationDesc: "geolocation desc",
    Hidden: "hidden",
    HiddenDesc: "hidden desc",
    HyperlinkOrPicture: "hyperlinkOrPicture",
    HyperlinkOrPictureDesc: "hyperlinkOrPicture desc",
    Indexed: "indexed",
    IndexedDesc: "indexed desc",
    IsDeletable: "isDeletable",
    IsDeletableDesc: "isDeletable desc",
    IsReorderable: "isReorderable",
    IsReorderableDesc: "isReorderable desc",
    IsSealed: "isSealed",
    IsSealedDesc: "isSealed desc",
    Lookup: "lookup",
    LookupDesc: "lookup desc",
    Name: "name",
    NameDesc: "name desc",
    Number: "number",
    NumberDesc: "number desc",
    PersonOrGroup: "personOrGroup",
    PersonOrGroupDesc: "personOrGroup desc",
    PropagateChanges: "propagateChanges",
    PropagateChangesDesc: "propagateChanges desc",
    ReadOnly: "readOnly",
    ReadOnlyDesc: "readOnly desc",
    Required: "required",
    RequiredDesc: "required desc",
    SourceContentType: "sourceContentType",
    SourceContentTypeDesc: "sourceContentType desc",
    Term: "term",
    TermDesc: "term desc",
    Text: "text",
    TextDesc: "text desc",
    Thumbnail: "thumbnail",
    ThumbnailDesc: "thumbnail desc",
    Type: "type",
    TypeDesc: "type desc",
    Validation: "validation",
    ValidationDesc: "validation desc",
} as const;
/**
 * Provides operations to manage the columns property of the microsoft.graph.site entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Boolean: "boolean",
    Calculated: "calculated",
    Choice: "choice",
    ColumnGroup: "columnGroup",
    ContentApprovalStatus: "contentApprovalStatus",
    Currency: "currency",
    DateTime: "dateTime",
    DefaultValue: "defaultValue",
    Description: "description",
    DisplayName: "displayName",
    EnforceUniqueValues: "enforceUniqueValues",
    Geolocation: "geolocation",
    Hidden: "hidden",
    HyperlinkOrPicture: "hyperlinkOrPicture",
    Indexed: "indexed",
    IsDeletable: "isDeletable",
    IsReorderable: "isReorderable",
    IsSealed: "isSealed",
    Lookup: "lookup",
    Name: "name",
    Number: "number",
    PersonOrGroup: "personOrGroup",
    PropagateChanges: "propagateChanges",
    ReadOnly: "readOnly",
    Required: "required",
    SourceContentType: "sourceContentType",
    Term: "term",
    Text: "text",
    Thumbnail: "thumbnail",
    Type: "type",
    Validation: "validation",
    SourceColumn: "sourceColumn",
} as const;
/* tslint:enable */
/* eslint-enable */
