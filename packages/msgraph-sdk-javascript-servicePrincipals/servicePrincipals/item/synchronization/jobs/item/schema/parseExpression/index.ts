/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAttributeDefinitionFromDiscriminatorValue, createExpressionInputObjectFromDiscriminatorValue, createParseExpressionResponseFromDiscriminatorValue, serializeAttributeDefinition, serializeExpressionInputObject, serializeParseExpressionResponse, type AttributeDefinition, type ExpressionInputObject, type ParseExpressionResponse } from '@microsoft/msgraph-sdk-javascript/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk-javascript/models/oDataErrors/';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a parseExpressionPostRequestBody
 */
export function createParseExpressionPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoParseExpressionPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoParseExpressionPostRequestBody(parseExpressionPostRequestBody: ParseExpressionPostRequestBody | undefined = {} as ParseExpressionPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { parseExpressionPostRequestBody.backingStoreEnabled = true; },
        "expression": n => { parseExpressionPostRequestBody.expression = n.getStringValue(); },
        "targetAttributeDefinition": n => { parseExpressionPostRequestBody.targetAttributeDefinition = n.getObjectValue<AttributeDefinition>(createAttributeDefinitionFromDiscriminatorValue); },
        "testInputObject": n => { parseExpressionPostRequestBody.testInputObject = n.getObjectValue<ExpressionInputObject>(createExpressionInputObjectFromDiscriminatorValue); },
    }
}
export interface ParseExpressionPostRequestBody extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The expression property
     */
    expression?: string;
    /**
     * The targetAttributeDefinition property
     */
    targetAttributeDefinition?: AttributeDefinition;
    /**
     * The testInputObject property
     */
    testInputObject?: ExpressionInputObject;
}
/**
 * Provides operations to call the parseExpression method.
 */
export interface ParseExpressionRequestBuilder extends BaseRequestBuilder<ParseExpressionRequestBuilder> {
    /**
     * Parse a given string expression into an attributeMappingSource object. For more information about expressions, see Writing Expressions for Attribute Mappings in Microsoft Entra ID.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ParseExpressionResponse
     * @see {@link https://learn.microsoft.com/graph/api/synchronization-synchronizationschema-parseexpression?view=graph-rest-1.0|Find more info here}
     */
     post(body: ParseExpressionPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ParseExpressionResponse | undefined>;
    /**
     * Parse a given string expression into an attributeMappingSource object. For more information about expressions, see Writing Expressions for Attribute Mappings in Microsoft Entra ID.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: ParseExpressionPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeParseExpressionPostRequestBody(writer: SerializationWriter, parseExpressionPostRequestBody: ParseExpressionPostRequestBody | undefined = {} as ParseExpressionPostRequestBody) : void {
    writer.writeStringValue("expression", parseExpressionPostRequestBody.expression);
    writer.writeObjectValue<AttributeDefinition>("targetAttributeDefinition", parseExpressionPostRequestBody.targetAttributeDefinition, serializeAttributeDefinition);
    writer.writeObjectValue<ExpressionInputObject>("testInputObject", parseExpressionPostRequestBody.testInputObject, serializeExpressionInputObject);
    writer.writeAdditionalData(parseExpressionPostRequestBody.additionalData);
}
/**
 * Metadata for all the requests in the request builder.
 */
export const ParseExpressionRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createParseExpressionResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeParseExpressionPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const ParseExpressionRequestBuilderUriTemplate = "{+baseurl}/servicePrincipals/{servicePrincipal%2Did}/synchronization/jobs/{synchronizationJob%2Did}/schema/parseExpression";
/* tslint:enable */
/* eslint-enable */
