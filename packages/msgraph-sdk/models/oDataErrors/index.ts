/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BackedModel, type BackingStore, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ErrorDetails}
 */
// @ts-ignore
export function createErrorDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoErrorDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {InnerError}
 */
// @ts-ignore
export function createInnerErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInnerError;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {MainError}
 */
// @ts-ignore
export function createMainErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMainError;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ODataError}
 */
// @ts-ignore
export function createODataErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoODataError;
}
/**
 * The deserialization information for the current model
 * @param ErrorDetails The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoErrorDetails(errorDetails: Partial<ErrorDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { errorDetails.backingStoreEnabled = true; },
        "code": n => { errorDetails.code = n.getStringValue(); },
        "message": n => { errorDetails.message = n.getStringValue(); },
        "target": n => { errorDetails.target = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param InnerError The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoInnerError(innerError: Partial<InnerError> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { innerError.backingStoreEnabled = true; },
        "client-request-id": n => { innerError.clientRequestId = n.getStringValue(); },
        "date": n => { innerError.date = n.getDateValue(); },
        "@odata.type": n => { innerError.odataType = n.getStringValue(); },
        "request-id": n => { innerError.requestId = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param MainError The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMainError(mainError: Partial<MainError> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { mainError.backingStoreEnabled = true; },
        "code": n => { mainError.code = n.getStringValue(); },
        "details": n => { mainError.details = n.getCollectionOfObjectValues<ErrorDetails>(createErrorDetailsFromDiscriminatorValue); },
        "innerError": n => { mainError.innerError = n.getObjectValue<InnerError>(createInnerErrorFromDiscriminatorValue); },
        "message": n => { mainError.message = n.getStringValue(); },
        "target": n => { mainError.target = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ODataError The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoODataError(oDataError: Partial<ODataError> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { oDataError.backingStoreEnabled = true; },
        "error": n => { oDataError.errorEscaped = n.getObjectValue<MainError>(createMainErrorFromDiscriminatorValue); oDataError.message = oDataError.errorEscaped?.message ?? ""; },
    }
}
export interface ErrorDetails extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The code property
     */
    code?: string | null;
    /**
     * The message property
     */
    message?: string | null;
    /**
     * The target property
     */
    target?: string | null;
}
export interface InnerError extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * Client request Id as sent by the client application.
     */
    clientRequestId?: string | null;
    /**
     * Date when the error occured.
     */
    date?: Date | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * Request Id as tracked internally by the service
     */
    requestId?: string | null;
}
export interface MainError extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The code property
     */
    code?: string | null;
    /**
     * The details property
     */
    details?: ErrorDetails[] | null;
    /**
     * The innerError property
     */
    innerError?: InnerError | null;
    /**
     * The message property
     */
    message?: string | null;
    /**
     * The target property
     */
    target?: string | null;
}
export interface ODataError extends AdditionalDataHolder, ApiError, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The error property
     */
    errorEscaped?: MainError | null;
}
/**
 * Serializes information the current object
 * @param ErrorDetails The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeErrorDetails(writer: SerializationWriter, errorDetails: Partial<ErrorDetails> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!errorDetails || isSerializingDerivedType) { return; }
    writer.writeStringValue("code", errorDetails.code);
    writer.writeStringValue("message", errorDetails.message);
    writer.writeStringValue("target", errorDetails.target);
    writer.writeAdditionalData(errorDetails.additionalData);
}
/**
 * Serializes information the current object
 * @param InnerError The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeInnerError(writer: SerializationWriter, innerError: Partial<InnerError> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!innerError || isSerializingDerivedType) { return; }
    writer.writeStringValue("client-request-id", innerError.clientRequestId);
    writer.writeDateValue("date", innerError.date);
    writer.writeStringValue("@odata.type", innerError.odataType);
    writer.writeStringValue("request-id", innerError.requestId);
    writer.writeAdditionalData(innerError.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param MainError The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMainError(writer: SerializationWriter, mainError: Partial<MainError> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!mainError || isSerializingDerivedType) { return; }
    writer.writeStringValue("code", mainError.code);
    writer.writeCollectionOfObjectValues<ErrorDetails>("details", mainError.details, serializeErrorDetails);
    writer.writeObjectValue<InnerError>("innerError", mainError.innerError, serializeInnerError);
    writer.writeStringValue("message", mainError.message);
    writer.writeStringValue("target", mainError.target);
    writer.writeAdditionalData(mainError.additionalData);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ODataError The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeODataError(writer: SerializationWriter, oDataError: Partial<ODataError> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!oDataError || isSerializingDerivedType) { return; }
    writer.writeObjectValue<MainError>("error", oDataError.errorEscaped, serializeMainError);
    writer.writeAdditionalData(oDataError.additionalData);
}
/* tslint:enable */
/* eslint-enable */
