/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPublicErrorFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, deserializeIntoEntity, LongRunningOperationStatus, LongRunningOperationStatusObject, serializeBaseCollectionPaginationCountResponse, serializeEntity, serializePublicError, type BaseCollectionPaginationCountResponse, type Entity, type PublicError } from '../../';
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export type AttributeSet = (typeof AttributeSetObject)[keyof typeof AttributeSetObject];
export interface AzureUsage extends Entity, Parsable {
    /**
     * The billed property
     */
    billed?: BilledUsage;
    /**
     * The unbilled property
     */
    unbilled?: UnbilledUsage;
}
export interface BilledUsage extends Entity, Parsable {
}
export interface Billing extends Entity, Parsable {
    /**
     * Represents metadata for the exported data.
     */
    manifests?: Manifest[];
    /**
     * Represents an operation to export the billing data of a partner.
     */
    operations?: Operation[];
    /**
     * The usage property
     */
    usage?: AzureUsage;
}
export type BillingPeriod = (typeof BillingPeriodObject)[keyof typeof BillingPeriodObject];
export interface Blob extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean;
    /**
     * The blob name.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The partition that contains the file. A large partition is split into multiple files, each with the same partitionValue.
     */
    partitionValue?: string;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AzureUsage}
 */
export function createAzureUsageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAzureUsage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BilledUsage}
 */
export function createBilledUsageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBilledUsage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Billing}
 */
export function createBillingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBilling;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Blob}
 */
export function createBlobFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBlob;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExportSuccessOperation}
 */
export function createExportSuccessOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExportSuccessOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FailedOperation}
 */
export function createFailedOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFailedOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ManifestCollectionResponse}
 */
export function createManifestCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoManifestCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Manifest}
 */
export function createManifestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoManifest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OperationCollectionResponse}
 */
export function createOperationCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOperationCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Operation}
 */
export function createOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.partners.billing.exportSuccessOperation":
                    return deserializeIntoExportSuccessOperation;
                case "#microsoft.graph.partners.billing.failedOperation":
                    return deserializeIntoFailedOperation;
                case "#microsoft.graph.partners.billing.runningOperation":
                    return deserializeIntoRunningOperation;
            }
        }
    }
    return deserializeIntoOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RunningOperation}
 */
export function createRunningOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRunningOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UnbilledUsage}
 */
export function createUnbilledUsageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUnbilledUsage;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoAzureUsage(azureUsage: Partial<AzureUsage> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(azureUsage),
        "billed": n => { azureUsage.billed = n.getObjectValue<BilledUsage>(createBilledUsageFromDiscriminatorValue); },
        "unbilled": n => { azureUsage.unbilled = n.getObjectValue<UnbilledUsage>(createUnbilledUsageFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoBilledUsage(billedUsage: Partial<BilledUsage> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(billedUsage),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoBilling(billing: Partial<Billing> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(billing),
        "manifests": n => { billing.manifests = n.getCollectionOfObjectValues<Manifest>(createManifestFromDiscriminatorValue); },
        "operations": n => { billing.operations = n.getCollectionOfObjectValues<Operation>(createOperationFromDiscriminatorValue); },
        "usage": n => { billing.usage = n.getObjectValue<AzureUsage>(createAzureUsageFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoBlob(blob: Partial<Blob> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { blob.backingStoreEnabled = true; },
        "name": n => { blob.name = n.getStringValue(); },
        "@odata.type": n => { blob.odataType = n.getStringValue(); },
        "partitionValue": n => { blob.partitionValue = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoExportSuccessOperation(exportSuccessOperation: Partial<ExportSuccessOperation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOperation(exportSuccessOperation),
        "resourceLocation": n => { exportSuccessOperation.resourceLocation = n.getObjectValue<Manifest>(createManifestFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoFailedOperation(failedOperation: Partial<FailedOperation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOperation(failedOperation),
        "error": n => { failedOperation.errorEscaped = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoManifest(manifest: Partial<Manifest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(manifest),
        "blobCount": n => { manifest.blobCount = n.getNumberValue(); },
        "blobs": n => { manifest.blobs = n.getCollectionOfObjectValues<Blob>(createBlobFromDiscriminatorValue); },
        "createdDateTime": n => { manifest.createdDateTime = n.getDateValue(); },
        "dataFormat": n => { manifest.dataFormat = n.getStringValue(); },
        "eTag": n => { manifest.eTag = n.getStringValue(); },
        "partitionType": n => { manifest.partitionType = n.getStringValue(); },
        "partnerTenantId": n => { manifest.partnerTenantId = n.getStringValue(); },
        "rootDirectory": n => { manifest.rootDirectory = n.getStringValue(); },
        "sasToken": n => { manifest.sasToken = n.getStringValue(); },
        "schemaVersion": n => { manifest.schemaVersion = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoManifestCollectionResponse(manifestCollectionResponse: Partial<ManifestCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(manifestCollectionResponse),
        "value": n => { manifestCollectionResponse.value = n.getCollectionOfObjectValues<Manifest>(createManifestFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoOperation(operation: Partial<Operation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(operation),
        "createdDateTime": n => { operation.createdDateTime = n.getDateValue(); },
        "lastActionDateTime": n => { operation.lastActionDateTime = n.getDateValue(); },
        "status": n => { operation.status = n.getEnumValue<LongRunningOperationStatus>(LongRunningOperationStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoOperationCollectionResponse(operationCollectionResponse: Partial<OperationCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(operationCollectionResponse),
        "value": n => { operationCollectionResponse.value = n.getCollectionOfObjectValues<Operation>(createOperationFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoRunningOperation(runningOperation: Partial<RunningOperation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOperation(runningOperation),
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
export function deserializeIntoUnbilledUsage(unbilledUsage: Partial<UnbilledUsage> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(unbilledUsage),
    }
}
export interface ExportSuccessOperation extends Operation, Parsable {
    /**
     * The resourceLocation property
     */
    resourceLocation?: Manifest;
}
export interface FailedOperation extends Operation, Parsable {
    /**
     * The error property
     */
    errorEscaped?: PublicError;
}
export interface Manifest extends Entity, Parsable {
    /**
     * The total file count for this partner tenant ID.
     */
    blobCount?: number;
    /**
     * A collection of blob objects that contain details of all the files for the partner tenant ID.
     */
    blobs?: Blob[];
    /**
     * The date and time when a manifest resource was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date;
    /**
     * The billing data file format. The possible value is: compressedJSONLines. Each blob is a compressed file and data in the file is in JSON lines format. Decompress the file to access the data.
     */
    dataFormat?: string;
    /**
     * Version of data represented by the manifest. Any change in eTag indicates a new data version.
     */
    eTag?: string;
    /**
     * Indicates the division of data. If a given partition has more than the supported number, the data is split into multiple files, each file representing a specific partitionValue. By default, the data in the file is partitioned by the number of line items.
     */
    partitionType?: string;
    /**
     * The Microsoft Entra tenant ID of the partner.
     */
    partnerTenantId?: string;
    /**
     * The root directory that contains all the files.
     */
    rootDirectory?: string;
    /**
     * The SAS token for accessing the directory or an individual file in the directory.
     */
    sasToken?: string;
    /**
     * The version of the manifest schema.
     */
    schemaVersion?: string;
}
export interface ManifestCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Manifest[];
}
export interface Operation extends Entity, Parsable {
    /**
     * The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date;
    /**
     * The time of the last action of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastActionDateTime?: Date;
    /**
     * The status of the operation. Possible values are: notStarted, running, completed, failed, unknownFutureValue.
     */
    status?: LongRunningOperationStatus;
}
export interface OperationCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Operation[];
}
export interface RunningOperation extends Operation, Parsable {
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeAzureUsage(writer: SerializationWriter, azureUsage: Partial<AzureUsage> | undefined = {}) : void {
    serializeEntity(writer, azureUsage)
    writer.writeObjectValue<BilledUsage>("billed", azureUsage.billed, serializeBilledUsage);
    writer.writeObjectValue<UnbilledUsage>("unbilled", azureUsage.unbilled, serializeUnbilledUsage);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBilledUsage(writer: SerializationWriter, billedUsage: Partial<BilledUsage> | undefined = {}) : void {
    serializeEntity(writer, billedUsage)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBilling(writer: SerializationWriter, billing: Partial<Billing> | undefined = {}) : void {
    serializeEntity(writer, billing)
    writer.writeCollectionOfObjectValues<Manifest>("manifests", billing.manifests, serializeManifest);
    writer.writeCollectionOfObjectValues<Operation>("operations", billing.operations, serializeOperation);
    writer.writeObjectValue<AzureUsage>("usage", billing.usage, serializeAzureUsage);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBlob(writer: SerializationWriter, blob: Partial<Blob> | undefined = {}) : void {
    writer.writeStringValue("name", blob.name);
    writer.writeStringValue("@odata.type", blob.odataType);
    writer.writeStringValue("partitionValue", blob.partitionValue);
    writer.writeAdditionalData(blob.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeExportSuccessOperation(writer: SerializationWriter, exportSuccessOperation: Partial<ExportSuccessOperation> | undefined = {}) : void {
    serializeOperation(writer, exportSuccessOperation)
    writer.writeObjectValue<Manifest>("resourceLocation", exportSuccessOperation.resourceLocation, serializeManifest);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeFailedOperation(writer: SerializationWriter, failedOperation: Partial<FailedOperation> | undefined = {}) : void {
    serializeOperation(writer, failedOperation)
    writer.writeObjectValue<PublicError>("error", failedOperation.errorEscaped, serializePublicError);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeManifest(writer: SerializationWriter, manifest: Partial<Manifest> | undefined = {}) : void {
    serializeEntity(writer, manifest)
    writer.writeNumberValue("blobCount", manifest.blobCount);
    writer.writeCollectionOfObjectValues<Blob>("blobs", manifest.blobs, serializeBlob);
    writer.writeDateValue("createdDateTime", manifest.createdDateTime);
    writer.writeStringValue("dataFormat", manifest.dataFormat);
    writer.writeStringValue("eTag", manifest.eTag);
    writer.writeStringValue("partitionType", manifest.partitionType);
    writer.writeStringValue("partnerTenantId", manifest.partnerTenantId);
    writer.writeStringValue("rootDirectory", manifest.rootDirectory);
    writer.writeStringValue("sasToken", manifest.sasToken);
    writer.writeStringValue("schemaVersion", manifest.schemaVersion);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeManifestCollectionResponse(writer: SerializationWriter, manifestCollectionResponse: Partial<ManifestCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, manifestCollectionResponse)
    writer.writeCollectionOfObjectValues<Manifest>("value", manifestCollectionResponse.value, serializeManifest);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeOperation(writer: SerializationWriter, operation: Partial<Operation> | undefined = {}) : void {
    serializeEntity(writer, operation)
    writer.writeDateValue("createdDateTime", operation.createdDateTime);
    writer.writeDateValue("lastActionDateTime", operation.lastActionDateTime);
    writer.writeEnumValue<LongRunningOperationStatus>("status", operation.status);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeOperationCollectionResponse(writer: SerializationWriter, operationCollectionResponse: Partial<OperationCollectionResponse> | undefined = {}) : void {
    serializeBaseCollectionPaginationCountResponse(writer, operationCollectionResponse)
    writer.writeCollectionOfObjectValues<Operation>("value", operationCollectionResponse.value, serializeOperation);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRunningOperation(writer: SerializationWriter, runningOperation: Partial<RunningOperation> | undefined = {}) : void {
    serializeOperation(writer, runningOperation)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUnbilledUsage(writer: SerializationWriter, unbilledUsage: Partial<UnbilledUsage> | undefined = {}) : void {
    serializeEntity(writer, unbilledUsage)
}
export interface UnbilledUsage extends Entity, Parsable {
}
export const AttributeSetObject = {
    Full: "full",
    Basic: "basic",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const BillingPeriodObject = {
    Current: "current",
    Last: "last",
    UnknownFutureValue: "unknownFutureValue",
} as const;
/* tslint:enable */
/* eslint-enable */
