/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createPublicErrorFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, deserializeIntoEntity, LongRunningOperationStatus, LongRunningOperationStatusObject, serializeBaseCollectionPaginationCountResponse, serializeEntity, serializePublicError, type BaseCollectionPaginationCountResponse, type Entity, type PublicError } from '../../index.js';
// @ts-ignore
import { type AdditionalDataHolder, type BackedModel, type BackingStore, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export type AttributeSet = (typeof AttributeSetObject)[keyof typeof AttributeSetObject];
export interface AzureUsage extends Entity, Parsable {
    /**
     * The billed property
     */
    billed?: BilledUsage | null;
    /**
     * The unbilled property
     */
    unbilled?: UnbilledUsage | null;
}
export interface BilledReconciliation extends Entity, Parsable {
}
export interface BilledUsage extends Entity, Parsable {
}
export interface Billing extends Entity, Parsable {
    /**
     * Represents metadata for the exported data.
     */
    manifests?: Manifest[] | null;
    /**
     * Represents an operation to export the billing data of a partner.
     */
    operations?: Operation[] | null;
    /**
     * The reconciliation property
     */
    reconciliation?: BillingReconciliation | null;
    /**
     * The usage property
     */
    usage?: AzureUsage | null;
}
export type BillingPeriod = (typeof BillingPeriodObject)[keyof typeof BillingPeriodObject];
export interface BillingReconciliation extends Entity, Parsable {
    /**
     * The billed property
     */
    billed?: BilledReconciliation | null;
    /**
     * The unbilled property
     */
    unbilled?: UnbilledReconciliation | null;
}
export interface Blob extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The blob name.
     */
    name?: string | null;
    /**
     * The OdataType property
     */
    odataType?: string | null;
    /**
     * The partition that contains the file. A large partition is split into multiple files, each with the same partitionValue.
     */
    partitionValue?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AzureUsage}
 */
// @ts-ignore
export function createAzureUsageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAzureUsage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BilledReconciliation}
 */
// @ts-ignore
export function createBilledReconciliationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBilledReconciliation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BilledUsage}
 */
// @ts-ignore
export function createBilledUsageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBilledUsage;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Billing}
 */
// @ts-ignore
export function createBillingFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBilling;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BillingReconciliation}
 */
// @ts-ignore
export function createBillingReconciliationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBillingReconciliation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Blob}
 */
// @ts-ignore
export function createBlobFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBlob;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ExportSuccessOperation}
 */
// @ts-ignore
export function createExportSuccessOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoExportSuccessOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {FailedOperation}
 */
// @ts-ignore
export function createFailedOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoFailedOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ManifestCollectionResponse}
 */
// @ts-ignore
export function createManifestCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoManifestCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Manifest}
 */
// @ts-ignore
export function createManifestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoManifest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {OperationCollectionResponse}
 */
// @ts-ignore
export function createOperationCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOperationCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Operation}
 */
// @ts-ignore
export function createOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode?.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.partners.billing.exportSuccessOperation":
                    return deserializeIntoExportSuccessOperation;
                case "#microsoft.graph.partners.billing.failedOperation":
                    return deserializeIntoFailedOperation;
                case "#microsoft.graph.partners.billing.runningOperation":
                    return deserializeIntoRunningOperation;
            }
        }
    }
    return deserializeIntoOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {RunningOperation}
 */
// @ts-ignore
export function createRunningOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRunningOperation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UnbilledReconciliation}
 */
// @ts-ignore
export function createUnbilledReconciliationFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUnbilledReconciliation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UnbilledUsage}
 */
// @ts-ignore
export function createUnbilledUsageFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUnbilledUsage;
}
/**
 * The deserialization information for the current model
 * @param AzureUsage The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAzureUsage(azureUsage: Partial<AzureUsage> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(azureUsage),
        "billed": n => { azureUsage.billed = n.getObjectValue<BilledUsage>(createBilledUsageFromDiscriminatorValue); },
        "unbilled": n => { azureUsage.unbilled = n.getObjectValue<UnbilledUsage>(createUnbilledUsageFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param BilledReconciliation The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBilledReconciliation(billedReconciliation: Partial<BilledReconciliation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(billedReconciliation),
    }
}
/**
 * The deserialization information for the current model
 * @param BilledUsage The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBilledUsage(billedUsage: Partial<BilledUsage> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(billedUsage),
    }
}
/**
 * The deserialization information for the current model
 * @param Billing The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBilling(billing: Partial<Billing> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(billing),
        "manifests": n => { billing.manifests = n.getCollectionOfObjectValues<Manifest>(createManifestFromDiscriminatorValue); },
        "operations": n => { billing.operations = n.getCollectionOfObjectValues<Operation>(createOperationFromDiscriminatorValue); },
        "reconciliation": n => { billing.reconciliation = n.getObjectValue<BillingReconciliation>(createBillingReconciliationFromDiscriminatorValue); },
        "usage": n => { billing.usage = n.getObjectValue<AzureUsage>(createAzureUsageFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param BillingReconciliation The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBillingReconciliation(billingReconciliation: Partial<BillingReconciliation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(billingReconciliation),
        "billed": n => { billingReconciliation.billed = n.getObjectValue<BilledReconciliation>(createBilledReconciliationFromDiscriminatorValue); },
        "unbilled": n => { billingReconciliation.unbilled = n.getObjectValue<UnbilledReconciliation>(createUnbilledReconciliationFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param Blob The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBlob(blob: Partial<Blob> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { blob.backingStoreEnabled = true; },
        "name": n => { blob.name = n.getStringValue(); },
        "@odata.type": n => { blob.odataType = n.getStringValue(); },
        "partitionValue": n => { blob.partitionValue = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ExportSuccessOperation The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoExportSuccessOperation(exportSuccessOperation: Partial<ExportSuccessOperation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOperation(exportSuccessOperation),
        "resourceLocation": n => { exportSuccessOperation.resourceLocation = n.getObjectValue<Manifest>(createManifestFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param FailedOperation The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoFailedOperation(failedOperation: Partial<FailedOperation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOperation(failedOperation),
        "error": n => { failedOperation.errorEscaped = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param Manifest The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoManifest(manifest: Partial<Manifest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(manifest),
        "blobCount": n => { manifest.blobCount = n.getNumberValue(); },
        "blobs": n => { manifest.blobs = n.getCollectionOfObjectValues<Blob>(createBlobFromDiscriminatorValue); },
        "createdDateTime": n => { manifest.createdDateTime = n.getDateValue(); },
        "dataFormat": n => { manifest.dataFormat = n.getStringValue(); },
        "eTag": n => { manifest.eTag = n.getStringValue(); },
        "partitionType": n => { manifest.partitionType = n.getStringValue(); },
        "partnerTenantId": n => { manifest.partnerTenantId = n.getStringValue(); },
        "rootDirectory": n => { manifest.rootDirectory = n.getStringValue(); },
        "sasToken": n => { manifest.sasToken = n.getStringValue(); },
        "schemaVersion": n => { manifest.schemaVersion = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @param ManifestCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoManifestCollectionResponse(manifestCollectionResponse: Partial<ManifestCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(manifestCollectionResponse),
        "value": n => { manifestCollectionResponse.value = n.getCollectionOfObjectValues<Manifest>(createManifestFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param Operation The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOperation(operation: Partial<Operation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(operation),
        "createdDateTime": n => { operation.createdDateTime = n.getDateValue(); },
        "lastActionDateTime": n => { operation.lastActionDateTime = n.getDateValue(); },
        "status": n => { operation.status = n.getEnumValue<LongRunningOperationStatus>(LongRunningOperationStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @param OperationCollectionResponse The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOperationCollectionResponse(operationCollectionResponse: Partial<OperationCollectionResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(operationCollectionResponse),
        "value": n => { operationCollectionResponse.value = n.getCollectionOfObjectValues<Operation>(createOperationFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @param RunningOperation The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRunningOperation(runningOperation: Partial<RunningOperation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOperation(runningOperation),
    }
}
/**
 * The deserialization information for the current model
 * @param UnbilledReconciliation The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUnbilledReconciliation(unbilledReconciliation: Partial<UnbilledReconciliation> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(unbilledReconciliation),
    }
}
/**
 * The deserialization information for the current model
 * @param UnbilledUsage The instance to deserialize into.
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUnbilledUsage(unbilledUsage: Partial<UnbilledUsage> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(unbilledUsage),
    }
}
export interface ExportSuccessOperation extends Operation, Parsable {
    /**
     * The resourceLocation property
     */
    resourceLocation?: Manifest | null;
}
export interface FailedOperation extends Operation, Parsable {
    /**
     * The error property
     */
    errorEscaped?: PublicError | null;
}
export interface Manifest extends Entity, Parsable {
    /**
     * The total file count for this partner tenant ID.
     */
    blobCount?: number | null;
    /**
     * A collection of blob objects that contain details of all the files for the partner tenant ID.
     */
    blobs?: Blob[] | null;
    /**
     * The date and time when a manifest resource was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date | null;
    /**
     * The billing data file format. The possible value is: compressedJSONLines. Each blob is a compressed file and data in the file is in JSON lines format. Decompress the file to access the data.
     */
    dataFormat?: string | null;
    /**
     * Version of data represented by the manifest. Any change in eTag indicates a new data version.
     */
    eTag?: string | null;
    /**
     * Indicates the division of data. If a given partition has more than the supported number, the data is split into multiple files, each file representing a specific partitionValue. By default, the data in the file is partitioned by the number of line items.
     */
    partitionType?: string | null;
    /**
     * The Microsoft Entra tenant ID of the partner.
     */
    partnerTenantId?: string | null;
    /**
     * The root directory that contains all the files.
     */
    rootDirectory?: string | null;
    /**
     * The SAS token for accessing the directory or an individual file in the directory.
     */
    sasToken?: string | null;
    /**
     * The version of the manifest schema.
     */
    schemaVersion?: string | null;
}
export interface ManifestCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Manifest[] | null;
}
export interface Operation extends Entity, Parsable {
    /**
     * The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date | null;
    /**
     * The time of the last action of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastActionDateTime?: Date | null;
    /**
     * The status of the operation. Possible values are: notStarted, running, completed, failed, unknownFutureValue.
     */
    status?: LongRunningOperationStatus | null;
}
export interface OperationCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Operation[] | null;
}
export interface RunningOperation extends Operation, Parsable {
}
/**
 * Serializes information the current object
 * @param AzureUsage The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAzureUsage(writer: SerializationWriter, azureUsage: Partial<AzureUsage> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!azureUsage || isSerializingDerivedType) { return; }
    serializeEntity(writer, azureUsage, isSerializingDerivedType)
    writer.writeObjectValue<BilledUsage>("billed", azureUsage.billed, serializeBilledUsage);
    writer.writeObjectValue<UnbilledUsage>("unbilled", azureUsage.unbilled, serializeUnbilledUsage);
}
/**
 * Serializes information the current object
 * @param BilledReconciliation The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBilledReconciliation(writer: SerializationWriter, billedReconciliation: Partial<BilledReconciliation> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!billedReconciliation || isSerializingDerivedType) { return; }
    serializeEntity(writer, billedReconciliation, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param BilledUsage The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBilledUsage(writer: SerializationWriter, billedUsage: Partial<BilledUsage> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!billedUsage || isSerializingDerivedType) { return; }
    serializeEntity(writer, billedUsage, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param Billing The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBilling(writer: SerializationWriter, billing: Partial<Billing> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!billing || isSerializingDerivedType) { return; }
    serializeEntity(writer, billing, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<Manifest>("manifests", billing.manifests, serializeManifest);
    writer.writeCollectionOfObjectValues<Operation>("operations", billing.operations, serializeOperation);
    writer.writeObjectValue<BillingReconciliation>("reconciliation", billing.reconciliation, serializeBillingReconciliation);
    writer.writeObjectValue<AzureUsage>("usage", billing.usage, serializeAzureUsage);
}
/**
 * Serializes information the current object
 * @param BillingReconciliation The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBillingReconciliation(writer: SerializationWriter, billingReconciliation: Partial<BillingReconciliation> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!billingReconciliation || isSerializingDerivedType) { return; }
    serializeEntity(writer, billingReconciliation, isSerializingDerivedType)
    writer.writeObjectValue<BilledReconciliation>("billed", billingReconciliation.billed, serializeBilledReconciliation);
    writer.writeObjectValue<UnbilledReconciliation>("unbilled", billingReconciliation.unbilled, serializeUnbilledReconciliation);
}
/**
 * Serializes information the current object
 * @param Blob The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBlob(writer: SerializationWriter, blob: Partial<Blob> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!blob || isSerializingDerivedType) { return; }
    writer.writeStringValue("name", blob.name);
    writer.writeStringValue("@odata.type", blob.odataType);
    writer.writeStringValue("partitionValue", blob.partitionValue);
    writer.writeAdditionalData(blob.additionalData);
}
/**
 * Serializes information the current object
 * @param ExportSuccessOperation The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeExportSuccessOperation(writer: SerializationWriter, exportSuccessOperation: Partial<ExportSuccessOperation> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!exportSuccessOperation || isSerializingDerivedType) { return; }
    serializeOperation(writer, exportSuccessOperation, isSerializingDerivedType)
    writer.writeObjectValue<Manifest>("resourceLocation", exportSuccessOperation.resourceLocation, serializeManifest);
}
/**
 * Serializes information the current object
 * @param FailedOperation The instance to serialize from.
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeFailedOperation(writer: SerializationWriter, failedOperation: Partial<FailedOperation> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!failedOperation || isSerializingDerivedType) { return; }
    serializeOperation(writer, failedOperation, isSerializingDerivedType)
    writer.writeObjectValue<PublicError>("error", failedOperation.errorEscaped, serializePublicError);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Manifest The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeManifest(writer: SerializationWriter, manifest: Partial<Manifest> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!manifest || isSerializingDerivedType) { return; }
    serializeEntity(writer, manifest, isSerializingDerivedType)
    writer.writeNumberValue("blobCount", manifest.blobCount);
    writer.writeCollectionOfObjectValues<Blob>("blobs", manifest.blobs, serializeBlob);
    writer.writeDateValue("createdDateTime", manifest.createdDateTime);
    writer.writeStringValue("dataFormat", manifest.dataFormat);
    writer.writeStringValue("eTag", manifest.eTag);
    writer.writeStringValue("partitionType", manifest.partitionType);
    writer.writeStringValue("partnerTenantId", manifest.partnerTenantId);
    writer.writeStringValue("rootDirectory", manifest.rootDirectory);
    writer.writeStringValue("sasToken", manifest.sasToken);
    writer.writeStringValue("schemaVersion", manifest.schemaVersion);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param ManifestCollectionResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeManifestCollectionResponse(writer: SerializationWriter, manifestCollectionResponse: Partial<ManifestCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!manifestCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, manifestCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<Manifest>("value", manifestCollectionResponse.value, serializeManifest);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param Operation The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOperation(writer: SerializationWriter, operation: Partial<Operation> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!operation || isSerializingDerivedType) { return; }
    serializeEntity(writer, operation, isSerializingDerivedType)
    writer.writeDateValue("createdDateTime", operation.createdDateTime);
    writer.writeDateValue("lastActionDateTime", operation.lastActionDateTime);
    writer.writeEnumValue<LongRunningOperationStatus>("status", operation.status);
    switch (operation.odataType) {
        case "#microsoft.graph.partners.billing.exportSuccessOperation":
            serializeExportSuccessOperation(writer, operation, true);
        break;
        case "#microsoft.graph.partners.billing.failedOperation":
            serializeFailedOperation(writer, operation, true);
        break;
        case "#microsoft.graph.partners.billing.runningOperation":
            serializeRunningOperation(writer, operation, true);
        break;
    }
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param OperationCollectionResponse The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOperationCollectionResponse(writer: SerializationWriter, operationCollectionResponse: Partial<OperationCollectionResponse> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!operationCollectionResponse || isSerializingDerivedType) { return; }
    serializeBaseCollectionPaginationCountResponse(writer, operationCollectionResponse, isSerializingDerivedType)
    writer.writeCollectionOfObjectValues<Operation>("value", operationCollectionResponse.value, serializeOperation);
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param RunningOperation The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRunningOperation(writer: SerializationWriter, runningOperation: Partial<RunningOperation> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!runningOperation || isSerializingDerivedType) { return; }
    serializeOperation(writer, runningOperation, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UnbilledReconciliation The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUnbilledReconciliation(writer: SerializationWriter, unbilledReconciliation: Partial<UnbilledReconciliation> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!unbilledReconciliation || isSerializingDerivedType) { return; }
    serializeEntity(writer, unbilledReconciliation, isSerializingDerivedType)
}
/**
 * Serializes information the current object
 * @param isSerializingDerivedType A boolean indicating whether the serialization is for a derived type.
 * @param UnbilledUsage The instance to serialize from.
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUnbilledUsage(writer: SerializationWriter, unbilledUsage: Partial<UnbilledUsage> | undefined | null = {}, isSerializingDerivedType: boolean = false) : void {
    if (!unbilledUsage || isSerializingDerivedType) { return; }
    serializeEntity(writer, unbilledUsage, isSerializingDerivedType)
}
export interface UnbilledReconciliation extends Entity, Parsable {
}
export interface UnbilledUsage extends Entity, Parsable {
}
export const AttributeSetObject = {
    Full: "full",
    Basic: "basic",
    UnknownFutureValue: "unknownFutureValue",
} as const;
export const BillingPeriodObject = {
    Current: "current",
    Last: "last",
    UnknownFutureValue: "unknownFutureValue",
} as const;
/* tslint:enable */
/* eslint-enable */
