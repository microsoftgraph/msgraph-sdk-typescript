/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createRoomListFromDiscriminatorValue, type RoomList } from '@microsoft/msgraph-sdk/models/';
// @ts-ignore
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
// @ts-ignore
import { RoomsRequestBuilderNavigationMetadata, RoomsRequestBuilderRequestsMetadata, type RoomsRequestBuilder } from './rooms/';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Casts the previous resource to roomList.
 */
export interface GraphRoomListRequestBuilder extends BaseRequestBuilder<GraphRoomListRequestBuilder> {
    /**
     * Provides operations to manage the rooms property of the microsoft.graph.roomList entity.
     */
    get rooms(): RoomsRequestBuilder;
    /**
     * Get the item of type microsoft.graph.place as microsoft.graph.roomList
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RoomList>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<GraphRoomListRequestBuilderGetQueryParameters> | undefined) : Promise<RoomList | undefined>;
    /**
     * Get the item of type microsoft.graph.place as microsoft.graph.roomList
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<GraphRoomListRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Get the item of type microsoft.graph.place as microsoft.graph.roomList
 */
export interface GraphRoomListRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const GraphRoomListRequestBuilderUriTemplate = "{+baseurl}/places/{place%2Did}/graph.roomList{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const GraphRoomListRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const GraphRoomListRequestBuilderNavigationMetadata: Record<Exclude<keyof GraphRoomListRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    rooms: {
        requestsMetadata: RoomsRequestBuilderRequestsMetadata,
        navigationMetadata: RoomsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const GraphRoomListRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: GraphRoomListRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRoomListFromDiscriminatorValue,
        queryParametersMapper: GraphRoomListRequestBuilderGetQueryParametersMapper,
    },
};
/* tslint:enable */
/* eslint-enable */
