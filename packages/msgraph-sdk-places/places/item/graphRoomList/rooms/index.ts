/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createRoomCollectionResponseFromDiscriminatorValue, createRoomFromDiscriminatorValue, serializeRoom, type Room, type RoomCollectionResponse } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { CountRequestBuilderRequestsMetadata, type CountRequestBuilder } from './count/';
import { RoomItemRequestBuilderRequestsMetadata, type RoomItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

export type GetExpandQueryParameterType = (typeof GetExpandQueryParameterTypeObject)[keyof typeof GetExpandQueryParameterTypeObject];
export type GetOrderbyQueryParameterType = (typeof GetOrderbyQueryParameterTypeObject)[keyof typeof GetOrderbyQueryParameterTypeObject];
export type GetSelectQueryParameterType = (typeof GetSelectQueryParameterTypeObject)[keyof typeof GetSelectQueryParameterTypeObject];
/**
 * Provides operations to manage the rooms property of the microsoft.graph.roomList entity.
 */
export interface RoomsRequestBuilder extends BaseRequestBuilder<RoomsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the rooms property of the microsoft.graph.roomList entity.
     * @param roomId The unique identifier of room
     * @returns {RoomItemRequestBuilder}
     */
     byRoomId(roomId: string) : RoomItemRequestBuilder;
    /**
     * Get rooms from places
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<RoomCollectionResponse>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<RoomsRequestBuilderGetQueryParameters> | undefined) : Promise<RoomCollectionResponse | undefined>;
    /**
     * Create new navigation property to rooms for places
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Room>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     post(body: Room, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Room | undefined>;
    /**
     * Get rooms from places
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<RoomsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create new navigation property to rooms for places
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Room, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get rooms from places
 */
export interface RoomsRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: GetExpandQueryParameterType[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: GetOrderbyQueryParameterType[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: GetSelectQueryParameterType[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Uri template for the request builder.
 */
export const RoomsRequestBuilderUriTemplate = "{+baseurl}/places/{place%2Did}/graph.roomList/rooms{?%24count,%24expand,%24filter,%24orderby,%24search,%24select,%24skip,%24top}";
/**
 * Provides operations to manage the rooms property of the microsoft.graph.roomList entity.
 */
export const GetExpandQueryParameterTypeObject = {
    Asterisk: "*",
} as const;
/**
 * Provides operations to manage the rooms property of the microsoft.graph.roomList entity.
 */
export const GetOrderbyQueryParameterTypeObject = {
    Id: "id",
    IdDesc: "id desc",
    Address: "address",
    AddressDesc: "address desc",
    DisplayName: "displayName",
    DisplayNameDesc: "displayName desc",
    GeoCoordinates: "geoCoordinates",
    GeoCoordinatesDesc: "geoCoordinates desc",
    Phone: "phone",
    PhoneDesc: "phone desc",
    AudioDeviceName: "audioDeviceName",
    AudioDeviceNameDesc: "audioDeviceName desc",
    BookingType: "bookingType",
    BookingTypeDesc: "bookingType desc",
    Building: "building",
    BuildingDesc: "building desc",
    Capacity: "capacity",
    CapacityDesc: "capacity desc",
    DisplayDeviceName: "displayDeviceName",
    DisplayDeviceNameDesc: "displayDeviceName desc",
    EmailAddress: "emailAddress",
    EmailAddressDesc: "emailAddress desc",
    FloorLabel: "floorLabel",
    FloorLabelDesc: "floorLabel desc",
    FloorNumber: "floorNumber",
    FloorNumberDesc: "floorNumber desc",
    IsWheelChairAccessible: "isWheelChairAccessible",
    IsWheelChairAccessibleDesc: "isWheelChairAccessible desc",
    Label: "label",
    LabelDesc: "label desc",
    Nickname: "nickname",
    NicknameDesc: "nickname desc",
    Tags: "tags",
    TagsDesc: "tags desc",
    VideoDeviceName: "videoDeviceName",
    VideoDeviceNameDesc: "videoDeviceName desc",
} as const;
/**
 * Provides operations to manage the rooms property of the microsoft.graph.roomList entity.
 */
export const GetSelectQueryParameterTypeObject = {
    Id: "id",
    Address: "address",
    DisplayName: "displayName",
    GeoCoordinates: "geoCoordinates",
    Phone: "phone",
    AudioDeviceName: "audioDeviceName",
    BookingType: "bookingType",
    Building: "building",
    Capacity: "capacity",
    DisplayDeviceName: "displayDeviceName",
    EmailAddress: "emailAddress",
    FloorLabel: "floorLabel",
    FloorNumber: "floorNumber",
    IsWheelChairAccessible: "isWheelChairAccessible",
    Label: "label",
    Nickname: "nickname",
    Tags: "tags",
    VideoDeviceName: "videoDeviceName",
} as const;
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const RoomsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const RoomsRequestBuilderNavigationMetadata: Record<Exclude<keyof RoomsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byRoomId: {
        requestsMetadata: RoomItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["room%2Did"],
    },
    count: {
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const RoomsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: RoomsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRoomCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: RoomsRequestBuilderGetQueryParametersMapper,
    },
    post: {
        uriTemplate: RoomsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createRoomFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeRoom,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
