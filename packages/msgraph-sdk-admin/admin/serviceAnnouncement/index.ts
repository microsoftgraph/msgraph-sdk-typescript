/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createServiceAnnouncementFromDiscriminatorValue, serializeServiceAnnouncement, type ServiceAnnouncement } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { HealthOverviewsRequestBuilderNavigationMetadata, HealthOverviewsRequestBuilderRequestsMetadata, type HealthOverviewsRequestBuilder } from './healthOverviews/';
import { IssuesRequestBuilderNavigationMetadata, IssuesRequestBuilderRequestsMetadata, type IssuesRequestBuilder } from './issues/';
import { MessagesRequestBuilderNavigationMetadata, MessagesRequestBuilderRequestsMetadata, type MessagesRequestBuilder } from './messages/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the serviceAnnouncement property of the microsoft.graph.admin entity.
 */
export interface ServiceAnnouncementRequestBuilder extends BaseRequestBuilder<ServiceAnnouncementRequestBuilder> {
    /**
     * Provides operations to manage the healthOverviews property of the microsoft.graph.serviceAnnouncement entity.
     */
    get healthOverviews(): HealthOverviewsRequestBuilder;
    /**
     * Provides operations to manage the issues property of the microsoft.graph.serviceAnnouncement entity.
     */
    get issues(): IssuesRequestBuilder;
    /**
     * Provides operations to manage the messages property of the microsoft.graph.serviceAnnouncement entity.
     */
    get messages(): MessagesRequestBuilder;
    /**
     * Delete navigation property serviceAnnouncement for admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * A container for service communications resources. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ServiceAnnouncement>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<ServiceAnnouncementRequestBuilderGetQueryParameters> | undefined) : Promise<ServiceAnnouncement | undefined>;
    /**
     * Update the navigation property serviceAnnouncement in admin
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ServiceAnnouncement>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: ServiceAnnouncement, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ServiceAnnouncement | undefined>;
    /**
     * Delete navigation property serviceAnnouncement for admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * A container for service communications resources. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ServiceAnnouncementRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property serviceAnnouncement in admin
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: ServiceAnnouncement, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * A container for service communications resources. Read-only.
 */
export interface ServiceAnnouncementRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const ServiceAnnouncementRequestBuilderUriTemplate = "{+baseurl}/admin/serviceAnnouncement{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ServiceAnnouncementRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ServiceAnnouncementRequestBuilderNavigationMetadata: Record<Exclude<keyof ServiceAnnouncementRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    healthOverviews: {
        requestsMetadata: HealthOverviewsRequestBuilderRequestsMetadata,
        navigationMetadata: HealthOverviewsRequestBuilderNavigationMetadata,
    },
    issues: {
        requestsMetadata: IssuesRequestBuilderRequestsMetadata,
        navigationMetadata: IssuesRequestBuilderNavigationMetadata,
    },
    messages: {
        requestsMetadata: MessagesRequestBuilderRequestsMetadata,
        navigationMetadata: MessagesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ServiceAnnouncementRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: ServiceAnnouncementRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: ServiceAnnouncementRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createServiceAnnouncementFromDiscriminatorValue,
        queryParametersMapper: ServiceAnnouncementRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: ServiceAnnouncementRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createServiceAnnouncementFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeServiceAnnouncement,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
