/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSharepointFromDiscriminatorValue, serializeSharepoint, type Sharepoint } from '@microsoft/msgraph-sdk/models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '@microsoft/msgraph-sdk/models/oDataErrors/';
import { SettingsRequestBuilderRequestsMetadata, type SettingsRequestBuilder } from './settings/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the sharepoint property of the microsoft.graph.admin entity.
 */
export interface SharepointRequestBuilder extends BaseRequestBuilder<SharepointRequestBuilder> {
    /**
     * Provides operations to manage the settings property of the microsoft.graph.sharepoint entity.
     */
    get settings(): SettingsRequestBuilder;
    /**
     * Delete navigation property sharepoint for admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get sharepoint from admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Sharepoint>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<SharepointRequestBuilderGetQueryParameters> | undefined) : Promise<Sharepoint | undefined>;
    /**
     * Update the navigation property sharepoint in admin
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Sharepoint>}
     * @throws {ODataError} error when the service returns a 4XX or 5XX status code
     */
     patch(body: Sharepoint, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Sharepoint | undefined>;
    /**
     * Delete navigation property sharepoint for admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get sharepoint from admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SharepointRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property sharepoint in admin
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPatchRequestInformation(body: Sharepoint, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get sharepoint from admin
 */
export interface SharepointRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Uri template for the request builder.
 */
export const SharepointRequestBuilderUriTemplate = "{+baseurl}/admin/sharepoint{?%24expand,%24select}";
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SharepointRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SharepointRequestBuilderNavigationMetadata: Record<Exclude<keyof SharepointRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    settings: {
        requestsMetadata: SettingsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SharepointRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: SharepointRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        uriTemplate: SharepointRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSharepointFromDiscriminatorValue,
        queryParametersMapper: SharepointRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        uriTemplate: SharepointRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSharepointFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSharepoint,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
