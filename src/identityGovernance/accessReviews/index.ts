/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAccessReviewSetFromDiscriminatorValue, serializeAccessReviewSet, type AccessReviewSet } from '../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../models/oDataErrors/';
import { DefinitionsRequestBuilderNavigationMetadata, DefinitionsRequestBuilderRequestsMetadata, DefinitionsRequestBuilderUriTemplate, type DefinitionsRequestBuilder } from './definitions/';
import { HistoryDefinitionsRequestBuilderNavigationMetadata, HistoryDefinitionsRequestBuilderRequestsMetadata, HistoryDefinitionsRequestBuilderUriTemplate, type HistoryDefinitionsRequestBuilder } from './historyDefinitions/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the accessReviews property of the microsoft.graph.identityGovernance entity.
 */
export interface AccessReviewsRequestBuilder extends BaseRequestBuilder<AccessReviewsRequestBuilder> {
    /**
     * Provides operations to manage the definitions property of the microsoft.graph.accessReviewSet entity.
     */
    get definitions(): DefinitionsRequestBuilder;
    /**
     * Provides operations to manage the historyDefinitions property of the microsoft.graph.accessReviewSet entity.
     */
    get historyDefinitions(): HistoryDefinitionsRequestBuilder;
    /**
     * Delete navigation property accessReviews for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get accessReviews from identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccessReviewSet
     */
     get(requestConfiguration?: RequestConfiguration<AccessReviewsRequestBuilderGetQueryParameters> | undefined) : Promise<AccessReviewSet | undefined>;
    /**
     * Update the navigation property accessReviews in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccessReviewSet
     */
     patch(body: AccessReviewSet, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AccessReviewSet | undefined>;
    /**
     * Delete navigation property accessReviews for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get accessReviews from identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AccessReviewsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property accessReviews in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: AccessReviewSet, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get accessReviews from identityGovernance
 */
export interface AccessReviewsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AccessReviewsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AccessReviewsRequestBuilderNavigationMetadata: Record<Exclude<keyof AccessReviewsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    definitions: {
        uriTemplate: DefinitionsRequestBuilderUriTemplate,
        requestsMetadata: DefinitionsRequestBuilderRequestsMetadata,
        navigationMetadata: DefinitionsRequestBuilderNavigationMetadata,
    },
    historyDefinitions: {
        uriTemplate: HistoryDefinitionsRequestBuilderUriTemplate,
        requestsMetadata: HistoryDefinitionsRequestBuilderRequestsMetadata,
        navigationMetadata: HistoryDefinitionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AccessReviewsRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAccessReviewSetFromDiscriminatorValue,
        queryParametersMapper: AccessReviewsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAccessReviewSetFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAccessReviewSet,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const AccessReviewsRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/accessReviews{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
