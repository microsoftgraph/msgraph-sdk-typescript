// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttributeDefinitionFromDiscriminatorValue, serializeAttributeDefinition, type AttributeDefinition } from '../../../../../../../models/attributeDefinition';
import { createExpressionInputObjectFromDiscriminatorValue, serializeExpressionInputObject, type ExpressionInputObject } from '../../../../../../../models/expressionInputObject';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createParseExpressionPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoParseExpressionPostRequestBody;
}
export function deserializeIntoParseExpressionPostRequestBody(parseExpressionPostRequestBody: ParseExpressionPostRequestBody | undefined = {} as ParseExpressionPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "expression": n => { parseExpressionPostRequestBody.expression = n.getStringValue(); },
        "targetAttributeDefinition": n => { parseExpressionPostRequestBody.targetAttributeDefinition = n.getObjectValue<AttributeDefinition>(createAttributeDefinitionFromDiscriminatorValue); },
        "testInputObject": n => { parseExpressionPostRequestBody.testInputObject = n.getObjectValue<ExpressionInputObject>(createExpressionInputObjectFromDiscriminatorValue); },
    }
}
export interface ParseExpressionPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The expression property
     */
    expression?: string;
    /**
     * The targetAttributeDefinition property
     */
    targetAttributeDefinition?: AttributeDefinition;
    /**
     * The testInputObject property
     */
    testInputObject?: ExpressionInputObject;
}
export function serializeParseExpressionPostRequestBody(writer: SerializationWriter, parseExpressionPostRequestBody: ParseExpressionPostRequestBody | undefined = {} as ParseExpressionPostRequestBody) : void {
        writer.writeStringValue("expression", parseExpressionPostRequestBody.expression);
        writer.writeObjectValue<AttributeDefinition>("targetAttributeDefinition", parseExpressionPostRequestBody.targetAttributeDefinition, serializeAttributeDefinition);
        writer.writeObjectValue<ExpressionInputObject>("testInputObject", parseExpressionPostRequestBody.testInputObject, serializeExpressionInputObject);
        writer.writeAdditionalData(parseExpressionPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
