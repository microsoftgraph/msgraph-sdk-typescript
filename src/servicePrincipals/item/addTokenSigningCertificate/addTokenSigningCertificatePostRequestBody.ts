// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AddTokenSigningCertificatePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The endDateTime property
     */
    endDateTime?: Date;
}
export function createAddTokenSigningCertificatePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAddTokenSigningCertificatePostRequestBody;
}
export function deserializeIntoAddTokenSigningCertificatePostRequestBody(addTokenSigningCertificatePostRequestBody: AddTokenSigningCertificatePostRequestBody | undefined = {} as AddTokenSigningCertificatePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { addTokenSigningCertificatePostRequestBody.displayName = n.getStringValue(); },
        "endDateTime": n => { addTokenSigningCertificatePostRequestBody.endDateTime = n.getDateValue(); },
    }
}
export function serializeAddTokenSigningCertificatePostRequestBody(writer: SerializationWriter, addTokenSigningCertificatePostRequestBody: AddTokenSigningCertificatePostRequestBody | undefined = {} as AddTokenSigningCertificatePostRequestBody) : void {
        writer.writeStringValue("displayName", addTokenSigningCertificatePostRequestBody.displayName);
        writer.writeDateValue("endDateTime", addTokenSigningCertificatePostRequestBody.endDateTime);
        writer.writeAdditionalData(addTokenSigningCertificatePostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
