import { createSearchRequestFromDiscriminatorValue, serializeSearchRequest, type SearchRequest } from '../../models/searchRequest';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createQueryPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoQueryPostRequestBody;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoQueryPostRequestBody(queryPostRequestBody: QueryPostRequestBody | undefined = {} as QueryPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "requests": n => { queryPostRequestBody.requests = n.getCollectionOfObjectValues<SearchRequest>(createSearchRequestFromDiscriminatorValue); },
    }
}
export interface QueryPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The requests property
     */
    requests?: SearchRequest[];
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeQueryPostRequestBody(writer: SerializationWriter, queryPostRequestBody: QueryPostRequestBody | undefined = {} as QueryPostRequestBody) : void {
        writer.writeCollectionOfObjectValues<SearchRequest>("requests", queryPostRequestBody.requests, );
        writer.writeAdditionalData(queryPostRequestBody.additionalData);
}
