// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type ODataError } from '../../../../models/oDataErrors/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError } from '../../../../models/oDataErrors/oDataError';
import { createGetByUserIdAndRoleWithUserIdWithRoleGetResponseFromDiscriminatorValue } from './getByUserIdAndRoleWithUserIdWithRoleGetResponse';
import { type GetByUserIdAndRoleWithUserIdWithRoleGetResponse } from './index';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

export interface GetByUserIdAndRoleWithUserIdWithRoleRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Provides operations to call the getByUserIdAndRole method.
 */
export class GetByUserIdAndRoleWithUserIdWithRoleRequestBuilder extends BaseRequestBuilder {
    /**
     * Instantiates a new GetByUserIdAndRoleWithUserIdWithRoleRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     * @param role Usage: role='{role}'
     * @param userId Usage: userId='{userId}'
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter, role?: string | undefined, userId?: string | undefined) {
        super(pathParameters, requestAdapter, "{+baseurl}/solutions/virtualEvents/webinars/getByUserIdAndRole(userId='{userId}',role='{role}'){?%24top,%24skip,%24search,%24filter,%24count,%24select,%24orderby}");
        this.pathParameters["role"] = role
        this.pathParameters["userId"] = userId
    };
    /**
     * Invoke function getByUserIdAndRole
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of GetByUserIdAndRoleWithUserIdWithRoleGetResponse
     */
    public get(requestConfiguration?: RequestConfiguration<GetByUserIdAndRoleWithUserIdWithRoleRequestBuilderGetQueryParameters> | undefined) : Promise<GetByUserIdAndRoleWithUserIdWithRoleGetResponse | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<GetByUserIdAndRoleWithUserIdWithRoleGetResponse>(requestInfo, createGetByUserIdAndRoleWithUserIdWithRoleGetResponseFromDiscriminatorValue, errorMapping);
    };
    /**
     * Invoke function getByUserIdAndRole
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<GetByUserIdAndRoleWithUserIdWithRoleRequestBuilderGetQueryParameters> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration, getByUserIdAndRoleWithUserIdWithRoleRequestBuilderGetQueryParametersMapper);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    };
    /**
     * Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
     * @param rawUrl The raw URL to use for the request builder.
     * @returns a getByUserIdAndRoleWithUserIdWithRoleRequestBuilder
     */
    public withUrl(rawUrl: string) : GetByUserIdAndRoleWithUserIdWithRoleRequestBuilder {
        if(!rawUrl) throw new Error("rawUrl cannot be undefined");
        return new GetByUserIdAndRoleWithUserIdWithRoleRequestBuilder(rawUrl, this.requestAdapter);
    };
}
const getByUserIdAndRoleWithUserIdWithRoleRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
// tslint:enable
// eslint-enable
