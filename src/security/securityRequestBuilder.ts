// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type ODataError } from '../models/oDataErrors/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError } from '../models/oDataErrors/oDataError';
import { createSecurityFromDiscriminatorValue, deserializeIntoSecurity, serializeSecurity, type Security } from '../models/security';
import { Alerts_v2RequestBuilder } from './alerts_v2/alerts_v2RequestBuilder';
import { AlertsRequestBuilder } from './alerts/alertsRequestBuilder';
import { AttackSimulationRequestBuilder } from './attackSimulation/attackSimulationRequestBuilder';
import { CasesRequestBuilder } from './cases/casesRequestBuilder';
import { IncidentsRequestBuilder } from './incidents/incidentsRequestBuilder';
import { MicrosoftGraphSecurityRunHuntingQueryRequestBuilder } from './microsoftGraphSecurityRunHuntingQuery/microsoftGraphSecurityRunHuntingQueryRequestBuilder';
import { SecureScoreControlProfilesRequestBuilder } from './secureScoreControlProfiles/secureScoreControlProfilesRequestBuilder';
import { SecureScoresRequestBuilder } from './secureScores/secureScoresRequestBuilder';
import { SubjectRightsRequestsRequestBuilder } from './subjectRightsRequests/subjectRightsRequestsRequestBuilder';
import { ThreatIntelligenceRequestBuilder } from './threatIntelligence/threatIntelligenceRequestBuilder';
import { TriggersRequestBuilder } from './triggers/triggersRequestBuilder';
import { TriggerTypesRequestBuilder } from './triggerTypes/triggerTypesRequestBuilder';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

export interface SecurityRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Provides operations to manage the security singleton.
 */
export class SecurityRequestBuilder extends BaseRequestBuilder {
    /**
     * Provides operations to manage the alerts property of the microsoft.graph.security entity.
     */
    public get alerts(): AlertsRequestBuilder {
        return new AlertsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the alerts_v2 property of the microsoft.graph.security entity.
     */
    public get alerts_v2(): Alerts_v2RequestBuilder {
        return new Alerts_v2RequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the attackSimulation property of the microsoft.graph.security entity.
     */
    public get attackSimulation(): AttackSimulationRequestBuilder {
        return new AttackSimulationRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the cases property of the microsoft.graph.security entity.
     */
    public get cases(): CasesRequestBuilder {
        return new CasesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the incidents property of the microsoft.graph.security entity.
     */
    public get incidents(): IncidentsRequestBuilder {
        return new IncidentsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to call the runHuntingQuery method.
     */
    public get microsoftGraphSecurityRunHuntingQuery(): MicrosoftGraphSecurityRunHuntingQueryRequestBuilder {
        return new MicrosoftGraphSecurityRunHuntingQueryRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the secureScoreControlProfiles property of the microsoft.graph.security entity.
     */
    public get secureScoreControlProfiles(): SecureScoreControlProfilesRequestBuilder {
        return new SecureScoreControlProfilesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the secureScores property of the microsoft.graph.security entity.
     */
    public get secureScores(): SecureScoresRequestBuilder {
        return new SecureScoresRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the subjectRightsRequests property of the microsoft.graph.security entity.
     */
    public get subjectRightsRequests(): SubjectRightsRequestsRequestBuilder {
        return new SubjectRightsRequestsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the threatIntelligence property of the microsoft.graph.security entity.
     */
    public get threatIntelligence(): ThreatIntelligenceRequestBuilder {
        return new ThreatIntelligenceRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the triggers property of the microsoft.graph.security entity.
     */
    public get triggers(): TriggersRequestBuilder {
        return new TriggersRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the triggerTypes property of the microsoft.graph.security entity.
     */
    public get triggerTypes(): TriggerTypesRequestBuilder {
        return new TriggerTypesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Instantiates a new SecurityRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/security{?%24select,%24expand}");
    };
    /**
     * Get security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Security
     */
    public get(requestConfiguration?: RequestConfiguration<SecurityRequestBuilderGetQueryParameters> | undefined) : Promise<Security | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<Security>(requestInfo, createSecurityFromDiscriminatorValue, errorMapping);
    };
    /**
     * Update security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Security
     */
    public patch(body: Security, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Security | undefined> {
        const requestInfo = this.toPatchRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<Security>(requestInfo, createSecurityFromDiscriminatorValue, errorMapping);
    };
    /**
     * Get security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<SecurityRequestBuilderGetQueryParameters> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration, securityRequestBuilderGetQueryParametersMapper);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    };
    /**
     * Update security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPatchRequestInformation(body: Security, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.PATCH, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSecurity);
        return requestInfo;
    };
    /**
     * Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
     * @param rawUrl The raw URL to use for the request builder.
     * @returns a securityRequestBuilder
     */
    public withUrl(rawUrl: string) : SecurityRequestBuilder {
        if(!rawUrl) throw new Error("rawUrl cannot be undefined");
        return new SecurityRequestBuilder(rawUrl, this.requestAdapter);
    };
}
const securityRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
// tslint:enable
// eslint-enable
