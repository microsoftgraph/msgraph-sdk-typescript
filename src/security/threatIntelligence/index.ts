/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../models/oDataErrors/';
import { createThreatIntelligenceFromDiscriminatorValue, serializeThreatIntelligence, type ThreatIntelligence } from '../../models/security/';
import { ArticleIndicatorsRequestBuilderNavigationMetadata, ArticleIndicatorsRequestBuilderRequestsMetadata, ArticleIndicatorsRequestBuilderUriTemplate, type ArticleIndicatorsRequestBuilder } from './articleIndicators/';
import { ArticlesRequestBuilderNavigationMetadata, ArticlesRequestBuilderRequestsMetadata, ArticlesRequestBuilderUriTemplate, type ArticlesRequestBuilder } from './articles/';
import { HostComponentsRequestBuilderNavigationMetadata, HostComponentsRequestBuilderRequestsMetadata, HostComponentsRequestBuilderUriTemplate, type HostComponentsRequestBuilder } from './hostComponents/';
import { HostCookiesRequestBuilderNavigationMetadata, HostCookiesRequestBuilderRequestsMetadata, HostCookiesRequestBuilderUriTemplate, type HostCookiesRequestBuilder } from './hostCookies/';
import { HostPairsRequestBuilderNavigationMetadata, HostPairsRequestBuilderRequestsMetadata, HostPairsRequestBuilderUriTemplate, type HostPairsRequestBuilder } from './hostPairs/';
import { HostPortsRequestBuilderNavigationMetadata, HostPortsRequestBuilderRequestsMetadata, HostPortsRequestBuilderUriTemplate, type HostPortsRequestBuilder } from './hostPorts/';
import { HostsRequestBuilderNavigationMetadata, HostsRequestBuilderRequestsMetadata, HostsRequestBuilderUriTemplate, type HostsRequestBuilder } from './hosts/';
import { HostSslCertificatesRequestBuilderNavigationMetadata, HostSslCertificatesRequestBuilderRequestsMetadata, HostSslCertificatesRequestBuilderUriTemplate, type HostSslCertificatesRequestBuilder } from './hostSslCertificates/';
import { HostTrackersRequestBuilderNavigationMetadata, HostTrackersRequestBuilderRequestsMetadata, HostTrackersRequestBuilderUriTemplate, type HostTrackersRequestBuilder } from './hostTrackers/';
import { IntelligenceProfileIndicatorsRequestBuilderNavigationMetadata, IntelligenceProfileIndicatorsRequestBuilderRequestsMetadata, IntelligenceProfileIndicatorsRequestBuilderUriTemplate, type IntelligenceProfileIndicatorsRequestBuilder } from './intelligenceProfileIndicators/';
import { IntelProfilesRequestBuilderNavigationMetadata, IntelProfilesRequestBuilderRequestsMetadata, IntelProfilesRequestBuilderUriTemplate, type IntelProfilesRequestBuilder } from './intelProfiles/';
import { PassiveDnsRecordsRequestBuilderNavigationMetadata, PassiveDnsRecordsRequestBuilderRequestsMetadata, PassiveDnsRecordsRequestBuilderUriTemplate, type PassiveDnsRecordsRequestBuilder } from './passiveDnsRecords/';
import { SslCertificatesRequestBuilderNavigationMetadata, SslCertificatesRequestBuilderRequestsMetadata, SslCertificatesRequestBuilderUriTemplate, type SslCertificatesRequestBuilder } from './sslCertificates/';
import { SubdomainsRequestBuilderNavigationMetadata, SubdomainsRequestBuilderRequestsMetadata, SubdomainsRequestBuilderUriTemplate, type SubdomainsRequestBuilder } from './subdomains/';
import { type VulnerabilitiesRequestBuilder, VulnerabilitiesRequestBuilderNavigationMetadata, VulnerabilitiesRequestBuilderRequestsMetadata, VulnerabilitiesRequestBuilderUriTemplate } from './vulnerabilities/';
import { type WhoisHistoryRecordsRequestBuilder, WhoisHistoryRecordsRequestBuilderNavigationMetadata, WhoisHistoryRecordsRequestBuilderRequestsMetadata, WhoisHistoryRecordsRequestBuilderUriTemplate } from './whoisHistoryRecords/';
import { type WhoisRecordsRequestBuilder, WhoisRecordsRequestBuilderNavigationMetadata, WhoisRecordsRequestBuilderRequestsMetadata, WhoisRecordsRequestBuilderUriTemplate } from './whoisRecords/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the threatIntelligence property of the microsoft.graph.security entity.
 */
export interface ThreatIntelligenceRequestBuilder extends BaseRequestBuilder<ThreatIntelligenceRequestBuilder> {
    /**
     * Provides operations to manage the articleIndicators property of the microsoft.graph.security.threatIntelligence entity.
     */
    get articleIndicators(): ArticleIndicatorsRequestBuilder;
    /**
     * Provides operations to manage the articles property of the microsoft.graph.security.threatIntelligence entity.
     */
    get articles(): ArticlesRequestBuilder;
    /**
     * Provides operations to manage the hostComponents property of the microsoft.graph.security.threatIntelligence entity.
     */
    get hostComponents(): HostComponentsRequestBuilder;
    /**
     * Provides operations to manage the hostCookies property of the microsoft.graph.security.threatIntelligence entity.
     */
    get hostCookies(): HostCookiesRequestBuilder;
    /**
     * Provides operations to manage the hostPairs property of the microsoft.graph.security.threatIntelligence entity.
     */
    get hostPairs(): HostPairsRequestBuilder;
    /**
     * Provides operations to manage the hostPorts property of the microsoft.graph.security.threatIntelligence entity.
     */
    get hostPorts(): HostPortsRequestBuilder;
    /**
     * Provides operations to manage the hosts property of the microsoft.graph.security.threatIntelligence entity.
     */
    get hosts(): HostsRequestBuilder;
    /**
     * Provides operations to manage the hostSslCertificates property of the microsoft.graph.security.threatIntelligence entity.
     */
    get hostSslCertificates(): HostSslCertificatesRequestBuilder;
    /**
     * Provides operations to manage the hostTrackers property of the microsoft.graph.security.threatIntelligence entity.
     */
    get hostTrackers(): HostTrackersRequestBuilder;
    /**
     * Provides operations to manage the intelligenceProfileIndicators property of the microsoft.graph.security.threatIntelligence entity.
     */
    get intelligenceProfileIndicators(): IntelligenceProfileIndicatorsRequestBuilder;
    /**
     * Provides operations to manage the intelProfiles property of the microsoft.graph.security.threatIntelligence entity.
     */
    get intelProfiles(): IntelProfilesRequestBuilder;
    /**
     * Provides operations to manage the passiveDnsRecords property of the microsoft.graph.security.threatIntelligence entity.
     */
    get passiveDnsRecords(): PassiveDnsRecordsRequestBuilder;
    /**
     * Provides operations to manage the sslCertificates property of the microsoft.graph.security.threatIntelligence entity.
     */
    get sslCertificates(): SslCertificatesRequestBuilder;
    /**
     * Provides operations to manage the subdomains property of the microsoft.graph.security.threatIntelligence entity.
     */
    get subdomains(): SubdomainsRequestBuilder;
    /**
     * Provides operations to manage the vulnerabilities property of the microsoft.graph.security.threatIntelligence entity.
     */
    get vulnerabilities(): VulnerabilitiesRequestBuilder;
    /**
     * Provides operations to manage the whoisHistoryRecords property of the microsoft.graph.security.threatIntelligence entity.
     */
    get whoisHistoryRecords(): WhoisHistoryRecordsRequestBuilder;
    /**
     * Provides operations to manage the whoisRecords property of the microsoft.graph.security.threatIntelligence entity.
     */
    get whoisRecords(): WhoisRecordsRequestBuilder;
    /**
     * Delete navigation property threatIntelligence for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get threatIntelligence from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ThreatIntelligence
     */
     get(requestConfiguration?: RequestConfiguration<ThreatIntelligenceRequestBuilderGetQueryParameters> | undefined) : Promise<ThreatIntelligence | undefined>;
    /**
     * Update the navigation property threatIntelligence in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ThreatIntelligence
     */
     patch(body: ThreatIntelligence, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ThreatIntelligence | undefined>;
    /**
     * Delete navigation property threatIntelligence for security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get threatIntelligence from security
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ThreatIntelligenceRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property threatIntelligence in security
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: ThreatIntelligence, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get threatIntelligence from security
 */
export interface ThreatIntelligenceRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ThreatIntelligenceRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ThreatIntelligenceRequestBuilderNavigationMetadata: Record<Exclude<keyof ThreatIntelligenceRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    articleIndicators: {
        uriTemplate: ArticleIndicatorsRequestBuilderUriTemplate,
        requestsMetadata: ArticleIndicatorsRequestBuilderRequestsMetadata,
        navigationMetadata: ArticleIndicatorsRequestBuilderNavigationMetadata,
    },
    articles: {
        uriTemplate: ArticlesRequestBuilderUriTemplate,
        requestsMetadata: ArticlesRequestBuilderRequestsMetadata,
        navigationMetadata: ArticlesRequestBuilderNavigationMetadata,
    },
    hostComponents: {
        uriTemplate: HostComponentsRequestBuilderUriTemplate,
        requestsMetadata: HostComponentsRequestBuilderRequestsMetadata,
        navigationMetadata: HostComponentsRequestBuilderNavigationMetadata,
    },
    hostCookies: {
        uriTemplate: HostCookiesRequestBuilderUriTemplate,
        requestsMetadata: HostCookiesRequestBuilderRequestsMetadata,
        navigationMetadata: HostCookiesRequestBuilderNavigationMetadata,
    },
    hostPairs: {
        uriTemplate: HostPairsRequestBuilderUriTemplate,
        requestsMetadata: HostPairsRequestBuilderRequestsMetadata,
        navigationMetadata: HostPairsRequestBuilderNavigationMetadata,
    },
    hostPorts: {
        uriTemplate: HostPortsRequestBuilderUriTemplate,
        requestsMetadata: HostPortsRequestBuilderRequestsMetadata,
        navigationMetadata: HostPortsRequestBuilderNavigationMetadata,
    },
    hosts: {
        uriTemplate: HostsRequestBuilderUriTemplate,
        requestsMetadata: HostsRequestBuilderRequestsMetadata,
        navigationMetadata: HostsRequestBuilderNavigationMetadata,
    },
    hostSslCertificates: {
        uriTemplate: HostSslCertificatesRequestBuilderUriTemplate,
        requestsMetadata: HostSslCertificatesRequestBuilderRequestsMetadata,
        navigationMetadata: HostSslCertificatesRequestBuilderNavigationMetadata,
    },
    hostTrackers: {
        uriTemplate: HostTrackersRequestBuilderUriTemplate,
        requestsMetadata: HostTrackersRequestBuilderRequestsMetadata,
        navigationMetadata: HostTrackersRequestBuilderNavigationMetadata,
    },
    intelligenceProfileIndicators: {
        uriTemplate: IntelligenceProfileIndicatorsRequestBuilderUriTemplate,
        requestsMetadata: IntelligenceProfileIndicatorsRequestBuilderRequestsMetadata,
        navigationMetadata: IntelligenceProfileIndicatorsRequestBuilderNavigationMetadata,
    },
    intelProfiles: {
        uriTemplate: IntelProfilesRequestBuilderUriTemplate,
        requestsMetadata: IntelProfilesRequestBuilderRequestsMetadata,
        navigationMetadata: IntelProfilesRequestBuilderNavigationMetadata,
    },
    passiveDnsRecords: {
        uriTemplate: PassiveDnsRecordsRequestBuilderUriTemplate,
        requestsMetadata: PassiveDnsRecordsRequestBuilderRequestsMetadata,
        navigationMetadata: PassiveDnsRecordsRequestBuilderNavigationMetadata,
    },
    sslCertificates: {
        uriTemplate: SslCertificatesRequestBuilderUriTemplate,
        requestsMetadata: SslCertificatesRequestBuilderRequestsMetadata,
        navigationMetadata: SslCertificatesRequestBuilderNavigationMetadata,
    },
    subdomains: {
        uriTemplate: SubdomainsRequestBuilderUriTemplate,
        requestsMetadata: SubdomainsRequestBuilderRequestsMetadata,
        navigationMetadata: SubdomainsRequestBuilderNavigationMetadata,
    },
    vulnerabilities: {
        uriTemplate: VulnerabilitiesRequestBuilderUriTemplate,
        requestsMetadata: VulnerabilitiesRequestBuilderRequestsMetadata,
        navigationMetadata: VulnerabilitiesRequestBuilderNavigationMetadata,
    },
    whoisHistoryRecords: {
        uriTemplate: WhoisHistoryRecordsRequestBuilderUriTemplate,
        requestsMetadata: WhoisHistoryRecordsRequestBuilderRequestsMetadata,
        navigationMetadata: WhoisHistoryRecordsRequestBuilderNavigationMetadata,
    },
    whoisRecords: {
        uriTemplate: WhoisRecordsRequestBuilderUriTemplate,
        requestsMetadata: WhoisRecordsRequestBuilderRequestsMetadata,
        navigationMetadata: WhoisRecordsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ThreatIntelligenceRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createThreatIntelligenceFromDiscriminatorValue,
        queryParametersMapper: ThreatIntelligenceRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createThreatIntelligenceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeThreatIntelligence,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const ThreatIntelligenceRequestBuilderUriTemplate = "{+baseurl}/security/threatIntelligence{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
