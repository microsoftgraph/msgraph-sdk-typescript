/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createProfilePhotoFromDiscriminatorValue, type ProfilePhoto } from '../../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../models/oDataErrors/';
import { ContentRequestBuilderRequestsMetadata, ContentRequestBuilderUriTemplate, type ContentRequestBuilder } from './value/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the photos property of the microsoft.graph.user entity.
 */
export interface ProfilePhotoItemRequestBuilder extends BaseRequestBuilder<ProfilePhotoItemRequestBuilder> {
    /**
     * Provides operations to manage the media for the user entity.
     */
    get content(): ContentRequestBuilder;
    /**
     * The collection of the user's profile photos in different sizes. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ProfilePhoto
     */
     get(requestConfiguration?: RequestConfiguration<ProfilePhotoItemRequestBuilderGetQueryParameters> | undefined) : Promise<ProfilePhoto | undefined>;
    /**
     * The collection of the user's profile photos in different sizes. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ProfilePhotoItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * The collection of the user's profile photos in different sizes. Read-only.
 */
export interface ProfilePhotoItemRequestBuilderGetQueryParameters {
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ProfilePhotoItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ProfilePhotoItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ProfilePhotoItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    content: {
        uriTemplate: ContentRequestBuilderUriTemplate,
        requestsMetadata: ContentRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ProfilePhotoItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createProfilePhotoFromDiscriminatorValue,
        queryParametersMapper: ProfilePhotoItemRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Uri template for the request builder.
 */
export const ProfilePhotoItemRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/photos/{profilePhoto%2Did}{?%24select}";
/* tslint:enable */
/* eslint-enable */
