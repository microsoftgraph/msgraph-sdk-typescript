// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AcceptPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The Comment property
     */
    comment?: string;
    /**
     * The SendResponse property
     */
    sendResponse?: boolean;
}
export function createAcceptPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAcceptPostRequestBody;
}
export function deserializeIntoAcceptPostRequestBody(acceptPostRequestBody: AcceptPostRequestBody | undefined = {} as AcceptPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "comment": n => { acceptPostRequestBody.comment = n.getStringValue(); },
        "sendResponse": n => { acceptPostRequestBody.sendResponse = n.getBooleanValue(); },
    }
}
export function serializeAcceptPostRequestBody(writer: SerializationWriter, acceptPostRequestBody: AcceptPostRequestBody | undefined = {} as AcceptPostRequestBody) : void {
        writer.writeStringValue("Comment", acceptPostRequestBody.comment);
        writer.writeBooleanValue("SendResponse", acceptPostRequestBody.sendResponse);
        writer.writeAdditionalData(acceptPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
