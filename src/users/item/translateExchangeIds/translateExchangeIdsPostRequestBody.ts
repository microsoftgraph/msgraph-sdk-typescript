import { ExchangeIdFormat } from '../../../models/exchangeIdFormat';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createTranslateExchangeIdsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTranslateExchangeIdsPostRequestBody;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoTranslateExchangeIdsPostRequestBody(translateExchangeIdsPostRequestBody: TranslateExchangeIdsPostRequestBody | undefined = {} as TranslateExchangeIdsPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "inputIds": n => { translateExchangeIdsPostRequestBody.inputIds = n.getCollectionOfPrimitiveValues<string>(); },
        "sourceIdType": n => { translateExchangeIdsPostRequestBody.sourceIdType = n.getEnumValue<ExchangeIdFormat>(ExchangeIdFormat); },
        "targetIdType": n => { translateExchangeIdsPostRequestBody.targetIdType = n.getEnumValue<ExchangeIdFormat>(ExchangeIdFormat); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeTranslateExchangeIdsPostRequestBody(writer: SerializationWriter, translateExchangeIdsPostRequestBody: TranslateExchangeIdsPostRequestBody | undefined = {} as TranslateExchangeIdsPostRequestBody) : void {
        writer.writeCollectionOfPrimitiveValues<string>("inputIds", translateExchangeIdsPostRequestBody.inputIds);
        writer.writeEnumValue<ExchangeIdFormat>("sourceIdType", translateExchangeIdsPostRequestBody.sourceIdType);
        writer.writeEnumValue<ExchangeIdFormat>("targetIdType", translateExchangeIdsPostRequestBody.targetIdType);
        writer.writeAdditionalData(translateExchangeIdsPostRequestBody.additionalData);
}
export interface TranslateExchangeIdsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The InputIds property
     */
    inputIds?: string[];
    /**
     * The SourceIdType property
     */
    sourceIdType?: ExchangeIdFormat;
    /**
     * The TargetIdType property
     */
    targetIdType?: ExchangeIdFormat;
}
