import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createGetOmaSettingPlainTextValueWithSecretReferenceValueIdResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGetOmaSettingPlainTextValueWithSecretReferenceValueIdResponse;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoGetOmaSettingPlainTextValueWithSecretReferenceValueIdResponse(getOmaSettingPlainTextValueWithSecretReferenceValueIdResponse: GetOmaSettingPlainTextValueWithSecretReferenceValueIdResponse | undefined = {} as GetOmaSettingPlainTextValueWithSecretReferenceValueIdResponse) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { getOmaSettingPlainTextValueWithSecretReferenceValueIdResponse.value = n.getStringValue(); },
    }
}
export interface GetOmaSettingPlainTextValueWithSecretReferenceValueIdResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The value property
     */
    value?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeGetOmaSettingPlainTextValueWithSecretReferenceValueIdResponse(writer: SerializationWriter, getOmaSettingPlainTextValueWithSecretReferenceValueIdResponse: GetOmaSettingPlainTextValueWithSecretReferenceValueIdResponse | undefined = {} as GetOmaSettingPlainTextValueWithSecretReferenceValueIdResponse) : void {
        writer.writeStringValue("value", getOmaSettingPlainTextValueWithSecretReferenceValueIdResponse.value);
        writer.writeAdditionalData(getOmaSettingPlainTextValueWithSecretReferenceValueIdResponse.additionalData);
}
