// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DeviceManagementExchangeConnectorSyncType } from '../../../../models/deviceManagementExchangeConnectorSyncType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSyncPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSyncPostRequestBody;
}
export function deserializeIntoSyncPostRequestBody(syncPostRequestBody: SyncPostRequestBody | undefined = {} as SyncPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "syncType": n => { syncPostRequestBody.syncType = n.getEnumValue<DeviceManagementExchangeConnectorSyncType>(DeviceManagementExchangeConnectorSyncType); },
    }
}
export function serializeSyncPostRequestBody(writer: SerializationWriter, syncPostRequestBody: SyncPostRequestBody | undefined = {} as SyncPostRequestBody) : void {
        writer.writeEnumValue<DeviceManagementExchangeConnectorSyncType>("syncType", syncPostRequestBody.syncType);
        writer.writeAdditionalData(syncPostRequestBody.additionalData);
}
export interface SyncPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The type of Exchange Connector sync requested.
     */
    syncType?: DeviceManagementExchangeConnectorSyncType;
}
// tslint:enable
// eslint-enable
