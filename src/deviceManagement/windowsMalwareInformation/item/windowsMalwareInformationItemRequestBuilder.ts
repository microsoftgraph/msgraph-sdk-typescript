import { createWindowsMalwareInformationFromDiscriminatorValue } from '../../../models/createWindowsMalwareInformationFromDiscriminatorValue';
import { deserializeIntoWindowsMalwareInformation } from '../../../models/deserializeIntoWindowsMalwareInformation';
import { type ODataError } from '../../../models/oDataErrors/';
import { createODataErrorFromDiscriminatorValue } from '../../../models/oDataErrors/createODataErrorFromDiscriminatorValue';
import { deserializeIntoODataError } from '../../../models/oDataErrors/deserializeIntoODataError';
import { serializeODataError } from '../../../models/oDataErrors/serializeODataError';
import { serializeWindowsMalwareInformation } from '../../../models/serializeWindowsMalwareInformation';
import { type WindowsMalwareInformation } from '../../../models/windowsMalwareInformation';
import { DeviceMalwareStatesRequestBuilder } from './deviceMalwareStates/deviceMalwareStatesRequestBuilder';
import { type WindowsMalwareInformationItemRequestBuilderDeleteRequestConfiguration } from './windowsMalwareInformationItemRequestBuilderDeleteRequestConfiguration';
import { type WindowsMalwareInformationItemRequestBuilderGetRequestConfiguration } from './windowsMalwareInformationItemRequestBuilderGetRequestConfiguration';
import { type WindowsMalwareInformationItemRequestBuilderPatchRequestConfiguration } from './windowsMalwareInformationItemRequestBuilderPatchRequestConfiguration';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestOption } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the windowsMalwareInformation property of the microsoft.graph.deviceManagement entity.
 */
export class WindowsMalwareInformationItemRequestBuilder extends BaseRequestBuilder {
    /**
     * Provides operations to manage the deviceMalwareStates property of the microsoft.graph.windowsMalwareInformation entity.
     */
    public get deviceMalwareStates(): DeviceMalwareStatesRequestBuilder {
        return new DeviceMalwareStatesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Instantiates a new WindowsMalwareInformationItemRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/deviceManagement/windowsMalwareInformation/{windowsMalwareInformation%2Did}{?%24select,%24expand}");
    };
    /**
     * Deletes a windowsMalwareInformation.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @see {@link https://learn.microsoft.com/graph/api/intune-devices-windowsmalwareinformation-delete?view=graph-rest-1.0|Find more info here}
     */
    public delete(requestConfiguration?: WindowsMalwareInformationItemRequestBuilderDeleteRequestConfiguration | undefined) : Promise<void> {
        const requestInfo = this.toDeleteRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendNoResponseContentAsync(requestInfo, errorMapping);
    };
    /**
     * Read properties and relationships of the windowsMalwareInformation object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WindowsMalwareInformation
     * @see {@link https://learn.microsoft.com/graph/api/intune-devices-windowsmalwareinformation-get?view=graph-rest-1.0|Find more info here}
     */
    public get(requestConfiguration?: WindowsMalwareInformationItemRequestBuilderGetRequestConfiguration | undefined) : Promise<WindowsMalwareInformation | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<WindowsMalwareInformation>(requestInfo, createWindowsMalwareInformationFromDiscriminatorValue, errorMapping);
    };
    /**
     * Update the properties of a windowsMalwareInformation object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WindowsMalwareInformation
     * @see {@link https://learn.microsoft.com/graph/api/intune-devices-windowsmalwareinformation-update?view=graph-rest-1.0|Find more info here}
     */
    public patch(body: WindowsMalwareInformation, requestConfiguration?: WindowsMalwareInformationItemRequestBuilderPatchRequestConfiguration | undefined) : Promise<WindowsMalwareInformation | undefined> {
        const requestInfo = this.toPatchRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<WindowsMalwareInformation>(requestInfo, createWindowsMalwareInformationFromDiscriminatorValue, errorMapping);
    };
    /**
     * Deletes a windowsMalwareInformation.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toDeleteRequestInformation(requestConfiguration?: WindowsMalwareInformationItemRequestBuilderDeleteRequestConfiguration | undefined) : RequestInformation {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.DELETE;
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    };
    /**
     * Read properties and relationships of the windowsMalwareInformation object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: WindowsMalwareInformationItemRequestBuilderGetRequestConfiguration | undefined) : RequestInformation {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = ["application/json"];
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    };
    /**
     * Update the properties of a windowsMalwareInformation object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPatchRequestInformation(body: WindowsMalwareInformation, requestConfiguration?: WindowsMalwareInformationItemRequestBuilderPatchRequestConfiguration | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.PATCH;
        requestInfo.headers["Accept"] = ["application/json"];
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeWindowsMalwareInformation);
        return requestInfo;
    };
    /**
     * Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
     * @param rawUrl The raw URL to use for the request builder.
     * @returns a WindowsMalwareInformationItemRequestBuilder
     */
    public withUrl(rawUrl: string) : WindowsMalwareInformationItemRequestBuilder {
        if(!rawUrl) throw new Error("rawUrl cannot be undefined");
        return new WindowsMalwareInformationItemRequestBuilder(rawUrl, this.requestAdapter);
    };
}
