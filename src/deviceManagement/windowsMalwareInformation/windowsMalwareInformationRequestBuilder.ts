import {WindowsMalwareInformationCollectionResponse} from '../../models/';
import {createWindowsMalwareInformationCollectionResponseFromDiscriminatorValue} from '../../models/createWindowsMalwareInformationCollectionResponseFromDiscriminatorValue';
import {createWindowsMalwareInformationFromDiscriminatorValue} from '../../models/createWindowsMalwareInformationFromDiscriminatorValue';
import {deserializeIntoWindowsMalwareInformation} from '../../models/deserializeIntoWindowsMalwareInformation';
import {ODataError} from '../../models/oDataErrors/';
import {createODataErrorFromDiscriminatorValue} from '../../models/oDataErrors/createODataErrorFromDiscriminatorValue';
import {deserializeIntoODataError} from '../../models/oDataErrors/deserializeIntoODataError';
import {serializeODataError} from '../../models/oDataErrors/serializeODataError';
import {serializeWindowsMalwareInformation} from '../../models/serializeWindowsMalwareInformation';
import type {WindowsMalwareInformation} from '../../models/windowsMalwareInformation';
import {CountRequestBuilder} from './count/countRequestBuilder';
import {WindowsMalwareInformationItemRequestBuilder} from './item/windowsMalwareInformationItemRequestBuilder';
import {WindowsMalwareInformationRequestBuilderGetRequestConfiguration} from './windowsMalwareInformationRequestBuilderGetRequestConfiguration';
import {WindowsMalwareInformationRequestBuilderPostRequestConfiguration} from './windowsMalwareInformationRequestBuilderPostRequestConfiguration';
import {BaseRequestBuilder, HttpMethod, RequestInformation, getPathParameters} from '@microsoft/kiota-abstractions';
import type {Parsable, ParsableFactory, RequestAdapter, RequestOption} from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the windowsMalwareInformation property of the microsoft.graph.deviceManagement entity.
 */
export class WindowsMalwareInformationRequestBuilder extends BaseRequestBuilder {
    /**
     * Provides operations to count the resources in the collection.
     */
    public get count(): CountRequestBuilder {
        return new CountRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the windowsMalwareInformation property of the microsoft.graph.deviceManagement entity.
     * @param windowsMalwareInformationId The unique identifier of windowsMalwareInformation
     * @returns a WindowsMalwareInformationItemRequestBuilder
     */
    public byWindowsMalwareInformationId(windowsMalwareInformationId: string) : WindowsMalwareInformationItemRequestBuilder {
        if(!windowsMalwareInformationId) throw new Error("windowsMalwareInformationId cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["windowsMalwareInformation%2Did"] = windowsMalwareInformationId
        return new WindowsMalwareInformationItemRequestBuilder(urlTplParams, this.requestAdapter);
    };
    /**
     * Instantiates a new WindowsMalwareInformationRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/deviceManagement/windowsMalwareInformation{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}");
    };
    /**
     * List properties and relationships of the windowsMalwareInformation objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WindowsMalwareInformationCollectionResponse
     * @see {@link https://learn.microsoft.com/graph/api/intune-devices-windowsmalwareinformation-list?view=graph-rest-1.0|Find more info here}
     */
    public get(requestConfiguration?: WindowsMalwareInformationRequestBuilderGetRequestConfiguration | undefined) : Promise<WindowsMalwareInformationCollectionResponse | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<WindowsMalwareInformationCollectionResponse>(requestInfo, createWindowsMalwareInformationCollectionResponseFromDiscriminatorValue, errorMapping);
    };
    /**
     * Create a new windowsMalwareInformation object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WindowsMalwareInformation
     * @see {@link https://learn.microsoft.com/graph/api/intune-devices-windowsmalwareinformation-create?view=graph-rest-1.0|Find more info here}
     */
    public post(body: WindowsMalwareInformation, requestConfiguration?: WindowsMalwareInformationRequestBuilderPostRequestConfiguration | undefined) : Promise<WindowsMalwareInformation | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<WindowsMalwareInformation>(requestInfo, createWindowsMalwareInformationFromDiscriminatorValue, errorMapping);
    };
    /**
     * List properties and relationships of the windowsMalwareInformation objects.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: WindowsMalwareInformationRequestBuilderGetRequestConfiguration | undefined) : RequestInformation {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = ["application/json"];
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    };
    /**
     * Create a new windowsMalwareInformation object.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: WindowsMalwareInformation, requestConfiguration?: WindowsMalwareInformationRequestBuilderPostRequestConfiguration | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = ["application/json"];
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeWindowsMalwareInformation);
        return requestInfo;
    };
}
