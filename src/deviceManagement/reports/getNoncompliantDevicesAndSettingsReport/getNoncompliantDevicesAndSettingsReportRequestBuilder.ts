// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type ODataError } from '../../../models/oDataErrors/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError } from '../../../models/oDataErrors/oDataError';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGetNoncompliantDevicesAndSettingsReportPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGetNoncompliantDevicesAndSettingsReportPostRequestBody;
}
export function deserializeIntoGetNoncompliantDevicesAndSettingsReportPostRequestBody(getNoncompliantDevicesAndSettingsReportPostRequestBody: GetNoncompliantDevicesAndSettingsReportPostRequestBody | undefined = {} as GetNoncompliantDevicesAndSettingsReportPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "filter": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.filter = n.getStringValue(); },
        "groupBy": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.groupBy = n.getCollectionOfPrimitiveValues<string>(); },
        "name": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.name = n.getStringValue(); },
        "orderBy": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.orderBy = n.getCollectionOfPrimitiveValues<string>(); },
        "search": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.search = n.getStringValue(); },
        "select": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.select = n.getCollectionOfPrimitiveValues<string>(); },
        "sessionId": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.sessionId = n.getStringValue(); },
        "skip": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.skip = n.getNumberValue(); },
        "top": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.top = n.getNumberValue(); },
    }
}
export interface GetNoncompliantDevicesAndSettingsReportPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The filter property
     */
    filter?: string;
    /**
     * The groupBy property
     */
    groupBy?: string[];
    /**
     * The name property
     */
    name?: string;
    /**
     * The orderBy property
     */
    orderBy?: string[];
    /**
     * The search property
     */
    search?: string;
    /**
     * The select property
     */
    select?: string[];
    /**
     * The sessionId property
     */
    sessionId?: string;
    /**
     * The skip property
     */
    skip?: number;
    /**
     * The top property
     */
    top?: number;
}
export function serializeGetNoncompliantDevicesAndSettingsReportPostRequestBody(writer: SerializationWriter, getNoncompliantDevicesAndSettingsReportPostRequestBody: GetNoncompliantDevicesAndSettingsReportPostRequestBody | undefined = {} as GetNoncompliantDevicesAndSettingsReportPostRequestBody) : void {
    writer.writeStringValue("filter", getNoncompliantDevicesAndSettingsReportPostRequestBody.filter);
    writer.writeCollectionOfPrimitiveValues<string>("groupBy", getNoncompliantDevicesAndSettingsReportPostRequestBody.groupBy);
    writer.writeStringValue("name", getNoncompliantDevicesAndSettingsReportPostRequestBody.name);
    writer.writeCollectionOfPrimitiveValues<string>("orderBy", getNoncompliantDevicesAndSettingsReportPostRequestBody.orderBy);
    writer.writeStringValue("search", getNoncompliantDevicesAndSettingsReportPostRequestBody.search);
    writer.writeCollectionOfPrimitiveValues<string>("select", getNoncompliantDevicesAndSettingsReportPostRequestBody.select);
    writer.writeStringValue("sessionId", getNoncompliantDevicesAndSettingsReportPostRequestBody.sessionId);
    writer.writeNumberValue("skip", getNoncompliantDevicesAndSettingsReportPostRequestBody.skip);
    writer.writeNumberValue("top", getNoncompliantDevicesAndSettingsReportPostRequestBody.top);
    writer.writeAdditionalData(getNoncompliantDevicesAndSettingsReportPostRequestBody.additionalData);
}
/**
 * Provides operations to call the getNoncompliantDevicesAndSettingsReport method.
 */
export class GetNoncompliantDevicesAndSettingsReportRequestBuilder extends BaseRequestBuilder {
    /**
     * Instantiates a new GetNoncompliantDevicesAndSettingsReportRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/deviceManagement/reports/getNoncompliantDevicesAndSettingsReport");
    };
    /**
     * Not yet documented
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ArrayBuffer
     * @see {@link https://learn.microsoft.com/graph/api/intune-reporting-devicemanagementreports-getnoncompliantdevicesandsettingsreport?view=graph-rest-1.0|Find more info here}
     */
    public post(body: GetNoncompliantDevicesAndSettingsReportPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendPrimitiveAsync<ArrayBuffer>(requestInfo, "ArrayBuffer", errorMapping);
    };
    /**
     * Not yet documented
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: GetNoncompliantDevicesAndSettingsReportPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/octet-stream, application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeGetNoncompliantDevicesAndSettingsReportPostRequestBody);
        return requestInfo;
    };
    /**
     * Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
     * @param rawUrl The raw URL to use for the request builder.
     * @returns a getNoncompliantDevicesAndSettingsReportRequestBuilder
     */
    public withUrl(rawUrl: string) : GetNoncompliantDevicesAndSettingsReportRequestBuilder {
        if(!rawUrl) throw new Error("rawUrl cannot be undefined");
        return new GetNoncompliantDevicesAndSettingsReportRequestBuilder(rawUrl, this.requestAdapter);
    };
}
// tslint:enable
// eslint-enable
