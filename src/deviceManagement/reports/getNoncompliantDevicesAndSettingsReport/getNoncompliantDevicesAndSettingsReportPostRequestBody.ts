// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGetNoncompliantDevicesAndSettingsReportPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGetNoncompliantDevicesAndSettingsReportPostRequestBody;
}
export function deserializeIntoGetNoncompliantDevicesAndSettingsReportPostRequestBody(getNoncompliantDevicesAndSettingsReportPostRequestBody: GetNoncompliantDevicesAndSettingsReportPostRequestBody | undefined = {} as GetNoncompliantDevicesAndSettingsReportPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "filter": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.filter = n.getStringValue(); },
        "groupBy": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.groupBy = n.getCollectionOfPrimitiveValues<string>(); },
        "name": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.name = n.getStringValue(); },
        "orderBy": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.orderBy = n.getCollectionOfPrimitiveValues<string>(); },
        "search": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.search = n.getStringValue(); },
        "select": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.select = n.getCollectionOfPrimitiveValues<string>(); },
        "sessionId": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.sessionId = n.getStringValue(); },
        "skip": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.skip = n.getNumberValue(); },
        "top": n => { getNoncompliantDevicesAndSettingsReportPostRequestBody.top = n.getNumberValue(); },
    }
}
export interface GetNoncompliantDevicesAndSettingsReportPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The filter property
     */
    filter?: string;
    /**
     * The groupBy property
     */
    groupBy?: string[];
    /**
     * The name property
     */
    name?: string;
    /**
     * The orderBy property
     */
    orderBy?: string[];
    /**
     * The search property
     */
    search?: string;
    /**
     * The select property
     */
    select?: string[];
    /**
     * The sessionId property
     */
    sessionId?: string;
    /**
     * The skip property
     */
    skip?: number;
    /**
     * The top property
     */
    top?: number;
}
export function serializeGetNoncompliantDevicesAndSettingsReportPostRequestBody(writer: SerializationWriter, getNoncompliantDevicesAndSettingsReportPostRequestBody: GetNoncompliantDevicesAndSettingsReportPostRequestBody | undefined = {} as GetNoncompliantDevicesAndSettingsReportPostRequestBody) : void {
        writer.writeStringValue("filter", getNoncompliantDevicesAndSettingsReportPostRequestBody.filter);
        writer.writeCollectionOfPrimitiveValues<string>("groupBy", getNoncompliantDevicesAndSettingsReportPostRequestBody.groupBy);
        writer.writeStringValue("name", getNoncompliantDevicesAndSettingsReportPostRequestBody.name);
        writer.writeCollectionOfPrimitiveValues<string>("orderBy", getNoncompliantDevicesAndSettingsReportPostRequestBody.orderBy);
        writer.writeStringValue("search", getNoncompliantDevicesAndSettingsReportPostRequestBody.search);
        writer.writeCollectionOfPrimitiveValues<string>("select", getNoncompliantDevicesAndSettingsReportPostRequestBody.select);
        writer.writeStringValue("sessionId", getNoncompliantDevicesAndSettingsReportPostRequestBody.sessionId);
        writer.writeNumberValue("skip", getNoncompliantDevicesAndSettingsReportPostRequestBody.skip);
        writer.writeNumberValue("top", getNoncompliantDevicesAndSettingsReportPostRequestBody.top);
        writer.writeAdditionalData(getNoncompliantDevicesAndSettingsReportPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
