// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGetConfigurationSettingNonComplianceReportPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGetConfigurationSettingNonComplianceReportPostRequestBody;
}
export function deserializeIntoGetConfigurationSettingNonComplianceReportPostRequestBody(getConfigurationSettingNonComplianceReportPostRequestBody: GetConfigurationSettingNonComplianceReportPostRequestBody | undefined = {} as GetConfigurationSettingNonComplianceReportPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "filter": n => { getConfigurationSettingNonComplianceReportPostRequestBody.filter = n.getStringValue(); },
        "groupBy": n => { getConfigurationSettingNonComplianceReportPostRequestBody.groupBy = n.getCollectionOfPrimitiveValues<string>(); },
        "name": n => { getConfigurationSettingNonComplianceReportPostRequestBody.name = n.getStringValue(); },
        "orderBy": n => { getConfigurationSettingNonComplianceReportPostRequestBody.orderBy = n.getCollectionOfPrimitiveValues<string>(); },
        "search": n => { getConfigurationSettingNonComplianceReportPostRequestBody.search = n.getStringValue(); },
        "select": n => { getConfigurationSettingNonComplianceReportPostRequestBody.select = n.getCollectionOfPrimitiveValues<string>(); },
        "sessionId": n => { getConfigurationSettingNonComplianceReportPostRequestBody.sessionId = n.getStringValue(); },
        "skip": n => { getConfigurationSettingNonComplianceReportPostRequestBody.skip = n.getNumberValue(); },
        "top": n => { getConfigurationSettingNonComplianceReportPostRequestBody.top = n.getNumberValue(); },
    }
}
export interface GetConfigurationSettingNonComplianceReportPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The filter property
     */
    filter?: string;
    /**
     * The groupBy property
     */
    groupBy?: string[];
    /**
     * The name property
     */
    name?: string;
    /**
     * The orderBy property
     */
    orderBy?: string[];
    /**
     * The search property
     */
    search?: string;
    /**
     * The select property
     */
    select?: string[];
    /**
     * The sessionId property
     */
    sessionId?: string;
    /**
     * The skip property
     */
    skip?: number;
    /**
     * The top property
     */
    top?: number;
}
export function serializeGetConfigurationSettingNonComplianceReportPostRequestBody(writer: SerializationWriter, getConfigurationSettingNonComplianceReportPostRequestBody: GetConfigurationSettingNonComplianceReportPostRequestBody | undefined = {} as GetConfigurationSettingNonComplianceReportPostRequestBody) : void {
        writer.writeStringValue("filter", getConfigurationSettingNonComplianceReportPostRequestBody.filter);
        writer.writeCollectionOfPrimitiveValues<string>("groupBy", getConfigurationSettingNonComplianceReportPostRequestBody.groupBy);
        writer.writeStringValue("name", getConfigurationSettingNonComplianceReportPostRequestBody.name);
        writer.writeCollectionOfPrimitiveValues<string>("orderBy", getConfigurationSettingNonComplianceReportPostRequestBody.orderBy);
        writer.writeStringValue("search", getConfigurationSettingNonComplianceReportPostRequestBody.search);
        writer.writeCollectionOfPrimitiveValues<string>("select", getConfigurationSettingNonComplianceReportPostRequestBody.select);
        writer.writeStringValue("sessionId", getConfigurationSettingNonComplianceReportPostRequestBody.sessionId);
        writer.writeNumberValue("skip", getConfigurationSettingNonComplianceReportPostRequestBody.skip);
        writer.writeNumberValue("top", getConfigurationSettingNonComplianceReportPostRequestBody.top);
        writer.writeAdditionalData(getConfigurationSettingNonComplianceReportPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
