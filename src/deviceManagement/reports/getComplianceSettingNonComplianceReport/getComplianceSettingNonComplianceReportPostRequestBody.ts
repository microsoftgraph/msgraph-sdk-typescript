// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGetComplianceSettingNonComplianceReportPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGetComplianceSettingNonComplianceReportPostRequestBody;
}
export function deserializeIntoGetComplianceSettingNonComplianceReportPostRequestBody(getComplianceSettingNonComplianceReportPostRequestBody: GetComplianceSettingNonComplianceReportPostRequestBody | undefined = {} as GetComplianceSettingNonComplianceReportPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "filter": n => { getComplianceSettingNonComplianceReportPostRequestBody.filter = n.getStringValue(); },
        "groupBy": n => { getComplianceSettingNonComplianceReportPostRequestBody.groupBy = n.getCollectionOfPrimitiveValues<string>(); },
        "name": n => { getComplianceSettingNonComplianceReportPostRequestBody.name = n.getStringValue(); },
        "orderBy": n => { getComplianceSettingNonComplianceReportPostRequestBody.orderBy = n.getCollectionOfPrimitiveValues<string>(); },
        "search": n => { getComplianceSettingNonComplianceReportPostRequestBody.search = n.getStringValue(); },
        "select": n => { getComplianceSettingNonComplianceReportPostRequestBody.select = n.getCollectionOfPrimitiveValues<string>(); },
        "sessionId": n => { getComplianceSettingNonComplianceReportPostRequestBody.sessionId = n.getStringValue(); },
        "skip": n => { getComplianceSettingNonComplianceReportPostRequestBody.skip = n.getNumberValue(); },
        "top": n => { getComplianceSettingNonComplianceReportPostRequestBody.top = n.getNumberValue(); },
    }
}
export interface GetComplianceSettingNonComplianceReportPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The filter property
     */
    filter?: string;
    /**
     * The groupBy property
     */
    groupBy?: string[];
    /**
     * The name property
     */
    name?: string;
    /**
     * The orderBy property
     */
    orderBy?: string[];
    /**
     * The search property
     */
    search?: string;
    /**
     * The select property
     */
    select?: string[];
    /**
     * The sessionId property
     */
    sessionId?: string;
    /**
     * The skip property
     */
    skip?: number;
    /**
     * The top property
     */
    top?: number;
}
export function serializeGetComplianceSettingNonComplianceReportPostRequestBody(writer: SerializationWriter, getComplianceSettingNonComplianceReportPostRequestBody: GetComplianceSettingNonComplianceReportPostRequestBody | undefined = {} as GetComplianceSettingNonComplianceReportPostRequestBody) : void {
        writer.writeStringValue("filter", getComplianceSettingNonComplianceReportPostRequestBody.filter);
        writer.writeCollectionOfPrimitiveValues<string>("groupBy", getComplianceSettingNonComplianceReportPostRequestBody.groupBy);
        writer.writeStringValue("name", getComplianceSettingNonComplianceReportPostRequestBody.name);
        writer.writeCollectionOfPrimitiveValues<string>("orderBy", getComplianceSettingNonComplianceReportPostRequestBody.orderBy);
        writer.writeStringValue("search", getComplianceSettingNonComplianceReportPostRequestBody.search);
        writer.writeCollectionOfPrimitiveValues<string>("select", getComplianceSettingNonComplianceReportPostRequestBody.select);
        writer.writeStringValue("sessionId", getComplianceSettingNonComplianceReportPostRequestBody.sessionId);
        writer.writeNumberValue("skip", getComplianceSettingNonComplianceReportPostRequestBody.skip);
        writer.writeNumberValue("top", getComplianceSettingNonComplianceReportPostRequestBody.top);
        writer.writeAdditionalData(getComplianceSettingNonComplianceReportPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
