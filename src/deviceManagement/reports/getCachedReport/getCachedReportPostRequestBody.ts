// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGetCachedReportPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGetCachedReportPostRequestBody;
}
export function deserializeIntoGetCachedReportPostRequestBody(getCachedReportPostRequestBody: GetCachedReportPostRequestBody | undefined = {} as GetCachedReportPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "groupBy": n => { getCachedReportPostRequestBody.groupBy = n.getCollectionOfPrimitiveValues<string>(); },
        "id": n => { getCachedReportPostRequestBody.id = n.getStringValue(); },
        "orderBy": n => { getCachedReportPostRequestBody.orderBy = n.getCollectionOfPrimitiveValues<string>(); },
        "search": n => { getCachedReportPostRequestBody.search = n.getStringValue(); },
        "select": n => { getCachedReportPostRequestBody.select = n.getCollectionOfPrimitiveValues<string>(); },
        "skip": n => { getCachedReportPostRequestBody.skip = n.getNumberValue(); },
        "top": n => { getCachedReportPostRequestBody.top = n.getNumberValue(); },
    }
}
export interface GetCachedReportPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The groupBy property
     */
    groupBy?: string[];
    /**
     * The id property
     */
    id?: string;
    /**
     * The orderBy property
     */
    orderBy?: string[];
    /**
     * The search property
     */
    search?: string;
    /**
     * The select property
     */
    select?: string[];
    /**
     * The skip property
     */
    skip?: number;
    /**
     * The top property
     */
    top?: number;
}
export function serializeGetCachedReportPostRequestBody(writer: SerializationWriter, getCachedReportPostRequestBody: GetCachedReportPostRequestBody | undefined = {} as GetCachedReportPostRequestBody) : void {
        writer.writeCollectionOfPrimitiveValues<string>("groupBy", getCachedReportPostRequestBody.groupBy);
        writer.writeStringValue("id", getCachedReportPostRequestBody.id);
        writer.writeCollectionOfPrimitiveValues<string>("orderBy", getCachedReportPostRequestBody.orderBy);
        writer.writeStringValue("search", getCachedReportPostRequestBody.search);
        writer.writeCollectionOfPrimitiveValues<string>("select", getCachedReportPostRequestBody.select);
        writer.writeNumberValue("skip", getCachedReportPostRequestBody.skip);
        writer.writeNumberValue("top", getCachedReportPostRequestBody.top);
        writer.writeAdditionalData(getCachedReportPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
