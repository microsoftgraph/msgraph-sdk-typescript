/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createNotebookFromDiscriminatorValue, serializeNotebook, type Notebook } from '../../../../../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../../models/oDataErrors/';
import { CopyNotebookRequestBuilderRequestsMetadata, CopyNotebookRequestBuilderUriTemplate, type CopyNotebookRequestBuilder } from './copyNotebook/';
import { SectionGroupsRequestBuilderNavigationMetadata, SectionGroupsRequestBuilderRequestsMetadata, SectionGroupsRequestBuilderUriTemplate, type SectionGroupsRequestBuilder } from './sectionGroups/';
import { SectionsRequestBuilderNavigationMetadata, SectionsRequestBuilderRequestsMetadata, SectionsRequestBuilderUriTemplate, type SectionsRequestBuilder } from './sections/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the notebooks property of the microsoft.graph.onenote entity.
 */
export interface NotebookItemRequestBuilder extends BaseRequestBuilder<NotebookItemRequestBuilder> {
    /**
     * Provides operations to call the copyNotebook method.
     */
    get copyNotebook(): CopyNotebookRequestBuilder;
    /**
     * Provides operations to manage the sectionGroups property of the microsoft.graph.notebook entity.
     */
    get sectionGroups(): SectionGroupsRequestBuilder;
    /**
     * Provides operations to manage the sections property of the microsoft.graph.notebook entity.
     */
    get sections(): SectionsRequestBuilder;
    /**
     * Delete navigation property notebooks for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties and relationships of a notebook object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Notebook
     * @see {@link https://learn.microsoft.com/graph/api/notebook-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<NotebookItemRequestBuilderGetQueryParameters> | undefined) : Promise<Notebook | undefined>;
    /**
     * Update the navigation property notebooks in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Notebook
     */
     patch(body: Notebook, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Notebook | undefined>;
    /**
     * Delete navigation property notebooks for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties and relationships of a notebook object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<NotebookItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property notebooks in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Notebook, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties and relationships of a notebook object.
 */
export interface NotebookItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const NotebookItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const NotebookItemRequestBuilderNavigationMetadata: Record<Exclude<keyof NotebookItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    copyNotebook: {
        uriTemplate: CopyNotebookRequestBuilderUriTemplate,
        requestsMetadata: CopyNotebookRequestBuilderRequestsMetadata,
    },
    sectionGroups: {
        uriTemplate: SectionGroupsRequestBuilderUriTemplate,
        requestsMetadata: SectionGroupsRequestBuilderRequestsMetadata,
        navigationMetadata: SectionGroupsRequestBuilderNavigationMetadata,
    },
    sections: {
        uriTemplate: SectionsRequestBuilderUriTemplate,
        requestsMetadata: SectionsRequestBuilderRequestsMetadata,
        navigationMetadata: SectionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const NotebookItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createNotebookFromDiscriminatorValue,
        queryParametersMapper: NotebookItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createNotebookFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeNotebook,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const NotebookItemRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/sites/{site%2Did}/onenote/notebooks/{notebook%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
