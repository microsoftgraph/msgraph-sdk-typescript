/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../models/oDataErrors/';
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from '../../../../../../models/termStore/';
import { SetsRequestBuilderNavigationMetadata, SetsRequestBuilderRequestsMetadata, SetsRequestBuilderUriTemplate, type SetsRequestBuilder } from './sets/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the parentGroup property of the microsoft.graph.termStore.set entity.
 */
export interface ParentGroupRequestBuilder extends BaseRequestBuilder<ParentGroupRequestBuilder> {
    /**
     * Provides operations to manage the sets property of the microsoft.graph.termStore.group entity.
     */
    get sets(): SetsRequestBuilder;
    /**
     * Delete navigation property parentGroup for sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The parent [group] that contains the set.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Group
     */
     get(requestConfiguration?: RequestConfiguration<ParentGroupRequestBuilderGetQueryParameters> | undefined) : Promise<Group | undefined>;
    /**
     * Update the navigation property parentGroup in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Group
     */
     patch(body: Group, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Group | undefined>;
    /**
     * Delete navigation property parentGroup for sites
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The parent [group] that contains the set.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ParentGroupRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property parentGroup in sites
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Group, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The parent [group] that contains the set.
 */
export interface ParentGroupRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ParentGroupRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ParentGroupRequestBuilderNavigationMetadata: Record<Exclude<keyof ParentGroupRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    sets: {
        uriTemplate: SetsRequestBuilderUriTemplate,
        requestsMetadata: SetsRequestBuilderRequestsMetadata,
        navigationMetadata: SetsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ParentGroupRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createGroupFromDiscriminatorValue,
        queryParametersMapper: ParentGroupRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createGroupFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeGroup,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const ParentGroupRequestBuilderUriTemplate = "{+baseurl}/sites/{site%2Did}/termStore/sets/{set%2Did}/parentGroup{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
