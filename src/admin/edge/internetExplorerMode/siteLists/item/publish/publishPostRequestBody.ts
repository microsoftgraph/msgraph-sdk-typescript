// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createBrowserSharedCookieFromDiscriminatorValue, serializeBrowserSharedCookie, type BrowserSharedCookie } from '../../../../../../models/browserSharedCookie';
import { createBrowserSiteFromDiscriminatorValue, serializeBrowserSite, type BrowserSite } from '../../../../../../models/browserSite';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPublishPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPublishPostRequestBody;
}
export function deserializeIntoPublishPostRequestBody(publishPostRequestBody: PublishPostRequestBody | undefined = {} as PublishPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "revision": n => { publishPostRequestBody.revision = n.getStringValue(); },
        "sharedCookies": n => { publishPostRequestBody.sharedCookies = n.getCollectionOfObjectValues<BrowserSharedCookie>(createBrowserSharedCookieFromDiscriminatorValue); },
        "sites": n => { publishPostRequestBody.sites = n.getCollectionOfObjectValues<BrowserSite>(createBrowserSiteFromDiscriminatorValue); },
    }
}
export interface PublishPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The revision property
     */
    revision?: string;
    /**
     * The sharedCookies property
     */
    sharedCookies?: BrowserSharedCookie[];
    /**
     * The sites property
     */
    sites?: BrowserSite[];
}
export function serializePublishPostRequestBody(writer: SerializationWriter, publishPostRequestBody: PublishPostRequestBody | undefined = {} as PublishPostRequestBody) : void {
        writer.writeStringValue("revision", publishPostRequestBody.revision);
        writer.writeCollectionOfObjectValues<BrowserSharedCookie>("sharedCookies", publishPostRequestBody.sharedCookies, );
        writer.writeCollectionOfObjectValues<BrowserSite>("sites", publishPostRequestBody.sites, );
        writer.writeAdditionalData(publishPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
