// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSubscribeToTonePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSubscribeToTonePostRequestBody;
}
export function deserializeIntoSubscribeToTonePostRequestBody(subscribeToTonePostRequestBody: SubscribeToTonePostRequestBody | undefined = {} as SubscribeToTonePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "clientContext": n => { subscribeToTonePostRequestBody.clientContext = n.getStringValue(); },
    }
}
export function serializeSubscribeToTonePostRequestBody(writer: SerializationWriter, subscribeToTonePostRequestBody: SubscribeToTonePostRequestBody | undefined = {} as SubscribeToTonePostRequestBody) : void {
        writer.writeStringValue("clientContext", subscribeToTonePostRequestBody.clientContext);
        writer.writeAdditionalData(subscribeToTonePostRequestBody.additionalData);
}
export interface SubscribeToTonePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The clientContext property
     */
    clientContext?: string;
}
// tslint:enable
// eslint-enable
