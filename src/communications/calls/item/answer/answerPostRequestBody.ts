// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIncomingCallOptionsFromDiscriminatorValue, serializeIncomingCallOptions, type IncomingCallOptions } from '../../../../models/incomingCallOptions';
import { createMediaConfigFromDiscriminatorValue, serializeMediaConfig, type MediaConfig } from '../../../../models/mediaConfig';
import { Modality } from '../../../../models/modality';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AnswerPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The acceptedModalities property
     */
    acceptedModalities?: Modality[];
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The callbackUri property
     */
    callbackUri?: string;
    /**
     * The callOptions property
     */
    callOptions?: IncomingCallOptions;
    /**
     * The mediaConfig property
     */
    mediaConfig?: MediaConfig;
    /**
     * The participantCapacity property
     */
    participantCapacity?: number;
}
export function createAnswerPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAnswerPostRequestBody;
}
export function deserializeIntoAnswerPostRequestBody(answerPostRequestBody: AnswerPostRequestBody | undefined = {} as AnswerPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "acceptedModalities": n => { answerPostRequestBody.acceptedModalities = n.getCollectionOfEnumValues<Modality>(Modality); },
        "callbackUri": n => { answerPostRequestBody.callbackUri = n.getStringValue(); },
        "callOptions": n => { answerPostRequestBody.callOptions = n.getObjectValue<IncomingCallOptions>(createIncomingCallOptionsFromDiscriminatorValue); },
        "mediaConfig": n => { answerPostRequestBody.mediaConfig = n.getObjectValue<MediaConfig>(createMediaConfigFromDiscriminatorValue); },
        "participantCapacity": n => { answerPostRequestBody.participantCapacity = n.getNumberValue(); },
    }
}
export function serializeAnswerPostRequestBody(writer: SerializationWriter, answerPostRequestBody: AnswerPostRequestBody | undefined = {} as AnswerPostRequestBody) : void {
        if(answerPostRequestBody.acceptedModalities)
        writer.writeEnumValue<Modality>("acceptedModalities", ...answerPostRequestBody.acceptedModalities);
        writer.writeStringValue("callbackUri", answerPostRequestBody.callbackUri);
        writer.writeObjectValue<IncomingCallOptions>("callOptions", answerPostRequestBody.callOptions, );
        writer.writeObjectValue<MediaConfig>("mediaConfig", answerPostRequestBody.mediaConfig, );
        writer.writeNumberValue("participantCapacity", answerPostRequestBody.participantCapacity);
        writer.writeAdditionalData(answerPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
