// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPromptFromDiscriminatorValue, serializePrompt, type Prompt } from '../../../../../../models/prompt';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createStartHoldMusicPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoStartHoldMusicPostRequestBody;
}
export function deserializeIntoStartHoldMusicPostRequestBody(startHoldMusicPostRequestBody: StartHoldMusicPostRequestBody | undefined = {} as StartHoldMusicPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "clientContext": n => { startHoldMusicPostRequestBody.clientContext = n.getStringValue(); },
        "customPrompt": n => { startHoldMusicPostRequestBody.customPrompt = n.getObjectValue<Prompt>(createPromptFromDiscriminatorValue); },
    }
}
export function serializeStartHoldMusicPostRequestBody(writer: SerializationWriter, startHoldMusicPostRequestBody: StartHoldMusicPostRequestBody | undefined = {} as StartHoldMusicPostRequestBody) : void {
        writer.writeStringValue("clientContext", startHoldMusicPostRequestBody.clientContext);
        writer.writeObjectValue<Prompt>("customPrompt", startHoldMusicPostRequestBody.customPrompt, serializePrompt);
        writer.writeAdditionalData(startHoldMusicPostRequestBody.additionalData);
}
export interface StartHoldMusicPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The clientContext property
     */
    clientContext?: string;
    /**
     * The customPrompt property
     */
    customPrompt?: Prompt;
}
// tslint:enable
// eslint-enable
