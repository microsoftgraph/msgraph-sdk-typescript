// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createInvitationParticipantInfoFromDiscriminatorValue, serializeInvitationParticipantInfo, type InvitationParticipantInfo } from '../../../../../models/invitationParticipantInfo';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createInvitePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoInvitePostRequestBody;
}
export function deserializeIntoInvitePostRequestBody(invitePostRequestBody: InvitePostRequestBody | undefined = {} as InvitePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "clientContext": n => { invitePostRequestBody.clientContext = n.getStringValue(); },
        "participants": n => { invitePostRequestBody.participants = n.getCollectionOfObjectValues<InvitationParticipantInfo>(createInvitationParticipantInfoFromDiscriminatorValue); },
    }
}
export interface InvitePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The clientContext property
     */
    clientContext?: string;
    /**
     * The participants property
     */
    participants?: InvitationParticipantInfo[];
}
export function serializeInvitePostRequestBody(writer: SerializationWriter, invitePostRequestBody: InvitePostRequestBody | undefined = {} as InvitePostRequestBody) : void {
        writer.writeStringValue("clientContext", invitePostRequestBody.clientContext);
        writer.writeCollectionOfObjectValues<InvitationParticipantInfo>("participants", invitePostRequestBody.participants, serializeInvitationParticipantInfo);
        writer.writeAdditionalData(invitePostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
