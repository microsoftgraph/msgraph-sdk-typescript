// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { RecordingStatus } from '../../../../models/recordingStatus';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUpdateRecordingStatusPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUpdateRecordingStatusPostRequestBody;
}
export function deserializeIntoUpdateRecordingStatusPostRequestBody(updateRecordingStatusPostRequestBody: UpdateRecordingStatusPostRequestBody | undefined = {} as UpdateRecordingStatusPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "clientContext": n => { updateRecordingStatusPostRequestBody.clientContext = n.getStringValue(); },
        "status": n => { updateRecordingStatusPostRequestBody.status = n.getEnumValue<RecordingStatus>(RecordingStatus); },
    }
}
export function serializeUpdateRecordingStatusPostRequestBody(writer: SerializationWriter, updateRecordingStatusPostRequestBody: UpdateRecordingStatusPostRequestBody | undefined = {} as UpdateRecordingStatusPostRequestBody) : void {
        writer.writeStringValue("clientContext", updateRecordingStatusPostRequestBody.clientContext);
        writer.writeEnumValue<RecordingStatus>("status", updateRecordingStatusPostRequestBody.status);
        writer.writeAdditionalData(updateRecordingStatusPostRequestBody.additionalData);
}
export interface UpdateRecordingStatusPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The clientContext property
     */
    clientContext?: string;
    /**
     * The status property
     */
    status?: RecordingStatus;
}
// tslint:enable
// eslint-enable
