// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPromptFromDiscriminatorValue, serializePrompt, type Prompt } from '../../../../models/prompt';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRecordResponsePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRecordResponsePostRequestBody;
}
export function deserializeIntoRecordResponsePostRequestBody(recordResponsePostRequestBody: RecordResponsePostRequestBody | undefined = {} as RecordResponsePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "bargeInAllowed": n => { recordResponsePostRequestBody.bargeInAllowed = n.getBooleanValue(); },
        "clientContext": n => { recordResponsePostRequestBody.clientContext = n.getStringValue(); },
        "initialSilenceTimeoutInSeconds": n => { recordResponsePostRequestBody.initialSilenceTimeoutInSeconds = n.getNumberValue(); },
        "maxRecordDurationInSeconds": n => { recordResponsePostRequestBody.maxRecordDurationInSeconds = n.getNumberValue(); },
        "maxSilenceTimeoutInSeconds": n => { recordResponsePostRequestBody.maxSilenceTimeoutInSeconds = n.getNumberValue(); },
        "playBeep": n => { recordResponsePostRequestBody.playBeep = n.getBooleanValue(); },
        "prompts": n => { recordResponsePostRequestBody.prompts = n.getCollectionOfObjectValues<Prompt>(createPromptFromDiscriminatorValue); },
        "stopTones": n => { recordResponsePostRequestBody.stopTones = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface RecordResponsePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The bargeInAllowed property
     */
    bargeInAllowed?: boolean;
    /**
     * The clientContext property
     */
    clientContext?: string;
    /**
     * The initialSilenceTimeoutInSeconds property
     */
    initialSilenceTimeoutInSeconds?: number;
    /**
     * The maxRecordDurationInSeconds property
     */
    maxRecordDurationInSeconds?: number;
    /**
     * The maxSilenceTimeoutInSeconds property
     */
    maxSilenceTimeoutInSeconds?: number;
    /**
     * The playBeep property
     */
    playBeep?: boolean;
    /**
     * The prompts property
     */
    prompts?: Prompt[];
    /**
     * The stopTones property
     */
    stopTones?: string[];
}
export function serializeRecordResponsePostRequestBody(writer: SerializationWriter, recordResponsePostRequestBody: RecordResponsePostRequestBody | undefined = {} as RecordResponsePostRequestBody) : void {
        writer.writeBooleanValue("bargeInAllowed", recordResponsePostRequestBody.bargeInAllowed);
        writer.writeStringValue("clientContext", recordResponsePostRequestBody.clientContext);
        writer.writeNumberValue("initialSilenceTimeoutInSeconds", recordResponsePostRequestBody.initialSilenceTimeoutInSeconds);
        writer.writeNumberValue("maxRecordDurationInSeconds", recordResponsePostRequestBody.maxRecordDurationInSeconds);
        writer.writeNumberValue("maxSilenceTimeoutInSeconds", recordResponsePostRequestBody.maxSilenceTimeoutInSeconds);
        writer.writeBooleanValue("playBeep", recordResponsePostRequestBody.playBeep);
        writer.writeCollectionOfObjectValues<Prompt>("prompts", recordResponsePostRequestBody.prompts, );
        writer.writeCollectionOfPrimitiveValues<string>("stopTones", recordResponsePostRequestBody.stopTones);
        writer.writeAdditionalData(recordResponsePostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
