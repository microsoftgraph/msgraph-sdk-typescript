// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createValidatePermissionPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoValidatePermissionPostRequestBody;
}
export function deserializeIntoValidatePermissionPostRequestBody(validatePermissionPostRequestBody: ValidatePermissionPostRequestBody | undefined = {} as ValidatePermissionPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "challengeToken": n => { validatePermissionPostRequestBody.challengeToken = n.getStringValue(); },
        "password": n => { validatePermissionPostRequestBody.password = n.getStringValue(); },
    }
}
export function serializeValidatePermissionPostRequestBody(writer: SerializationWriter, validatePermissionPostRequestBody: ValidatePermissionPostRequestBody | undefined = {} as ValidatePermissionPostRequestBody) : void {
        writer.writeStringValue("challengeToken", validatePermissionPostRequestBody.challengeToken);
        writer.writeStringValue("password", validatePermissionPostRequestBody.password);
        writer.writeAdditionalData(validatePermissionPostRequestBody.additionalData);
}
export interface ValidatePermissionPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The challengeToken property
     */
    challengeToken?: string;
    /**
     * The password property
     */
    password?: string;
}
// tslint:enable
// eslint-enable
