// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createItemReferenceFromDiscriminatorValue, serializeItemReference, type ItemReference } from '../../../../../models/itemReference';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRestorePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRestorePostRequestBody;
}
export function deserializeIntoRestorePostRequestBody(restorePostRequestBody: RestorePostRequestBody | undefined = {} as RestorePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { restorePostRequestBody.name = n.getStringValue(); },
        "parentReference": n => { restorePostRequestBody.parentReference = n.getObjectValue<ItemReference>(createItemReferenceFromDiscriminatorValue); },
    }
}
export interface RestorePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name property
     */
    name?: string;
    /**
     * The parentReference property
     */
    parentReference?: ItemReference;
}
export function serializeRestorePostRequestBody(writer: SerializationWriter, restorePostRequestBody: RestorePostRequestBody | undefined = {} as RestorePostRequestBody) : void {
        writer.writeStringValue("name", restorePostRequestBody.name);
        writer.writeObjectValue<ItemReference>("parentReference", restorePostRequestBody.parentReference, serializeItemReference);
        writer.writeAdditionalData(restorePostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
