/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createWorkbookFromDiscriminatorValue, serializeWorkbook, type Workbook } from '../../../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../models/oDataErrors/';
import { ApplicationRequestBuilderNavigationMetadata, ApplicationRequestBuilderRequestsMetadata, ApplicationRequestBuilderUriTemplate, type ApplicationRequestBuilder } from './application/';
import { CloseSessionRequestBuilderRequestsMetadata, CloseSessionRequestBuilderUriTemplate, type CloseSessionRequestBuilder } from './closeSession/';
import { CommentsRequestBuilderNavigationMetadata, CommentsRequestBuilderRequestsMetadata, CommentsRequestBuilderUriTemplate, type CommentsRequestBuilder } from './comments/';
import { CreateSessionRequestBuilderRequestsMetadata, CreateSessionRequestBuilderUriTemplate, type CreateSessionRequestBuilder } from './createSession/';
import { FunctionsRequestBuilderNavigationMetadata, FunctionsRequestBuilderRequestsMetadata, FunctionsRequestBuilderUriTemplate, type FunctionsRequestBuilder } from './functions/';
import { NamesRequestBuilderNavigationMetadata, NamesRequestBuilderRequestsMetadata, NamesRequestBuilderUriTemplate, type NamesRequestBuilder } from './names/';
import { OperationsRequestBuilderNavigationMetadata, OperationsRequestBuilderRequestsMetadata, OperationsRequestBuilderUriTemplate, type OperationsRequestBuilder } from './operations/';
import { RefreshSessionRequestBuilderRequestsMetadata, RefreshSessionRequestBuilderUriTemplate, type RefreshSessionRequestBuilder } from './refreshSession/';
import { SessionInfoResourceWithKeyRequestBuilderRequestsMetadata, SessionInfoResourceWithKeyRequestBuilderUriTemplate, type SessionInfoResourceWithKeyRequestBuilder } from './sessionInfoResourceWithKey/';
import { TableRowOperationResultWithKeyRequestBuilderRequestsMetadata, TableRowOperationResultWithKeyRequestBuilderUriTemplate, type TableRowOperationResultWithKeyRequestBuilder } from './tableRowOperationResultWithKey/';
import { TablesRequestBuilderNavigationMetadata, TablesRequestBuilderRequestsMetadata, TablesRequestBuilderUriTemplate, type TablesRequestBuilder } from './tables/';
import { type WorksheetsRequestBuilder, WorksheetsRequestBuilderNavigationMetadata, WorksheetsRequestBuilderRequestsMetadata, WorksheetsRequestBuilderUriTemplate } from './worksheets/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the workbook property of the microsoft.graph.driveItem entity.
 */
export interface WorkbookRequestBuilder extends BaseRequestBuilder<WorkbookRequestBuilder> {
    /**
     * Provides operations to manage the application property of the microsoft.graph.workbook entity.
     */
    get application(): ApplicationRequestBuilder;
    /**
     * Provides operations to call the closeSession method.
     */
    get closeSession(): CloseSessionRequestBuilder;
    /**
     * Provides operations to manage the comments property of the microsoft.graph.workbook entity.
     */
    get comments(): CommentsRequestBuilder;
    /**
     * Provides operations to call the createSession method.
     */
    get createSession(): CreateSessionRequestBuilder;
    /**
     * Provides operations to manage the functions property of the microsoft.graph.workbook entity.
     */
    get functions(): FunctionsRequestBuilder;
    /**
     * Provides operations to manage the names property of the microsoft.graph.workbook entity.
     */
    get names(): NamesRequestBuilder;
    /**
     * Provides operations to manage the operations property of the microsoft.graph.workbook entity.
     */
    get operations(): OperationsRequestBuilder;
    /**
     * Provides operations to call the refreshSession method.
     */
    get refreshSession(): RefreshSessionRequestBuilder;
    /**
     * Provides operations to manage the tables property of the microsoft.graph.workbook entity.
     */
    get tables(): TablesRequestBuilder;
    /**
     * Provides operations to manage the worksheets property of the microsoft.graph.workbook entity.
     */
    get worksheets(): WorksheetsRequestBuilder;
    /**
     * Delete navigation property workbook for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * For files that are Excel spreadsheets, access to the workbook API to work with the spreadsheet's contents. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Workbook
     */
     get(requestConfiguration?: RequestConfiguration<WorkbookRequestBuilderGetQueryParameters> | undefined) : Promise<Workbook | undefined>;
    /**
     * Update the navigation property workbook in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Workbook
     */
     patch(body: Workbook, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Workbook | undefined>;
    /**
     * Provides operations to call the sessionInfoResource method.
     * @param key Usage: key='{key}'
     * @returns a sessionInfoResourceWithKeyRequestBuilder
     */
     sessionInfoResourceWithKey(key: string | undefined) : SessionInfoResourceWithKeyRequestBuilder;
    /**
     * Provides operations to call the tableRowOperationResult method.
     * @param key Usage: key='{key}'
     * @returns a tableRowOperationResultWithKeyRequestBuilder
     */
     tableRowOperationResultWithKey(key: string | undefined) : TableRowOperationResultWithKeyRequestBuilder;
    /**
     * Delete navigation property workbook for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * For files that are Excel spreadsheets, access to the workbook API to work with the spreadsheet's contents. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WorkbookRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property workbook in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Workbook, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * For files that are Excel spreadsheets, access to the workbook API to work with the spreadsheet's contents. Nullable.
 */
export interface WorkbookRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WorkbookRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WorkbookRequestBuilderNavigationMetadata: Record<Exclude<keyof WorkbookRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    sessionInfoResourceWithKey: {
        uriTemplate: SessionInfoResourceWithKeyRequestBuilderUriTemplate,
        requestsMetadata: SessionInfoResourceWithKeyRequestBuilderRequestsMetadata,
    },
    tableRowOperationResultWithKey: {
        uriTemplate: TableRowOperationResultWithKeyRequestBuilderUriTemplate,
        requestsMetadata: TableRowOperationResultWithKeyRequestBuilderRequestsMetadata,
    },
    application: {
        uriTemplate: ApplicationRequestBuilderUriTemplate,
        requestsMetadata: ApplicationRequestBuilderRequestsMetadata,
        navigationMetadata: ApplicationRequestBuilderNavigationMetadata,
    },
    closeSession: {
        uriTemplate: CloseSessionRequestBuilderUriTemplate,
        requestsMetadata: CloseSessionRequestBuilderRequestsMetadata,
    },
    comments: {
        uriTemplate: CommentsRequestBuilderUriTemplate,
        requestsMetadata: CommentsRequestBuilderRequestsMetadata,
        navigationMetadata: CommentsRequestBuilderNavigationMetadata,
    },
    createSession: {
        uriTemplate: CreateSessionRequestBuilderUriTemplate,
        requestsMetadata: CreateSessionRequestBuilderRequestsMetadata,
    },
    functions: {
        uriTemplate: FunctionsRequestBuilderUriTemplate,
        requestsMetadata: FunctionsRequestBuilderRequestsMetadata,
        navigationMetadata: FunctionsRequestBuilderNavigationMetadata,
    },
    names: {
        uriTemplate: NamesRequestBuilderUriTemplate,
        requestsMetadata: NamesRequestBuilderRequestsMetadata,
        navigationMetadata: NamesRequestBuilderNavigationMetadata,
    },
    operations: {
        uriTemplate: OperationsRequestBuilderUriTemplate,
        requestsMetadata: OperationsRequestBuilderRequestsMetadata,
        navigationMetadata: OperationsRequestBuilderNavigationMetadata,
    },
    refreshSession: {
        uriTemplate: RefreshSessionRequestBuilderUriTemplate,
        requestsMetadata: RefreshSessionRequestBuilderRequestsMetadata,
    },
    tables: {
        uriTemplate: TablesRequestBuilderUriTemplate,
        requestsMetadata: TablesRequestBuilderRequestsMetadata,
        navigationMetadata: TablesRequestBuilderNavigationMetadata,
    },
    worksheets: {
        uriTemplate: WorksheetsRequestBuilderUriTemplate,
        requestsMetadata: WorksheetsRequestBuilderRequestsMetadata,
        navigationMetadata: WorksheetsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WorkbookRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createWorkbookFromDiscriminatorValue,
        queryParametersMapper: WorkbookRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createWorkbookFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWorkbook,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const WorkbookRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
