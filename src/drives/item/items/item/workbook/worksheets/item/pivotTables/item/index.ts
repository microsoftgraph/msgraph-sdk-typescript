/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createWorkbookPivotTableFromDiscriminatorValue, serializeWorkbookPivotTable, type WorkbookPivotTable } from '../../../../../../../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../../../../models/oDataErrors/';
import { RefreshRequestBuilderRequestsMetadata, RefreshRequestBuilderUriTemplate, type RefreshRequestBuilder } from './refresh/';
import { type WorksheetRequestBuilder, WorksheetRequestBuilderRequestsMetadata, WorksheetRequestBuilderUriTemplate } from './worksheet/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the pivotTables property of the microsoft.graph.workbookWorksheet entity.
 */
export interface WorkbookPivotTableItemRequestBuilder extends BaseRequestBuilder<WorkbookPivotTableItemRequestBuilder> {
    /**
     * Provides operations to call the refresh method.
     */
    get refresh(): RefreshRequestBuilder;
    /**
     * Provides operations to manage the worksheet property of the microsoft.graph.workbookPivotTable entity.
     */
    get worksheet(): WorksheetRequestBuilder;
    /**
     * Delete navigation property pivotTables for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the properties and relationships of workbookPivotTable object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WorkbookPivotTable
     * @see {@link https://learn.microsoft.com/graph/api/workbookpivottable-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<WorkbookPivotTableItemRequestBuilderGetQueryParameters> | undefined) : Promise<WorkbookPivotTable | undefined>;
    /**
     * Update the navigation property pivotTables in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WorkbookPivotTable
     */
     patch(body: WorkbookPivotTable, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WorkbookPivotTable | undefined>;
    /**
     * Delete navigation property pivotTables for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the properties and relationships of workbookPivotTable object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WorkbookPivotTableItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property pivotTables in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: WorkbookPivotTable, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the properties and relationships of workbookPivotTable object.
 */
export interface WorkbookPivotTableItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WorkbookPivotTableItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WorkbookPivotTableItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WorkbookPivotTableItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    refresh: {
        uriTemplate: RefreshRequestBuilderUriTemplate,
        requestsMetadata: RefreshRequestBuilderRequestsMetadata,
    },
    worksheet: {
        uriTemplate: WorksheetRequestBuilderUriTemplate,
        requestsMetadata: WorksheetRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WorkbookPivotTableItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createWorkbookPivotTableFromDiscriminatorValue,
        queryParametersMapper: WorkbookPivotTableItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createWorkbookPivotTableFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWorkbookPivotTable,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const WorkbookPivotTableItemRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/worksheets/{workbookWorksheet%2Did}/pivotTables/{workbookPivotTable%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
