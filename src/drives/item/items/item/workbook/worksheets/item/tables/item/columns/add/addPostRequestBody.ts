// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AddPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The index property
     */
    index?: number;
    /**
     * The name property
     */
    name?: string;
    /**
     * The values property
     */
    values?: Json;
}
export function createAddPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAddPostRequestBody;
}
export function deserializeIntoAddPostRequestBody(addPostRequestBody: AddPostRequestBody | undefined = {} as AddPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "index": n => { addPostRequestBody.index = n.getNumberValue(); },
        "name": n => { addPostRequestBody.name = n.getStringValue(); },
        "values": n => { addPostRequestBody.values = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeAddPostRequestBody(writer: SerializationWriter, addPostRequestBody: AddPostRequestBody | undefined = {} as AddPostRequestBody) : void {
        writer.writeNumberValue("index", addPostRequestBody.index);
        writer.writeStringValue("name", addPostRequestBody.name);
        writer.writeObjectValue<Json>("values", addPostRequestBody.values, );
        writer.writeAdditionalData(addPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
