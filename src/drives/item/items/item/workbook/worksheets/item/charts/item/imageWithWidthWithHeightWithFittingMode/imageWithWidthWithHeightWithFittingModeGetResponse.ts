// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createImageWithWidthWithHeightWithFittingModeGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoImageWithWidthWithHeightWithFittingModeGetResponse;
}
export function deserializeIntoImageWithWidthWithHeightWithFittingModeGetResponse(imageWithWidthWithHeightWithFittingModeGetResponse: ImageWithWidthWithHeightWithFittingModeGetResponse | undefined = {} as ImageWithWidthWithHeightWithFittingModeGetResponse) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { imageWithWidthWithHeightWithFittingModeGetResponse.value = n.getStringValue(); },
    }
}
export interface ImageWithWidthWithHeightWithFittingModeGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The value property
     */
    value?: string;
}
export function serializeImageWithWidthWithHeightWithFittingModeGetResponse(writer: SerializationWriter, imageWithWidthWithHeightWithFittingModeGetResponse: ImageWithWidthWithHeightWithFittingModeGetResponse | undefined = {} as ImageWithWidthWithHeightWithFittingModeGetResponse) : void {
        writer.writeStringValue("value", imageWithWidthWithHeightWithFittingModeGetResponse.value);
        writer.writeAdditionalData(imageWithWidthWithHeightWithFittingModeGetResponse.additionalData);
}
// tslint:enable
// eslint-enable
