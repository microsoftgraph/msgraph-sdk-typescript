import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CountResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The value property
     */
    value?: number;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createCountResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCountResponse;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoCountResponse(countResponse: CountResponse | undefined = {} as CountResponse) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { countResponse.value = n.getNumberValue(); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeCountResponse(writer: SerializationWriter, countResponse: CountResponse | undefined = {} as CountResponse) : void {
        writer.writeNumberValue("value", countResponse.value);
        writer.writeAdditionalData(countResponse.additionalData);
}
