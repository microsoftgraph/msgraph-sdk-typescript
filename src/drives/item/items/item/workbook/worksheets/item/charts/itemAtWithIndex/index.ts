/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createWorkbookChartFromDiscriminatorValue, type WorkbookChart } from '../../../../../../../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../../../../../../../models/oDataErrors/';
import { AxesRequestBuilder } from './axes/';
import { DataLabelsRequestBuilder } from './dataLabels/';
import { FormatRequestBuilder } from './format/';
import { ImageRequestBuilder } from './image/';
import { ImageWithWidthRequestBuilder } from './imageWithWidth/';
import { ImageWithWidthWithHeightRequestBuilder } from './imageWithWidthWithHeight/';
import { ImageWithWidthWithHeightWithFittingModeRequestBuilder } from './imageWithWidthWithHeightWithFittingMode/';
import { LegendRequestBuilder } from './legend/';
import { SeriesRequestBuilder } from './series/';
import { SetDataRequestBuilder } from './setData/';
import { SetPositionRequestBuilder } from './setPosition/';
import { TitleRequestBuilder } from './title/';
import { WorksheetRequestBuilder } from './worksheet/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to call the itemAt method.
 */
export class ItemAtWithIndexRequestBuilder extends BaseRequestBuilder<ItemAtWithIndexRequestBuilder> {
    /**
     * Provides operations to manage the axes property of the microsoft.graph.workbookChart entity.
     */
    public get axes(): AxesRequestBuilder {
        return new AxesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the dataLabels property of the microsoft.graph.workbookChart entity.
     */
    public get dataLabels(): DataLabelsRequestBuilder {
        return new DataLabelsRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the format property of the microsoft.graph.workbookChart entity.
     */
    public get format(): FormatRequestBuilder {
        return new FormatRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to call the image method.
     */
    public get image(): ImageRequestBuilder {
        return new ImageRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the legend property of the microsoft.graph.workbookChart entity.
     */
    public get legend(): LegendRequestBuilder {
        return new LegendRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the series property of the microsoft.graph.workbookChart entity.
     */
    public get series(): SeriesRequestBuilder {
        return new SeriesRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to call the setData method.
     */
    public get setData(): SetDataRequestBuilder {
        return new SetDataRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to call the setPosition method.
     */
    public get setPosition(): SetPositionRequestBuilder {
        return new SetPositionRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the title property of the microsoft.graph.workbookChart entity.
     */
    public get title(): TitleRequestBuilder {
        return new TitleRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the worksheet property of the microsoft.graph.workbookChart entity.
     */
    public get worksheet(): WorksheetRequestBuilder {
        return new WorksheetRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Instantiates a new ItemAtWithIndexRequestBuilder and sets the default values.
     * @param index Usage: index={index}
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter, index?: number | undefined) {
        super(pathParameters, requestAdapter, "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/worksheets/{workbookWorksheet%2Did}/charts/itemAt(index={index})", (x, y) => new ItemAtWithIndexRequestBuilder(x, y));
        this.pathParameters["index"] = index
    }
    /**
     * Invoke function itemAt
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WorkbookChart
     */
    public get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WorkbookChart | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<WorkbookChart>(requestInfo, createWorkbookChartFromDiscriminatorValue, errorMapping);
    }
    /**
     * Provides operations to call the image method.
     * @param width Usage: width={width}
     * @returns a imageWithWidthRequestBuilder
     */
    public imageWithWidth(width: number | undefined) : ImageWithWidthRequestBuilder {
        if(!width) throw new Error("width cannot be undefined");
        return new ImageWithWidthRequestBuilder(this.pathParameters, this.requestAdapter, width);
    }
    /**
     * Provides operations to call the image method.
     * @param height Usage: height={height}
     * @param width Usage: width={width}
     * @returns a imageWithWidthWithHeightRequestBuilder
     */
    public imageWithWidthWithHeight(height: number | undefined, width: number | undefined) : ImageWithWidthWithHeightRequestBuilder {
        if(!height) throw new Error("height cannot be undefined");
        if(!width) throw new Error("width cannot be undefined");
        return new ImageWithWidthWithHeightRequestBuilder(this.pathParameters, this.requestAdapter, height, width);
    }
    /**
     * Provides operations to call the image method.
     * @param fittingMode Usage: fittingMode='{fittingMode}'
     * @param height Usage: height={height}
     * @param width Usage: width={width}
     * @returns a imageWithWidthWithHeightWithFittingModeRequestBuilder
     */
    public imageWithWidthWithHeightWithFittingMode(fittingMode: string | undefined, height: number | undefined, width: number | undefined) : ImageWithWidthWithHeightWithFittingModeRequestBuilder {
        if(!fittingMode) throw new Error("fittingMode cannot be undefined");
        if(!height) throw new Error("height cannot be undefined");
        if(!width) throw new Error("width cannot be undefined");
        return new ImageWithWidthWithHeightWithFittingModeRequestBuilder(this.pathParameters, this.requestAdapter, fittingMode, height, width);
    }
    /**
     * Invoke function itemAt
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    }
}
/* tslint:enable */
/* eslint-enable */
