/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createWorkbookFilterFromDiscriminatorValue, serializeWorkbookFilter, type WorkbookFilter } from '../../../../../../../../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../../../../../models/oDataErrors/';
import { ApplyRequestBuilderRequestsMetadata, ApplyRequestBuilderUriTemplate, type ApplyRequestBuilder } from './apply/';
import { ApplyBottomItemsFilterRequestBuilderRequestsMetadata, ApplyBottomItemsFilterRequestBuilderUriTemplate, type ApplyBottomItemsFilterRequestBuilder } from './applyBottomItemsFilter/';
import { ApplyBottomPercentFilterRequestBuilderRequestsMetadata, ApplyBottomPercentFilterRequestBuilderUriTemplate, type ApplyBottomPercentFilterRequestBuilder } from './applyBottomPercentFilter/';
import { ApplyCellColorFilterRequestBuilderRequestsMetadata, ApplyCellColorFilterRequestBuilderUriTemplate, type ApplyCellColorFilterRequestBuilder } from './applyCellColorFilter/';
import { ApplyCustomFilterRequestBuilderRequestsMetadata, ApplyCustomFilterRequestBuilderUriTemplate, type ApplyCustomFilterRequestBuilder } from './applyCustomFilter/';
import { ApplyDynamicFilterRequestBuilderRequestsMetadata, ApplyDynamicFilterRequestBuilderUriTemplate, type ApplyDynamicFilterRequestBuilder } from './applyDynamicFilter/';
import { ApplyFontColorFilterRequestBuilderRequestsMetadata, ApplyFontColorFilterRequestBuilderUriTemplate, type ApplyFontColorFilterRequestBuilder } from './applyFontColorFilter/';
import { ApplyIconFilterRequestBuilderRequestsMetadata, ApplyIconFilterRequestBuilderUriTemplate, type ApplyIconFilterRequestBuilder } from './applyIconFilter/';
import { ApplyTopItemsFilterRequestBuilderRequestsMetadata, ApplyTopItemsFilterRequestBuilderUriTemplate, type ApplyTopItemsFilterRequestBuilder } from './applyTopItemsFilter/';
import { ApplyTopPercentFilterRequestBuilderRequestsMetadata, ApplyTopPercentFilterRequestBuilderUriTemplate, type ApplyTopPercentFilterRequestBuilder } from './applyTopPercentFilter/';
import { ApplyValuesFilterRequestBuilderRequestsMetadata, ApplyValuesFilterRequestBuilderUriTemplate, type ApplyValuesFilterRequestBuilder } from './applyValuesFilter/';
import { ClearRequestBuilderRequestsMetadata, ClearRequestBuilderUriTemplate, type ClearRequestBuilder } from './clear/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the filter property of the microsoft.graph.workbookTableColumn entity.
 */
export interface FilterRequestBuilder extends BaseRequestBuilder<FilterRequestBuilder> {
    /**
     * Provides operations to call the apply method.
     */
    get apply(): ApplyRequestBuilder;
    /**
     * Provides operations to call the applyBottomItemsFilter method.
     */
    get applyBottomItemsFilter(): ApplyBottomItemsFilterRequestBuilder;
    /**
     * Provides operations to call the applyBottomPercentFilter method.
     */
    get applyBottomPercentFilter(): ApplyBottomPercentFilterRequestBuilder;
    /**
     * Provides operations to call the applyCellColorFilter method.
     */
    get applyCellColorFilter(): ApplyCellColorFilterRequestBuilder;
    /**
     * Provides operations to call the applyCustomFilter method.
     */
    get applyCustomFilter(): ApplyCustomFilterRequestBuilder;
    /**
     * Provides operations to call the applyDynamicFilter method.
     */
    get applyDynamicFilter(): ApplyDynamicFilterRequestBuilder;
    /**
     * Provides operations to call the applyFontColorFilter method.
     */
    get applyFontColorFilter(): ApplyFontColorFilterRequestBuilder;
    /**
     * Provides operations to call the applyIconFilter method.
     */
    get applyIconFilter(): ApplyIconFilterRequestBuilder;
    /**
     * Provides operations to call the applyTopItemsFilter method.
     */
    get applyTopItemsFilter(): ApplyTopItemsFilterRequestBuilder;
    /**
     * Provides operations to call the applyTopPercentFilter method.
     */
    get applyTopPercentFilter(): ApplyTopPercentFilterRequestBuilder;
    /**
     * Provides operations to call the applyValuesFilter method.
     */
    get applyValuesFilter(): ApplyValuesFilterRequestBuilder;
    /**
     * Provides operations to call the clear method.
     */
    get clear(): ClearRequestBuilder;
    /**
     * Delete navigation property filter for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Retrieve the filter applied to the column. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WorkbookFilter
     */
     get(requestConfiguration?: RequestConfiguration<FilterRequestBuilderGetQueryParameters> | undefined) : Promise<WorkbookFilter | undefined>;
    /**
     * Update the navigation property filter in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WorkbookFilter
     */
     patch(body: WorkbookFilter, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WorkbookFilter | undefined>;
    /**
     * Delete navigation property filter for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Retrieve the filter applied to the column. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<FilterRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property filter in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: WorkbookFilter, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve the filter applied to the column. Read-only.
 */
export interface FilterRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const FilterRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const FilterRequestBuilderNavigationMetadata: Record<Exclude<keyof FilterRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    apply: {
        uriTemplate: ApplyRequestBuilderUriTemplate,
        requestsMetadata: ApplyRequestBuilderRequestsMetadata,
    },
    applyBottomItemsFilter: {
        uriTemplate: ApplyBottomItemsFilterRequestBuilderUriTemplate,
        requestsMetadata: ApplyBottomItemsFilterRequestBuilderRequestsMetadata,
    },
    applyBottomPercentFilter: {
        uriTemplate: ApplyBottomPercentFilterRequestBuilderUriTemplate,
        requestsMetadata: ApplyBottomPercentFilterRequestBuilderRequestsMetadata,
    },
    applyCellColorFilter: {
        uriTemplate: ApplyCellColorFilterRequestBuilderUriTemplate,
        requestsMetadata: ApplyCellColorFilterRequestBuilderRequestsMetadata,
    },
    applyCustomFilter: {
        uriTemplate: ApplyCustomFilterRequestBuilderUriTemplate,
        requestsMetadata: ApplyCustomFilterRequestBuilderRequestsMetadata,
    },
    applyDynamicFilter: {
        uriTemplate: ApplyDynamicFilterRequestBuilderUriTemplate,
        requestsMetadata: ApplyDynamicFilterRequestBuilderRequestsMetadata,
    },
    applyFontColorFilter: {
        uriTemplate: ApplyFontColorFilterRequestBuilderUriTemplate,
        requestsMetadata: ApplyFontColorFilterRequestBuilderRequestsMetadata,
    },
    applyIconFilter: {
        uriTemplate: ApplyIconFilterRequestBuilderUriTemplate,
        requestsMetadata: ApplyIconFilterRequestBuilderRequestsMetadata,
    },
    applyTopItemsFilter: {
        uriTemplate: ApplyTopItemsFilterRequestBuilderUriTemplate,
        requestsMetadata: ApplyTopItemsFilterRequestBuilderRequestsMetadata,
    },
    applyTopPercentFilter: {
        uriTemplate: ApplyTopPercentFilterRequestBuilderUriTemplate,
        requestsMetadata: ApplyTopPercentFilterRequestBuilderRequestsMetadata,
    },
    applyValuesFilter: {
        uriTemplate: ApplyValuesFilterRequestBuilderUriTemplate,
        requestsMetadata: ApplyValuesFilterRequestBuilderRequestsMetadata,
    },
    clear: {
        uriTemplate: ClearRequestBuilderUriTemplate,
        requestsMetadata: ClearRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const FilterRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createWorkbookFilterFromDiscriminatorValue,
        queryParametersMapper: FilterRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createWorkbookFilterFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWorkbookFilter,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const FilterRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/tables/{workbookTable%2Did}/columns/{workbookTableColumn%2Did}/filter{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
