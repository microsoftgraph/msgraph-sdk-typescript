// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createReplacePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoReplacePostRequestBody;
}
export function deserializeIntoReplacePostRequestBody(replacePostRequestBody: ReplacePostRequestBody | undefined = {} as ReplacePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "newText": n => { replacePostRequestBody.newText = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "numChars": n => { replacePostRequestBody.numChars = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "oldText": n => { replacePostRequestBody.oldText = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "startNum": n => { replacePostRequestBody.startNum = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface ReplacePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The newText property
     */
    newText?: Json;
    /**
     * The numChars property
     */
    numChars?: Json;
    /**
     * The oldText property
     */
    oldText?: Json;
    /**
     * The startNum property
     */
    startNum?: Json;
}
export function serializeReplacePostRequestBody(writer: SerializationWriter, replacePostRequestBody: ReplacePostRequestBody | undefined = {} as ReplacePostRequestBody) : void {
        writer.writeObjectValue<Json>("newText", replacePostRequestBody.newText, );
        writer.writeObjectValue<Json>("numChars", replacePostRequestBody.numChars, );
        writer.writeObjectValue<Json>("oldText", replacePostRequestBody.oldText, );
        writer.writeObjectValue<Json>("startNum", replacePostRequestBody.startNum, );
        writer.writeAdditionalData(replacePostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
