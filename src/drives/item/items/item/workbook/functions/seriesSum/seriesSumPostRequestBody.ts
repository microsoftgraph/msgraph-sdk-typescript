// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSeriesSumPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSeriesSumPostRequestBody;
}
export function deserializeIntoSeriesSumPostRequestBody(seriesSumPostRequestBody: SeriesSumPostRequestBody | undefined = {} as SeriesSumPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "coefficients": n => { seriesSumPostRequestBody.coefficients = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "m": n => { seriesSumPostRequestBody.m = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "n": n => { seriesSumPostRequestBody.n = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "x": n => { seriesSumPostRequestBody.x = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeSeriesSumPostRequestBody(writer: SerializationWriter, seriesSumPostRequestBody: SeriesSumPostRequestBody | undefined = {} as SeriesSumPostRequestBody) : void {
        writer.writeObjectValue<Json>("coefficients", seriesSumPostRequestBody.coefficients, serializeJson);
        writer.writeObjectValue<Json>("m", seriesSumPostRequestBody.m, serializeJson);
        writer.writeObjectValue<Json>("n", seriesSumPostRequestBody.n, serializeJson);
        writer.writeObjectValue<Json>("x", seriesSumPostRequestBody.x, serializeJson);
        writer.writeAdditionalData(seriesSumPostRequestBody.additionalData);
}
export interface SeriesSumPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The coefficients property
     */
    coefficients?: Json;
    /**
     * The m property
     */
    m?: Json;
    /**
     * The n property
     */
    n?: Json;
    /**
     * The x property
     */
    x?: Json;
}
// tslint:enable
// eslint-enable
