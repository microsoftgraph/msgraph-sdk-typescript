// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createHypGeom_DistPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoHypGeom_DistPostRequestBody;
}
export function deserializeIntoHypGeom_DistPostRequestBody(hypGeom_DistPostRequestBody: HypGeom_DistPostRequestBody | undefined = {} as HypGeom_DistPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "cumulative": n => { hypGeom_DistPostRequestBody.cumulative = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "numberPop": n => { hypGeom_DistPostRequestBody.numberPop = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "numberSample": n => { hypGeom_DistPostRequestBody.numberSample = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "populationS": n => { hypGeom_DistPostRequestBody.populationS = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "sampleS": n => { hypGeom_DistPostRequestBody.sampleS = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface HypGeom_DistPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The cumulative property
     */
    cumulative?: Json;
    /**
     * The numberPop property
     */
    numberPop?: Json;
    /**
     * The numberSample property
     */
    numberSample?: Json;
    /**
     * The populationS property
     */
    populationS?: Json;
    /**
     * The sampleS property
     */
    sampleS?: Json;
}
export function serializeHypGeom_DistPostRequestBody(writer: SerializationWriter, hypGeom_DistPostRequestBody: HypGeom_DistPostRequestBody | undefined = {} as HypGeom_DistPostRequestBody) : void {
        writer.writeObjectValue<Json>("cumulative", hypGeom_DistPostRequestBody.cumulative, );
        writer.writeObjectValue<Json>("numberPop", hypGeom_DistPostRequestBody.numberPop, );
        writer.writeObjectValue<Json>("numberSample", hypGeom_DistPostRequestBody.numberSample, );
        writer.writeObjectValue<Json>("populationS", hypGeom_DistPostRequestBody.populationS, );
        writer.writeObjectValue<Json>("sampleS", hypGeom_DistPostRequestBody.sampleS, );
        writer.writeAdditionalData(hypGeom_DistPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
