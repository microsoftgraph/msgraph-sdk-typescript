// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createReplaceBPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoReplaceBPostRequestBody;
}
export function deserializeIntoReplaceBPostRequestBody(replaceBPostRequestBody: ReplaceBPostRequestBody | undefined = {} as ReplaceBPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "newText": n => { replaceBPostRequestBody.newText = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "numBytes": n => { replaceBPostRequestBody.numBytes = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "oldText": n => { replaceBPostRequestBody.oldText = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "startNum": n => { replaceBPostRequestBody.startNum = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface ReplaceBPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The newText property
     */
    newText?: Json;
    /**
     * The numBytes property
     */
    numBytes?: Json;
    /**
     * The oldText property
     */
    oldText?: Json;
    /**
     * The startNum property
     */
    startNum?: Json;
}
export function serializeReplaceBPostRequestBody(writer: SerializationWriter, replaceBPostRequestBody: ReplaceBPostRequestBody | undefined = {} as ReplaceBPostRequestBody) : void {
        writer.writeObjectValue<Json>("newText", replaceBPostRequestBody.newText, serializeJson);
        writer.writeObjectValue<Json>("numBytes", replaceBPostRequestBody.numBytes, serializeJson);
        writer.writeObjectValue<Json>("oldText", replaceBPostRequestBody.oldText, serializeJson);
        writer.writeObjectValue<Json>("startNum", replaceBPostRequestBody.startNum, serializeJson);
        writer.writeAdditionalData(replaceBPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
