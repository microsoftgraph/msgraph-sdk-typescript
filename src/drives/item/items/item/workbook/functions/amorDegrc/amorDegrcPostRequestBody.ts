// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AmorDegrcPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The basis property
     */
    basis?: Json;
    /**
     * The cost property
     */
    cost?: Json;
    /**
     * The datePurchased property
     */
    datePurchased?: Json;
    /**
     * The firstPeriod property
     */
    firstPeriod?: Json;
    /**
     * The period property
     */
    period?: Json;
    /**
     * The rate property
     */
    rate?: Json;
    /**
     * The salvage property
     */
    salvage?: Json;
}
export function createAmorDegrcPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAmorDegrcPostRequestBody;
}
export function deserializeIntoAmorDegrcPostRequestBody(amorDegrcPostRequestBody: AmorDegrcPostRequestBody | undefined = {} as AmorDegrcPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "basis": n => { amorDegrcPostRequestBody.basis = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "cost": n => { amorDegrcPostRequestBody.cost = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "datePurchased": n => { amorDegrcPostRequestBody.datePurchased = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "firstPeriod": n => { amorDegrcPostRequestBody.firstPeriod = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "period": n => { amorDegrcPostRequestBody.period = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "rate": n => { amorDegrcPostRequestBody.rate = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "salvage": n => { amorDegrcPostRequestBody.salvage = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeAmorDegrcPostRequestBody(writer: SerializationWriter, amorDegrcPostRequestBody: AmorDegrcPostRequestBody | undefined = {} as AmorDegrcPostRequestBody) : void {
        writer.writeObjectValue<Json>("basis", amorDegrcPostRequestBody.basis, );
        writer.writeObjectValue<Json>("cost", amorDegrcPostRequestBody.cost, );
        writer.writeObjectValue<Json>("datePurchased", amorDegrcPostRequestBody.datePurchased, );
        writer.writeObjectValue<Json>("firstPeriod", amorDegrcPostRequestBody.firstPeriod, );
        writer.writeObjectValue<Json>("period", amorDegrcPostRequestBody.period, );
        writer.writeObjectValue<Json>("rate", amorDegrcPostRequestBody.rate, );
        writer.writeObjectValue<Json>("salvage", amorDegrcPostRequestBody.salvage, );
        writer.writeAdditionalData(amorDegrcPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
