import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createRightPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRightPostRequestBody;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoRightPostRequestBody(rightPostRequestBody: RightPostRequestBody | undefined = {} as RightPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "numChars": n => { rightPostRequestBody.numChars = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "text": n => { rightPostRequestBody.text = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface RightPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The numChars property
     */
    numChars?: Json;
    /**
     * The text property
     */
    text?: Json;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeRightPostRequestBody(writer: SerializationWriter, rightPostRequestBody: RightPostRequestBody | undefined = {} as RightPostRequestBody) : void {
        writer.writeObjectValue<Json>("numChars", rightPostRequestBody.numChars, );
        writer.writeObjectValue<Json>("text", rightPostRequestBody.text, );
        writer.writeAdditionalData(rightPostRequestBody.additionalData);
}
