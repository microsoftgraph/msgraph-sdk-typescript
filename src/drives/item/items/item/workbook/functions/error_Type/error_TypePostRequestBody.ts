// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createError_TypePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoError_TypePostRequestBody;
}
export function deserializeIntoError_TypePostRequestBody(error_TypePostRequestBody: Error_TypePostRequestBody | undefined = {} as Error_TypePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "errorVal": n => { error_TypePostRequestBody.errorVal = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface Error_TypePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The errorVal property
     */
    errorVal?: Json;
}
export function serializeError_TypePostRequestBody(writer: SerializationWriter, error_TypePostRequestBody: Error_TypePostRequestBody | undefined = {} as Error_TypePostRequestBody) : void {
        writer.writeObjectValue<Json>("errorVal", error_TypePostRequestBody.errorVal, );
        writer.writeAdditionalData(error_TypePostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
