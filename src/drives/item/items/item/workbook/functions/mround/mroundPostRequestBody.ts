import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createMroundPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMroundPostRequestBody;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoMroundPostRequestBody(mroundPostRequestBody: MroundPostRequestBody | undefined = {} as MroundPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "multiple": n => { mroundPostRequestBody.multiple = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "number": n => { mroundPostRequestBody.number = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface MroundPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The multiple property
     */
    multiple?: Json;
    /**
     * The number property
     */
    number?: Json;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeMroundPostRequestBody(writer: SerializationWriter, mroundPostRequestBody: MroundPostRequestBody | undefined = {} as MroundPostRequestBody) : void {
        writer.writeObjectValue<Json>("multiple", mroundPostRequestBody.multiple, );
        writer.writeObjectValue<Json>("number", mroundPostRequestBody.number, );
        writer.writeAdditionalData(mroundPostRequestBody.additionalData);
}
