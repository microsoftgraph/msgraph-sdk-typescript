// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccrIntPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The basis property
     */
    basis?: Json;
    /**
     * The calcMethod property
     */
    calcMethod?: Json;
    /**
     * The firstInterest property
     */
    firstInterest?: Json;
    /**
     * The frequency property
     */
    frequency?: Json;
    /**
     * The issue property
     */
    issue?: Json;
    /**
     * The par property
     */
    par?: Json;
    /**
     * The rate property
     */
    rate?: Json;
    /**
     * The settlement property
     */
    settlement?: Json;
}
export function createAccrIntPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccrIntPostRequestBody;
}
export function deserializeIntoAccrIntPostRequestBody(accrIntPostRequestBody: AccrIntPostRequestBody | undefined = {} as AccrIntPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "basis": n => { accrIntPostRequestBody.basis = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "calcMethod": n => { accrIntPostRequestBody.calcMethod = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "firstInterest": n => { accrIntPostRequestBody.firstInterest = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "frequency": n => { accrIntPostRequestBody.frequency = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "issue": n => { accrIntPostRequestBody.issue = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "par": n => { accrIntPostRequestBody.par = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "rate": n => { accrIntPostRequestBody.rate = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "settlement": n => { accrIntPostRequestBody.settlement = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeAccrIntPostRequestBody(writer: SerializationWriter, accrIntPostRequestBody: AccrIntPostRequestBody | undefined = {} as AccrIntPostRequestBody) : void {
        writer.writeObjectValue<Json>("basis", accrIntPostRequestBody.basis, );
        writer.writeObjectValue<Json>("calcMethod", accrIntPostRequestBody.calcMethod, );
        writer.writeObjectValue<Json>("firstInterest", accrIntPostRequestBody.firstInterest, );
        writer.writeObjectValue<Json>("frequency", accrIntPostRequestBody.frequency, );
        writer.writeObjectValue<Json>("issue", accrIntPostRequestBody.issue, );
        writer.writeObjectValue<Json>("par", accrIntPostRequestBody.par, );
        writer.writeObjectValue<Json>("rate", accrIntPostRequestBody.rate, );
        writer.writeObjectValue<Json>("settlement", accrIntPostRequestBody.settlement, );
        writer.writeAdditionalData(accrIntPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
