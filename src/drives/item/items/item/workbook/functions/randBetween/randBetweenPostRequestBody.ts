// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRandBetweenPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRandBetweenPostRequestBody;
}
export function deserializeIntoRandBetweenPostRequestBody(randBetweenPostRequestBody: RandBetweenPostRequestBody | undefined = {} as RandBetweenPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "bottom": n => { randBetweenPostRequestBody.bottom = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "top": n => { randBetweenPostRequestBody.top = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface RandBetweenPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The bottom property
     */
    bottom?: Json;
    /**
     * The top property
     */
    top?: Json;
}
export function serializeRandBetweenPostRequestBody(writer: SerializationWriter, randBetweenPostRequestBody: RandBetweenPostRequestBody | undefined = {} as RandBetweenPostRequestBody) : void {
        writer.writeObjectValue<Json>("bottom", randBetweenPostRequestBody.bottom, );
        writer.writeObjectValue<Json>("top", randBetweenPostRequestBody.top, );
        writer.writeAdditionalData(randBetweenPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
