import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createFloor_MathPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFloor_MathPostRequestBody;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoFloor_MathPostRequestBody(floor_MathPostRequestBody: Floor_MathPostRequestBody | undefined = {} as Floor_MathPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "mode": n => { floor_MathPostRequestBody.mode = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "number": n => { floor_MathPostRequestBody.number = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "significance": n => { floor_MathPostRequestBody.significance = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface Floor_MathPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The mode property
     */
    mode?: Json;
    /**
     * The number property
     */
    number?: Json;
    /**
     * The significance property
     */
    significance?: Json;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeFloor_MathPostRequestBody(writer: SerializationWriter, floor_MathPostRequestBody: Floor_MathPostRequestBody | undefined = {} as Floor_MathPostRequestBody) : void {
        writer.writeObjectValue<Json>("mode", floor_MathPostRequestBody.mode, );
        writer.writeObjectValue<Json>("number", floor_MathPostRequestBody.number, );
        writer.writeObjectValue<Json>("significance", floor_MathPostRequestBody.significance, );
        writer.writeAdditionalData(floor_MathPostRequestBody.additionalData);
}
