// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AmorLincPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The basis property
     */
    basis?: Json;
    /**
     * The cost property
     */
    cost?: Json;
    /**
     * The datePurchased property
     */
    datePurchased?: Json;
    /**
     * The firstPeriod property
     */
    firstPeriod?: Json;
    /**
     * The period property
     */
    period?: Json;
    /**
     * The rate property
     */
    rate?: Json;
    /**
     * The salvage property
     */
    salvage?: Json;
}
export function createAmorLincPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAmorLincPostRequestBody;
}
export function deserializeIntoAmorLincPostRequestBody(amorLincPostRequestBody: AmorLincPostRequestBody | undefined = {} as AmorLincPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "basis": n => { amorLincPostRequestBody.basis = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "cost": n => { amorLincPostRequestBody.cost = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "datePurchased": n => { amorLincPostRequestBody.datePurchased = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "firstPeriod": n => { amorLincPostRequestBody.firstPeriod = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "period": n => { amorLincPostRequestBody.period = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "rate": n => { amorLincPostRequestBody.rate = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "salvage": n => { amorLincPostRequestBody.salvage = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeAmorLincPostRequestBody(writer: SerializationWriter, amorLincPostRequestBody: AmorLincPostRequestBody | undefined = {} as AmorLincPostRequestBody) : void {
        writer.writeObjectValue<Json>("basis", amorLincPostRequestBody.basis, serializeJson);
        writer.writeObjectValue<Json>("cost", amorLincPostRequestBody.cost, serializeJson);
        writer.writeObjectValue<Json>("datePurchased", amorLincPostRequestBody.datePurchased, serializeJson);
        writer.writeObjectValue<Json>("firstPeriod", amorLincPostRequestBody.firstPeriod, serializeJson);
        writer.writeObjectValue<Json>("period", amorLincPostRequestBody.period, serializeJson);
        writer.writeObjectValue<Json>("rate", amorLincPostRequestBody.rate, serializeJson);
        writer.writeObjectValue<Json>("salvage", amorLincPostRequestBody.salvage, serializeJson);
        writer.writeAdditionalData(amorLincPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
