// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDollarDePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDollarDePostRequestBody;
}
export function deserializeIntoDollarDePostRequestBody(dollarDePostRequestBody: DollarDePostRequestBody | undefined = {} as DollarDePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "fraction": n => { dollarDePostRequestBody.fraction = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "fractionalDollar": n => { dollarDePostRequestBody.fractionalDollar = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface DollarDePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The fraction property
     */
    fraction?: Json;
    /**
     * The fractionalDollar property
     */
    fractionalDollar?: Json;
}
export function serializeDollarDePostRequestBody(writer: SerializationWriter, dollarDePostRequestBody: DollarDePostRequestBody | undefined = {} as DollarDePostRequestBody) : void {
        writer.writeObjectValue<Json>("fraction", dollarDePostRequestBody.fraction, );
        writer.writeObjectValue<Json>("fractionalDollar", dollarDePostRequestBody.fractionalDollar, );
        writer.writeAdditionalData(dollarDePostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
