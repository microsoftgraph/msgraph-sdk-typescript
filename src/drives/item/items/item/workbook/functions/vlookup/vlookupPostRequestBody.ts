// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVlookupPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoVlookupPostRequestBody;
}
export function deserializeIntoVlookupPostRequestBody(vlookupPostRequestBody: VlookupPostRequestBody | undefined = {} as VlookupPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "colIndexNum": n => { vlookupPostRequestBody.colIndexNum = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "lookupValue": n => { vlookupPostRequestBody.lookupValue = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "rangeLookup": n => { vlookupPostRequestBody.rangeLookup = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "tableArray": n => { vlookupPostRequestBody.tableArray = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeVlookupPostRequestBody(writer: SerializationWriter, vlookupPostRequestBody: VlookupPostRequestBody | undefined = {} as VlookupPostRequestBody) : void {
        writer.writeObjectValue<Json>("colIndexNum", vlookupPostRequestBody.colIndexNum, );
        writer.writeObjectValue<Json>("lookupValue", vlookupPostRequestBody.lookupValue, );
        writer.writeObjectValue<Json>("rangeLookup", vlookupPostRequestBody.rangeLookup, );
        writer.writeObjectValue<Json>("tableArray", vlookupPostRequestBody.tableArray, );
        writer.writeAdditionalData(vlookupPostRequestBody.additionalData);
}
export interface VlookupPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The colIndexNum property
     */
    colIndexNum?: Json;
    /**
     * The lookupValue property
     */
    lookupValue?: Json;
    /**
     * The rangeLookup property
     */
    rangeLookup?: Json;
    /**
     * The tableArray property
     */
    tableArray?: Json;
}
// tslint:enable
// eslint-enable
