// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Confidence_TPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The alpha property
     */
    alpha?: Json;
    /**
     * The size property
     */
    size?: Json;
    /**
     * The standardDev property
     */
    standardDev?: Json;
}
export function createConfidence_TPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConfidence_TPostRequestBody;
}
export function deserializeIntoConfidence_TPostRequestBody(confidence_TPostRequestBody: Confidence_TPostRequestBody | undefined = {} as Confidence_TPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "alpha": n => { confidence_TPostRequestBody.alpha = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "size": n => { confidence_TPostRequestBody.size = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "standardDev": n => { confidence_TPostRequestBody.standardDev = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeConfidence_TPostRequestBody(writer: SerializationWriter, confidence_TPostRequestBody: Confidence_TPostRequestBody | undefined = {} as Confidence_TPostRequestBody) : void {
        writer.writeObjectValue<Json>("alpha", confidence_TPostRequestBody.alpha, );
        writer.writeObjectValue<Json>("size", confidence_TPostRequestBody.size, );
        writer.writeObjectValue<Json>("standardDev", confidence_TPostRequestBody.standardDev, );
        writer.writeAdditionalData(confidence_TPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
