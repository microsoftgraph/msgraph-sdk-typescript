// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDdbPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDdbPostRequestBody;
}
export interface DdbPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The cost property
     */
    cost?: Json;
    /**
     * The factor property
     */
    factor?: Json;
    /**
     * The life property
     */
    life?: Json;
    /**
     * The period property
     */
    period?: Json;
    /**
     * The salvage property
     */
    salvage?: Json;
}
export function deserializeIntoDdbPostRequestBody(ddbPostRequestBody: DdbPostRequestBody | undefined = {} as DdbPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "cost": n => { ddbPostRequestBody.cost = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "factor": n => { ddbPostRequestBody.factor = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "life": n => { ddbPostRequestBody.life = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "period": n => { ddbPostRequestBody.period = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "salvage": n => { ddbPostRequestBody.salvage = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeDdbPostRequestBody(writer: SerializationWriter, ddbPostRequestBody: DdbPostRequestBody | undefined = {} as DdbPostRequestBody) : void {
        writer.writeObjectValue<Json>("cost", ddbPostRequestBody.cost, );
        writer.writeObjectValue<Json>("factor", ddbPostRequestBody.factor, );
        writer.writeObjectValue<Json>("life", ddbPostRequestBody.life, );
        writer.writeObjectValue<Json>("period", ddbPostRequestBody.period, );
        writer.writeObjectValue<Json>("salvage", ddbPostRequestBody.salvage, );
        writer.writeAdditionalData(ddbPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
