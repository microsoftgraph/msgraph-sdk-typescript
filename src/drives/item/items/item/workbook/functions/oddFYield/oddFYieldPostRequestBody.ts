// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOddFYieldPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOddFYieldPostRequestBody;
}
export function deserializeIntoOddFYieldPostRequestBody(oddFYieldPostRequestBody: OddFYieldPostRequestBody | undefined = {} as OddFYieldPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "basis": n => { oddFYieldPostRequestBody.basis = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "firstCoupon": n => { oddFYieldPostRequestBody.firstCoupon = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "frequency": n => { oddFYieldPostRequestBody.frequency = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "issue": n => { oddFYieldPostRequestBody.issue = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "maturity": n => { oddFYieldPostRequestBody.maturity = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "pr": n => { oddFYieldPostRequestBody.pr = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "rate": n => { oddFYieldPostRequestBody.rate = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "redemption": n => { oddFYieldPostRequestBody.redemption = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "settlement": n => { oddFYieldPostRequestBody.settlement = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface OddFYieldPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The basis property
     */
    basis?: Json;
    /**
     * The firstCoupon property
     */
    firstCoupon?: Json;
    /**
     * The frequency property
     */
    frequency?: Json;
    /**
     * The issue property
     */
    issue?: Json;
    /**
     * The maturity property
     */
    maturity?: Json;
    /**
     * The pr property
     */
    pr?: Json;
    /**
     * The rate property
     */
    rate?: Json;
    /**
     * The redemption property
     */
    redemption?: Json;
    /**
     * The settlement property
     */
    settlement?: Json;
}
export function serializeOddFYieldPostRequestBody(writer: SerializationWriter, oddFYieldPostRequestBody: OddFYieldPostRequestBody | undefined = {} as OddFYieldPostRequestBody) : void {
        writer.writeObjectValue<Json>("basis", oddFYieldPostRequestBody.basis, );
        writer.writeObjectValue<Json>("firstCoupon", oddFYieldPostRequestBody.firstCoupon, );
        writer.writeObjectValue<Json>("frequency", oddFYieldPostRequestBody.frequency, );
        writer.writeObjectValue<Json>("issue", oddFYieldPostRequestBody.issue, );
        writer.writeObjectValue<Json>("maturity", oddFYieldPostRequestBody.maturity, );
        writer.writeObjectValue<Json>("pr", oddFYieldPostRequestBody.pr, );
        writer.writeObjectValue<Json>("rate", oddFYieldPostRequestBody.rate, );
        writer.writeObjectValue<Json>("redemption", oddFYieldPostRequestBody.redemption, );
        writer.writeObjectValue<Json>("settlement", oddFYieldPostRequestBody.settlement, );
        writer.writeAdditionalData(oddFYieldPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
