// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDbPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDbPostRequestBody;
}
export interface DbPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The cost property
     */
    cost?: Json;
    /**
     * The life property
     */
    life?: Json;
    /**
     * The month property
     */
    month?: Json;
    /**
     * The period property
     */
    period?: Json;
    /**
     * The salvage property
     */
    salvage?: Json;
}
export function deserializeIntoDbPostRequestBody(dbPostRequestBody: DbPostRequestBody | undefined = {} as DbPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "cost": n => { dbPostRequestBody.cost = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "life": n => { dbPostRequestBody.life = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "month": n => { dbPostRequestBody.month = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "period": n => { dbPostRequestBody.period = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "salvage": n => { dbPostRequestBody.salvage = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeDbPostRequestBody(writer: SerializationWriter, dbPostRequestBody: DbPostRequestBody | undefined = {} as DbPostRequestBody) : void {
        writer.writeObjectValue<Json>("cost", dbPostRequestBody.cost, );
        writer.writeObjectValue<Json>("life", dbPostRequestBody.life, );
        writer.writeObjectValue<Json>("month", dbPostRequestBody.month, );
        writer.writeObjectValue<Json>("period", dbPostRequestBody.period, );
        writer.writeObjectValue<Json>("salvage", dbPostRequestBody.salvage, );
        writer.writeAdditionalData(dbPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
