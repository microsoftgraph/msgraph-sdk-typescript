// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRank_EqPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRank_EqPostRequestBody;
}
export function deserializeIntoRank_EqPostRequestBody(rank_EqPostRequestBody: Rank_EqPostRequestBody | undefined = {} as Rank_EqPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "number": n => { rank_EqPostRequestBody.number = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "order": n => { rank_EqPostRequestBody.order = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "ref": n => { rank_EqPostRequestBody.ref = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface Rank_EqPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The number property
     */
    number?: Json;
    /**
     * The order property
     */
    order?: Json;
    /**
     * The ref property
     */
    ref?: Json;
}
export function serializeRank_EqPostRequestBody(writer: SerializationWriter, rank_EqPostRequestBody: Rank_EqPostRequestBody | undefined = {} as Rank_EqPostRequestBody) : void {
        writer.writeObjectValue<Json>("number", rank_EqPostRequestBody.number, );
        writer.writeObjectValue<Json>("order", rank_EqPostRequestBody.order, );
        writer.writeObjectValue<Json>("ref", rank_EqPostRequestBody.ref, );
        writer.writeAdditionalData(rank_EqPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
