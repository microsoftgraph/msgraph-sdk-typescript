// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createQuotientPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoQuotientPostRequestBody;
}
export function deserializeIntoQuotientPostRequestBody(quotientPostRequestBody: QuotientPostRequestBody | undefined = {} as QuotientPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "denominator": n => { quotientPostRequestBody.denominator = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "numerator": n => { quotientPostRequestBody.numerator = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface QuotientPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The denominator property
     */
    denominator?: Json;
    /**
     * The numerator property
     */
    numerator?: Json;
}
export function serializeQuotientPostRequestBody(writer: SerializationWriter, quotientPostRequestBody: QuotientPostRequestBody | undefined = {} as QuotientPostRequestBody) : void {
        writer.writeObjectValue<Json>("denominator", quotientPostRequestBody.denominator, );
        writer.writeObjectValue<Json>("numerator", quotientPostRequestBody.numerator, );
        writer.writeAdditionalData(quotientPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
