// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Binom_DistPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The cumulative property
     */
    cumulative?: Json;
    /**
     * The numberS property
     */
    numberS?: Json;
    /**
     * The probabilityS property
     */
    probabilityS?: Json;
    /**
     * The trials property
     */
    trials?: Json;
}
export function createBinom_DistPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBinom_DistPostRequestBody;
}
export function deserializeIntoBinom_DistPostRequestBody(binom_DistPostRequestBody: Binom_DistPostRequestBody | undefined = {} as Binom_DistPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "cumulative": n => { binom_DistPostRequestBody.cumulative = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "numberS": n => { binom_DistPostRequestBody.numberS = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "probabilityS": n => { binom_DistPostRequestBody.probabilityS = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "trials": n => { binom_DistPostRequestBody.trials = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeBinom_DistPostRequestBody(writer: SerializationWriter, binom_DistPostRequestBody: Binom_DistPostRequestBody | undefined = {} as Binom_DistPostRequestBody) : void {
        writer.writeObjectValue<Json>("cumulative", binom_DistPostRequestBody.cumulative, serializeJson);
        writer.writeObjectValue<Json>("numberS", binom_DistPostRequestBody.numberS, serializeJson);
        writer.writeObjectValue<Json>("probabilityS", binom_DistPostRequestBody.probabilityS, serializeJson);
        writer.writeObjectValue<Json>("trials", binom_DistPostRequestBody.trials, serializeJson);
        writer.writeAdditionalData(binom_DistPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
