import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createDminPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDminPostRequestBody;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoDminPostRequestBody(dminPostRequestBody: DminPostRequestBody | undefined = {} as DminPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "criteria": n => { dminPostRequestBody.criteria = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "database": n => { dminPostRequestBody.database = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "field": n => { dminPostRequestBody.field = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface DminPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The criteria property
     */
    criteria?: Json;
    /**
     * The database property
     */
    database?: Json;
    /**
     * The field property
     */
    field?: Json;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeDminPostRequestBody(writer: SerializationWriter, dminPostRequestBody: DminPostRequestBody | undefined = {} as DminPostRequestBody) : void {
        writer.writeObjectValue<Json>("criteria", dminPostRequestBody.criteria, );
        writer.writeObjectValue<Json>("database", dminPostRequestBody.database, );
        writer.writeObjectValue<Json>("field", dminPostRequestBody.field, );
        writer.writeAdditionalData(dminPostRequestBody.additionalData);
}
