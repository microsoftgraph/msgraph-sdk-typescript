// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createZ_TestPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoZ_TestPostRequestBody;
}
export function deserializeIntoZ_TestPostRequestBody(z_TestPostRequestBody: Z_TestPostRequestBody | undefined = {} as Z_TestPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "array": n => { z_TestPostRequestBody.array = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "sigma": n => { z_TestPostRequestBody.sigma = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "x": n => { z_TestPostRequestBody.x = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeZ_TestPostRequestBody(writer: SerializationWriter, z_TestPostRequestBody: Z_TestPostRequestBody | undefined = {} as Z_TestPostRequestBody) : void {
        writer.writeObjectValue<Json>("array", z_TestPostRequestBody.array, serializeJson);
        writer.writeObjectValue<Json>("sigma", z_TestPostRequestBody.sigma, serializeJson);
        writer.writeObjectValue<Json>("x", z_TestPostRequestBody.x, serializeJson);
        writer.writeAdditionalData(z_TestPostRequestBody.additionalData);
}
export interface Z_TestPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The array property
     */
    array?: Json;
    /**
     * The sigma property
     */
    sigma?: Json;
    /**
     * The x property
     */
    x?: Json;
}
// tslint:enable
// eslint-enable
