// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BitorPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The number1 property
     */
    number1?: Json;
    /**
     * The number2 property
     */
    number2?: Json;
}
export function createBitorPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBitorPostRequestBody;
}
export function deserializeIntoBitorPostRequestBody(bitorPostRequestBody: BitorPostRequestBody | undefined = {} as BitorPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "number1": n => { bitorPostRequestBody.number1 = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "number2": n => { bitorPostRequestBody.number2 = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeBitorPostRequestBody(writer: SerializationWriter, bitorPostRequestBody: BitorPostRequestBody | undefined = {} as BitorPostRequestBody) : void {
        writer.writeObjectValue<Json>("number1", bitorPostRequestBody.number1, serializeJson);
        writer.writeObjectValue<Json>("number2", bitorPostRequestBody.number2, serializeJson);
        writer.writeAdditionalData(bitorPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
