// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createHyperlinkPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoHyperlinkPostRequestBody;
}
export function deserializeIntoHyperlinkPostRequestBody(hyperlinkPostRequestBody: HyperlinkPostRequestBody | undefined = {} as HyperlinkPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "friendlyName": n => { hyperlinkPostRequestBody.friendlyName = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "linkLocation": n => { hyperlinkPostRequestBody.linkLocation = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface HyperlinkPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The friendlyName property
     */
    friendlyName?: Json;
    /**
     * The linkLocation property
     */
    linkLocation?: Json;
}
export function serializeHyperlinkPostRequestBody(writer: SerializationWriter, hyperlinkPostRequestBody: HyperlinkPostRequestBody | undefined = {} as HyperlinkPostRequestBody) : void {
        writer.writeObjectValue<Json>("friendlyName", hyperlinkPostRequestBody.friendlyName, );
        writer.writeObjectValue<Json>("linkLocation", hyperlinkPostRequestBody.linkLocation, );
        writer.writeAdditionalData(hyperlinkPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
