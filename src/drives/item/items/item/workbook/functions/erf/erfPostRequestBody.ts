// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createErfPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoErfPostRequestBody;
}
export function deserializeIntoErfPostRequestBody(erfPostRequestBody: ErfPostRequestBody | undefined = {} as ErfPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "lowerLimit": n => { erfPostRequestBody.lowerLimit = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "upperLimit": n => { erfPostRequestBody.upperLimit = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export interface ErfPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The lowerLimit property
     */
    lowerLimit?: Json;
    /**
     * The upperLimit property
     */
    upperLimit?: Json;
}
export function serializeErfPostRequestBody(writer: SerializationWriter, erfPostRequestBody: ErfPostRequestBody | undefined = {} as ErfPostRequestBody) : void {
        writer.writeObjectValue<Json>("lowerLimit", erfPostRequestBody.lowerLimit, serializeJson);
        writer.writeObjectValue<Json>("upperLimit", erfPostRequestBody.upperLimit, serializeJson);
        writer.writeAdditionalData(erfPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
