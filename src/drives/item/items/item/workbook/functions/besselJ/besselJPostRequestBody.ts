// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../../../../../../../models/json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BesselJPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The n property
     */
    n?: Json;
    /**
     * The x property
     */
    x?: Json;
}
export function createBesselJPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBesselJPostRequestBody;
}
export function deserializeIntoBesselJPostRequestBody(besselJPostRequestBody: BesselJPostRequestBody | undefined = {} as BesselJPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "n": n => { besselJPostRequestBody.n = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "x": n => { besselJPostRequestBody.x = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeBesselJPostRequestBody(writer: SerializationWriter, besselJPostRequestBody: BesselJPostRequestBody | undefined = {} as BesselJPostRequestBody) : void {
        writer.writeObjectValue<Json>("n", besselJPostRequestBody.n, );
        writer.writeObjectValue<Json>("x", besselJPostRequestBody.x, );
        writer.writeAdditionalData(besselJPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
