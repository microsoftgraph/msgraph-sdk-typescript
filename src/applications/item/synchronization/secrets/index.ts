/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSynchronizationSecretKeyStringValuePairFromDiscriminatorValue, serializeSynchronizationSecretKeyStringValuePair, type SynchronizationSecretKeyStringValuePair } from '../../../../models/';
import { createODataErrorFromDiscriminatorValue, deserializeIntoODataError, serializeODataError, type ODataError } from '../../../../models/oDataErrors/';
import { CountRequestBuilder } from './count/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type AdditionalDataHolder, type Parsable, type ParsableFactory, type ParseNode, type RequestAdapter, type RequestConfiguration, type RequestOption, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSecretsPutRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSecretsPutRequestBody;
}
export function createSecretsPutResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSecretsPutResponse;
}
export function deserializeIntoSecretsPutRequestBody(secretsPutRequestBody: SecretsPutRequestBody | undefined = {} as SecretsPutRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { secretsPutRequestBody.value = n.getCollectionOfObjectValues<SynchronizationSecretKeyStringValuePair>(createSynchronizationSecretKeyStringValuePairFromDiscriminatorValue); },
    }
}
export function deserializeIntoSecretsPutResponse(secretsPutResponse: SecretsPutResponse | undefined = {} as SecretsPutResponse) : Record<string, (node: ParseNode) => void> {
    return {
        "value": n => { secretsPutResponse.value = n.getCollectionOfObjectValues<SynchronizationSecretKeyStringValuePair>(createSynchronizationSecretKeyStringValuePairFromDiscriminatorValue); },
    }
}
export interface SecretsPutRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The value property
     */
    value?: SynchronizationSecretKeyStringValuePair[];
}
export interface SecretsPutResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The value property
     */
    value?: SynchronizationSecretKeyStringValuePair[];
}
export function serializeSecretsPutRequestBody(writer: SerializationWriter, secretsPutRequestBody: SecretsPutRequestBody | undefined = {} as SecretsPutRequestBody) : void {
    writer.writeCollectionOfObjectValues<SynchronizationSecretKeyStringValuePair>("value", secretsPutRequestBody.value, serializeSynchronizationSecretKeyStringValuePair);
    writer.writeAdditionalData(secretsPutRequestBody.additionalData);
}
export function serializeSecretsPutResponse(writer: SerializationWriter, secretsPutResponse: SecretsPutResponse | undefined = {} as SecretsPutResponse) : void {
    writer.writeCollectionOfObjectValues<SynchronizationSecretKeyStringValuePair>("value", secretsPutResponse.value, serializeSynchronizationSecretKeyStringValuePair);
    writer.writeAdditionalData(secretsPutResponse.additionalData);
}
/**
 * Builds and executes requests for operations under /applications/{application-id}/synchronization/secrets
 */
export class SecretsRequestBuilder extends BaseRequestBuilder<SecretsRequestBuilder> {
    /**
     * Provides operations to count the resources in the collection.
     */
    public get count(): CountRequestBuilder {
        return new CountRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Instantiates a new SecretsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/applications/{application%2Did}/synchronization/secrets", (x, y) => new SecretsRequestBuilder(x, y));
    }
    /**
     * Update property secrets value.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of SecretsPutResponse
     */
    public put(body: SecretsPutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SecretsPutResponse | undefined> {
        const requestInfo = this.toPutRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<SecretsPutResponse>(requestInfo, createSecretsPutResponseFromDiscriminatorValue, errorMapping);
    }
    /**
     * Update property secrets value.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPutRequestInformation(body: SecretsPutRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.PUT, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeSecretsPutRequestBody);
        return requestInfo;
    }
}
/* tslint:enable */
/* eslint-enable */
