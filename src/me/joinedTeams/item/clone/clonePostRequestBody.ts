// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ClonableTeamParts } from '../../../../models/clonableTeamParts';
import { TeamVisibilityType } from '../../../../models/teamVisibilityType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ClonePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The classification property
     */
    classification?: string;
    /**
     * The description property
     */
    description?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The mailNickname property
     */
    mailNickname?: string;
    /**
     * The partsToClone property
     */
    partsToClone?: ClonableTeamParts[];
    /**
     * The visibility property
     */
    visibility?: TeamVisibilityType;
}
export function createClonePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoClonePostRequestBody;
}
export function deserializeIntoClonePostRequestBody(clonePostRequestBody: ClonePostRequestBody | undefined = {} as ClonePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "classification": n => { clonePostRequestBody.classification = n.getStringValue(); },
        "description": n => { clonePostRequestBody.description = n.getStringValue(); },
        "displayName": n => { clonePostRequestBody.displayName = n.getStringValue(); },
        "mailNickname": n => { clonePostRequestBody.mailNickname = n.getStringValue(); },
        "partsToClone": n => { clonePostRequestBody.partsToClone = n.getCollectionOfEnumValues<ClonableTeamParts>(ClonableTeamParts); },
        "visibility": n => { clonePostRequestBody.visibility = n.getEnumValue<TeamVisibilityType>(TeamVisibilityType); },
    }
}
export function serializeClonePostRequestBody(writer: SerializationWriter, clonePostRequestBody: ClonePostRequestBody | undefined = {} as ClonePostRequestBody) : void {
        writer.writeStringValue("classification", clonePostRequestBody.classification);
        writer.writeStringValue("description", clonePostRequestBody.description);
        writer.writeStringValue("displayName", clonePostRequestBody.displayName);
        writer.writeStringValue("mailNickname", clonePostRequestBody.mailNickname);
        writer.writeEnumValue<ClonableTeamParts[]>("partsToClone", clonePostRequestBody.partsToClone);
        writer.writeEnumValue<TeamVisibilityType>("visibility", clonePostRequestBody.visibility);
        writer.writeAdditionalData(clonePostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
