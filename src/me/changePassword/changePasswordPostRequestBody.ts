// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ChangePasswordPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The currentPassword property
     */
    currentPassword?: string;
    /**
     * The newPassword property
     */
    newPassword?: string;
}
export function createChangePasswordPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoChangePasswordPostRequestBody;
}
export function deserializeIntoChangePasswordPostRequestBody(changePasswordPostRequestBody: ChangePasswordPostRequestBody | undefined = {} as ChangePasswordPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "currentPassword": n => { changePasswordPostRequestBody.currentPassword = n.getStringValue(); },
        "newPassword": n => { changePasswordPostRequestBody.newPassword = n.getStringValue(); },
    }
}
export function serializeChangePasswordPostRequestBody(writer: SerializationWriter, changePasswordPostRequestBody: ChangePasswordPostRequestBody | undefined = {} as ChangePasswordPostRequestBody) : void {
        writer.writeStringValue("currentPassword", changePasswordPostRequestBody.currentPassword);
        writer.writeStringValue("newPassword", changePasswordPostRequestBody.newPassword);
        writer.writeAdditionalData(changePasswordPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
