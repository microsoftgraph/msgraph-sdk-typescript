// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createMessageFromDiscriminatorValue, serializeMessage, type Message } from '../../../../../../../../models/message';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createReplyPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoReplyPostRequestBody;
}
export function deserializeIntoReplyPostRequestBody(replyPostRequestBody: ReplyPostRequestBody | undefined = {} as ReplyPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "comment": n => { replyPostRequestBody.comment = n.getStringValue(); },
        "message": n => { replyPostRequestBody.message = n.getObjectValue<Message>(createMessageFromDiscriminatorValue); },
    }
}
export interface ReplyPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The Comment property
     */
    comment?: string;
    /**
     * The Message property
     */
    message?: Message;
}
export function serializeReplyPostRequestBody(writer: SerializationWriter, replyPostRequestBody: ReplyPostRequestBody | undefined = {} as ReplyPostRequestBody) : void {
        writer.writeStringValue("Comment", replyPostRequestBody.comment);
        writer.writeObjectValue<Message>("Message", replyPostRequestBody.message, );
        writer.writeAdditionalData(replyPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
