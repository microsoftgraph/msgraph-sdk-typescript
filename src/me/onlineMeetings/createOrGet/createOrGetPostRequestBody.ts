// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createChatInfoFromDiscriminatorValue, serializeChatInfo, type ChatInfo } from '../../../models/chatInfo';
import { createMeetingParticipantsFromDiscriminatorValue, serializeMeetingParticipants, type MeetingParticipants } from '../../../models/meetingParticipants';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCreateOrGetPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCreateOrGetPostRequestBody;
}
export interface CreateOrGetPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The chatInfo property
     */
    chatInfo?: ChatInfo;
    /**
     * The endDateTime property
     */
    endDateTime?: Date;
    /**
     * The externalId property
     */
    externalId?: string;
    /**
     * The participants property
     */
    participants?: MeetingParticipants;
    /**
     * The startDateTime property
     */
    startDateTime?: Date;
    /**
     * The subject property
     */
    subject?: string;
}
export function deserializeIntoCreateOrGetPostRequestBody(createOrGetPostRequestBody: CreateOrGetPostRequestBody | undefined = {} as CreateOrGetPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "chatInfo": n => { createOrGetPostRequestBody.chatInfo = n.getObjectValue<ChatInfo>(createChatInfoFromDiscriminatorValue); },
        "endDateTime": n => { createOrGetPostRequestBody.endDateTime = n.getDateValue(); },
        "externalId": n => { createOrGetPostRequestBody.externalId = n.getStringValue(); },
        "participants": n => { createOrGetPostRequestBody.participants = n.getObjectValue<MeetingParticipants>(createMeetingParticipantsFromDiscriminatorValue); },
        "startDateTime": n => { createOrGetPostRequestBody.startDateTime = n.getDateValue(); },
        "subject": n => { createOrGetPostRequestBody.subject = n.getStringValue(); },
    }
}
export function serializeCreateOrGetPostRequestBody(writer: SerializationWriter, createOrGetPostRequestBody: CreateOrGetPostRequestBody | undefined = {} as CreateOrGetPostRequestBody) : void {
        writer.writeObjectValue<ChatInfo>("chatInfo", createOrGetPostRequestBody.chatInfo, );
        writer.writeDateValue("endDateTime", createOrGetPostRequestBody.endDateTime);
        writer.writeStringValue("externalId", createOrGetPostRequestBody.externalId);
        writer.writeObjectValue<MeetingParticipants>("participants", createOrGetPostRequestBody.participants, );
        writer.writeDateValue("startDateTime", createOrGetPostRequestBody.startDateTime);
        writer.writeStringValue("subject", createOrGetPostRequestBody.subject);
        writer.writeAdditionalData(createOrGetPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
