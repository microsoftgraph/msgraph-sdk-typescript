// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttendeeBaseFromDiscriminatorValue, serializeAttendeeBase, type AttendeeBase } from '../../models/attendeeBase';
import { createLocationConstraintFromDiscriminatorValue, serializeLocationConstraint, type LocationConstraint } from '../../models/locationConstraint';
import { createTimeConstraintFromDiscriminatorValue, serializeTimeConstraint, type TimeConstraint } from '../../models/timeConstraint';
import { type AdditionalDataHolder, type Duration, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFindMeetingTimesPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFindMeetingTimesPostRequestBody;
}
export function deserializeIntoFindMeetingTimesPostRequestBody(findMeetingTimesPostRequestBody: FindMeetingTimesPostRequestBody | undefined = {} as FindMeetingTimesPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "attendees": n => { findMeetingTimesPostRequestBody.attendees = n.getCollectionOfObjectValues<AttendeeBase>(createAttendeeBaseFromDiscriminatorValue); },
        "isOrganizerOptional": n => { findMeetingTimesPostRequestBody.isOrganizerOptional = n.getBooleanValue(); },
        "locationConstraint": n => { findMeetingTimesPostRequestBody.locationConstraint = n.getObjectValue<LocationConstraint>(createLocationConstraintFromDiscriminatorValue); },
        "maxCandidates": n => { findMeetingTimesPostRequestBody.maxCandidates = n.getNumberValue(); },
        "meetingDuration": n => { findMeetingTimesPostRequestBody.meetingDuration = n.getDurationValue(); },
        "minimumAttendeePercentage": n => { findMeetingTimesPostRequestBody.minimumAttendeePercentage = n.getNumberValue(); },
        "returnSuggestionReasons": n => { findMeetingTimesPostRequestBody.returnSuggestionReasons = n.getBooleanValue(); },
        "timeConstraint": n => { findMeetingTimesPostRequestBody.timeConstraint = n.getObjectValue<TimeConstraint>(createTimeConstraintFromDiscriminatorValue); },
    }
}
export interface FindMeetingTimesPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The attendees property
     */
    attendees?: AttendeeBase[];
    /**
     * The isOrganizerOptional property
     */
    isOrganizerOptional?: boolean;
    /**
     * The locationConstraint property
     */
    locationConstraint?: LocationConstraint;
    /**
     * The maxCandidates property
     */
    maxCandidates?: number;
    /**
     * The meetingDuration property
     */
    meetingDuration?: Duration;
    /**
     * The minimumAttendeePercentage property
     */
    minimumAttendeePercentage?: number;
    /**
     * The returnSuggestionReasons property
     */
    returnSuggestionReasons?: boolean;
    /**
     * The timeConstraint property
     */
    timeConstraint?: TimeConstraint;
}
export function serializeFindMeetingTimesPostRequestBody(writer: SerializationWriter, findMeetingTimesPostRequestBody: FindMeetingTimesPostRequestBody | undefined = {} as FindMeetingTimesPostRequestBody) : void {
        writer.writeCollectionOfObjectValues<AttendeeBase>("attendees", findMeetingTimesPostRequestBody.attendees, serializeAttendeeBase);
        writer.writeBooleanValue("isOrganizerOptional", findMeetingTimesPostRequestBody.isOrganizerOptional);
        writer.writeObjectValue<LocationConstraint>("locationConstraint", findMeetingTimesPostRequestBody.locationConstraint, serializeLocationConstraint);
        writer.writeNumberValue("maxCandidates", findMeetingTimesPostRequestBody.maxCandidates);
        writer.writeDurationValue("meetingDuration", findMeetingTimesPostRequestBody.meetingDuration);
        writer.writeNumberValue("minimumAttendeePercentage", findMeetingTimesPostRequestBody.minimumAttendeePercentage);
        writer.writeBooleanValue("returnSuggestionReasons", findMeetingTimesPostRequestBody.returnSuggestionReasons);
        writer.writeObjectValue<TimeConstraint>("timeConstraint", findMeetingTimesPostRequestBody.timeConstraint, serializeTimeConstraint);
        writer.writeAdditionalData(findMeetingTimesPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
