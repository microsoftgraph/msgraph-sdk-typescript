// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createItemBodyFromDiscriminatorValue, serializeItemBody, type ItemBody } from '../../../../models/itemBody';
import { createKeyValuePairFromDiscriminatorValue, serializeKeyValuePair, type KeyValuePair } from '../../../../models/keyValuePair';
import { createTeamworkActivityTopicFromDiscriminatorValue, serializeTeamworkActivityTopic, type TeamworkActivityTopic } from '../../../../models/teamworkActivityTopic';
import { createTeamworkNotificationRecipientFromDiscriminatorValue, serializeTeamworkNotificationRecipient, type TeamworkNotificationRecipient } from '../../../../models/teamworkNotificationRecipient';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSendActivityNotificationPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSendActivityNotificationPostRequestBody;
}
export function deserializeIntoSendActivityNotificationPostRequestBody(sendActivityNotificationPostRequestBody: SendActivityNotificationPostRequestBody | undefined = {} as SendActivityNotificationPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "activityType": n => { sendActivityNotificationPostRequestBody.activityType = n.getStringValue(); },
        "chainId": n => { sendActivityNotificationPostRequestBody.chainId = n.getNumberValue(); },
        "previewText": n => { sendActivityNotificationPostRequestBody.previewText = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
        "recipient": n => { sendActivityNotificationPostRequestBody.recipient = n.getObjectValue<TeamworkNotificationRecipient>(createTeamworkNotificationRecipientFromDiscriminatorValue); },
        "templateParameters": n => { sendActivityNotificationPostRequestBody.templateParameters = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "topic": n => { sendActivityNotificationPostRequestBody.topic = n.getObjectValue<TeamworkActivityTopic>(createTeamworkActivityTopicFromDiscriminatorValue); },
    }
}
export interface SendActivityNotificationPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The activityType property
     */
    activityType?: string;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The chainId property
     */
    chainId?: number;
    /**
     * The previewText property
     */
    previewText?: ItemBody;
    /**
     * The recipient property
     */
    recipient?: TeamworkNotificationRecipient;
    /**
     * The templateParameters property
     */
    templateParameters?: KeyValuePair[];
    /**
     * The topic property
     */
    topic?: TeamworkActivityTopic;
}
export function serializeSendActivityNotificationPostRequestBody(writer: SerializationWriter, sendActivityNotificationPostRequestBody: SendActivityNotificationPostRequestBody | undefined = {} as SendActivityNotificationPostRequestBody) : void {
        writer.writeStringValue("activityType", sendActivityNotificationPostRequestBody.activityType);
        writer.writeNumberValue("chainId", sendActivityNotificationPostRequestBody.chainId);
        writer.writeObjectValue<ItemBody>("previewText", sendActivityNotificationPostRequestBody.previewText, );
        writer.writeObjectValue<TeamworkNotificationRecipient>("recipient", sendActivityNotificationPostRequestBody.recipient, );
        writer.writeCollectionOfObjectValues<KeyValuePair>("templateParameters", sendActivityNotificationPostRequestBody.templateParameters, );
        writer.writeObjectValue<TeamworkActivityTopic>("topic", sendActivityNotificationPostRequestBody.topic, );
        writer.writeAdditionalData(sendActivityNotificationPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
