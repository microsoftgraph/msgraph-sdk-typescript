// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUploadClientCertificatePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUploadClientCertificatePostRequestBody;
}
export function deserializeIntoUploadClientCertificatePostRequestBody(uploadClientCertificatePostRequestBody: UploadClientCertificatePostRequestBody | undefined = {} as UploadClientCertificatePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "password": n => { uploadClientCertificatePostRequestBody.password = n.getStringValue(); },
        "pkcs12Value": n => { uploadClientCertificatePostRequestBody.pkcs12Value = n.getStringValue(); },
    }
}
export function serializeUploadClientCertificatePostRequestBody(writer: SerializationWriter, uploadClientCertificatePostRequestBody: UploadClientCertificatePostRequestBody | undefined = {} as UploadClientCertificatePostRequestBody) : void {
    writer.writeStringValue("password", uploadClientCertificatePostRequestBody.password);
    writer.writeStringValue("pkcs12Value", uploadClientCertificatePostRequestBody.pkcs12Value);
    writer.writeAdditionalData(uploadClientCertificatePostRequestBody.additionalData);
}
export interface UploadClientCertificatePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The password property
     */
    password?: string;
    /**
     * The pkcs12Value property
     */
    pkcs12Value?: string;
}
// tslint:enable
// eslint-enable
