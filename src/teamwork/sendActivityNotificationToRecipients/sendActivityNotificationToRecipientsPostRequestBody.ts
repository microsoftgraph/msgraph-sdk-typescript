// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createItemBodyFromDiscriminatorValue, serializeItemBody, type ItemBody } from '../../models/itemBody';
import { createKeyValuePairFromDiscriminatorValue, serializeKeyValuePair, type KeyValuePair } from '../../models/keyValuePair';
import { createTeamworkActivityTopicFromDiscriminatorValue, serializeTeamworkActivityTopic, type TeamworkActivityTopic } from '../../models/teamworkActivityTopic';
import { createTeamworkNotificationRecipientFromDiscriminatorValue, serializeTeamworkNotificationRecipient, type TeamworkNotificationRecipient } from '../../models/teamworkNotificationRecipient';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSendActivityNotificationToRecipientsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSendActivityNotificationToRecipientsPostRequestBody;
}
export function deserializeIntoSendActivityNotificationToRecipientsPostRequestBody(sendActivityNotificationToRecipientsPostRequestBody: SendActivityNotificationToRecipientsPostRequestBody | undefined = {} as SendActivityNotificationToRecipientsPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "activityType": n => { sendActivityNotificationToRecipientsPostRequestBody.activityType = n.getStringValue(); },
        "chainId": n => { sendActivityNotificationToRecipientsPostRequestBody.chainId = n.getNumberValue(); },
        "previewText": n => { sendActivityNotificationToRecipientsPostRequestBody.previewText = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
        "recipients": n => { sendActivityNotificationToRecipientsPostRequestBody.recipients = n.getCollectionOfObjectValues<TeamworkNotificationRecipient>(createTeamworkNotificationRecipientFromDiscriminatorValue); },
        "teamsAppId": n => { sendActivityNotificationToRecipientsPostRequestBody.teamsAppId = n.getStringValue(); },
        "templateParameters": n => { sendActivityNotificationToRecipientsPostRequestBody.templateParameters = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "topic": n => { sendActivityNotificationToRecipientsPostRequestBody.topic = n.getObjectValue<TeamworkActivityTopic>(createTeamworkActivityTopicFromDiscriminatorValue); },
    }
}
export interface SendActivityNotificationToRecipientsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * The activityType property
     */
    activityType?: string;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The chainId property
     */
    chainId?: number;
    /**
     * The previewText property
     */
    previewText?: ItemBody;
    /**
     * The recipients property
     */
    recipients?: TeamworkNotificationRecipient[];
    /**
     * The teamsAppId property
     */
    teamsAppId?: string;
    /**
     * The templateParameters property
     */
    templateParameters?: KeyValuePair[];
    /**
     * The topic property
     */
    topic?: TeamworkActivityTopic;
}
export function serializeSendActivityNotificationToRecipientsPostRequestBody(writer: SerializationWriter, sendActivityNotificationToRecipientsPostRequestBody: SendActivityNotificationToRecipientsPostRequestBody | undefined = {} as SendActivityNotificationToRecipientsPostRequestBody) : void {
        writer.writeStringValue("activityType", sendActivityNotificationToRecipientsPostRequestBody.activityType);
        writer.writeNumberValue("chainId", sendActivityNotificationToRecipientsPostRequestBody.chainId);
        writer.writeObjectValue<ItemBody>("previewText", sendActivityNotificationToRecipientsPostRequestBody.previewText, );
        writer.writeCollectionOfObjectValues<TeamworkNotificationRecipient>("recipients", sendActivityNotificationToRecipientsPostRequestBody.recipients, );
        writer.writeStringValue("teamsAppId", sendActivityNotificationToRecipientsPostRequestBody.teamsAppId);
        writer.writeCollectionOfObjectValues<KeyValuePair>("templateParameters", sendActivityNotificationToRecipientsPostRequestBody.templateParameters, );
        writer.writeObjectValue<TeamworkActivityTopic>("topic", sendActivityNotificationToRecipientsPostRequestBody.topic, );
        writer.writeAdditionalData(sendActivityNotificationToRecipientsPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
