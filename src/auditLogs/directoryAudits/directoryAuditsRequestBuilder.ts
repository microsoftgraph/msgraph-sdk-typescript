import { type DirectoryAuditCollectionResponse } from '../../models/';
import { createDirectoryAuditCollectionResponseFromDiscriminatorValue } from '../../models/createDirectoryAuditCollectionResponseFromDiscriminatorValue';
import { createDirectoryAuditFromDiscriminatorValue } from '../../models/createDirectoryAuditFromDiscriminatorValue';
import { deserializeIntoDirectoryAudit } from '../../models/deserializeIntoDirectoryAudit';
import { type DirectoryAudit } from '../../models/directoryAudit';
import { type ODataError } from '../../models/oDataErrors/';
import { createODataErrorFromDiscriminatorValue } from '../../models/oDataErrors/createODataErrorFromDiscriminatorValue';
import { deserializeIntoODataError } from '../../models/oDataErrors/deserializeIntoODataError';
import { serializeODataError } from '../../models/oDataErrors/serializeODataError';
import { serializeDirectoryAudit } from '../../models/serializeDirectoryAudit';
import { CountRequestBuilder } from './count/countRequestBuilder';
import { type DirectoryAuditsRequestBuilderGetRequestConfiguration } from './directoryAuditsRequestBuilderGetRequestConfiguration';
import { type DirectoryAuditsRequestBuilderPostRequestConfiguration } from './directoryAuditsRequestBuilderPostRequestConfiguration';
import { DirectoryAuditItemRequestBuilder } from './item/directoryAuditItemRequestBuilder';
import { BaseRequestBuilder, getPathParameters, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestOption } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the directoryAudits property of the microsoft.graph.auditLogRoot entity.
 */
export class DirectoryAuditsRequestBuilder extends BaseRequestBuilder {
    /**
     * Provides operations to count the resources in the collection.
     */
    public get count(): CountRequestBuilder {
        return new CountRequestBuilder(this.pathParameters, this.requestAdapter);
    }
    /**
     * Provides operations to manage the directoryAudits property of the microsoft.graph.auditLogRoot entity.
     * @param directoryAuditId The unique identifier of directoryAudit
     * @returns a DirectoryAuditItemRequestBuilder
     */
    public byDirectoryAuditId(directoryAuditId: string) : DirectoryAuditItemRequestBuilder {
        if(!directoryAuditId) throw new Error("directoryAuditId cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["directoryAudit%2Did"] = directoryAuditId
        return new DirectoryAuditItemRequestBuilder(urlTplParams, this.requestAdapter);
    };
    /**
     * Instantiates a new DirectoryAuditsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/auditLogs/directoryAudits{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}");
    };
    /**
     * Get the list of audit logs generated by Azure Active Directory (Azure AD). This includes audit logs generated by various services within Azure AD, including user, app, device and group Management, privileged identity management (PIM), access reviews, terms of use, identity protection, password management (self-service and admin password resets), and self- service group management, and so on.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of DirectoryAuditCollectionResponse
     * @see {@link https://learn.microsoft.com/graph/api/directoryaudit-list?view=graph-rest-1.0|Find more info here}
     */
    public get(requestConfiguration?: DirectoryAuditsRequestBuilderGetRequestConfiguration | undefined) : Promise<DirectoryAuditCollectionResponse | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<DirectoryAuditCollectionResponse>(requestInfo, createDirectoryAuditCollectionResponseFromDiscriminatorValue, errorMapping);
    };
    /**
     * Create new navigation property to directoryAudits for auditLogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of DirectoryAudit
     */
    public post(body: DirectoryAudit, requestConfiguration?: DirectoryAuditsRequestBuilderPostRequestConfiguration | undefined) : Promise<DirectoryAudit | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        const errorMapping = {
            "4XX": createODataErrorFromDiscriminatorValue,
            "5XX": createODataErrorFromDiscriminatorValue,
        } as Record<string, ParsableFactory<Parsable>>;
        return this.requestAdapter.sendAsync<DirectoryAudit>(requestInfo, createDirectoryAuditFromDiscriminatorValue, errorMapping);
    };
    /**
     * Get the list of audit logs generated by Azure Active Directory (Azure AD). This includes audit logs generated by various services within Azure AD, including user, app, device and group Management, privileged identity management (PIM), access reviews, terms of use, identity protection, password management (self-service and admin password resets), and self- service group management, and so on.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: DirectoryAuditsRequestBuilderGetRequestConfiguration | undefined) : RequestInformation {
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.GET;
        requestInfo.headers["Accept"] = ["application/json"];
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.setQueryStringParametersFromRawObject(requestConfiguration.queryParameters);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        return requestInfo;
    };
    /**
     * Create new navigation property to directoryAudits for auditLogs
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: DirectoryAudit, requestConfiguration?: DirectoryAuditsRequestBuilderPostRequestConfiguration | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation();
        requestInfo.urlTemplate = this.urlTemplate;
        requestInfo.pathParameters = this.pathParameters;
        requestInfo.httpMethod = HttpMethod.POST;
        requestInfo.headers["Accept"] = ["application/json"];
        if (requestConfiguration) {
            requestInfo.addRequestHeaders(requestConfiguration.headers);
            requestInfo.addRequestOptions(requestConfiguration.options);
        }
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeDirectoryAudit);
        return requestInfo;
    };
    /**
     * Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
     * @param rawUrl The raw URL to use for the request builder.
     * @returns a directoryAuditsRequestBuilder
     */
    public withUrl(rawUrl: string) : DirectoryAuditsRequestBuilder {
        if(!rawUrl) throw new Error("rawUrl cannot be undefined");
        return new DirectoryAuditsRequestBuilder(rawUrl, this.requestAdapter);
    };
}
