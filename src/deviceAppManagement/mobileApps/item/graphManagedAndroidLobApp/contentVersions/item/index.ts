/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createMobileAppContentFromDiscriminatorValue, serializeMobileAppContent, type MobileAppContent } from '../../../../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../models/oDataErrors/';
import { ContainedAppsRequestBuilderNavigationMetadata, ContainedAppsRequestBuilderRequestsMetadata, ContainedAppsRequestBuilderUriTemplate, type ContainedAppsRequestBuilder } from './containedApps/';
import { FilesRequestBuilderNavigationMetadata, FilesRequestBuilderRequestsMetadata, FilesRequestBuilderUriTemplate, type FilesRequestBuilder } from './files/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the contentVersions property of the microsoft.graph.managedMobileLobApp entity.
 */
export interface MobileAppContentItemRequestBuilder extends BaseRequestBuilder<MobileAppContentItemRequestBuilder> {
    /**
     * Provides operations to manage the containedApps property of the microsoft.graph.mobileAppContent entity.
     */
    get containedApps(): ContainedAppsRequestBuilder;
    /**
     * Provides operations to manage the files property of the microsoft.graph.mobileAppContent entity.
     */
    get files(): FilesRequestBuilder;
    /**
     * Delete navigation property contentVersions for deviceAppManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * The list of content versions for this app.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of MobileAppContent
     */
     get(requestConfiguration?: RequestConfiguration<MobileAppContentItemRequestBuilderGetQueryParameters> | undefined) : Promise<MobileAppContent | undefined>;
    /**
     * Update the navigation property contentVersions in deviceAppManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of MobileAppContent
     */
     patch(body: MobileAppContent, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<MobileAppContent | undefined>;
    /**
     * Delete navigation property contentVersions for deviceAppManagement
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * The list of content versions for this app.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<MobileAppContentItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property contentVersions in deviceAppManagement
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: MobileAppContent, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * The list of content versions for this app.
 */
export interface MobileAppContentItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const MobileAppContentItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const MobileAppContentItemRequestBuilderNavigationMetadata: Record<Exclude<keyof MobileAppContentItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    containedApps: {
        uriTemplate: ContainedAppsRequestBuilderUriTemplate,
        requestsMetadata: ContainedAppsRequestBuilderRequestsMetadata,
        navigationMetadata: ContainedAppsRequestBuilderNavigationMetadata,
    },
    files: {
        uriTemplate: FilesRequestBuilderUriTemplate,
        requestsMetadata: FilesRequestBuilderRequestsMetadata,
        navigationMetadata: FilesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const MobileAppContentItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createMobileAppContentFromDiscriminatorValue,
        queryParametersMapper: MobileAppContentItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createMobileAppContentFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeMobileAppContent,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const MobileAppContentItemRequestBuilderUriTemplate = "{+baseurl}/deviceAppManagement/mobileApps/{mobileApp%2Did}/graph.managedAndroidLobApp/contentVersions/{mobileAppContent%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
