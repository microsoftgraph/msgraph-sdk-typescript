// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createFileEncryptionInfoFromDiscriminatorValue, serializeFileEncryptionInfo, type FileEncryptionInfo } from '../../../../../../../../../models/fileEncryptionInfo';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CommitPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The fileEncryptionInfo property
     */
    fileEncryptionInfo?: FileEncryptionInfo;
}
export function createCommitPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCommitPostRequestBody;
}
export function deserializeIntoCommitPostRequestBody(commitPostRequestBody: CommitPostRequestBody | undefined = {} as CommitPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "fileEncryptionInfo": n => { commitPostRequestBody.fileEncryptionInfo = n.getObjectValue<FileEncryptionInfo>(createFileEncryptionInfoFromDiscriminatorValue); },
    }
}
export function serializeCommitPostRequestBody(writer: SerializationWriter, commitPostRequestBody: CommitPostRequestBody | undefined = {} as CommitPostRequestBody) : void {
        writer.writeObjectValue<FileEncryptionInfo>("fileEncryptionInfo", commitPostRequestBody.fileEncryptionInfo, );
        writer.writeAdditionalData(commitPostRequestBody.additionalData);
}
// tslint:enable
// eslint-enable
