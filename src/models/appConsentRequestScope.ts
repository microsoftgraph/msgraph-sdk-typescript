// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AppConsentRequestScope extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name of the scope.
     */
    displayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createAppConsentRequestScopeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAppConsentRequestScope;
}
export function deserializeIntoAppConsentRequestScope(appConsentRequestScope: AppConsentRequestScope | undefined = {} as AppConsentRequestScope) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { appConsentRequestScope.displayName = n.getStringValue(); },
        "@odata.type": n => { appConsentRequestScope.odataType = n.getStringValue(); },
    }
}
export function serializeAppConsentRequestScope(writer: SerializationWriter, appConsentRequestScope: AppConsentRequestScope | undefined = {} as AppConsentRequestScope) : void {
    writer.writeStringValue("displayName", appConsentRequestScope.displayName);
    writer.writeStringValue("@odata.type", appConsentRequestScope.odataType);
    writer.writeAdditionalData(appConsentRequestScope.additionalData);
}
// tslint:enable
// eslint-enable
