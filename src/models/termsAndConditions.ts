// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createTermsAndConditionsAcceptanceStatusFromDiscriminatorValue, serializeTermsAndConditionsAcceptanceStatus, type TermsAndConditionsAcceptanceStatus } from './termsAndConditionsAcceptanceStatus';
import { createTermsAndConditionsAssignmentFromDiscriminatorValue, serializeTermsAndConditionsAssignment, type TermsAndConditionsAssignment } from './termsAndConditionsAssignment';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTermsAndConditionsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTermsAndConditions;
}
export function deserializeIntoTermsAndConditions(termsAndConditions: TermsAndConditions | undefined = {} as TermsAndConditions) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(termsAndConditions),
        "acceptanceStatement": n => { termsAndConditions.acceptanceStatement = n.getStringValue(); },
        "acceptanceStatuses": n => { termsAndConditions.acceptanceStatuses = n.getCollectionOfObjectValues<TermsAndConditionsAcceptanceStatus>(createTermsAndConditionsAcceptanceStatusFromDiscriminatorValue); },
        "assignments": n => { termsAndConditions.assignments = n.getCollectionOfObjectValues<TermsAndConditionsAssignment>(createTermsAndConditionsAssignmentFromDiscriminatorValue); },
        "bodyText": n => { termsAndConditions.bodyText = n.getStringValue(); },
        "createdDateTime": n => { termsAndConditions.createdDateTime = n.getDateValue(); },
        "description": n => { termsAndConditions.description = n.getStringValue(); },
        "displayName": n => { termsAndConditions.displayName = n.getStringValue(); },
        "lastModifiedDateTime": n => { termsAndConditions.lastModifiedDateTime = n.getDateValue(); },
        "title": n => { termsAndConditions.title = n.getStringValue(); },
        "version": n => { termsAndConditions.version = n.getNumberValue(); },
    }
}
export function serializeTermsAndConditions(writer: SerializationWriter, termsAndConditions: TermsAndConditions | undefined = {} as TermsAndConditions) : void {
    serializeEntity(writer, termsAndConditions)
    writer.writeStringValue("acceptanceStatement", termsAndConditions.acceptanceStatement);
    writer.writeCollectionOfObjectValues<TermsAndConditionsAcceptanceStatus>("acceptanceStatuses", termsAndConditions.acceptanceStatuses, serializeTermsAndConditionsAcceptanceStatus);
    writer.writeCollectionOfObjectValues<TermsAndConditionsAssignment>("assignments", termsAndConditions.assignments, serializeTermsAndConditionsAssignment);
    writer.writeStringValue("bodyText", termsAndConditions.bodyText);
    writer.writeDateValue("createdDateTime", termsAndConditions.createdDateTime);
    writer.writeStringValue("description", termsAndConditions.description);
    writer.writeStringValue("displayName", termsAndConditions.displayName);
    writer.writeDateValue("lastModifiedDateTime", termsAndConditions.lastModifiedDateTime);
    writer.writeStringValue("title", termsAndConditions.title);
    writer.writeNumberValue("version", termsAndConditions.version);
}
export interface TermsAndConditions extends Entity, Parsable {
    /**
     * Administrator-supplied explanation of the terms and conditions, typically describing what it means to accept the terms and conditions set out in the T&C policy. This is shown to the user on prompts to accept the T&C policy.
     */
    acceptanceStatement?: string;
    /**
     * The list of acceptance statuses for this T&C policy.
     */
    acceptanceStatuses?: TermsAndConditionsAcceptanceStatus[];
    /**
     * The list of assignments for this T&C policy.
     */
    assignments?: TermsAndConditionsAssignment[];
    /**
     * Administrator-supplied body text of the terms and conditions, typically the terms themselves. This is shown to the user on prompts to accept the T&C policy.
     */
    bodyText?: string;
    /**
     * DateTime the object was created.
     */
    createdDateTime?: Date;
    /**
     * Administrator-supplied description of the T&C policy.
     */
    description?: string;
    /**
     * Administrator-supplied name for the T&C policy.
     */
    displayName?: string;
    /**
     * DateTime the object was last modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * Administrator-supplied title of the terms and conditions. This is shown to the user on prompts to accept the T&C policy.
     */
    title?: string;
    /**
     * Integer indicating the current version of the terms. Incremented when an administrator makes a change to the terms and wishes to require users to re-accept the modified T&C policy.
     */
    version?: number;
}
// tslint:enable
// eslint-enable
