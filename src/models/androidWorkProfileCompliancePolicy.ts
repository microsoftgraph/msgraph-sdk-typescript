// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AndroidRequiredPasswordType } from './androidRequiredPasswordType';
import { deserializeIntoDeviceCompliancePolicy, serializeDeviceCompliancePolicy, type DeviceCompliancePolicy } from './deviceCompliancePolicy';
import { DeviceThreatProtectionLevel } from './deviceThreatProtectionLevel';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AndroidWorkProfileCompliancePolicy extends DeviceCompliancePolicy, Parsable {
    /**
     * Require that devices have enabled device threat protection.
     */
    deviceThreatProtectionEnabled?: boolean;
    /**
     * Device threat protection levels for the Device Threat Protection API.
     */
    deviceThreatProtectionRequiredSecurityLevel?: DeviceThreatProtectionLevel;
    /**
     * Minimum Android security patch level.
     */
    minAndroidSecurityPatchLevel?: string;
    /**
     * Maximum Android version.
     */
    osMaximumVersion?: string;
    /**
     * Minimum Android version.
     */
    osMinimumVersion?: string;
    /**
     * Number of days before the password expires. Valid values 1 to 365
     */
    passwordExpirationDays?: number;
    /**
     * Minimum password length. Valid values 4 to 16
     */
    passwordMinimumLength?: number;
    /**
     * Minutes of inactivity before a password is required.
     */
    passwordMinutesOfInactivityBeforeLock?: number;
    /**
     * Number of previous passwords to block. Valid values 1 to 24
     */
    passwordPreviousPasswordBlockCount?: number;
    /**
     * Require a password to unlock device.
     */
    passwordRequired?: boolean;
    /**
     * Android required password type.
     */
    passwordRequiredType?: AndroidRequiredPasswordType;
    /**
     * Devices must not be jailbroken or rooted.
     */
    securityBlockJailbrokenDevices?: boolean;
    /**
     * Disable USB debugging on Android devices.
     */
    securityDisableUsbDebugging?: boolean;
    /**
     * Require that devices disallow installation of apps from unknown sources.
     */
    securityPreventInstallAppsFromUnknownSources?: boolean;
    /**
     * Require the device to pass the Company Portal client app runtime integrity check.
     */
    securityRequireCompanyPortalAppIntegrity?: boolean;
    /**
     * Require Google Play Services to be installed and enabled on the device.
     */
    securityRequireGooglePlayServices?: boolean;
    /**
     * Require the device to pass the SafetyNet basic integrity check.
     */
    securityRequireSafetyNetAttestationBasicIntegrity?: boolean;
    /**
     * Require the device to pass the SafetyNet certified device check.
     */
    securityRequireSafetyNetAttestationCertifiedDevice?: boolean;
    /**
     * Require the device to have up to date security providers. The device will require Google Play Services to be enabled and up to date.
     */
    securityRequireUpToDateSecurityProviders?: boolean;
    /**
     * Require the Android Verify apps feature is turned on.
     */
    securityRequireVerifyApps?: boolean;
    /**
     * Require encryption on Android devices.
     */
    storageRequireEncryption?: boolean;
}
export function createAndroidWorkProfileCompliancePolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAndroidWorkProfileCompliancePolicy;
}
export function deserializeIntoAndroidWorkProfileCompliancePolicy(androidWorkProfileCompliancePolicy: AndroidWorkProfileCompliancePolicy | undefined = {} as AndroidWorkProfileCompliancePolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceCompliancePolicy(androidWorkProfileCompliancePolicy),
        "deviceThreatProtectionEnabled": n => { androidWorkProfileCompliancePolicy.deviceThreatProtectionEnabled = n.getBooleanValue(); },
        "deviceThreatProtectionRequiredSecurityLevel": n => { androidWorkProfileCompliancePolicy.deviceThreatProtectionRequiredSecurityLevel = n.getEnumValue<DeviceThreatProtectionLevel>(DeviceThreatProtectionLevel); },
        "minAndroidSecurityPatchLevel": n => { androidWorkProfileCompliancePolicy.minAndroidSecurityPatchLevel = n.getStringValue(); },
        "osMaximumVersion": n => { androidWorkProfileCompliancePolicy.osMaximumVersion = n.getStringValue(); },
        "osMinimumVersion": n => { androidWorkProfileCompliancePolicy.osMinimumVersion = n.getStringValue(); },
        "passwordExpirationDays": n => { androidWorkProfileCompliancePolicy.passwordExpirationDays = n.getNumberValue(); },
        "passwordMinimumLength": n => { androidWorkProfileCompliancePolicy.passwordMinimumLength = n.getNumberValue(); },
        "passwordMinutesOfInactivityBeforeLock": n => { androidWorkProfileCompliancePolicy.passwordMinutesOfInactivityBeforeLock = n.getNumberValue(); },
        "passwordPreviousPasswordBlockCount": n => { androidWorkProfileCompliancePolicy.passwordPreviousPasswordBlockCount = n.getNumberValue(); },
        "passwordRequired": n => { androidWorkProfileCompliancePolicy.passwordRequired = n.getBooleanValue(); },
        "passwordRequiredType": n => { androidWorkProfileCompliancePolicy.passwordRequiredType = n.getEnumValue<AndroidRequiredPasswordType>(AndroidRequiredPasswordType); },
        "securityBlockJailbrokenDevices": n => { androidWorkProfileCompliancePolicy.securityBlockJailbrokenDevices = n.getBooleanValue(); },
        "securityDisableUsbDebugging": n => { androidWorkProfileCompliancePolicy.securityDisableUsbDebugging = n.getBooleanValue(); },
        "securityPreventInstallAppsFromUnknownSources": n => { androidWorkProfileCompliancePolicy.securityPreventInstallAppsFromUnknownSources = n.getBooleanValue(); },
        "securityRequireCompanyPortalAppIntegrity": n => { androidWorkProfileCompliancePolicy.securityRequireCompanyPortalAppIntegrity = n.getBooleanValue(); },
        "securityRequireGooglePlayServices": n => { androidWorkProfileCompliancePolicy.securityRequireGooglePlayServices = n.getBooleanValue(); },
        "securityRequireSafetyNetAttestationBasicIntegrity": n => { androidWorkProfileCompliancePolicy.securityRequireSafetyNetAttestationBasicIntegrity = n.getBooleanValue(); },
        "securityRequireSafetyNetAttestationCertifiedDevice": n => { androidWorkProfileCompliancePolicy.securityRequireSafetyNetAttestationCertifiedDevice = n.getBooleanValue(); },
        "securityRequireUpToDateSecurityProviders": n => { androidWorkProfileCompliancePolicy.securityRequireUpToDateSecurityProviders = n.getBooleanValue(); },
        "securityRequireVerifyApps": n => { androidWorkProfileCompliancePolicy.securityRequireVerifyApps = n.getBooleanValue(); },
        "storageRequireEncryption": n => { androidWorkProfileCompliancePolicy.storageRequireEncryption = n.getBooleanValue(); },
    }
}
export function serializeAndroidWorkProfileCompliancePolicy(writer: SerializationWriter, androidWorkProfileCompliancePolicy: AndroidWorkProfileCompliancePolicy | undefined = {} as AndroidWorkProfileCompliancePolicy) : void {
    serializeDeviceCompliancePolicy(writer, androidWorkProfileCompliancePolicy)
    writer.writeBooleanValue("deviceThreatProtectionEnabled", androidWorkProfileCompliancePolicy.deviceThreatProtectionEnabled);
    writer.writeEnumValue<DeviceThreatProtectionLevel>("deviceThreatProtectionRequiredSecurityLevel", androidWorkProfileCompliancePolicy.deviceThreatProtectionRequiredSecurityLevel);
    writer.writeStringValue("minAndroidSecurityPatchLevel", androidWorkProfileCompliancePolicy.minAndroidSecurityPatchLevel);
    writer.writeStringValue("osMaximumVersion", androidWorkProfileCompliancePolicy.osMaximumVersion);
    writer.writeStringValue("osMinimumVersion", androidWorkProfileCompliancePolicy.osMinimumVersion);
    writer.writeNumberValue("passwordExpirationDays", androidWorkProfileCompliancePolicy.passwordExpirationDays);
    writer.writeNumberValue("passwordMinimumLength", androidWorkProfileCompliancePolicy.passwordMinimumLength);
    writer.writeNumberValue("passwordMinutesOfInactivityBeforeLock", androidWorkProfileCompliancePolicy.passwordMinutesOfInactivityBeforeLock);
    writer.writeNumberValue("passwordPreviousPasswordBlockCount", androidWorkProfileCompliancePolicy.passwordPreviousPasswordBlockCount);
    writer.writeBooleanValue("passwordRequired", androidWorkProfileCompliancePolicy.passwordRequired);
    writer.writeEnumValue<AndroidRequiredPasswordType>("passwordRequiredType", androidWorkProfileCompliancePolicy.passwordRequiredType);
    writer.writeBooleanValue("securityBlockJailbrokenDevices", androidWorkProfileCompliancePolicy.securityBlockJailbrokenDevices);
    writer.writeBooleanValue("securityDisableUsbDebugging", androidWorkProfileCompliancePolicy.securityDisableUsbDebugging);
    writer.writeBooleanValue("securityPreventInstallAppsFromUnknownSources", androidWorkProfileCompliancePolicy.securityPreventInstallAppsFromUnknownSources);
    writer.writeBooleanValue("securityRequireCompanyPortalAppIntegrity", androidWorkProfileCompliancePolicy.securityRequireCompanyPortalAppIntegrity);
    writer.writeBooleanValue("securityRequireGooglePlayServices", androidWorkProfileCompliancePolicy.securityRequireGooglePlayServices);
    writer.writeBooleanValue("securityRequireSafetyNetAttestationBasicIntegrity", androidWorkProfileCompliancePolicy.securityRequireSafetyNetAttestationBasicIntegrity);
    writer.writeBooleanValue("securityRequireSafetyNetAttestationCertifiedDevice", androidWorkProfileCompliancePolicy.securityRequireSafetyNetAttestationCertifiedDevice);
    writer.writeBooleanValue("securityRequireUpToDateSecurityProviders", androidWorkProfileCompliancePolicy.securityRequireUpToDateSecurityProviders);
    writer.writeBooleanValue("securityRequireVerifyApps", androidWorkProfileCompliancePolicy.securityRequireVerifyApps);
    writer.writeBooleanValue("storageRequireEncryption", androidWorkProfileCompliancePolicy.storageRequireEncryption);
}
// tslint:enable
// eslint-enable
