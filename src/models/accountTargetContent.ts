// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AccountTargetContentType } from './accountTargetContentType';
import { deserializeIntoAddressBookAccountTargetContent } from './addressBookAccountTargetContent';
import { deserializeIntoIncludeAllAccountTargetContent } from './includeAllAccountTargetContent';
import { type AddressBookAccountTargetContent, type IncludeAllAccountTargetContent } from './index';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccountTargetContent extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The type of account target content. Possible values are: unknown, includeAll, addressBook, unknownFutureValue.
     */
    type?: AccountTargetContentType;
}
export function createAccountTargetContentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.addressBookAccountTargetContent":
                    return deserializeIntoAddressBookAccountTargetContent;
                case "#microsoft.graph.includeAllAccountTargetContent":
                    return deserializeIntoIncludeAllAccountTargetContent;
            }
        }
    }
    return deserializeIntoAccountTargetContent;
}
export function deserializeIntoAccountTargetContent(accountTargetContent: AccountTargetContent | undefined = {} as AccountTargetContent) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { accountTargetContent.odataType = n.getStringValue(); },
        "type": n => { accountTargetContent.type = n.getEnumValue<AccountTargetContentType>(AccountTargetContentType); },
    }
}
export function serializeAccountTargetContent(writer: SerializationWriter, accountTargetContent: AccountTargetContent | undefined = {} as AccountTargetContent) : void {
    writer.writeStringValue("@odata.type", accountTargetContent.odataType);
    writer.writeEnumValue<AccountTargetContentType>("type", accountTargetContent.type);
    writer.writeAdditionalData(accountTargetContent.additionalData);
}
// tslint:enable
// eslint-enable
