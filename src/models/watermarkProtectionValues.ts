// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWatermarkProtectionValuesFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWatermarkProtectionValues;
}
export function deserializeIntoWatermarkProtectionValues(watermarkProtectionValues: WatermarkProtectionValues | undefined = {} as WatermarkProtectionValues) : Record<string, (node: ParseNode) => void> {
    return {
        "isEnabledForContentSharing": n => { watermarkProtectionValues.isEnabledForContentSharing = n.getBooleanValue(); },
        "isEnabledForVideo": n => { watermarkProtectionValues.isEnabledForVideo = n.getBooleanValue(); },
        "@odata.type": n => { watermarkProtectionValues.odataType = n.getStringValue(); },
    }
}
export function serializeWatermarkProtectionValues(writer: SerializationWriter, watermarkProtectionValues: WatermarkProtectionValues | undefined = {} as WatermarkProtectionValues) : void {
        writer.writeBooleanValue("isEnabledForContentSharing", watermarkProtectionValues.isEnabledForContentSharing);
        writer.writeBooleanValue("isEnabledForVideo", watermarkProtectionValues.isEnabledForVideo);
        writer.writeStringValue("@odata.type", watermarkProtectionValues.odataType);
        writer.writeAdditionalData(watermarkProtectionValues.additionalData);
}
export interface WatermarkProtectionValues extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates whether to apply a watermark to any shared content.
     */
    isEnabledForContentSharing?: boolean;
    /**
     * Indicates whether to apply a watermark to everyone's video feed.
     */
    isEnabledForVideo?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:enable
// eslint-enable
