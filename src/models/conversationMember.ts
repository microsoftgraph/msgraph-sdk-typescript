// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAadUserConversationMember } from './aadUserConversationMember';
import { deserializeIntoAnonymousGuestConversationMember } from './anonymousGuestConversationMember';
import { deserializeIntoAzureCommunicationServicesUserConversationMember } from './azureCommunicationServicesUserConversationMember';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type AadUserConversationMember, type AnonymousGuestConversationMember, type AzureCommunicationServicesUserConversationMember, type MicrosoftAccountUserConversationMember, type SkypeForBusinessUserConversationMember, type SkypeUserConversationMember } from './index';
import { deserializeIntoMicrosoftAccountUserConversationMember } from './microsoftAccountUserConversationMember';
import { deserializeIntoSkypeForBusinessUserConversationMember } from './skypeForBusinessUserConversationMember';
import { deserializeIntoSkypeUserConversationMember } from './skypeUserConversationMember';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConversationMember extends Entity, Parsable {
    /**
     * The display name of the user.
     */
    displayName?: string;
    /**
     * The roles for that user. This property contains additional qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member should not have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role.
     */
    roles?: string[];
    /**
     * The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.
     */
    visibleHistoryStartDateTime?: Date;
}
export function createConversationMemberFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.aadUserConversationMember":
                    return deserializeIntoAadUserConversationMember;
                case "#microsoft.graph.anonymousGuestConversationMember":
                    return deserializeIntoAnonymousGuestConversationMember;
                case "#microsoft.graph.azureCommunicationServicesUserConversationMember":
                    return deserializeIntoAzureCommunicationServicesUserConversationMember;
                case "#microsoft.graph.microsoftAccountUserConversationMember":
                    return deserializeIntoMicrosoftAccountUserConversationMember;
                case "#microsoft.graph.skypeForBusinessUserConversationMember":
                    return deserializeIntoSkypeForBusinessUserConversationMember;
                case "#microsoft.graph.skypeUserConversationMember":
                    return deserializeIntoSkypeUserConversationMember;
            }
        }
    }
    return deserializeIntoConversationMember;
}
export function deserializeIntoConversationMember(conversationMember: ConversationMember | undefined = {} as ConversationMember) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(conversationMember),
        "displayName": n => { conversationMember.displayName = n.getStringValue(); },
        "roles": n => { conversationMember.roles = n.getCollectionOfPrimitiveValues<string>(); },
        "visibleHistoryStartDateTime": n => { conversationMember.visibleHistoryStartDateTime = n.getDateValue(); },
    }
}
export function serializeConversationMember(writer: SerializationWriter, conversationMember: ConversationMember | undefined = {} as ConversationMember) : void {
        serializeEntity(writer, conversationMember)
        writer.writeStringValue("displayName", conversationMember.displayName);
        writer.writeCollectionOfPrimitiveValues<string>("roles", conversationMember.roles);
        writer.writeDateValue("visibleHistoryStartDateTime", conversationMember.visibleHistoryStartDateTime);
}
// tslint:enable
// eslint-enable
