// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createComplianceManagementPartnerAssignmentFromDiscriminatorValue, serializeComplianceManagementPartnerAssignment, type ComplianceManagementPartnerAssignment } from './complianceManagementPartnerAssignment';
import { DeviceManagementPartnerTenantState } from './deviceManagementPartnerTenantState';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ComplianceManagementPartner extends Entity, Parsable {
    /**
     * User groups which enroll Android devices through partner.
     */
    androidEnrollmentAssignments?: ComplianceManagementPartnerAssignment[];
    /**
     * Partner onboarded for Android devices.
     */
    androidOnboarded?: boolean;
    /**
     * Partner display name
     */
    displayName?: string;
    /**
     * User groups which enroll ios devices through partner.
     */
    iosEnrollmentAssignments?: ComplianceManagementPartnerAssignment[];
    /**
     * Partner onboarded for ios devices.
     */
    iosOnboarded?: boolean;
    /**
     * Timestamp of last heartbeat after admin onboarded to the compliance management partner
     */
    lastHeartbeatDateTime?: Date;
    /**
     * User groups which enroll Mac devices through partner.
     */
    macOsEnrollmentAssignments?: ComplianceManagementPartnerAssignment[];
    /**
     * Partner onboarded for Mac devices.
     */
    macOsOnboarded?: boolean;
    /**
     * Partner state of this tenant.
     */
    partnerState?: DeviceManagementPartnerTenantState;
}
export function createComplianceManagementPartnerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoComplianceManagementPartner;
}
export function deserializeIntoComplianceManagementPartner(complianceManagementPartner: ComplianceManagementPartner | undefined = {} as ComplianceManagementPartner) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(complianceManagementPartner),
        "androidEnrollmentAssignments": n => { complianceManagementPartner.androidEnrollmentAssignments = n.getCollectionOfObjectValues<ComplianceManagementPartnerAssignment>(createComplianceManagementPartnerAssignmentFromDiscriminatorValue); },
        "androidOnboarded": n => { complianceManagementPartner.androidOnboarded = n.getBooleanValue(); },
        "displayName": n => { complianceManagementPartner.displayName = n.getStringValue(); },
        "iosEnrollmentAssignments": n => { complianceManagementPartner.iosEnrollmentAssignments = n.getCollectionOfObjectValues<ComplianceManagementPartnerAssignment>(createComplianceManagementPartnerAssignmentFromDiscriminatorValue); },
        "iosOnboarded": n => { complianceManagementPartner.iosOnboarded = n.getBooleanValue(); },
        "lastHeartbeatDateTime": n => { complianceManagementPartner.lastHeartbeatDateTime = n.getDateValue(); },
        "macOsEnrollmentAssignments": n => { complianceManagementPartner.macOsEnrollmentAssignments = n.getCollectionOfObjectValues<ComplianceManagementPartnerAssignment>(createComplianceManagementPartnerAssignmentFromDiscriminatorValue); },
        "macOsOnboarded": n => { complianceManagementPartner.macOsOnboarded = n.getBooleanValue(); },
        "partnerState": n => { complianceManagementPartner.partnerState = n.getEnumValue<DeviceManagementPartnerTenantState>(DeviceManagementPartnerTenantState); },
    }
}
export function serializeComplianceManagementPartner(writer: SerializationWriter, complianceManagementPartner: ComplianceManagementPartner | undefined = {} as ComplianceManagementPartner) : void {
        serializeEntity(writer, complianceManagementPartner)
        writer.writeCollectionOfObjectValues<ComplianceManagementPartnerAssignment>("androidEnrollmentAssignments", complianceManagementPartner.androidEnrollmentAssignments, serializeComplianceManagementPartnerAssignment);
        writer.writeBooleanValue("androidOnboarded", complianceManagementPartner.androidOnboarded);
        writer.writeStringValue("displayName", complianceManagementPartner.displayName);
        writer.writeCollectionOfObjectValues<ComplianceManagementPartnerAssignment>("iosEnrollmentAssignments", complianceManagementPartner.iosEnrollmentAssignments, serializeComplianceManagementPartnerAssignment);
        writer.writeBooleanValue("iosOnboarded", complianceManagementPartner.iosOnboarded);
        writer.writeDateValue("lastHeartbeatDateTime", complianceManagementPartner.lastHeartbeatDateTime);
        writer.writeCollectionOfObjectValues<ComplianceManagementPartnerAssignment>("macOsEnrollmentAssignments", complianceManagementPartner.macOsEnrollmentAssignments, serializeComplianceManagementPartnerAssignment);
        writer.writeBooleanValue("macOsOnboarded", complianceManagementPartner.macOsOnboarded);
        writer.writeEnumValue<DeviceManagementPartnerTenantState>("partnerState", complianceManagementPartner.partnerState);
}
// tslint:enable
// eslint-enable
