// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAccessPackageAssignmentRequestWorkflowExtension } from './accessPackageAssignmentRequestWorkflowExtension';
import { deserializeIntoAccessPackageAssignmentWorkflowExtension } from './accessPackageAssignmentWorkflowExtension';
import { createCustomExtensionAuthenticationConfigurationFromDiscriminatorValue, serializeCustomExtensionAuthenticationConfiguration, type CustomExtensionAuthenticationConfiguration } from './customExtensionAuthenticationConfiguration';
import { createCustomExtensionClientConfigurationFromDiscriminatorValue, serializeCustomExtensionClientConfiguration, type CustomExtensionClientConfiguration } from './customExtensionClientConfiguration';
import { createCustomExtensionEndpointConfigurationFromDiscriminatorValue, serializeCustomExtensionEndpointConfiguration, type CustomExtensionEndpointConfiguration } from './customExtensionEndpointConfiguration';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type CustomTaskExtension } from './identityGovernance/';
import { deserializeIntoCustomTaskExtension } from './identityGovernance/customTaskExtension';
import { type AccessPackageAssignmentRequestWorkflowExtension, type AccessPackageAssignmentWorkflowExtension } from './index';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCustomCalloutExtensionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.accessPackageAssignmentRequestWorkflowExtension":
                    return deserializeIntoAccessPackageAssignmentRequestWorkflowExtension;
                case "#microsoft.graph.accessPackageAssignmentWorkflowExtension":
                    return deserializeIntoAccessPackageAssignmentWorkflowExtension;
                case "#microsoft.graph.identityGovernance.customTaskExtension":
                    return deserializeIntoCustomTaskExtension;
            }
        }
    }
    return deserializeIntoCustomCalloutExtension;
}
export interface CustomCalloutExtension extends Entity, Parsable {
    /**
     * Configuration for securing the API call to the logic app. For example, using OAuth client credentials flow.
     */
    authenticationConfiguration?: CustomExtensionAuthenticationConfiguration;
    /**
     * HTTP connection settings that define how long Microsoft Entra ID can wait for a connection to a logic app, how many times you can retry a timed-out connection and the exception scenarios when retries are allowed.
     */
    clientConfiguration?: CustomExtensionClientConfiguration;
    /**
     * Description for the customCalloutExtension object.
     */
    description?: string;
    /**
     * Display name for the customCalloutExtension object.
     */
    displayName?: string;
    /**
     * The type and details for configuring the endpoint to call the logic app's workflow.
     */
    endpointConfiguration?: CustomExtensionEndpointConfiguration;
}
export function deserializeIntoCustomCalloutExtension(customCalloutExtension: CustomCalloutExtension | undefined = {} as CustomCalloutExtension) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(customCalloutExtension),
        "authenticationConfiguration": n => { customCalloutExtension.authenticationConfiguration = n.getObjectValue<CustomExtensionAuthenticationConfiguration>(createCustomExtensionAuthenticationConfigurationFromDiscriminatorValue); },
        "clientConfiguration": n => { customCalloutExtension.clientConfiguration = n.getObjectValue<CustomExtensionClientConfiguration>(createCustomExtensionClientConfigurationFromDiscriminatorValue); },
        "description": n => { customCalloutExtension.description = n.getStringValue(); },
        "displayName": n => { customCalloutExtension.displayName = n.getStringValue(); },
        "endpointConfiguration": n => { customCalloutExtension.endpointConfiguration = n.getObjectValue<CustomExtensionEndpointConfiguration>(createCustomExtensionEndpointConfigurationFromDiscriminatorValue); },
    }
}
export function serializeCustomCalloutExtension(writer: SerializationWriter, customCalloutExtension: CustomCalloutExtension | undefined = {} as CustomCalloutExtension) : void {
        serializeEntity(writer, customCalloutExtension)
        writer.writeObjectValue<CustomExtensionAuthenticationConfiguration>("authenticationConfiguration", customCalloutExtension.authenticationConfiguration, serializeCustomExtensionAuthenticationConfiguration);
        writer.writeObjectValue<CustomExtensionClientConfiguration>("clientConfiguration", customCalloutExtension.clientConfiguration, serializeCustomExtensionClientConfiguration);
        writer.writeStringValue("description", customCalloutExtension.description);
        writer.writeStringValue("displayName", customCalloutExtension.displayName);
        writer.writeObjectValue<CustomExtensionEndpointConfiguration>("endpointConfiguration", customCalloutExtension.endpointConfiguration, serializeCustomExtensionEndpointConfiguration);
}
// tslint:enable
// eslint-enable
