// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ComplianceStatus } from './complianceStatus';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceComplianceDeviceStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceComplianceDeviceStatus;
}
export function deserializeIntoDeviceComplianceDeviceStatus(deviceComplianceDeviceStatus: DeviceComplianceDeviceStatus | undefined = {} as DeviceComplianceDeviceStatus) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceComplianceDeviceStatus),
        "complianceGracePeriodExpirationDateTime": n => { deviceComplianceDeviceStatus.complianceGracePeriodExpirationDateTime = n.getDateValue(); },
        "deviceDisplayName": n => { deviceComplianceDeviceStatus.deviceDisplayName = n.getStringValue(); },
        "deviceModel": n => { deviceComplianceDeviceStatus.deviceModel = n.getStringValue(); },
        "lastReportedDateTime": n => { deviceComplianceDeviceStatus.lastReportedDateTime = n.getDateValue(); },
        "status": n => { deviceComplianceDeviceStatus.status = n.getEnumValue<ComplianceStatus>(ComplianceStatus); },
        "userName": n => { deviceComplianceDeviceStatus.userName = n.getStringValue(); },
        "userPrincipalName": n => { deviceComplianceDeviceStatus.userPrincipalName = n.getStringValue(); },
    }
}
export interface DeviceComplianceDeviceStatus extends Entity, Parsable {
    /**
     * The DateTime when device compliance grace period expires
     */
    complianceGracePeriodExpirationDateTime?: Date;
    /**
     * Device name of the DevicePolicyStatus.
     */
    deviceDisplayName?: string;
    /**
     * The device model that is being reported
     */
    deviceModel?: string;
    /**
     * Last modified date time of the policy report.
     */
    lastReportedDateTime?: Date;
    /**
     * The status property
     */
    status?: ComplianceStatus;
    /**
     * The User Name that is being reported
     */
    userName?: string;
    /**
     * UserPrincipalName.
     */
    userPrincipalName?: string;
}
export function serializeDeviceComplianceDeviceStatus(writer: SerializationWriter, deviceComplianceDeviceStatus: DeviceComplianceDeviceStatus | undefined = {} as DeviceComplianceDeviceStatus) : void {
    serializeEntity(writer, deviceComplianceDeviceStatus)
    writer.writeDateValue("complianceGracePeriodExpirationDateTime", deviceComplianceDeviceStatus.complianceGracePeriodExpirationDateTime);
    writer.writeStringValue("deviceDisplayName", deviceComplianceDeviceStatus.deviceDisplayName);
    writer.writeStringValue("deviceModel", deviceComplianceDeviceStatus.deviceModel);
    writer.writeDateValue("lastReportedDateTime", deviceComplianceDeviceStatus.lastReportedDateTime);
    writer.writeEnumValue<ComplianceStatus>("status", deviceComplianceDeviceStatus.status);
    writer.writeStringValue("userName", deviceComplianceDeviceStatus.userName);
    writer.writeStringValue("userPrincipalName", deviceComplianceDeviceStatus.userPrincipalName);
}
// tslint:enable
// eslint-enable
