// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createServiceHealthIssueFromDiscriminatorValue, serializeServiceHealthIssue, type ServiceHealthIssue } from './serviceHealthIssue';
import { ServiceHealthStatus } from './serviceHealthStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createServiceHealthFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoServiceHealth;
}
export function deserializeIntoServiceHealth(serviceHealth: ServiceHealth | undefined = {} as ServiceHealth) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(serviceHealth),
        "issues": n => { serviceHealth.issues = n.getCollectionOfObjectValues<ServiceHealthIssue>(createServiceHealthIssueFromDiscriminatorValue); },
        "service": n => { serviceHealth.service = n.getStringValue(); },
        "status": n => { serviceHealth.status = n.getEnumValue<ServiceHealthStatus>(ServiceHealthStatus); },
    }
}
export function serializeServiceHealth(writer: SerializationWriter, serviceHealth: ServiceHealth | undefined = {} as ServiceHealth) : void {
        serializeEntity(writer, serviceHealth)
        writer.writeCollectionOfObjectValues<ServiceHealthIssue>("issues", serviceHealth.issues, );
        writer.writeStringValue("service", serviceHealth.service);
        writer.writeEnumValue<ServiceHealthStatus>("status", serviceHealth.status);
}
export interface ServiceHealth extends Entity, Parsable {
    /**
     * A collection of issues that happened on the service, with detailed information for each issue.
     */
    issues?: ServiceHealthIssue[];
    /**
     * The service name. Use the list healthOverviews operation to get exact string names for services subscribed by the tenant.
     */
    service?: string;
    /**
     * The status property
     */
    status?: ServiceHealthStatus;
}
// tslint:enable
// eslint-enable
