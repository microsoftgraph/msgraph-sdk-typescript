// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDeviceCompliancePolicy, serializeDeviceCompliancePolicy, type DeviceCompliancePolicy } from './deviceCompliancePolicy';
import { RequiredPasswordType } from './requiredPasswordType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindowsPhone81CompliancePolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindowsPhone81CompliancePolicy;
}
export function deserializeIntoWindowsPhone81CompliancePolicy(windowsPhone81CompliancePolicy: WindowsPhone81CompliancePolicy | undefined = {} as WindowsPhone81CompliancePolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceCompliancePolicy(windowsPhone81CompliancePolicy),
        "osMaximumVersion": n => { windowsPhone81CompliancePolicy.osMaximumVersion = n.getStringValue(); },
        "osMinimumVersion": n => { windowsPhone81CompliancePolicy.osMinimumVersion = n.getStringValue(); },
        "passwordBlockSimple": n => { windowsPhone81CompliancePolicy.passwordBlockSimple = n.getBooleanValue(); },
        "passwordExpirationDays": n => { windowsPhone81CompliancePolicy.passwordExpirationDays = n.getNumberValue(); },
        "passwordMinimumCharacterSetCount": n => { windowsPhone81CompliancePolicy.passwordMinimumCharacterSetCount = n.getNumberValue(); },
        "passwordMinimumLength": n => { windowsPhone81CompliancePolicy.passwordMinimumLength = n.getNumberValue(); },
        "passwordMinutesOfInactivityBeforeLock": n => { windowsPhone81CompliancePolicy.passwordMinutesOfInactivityBeforeLock = n.getNumberValue(); },
        "passwordPreviousPasswordBlockCount": n => { windowsPhone81CompliancePolicy.passwordPreviousPasswordBlockCount = n.getNumberValue(); },
        "passwordRequired": n => { windowsPhone81CompliancePolicy.passwordRequired = n.getBooleanValue(); },
        "passwordRequiredType": n => { windowsPhone81CompliancePolicy.passwordRequiredType = n.getEnumValue<RequiredPasswordType>(RequiredPasswordType); },
        "storageRequireEncryption": n => { windowsPhone81CompliancePolicy.storageRequireEncryption = n.getBooleanValue(); },
    }
}
export function serializeWindowsPhone81CompliancePolicy(writer: SerializationWriter, windowsPhone81CompliancePolicy: WindowsPhone81CompliancePolicy | undefined = {} as WindowsPhone81CompliancePolicy) : void {
        serializeDeviceCompliancePolicy(writer, windowsPhone81CompliancePolicy)
        writer.writeStringValue("osMaximumVersion", windowsPhone81CompliancePolicy.osMaximumVersion);
        writer.writeStringValue("osMinimumVersion", windowsPhone81CompliancePolicy.osMinimumVersion);
        writer.writeBooleanValue("passwordBlockSimple", windowsPhone81CompliancePolicy.passwordBlockSimple);
        writer.writeNumberValue("passwordExpirationDays", windowsPhone81CompliancePolicy.passwordExpirationDays);
        writer.writeNumberValue("passwordMinimumCharacterSetCount", windowsPhone81CompliancePolicy.passwordMinimumCharacterSetCount);
        writer.writeNumberValue("passwordMinimumLength", windowsPhone81CompliancePolicy.passwordMinimumLength);
        writer.writeNumberValue("passwordMinutesOfInactivityBeforeLock", windowsPhone81CompliancePolicy.passwordMinutesOfInactivityBeforeLock);
        writer.writeNumberValue("passwordPreviousPasswordBlockCount", windowsPhone81CompliancePolicy.passwordPreviousPasswordBlockCount);
        writer.writeBooleanValue("passwordRequired", windowsPhone81CompliancePolicy.passwordRequired);
        writer.writeEnumValue<RequiredPasswordType>("passwordRequiredType", windowsPhone81CompliancePolicy.passwordRequiredType);
        writer.writeBooleanValue("storageRequireEncryption", windowsPhone81CompliancePolicy.storageRequireEncryption);
}
export interface WindowsPhone81CompliancePolicy extends DeviceCompliancePolicy, Parsable {
    /**
     * Maximum Windows Phone version.
     */
    osMaximumVersion?: string;
    /**
     * Minimum Windows Phone version.
     */
    osMinimumVersion?: string;
    /**
     * Whether or not to block syncing the calendar.
     */
    passwordBlockSimple?: boolean;
    /**
     * Number of days before the password expires.
     */
    passwordExpirationDays?: number;
    /**
     * The number of character sets required in the password.
     */
    passwordMinimumCharacterSetCount?: number;
    /**
     * Minimum length of passwords.
     */
    passwordMinimumLength?: number;
    /**
     * Minutes of inactivity before a password is required.
     */
    passwordMinutesOfInactivityBeforeLock?: number;
    /**
     * Number of previous passwords to block. Valid values 0 to 24
     */
    passwordPreviousPasswordBlockCount?: number;
    /**
     * Whether or not to require a password.
     */
    passwordRequired?: boolean;
    /**
     * Possible values of required passwords.
     */
    passwordRequiredType?: RequiredPasswordType;
    /**
     * Require encryption on windows phone devices.
     */
    storageRequireEncryption?: boolean;
}
// tslint:enable
// eslint-enable
