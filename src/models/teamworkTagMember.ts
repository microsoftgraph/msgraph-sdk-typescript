// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTeamworkTagMemberFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTeamworkTagMember;
}
export function deserializeIntoTeamworkTagMember(teamworkTagMember: TeamworkTagMember | undefined = {} as TeamworkTagMember) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(teamworkTagMember),
        "displayName": n => { teamworkTagMember.displayName = n.getStringValue(); },
        "tenantId": n => { teamworkTagMember.tenantId = n.getStringValue(); },
        "userId": n => { teamworkTagMember.userId = n.getStringValue(); },
    }
}
export function serializeTeamworkTagMember(writer: SerializationWriter, teamworkTagMember: TeamworkTagMember | undefined = {} as TeamworkTagMember) : void {
    serializeEntity(writer, teamworkTagMember)
    writer.writeStringValue("displayName", teamworkTagMember.displayName);
    writer.writeStringValue("tenantId", teamworkTagMember.tenantId);
    writer.writeStringValue("userId", teamworkTagMember.userId);
}
export interface TeamworkTagMember extends Entity, Parsable {
    /**
     * The member's display name.
     */
    displayName?: string;
    /**
     * The ID of the tenant that the tag member is a part of.
     */
    tenantId?: string;
    /**
     * The user ID of the member.
     */
    userId?: string;
}
// tslint:enable
// eslint-enable
