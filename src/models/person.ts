// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createLocationFromDiscriminatorValue, serializeLocation, type Location } from './location';
import { createPersonTypeFromDiscriminatorValue, serializePersonType, type PersonType } from './personType';
import { createPhoneFromDiscriminatorValue, serializePhone, type Phone } from './phone';
import { createScoredEmailAddressFromDiscriminatorValue, serializeScoredEmailAddress, type ScoredEmailAddress } from './scoredEmailAddress';
import { createWebsiteFromDiscriminatorValue, serializeWebsite, type Website } from './website';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPersonFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPerson;
}
export function deserializeIntoPerson(person: Person | undefined = {} as Person) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(person),
        "birthday": n => { person.birthday = n.getStringValue(); },
        "companyName": n => { person.companyName = n.getStringValue(); },
        "department": n => { person.department = n.getStringValue(); },
        "displayName": n => { person.displayName = n.getStringValue(); },
        "givenName": n => { person.givenName = n.getStringValue(); },
        "imAddress": n => { person.imAddress = n.getStringValue(); },
        "isFavorite": n => { person.isFavorite = n.getBooleanValue(); },
        "jobTitle": n => { person.jobTitle = n.getStringValue(); },
        "officeLocation": n => { person.officeLocation = n.getStringValue(); },
        "personNotes": n => { person.personNotes = n.getStringValue(); },
        "personType": n => { person.personType = n.getObjectValue<PersonType>(createPersonTypeFromDiscriminatorValue); },
        "phones": n => { person.phones = n.getCollectionOfObjectValues<Phone>(createPhoneFromDiscriminatorValue); },
        "postalAddresses": n => { person.postalAddresses = n.getCollectionOfObjectValues<Location>(createLocationFromDiscriminatorValue); },
        "profession": n => { person.profession = n.getStringValue(); },
        "scoredEmailAddresses": n => { person.scoredEmailAddresses = n.getCollectionOfObjectValues<ScoredEmailAddress>(createScoredEmailAddressFromDiscriminatorValue); },
        "surname": n => { person.surname = n.getStringValue(); },
        "userPrincipalName": n => { person.userPrincipalName = n.getStringValue(); },
        "websites": n => { person.websites = n.getCollectionOfObjectValues<Website>(createWebsiteFromDiscriminatorValue); },
        "yomiCompany": n => { person.yomiCompany = n.getStringValue(); },
    }
}
export interface Person extends Entity, Parsable {
    /**
     * The person's birthday.
     */
    birthday?: string;
    /**
     * The name of the person's company.
     */
    companyName?: string;
    /**
     * The person's department.
     */
    department?: string;
    /**
     * The person's display name.
     */
    displayName?: string;
    /**
     * The person's given name.
     */
    givenName?: string;
    /**
     * The instant message voice over IP (VOIP) session initiation protocol (SIP) address for the user. Read-only.
     */
    imAddress?: string;
    /**
     * True if the user has flagged this person as a favorite.
     */
    isFavorite?: boolean;
    /**
     * The person's job title.
     */
    jobTitle?: string;
    /**
     * The location of the person's office.
     */
    officeLocation?: string;
    /**
     * Free-form notes that the user has taken about this person.
     */
    personNotes?: string;
    /**
     * The type of person.
     */
    personType?: PersonType;
    /**
     * The person's phone numbers.
     */
    phones?: Phone[];
    /**
     * The person's addresses.
     */
    postalAddresses?: Location[];
    /**
     * The person's profession.
     */
    profession?: string;
    /**
     * The person's email addresses.
     */
    scoredEmailAddresses?: ScoredEmailAddress[];
    /**
     * The person's surname.
     */
    surname?: string;
    /**
     * The user principal name (UPN) of the person. The UPN is an Internet-style login name for the person based on the Internet standard RFC 822. By convention, this should map to the person's email name. The general format is alias@domain.
     */
    userPrincipalName?: string;
    /**
     * The person's websites.
     */
    websites?: Website[];
    /**
     * The phonetic Japanese name of the person's company.
     */
    yomiCompany?: string;
}
export function serializePerson(writer: SerializationWriter, person: Person | undefined = {} as Person) : void {
        serializeEntity(writer, person)
        writer.writeStringValue("birthday", person.birthday);
        writer.writeStringValue("companyName", person.companyName);
        writer.writeStringValue("department", person.department);
        writer.writeStringValue("displayName", person.displayName);
        writer.writeStringValue("givenName", person.givenName);
        writer.writeStringValue("imAddress", person.imAddress);
        writer.writeBooleanValue("isFavorite", person.isFavorite);
        writer.writeStringValue("jobTitle", person.jobTitle);
        writer.writeStringValue("officeLocation", person.officeLocation);
        writer.writeStringValue("personNotes", person.personNotes);
        writer.writeObjectValue<PersonType>("personType", person.personType, serializePersonType);
        writer.writeCollectionOfObjectValues<Phone>("phones", person.phones, serializePhone);
        writer.writeCollectionOfObjectValues<Location>("postalAddresses", person.postalAddresses, serializeLocation);
        writer.writeStringValue("profession", person.profession);
        writer.writeCollectionOfObjectValues<ScoredEmailAddress>("scoredEmailAddresses", person.scoredEmailAddresses, serializeScoredEmailAddress);
        writer.writeStringValue("surname", person.surname);
        writer.writeStringValue("userPrincipalName", person.userPrincipalName);
        writer.writeCollectionOfObjectValues<Website>("websites", person.websites, serializeWebsite);
        writer.writeStringValue("yomiCompany", person.yomiCompany);
}
// tslint:enable
// eslint-enable
