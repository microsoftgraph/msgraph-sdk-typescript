// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createListInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoListInfo;
}
export function deserializeIntoListInfo(listInfo: ListInfo | undefined = {} as ListInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "contentTypesEnabled": n => { listInfo.contentTypesEnabled = n.getBooleanValue(); },
        "hidden": n => { listInfo.hidden = n.getBooleanValue(); },
        "@odata.type": n => { listInfo.odataType = n.getStringValue(); },
        "template": n => { listInfo.template = n.getStringValue(); },
    }
}
export interface ListInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * If true, indicates that content types are enabled for this list.
     */
    contentTypesEnabled?: boolean;
    /**
     * If true, indicates that the list isn't normally visible in the SharePoint user experience.
     */
    hidden?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * An enumerated value that represents the base list template used in creating the list. Possible values include documentLibrary, genericList, task, survey, announcements, contacts, and more.
     */
    template?: string;
}
export function serializeListInfo(writer: SerializationWriter, listInfo: ListInfo | undefined = {} as ListInfo) : void {
    writer.writeBooleanValue("contentTypesEnabled", listInfo.contentTypesEnabled);
    writer.writeBooleanValue("hidden", listInfo.hidden);
    writer.writeStringValue("@odata.type", listInfo.odataType);
    writer.writeStringValue("template", listInfo.template);
    writer.writeAdditionalData(listInfo.additionalData);
}
// tslint:enable
// eslint-enable
