// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCrossTenantAccessPolicyTargetConfigurationFromDiscriminatorValue, serializeCrossTenantAccessPolicyTargetConfiguration, type CrossTenantAccessPolicyTargetConfiguration } from './crossTenantAccessPolicyTargetConfiguration';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCrossTenantAccessPolicyB2BSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCrossTenantAccessPolicyB2BSetting;
}
export interface CrossTenantAccessPolicyB2BSetting extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The list of applications targeted with your cross-tenant access policy.
     */
    applications?: CrossTenantAccessPolicyTargetConfiguration;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The list of users and groups targeted with your cross-tenant access policy.
     */
    usersAndGroups?: CrossTenantAccessPolicyTargetConfiguration;
}
export function deserializeIntoCrossTenantAccessPolicyB2BSetting(crossTenantAccessPolicyB2BSetting: CrossTenantAccessPolicyB2BSetting | undefined = {} as CrossTenantAccessPolicyB2BSetting) : Record<string, (node: ParseNode) => void> {
    return {
        "applications": n => { crossTenantAccessPolicyB2BSetting.applications = n.getObjectValue<CrossTenantAccessPolicyTargetConfiguration>(createCrossTenantAccessPolicyTargetConfigurationFromDiscriminatorValue); },
        "@odata.type": n => { crossTenantAccessPolicyB2BSetting.odataType = n.getStringValue(); },
        "usersAndGroups": n => { crossTenantAccessPolicyB2BSetting.usersAndGroups = n.getObjectValue<CrossTenantAccessPolicyTargetConfiguration>(createCrossTenantAccessPolicyTargetConfigurationFromDiscriminatorValue); },
    }
}
export function serializeCrossTenantAccessPolicyB2BSetting(writer: SerializationWriter, crossTenantAccessPolicyB2BSetting: CrossTenantAccessPolicyB2BSetting | undefined = {} as CrossTenantAccessPolicyB2BSetting) : void {
        writer.writeObjectValue<CrossTenantAccessPolicyTargetConfiguration>("applications", crossTenantAccessPolicyB2BSetting.applications, serializeCrossTenantAccessPolicyTargetConfiguration);
        writer.writeStringValue("@odata.type", crossTenantAccessPolicyB2BSetting.odataType);
        writer.writeObjectValue<CrossTenantAccessPolicyTargetConfiguration>("usersAndGroups", crossTenantAccessPolicyB2BSetting.usersAndGroups, serializeCrossTenantAccessPolicyTargetConfiguration);
        writer.writeAdditionalData(crossTenantAccessPolicyB2BSetting.additionalData);
}
// tslint:enable
// eslint-enable
