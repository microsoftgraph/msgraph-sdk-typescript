// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createChannelFromDiscriminatorValue, serializeChannel, type Channel } from './channel';
import { createConversationMemberFromDiscriminatorValue, serializeConversationMember, type ConversationMember } from './conversationMember';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from './group';
import { createProfilePhotoFromDiscriminatorValue, serializeProfilePhoto, type ProfilePhoto } from './profilePhoto';
import { createResourceSpecificPermissionGrantFromDiscriminatorValue, serializeResourceSpecificPermissionGrant, type ResourceSpecificPermissionGrant } from './resourceSpecificPermissionGrant';
import { createScheduleFromDiscriminatorValue, serializeSchedule, type Schedule } from './schedule';
import { createTeamFunSettingsFromDiscriminatorValue, serializeTeamFunSettings, type TeamFunSettings } from './teamFunSettings';
import { createTeamGuestSettingsFromDiscriminatorValue, serializeTeamGuestSettings, type TeamGuestSettings } from './teamGuestSettings';
import { createTeamMemberSettingsFromDiscriminatorValue, serializeTeamMemberSettings, type TeamMemberSettings } from './teamMemberSettings';
import { createTeamMessagingSettingsFromDiscriminatorValue, serializeTeamMessagingSettings, type TeamMessagingSettings } from './teamMessagingSettings';
import { createTeamsAppInstallationFromDiscriminatorValue, serializeTeamsAppInstallation, type TeamsAppInstallation } from './teamsAppInstallation';
import { createTeamsAsyncOperationFromDiscriminatorValue, serializeTeamsAsyncOperation, type TeamsAsyncOperation } from './teamsAsyncOperation';
import { TeamSpecialization } from './teamSpecialization';
import { createTeamsTemplateFromDiscriminatorValue, serializeTeamsTemplate, type TeamsTemplate } from './teamsTemplate';
import { createTeamSummaryFromDiscriminatorValue, serializeTeamSummary, type TeamSummary } from './teamSummary';
import { TeamVisibilityType } from './teamVisibilityType';
import { createTeamworkTagFromDiscriminatorValue, serializeTeamworkTag, type TeamworkTag } from './teamworkTag';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTeamFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTeam;
}
export function deserializeIntoTeam(team: Team | undefined = {} as Team) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(team),
        "allChannels": n => { team.allChannels = n.getCollectionOfObjectValues<Channel>(createChannelFromDiscriminatorValue); },
        "channels": n => { team.channels = n.getCollectionOfObjectValues<Channel>(createChannelFromDiscriminatorValue); },
        "classification": n => { team.classification = n.getStringValue(); },
        "createdDateTime": n => { team.createdDateTime = n.getDateValue(); },
        "description": n => { team.description = n.getStringValue(); },
        "displayName": n => { team.displayName = n.getStringValue(); },
        "funSettings": n => { team.funSettings = n.getObjectValue<TeamFunSettings>(createTeamFunSettingsFromDiscriminatorValue); },
        "group": n => { team.group = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "guestSettings": n => { team.guestSettings = n.getObjectValue<TeamGuestSettings>(createTeamGuestSettingsFromDiscriminatorValue); },
        "incomingChannels": n => { team.incomingChannels = n.getCollectionOfObjectValues<Channel>(createChannelFromDiscriminatorValue); },
        "installedApps": n => { team.installedApps = n.getCollectionOfObjectValues<TeamsAppInstallation>(createTeamsAppInstallationFromDiscriminatorValue); },
        "internalId": n => { team.internalId = n.getStringValue(); },
        "isArchived": n => { team.isArchived = n.getBooleanValue(); },
        "members": n => { team.members = n.getCollectionOfObjectValues<ConversationMember>(createConversationMemberFromDiscriminatorValue); },
        "memberSettings": n => { team.memberSettings = n.getObjectValue<TeamMemberSettings>(createTeamMemberSettingsFromDiscriminatorValue); },
        "messagingSettings": n => { team.messagingSettings = n.getObjectValue<TeamMessagingSettings>(createTeamMessagingSettingsFromDiscriminatorValue); },
        "operations": n => { team.operations = n.getCollectionOfObjectValues<TeamsAsyncOperation>(createTeamsAsyncOperationFromDiscriminatorValue); },
        "permissionGrants": n => { team.permissionGrants = n.getCollectionOfObjectValues<ResourceSpecificPermissionGrant>(createResourceSpecificPermissionGrantFromDiscriminatorValue); },
        "photo": n => { team.photo = n.getObjectValue<ProfilePhoto>(createProfilePhotoFromDiscriminatorValue); },
        "primaryChannel": n => { team.primaryChannel = n.getObjectValue<Channel>(createChannelFromDiscriminatorValue); },
        "schedule": n => { team.schedule = n.getObjectValue<Schedule>(createScheduleFromDiscriminatorValue); },
        "specialization": n => { team.specialization = n.getEnumValue<TeamSpecialization>(TeamSpecialization); },
        "summary": n => { team.summary = n.getObjectValue<TeamSummary>(createTeamSummaryFromDiscriminatorValue); },
        "tags": n => { team.tags = n.getCollectionOfObjectValues<TeamworkTag>(createTeamworkTagFromDiscriminatorValue); },
        "template": n => { team.template = n.getObjectValue<TeamsTemplate>(createTeamsTemplateFromDiscriminatorValue); },
        "tenantId": n => { team.tenantId = n.getStringValue(); },
        "visibility": n => { team.visibility = n.getEnumValue<TeamVisibilityType>(TeamVisibilityType); },
        "webUrl": n => { team.webUrl = n.getStringValue(); },
    }
}
export function serializeTeam(writer: SerializationWriter, team: Team | undefined = {} as Team) : void {
    serializeEntity(writer, team)
    writer.writeCollectionOfObjectValues<Channel>("allChannels", team.allChannels, serializeChannel);
    writer.writeCollectionOfObjectValues<Channel>("channels", team.channels, serializeChannel);
    writer.writeStringValue("classification", team.classification);
    writer.writeDateValue("createdDateTime", team.createdDateTime);
    writer.writeStringValue("description", team.description);
    writer.writeStringValue("displayName", team.displayName);
    writer.writeObjectValue<TeamFunSettings>("funSettings", team.funSettings, serializeTeamFunSettings);
    writer.writeObjectValue<Group>("group", team.group, serializeGroup);
    writer.writeObjectValue<TeamGuestSettings>("guestSettings", team.guestSettings, serializeTeamGuestSettings);
    writer.writeCollectionOfObjectValues<Channel>("incomingChannels", team.incomingChannels, serializeChannel);
    writer.writeCollectionOfObjectValues<TeamsAppInstallation>("installedApps", team.installedApps, serializeTeamsAppInstallation);
    writer.writeStringValue("internalId", team.internalId);
    writer.writeBooleanValue("isArchived", team.isArchived);
    writer.writeCollectionOfObjectValues<ConversationMember>("members", team.members, serializeConversationMember);
    writer.writeObjectValue<TeamMemberSettings>("memberSettings", team.memberSettings, serializeTeamMemberSettings);
    writer.writeObjectValue<TeamMessagingSettings>("messagingSettings", team.messagingSettings, serializeTeamMessagingSettings);
    writer.writeCollectionOfObjectValues<TeamsAsyncOperation>("operations", team.operations, serializeTeamsAsyncOperation);
    writer.writeCollectionOfObjectValues<ResourceSpecificPermissionGrant>("permissionGrants", team.permissionGrants, serializeResourceSpecificPermissionGrant);
    writer.writeObjectValue<ProfilePhoto>("photo", team.photo, serializeProfilePhoto);
    writer.writeObjectValue<Channel>("primaryChannel", team.primaryChannel, serializeChannel);
    writer.writeObjectValue<Schedule>("schedule", team.schedule, serializeSchedule);
    writer.writeEnumValue<TeamSpecialization>("specialization", team.specialization);
    writer.writeObjectValue<TeamSummary>("summary", team.summary, serializeTeamSummary);
    writer.writeCollectionOfObjectValues<TeamworkTag>("tags", team.tags, serializeTeamworkTag);
    writer.writeObjectValue<TeamsTemplate>("template", team.template, serializeTeamsTemplate);
    writer.writeStringValue("tenantId", team.tenantId);
    writer.writeEnumValue<TeamVisibilityType>("visibility", team.visibility);
    writer.writeStringValue("webUrl", team.webUrl);
}
export interface Team extends Entity, Parsable {
    /**
     * List of channels either hosted in or shared with the team (incoming channels).
     */
    allChannels?: Channel[];
    /**
     * The collection of channels and messages associated with the team.
     */
    channels?: Channel[];
    /**
     * An optional label. Typically describes the data or business sensitivity of the team. Must match one of a pre-configured set in the tenant's directory.
     */
    classification?: string;
    /**
     * Timestamp at which the team was created.
     */
    createdDateTime?: Date;
    /**
     * An optional description for the team. Maximum length: 1024 characters.
     */
    description?: string;
    /**
     * The name of the team.
     */
    displayName?: string;
    /**
     * Settings to configure use of Giphy, memes, and stickers in the team.
     */
    funSettings?: TeamFunSettings;
    /**
     * The group property
     */
    group?: Group;
    /**
     * Settings to configure whether guests can create, update, or delete channels in the team.
     */
    guestSettings?: TeamGuestSettings;
    /**
     * List of channels shared with the team.
     */
    incomingChannels?: Channel[];
    /**
     * The apps installed in this team.
     */
    installedApps?: TeamsAppInstallation[];
    /**
     * A unique ID for the team that has been used in a few places such as the audit log/Office 365 Management Activity API.
     */
    internalId?: string;
    /**
     * Whether this team is in read-only mode.
     */
    isArchived?: boolean;
    /**
     * Members and owners of the team.
     */
    members?: ConversationMember[];
    /**
     * Settings to configure whether members can perform certain actions, for example, create channels and add bots, in the team.
     */
    memberSettings?: TeamMemberSettings;
    /**
     * Settings to configure messaging and mentions in the team.
     */
    messagingSettings?: TeamMessagingSettings;
    /**
     * The async operations that ran or are running on this team.
     */
    operations?: TeamsAsyncOperation[];
    /**
     * A collection of permissions granted to apps to access the team.
     */
    permissionGrants?: ResourceSpecificPermissionGrant[];
    /**
     * The profile photo for the team.
     */
    photo?: ProfilePhoto;
    /**
     * The general channel for the team.
     */
    primaryChannel?: Channel;
    /**
     * The schedule of shifts for this team.
     */
    schedule?: Schedule;
    /**
     * Optional. Indicates whether the team is intended for a particular use case.  Each team specialization has access to unique behaviors and experiences targeted to its use case.
     */
    specialization?: TeamSpecialization;
    /**
     * Contains summary information about the team, including number of owners, members, and guests.
     */
    summary?: TeamSummary;
    /**
     * The tags associated with the team.
     */
    tags?: TeamworkTag[];
    /**
     * The template this team was created from. See available templates.
     */
    template?: TeamsTemplate;
    /**
     * The ID of the Microsoft Entra tenant.
     */
    tenantId?: string;
    /**
     * The visibility of the group and team. Defaults to Public.
     */
    visibility?: TeamVisibilityType;
    /**
     * A hyperlink that will go to the team in the Microsoft Teams client. This is the URL that you get when you right-click a team in the Microsoft Teams client and select Get link to team. This URL should be treated as an opaque blob, and not parsed.
     */
    webUrl?: string;
}
// tslint:enable
// eslint-enable
