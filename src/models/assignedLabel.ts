// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AssignedLabel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The display name of the label. Read-only.
     */
    displayName?: string;
    /**
     * The unique identifier of the label.
     */
    labelId?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createAssignedLabelFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAssignedLabel;
}
export function deserializeIntoAssignedLabel(assignedLabel: AssignedLabel | undefined = {} as AssignedLabel) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { assignedLabel.displayName = n.getStringValue(); },
        "labelId": n => { assignedLabel.labelId = n.getStringValue(); },
        "@odata.type": n => { assignedLabel.odataType = n.getStringValue(); },
    }
}
export function serializeAssignedLabel(writer: SerializationWriter, assignedLabel: AssignedLabel | undefined = {} as AssignedLabel) : void {
    writer.writeStringValue("displayName", assignedLabel.displayName);
    writer.writeStringValue("labelId", assignedLabel.labelId);
    writer.writeStringValue("@odata.type", assignedLabel.odataType);
    writer.writeAdditionalData(assignedLabel.additionalData);
}
// tslint:enable
// eslint-enable
