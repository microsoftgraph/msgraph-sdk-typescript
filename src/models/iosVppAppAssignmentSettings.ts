// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoMobileAppAssignmentSettings, serializeMobileAppAssignmentSettings, type MobileAppAssignmentSettings } from './mobileAppAssignmentSettings';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIosVppAppAssignmentSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIosVppAppAssignmentSettings;
}
export function deserializeIntoIosVppAppAssignmentSettings(iosVppAppAssignmentSettings: IosVppAppAssignmentSettings | undefined = {} as IosVppAppAssignmentSettings) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMobileAppAssignmentSettings(iosVppAppAssignmentSettings),
        "useDeviceLicensing": n => { iosVppAppAssignmentSettings.useDeviceLicensing = n.getBooleanValue(); },
        "vpnConfigurationId": n => { iosVppAppAssignmentSettings.vpnConfigurationId = n.getStringValue(); },
    }
}
export interface IosVppAppAssignmentSettings extends MobileAppAssignmentSettings, Parsable {
    /**
     * Whether or not to use device licensing.
     */
    useDeviceLicensing?: boolean;
    /**
     * The VPN Configuration Id to apply for this app.
     */
    vpnConfigurationId?: string;
}
export function serializeIosVppAppAssignmentSettings(writer: SerializationWriter, iosVppAppAssignmentSettings: IosVppAppAssignmentSettings | undefined = {} as IosVppAppAssignmentSettings) : void {
    serializeMobileAppAssignmentSettings(writer, iosVppAppAssignmentSettings)
    writer.writeBooleanValue("useDeviceLicensing", iosVppAppAssignmentSettings.useDeviceLicensing);
    writer.writeStringValue("vpnConfigurationId", iosVppAppAssignmentSettings.vpnConfigurationId);
}
// tslint:enable
// eslint-enable
