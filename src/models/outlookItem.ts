// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoCalendarSharingMessage } from './calendarSharingMessage';
import { deserializeIntoContact } from './contact';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { deserializeIntoEvent } from './event';
import { deserializeIntoEventMessage } from './eventMessage';
import { deserializeIntoEventMessageRequest } from './eventMessageRequest';
import { deserializeIntoEventMessageResponse } from './eventMessageResponse';
import { type CalendarSharingMessage, type Contact, type Event, type EventMessage, type EventMessageRequest, type EventMessageResponse, type Message, type Post } from './index';
import { deserializeIntoMessage } from './message';
import { deserializeIntoPost } from './post';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOutlookItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.calendarSharingMessage":
                    return deserializeIntoCalendarSharingMessage;
                case "#microsoft.graph.contact":
                    return deserializeIntoContact;
                case "#microsoft.graph.event":
                    return deserializeIntoEvent;
                case "#microsoft.graph.eventMessage":
                    return deserializeIntoEventMessage;
                case "#microsoft.graph.eventMessageRequest":
                    return deserializeIntoEventMessageRequest;
                case "#microsoft.graph.eventMessageResponse":
                    return deserializeIntoEventMessageResponse;
                case "#microsoft.graph.message":
                    return deserializeIntoMessage;
                case "#microsoft.graph.post":
                    return deserializeIntoPost;
            }
        }
    }
    return deserializeIntoOutlookItem;
}
export function deserializeIntoOutlookItem(outlookItem: OutlookItem | undefined = {} as OutlookItem) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(outlookItem),
        "categories": n => { outlookItem.categories = n.getCollectionOfPrimitiveValues<string>(); },
        "changeKey": n => { outlookItem.changeKey = n.getStringValue(); },
        "createdDateTime": n => { outlookItem.createdDateTime = n.getDateValue(); },
        "lastModifiedDateTime": n => { outlookItem.lastModifiedDateTime = n.getDateValue(); },
    }
}
export interface OutlookItem extends Entity, Parsable {
    /**
     * The categories associated with the item
     */
    categories?: string[];
    /**
     * Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
     */
    changeKey?: string;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    createdDateTime?: Date;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    lastModifiedDateTime?: Date;
}
export function serializeOutlookItem(writer: SerializationWriter, outlookItem: OutlookItem | undefined = {} as OutlookItem) : void {
        serializeEntity(writer, outlookItem)
        writer.writeCollectionOfPrimitiveValues<string>("categories", outlookItem.categories);
        writer.writeStringValue("changeKey", outlookItem.changeKey);
        writer.writeDateValue("createdDateTime", outlookItem.createdDateTime);
        writer.writeDateValue("lastModifiedDateTime", outlookItem.lastModifiedDateTime);
}
// tslint:enable
// eslint-enable
