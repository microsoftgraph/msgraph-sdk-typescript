// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGroupLifecyclePolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGroupLifecyclePolicy;
}
export function deserializeIntoGroupLifecyclePolicy(groupLifecyclePolicy: GroupLifecyclePolicy | undefined = {} as GroupLifecyclePolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(groupLifecyclePolicy),
        "alternateNotificationEmails": n => { groupLifecyclePolicy.alternateNotificationEmails = n.getStringValue(); },
        "groupLifetimeInDays": n => { groupLifecyclePolicy.groupLifetimeInDays = n.getNumberValue(); },
        "managedGroupTypes": n => { groupLifecyclePolicy.managedGroupTypes = n.getStringValue(); },
    }
}
export interface GroupLifecyclePolicy extends Entity, Parsable {
    /**
     * List of email address to send notifications for groups without owners. Multiple email address can be defined by separating email address with a semicolon.
     */
    alternateNotificationEmails?: string;
    /**
     * Number of days before a group expires and needs to be renewed. Once renewed, the group expiration is extended by the number of days defined.
     */
    groupLifetimeInDays?: number;
    /**
     * The group type for which the expiration policy applies. Possible values are All, Selected or None.
     */
    managedGroupTypes?: string;
}
export function serializeGroupLifecyclePolicy(writer: SerializationWriter, groupLifecyclePolicy: GroupLifecyclePolicy | undefined = {} as GroupLifecyclePolicy) : void {
    serializeEntity(writer, groupLifecyclePolicy)
    writer.writeStringValue("alternateNotificationEmails", groupLifecyclePolicy.alternateNotificationEmails);
    writer.writeNumberValue("groupLifetimeInDays", groupLifecyclePolicy.groupLifetimeInDays);
    writer.writeStringValue("managedGroupTypes", groupLifecyclePolicy.managedGroupTypes);
}
// tslint:enable
// eslint-enable
