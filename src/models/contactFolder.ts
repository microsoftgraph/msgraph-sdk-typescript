// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createContactFromDiscriminatorValue, serializeContact, type Contact } from './contact';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createMultiValueLegacyExtendedPropertyFromDiscriminatorValue, serializeMultiValueLegacyExtendedProperty, type MultiValueLegacyExtendedProperty } from './multiValueLegacyExtendedProperty';
import { createSingleValueLegacyExtendedPropertyFromDiscriminatorValue, serializeSingleValueLegacyExtendedProperty, type SingleValueLegacyExtendedProperty } from './singleValueLegacyExtendedProperty';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ContactFolder extends Entity, Parsable {
    /**
     * The collection of child folders in the folder. Navigation property. Read-only. Nullable.
     */
    childFolders?: ContactFolder[];
    /**
     * The contacts in the folder. Navigation property. Read-only. Nullable.
     */
    contacts?: Contact[];
    /**
     * The folder's display name.
     */
    displayName?: string;
    /**
     * The collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.
     */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[];
    /**
     * The ID of the folder's parent folder.
     */
    parentFolderId?: string;
    /**
     * The collection of single-value extended properties defined for the contactFolder. Read-only. Nullable.
     */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[];
}
export function createContactFolderFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoContactFolder;
}
export function deserializeIntoContactFolder(contactFolder: ContactFolder | undefined = {} as ContactFolder) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(contactFolder),
        "childFolders": n => { contactFolder.childFolders = n.getCollectionOfObjectValues<ContactFolder>(createContactFolderFromDiscriminatorValue); },
        "contacts": n => { contactFolder.contacts = n.getCollectionOfObjectValues<Contact>(createContactFromDiscriminatorValue); },
        "displayName": n => { contactFolder.displayName = n.getStringValue(); },
        "multiValueExtendedProperties": n => { contactFolder.multiValueExtendedProperties = n.getCollectionOfObjectValues<MultiValueLegacyExtendedProperty>(createMultiValueLegacyExtendedPropertyFromDiscriminatorValue); },
        "parentFolderId": n => { contactFolder.parentFolderId = n.getStringValue(); },
        "singleValueExtendedProperties": n => { contactFolder.singleValueExtendedProperties = n.getCollectionOfObjectValues<SingleValueLegacyExtendedProperty>(createSingleValueLegacyExtendedPropertyFromDiscriminatorValue); },
    }
}
export function serializeContactFolder(writer: SerializationWriter, contactFolder: ContactFolder | undefined = {} as ContactFolder) : void {
    serializeEntity(writer, contactFolder)
    writer.writeCollectionOfObjectValues<ContactFolder>("childFolders", contactFolder.childFolders, serializeContactFolder);
    writer.writeCollectionOfObjectValues<Contact>("contacts", contactFolder.contacts, serializeContact);
    writer.writeStringValue("displayName", contactFolder.displayName);
    writer.writeCollectionOfObjectValues<MultiValueLegacyExtendedProperty>("multiValueExtendedProperties", contactFolder.multiValueExtendedProperties, serializeMultiValueLegacyExtendedProperty);
    writer.writeStringValue("parentFolderId", contactFolder.parentFolderId);
    writer.writeCollectionOfObjectValues<SingleValueLegacyExtendedProperty>("singleValueExtendedProperties", contactFolder.singleValueExtendedProperties, serializeSingleValueLegacyExtendedProperty);
}
// tslint:enable
// eslint-enable
