// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAuthenticationMethodModeDetailFromDiscriminatorValue, serializeAuthenticationMethodModeDetail, type AuthenticationMethodModeDetail } from './authenticationMethodModeDetail';
import { AuthenticationMethodModes } from './authenticationMethodModes';
import { createAuthenticationStrengthPolicyFromDiscriminatorValue, serializeAuthenticationStrengthPolicy, type AuthenticationStrengthPolicy } from './authenticationStrengthPolicy';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthenticationStrengthRoot extends Entity, Parsable {
    /**
     * Names and descriptions of all valid authentication method modes in the system.
     */
    authenticationMethodModes?: AuthenticationMethodModeDetail[];
    /**
     * The combinations property
     */
    combinations?: AuthenticationMethodModes[];
    /**
     * A collection of authentication strength policies that exist for this tenant, including both built-in and custom policies.
     */
    policies?: AuthenticationStrengthPolicy[];
}
export function createAuthenticationStrengthRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuthenticationStrengthRoot;
}
export function deserializeIntoAuthenticationStrengthRoot(authenticationStrengthRoot: AuthenticationStrengthRoot | undefined = {} as AuthenticationStrengthRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(authenticationStrengthRoot),
        "authenticationMethodModes": n => { authenticationStrengthRoot.authenticationMethodModes = n.getCollectionOfObjectValues<AuthenticationMethodModeDetail>(createAuthenticationMethodModeDetailFromDiscriminatorValue); },
        "combinations": n => { authenticationStrengthRoot.combinations = n.getCollectionOfEnumValues<AuthenticationMethodModes>(AuthenticationMethodModes); },
        "policies": n => { authenticationStrengthRoot.policies = n.getCollectionOfObjectValues<AuthenticationStrengthPolicy>(createAuthenticationStrengthPolicyFromDiscriminatorValue); },
    }
}
export function serializeAuthenticationStrengthRoot(writer: SerializationWriter, authenticationStrengthRoot: AuthenticationStrengthRoot | undefined = {} as AuthenticationStrengthRoot) : void {
        serializeEntity(writer, authenticationStrengthRoot)
        writer.writeCollectionOfObjectValues<AuthenticationMethodModeDetail>("authenticationMethodModes", authenticationStrengthRoot.authenticationMethodModes, serializeAuthenticationMethodModeDetail);
        if(authenticationStrengthRoot.combinations)
        writer.writeEnumValue<AuthenticationMethodModes>("combinations", ...authenticationStrengthRoot.combinations);
        writer.writeCollectionOfObjectValues<AuthenticationStrengthPolicy>("policies", authenticationStrengthRoot.policies, serializeAuthenticationStrengthPolicy);
}
// tslint:enable
// eslint-enable
