// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createBrowserSharedCookieHistoryFromDiscriminatorValue, serializeBrowserSharedCookieHistory, type BrowserSharedCookieHistory } from './browserSharedCookieHistory';
import { BrowserSharedCookieSourceEnvironment } from './browserSharedCookieSourceEnvironment';
import { BrowserSharedCookieStatus } from './browserSharedCookieStatus';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BrowserSharedCookie extends Entity, Parsable {
    /**
     * The comment for the shared cookie.
     */
    comment?: string;
    /**
     * The date and time when the shared cookie was created.
     */
    createdDateTime?: Date;
    /**
     * The date and time when the shared cookie was deleted.
     */
    deletedDateTime?: Date;
    /**
     * The name of the cookie.
     */
    displayName?: string;
    /**
     * The history of modifications applied to the cookie.
     */
    history?: BrowserSharedCookieHistory[];
    /**
     * Controls whether a cookie is a host-only or domain cookie.
     */
    hostOnly?: boolean;
    /**
     * The URL of the cookie.
     */
    hostOrDomain?: string;
    /**
     * The user who last modified the cookie.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The date and time when the cookie was last modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * The path of the cookie.
     */
    path?: string;
    /**
     * The sourceEnvironment property
     */
    sourceEnvironment?: BrowserSharedCookieSourceEnvironment;
    /**
     * The status property
     */
    status?: BrowserSharedCookieStatus;
}
export function createBrowserSharedCookieFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBrowserSharedCookie;
}
export function deserializeIntoBrowserSharedCookie(browserSharedCookie: BrowserSharedCookie | undefined = {} as BrowserSharedCookie) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(browserSharedCookie),
        "comment": n => { browserSharedCookie.comment = n.getStringValue(); },
        "createdDateTime": n => { browserSharedCookie.createdDateTime = n.getDateValue(); },
        "deletedDateTime": n => { browserSharedCookie.deletedDateTime = n.getDateValue(); },
        "displayName": n => { browserSharedCookie.displayName = n.getStringValue(); },
        "history": n => { browserSharedCookie.history = n.getCollectionOfObjectValues<BrowserSharedCookieHistory>(createBrowserSharedCookieHistoryFromDiscriminatorValue); },
        "hostOnly": n => { browserSharedCookie.hostOnly = n.getBooleanValue(); },
        "hostOrDomain": n => { browserSharedCookie.hostOrDomain = n.getStringValue(); },
        "lastModifiedBy": n => { browserSharedCookie.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { browserSharedCookie.lastModifiedDateTime = n.getDateValue(); },
        "path": n => { browserSharedCookie.path = n.getStringValue(); },
        "sourceEnvironment": n => { browserSharedCookie.sourceEnvironment = n.getEnumValue<BrowserSharedCookieSourceEnvironment>(BrowserSharedCookieSourceEnvironment); },
        "status": n => { browserSharedCookie.status = n.getEnumValue<BrowserSharedCookieStatus>(BrowserSharedCookieStatus); },
    }
}
export function serializeBrowserSharedCookie(writer: SerializationWriter, browserSharedCookie: BrowserSharedCookie | undefined = {} as BrowserSharedCookie) : void {
        serializeEntity(writer, browserSharedCookie)
        writer.writeStringValue("comment", browserSharedCookie.comment);
        writer.writeDateValue("createdDateTime", browserSharedCookie.createdDateTime);
        writer.writeDateValue("deletedDateTime", browserSharedCookie.deletedDateTime);
        writer.writeStringValue("displayName", browserSharedCookie.displayName);
        writer.writeCollectionOfObjectValues<BrowserSharedCookieHistory>("history", browserSharedCookie.history, serializeBrowserSharedCookieHistory);
        writer.writeBooleanValue("hostOnly", browserSharedCookie.hostOnly);
        writer.writeStringValue("hostOrDomain", browserSharedCookie.hostOrDomain);
        writer.writeObjectValue<IdentitySet>("lastModifiedBy", browserSharedCookie.lastModifiedBy, serializeIdentitySet);
        writer.writeDateValue("lastModifiedDateTime", browserSharedCookie.lastModifiedDateTime);
        writer.writeStringValue("path", browserSharedCookie.path);
        writer.writeEnumValue<BrowserSharedCookieSourceEnvironment>("sourceEnvironment", browserSharedCookie.sourceEnvironment);
        writer.writeEnumValue<BrowserSharedCookieStatus>("status", browserSharedCookie.status);
}
// tslint:enable
// eslint-enable
