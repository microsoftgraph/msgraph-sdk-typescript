// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoConditionalAccessExternalTenants, serializeConditionalAccessExternalTenants, type ConditionalAccessExternalTenants } from './conditionalAccessExternalTenants';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessEnumeratedExternalTenants extends ConditionalAccessExternalTenants, Parsable {
    /**
     * A collection of tenant IDs that define the scope of a policy targeting conditional access for guests and external users.
     */
    members?: string[];
}
export function createConditionalAccessEnumeratedExternalTenantsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessEnumeratedExternalTenants;
}
export function deserializeIntoConditionalAccessEnumeratedExternalTenants(conditionalAccessEnumeratedExternalTenants: ConditionalAccessEnumeratedExternalTenants | undefined = {} as ConditionalAccessEnumeratedExternalTenants) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoConditionalAccessExternalTenants(conditionalAccessEnumeratedExternalTenants),
        "members": n => { conditionalAccessEnumeratedExternalTenants.members = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export function serializeConditionalAccessEnumeratedExternalTenants(writer: SerializationWriter, conditionalAccessEnumeratedExternalTenants: ConditionalAccessEnumeratedExternalTenants | undefined = {} as ConditionalAccessEnumeratedExternalTenants) : void {
    serializeConditionalAccessExternalTenants(writer, conditionalAccessEnumeratedExternalTenants)
    writer.writeCollectionOfPrimitiveValues<string>("members", conditionalAccessEnumeratedExternalTenants.members);
}
// tslint:enable
// eslint-enable
