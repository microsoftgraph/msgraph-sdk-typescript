// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createInitiatorFromDiscriminatorValue, serializeInitiator, type Initiator } from './initiator';
import { createModifiedPropertyFromDiscriminatorValue, serializeModifiedProperty, type ModifiedProperty } from './modifiedProperty';
import { createProvisionedIdentityFromDiscriminatorValue, serializeProvisionedIdentity, type ProvisionedIdentity } from './provisionedIdentity';
import { ProvisioningAction } from './provisioningAction';
import { createProvisioningServicePrincipalFromDiscriminatorValue, serializeProvisioningServicePrincipal, type ProvisioningServicePrincipal } from './provisioningServicePrincipal';
import { createProvisioningStatusInfoFromDiscriminatorValue, serializeProvisioningStatusInfo, type ProvisioningStatusInfo } from './provisioningStatusInfo';
import { createProvisioningStepFromDiscriminatorValue, serializeProvisioningStep, type ProvisioningStep } from './provisioningStep';
import { createProvisioningSystemFromDiscriminatorValue, serializeProvisioningSystem, type ProvisioningSystem } from './provisioningSystem';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createProvisioningObjectSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoProvisioningObjectSummary;
}
export function deserializeIntoProvisioningObjectSummary(provisioningObjectSummary: ProvisioningObjectSummary | undefined = {} as ProvisioningObjectSummary) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(provisioningObjectSummary),
        "activityDateTime": n => { provisioningObjectSummary.activityDateTime = n.getDateValue(); },
        "changeId": n => { provisioningObjectSummary.changeId = n.getStringValue(); },
        "cycleId": n => { provisioningObjectSummary.cycleId = n.getStringValue(); },
        "durationInMilliseconds": n => { provisioningObjectSummary.durationInMilliseconds = n.getNumberValue(); },
        "initiatedBy": n => { provisioningObjectSummary.initiatedBy = n.getObjectValue<Initiator>(createInitiatorFromDiscriminatorValue); },
        "jobId": n => { provisioningObjectSummary.jobId = n.getStringValue(); },
        "modifiedProperties": n => { provisioningObjectSummary.modifiedProperties = n.getCollectionOfObjectValues<ModifiedProperty>(createModifiedPropertyFromDiscriminatorValue); },
        "provisioningAction": n => { provisioningObjectSummary.provisioningAction = n.getEnumValue<ProvisioningAction>(ProvisioningAction); },
        "provisioningStatusInfo": n => { provisioningObjectSummary.provisioningStatusInfo = n.getObjectValue<ProvisioningStatusInfo>(createProvisioningStatusInfoFromDiscriminatorValue); },
        "provisioningSteps": n => { provisioningObjectSummary.provisioningSteps = n.getCollectionOfObjectValues<ProvisioningStep>(createProvisioningStepFromDiscriminatorValue); },
        "servicePrincipal": n => { provisioningObjectSummary.servicePrincipal = n.getObjectValue<ProvisioningServicePrincipal>(createProvisioningServicePrincipalFromDiscriminatorValue); },
        "sourceIdentity": n => { provisioningObjectSummary.sourceIdentity = n.getObjectValue<ProvisionedIdentity>(createProvisionedIdentityFromDiscriminatorValue); },
        "sourceSystem": n => { provisioningObjectSummary.sourceSystem = n.getObjectValue<ProvisioningSystem>(createProvisioningSystemFromDiscriminatorValue); },
        "targetIdentity": n => { provisioningObjectSummary.targetIdentity = n.getObjectValue<ProvisionedIdentity>(createProvisionedIdentityFromDiscriminatorValue); },
        "targetSystem": n => { provisioningObjectSummary.targetSystem = n.getObjectValue<ProvisioningSystem>(createProvisioningSystemFromDiscriminatorValue); },
        "tenantId": n => { provisioningObjectSummary.tenantId = n.getStringValue(); },
    }
}
export interface ProvisioningObjectSummary extends Entity, Parsable {
    /**
     * Represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.  SUpports $filter (eq, gt, lt) and orderby.
     */
    activityDateTime?: Date;
    /**
     * Unique ID of this change in this cycle. Supports $filter (eq, contains).
     */
    changeId?: string;
    /**
     * Unique ID per job iteration. Supports $filter (eq, contains).
     */
    cycleId?: string;
    /**
     * Indicates how long this provisioning action took to finish. Measured in milliseconds.
     */
    durationInMilliseconds?: number;
    /**
     * Details of who initiated this provisioning. Supports $filter (eq, contains).
     */
    initiatedBy?: Initiator;
    /**
     * The unique ID for the whole provisioning job. Supports $filter (eq, contains).
     */
    jobId?: string;
    /**
     * Details of each property that was modified in this provisioning action on this object.
     */
    modifiedProperties?: ModifiedProperty[];
    /**
     * Indicates the activity name or the operation name. Possible values are: create, update, delete, stageddelete, disable, other and unknownFutureValue. For a list of activities logged, refer to Microsoft Entra activity list. Supports $filter (eq, contains).
     */
    provisioningAction?: ProvisioningAction;
    /**
     * Details of provisioning status.
     */
    provisioningStatusInfo?: ProvisioningStatusInfo;
    /**
     * Details of each step in provisioning.
     */
    provisioningSteps?: ProvisioningStep[];
    /**
     * Represents the service principal used for provisioning. Supports $filter (eq) for id and name.
     */
    servicePrincipal?: ProvisioningServicePrincipal;
    /**
     * Details of source object being provisioned. Supports $filter (eq, contains) for identityType, id, and displayName.
     */
    sourceIdentity?: ProvisionedIdentity;
    /**
     * Details of source system of the object being provisioned. Supports $filter (eq, contains) for displayName.
     */
    sourceSystem?: ProvisioningSystem;
    /**
     * Details of target object being provisioned. Supports $filter (eq, contains) for identityType, id, and displayName.
     */
    targetIdentity?: ProvisionedIdentity;
    /**
     * Details of target system of the object being provisioned. Supports $filter (eq, contains) for displayName.
     */
    targetSystem?: ProvisioningSystem;
    /**
     * Unique Microsoft Entra tenant ID. Supports $filter (eq, contains).
     */
    tenantId?: string;
}
export function serializeProvisioningObjectSummary(writer: SerializationWriter, provisioningObjectSummary: ProvisioningObjectSummary | undefined = {} as ProvisioningObjectSummary) : void {
        serializeEntity(writer, provisioningObjectSummary)
        writer.writeDateValue("activityDateTime", provisioningObjectSummary.activityDateTime);
        writer.writeStringValue("changeId", provisioningObjectSummary.changeId);
        writer.writeStringValue("cycleId", provisioningObjectSummary.cycleId);
        writer.writeNumberValue("durationInMilliseconds", provisioningObjectSummary.durationInMilliseconds);
        writer.writeObjectValue<Initiator>("initiatedBy", provisioningObjectSummary.initiatedBy, );
        writer.writeStringValue("jobId", provisioningObjectSummary.jobId);
        writer.writeCollectionOfObjectValues<ModifiedProperty>("modifiedProperties", provisioningObjectSummary.modifiedProperties, );
        writer.writeEnumValue<ProvisioningAction>("provisioningAction", provisioningObjectSummary.provisioningAction);
        writer.writeObjectValue<ProvisioningStatusInfo>("provisioningStatusInfo", provisioningObjectSummary.provisioningStatusInfo, );
        writer.writeCollectionOfObjectValues<ProvisioningStep>("provisioningSteps", provisioningObjectSummary.provisioningSteps, );
        writer.writeObjectValue<ProvisioningServicePrincipal>("servicePrincipal", provisioningObjectSummary.servicePrincipal, );
        writer.writeObjectValue<ProvisionedIdentity>("sourceIdentity", provisioningObjectSummary.sourceIdentity, );
        writer.writeObjectValue<ProvisioningSystem>("sourceSystem", provisioningObjectSummary.sourceSystem, );
        writer.writeObjectValue<ProvisionedIdentity>("targetIdentity", provisioningObjectSummary.targetIdentity, );
        writer.writeObjectValue<ProvisioningSystem>("targetSystem", provisioningObjectSummary.targetSystem, );
        writer.writeStringValue("tenantId", provisioningObjectSummary.tenantId);
}
// tslint:enable
// eslint-enable
