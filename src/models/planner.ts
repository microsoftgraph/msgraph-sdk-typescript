// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createPlannerBucketFromDiscriminatorValue, serializePlannerBucket, type PlannerBucket } from './plannerBucket';
import { createPlannerPlanFromDiscriminatorValue, serializePlannerPlan, type PlannerPlan } from './plannerPlan';
import { createPlannerTaskFromDiscriminatorValue, serializePlannerTask, type PlannerTask } from './plannerTask';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPlannerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPlanner;
}
export function deserializeIntoPlanner(planner: Planner | undefined = {} as Planner) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(planner),
        "buckets": n => { planner.buckets = n.getCollectionOfObjectValues<PlannerBucket>(createPlannerBucketFromDiscriminatorValue); },
        "plans": n => { planner.plans = n.getCollectionOfObjectValues<PlannerPlan>(createPlannerPlanFromDiscriminatorValue); },
        "tasks": n => { planner.tasks = n.getCollectionOfObjectValues<PlannerTask>(createPlannerTaskFromDiscriminatorValue); },
    }
}
export interface Planner extends Entity, Parsable {
    /**
     * Read-only. Nullable. Returns a collection of the specified buckets
     */
    buckets?: PlannerBucket[];
    /**
     * Read-only. Nullable. Returns a collection of the specified plans
     */
    plans?: PlannerPlan[];
    /**
     * Read-only. Nullable. Returns a collection of the specified tasks
     */
    tasks?: PlannerTask[];
}
export function serializePlanner(writer: SerializationWriter, planner: Planner | undefined = {} as Planner) : void {
        serializeEntity(writer, planner)
        writer.writeCollectionOfObjectValues<PlannerBucket>("buckets", planner.buckets, );
        writer.writeCollectionOfObjectValues<PlannerPlan>("plans", planner.plans, );
        writer.writeCollectionOfObjectValues<PlannerTask>("tasks", planner.tasks, );
}
// tslint:enable
// eslint-enable
