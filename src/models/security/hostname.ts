// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoHost, serializeHost, type Host } from './host';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createHostnameFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoHostname;
}
export function deserializeIntoHostname(hostname: Hostname | undefined = {} as Hostname) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoHost(hostname),
        "registrant": n => { hostname.registrant = n.getStringValue(); },
        "registrar": n => { hostname.registrar = n.getStringValue(); },
    }
}
export interface Hostname extends Host, Parsable {
    /**
     * The company or individual who registered this hostname, from WHOIS data.
     */
    registrant?: string;
    /**
     * The registrar for this hostname, from WHOIS data.
     */
    registrar?: string;
}
export function serializeHostname(writer: SerializationWriter, hostname: Hostname | undefined = {} as Hostname) : void {
        serializeHost(writer, hostname)
        writer.writeStringValue("registrant", hostname.registrant);
        writer.writeStringValue("registrar", hostname.registrar);
}
// tslint:enable
// eslint-enable
