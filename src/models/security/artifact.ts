// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { deserializeIntoHost } from './host';
import { deserializeIntoHostComponent } from './hostComponent';
import { deserializeIntoHostCookie } from './hostCookie';
import { deserializeIntoHostname } from './hostname';
import { deserializeIntoHostSslCertificate } from './hostSslCertificate';
import { deserializeIntoHostTracker } from './hostTracker';
import { type Host, type HostComponent, type HostCookie, type Hostname, type HostSslCertificate, type HostTracker, type IpAddress, type PassiveDnsRecord, type SslCertificate, type UnclassifiedArtifact } from './index';
import { deserializeIntoIpAddress } from './ipAddress';
import { deserializeIntoPassiveDnsRecord } from './passiveDnsRecord';
import { deserializeIntoSslCertificate } from './sslCertificate';
import { deserializeIntoUnclassifiedArtifact } from './unclassifiedArtifact';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Artifact extends Entity, Parsable {
}
export function createArtifactFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.host":
                    return deserializeIntoHost;
                case "#microsoft.graph.security.hostComponent":
                    return deserializeIntoHostComponent;
                case "#microsoft.graph.security.hostCookie":
                    return deserializeIntoHostCookie;
                case "#microsoft.graph.security.hostname":
                    return deserializeIntoHostname;
                case "#microsoft.graph.security.hostSslCertificate":
                    return deserializeIntoHostSslCertificate;
                case "#microsoft.graph.security.hostTracker":
                    return deserializeIntoHostTracker;
                case "#microsoft.graph.security.ipAddress":
                    return deserializeIntoIpAddress;
                case "#microsoft.graph.security.passiveDnsRecord":
                    return deserializeIntoPassiveDnsRecord;
                case "#microsoft.graph.security.sslCertificate":
                    return deserializeIntoSslCertificate;
                case "#microsoft.graph.security.unclassifiedArtifact":
                    return deserializeIntoUnclassifiedArtifact;
            }
        }
    }
    return deserializeIntoArtifact;
}
export function deserializeIntoArtifact(artifact: Artifact | undefined = {} as Artifact) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(artifact),
    }
}
export function serializeArtifact(writer: SerializationWriter, artifact: Artifact | undefined = {} as Artifact) : void {
        serializeEntity(writer, artifact)
}
// tslint:enable
// eslint-enable
