// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPublicErrorFromDiscriminatorValue, serializePublicError, type PublicError } from '../publicError';
import { EventStatusType } from './eventStatusType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRetentionEventStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRetentionEventStatus;
}
export function deserializeIntoRetentionEventStatus(retentionEventStatus: RetentionEventStatus | undefined = {} as RetentionEventStatus) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { retentionEventStatus.errorEscaped = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
        "@odata.type": n => { retentionEventStatus.odataType = n.getStringValue(); },
        "status": n => { retentionEventStatus.status = n.getEnumValue<EventStatusType>(EventStatusType); },
    }
}
export interface RetentionEventStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error if the status isn't successful.
     */
    errorEscaped?: PublicError;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The status of the distribution. The possible values are: pending, error, success, notAvaliable.
     */
    status?: EventStatusType;
}
export function serializeRetentionEventStatus(writer: SerializationWriter, retentionEventStatus: RetentionEventStatus | undefined = {} as RetentionEventStatus) : void {
    writer.writeObjectValue<PublicError>("error", retentionEventStatus.errorEscaped, serializePublicError);
    writer.writeStringValue("@odata.type", retentionEventStatus.odataType);
    writer.writeEnumValue<EventStatusType>("status", retentionEventStatus.status);
    writer.writeAdditionalData(retentionEventStatus.additionalData);
}
// tslint:enable
// eslint-enable
