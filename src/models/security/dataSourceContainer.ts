// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { DataSourceContainerStatus } from './dataSourceContainerStatus';
import { DataSourceHoldStatus } from './dataSourceHoldStatus';
import { deserializeIntoEdiscoveryCustodian } from './ediscoveryCustodian';
import { deserializeIntoEdiscoveryNoncustodialDataSource } from './ediscoveryNoncustodialDataSource';
import { type EdiscoveryCustodian, type EdiscoveryNoncustodialDataSource } from './index';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDataSourceContainerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.ediscoveryCustodian":
                    return deserializeIntoEdiscoveryCustodian;
                case "#microsoft.graph.security.ediscoveryNoncustodialDataSource":
                    return deserializeIntoEdiscoveryNoncustodialDataSource;
            }
        }
    }
    return deserializeIntoDataSourceContainer;
}
export interface DataSourceContainer extends Entity, Parsable {
    /**
     * Created date and time of the dataSourceContainer entity.
     */
    createdDateTime?: Date;
    /**
     * Display name of the dataSourceContainer entity.
     */
    displayName?: string;
    /**
     * The hold status of the dataSourceContainer. The possible values are: notApplied, applied, applying, removing, partial
     */
    holdStatus?: DataSourceHoldStatus;
    /**
     * Last modified date and time of the dataSourceContainer.
     */
    lastModifiedDateTime?: Date;
    /**
     * Date and time that the dataSourceContainer was released from the case.
     */
    releasedDateTime?: Date;
    /**
     * Latest status of the dataSourceContainer. Possible values are: Active, Released.
     */
    status?: DataSourceContainerStatus;
}
export function deserializeIntoDataSourceContainer(dataSourceContainer: DataSourceContainer | undefined = {} as DataSourceContainer) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(dataSourceContainer),
        "createdDateTime": n => { dataSourceContainer.createdDateTime = n.getDateValue(); },
        "displayName": n => { dataSourceContainer.displayName = n.getStringValue(); },
        "holdStatus": n => { dataSourceContainer.holdStatus = n.getEnumValue<DataSourceHoldStatus>(DataSourceHoldStatus); },
        "lastModifiedDateTime": n => { dataSourceContainer.lastModifiedDateTime = n.getDateValue(); },
        "releasedDateTime": n => { dataSourceContainer.releasedDateTime = n.getDateValue(); },
        "status": n => { dataSourceContainer.status = n.getEnumValue<DataSourceContainerStatus>(DataSourceContainerStatus); },
    }
}
export function serializeDataSourceContainer(writer: SerializationWriter, dataSourceContainer: DataSourceContainer | undefined = {} as DataSourceContainer) : void {
        serializeEntity(writer, dataSourceContainer)
        writer.writeDateValue("createdDateTime", dataSourceContainer.createdDateTime);
        writer.writeStringValue("displayName", dataSourceContainer.displayName);
        writer.writeEnumValue<DataSourceHoldStatus>("holdStatus", dataSourceContainer.holdStatus);
        writer.writeDateValue("lastModifiedDateTime", dataSourceContainer.lastModifiedDateTime);
        writer.writeDateValue("releasedDateTime", dataSourceContainer.releasedDateTime);
        writer.writeEnumValue<DataSourceContainerStatus>("status", dataSourceContainer.status);
}
// tslint:enable
// eslint-enable
