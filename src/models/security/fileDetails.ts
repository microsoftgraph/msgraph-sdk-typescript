// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFileDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFileDetails;
}
export function deserializeIntoFileDetails(fileDetails: FileDetails | undefined = {} as FileDetails) : Record<string, (node: ParseNode) => void> {
    return {
        "fileName": n => { fileDetails.fileName = n.getStringValue(); },
        "filePath": n => { fileDetails.filePath = n.getStringValue(); },
        "filePublisher": n => { fileDetails.filePublisher = n.getStringValue(); },
        "fileSize": n => { fileDetails.fileSize = n.getNumberValue(); },
        "issuer": n => { fileDetails.issuer = n.getStringValue(); },
        "@odata.type": n => { fileDetails.odataType = n.getStringValue(); },
        "sha1": n => { fileDetails.sha1 = n.getStringValue(); },
        "sha256": n => { fileDetails.sha256 = n.getStringValue(); },
        "signer": n => { fileDetails.signer = n.getStringValue(); },
    }
}
export interface FileDetails extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name of the file.
     */
    fileName?: string;
    /**
     * The file path (location) of the file instance.
     */
    filePath?: string;
    /**
     * The publisher of the file.
     */
    filePublisher?: string;
    /**
     * The size of the file in bytes.
     */
    fileSize?: number;
    /**
     * The certificate authority (CA) that issued the certificate.
     */
    issuer?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The Sha1 cryptographic hash of the file content.
     */
    sha1?: string;
    /**
     * The Sha256 cryptographic hash of the file content.
     */
    sha256?: string;
    /**
     * The signer of the signed file.
     */
    signer?: string;
}
export function serializeFileDetails(writer: SerializationWriter, fileDetails: FileDetails | undefined = {} as FileDetails) : void {
        writer.writeStringValue("fileName", fileDetails.fileName);
        writer.writeStringValue("filePath", fileDetails.filePath);
        writer.writeStringValue("filePublisher", fileDetails.filePublisher);
        writer.writeNumberValue("fileSize", fileDetails.fileSize);
        writer.writeStringValue("issuer", fileDetails.issuer);
        writer.writeStringValue("@odata.type", fileDetails.odataType);
        writer.writeStringValue("sha1", fileDetails.sha1);
        writer.writeStringValue("sha256", fileDetails.sha256);
        writer.writeStringValue("signer", fileDetails.signer);
        writer.writeAdditionalData(fileDetails.additionalData);
}
// tslint:enable
// eslint-enable
