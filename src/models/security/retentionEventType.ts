// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from '../identitySet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRetentionEventTypeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRetentionEventType;
}
export function deserializeIntoRetentionEventType(retentionEventType: RetentionEventType | undefined = {} as RetentionEventType) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(retentionEventType),
        "createdBy": n => { retentionEventType.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { retentionEventType.createdDateTime = n.getDateValue(); },
        "description": n => { retentionEventType.description = n.getStringValue(); },
        "displayName": n => { retentionEventType.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { retentionEventType.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { retentionEventType.lastModifiedDateTime = n.getDateValue(); },
    }
}
export interface RetentionEventType extends Entity, Parsable {
    /**
     * The user who created the retentionEventType.
     */
    createdBy?: IdentitySet;
    /**
     * The date time when the retentionEventType was created.
     */
    createdDateTime?: Date;
    /**
     * Optional information about the event type.
     */
    description?: string;
    /**
     * Name of the event type.
     */
    displayName?: string;
    /**
     * The user who last modified the retentionEventType.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The latest date time when the retentionEventType was modified.
     */
    lastModifiedDateTime?: Date;
}
export function serializeRetentionEventType(writer: SerializationWriter, retentionEventType: RetentionEventType | undefined = {} as RetentionEventType) : void {
    serializeEntity(writer, retentionEventType)
    writer.writeObjectValue<IdentitySet>("createdBy", retentionEventType.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", retentionEventType.createdDateTime);
    writer.writeStringValue("description", retentionEventType.description);
    writer.writeStringValue("displayName", retentionEventType.displayName);
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", retentionEventType.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", retentionEventType.lastModifiedDateTime);
}
// tslint:enable
// eslint-enable
