// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { VulnerabilitySeverity } from './vulnerabilitySeverity';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCvssSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCvssSummary;
}
export interface CvssSummary extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The CVSS score about this vulnerability.
     */
    score?: number;
    /**
     * The CVSS severity rating for this vulnerability. The possible values are: none, low, medium, high, critical, unknownFutureValue.
     */
    severity?: VulnerabilitySeverity;
    /**
     * The CVSS vector string for this vulnerability.
     */
    vectorString?: string;
}
export function deserializeIntoCvssSummary(cvssSummary: CvssSummary | undefined = {} as CvssSummary) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { cvssSummary.odataType = n.getStringValue(); },
        "score": n => { cvssSummary.score = n.getNumberValue(); },
        "severity": n => { cvssSummary.severity = n.getEnumValue<VulnerabilitySeverity>(VulnerabilitySeverity); },
        "vectorString": n => { cvssSummary.vectorString = n.getStringValue(); },
    }
}
export function serializeCvssSummary(writer: SerializationWriter, cvssSummary: CvssSummary | undefined = {} as CvssSummary) : void {
    writer.writeStringValue("@odata.type", cvssSummary.odataType);
    writer.writeNumberValue("score", cvssSummary.score);
    writer.writeEnumValue<VulnerabilitySeverity>("severity", cvssSummary.severity);
    writer.writeStringValue("vectorString", cvssSummary.vectorString);
    writer.writeAdditionalData(cvssSummary.additionalData);
}
// tslint:enable
// eslint-enable
