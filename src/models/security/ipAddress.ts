// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAutonomousSystemFromDiscriminatorValue, serializeAutonomousSystem, type AutonomousSystem } from './autonomousSystem';
import { deserializeIntoHost, serializeHost, type Host } from './host';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIpAddressFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIpAddress;
}
export function deserializeIntoIpAddress(ipAddress: IpAddress | undefined = {} as IpAddress) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoHost(ipAddress),
        "autonomousSystem": n => { ipAddress.autonomousSystem = n.getObjectValue<AutonomousSystem>(createAutonomousSystemFromDiscriminatorValue); },
        "countryOrRegion": n => { ipAddress.countryOrRegion = n.getStringValue(); },
        "hostingProvider": n => { ipAddress.hostingProvider = n.getStringValue(); },
        "netblock": n => { ipAddress.netblock = n.getStringValue(); },
    }
}
export interface IpAddress extends Host, Parsable {
    /**
     * The details about the autonomous system to which this IP address belongs.
     */
    autonomousSystem?: AutonomousSystem;
    /**
     * The country/region for this IP address.
     */
    countryOrRegion?: string;
    /**
     * The hosting company listed for this host.
     */
    hostingProvider?: string;
    /**
     * The block of IP addresses this IP address belongs to.
     */
    netblock?: string;
}
export function serializeIpAddress(writer: SerializationWriter, ipAddress: IpAddress | undefined = {} as IpAddress) : void {
        serializeHost(writer, ipAddress)
        writer.writeObjectValue<AutonomousSystem>("autonomousSystem", ipAddress.autonomousSystem, );
        writer.writeStringValue("countryOrRegion", ipAddress.countryOrRegion);
        writer.writeStringValue("hostingProvider", ipAddress.hostingProvider);
        writer.writeStringValue("netblock", ipAddress.netblock);
}
// tslint:enable
// eslint-enable
