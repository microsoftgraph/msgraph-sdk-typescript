// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from '../group';
import { deserializeIntoDataSource, serializeDataSource, type DataSource } from './dataSource';
import { SourceType } from './sourceType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedGroupSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedGroupSource;
}
export function deserializeIntoUnifiedGroupSource(unifiedGroupSource: UnifiedGroupSource | undefined = {} as UnifiedGroupSource) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDataSource(unifiedGroupSource),
        "group": n => { unifiedGroupSource.group = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "includedSources": n => { unifiedGroupSource.includedSources = n.getCollectionOfEnumValues<SourceType>(SourceType); },
    }
}
export function serializeUnifiedGroupSource(writer: SerializationWriter, unifiedGroupSource: UnifiedGroupSource | undefined = {} as UnifiedGroupSource) : void {
        serializeDataSource(writer, unifiedGroupSource)
        writer.writeObjectValue<Group>("group", unifiedGroupSource.group, serializeGroup);
        writer.writeEnumValue<SourceType[]>("includedSources", unifiedGroupSource.includedSources);
}
export interface UnifiedGroupSource extends DataSource, Parsable {
    /**
     * The group property
     */
    group?: Group;
    /**
     * Specifies which sources are included in this group. Possible values are: mailbox, site.
     */
    includedSources?: SourceType[];
}
// tslint:enable
// eslint-enable
