// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoArtifact, serializeArtifact, type Artifact } from './artifact';
import { createHostFromDiscriminatorValue, serializeHost, type Host } from './host';
import { createSslCertificateEntityFromDiscriminatorValue, serializeSslCertificateEntity, type SslCertificateEntity } from './sslCertificateEntity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSslCertificateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSslCertificate;
}
export function deserializeIntoSslCertificate(sslCertificate: SslCertificate | undefined = {} as SslCertificate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoArtifact(sslCertificate),
        "expirationDateTime": n => { sslCertificate.expirationDateTime = n.getDateValue(); },
        "fingerprint": n => { sslCertificate.fingerprint = n.getStringValue(); },
        "firstSeenDateTime": n => { sslCertificate.firstSeenDateTime = n.getDateValue(); },
        "issueDateTime": n => { sslCertificate.issueDateTime = n.getDateValue(); },
        "issuer": n => { sslCertificate.issuer = n.getObjectValue<SslCertificateEntity>(createSslCertificateEntityFromDiscriminatorValue); },
        "lastSeenDateTime": n => { sslCertificate.lastSeenDateTime = n.getDateValue(); },
        "relatedHosts": n => { sslCertificate.relatedHosts = n.getCollectionOfObjectValues<Host>(createHostFromDiscriminatorValue); },
        "serialNumber": n => { sslCertificate.serialNumber = n.getStringValue(); },
        "sha1": n => { sslCertificate.sha1 = n.getStringValue(); },
        "subject": n => { sslCertificate.subject = n.getObjectValue<SslCertificateEntity>(createSslCertificateEntityFromDiscriminatorValue); },
    }
}
export function serializeSslCertificate(writer: SerializationWriter, sslCertificate: SslCertificate | undefined = {} as SslCertificate) : void {
        serializeArtifact(writer, sslCertificate)
        writer.writeDateValue("expirationDateTime", sslCertificate.expirationDateTime);
        writer.writeStringValue("fingerprint", sslCertificate.fingerprint);
        writer.writeDateValue("firstSeenDateTime", sslCertificate.firstSeenDateTime);
        writer.writeDateValue("issueDateTime", sslCertificate.issueDateTime);
        writer.writeObjectValue<SslCertificateEntity>("issuer", sslCertificate.issuer, serializeSslCertificateEntity);
        writer.writeDateValue("lastSeenDateTime", sslCertificate.lastSeenDateTime);
        writer.writeCollectionOfObjectValues<Host>("relatedHosts", sslCertificate.relatedHosts, serializeHost);
        writer.writeStringValue("serialNumber", sslCertificate.serialNumber);
        writer.writeStringValue("sha1", sslCertificate.sha1);
        writer.writeObjectValue<SslCertificateEntity>("subject", sslCertificate.subject, serializeSslCertificateEntity);
}
export interface SslCertificate extends Artifact, Parsable {
    /**
     * The date and time when a certificate expires. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    expirationDateTime?: Date;
    /**
     * A hash of the certificate calculated on the data and signature.
     */
    fingerprint?: string;
    /**
     * The first date and time when this sslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The date and time when a certificate was issued. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    issueDateTime?: Date;
    /**
     * The entity that grants this certificate.
     */
    issuer?: SslCertificateEntity;
    /**
     * The most recent date and time when this sslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The hosts related with this sslCertificate.
     */
    relatedHosts?: Host[];
    /**
     * The serial number associated with an SSL certificate.
     */
    serialNumber?: string;
    /**
     * A SHA-1 hash of the certificate. Note: This is not the signature.
     */
    sha1?: string;
    /**
     * The person, site, machine, and so on, this certificate is for.
     */
    subject?: SslCertificateEntity;
}
// tslint:enable
// eslint-enable
