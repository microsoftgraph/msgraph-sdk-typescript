// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, type BaseCollectionPaginationCountResponse } from '../baseCollectionPaginationCountResponse';
import { createHostPortFromDiscriminatorValue, serializeHostPort, type HostPort } from './hostPort';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createHostPortCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoHostPortCollectionResponse;
}
export function deserializeIntoHostPortCollectionResponse(hostPortCollectionResponse: HostPortCollectionResponse | undefined = {} as HostPortCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(hostPortCollectionResponse),
        "value": n => { hostPortCollectionResponse.value = n.getCollectionOfObjectValues<HostPort>(createHostPortFromDiscriminatorValue); },
    }
}
export interface HostPortCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: HostPort[];
}
export function serializeHostPortCollectionResponse(writer: SerializationWriter, hostPortCollectionResponse: HostPortCollectionResponse | undefined = {} as HostPortCollectionResponse) : void {
        serializeBaseCollectionPaginationCountResponse(writer, hostPortCollectionResponse)
        writer.writeCollectionOfObjectValues<HostPort>("value", hostPortCollectionResponse.value, serializeHostPort);
}
// tslint:enable
// eslint-enable
