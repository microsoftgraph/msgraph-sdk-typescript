// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPhysicalAddressFromDiscriminatorValue, serializePhysicalAddress, type PhysicalAddress } from '../physicalAddress';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSslCertificateEntityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSslCertificateEntity;
}
export function deserializeIntoSslCertificateEntity(sslCertificateEntity: SslCertificateEntity | undefined = {} as SslCertificateEntity) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { sslCertificateEntity.address = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "alternateNames": n => { sslCertificateEntity.alternateNames = n.getCollectionOfPrimitiveValues<string>(); },
        "commonName": n => { sslCertificateEntity.commonName = n.getStringValue(); },
        "email": n => { sslCertificateEntity.email = n.getStringValue(); },
        "givenName": n => { sslCertificateEntity.givenName = n.getStringValue(); },
        "@odata.type": n => { sslCertificateEntity.odataType = n.getStringValue(); },
        "organizationName": n => { sslCertificateEntity.organizationName = n.getStringValue(); },
        "organizationUnitName": n => { sslCertificateEntity.organizationUnitName = n.getStringValue(); },
        "serialNumber": n => { sslCertificateEntity.serialNumber = n.getStringValue(); },
        "surname": n => { sslCertificateEntity.surname = n.getStringValue(); },
    }
}
export function serializeSslCertificateEntity(writer: SerializationWriter, sslCertificateEntity: SslCertificateEntity | undefined = {} as SslCertificateEntity) : void {
        writer.writeObjectValue<PhysicalAddress>("address", sslCertificateEntity.address, );
        writer.writeCollectionOfPrimitiveValues<string>("alternateNames", sslCertificateEntity.alternateNames);
        writer.writeStringValue("commonName", sslCertificateEntity.commonName);
        writer.writeStringValue("email", sslCertificateEntity.email);
        writer.writeStringValue("givenName", sslCertificateEntity.givenName);
        writer.writeStringValue("@odata.type", sslCertificateEntity.odataType);
        writer.writeStringValue("organizationName", sslCertificateEntity.organizationName);
        writer.writeStringValue("organizationUnitName", sslCertificateEntity.organizationUnitName);
        writer.writeStringValue("serialNumber", sslCertificateEntity.serialNumber);
        writer.writeStringValue("surname", sslCertificateEntity.surname);
        writer.writeAdditionalData(sslCertificateEntity.additionalData);
}
export interface SslCertificateEntity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A physical address of the entity.
     */
    address?: PhysicalAddress;
    /**
     * Alternate names for this entity that are part of the certificate.
     */
    alternateNames?: string[];
    /**
     * A common name for this entity.
     */
    commonName?: string;
    /**
     * An email for this entity.
     */
    email?: string;
    /**
     * If the entity is a person, this is the person's given name (first name).
     */
    givenName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * If the entity is an organization, this is the name of the organization.
     */
    organizationName?: string;
    /**
     * If the entity is an organization, this communicates if a unit in the organization is named on the entity.
     */
    organizationUnitName?: string;
    /**
     * A serial number assigned to the entity; usually only available if the entity is the issuer.
     */
    serialNumber?: string;
    /**
     * If the entity is a person, this is the person's surname (last name).
     */
    surname?: string;
}
// tslint:enable
// eslint-enable
