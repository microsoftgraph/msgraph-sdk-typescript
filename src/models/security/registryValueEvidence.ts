// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAlertEvidence, serializeAlertEvidence, type AlertEvidence } from './alertEvidence';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRegistryValueEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRegistryValueEvidence;
}
export function deserializeIntoRegistryValueEvidence(registryValueEvidence: RegistryValueEvidence | undefined = {} as RegistryValueEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(registryValueEvidence),
        "mdeDeviceId": n => { registryValueEvidence.mdeDeviceId = n.getStringValue(); },
        "registryHive": n => { registryValueEvidence.registryHive = n.getStringValue(); },
        "registryKey": n => { registryValueEvidence.registryKey = n.getStringValue(); },
        "registryValue": n => { registryValueEvidence.registryValue = n.getStringValue(); },
        "registryValueName": n => { registryValueEvidence.registryValueName = n.getStringValue(); },
        "registryValueType": n => { registryValueEvidence.registryValueType = n.getStringValue(); },
    }
}
export interface RegistryValueEvidence extends AlertEvidence, Parsable {
    /**
     * A unique identifier assigned to a device by Microsoft Defender for Endpoint.
     */
    mdeDeviceId?: string;
    /**
     * Registry hive of the key that the recorded action was applied to.
     */
    registryHive?: string;
    /**
     * Registry key that the recorded action was applied to.
     */
    registryKey?: string;
    /**
     * Data of the registry value that the recorded action was applied to.
     */
    registryValue?: string;
    /**
     * Name of the registry value that the recorded action was applied to.
     */
    registryValueName?: string;
    /**
     * Data type, such as binary or string, of the registry value that the recorded action was applied to.
     */
    registryValueType?: string;
}
export function serializeRegistryValueEvidence(writer: SerializationWriter, registryValueEvidence: RegistryValueEvidence | undefined = {} as RegistryValueEvidence) : void {
        serializeAlertEvidence(writer, registryValueEvidence)
        writer.writeStringValue("mdeDeviceId", registryValueEvidence.mdeDeviceId);
        writer.writeStringValue("registryHive", registryValueEvidence.registryHive);
        writer.writeStringValue("registryKey", registryValueEvidence.registryKey);
        writer.writeStringValue("registryValue", registryValueEvidence.registryValue);
        writer.writeStringValue("registryValueName", registryValueEvidence.registryValueName);
        writer.writeStringValue("registryValueType", registryValueEvidence.registryValueType);
}
// tslint:enable
// eslint-enable
