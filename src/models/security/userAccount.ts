// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserAccountFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserAccount;
}
export function deserializeIntoUserAccount(userAccount: UserAccount | undefined = {} as UserAccount) : Record<string, (node: ParseNode) => void> {
    return {
        "accountName": n => { userAccount.accountName = n.getStringValue(); },
        "azureAdUserId": n => { userAccount.azureAdUserId = n.getStringValue(); },
        "displayName": n => { userAccount.displayName = n.getStringValue(); },
        "domainName": n => { userAccount.domainName = n.getStringValue(); },
        "@odata.type": n => { userAccount.odataType = n.getStringValue(); },
        "userPrincipalName": n => { userAccount.userPrincipalName = n.getStringValue(); },
        "userSid": n => { userAccount.userSid = n.getStringValue(); },
    }
}
export function serializeUserAccount(writer: SerializationWriter, userAccount: UserAccount | undefined = {} as UserAccount) : void {
        writer.writeStringValue("accountName", userAccount.accountName);
        writer.writeStringValue("azureAdUserId", userAccount.azureAdUserId);
        writer.writeStringValue("displayName", userAccount.displayName);
        writer.writeStringValue("domainName", userAccount.domainName);
        writer.writeStringValue("@odata.type", userAccount.odataType);
        writer.writeStringValue("userPrincipalName", userAccount.userPrincipalName);
        writer.writeStringValue("userSid", userAccount.userSid);
        writer.writeAdditionalData(userAccount.additionalData);
}
export interface UserAccount extends AdditionalDataHolder, Parsable {
    /**
     * The displayed name of the user account.
     */
    accountName?: string;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The user object identifier in Microsoft Entra ID.
     */
    azureAdUserId?: string;
    /**
     * The user display name in Microsoft Entra ID.
     */
    displayName?: string;
    /**
     * The name of the Active Directory domain of which the user is a member.
     */
    domainName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The user principal name of the account in Microsoft Entra ID.
     */
    userPrincipalName?: string;
    /**
     * The local security identifier of the user account.
     */
    userSid?: string;
}
// tslint:enable
// eslint-enable
