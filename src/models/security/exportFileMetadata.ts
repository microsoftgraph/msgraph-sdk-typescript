// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createExportFileMetadataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoExportFileMetadata;
}
export function deserializeIntoExportFileMetadata(exportFileMetadata: ExportFileMetadata | undefined = {} as ExportFileMetadata) : Record<string, (node: ParseNode) => void> {
    return {
        "downloadUrl": n => { exportFileMetadata.downloadUrl = n.getStringValue(); },
        "fileName": n => { exportFileMetadata.fileName = n.getStringValue(); },
        "@odata.type": n => { exportFileMetadata.odataType = n.getStringValue(); },
        "size": n => { exportFileMetadata.size = n.getNumberValue(); },
    }
}
export interface ExportFileMetadata extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The downloadUrl property
     */
    downloadUrl?: string;
    /**
     * The fileName property
     */
    fileName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The size property
     */
    size?: number;
}
export function serializeExportFileMetadata(writer: SerializationWriter, exportFileMetadata: ExportFileMetadata | undefined = {} as ExportFileMetadata) : void {
    writer.writeStringValue("downloadUrl", exportFileMetadata.downloadUrl);
    writer.writeStringValue("fileName", exportFileMetadata.fileName);
    writer.writeStringValue("@odata.type", exportFileMetadata.odataType);
    writer.writeNumberValue("size", exportFileMetadata.size);
    writer.writeAdditionalData(exportFileMetadata.additionalData);
}
// tslint:enable
// eslint-enable
