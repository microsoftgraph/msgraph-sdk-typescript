// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoCaseOperation, serializeCaseOperation, type CaseOperation } from './caseOperation';
import { createEdiscoverySearchFromDiscriminatorValue, serializeEdiscoverySearch, type EdiscoverySearch } from './ediscoverySearch';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEdiscoveryEstimateOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEdiscoveryEstimateOperation;
}
export function deserializeIntoEdiscoveryEstimateOperation(ediscoveryEstimateOperation: EdiscoveryEstimateOperation | undefined = {} as EdiscoveryEstimateOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCaseOperation(ediscoveryEstimateOperation),
        "indexedItemCount": n => { ediscoveryEstimateOperation.indexedItemCount = n.getNumberValue(); },
        "indexedItemsSize": n => { ediscoveryEstimateOperation.indexedItemsSize = n.getNumberValue(); },
        "mailboxCount": n => { ediscoveryEstimateOperation.mailboxCount = n.getNumberValue(); },
        "search": n => { ediscoveryEstimateOperation.search = n.getObjectValue<EdiscoverySearch>(createEdiscoverySearchFromDiscriminatorValue); },
        "siteCount": n => { ediscoveryEstimateOperation.siteCount = n.getNumberValue(); },
        "unindexedItemCount": n => { ediscoveryEstimateOperation.unindexedItemCount = n.getNumberValue(); },
        "unindexedItemsSize": n => { ediscoveryEstimateOperation.unindexedItemsSize = n.getNumberValue(); },
    }
}
export interface EdiscoveryEstimateOperation extends CaseOperation, Parsable {
    /**
     * The estimated count of items for the search that matched the content query.
     */
    indexedItemCount?: number;
    /**
     * The estimated size of items for the search that matched the content query.
     */
    indexedItemsSize?: number;
    /**
     * The number of mailboxes that had search hits.
     */
    mailboxCount?: number;
    /**
     * eDiscovery search.
     */
    search?: EdiscoverySearch;
    /**
     * The number of mailboxes that had search hits.
     */
    siteCount?: number;
    /**
     * The estimated count of unindexed items for the collection.
     */
    unindexedItemCount?: number;
    /**
     * The estimated size of unindexed items for the collection.
     */
    unindexedItemsSize?: number;
}
export function serializeEdiscoveryEstimateOperation(writer: SerializationWriter, ediscoveryEstimateOperation: EdiscoveryEstimateOperation | undefined = {} as EdiscoveryEstimateOperation) : void {
        serializeCaseOperation(writer, ediscoveryEstimateOperation)
        writer.writeNumberValue("indexedItemCount", ediscoveryEstimateOperation.indexedItemCount);
        writer.writeNumberValue("indexedItemsSize", ediscoveryEstimateOperation.indexedItemsSize);
        writer.writeNumberValue("mailboxCount", ediscoveryEstimateOperation.mailboxCount);
        writer.writeObjectValue<EdiscoverySearch>("search", ediscoveryEstimateOperation.search, );
        writer.writeNumberValue("siteCount", ediscoveryEstimateOperation.siteCount);
        writer.writeNumberValue("unindexedItemCount", ediscoveryEstimateOperation.unindexedItemCount);
        writer.writeNumberValue("unindexedItemsSize", ediscoveryEstimateOperation.unindexedItemsSize);
}
// tslint:enable
// eslint-enable
