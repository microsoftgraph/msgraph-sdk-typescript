// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEmailSenderFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEmailSender;
}
export function deserializeIntoEmailSender(emailSender: EmailSender | undefined = {} as EmailSender) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { emailSender.displayName = n.getStringValue(); },
        "domainName": n => { emailSender.domainName = n.getStringValue(); },
        "emailAddress": n => { emailSender.emailAddress = n.getStringValue(); },
        "@odata.type": n => { emailSender.odataType = n.getStringValue(); },
    }
}
export interface EmailSender extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name of the sender.
     */
    displayName?: string;
    /**
     * Sender domain.
     */
    domainName?: string;
    /**
     * Sender email address.
     */
    emailAddress?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeEmailSender(writer: SerializationWriter, emailSender: EmailSender | undefined = {} as EmailSender) : void {
        writer.writeStringValue("displayName", emailSender.displayName);
        writer.writeStringValue("domainName", emailSender.domainName);
        writer.writeStringValue("emailAddress", emailSender.emailAddress);
        writer.writeStringValue("@odata.type", emailSender.odataType);
        writer.writeAdditionalData(emailSender.additionalData);
}
// tslint:enable
// eslint-enable
