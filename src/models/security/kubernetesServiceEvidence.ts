// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAlertEvidence, serializeAlertEvidence, type AlertEvidence } from './alertEvidence';
import { createDictionaryFromDiscriminatorValue, serializeDictionary, type Dictionary } from './dictionary';
import { createIpEvidenceFromDiscriminatorValue, serializeIpEvidence, type IpEvidence } from './ipEvidence';
import { createKubernetesNamespaceEvidenceFromDiscriminatorValue, serializeKubernetesNamespaceEvidence, type KubernetesNamespaceEvidence } from './kubernetesNamespaceEvidence';
import { createKubernetesServicePortFromDiscriminatorValue, serializeKubernetesServicePort, type KubernetesServicePort } from './kubernetesServicePort';
import { KubernetesServiceType } from './kubernetesServiceType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createKubernetesServiceEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoKubernetesServiceEvidence;
}
export function deserializeIntoKubernetesServiceEvidence(kubernetesServiceEvidence: KubernetesServiceEvidence | undefined = {} as KubernetesServiceEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(kubernetesServiceEvidence),
        "clusterIP": n => { kubernetesServiceEvidence.clusterIP = n.getObjectValue<IpEvidence>(createIpEvidenceFromDiscriminatorValue); },
        "externalIPs": n => { kubernetesServiceEvidence.externalIPs = n.getCollectionOfObjectValues<IpEvidence>(createIpEvidenceFromDiscriminatorValue); },
        "labels": n => { kubernetesServiceEvidence.labels = n.getObjectValue<Dictionary>(createDictionaryFromDiscriminatorValue); },
        "name": n => { kubernetesServiceEvidence.name = n.getStringValue(); },
        "namespace": n => { kubernetesServiceEvidence.namespace = n.getObjectValue<KubernetesNamespaceEvidence>(createKubernetesNamespaceEvidenceFromDiscriminatorValue); },
        "selector": n => { kubernetesServiceEvidence.selector = n.getObjectValue<Dictionary>(createDictionaryFromDiscriminatorValue); },
        "servicePorts": n => { kubernetesServiceEvidence.servicePorts = n.getCollectionOfObjectValues<KubernetesServicePort>(createKubernetesServicePortFromDiscriminatorValue); },
        "serviceType": n => { kubernetesServiceEvidence.serviceType = n.getEnumValue<KubernetesServiceType>(KubernetesServiceType); },
    }
}
export interface KubernetesServiceEvidence extends AlertEvidence, Parsable {
    /**
     * The service cluster IP.
     */
    clusterIP?: IpEvidence;
    /**
     * The service external IPs.
     */
    externalIPs?: IpEvidence[];
    /**
     * The service labels.
     */
    labels?: Dictionary;
    /**
     * The service name.
     */
    name?: string;
    /**
     * The service namespace.
     */
    namespace?: KubernetesNamespaceEvidence;
    /**
     * The service selector.
     */
    selector?: Dictionary;
    /**
     * The list of service ports.
     */
    servicePorts?: KubernetesServicePort[];
    /**
     * The serviceType property
     */
    serviceType?: KubernetesServiceType;
}
export function serializeKubernetesServiceEvidence(writer: SerializationWriter, kubernetesServiceEvidence: KubernetesServiceEvidence | undefined = {} as KubernetesServiceEvidence) : void {
        serializeAlertEvidence(writer, kubernetesServiceEvidence)
        writer.writeObjectValue<IpEvidence>("clusterIP", kubernetesServiceEvidence.clusterIP, );
        writer.writeCollectionOfObjectValues<IpEvidence>("externalIPs", kubernetesServiceEvidence.externalIPs, );
        writer.writeObjectValue<Dictionary>("labels", kubernetesServiceEvidence.labels, );
        writer.writeStringValue("name", kubernetesServiceEvidence.name);
        writer.writeObjectValue<KubernetesNamespaceEvidence>("namespace", kubernetesServiceEvidence.namespace, );
        writer.writeObjectValue<Dictionary>("selector", kubernetesServiceEvidence.selector, );
        writer.writeCollectionOfObjectValues<KubernetesServicePort>("servicePorts", kubernetesServiceEvidence.servicePorts, );
        writer.writeEnumValue<KubernetesServiceType>("serviceType", kubernetesServiceEvidence.serviceType);
}
// tslint:enable
// eslint-enable
