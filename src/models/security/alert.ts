// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { AlertClassification } from './alertClassification';
import { createAlertCommentFromDiscriminatorValue, serializeAlertComment, type AlertComment } from './alertComment';
import { AlertDetermination } from './alertDetermination';
import { createAlertEvidenceFromDiscriminatorValue, serializeAlertEvidence, type AlertEvidence } from './alertEvidence';
import { AlertSeverity } from './alertSeverity';
import { AlertStatus } from './alertStatus';
import { DetectionSource } from './detectionSource';
import { createDictionaryFromDiscriminatorValue, serializeDictionary, type Dictionary } from './dictionary';
import { ServiceSource } from './serviceSource';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Alert extends Entity, Parsable {
    /**
     * The adversary or activity group that is associated with this alert.
     */
    actorDisplayName?: string;
    /**
     * The alertPolicyId property
     */
    alertPolicyId?: string;
    /**
     * URL for the alert page in the Microsoft 365 Defender portal.
     */
    alertWebUrl?: string;
    /**
     * Owner of the alert, or null if no owner is assigned.
     */
    assignedTo?: string;
    /**
     * The attack kill-chain category that the alert belongs to. Aligned with the MITRE ATT&CK framework.
     */
    category?: string;
    /**
     * Specifies whether the alert represents a true threat. Possible values are: unknown, falsePositive, truePositive, informationalExpectedActivity, unknownFutureValue.
     */
    classification?: AlertClassification;
    /**
     * Array of comments created by the Security Operations (SecOps) team during the alert management process.
     */
    comments?: AlertComment[];
    /**
     * Time when Microsoft 365 Defender created the alert.
     */
    createdDateTime?: Date;
    /**
     * String value describing each alert.
     */
    description?: string;
    /**
     * Detection technology or sensor that identified the notable component or activity. Possible values are: unknown, microsoftDefenderForEndpoint, antivirus, smartScreen, customTi, microsoftDefenderForOffice365, automatedInvestigation, microsoftThreatExperts, customDetection, microsoftDefenderForIdentity, cloudAppSecurity, microsoft365Defender, azureAdIdentityProtection, manual, microsoftDataLossPrevention, appGovernancePolicy, appGovernanceDetection, unknownFutureValue, microsoftDefenderForCloud, microsoftDefenderForIoT, microsoftDefenderForServers, microsoftDefenderForStorage, microsoftDefenderForDNS, microsoftDefenderForDatabases, microsoftDefenderForContainers, microsoftDefenderForNetwork, microsoftDefenderForAppService, microsoftDefenderForKeyVault, microsoftDefenderForResourceManager, microsoftDefenderForApiManagement. You must use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: microsoftDefenderForCloud, microsoftDefenderForIoT, microsoftDefenderForServers, microsoftDefenderForStorage, microsoftDefenderForDNS, microsoftDefenderForDatabases, microsoftDefenderForContainers, microsoftDefenderForNetwork, microsoftDefenderForAppService, microsoftDefenderForKeyVault, microsoftDefenderForResourceManager, microsoftDefenderForApiManagement.
     */
    detectionSource?: DetectionSource;
    /**
     * The ID of the detector that triggered the alert.
     */
    detectorId?: string;
    /**
     * Specifies the result of the investigation, whether the alert represents a true attack and if so, the nature of the attack. Possible values are: unknown, apt, malware, securityPersonnel, securityTesting, unwantedSoftware, other, multiStagedAttack, compromisedUser, phishing, maliciousUserActivity, clean, insufficientData, confirmedUserActivity, lineOfBusinessApplication, unknownFutureValue.
     */
    determination?: AlertDetermination;
    /**
     * Collection of evidence related to the alert.
     */
    evidence?: AlertEvidence[];
    /**
     * The earliest activity associated with the alert.
     */
    firstActivityDateTime?: Date;
    /**
     * Unique identifier to represent the incident this alert resource is associated with.
     */
    incidentId?: string;
    /**
     * URL for the incident page in the Microsoft 365 Defender portal.
     */
    incidentWebUrl?: string;
    /**
     * The oldest activity associated with the alert.
     */
    lastActivityDateTime?: Date;
    /**
     * Time when the alert was last updated at Microsoft 365 Defender.
     */
    lastUpdateDateTime?: Date;
    /**
     * The attack techniques, as aligned with the MITRE ATT&CK framework.
     */
    mitreTechniques?: string[];
    /**
     * The productName property
     */
    productName?: string;
    /**
     * The ID of the alert as it appears in the security provider product that generated the alert.
     */
    providerAlertId?: string;
    /**
     * Recommended response and remediation actions to take in the event this alert was generated.
     */
    recommendedActions?: string;
    /**
     * Time when the alert was resolved.
     */
    resolvedDateTime?: Date;
    /**
     * The serviceSource property
     */
    serviceSource?: ServiceSource;
    /**
     * The severity property
     */
    severity?: AlertSeverity;
    /**
     * The status property
     */
    status?: AlertStatus;
    /**
     * The Microsoft Entra tenant the alert was created in.
     */
    tenantId?: string;
    /**
     * The threat associated with this alert.
     */
    threatDisplayName?: string;
    /**
     * Threat family associated with this alert.
     */
    threatFamilyName?: string;
    /**
     * Brief identifying string value describing the alert.
     */
    title?: string;
}
export function createAlertFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAlert;
}
export function deserializeIntoAlert(alert: Alert | undefined = {} as Alert) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(alert),
        "actorDisplayName": n => { alert.actorDisplayName = n.getStringValue(); },
        "alertPolicyId": n => { alert.alertPolicyId = n.getStringValue(); },
        "alertWebUrl": n => { alert.alertWebUrl = n.getStringValue(); },
        "assignedTo": n => { alert.assignedTo = n.getStringValue(); },
        "category": n => { alert.category = n.getStringValue(); },
        "classification": n => { alert.classification = n.getEnumValue<AlertClassification>(AlertClassification); },
        "comments": n => { alert.comments = n.getCollectionOfObjectValues<AlertComment>(createAlertCommentFromDiscriminatorValue); },
        "createdDateTime": n => { alert.createdDateTime = n.getDateValue(); },
        "description": n => { alert.description = n.getStringValue(); },
        "detectionSource": n => { alert.detectionSource = n.getEnumValue<DetectionSource>(DetectionSource); },
        "detectorId": n => { alert.detectorId = n.getStringValue(); },
        "determination": n => { alert.determination = n.getEnumValue<AlertDetermination>(AlertDetermination); },
        "evidence": n => { alert.evidence = n.getCollectionOfObjectValues<AlertEvidence>(createAlertEvidenceFromDiscriminatorValue); },
        "firstActivityDateTime": n => { alert.firstActivityDateTime = n.getDateValue(); },
        "incidentId": n => { alert.incidentId = n.getStringValue(); },
        "incidentWebUrl": n => { alert.incidentWebUrl = n.getStringValue(); },
        "lastActivityDateTime": n => { alert.lastActivityDateTime = n.getDateValue(); },
        "lastUpdateDateTime": n => { alert.lastUpdateDateTime = n.getDateValue(); },
        "mitreTechniques": n => { alert.mitreTechniques = n.getCollectionOfPrimitiveValues<string>(); },
        "productName": n => { alert.productName = n.getStringValue(); },
        "providerAlertId": n => { alert.providerAlertId = n.getStringValue(); },
        "recommendedActions": n => { alert.recommendedActions = n.getStringValue(); },
        "resolvedDateTime": n => { alert.resolvedDateTime = n.getDateValue(); },
        "serviceSource": n => { alert.serviceSource = n.getEnumValue<ServiceSource>(ServiceSource); },
        "severity": n => { alert.severity = n.getEnumValue<AlertSeverity>(AlertSeverity); },
        "status": n => { alert.status = n.getEnumValue<AlertStatus>(AlertStatus); },
        "tenantId": n => { alert.tenantId = n.getStringValue(); },
        "threatDisplayName": n => { alert.threatDisplayName = n.getStringValue(); },
        "threatFamilyName": n => { alert.threatFamilyName = n.getStringValue(); },
        "title": n => { alert.title = n.getStringValue(); },
    }
}
export function serializeAlert(writer: SerializationWriter, alert: Alert | undefined = {} as Alert) : void {
        serializeEntity(writer, alert)
        writer.writeStringValue("actorDisplayName", alert.actorDisplayName);
        writer.writeStringValue("alertPolicyId", alert.alertPolicyId);
        writer.writeStringValue("alertWebUrl", alert.alertWebUrl);
        writer.writeStringValue("assignedTo", alert.assignedTo);
        writer.writeStringValue("category", alert.category);
        writer.writeEnumValue<AlertClassification>("classification", alert.classification);
        writer.writeCollectionOfObjectValues<AlertComment>("comments", alert.comments, serializeAlertComment);
        writer.writeDateValue("createdDateTime", alert.createdDateTime);
        writer.writeStringValue("description", alert.description);
        writer.writeEnumValue<DetectionSource>("detectionSource", alert.detectionSource);
        writer.writeStringValue("detectorId", alert.detectorId);
        writer.writeEnumValue<AlertDetermination>("determination", alert.determination);
        writer.writeCollectionOfObjectValues<AlertEvidence>("evidence", alert.evidence, serializeAlertEvidence);
        writer.writeDateValue("firstActivityDateTime", alert.firstActivityDateTime);
        writer.writeStringValue("incidentId", alert.incidentId);
        writer.writeStringValue("incidentWebUrl", alert.incidentWebUrl);
        writer.writeDateValue("lastActivityDateTime", alert.lastActivityDateTime);
        writer.writeDateValue("lastUpdateDateTime", alert.lastUpdateDateTime);
        writer.writeCollectionOfPrimitiveValues<string>("mitreTechniques", alert.mitreTechniques);
        writer.writeStringValue("productName", alert.productName);
        writer.writeStringValue("providerAlertId", alert.providerAlertId);
        writer.writeStringValue("recommendedActions", alert.recommendedActions);
        writer.writeDateValue("resolvedDateTime", alert.resolvedDateTime);
        writer.writeEnumValue<ServiceSource>("serviceSource", alert.serviceSource);
        writer.writeEnumValue<AlertSeverity>("severity", alert.severity);
        writer.writeEnumValue<AlertStatus>("status", alert.status);
        writer.writeStringValue("tenantId", alert.tenantId);
        writer.writeStringValue("threatDisplayName", alert.threatDisplayName);
        writer.writeStringValue("threatFamilyName", alert.threatFamilyName);
        writer.writeStringValue("title", alert.title);
}
// tslint:enable
// eslint-enable
