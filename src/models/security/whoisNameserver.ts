// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createHostFromDiscriminatorValue, serializeHost, type Host } from './host';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWhoisNameserverFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWhoisNameserver;
}
export function deserializeIntoWhoisNameserver(whoisNameserver: WhoisNameserver | undefined = {} as WhoisNameserver) : Record<string, (node: ParseNode) => void> {
    return {
        "firstSeenDateTime": n => { whoisNameserver.firstSeenDateTime = n.getDateValue(); },
        "host": n => { whoisNameserver.host = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "lastSeenDateTime": n => { whoisNameserver.lastSeenDateTime = n.getDateValue(); },
        "@odata.type": n => { whoisNameserver.odataType = n.getStringValue(); },
    }
}
export function serializeWhoisNameserver(writer: SerializationWriter, whoisNameserver: WhoisNameserver | undefined = {} as WhoisNameserver) : void {
        writer.writeDateValue("firstSeenDateTime", whoisNameserver.firstSeenDateTime);
        writer.writeObjectValue<Host>("host", whoisNameserver.host, );
        writer.writeDateValue("lastSeenDateTime", whoisNameserver.lastSeenDateTime);
        writer.writeStringValue("@odata.type", whoisNameserver.odataType);
        writer.writeAdditionalData(whoisNameserver.additionalData);
}
export interface WhoisNameserver extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The first seen date and time of this WHOIS contact. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The host property
     */
    host?: Host;
    /**
     * The last seen date and time of this WHOIS contact. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:enable
// eslint-enable
