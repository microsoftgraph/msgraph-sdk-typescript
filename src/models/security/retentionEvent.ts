// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from '../identitySet';
import { createEventPropagationResultFromDiscriminatorValue, serializeEventPropagationResult, type EventPropagationResult } from './eventPropagationResult';
import { createEventQueryFromDiscriminatorValue, serializeEventQuery, type EventQuery } from './eventQuery';
import { createRetentionEventStatusFromDiscriminatorValue, serializeRetentionEventStatus, type RetentionEventStatus } from './retentionEventStatus';
import { createRetentionEventTypeFromDiscriminatorValue, serializeRetentionEventType, type RetentionEventType } from './retentionEventType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRetentionEventFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRetentionEvent;
}
export function deserializeIntoRetentionEvent(retentionEvent: RetentionEvent | undefined = {} as RetentionEvent) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(retentionEvent),
        "createdBy": n => { retentionEvent.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { retentionEvent.createdDateTime = n.getDateValue(); },
        "description": n => { retentionEvent.description = n.getStringValue(); },
        "displayName": n => { retentionEvent.displayName = n.getStringValue(); },
        "eventPropagationResults": n => { retentionEvent.eventPropagationResults = n.getCollectionOfObjectValues<EventPropagationResult>(createEventPropagationResultFromDiscriminatorValue); },
        "eventQueries": n => { retentionEvent.eventQueries = n.getCollectionOfObjectValues<EventQuery>(createEventQueryFromDiscriminatorValue); },
        "eventStatus": n => { retentionEvent.eventStatus = n.getObjectValue<RetentionEventStatus>(createRetentionEventStatusFromDiscriminatorValue); },
        "eventTriggerDateTime": n => { retentionEvent.eventTriggerDateTime = n.getDateValue(); },
        "lastModifiedBy": n => { retentionEvent.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { retentionEvent.lastModifiedDateTime = n.getDateValue(); },
        "lastStatusUpdateDateTime": n => { retentionEvent.lastStatusUpdateDateTime = n.getDateValue(); },
        "retentionEventType": n => { retentionEvent.retentionEventType = n.getObjectValue<RetentionEventType>(createRetentionEventTypeFromDiscriminatorValue); },
    }
}
export interface RetentionEvent extends Entity, Parsable {
    /**
     * The user who created the retentionEvent.
     */
    createdBy?: IdentitySet;
    /**
     * The date time when the retentionEvent was created.
     */
    createdDateTime?: Date;
    /**
     * Optional information about the event.
     */
    description?: string;
    /**
     * Name of the event.
     */
    displayName?: string;
    /**
     * The eventPropagationResults property
     */
    eventPropagationResults?: EventPropagationResult[];
    /**
     * Represents the workload (SharePoint Online, OneDrive for Business, Exchange Online) and identification information associated with a retention event.
     */
    eventQueries?: EventQuery[];
    /**
     * The eventStatus property
     */
    eventStatus?: RetentionEventStatus;
    /**
     * Optional time when the event should be triggered.
     */
    eventTriggerDateTime?: Date;
    /**
     * The user who last modified the retentionEvent.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The latest date time when the retentionEvent was modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * Last time the status of the event was updated.
     */
    lastStatusUpdateDateTime?: Date;
    /**
     * Specifies the event that will start the retention period for labels that use this event type when an event is created.
     */
    retentionEventType?: RetentionEventType;
}
export function serializeRetentionEvent(writer: SerializationWriter, retentionEvent: RetentionEvent | undefined = {} as RetentionEvent) : void {
        serializeEntity(writer, retentionEvent)
        writer.writeObjectValue<IdentitySet>("createdBy", retentionEvent.createdBy, serializeIdentitySet);
        writer.writeDateValue("createdDateTime", retentionEvent.createdDateTime);
        writer.writeStringValue("description", retentionEvent.description);
        writer.writeStringValue("displayName", retentionEvent.displayName);
        writer.writeCollectionOfObjectValues<EventPropagationResult>("eventPropagationResults", retentionEvent.eventPropagationResults, serializeEventPropagationResult);
        writer.writeCollectionOfObjectValues<EventQuery>("eventQueries", retentionEvent.eventQueries, serializeEventQuery);
        writer.writeObjectValue<RetentionEventStatus>("eventStatus", retentionEvent.eventStatus, serializeRetentionEventStatus);
        writer.writeDateValue("eventTriggerDateTime", retentionEvent.eventTriggerDateTime);
        writer.writeObjectValue<IdentitySet>("lastModifiedBy", retentionEvent.lastModifiedBy, serializeIdentitySet);
        writer.writeDateValue("lastModifiedDateTime", retentionEvent.lastModifiedDateTime);
        writer.writeDateValue("lastStatusUpdateDateTime", retentionEvent.lastStatusUpdateDateTime);
        writer.writeObjectValue<RetentionEventType>("retentionEventType", retentionEvent.retentionEventType, serializeRetentionEventType);
}
// tslint:enable
// eslint-enable
