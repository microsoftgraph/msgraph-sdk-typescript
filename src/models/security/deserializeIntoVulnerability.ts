import {deserializeIntoEntity} from '../deserializeIntoEntity';
import {Article} from './article';
import {createArticleFromDiscriminatorValue} from './createArticleFromDiscriminatorValue';
import {createCvssSummaryFromDiscriminatorValue} from './createCvssSummaryFromDiscriminatorValue';
import {createFormattedContentFromDiscriminatorValue} from './createFormattedContentFromDiscriminatorValue';
import {createHyperlinkFromDiscriminatorValue} from './createHyperlinkFromDiscriminatorValue';
import {createVulnerabilityComponentFromDiscriminatorValue} from './createVulnerabilityComponentFromDiscriminatorValue';
import {CvssSummary} from './cvssSummary';
import {FormattedContent} from './formattedContent';
import {Hyperlink} from './hyperlink';
import {serializeArticle} from './serializeArticle';
import {serializeCvssSummary} from './serializeCvssSummary';
import {serializeFormattedContent} from './serializeFormattedContent';
import {serializeHyperlink} from './serializeHyperlink';
import {serializeVulnerabilityComponent} from './serializeVulnerabilityComponent';
import {Vulnerability} from './vulnerability';
import {VulnerabilityComponent} from './vulnerabilityComponent';
import {VulnerabilitySeverity} from './vulnerabilitySeverity';
import {Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export function deserializeIntoVulnerability(vulnerability: Vulnerability | undefined = {} as Vulnerability) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(vulnerability),
        "activeExploitsObserved": n => { vulnerability.activeExploitsObserved = n.getBooleanValue(); },
        "articles": n => { vulnerability.articles = n.getCollectionOfObjectValues<Article>(createArticleFromDiscriminatorValue); },
        "commonWeaknessEnumerationIds": n => { vulnerability.commonWeaknessEnumerationIds = n.getCollectionOfPrimitiveValues<string>(); },
        "components": n => { vulnerability.components = n.getCollectionOfObjectValues<VulnerabilityComponent>(createVulnerabilityComponentFromDiscriminatorValue); },
        "createdDateTime": n => { vulnerability.createdDateTime = n.getDateValue(); },
        "cvss2Summary": n => { vulnerability.cvss2Summary = n.getObjectValue<CvssSummary>(createCvssSummaryFromDiscriminatorValue); },
        "cvss3Summary": n => { vulnerability.cvss3Summary = n.getObjectValue<CvssSummary>(createCvssSummaryFromDiscriminatorValue); },
        "description": n => { vulnerability.description = n.getObjectValue<FormattedContent>(createFormattedContentFromDiscriminatorValue); },
        "exploits": n => { vulnerability.exploits = n.getCollectionOfObjectValues<Hyperlink>(createHyperlinkFromDiscriminatorValue); },
        "exploitsAvailable": n => { vulnerability.exploitsAvailable = n.getBooleanValue(); },
        "hasChatter": n => { vulnerability.hasChatter = n.getBooleanValue(); },
        "lastModifiedDateTime": n => { vulnerability.lastModifiedDateTime = n.getDateValue(); },
        "priorityScore": n => { vulnerability.priorityScore = n.getNumberValue(); },
        "publishedDateTime": n => { vulnerability.publishedDateTime = n.getDateValue(); },
        "references": n => { vulnerability.references = n.getCollectionOfObjectValues<Hyperlink>(createHyperlinkFromDiscriminatorValue); },
        "remediation": n => { vulnerability.remediation = n.getObjectValue<FormattedContent>(createFormattedContentFromDiscriminatorValue); },
        "severity": n => { vulnerability.severity = n.getEnumValue<VulnerabilitySeverity>(VulnerabilitySeverity); },
    }
}
