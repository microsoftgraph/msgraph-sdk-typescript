// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPhysicalAddressFromDiscriminatorValue, serializePhysicalAddress, type PhysicalAddress } from '../physicalAddress';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWhoisContactFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWhoisContact;
}
export function deserializeIntoWhoisContact(whoisContact: WhoisContact | undefined = {} as WhoisContact) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { whoisContact.address = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "email": n => { whoisContact.email = n.getStringValue(); },
        "fax": n => { whoisContact.fax = n.getStringValue(); },
        "name": n => { whoisContact.name = n.getStringValue(); },
        "@odata.type": n => { whoisContact.odataType = n.getStringValue(); },
        "organization": n => { whoisContact.organization = n.getStringValue(); },
        "telephone": n => { whoisContact.telephone = n.getStringValue(); },
    }
}
export function serializeWhoisContact(writer: SerializationWriter, whoisContact: WhoisContact | undefined = {} as WhoisContact) : void {
    writer.writeObjectValue<PhysicalAddress>("address", whoisContact.address, serializePhysicalAddress);
    writer.writeStringValue("email", whoisContact.email);
    writer.writeStringValue("fax", whoisContact.fax);
    writer.writeStringValue("name", whoisContact.name);
    writer.writeStringValue("@odata.type", whoisContact.odataType);
    writer.writeStringValue("organization", whoisContact.organization);
    writer.writeStringValue("telephone", whoisContact.telephone);
    writer.writeAdditionalData(whoisContact.additionalData);
}
export interface WhoisContact extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The physical address of the entity.
     */
    address?: PhysicalAddress;
    /**
     * The email of this WHOIS contact.
     */
    email?: string;
    /**
     * The fax of this WHOIS contact. No format is guaranteed.
     */
    fax?: string;
    /**
     * The name of this WHOIS contact.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The organization of this WHOIS contact.
     */
    organization?: string;
    /**
     * The telephone of this WHOIS contact. No format is guaranteed.
     */
    telephone?: string;
}
// tslint:enable
// eslint-enable
