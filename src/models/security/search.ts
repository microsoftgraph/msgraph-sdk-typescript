// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from '../identitySet';
import { deserializeIntoEdiscoveryReviewSetQuery } from './ediscoveryReviewSetQuery';
import { deserializeIntoEdiscoverySearch } from './ediscoverySearch';
import { type EdiscoveryReviewSetQuery, type EdiscoverySearch } from './index';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSearchFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.ediscoveryReviewSetQuery":
                    return deserializeIntoEdiscoveryReviewSetQuery;
                case "#microsoft.graph.security.ediscoverySearch":
                    return deserializeIntoEdiscoverySearch;
            }
        }
    }
    return deserializeIntoSearch;
}
export function deserializeIntoSearch(search: Search | undefined = {} as Search) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(search),
        "contentQuery": n => { search.contentQuery = n.getStringValue(); },
        "createdBy": n => { search.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { search.createdDateTime = n.getDateValue(); },
        "description": n => { search.description = n.getStringValue(); },
        "displayName": n => { search.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { search.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { search.lastModifiedDateTime = n.getDateValue(); },
    }
}
export interface Search extends Entity, Parsable {
    /**
     * The contentQuery property
     */
    contentQuery?: string;
    /**
     * The createdBy property
     */
    createdBy?: IdentitySet;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The description property
     */
    description?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The lastModifiedBy property
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The lastModifiedDateTime property
     */
    lastModifiedDateTime?: Date;
}
export function serializeSearch(writer: SerializationWriter, search: Search | undefined = {} as Search) : void {
        serializeEntity(writer, search)
        writer.writeStringValue("contentQuery", search.contentQuery);
        writer.writeObjectValue<IdentitySet>("createdBy", search.createdBy, );
        writer.writeDateValue("createdDateTime", search.createdDateTime);
        writer.writeStringValue("description", search.description);
        writer.writeStringValue("displayName", search.displayName);
        writer.writeObjectValue<IdentitySet>("lastModifiedBy", search.lastModifiedBy, );
        writer.writeDateValue("lastModifiedDateTime", search.lastModifiedDateTime);
}
// tslint:enable
// eslint-enable
