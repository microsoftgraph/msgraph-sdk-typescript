// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createHostPortBannerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoHostPortBanner;
}
export function deserializeIntoHostPortBanner(hostPortBanner: HostPortBanner | undefined = {} as HostPortBanner) : Record<string, (node: ParseNode) => void> {
    return {
        "banner": n => { hostPortBanner.banner = n.getStringValue(); },
        "firstSeenDateTime": n => { hostPortBanner.firstSeenDateTime = n.getDateValue(); },
        "lastSeenDateTime": n => { hostPortBanner.lastSeenDateTime = n.getDateValue(); },
        "@odata.type": n => { hostPortBanner.odataType = n.getStringValue(); },
        "scanProtocol": n => { hostPortBanner.scanProtocol = n.getStringValue(); },
        "timesObserved": n => { hostPortBanner.timesObserved = n.getNumberValue(); },
    }
}
export interface HostPortBanner extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The text response received from a web component when scanning a hostPort.
     */
    banner?: string;
    /**
     * The first date and time when Microsoft Defender Threat Intelligence observed the hostPortBanner. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The last date and time when Microsoft Defender Threat Intelligence observed the hostPortBanner. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The specific protocol used to scan the hostPort.
     */
    scanProtocol?: string;
    /**
     * The total amount of times that Microsoft Defender Threat Intelligence has observed the hostPortBanner in all its scans.
     */
    timesObserved?: number;
}
export function serializeHostPortBanner(writer: SerializationWriter, hostPortBanner: HostPortBanner | undefined = {} as HostPortBanner) : void {
        writer.writeStringValue("banner", hostPortBanner.banner);
        writer.writeDateValue("firstSeenDateTime", hostPortBanner.firstSeenDateTime);
        writer.writeDateValue("lastSeenDateTime", hostPortBanner.lastSeenDateTime);
        writer.writeStringValue("@odata.type", hostPortBanner.odataType);
        writer.writeStringValue("scanProtocol", hostPortBanner.scanProtocol);
        writer.writeNumberValue("timesObserved", hostPortBanner.timesObserved);
        writer.writeAdditionalData(hostPortBanner.additionalData);
}
// tslint:enable
// eslint-enable
