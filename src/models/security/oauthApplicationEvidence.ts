// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAlertEvidence, serializeAlertEvidence, type AlertEvidence } from './alertEvidence';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOauthApplicationEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOauthApplicationEvidence;
}
export function deserializeIntoOauthApplicationEvidence(oauthApplicationEvidence: OauthApplicationEvidence | undefined = {} as OauthApplicationEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(oauthApplicationEvidence),
        "appId": n => { oauthApplicationEvidence.appId = n.getStringValue(); },
        "displayName": n => { oauthApplicationEvidence.displayName = n.getStringValue(); },
        "objectId": n => { oauthApplicationEvidence.objectId = n.getStringValue(); },
        "publisher": n => { oauthApplicationEvidence.publisher = n.getStringValue(); },
    }
}
export interface OauthApplicationEvidence extends AlertEvidence, Parsable {
    /**
     * Unique identifier of the application.
     */
    appId?: string;
    /**
     * Name of the application.
     */
    displayName?: string;
    /**
     * The unique identifier of the application object in Azure AD.
     */
    objectId?: string;
    /**
     * The name of the application publisher.
     */
    publisher?: string;
}
export function serializeOauthApplicationEvidence(writer: SerializationWriter, oauthApplicationEvidence: OauthApplicationEvidence | undefined = {} as OauthApplicationEvidence) : void {
        serializeAlertEvidence(writer, oauthApplicationEvidence)
        writer.writeStringValue("appId", oauthApplicationEvidence.appId);
        writer.writeStringValue("displayName", oauthApplicationEvidence.displayName);
        writer.writeStringValue("objectId", oauthApplicationEvidence.objectId);
        writer.writeStringValue("publisher", oauthApplicationEvidence.publisher);
}
// tslint:enable
// eslint-enable
