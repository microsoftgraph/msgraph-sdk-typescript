// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAlertEvidence, serializeAlertEvidence, type AlertEvidence } from './alertEvidence';
import { createAzureResourceEvidenceFromDiscriminatorValue, serializeAzureResourceEvidence, type AzureResourceEvidence } from './azureResourceEvidence';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BlobContainerEvidence extends AlertEvidence, Parsable {
    /**
     * The name of the blob container.
     */
    name?: string;
    /**
     * The storage which the blob container belongs to.
     */
    storageResource?: AzureResourceEvidence;
    /**
     * The full URL representation of the blob container.
     */
    url?: string;
}
export function createBlobContainerEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBlobContainerEvidence;
}
export function deserializeIntoBlobContainerEvidence(blobContainerEvidence: BlobContainerEvidence | undefined = {} as BlobContainerEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(blobContainerEvidence),
        "name": n => { blobContainerEvidence.name = n.getStringValue(); },
        "storageResource": n => { blobContainerEvidence.storageResource = n.getObjectValue<AzureResourceEvidence>(createAzureResourceEvidenceFromDiscriminatorValue); },
        "url": n => { blobContainerEvidence.url = n.getStringValue(); },
    }
}
export function serializeBlobContainerEvidence(writer: SerializationWriter, blobContainerEvidence: BlobContainerEvidence | undefined = {} as BlobContainerEvidence) : void {
        serializeAlertEvidence(writer, blobContainerEvidence)
        writer.writeStringValue("name", blobContainerEvidence.name);
        writer.writeObjectValue<AzureResourceEvidence>("storageResource", blobContainerEvidence.storageResource, );
        writer.writeStringValue("url", blobContainerEvidence.url);
}
// tslint:enable
// eslint-enable
