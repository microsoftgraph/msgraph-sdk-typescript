// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { FileHashAlgorithm } from './fileHashAlgorithm';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFileHashFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFileHash;
}
export function deserializeIntoFileHash(fileHash: FileHash | undefined = {} as FileHash) : Record<string, (node: ParseNode) => void> {
    return {
        "algorithm": n => { fileHash.algorithm = n.getEnumValue<FileHashAlgorithm>(FileHashAlgorithm); },
        "@odata.type": n => { fileHash.odataType = n.getStringValue(); },
        "value": n => { fileHash.value = n.getStringValue(); },
    }
}
export interface FileHash extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The algorithm property
     */
    algorithm?: FileHashAlgorithm;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The hash value.
     */
    value?: string;
}
export function serializeFileHash(writer: SerializationWriter, fileHash: FileHash | undefined = {} as FileHash) : void {
        writer.writeEnumValue<FileHashAlgorithm>("algorithm", fileHash.algorithm);
        writer.writeStringValue("@odata.type", fileHash.odataType);
        writer.writeStringValue("value", fileHash.value);
        writer.writeAdditionalData(fileHash.additionalData);
}
// tslint:enable
// eslint-enable
