import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { deserializeIntoArticleIndicator } from './articleIndicator';
import { createArtifactFromDiscriminatorValue, serializeArtifact, type Artifact } from './artifact';
import { type ArticleIndicator, type IntelligenceProfileIndicator } from './index';
import { IndicatorSource } from './indicatorSource';
import { deserializeIntoIntelligenceProfileIndicator } from './intelligenceProfileIndicator';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createIndicatorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.articleIndicator":
                    return deserializeIntoArticleIndicator;
                case "#microsoft.graph.security.intelligenceProfileIndicator":
                    return deserializeIntoIntelligenceProfileIndicator;
            }
        }
    }
    return deserializeIntoIndicator;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoIndicator(indicator: Indicator | undefined = {} as Indicator) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(indicator),
        "artifact": n => { indicator.artifact = n.getObjectValue<Artifact>(createArtifactFromDiscriminatorValue); },
        "source": n => { indicator.source = n.getEnumValue<IndicatorSource>(IndicatorSource); },
    }
}
export interface Indicator extends Entity, Parsable {
    /**
     * The artifact property
     */
    artifact?: Artifact;
    /**
     * The source property
     */
    source?: IndicatorSource;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeIndicator(writer: SerializationWriter, indicator: Indicator | undefined = {} as Indicator) : void {
        serializeEntity(writer, indicator)
        writer.writeObjectValue<Artifact>("artifact", indicator.artifact, );
        writer.writeEnumValue<IndicatorSource>("source", indicator.source);
}
