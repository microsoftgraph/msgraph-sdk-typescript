// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createHuntingRowResultFromDiscriminatorValue, serializeHuntingRowResult, type HuntingRowResult } from './huntingRowResult';
import { createSinglePropertySchemaFromDiscriminatorValue, serializeSinglePropertySchema, type SinglePropertySchema } from './singlePropertySchema';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createHuntingQueryResultsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoHuntingQueryResults;
}
export function deserializeIntoHuntingQueryResults(huntingQueryResults: HuntingQueryResults | undefined = {} as HuntingQueryResults) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { huntingQueryResults.odataType = n.getStringValue(); },
        "results": n => { huntingQueryResults.results = n.getCollectionOfObjectValues<HuntingRowResult>(createHuntingRowResultFromDiscriminatorValue); },
        "schema": n => { huntingQueryResults.schema = n.getCollectionOfObjectValues<SinglePropertySchema>(createSinglePropertySchemaFromDiscriminatorValue); },
    }
}
export interface HuntingQueryResults extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The results of the hunting query.
     */
    results?: HuntingRowResult[];
    /**
     * The schema for the response.
     */
    schema?: SinglePropertySchema[];
}
export function serializeHuntingQueryResults(writer: SerializationWriter, huntingQueryResults: HuntingQueryResults | undefined = {} as HuntingQueryResults) : void {
        writer.writeStringValue("@odata.type", huntingQueryResults.odataType);
        writer.writeCollectionOfObjectValues<HuntingRowResult>("results", huntingQueryResults.results, serializeHuntingRowResult);
        writer.writeCollectionOfObjectValues<SinglePropertySchema>("schema", huntingQueryResults.schema, serializeSinglePropertySchema);
        writer.writeAdditionalData(huntingQueryResults.additionalData);
}
// tslint:enable
// eslint-enable
