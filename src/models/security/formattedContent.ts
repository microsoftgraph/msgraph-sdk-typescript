// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ContentFormat } from './contentFormat';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFormattedContentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFormattedContent;
}
export function deserializeIntoFormattedContent(formattedContent: FormattedContent | undefined = {} as FormattedContent) : Record<string, (node: ParseNode) => void> {
    return {
        "content": n => { formattedContent.content = n.getStringValue(); },
        "format": n => { formattedContent.format = n.getEnumValue<ContentFormat>(ContentFormat); },
        "@odata.type": n => { formattedContent.odataType = n.getStringValue(); },
    }
}
export interface FormattedContent extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The content of this formattedContent.
     */
    content?: string;
    /**
     * The format of the content. The possible values are: text, html, markdown, unknownFutureValue.
     */
    format?: ContentFormat;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeFormattedContent(writer: SerializationWriter, formattedContent: FormattedContent | undefined = {} as FormattedContent) : void {
        writer.writeStringValue("content", formattedContent.content);
        writer.writeEnumValue<ContentFormat>("format", formattedContent.format);
        writer.writeStringValue("@odata.type", formattedContent.odataType);
        writer.writeAdditionalData(formattedContent.additionalData);
}
// tslint:enable
// eslint-enable
