// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createHostFromDiscriminatorValue, serializeHost, type Host } from './host';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createHostPairFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoHostPair;
}
export function deserializeIntoHostPair(hostPair: HostPair | undefined = {} as HostPair) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(hostPair),
        "childHost": n => { hostPair.childHost = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "firstSeenDateTime": n => { hostPair.firstSeenDateTime = n.getDateValue(); },
        "lastSeenDateTime": n => { hostPair.lastSeenDateTime = n.getDateValue(); },
        "linkKind": n => { hostPair.linkKind = n.getStringValue(); },
        "parentHost": n => { hostPair.parentHost = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
    }
}
export interface HostPair extends Entity, Parsable {
    /**
     * The childHost property
     */
    childHost?: Host;
    /**
     * The date and time when Microsoft Defender Threat Intelligence first observed the hostPair. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The date and time when Microsoft Defender Threat Intelligence last observed the hostPair. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The reason that two hosts are identified as hostPair.
     */
    linkKind?: string;
    /**
     * The parentHost property
     */
    parentHost?: Host;
}
export function serializeHostPair(writer: SerializationWriter, hostPair: HostPair | undefined = {} as HostPair) : void {
    serializeEntity(writer, hostPair)
    writer.writeObjectValue<Host>("childHost", hostPair.childHost, serializeHost);
    writer.writeDateValue("firstSeenDateTime", hostPair.firstSeenDateTime);
    writer.writeDateValue("lastSeenDateTime", hostPair.lastSeenDateTime);
    writer.writeStringValue("linkKind", hostPair.linkKind);
    writer.writeObjectValue<Host>("parentHost", hostPair.parentHost, serializeHost);
}
// tslint:enable
// eslint-enable
