// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSinglePropertySchemaFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSinglePropertySchema;
}
export function deserializeIntoSinglePropertySchema(singlePropertySchema: SinglePropertySchema | undefined = {} as SinglePropertySchema) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { singlePropertySchema.name = n.getStringValue(); },
        "@odata.type": n => { singlePropertySchema.odataType = n.getStringValue(); },
        "type": n => { singlePropertySchema.type = n.getStringValue(); },
    }
}
export function serializeSinglePropertySchema(writer: SerializationWriter, singlePropertySchema: SinglePropertySchema | undefined = {} as SinglePropertySchema) : void {
        writer.writeStringValue("name", singlePropertySchema.name);
        writer.writeStringValue("@odata.type", singlePropertySchema.odataType);
        writer.writeStringValue("type", singlePropertySchema.type);
        writer.writeAdditionalData(singlePropertySchema.additionalData);
}
export interface SinglePropertySchema extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name of the property.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The type of the property.
     */
    type?: string;
}
// tslint:enable
// eslint-enable
