// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLoggedOnUserFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLoggedOnUser;
}
export function deserializeIntoLoggedOnUser(loggedOnUser: LoggedOnUser | undefined = {} as LoggedOnUser) : Record<string, (node: ParseNode) => void> {
    return {
        "accountName": n => { loggedOnUser.accountName = n.getStringValue(); },
        "domainName": n => { loggedOnUser.domainName = n.getStringValue(); },
        "@odata.type": n => { loggedOnUser.odataType = n.getStringValue(); },
    }
}
export interface LoggedOnUser extends AdditionalDataHolder, Parsable {
    /**
     * User account name of the logged-on user.
     */
    accountName?: string;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * User account domain of the logged-on user.
     */
    domainName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeLoggedOnUser(writer: SerializationWriter, loggedOnUser: LoggedOnUser | undefined = {} as LoggedOnUser) : void {
    writer.writeStringValue("accountName", loggedOnUser.accountName);
    writer.writeStringValue("domainName", loggedOnUser.domainName);
    writer.writeStringValue("@odata.type", loggedOnUser.odataType);
    writer.writeAdditionalData(loggedOnUser.additionalData);
}
// tslint:enable
// eslint-enable
