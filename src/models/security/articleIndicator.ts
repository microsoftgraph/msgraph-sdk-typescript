import { deserializeIntoIndicator, serializeIndicator, type Indicator } from './indicator';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ArticleIndicator extends Indicator, Parsable {
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createArticleIndicatorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoArticleIndicator;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoArticleIndicator(articleIndicator: ArticleIndicator | undefined = {} as ArticleIndicator) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIndicator(articleIndicator),
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeArticleIndicator(writer: SerializationWriter, articleIndicator: ArticleIndicator | undefined = {} as ArticleIndicator) : void {
        serializeIndicator(writer, articleIndicator)
}
