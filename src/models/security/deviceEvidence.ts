// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAlertEvidence, serializeAlertEvidence, type AlertEvidence } from './alertEvidence';
import { DefenderAvStatus } from './defenderAvStatus';
import { DeviceHealthStatus } from './deviceHealthStatus';
import { DeviceRiskScore } from './deviceRiskScore';
import { createLoggedOnUserFromDiscriminatorValue, serializeLoggedOnUser, type LoggedOnUser } from './loggedOnUser';
import { OnboardingStatus } from './onboardingStatus';
import { createVmMetadataFromDiscriminatorValue, serializeVmMetadata, type VmMetadata } from './vmMetadata';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceEvidence;
}
export function deserializeIntoDeviceEvidence(deviceEvidence: DeviceEvidence | undefined = {} as DeviceEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(deviceEvidence),
        "azureAdDeviceId": n => { deviceEvidence.azureAdDeviceId = n.getStringValue(); },
        "defenderAvStatus": n => { deviceEvidence.defenderAvStatus = n.getEnumValue<DefenderAvStatus>(DefenderAvStatus); },
        "deviceDnsName": n => { deviceEvidence.deviceDnsName = n.getStringValue(); },
        "firstSeenDateTime": n => { deviceEvidence.firstSeenDateTime = n.getDateValue(); },
        "healthStatus": n => { deviceEvidence.healthStatus = n.getEnumValue<DeviceHealthStatus>(DeviceHealthStatus); },
        "ipInterfaces": n => { deviceEvidence.ipInterfaces = n.getCollectionOfPrimitiveValues<string>(); },
        "loggedOnUsers": n => { deviceEvidence.loggedOnUsers = n.getCollectionOfObjectValues<LoggedOnUser>(createLoggedOnUserFromDiscriminatorValue); },
        "mdeDeviceId": n => { deviceEvidence.mdeDeviceId = n.getStringValue(); },
        "onboardingStatus": n => { deviceEvidence.onboardingStatus = n.getEnumValue<OnboardingStatus>(OnboardingStatus); },
        "osBuild": n => { deviceEvidence.osBuild = n.getNumberValue(); },
        "osPlatform": n => { deviceEvidence.osPlatform = n.getStringValue(); },
        "rbacGroupId": n => { deviceEvidence.rbacGroupId = n.getNumberValue(); },
        "rbacGroupName": n => { deviceEvidence.rbacGroupName = n.getStringValue(); },
        "riskScore": n => { deviceEvidence.riskScore = n.getEnumValue<DeviceRiskScore>(DeviceRiskScore); },
        "version": n => { deviceEvidence.version = n.getStringValue(); },
        "vmMetadata": n => { deviceEvidence.vmMetadata = n.getObjectValue<VmMetadata>(createVmMetadataFromDiscriminatorValue); },
    }
}
export interface DeviceEvidence extends AlertEvidence, Parsable {
    /**
     * A unique identifier assigned to a device by Microsoft Entra ID when device is Microsoft Entra joined.
     */
    azureAdDeviceId?: string;
    /**
     * State of the Defender AntiMalware engine. The possible values are: notReporting, disabled, notUpdated, updated, unknown, notSupported, unknownFutureValue.
     */
    defenderAvStatus?: DefenderAvStatus;
    /**
     * The fully qualified domain name (FQDN) for the device.
     */
    deviceDnsName?: string;
    /**
     * The date and time when the device was first seen.
     */
    firstSeenDateTime?: Date;
    /**
     * The health state of the device. The possible values are: active, inactive, impairedCommunication, noSensorData, noSensorDataImpairedCommunication, unknown, unknownFutureValue.
     */
    healthStatus?: DeviceHealthStatus;
    /**
     * Ip interfaces of the device during the time of the alert.
     */
    ipInterfaces?: string[];
    /**
     * Users that were logged on the machine during the time of the alert.
     */
    loggedOnUsers?: LoggedOnUser[];
    /**
     * A unique identifier assigned to a device by Microsoft Defender for Endpoint.
     */
    mdeDeviceId?: string;
    /**
     * The status of the machine onboarding to Microsoft Defender for Endpoint. The possible values are: insufficientInfo, onboarded, canBeOnboarded, unsupported, unknownFutureValue.
     */
    onboardingStatus?: OnboardingStatus;
    /**
     * The build version for the operating system the device is running.
     */
    osBuild?: number;
    /**
     * The operating system platform the device is running.
     */
    osPlatform?: string;
    /**
     * The ID of the role-based access control (RBAC) device group.
     */
    rbacGroupId?: number;
    /**
     * The name of the RBAC device group.
     */
    rbacGroupName?: string;
    /**
     * Risk score as evaluated by Microsoft Defender for Endpoint. The possible values are: none, informational, low, medium, high, unknownFutureValue.
     */
    riskScore?: DeviceRiskScore;
    /**
     * The version of the operating system platform.
     */
    version?: string;
    /**
     * Metadata of the virtual machine (VM) on which Microsoft Defender for Endpoint is running.
     */
    vmMetadata?: VmMetadata;
}
export function serializeDeviceEvidence(writer: SerializationWriter, deviceEvidence: DeviceEvidence | undefined = {} as DeviceEvidence) : void {
        serializeAlertEvidence(writer, deviceEvidence)
        writer.writeStringValue("azureAdDeviceId", deviceEvidence.azureAdDeviceId);
        writer.writeEnumValue<DefenderAvStatus>("defenderAvStatus", deviceEvidence.defenderAvStatus);
        writer.writeStringValue("deviceDnsName", deviceEvidence.deviceDnsName);
        writer.writeDateValue("firstSeenDateTime", deviceEvidence.firstSeenDateTime);
        writer.writeEnumValue<DeviceHealthStatus>("healthStatus", deviceEvidence.healthStatus);
        writer.writeCollectionOfPrimitiveValues<string>("ipInterfaces", deviceEvidence.ipInterfaces);
        writer.writeCollectionOfObjectValues<LoggedOnUser>("loggedOnUsers", deviceEvidence.loggedOnUsers, );
        writer.writeStringValue("mdeDeviceId", deviceEvidence.mdeDeviceId);
        writer.writeEnumValue<OnboardingStatus>("onboardingStatus", deviceEvidence.onboardingStatus);
        writer.writeNumberValue("osBuild", deviceEvidence.osBuild);
        writer.writeStringValue("osPlatform", deviceEvidence.osPlatform);
        writer.writeNumberValue("rbacGroupId", deviceEvidence.rbacGroupId);
        writer.writeStringValue("rbacGroupName", deviceEvidence.rbacGroupName);
        writer.writeEnumValue<DeviceRiskScore>("riskScore", deviceEvidence.riskScore);
        writer.writeStringValue("version", deviceEvidence.version);
        writer.writeObjectValue<VmMetadata>("vmMetadata", deviceEvidence.vmMetadata, );
}
// tslint:enable
// eslint-enable
