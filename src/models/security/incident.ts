// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createAlertFromDiscriminatorValue, serializeAlert, type Alert } from './alert';
import { AlertClassification } from './alertClassification';
import { createAlertCommentFromDiscriminatorValue, serializeAlertComment, type AlertComment } from './alertComment';
import { AlertDetermination } from './alertDetermination';
import { AlertSeverity } from './alertSeverity';
import { IncidentStatus } from './incidentStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIncidentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIncident;
}
export function deserializeIntoIncident(incident: Incident | undefined = {} as Incident) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(incident),
        "alerts": n => { incident.alerts = n.getCollectionOfObjectValues<Alert>(createAlertFromDiscriminatorValue); },
        "assignedTo": n => { incident.assignedTo = n.getStringValue(); },
        "classification": n => { incident.classification = n.getEnumValue<AlertClassification>(AlertClassification); },
        "comments": n => { incident.comments = n.getCollectionOfObjectValues<AlertComment>(createAlertCommentFromDiscriminatorValue); },
        "createdDateTime": n => { incident.createdDateTime = n.getDateValue(); },
        "customTags": n => { incident.customTags = n.getCollectionOfPrimitiveValues<string>(); },
        "description": n => { incident.description = n.getStringValue(); },
        "determination": n => { incident.determination = n.getEnumValue<AlertDetermination>(AlertDetermination); },
        "displayName": n => { incident.displayName = n.getStringValue(); },
        "incidentWebUrl": n => { incident.incidentWebUrl = n.getStringValue(); },
        "lastModifiedBy": n => { incident.lastModifiedBy = n.getStringValue(); },
        "lastUpdateDateTime": n => { incident.lastUpdateDateTime = n.getDateValue(); },
        "redirectIncidentId": n => { incident.redirectIncidentId = n.getStringValue(); },
        "severity": n => { incident.severity = n.getEnumValue<AlertSeverity>(AlertSeverity); },
        "status": n => { incident.status = n.getEnumValue<IncidentStatus>(IncidentStatus); },
        "systemTags": n => { incident.systemTags = n.getCollectionOfPrimitiveValues<string>(); },
        "tenantId": n => { incident.tenantId = n.getStringValue(); },
    }
}
export interface Incident extends Entity, Parsable {
    /**
     * The list of related alerts. Supports $expand.
     */
    alerts?: Alert[];
    /**
     * Owner of the incident, or null if no owner is assigned. Free editable text.
     */
    assignedTo?: string;
    /**
     * The specification for the incident. Possible values are: unknown, falsePositive, truePositive, informationalExpectedActivity, unknownFutureValue.
     */
    classification?: AlertClassification;
    /**
     * Array of comments created by the Security Operations (SecOps) team when the incident is managed.
     */
    comments?: AlertComment[];
    /**
     * Time when the incident was first created.
     */
    createdDateTime?: Date;
    /**
     * Array of custom tags associated with an incident.
     */
    customTags?: string[];
    /**
     * The description property
     */
    description?: string;
    /**
     * Specifies the determination of the incident. Possible values are: unknown, apt, malware, securityPersonnel, securityTesting, unwantedSoftware, other, multiStagedAttack, compromisedUser, phishing, maliciousUserActivity, clean, insufficientData, confirmedUserActivity, lineOfBusinessApplication, unknownFutureValue.
     */
    determination?: AlertDetermination;
    /**
     * The incident name.
     */
    displayName?: string;
    /**
     * The URL for the incident page in the Microsoft 365 Defender portal.
     */
    incidentWebUrl?: string;
    /**
     * The lastModifiedBy property
     */
    lastModifiedBy?: string;
    /**
     * Time when the incident was last updated.
     */
    lastUpdateDateTime?: Date;
    /**
     * Only populated in case an incident is grouped together with another incident, as part of the logic that processes incidents. In such a case, the status property is redirected.
     */
    redirectIncidentId?: string;
    /**
     * The severity property
     */
    severity?: AlertSeverity;
    /**
     * The status property
     */
    status?: IncidentStatus;
    /**
     * The systemTags property
     */
    systemTags?: string[];
    /**
     * The Microsoft Entra tenant in which the alert was created.
     */
    tenantId?: string;
}
export function serializeIncident(writer: SerializationWriter, incident: Incident | undefined = {} as Incident) : void {
        serializeEntity(writer, incident)
        writer.writeCollectionOfObjectValues<Alert>("alerts", incident.alerts, );
        writer.writeStringValue("assignedTo", incident.assignedTo);
        writer.writeEnumValue<AlertClassification>("classification", incident.classification);
        writer.writeCollectionOfObjectValues<AlertComment>("comments", incident.comments, );
        writer.writeDateValue("createdDateTime", incident.createdDateTime);
        writer.writeCollectionOfPrimitiveValues<string>("customTags", incident.customTags);
        writer.writeStringValue("description", incident.description);
        writer.writeEnumValue<AlertDetermination>("determination", incident.determination);
        writer.writeStringValue("displayName", incident.displayName);
        writer.writeStringValue("incidentWebUrl", incident.incidentWebUrl);
        writer.writeStringValue("lastModifiedBy", incident.lastModifiedBy);
        writer.writeDateValue("lastUpdateDateTime", incident.lastUpdateDateTime);
        writer.writeStringValue("redirectIncidentId", incident.redirectIncidentId);
        writer.writeEnumValue<AlertSeverity>("severity", incident.severity);
        writer.writeEnumValue<IncidentStatus>("status", incident.status);
        writer.writeCollectionOfPrimitiveValues<string>("systemTags", incident.systemTags);
        writer.writeStringValue("tenantId", incident.tenantId);
}
// tslint:enable
// eslint-enable
