import { deserializeIntoArtifact, serializeArtifact, type Artifact } from './artifact';
import { createHostComponentFromDiscriminatorValue, serializeHostComponent, type HostComponent } from './hostComponent';
import { createHostCookieFromDiscriminatorValue, serializeHostCookie, type HostCookie } from './hostCookie';
import { deserializeIntoHostname } from './hostname';
import { createHostPairFromDiscriminatorValue, serializeHostPair, type HostPair } from './hostPair';
import { createHostReputationFromDiscriminatorValue, serializeHostReputation, type HostReputation } from './hostReputation';
import { createHostSslCertificateFromDiscriminatorValue, serializeHostSslCertificate, type HostSslCertificate } from './hostSslCertificate';
import { createHostTrackerFromDiscriminatorValue, serializeHostTracker, type HostTracker } from './hostTracker';
import { type Hostname, type IpAddress } from './index';
import { deserializeIntoIpAddress } from './ipAddress';
import { createPassiveDnsRecordFromDiscriminatorValue, serializePassiveDnsRecord, type PassiveDnsRecord } from './passiveDnsRecord';
import { createSubdomainFromDiscriminatorValue, serializeSubdomain, type Subdomain } from './subdomain';
import { createWhoisRecordFromDiscriminatorValue, serializeWhoisRecord, type WhoisRecord } from './whoisRecord';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createHostFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.security.hostname":
                    return deserializeIntoHostname;
                case "#microsoft.graph.security.ipAddress":
                    return deserializeIntoIpAddress;
            }
        }
    }
    return deserializeIntoHost;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoHost(host: Host | undefined = {} as Host) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoArtifact(host),
        "childHostPairs": n => { host.childHostPairs = n.getCollectionOfObjectValues<HostPair>(createHostPairFromDiscriminatorValue); },
        "components": n => { host.components = n.getCollectionOfObjectValues<HostComponent>(createHostComponentFromDiscriminatorValue); },
        "cookies": n => { host.cookies = n.getCollectionOfObjectValues<HostCookie>(createHostCookieFromDiscriminatorValue); },
        "firstSeenDateTime": n => { host.firstSeenDateTime = n.getDateValue(); },
        "hostPairs": n => { host.hostPairs = n.getCollectionOfObjectValues<HostPair>(createHostPairFromDiscriminatorValue); },
        "lastSeenDateTime": n => { host.lastSeenDateTime = n.getDateValue(); },
        "parentHostPairs": n => { host.parentHostPairs = n.getCollectionOfObjectValues<HostPair>(createHostPairFromDiscriminatorValue); },
        "passiveDns": n => { host.passiveDns = n.getCollectionOfObjectValues<PassiveDnsRecord>(createPassiveDnsRecordFromDiscriminatorValue); },
        "passiveDnsReverse": n => { host.passiveDnsReverse = n.getCollectionOfObjectValues<PassiveDnsRecord>(createPassiveDnsRecordFromDiscriminatorValue); },
        "reputation": n => { host.reputation = n.getObjectValue<HostReputation>(createHostReputationFromDiscriminatorValue); },
        "sslCertificates": n => { host.sslCertificates = n.getCollectionOfObjectValues<HostSslCertificate>(createHostSslCertificateFromDiscriminatorValue); },
        "subdomains": n => { host.subdomains = n.getCollectionOfObjectValues<Subdomain>(createSubdomainFromDiscriminatorValue); },
        "trackers": n => { host.trackers = n.getCollectionOfObjectValues<HostTracker>(createHostTrackerFromDiscriminatorValue); },
        "whois": n => { host.whois = n.getObjectValue<WhoisRecord>(createWhoisRecordFromDiscriminatorValue); },
    }
}
export interface Host extends Artifact, Parsable {
    /**
     * The hostPairs that are resources associated with a host, where that host is the parentHost and has an outgoing pairing to a cihldHost.
     */
    childHostPairs?: HostPair[];
    /**
     * The hostComponents that are associated with this host.
     */
    components?: HostComponent[];
    /**
     * The hostCookies that are associated with this host.
     */
    cookies?: HostCookie[];
    /**
     * The first date and time when this host was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The hostPairs that are associated with this host, where this host is either the parentHost or childHost.
     */
    hostPairs?: HostPair[];
    /**
     * The most recent date and time when this host was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The hostPairs that are associated with a host, where that host is the childHost and has an incoming pairing with a parentHost.
     */
    parentHostPairs?: HostPair[];
    /**
     * Passive DNS retrieval about this host.
     */
    passiveDns?: PassiveDnsRecord[];
    /**
     * Reverse passive DNS retrieval about this host.
     */
    passiveDnsReverse?: PassiveDnsRecord[];
    /**
     * Represents a calculated reputation of this host.
     */
    reputation?: HostReputation;
    /**
     * The hostSslCertificates that are associated with this host.
     */
    sslCertificates?: HostSslCertificate[];
    /**
     * The subdomains that are associated with this host.
     */
    subdomains?: Subdomain[];
    /**
     * The hostTrackers that are associated with this host.
     */
    trackers?: HostTracker[];
    /**
     * The most recent whoisRecord for this host.
     */
    whois?: WhoisRecord;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeHost(writer: SerializationWriter, host: Host | undefined = {} as Host) : void {
        serializeArtifact(writer, host)
        writer.writeCollectionOfObjectValues<HostPair>("childHostPairs", host.childHostPairs, );
        writer.writeCollectionOfObjectValues<HostComponent>("components", host.components, );
        writer.writeCollectionOfObjectValues<HostCookie>("cookies", host.cookies, );
        writer.writeDateValue("firstSeenDateTime", host.firstSeenDateTime);
        writer.writeCollectionOfObjectValues<HostPair>("hostPairs", host.hostPairs, );
        writer.writeDateValue("lastSeenDateTime", host.lastSeenDateTime);
        writer.writeCollectionOfObjectValues<HostPair>("parentHostPairs", host.parentHostPairs, );
        writer.writeCollectionOfObjectValues<PassiveDnsRecord>("passiveDns", host.passiveDns, );
        writer.writeCollectionOfObjectValues<PassiveDnsRecord>("passiveDnsReverse", host.passiveDnsReverse, );
        writer.writeObjectValue<HostReputation>("reputation", host.reputation, );
        writer.writeCollectionOfObjectValues<HostSslCertificate>("sslCertificates", host.sslCertificates, );
        writer.writeCollectionOfObjectValues<Subdomain>("subdomains", host.subdomains, );
        writer.writeCollectionOfObjectValues<HostTracker>("trackers", host.trackers, );
        writer.writeObjectValue<WhoisRecord>("whois", host.whois, );
}
