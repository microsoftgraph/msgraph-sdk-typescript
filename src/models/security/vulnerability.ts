// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createArticleFromDiscriminatorValue, serializeArticle, type Article } from './article';
import { createCvssSummaryFromDiscriminatorValue, serializeCvssSummary, type CvssSummary } from './cvssSummary';
import { createFormattedContentFromDiscriminatorValue, serializeFormattedContent, type FormattedContent } from './formattedContent';
import { createHyperlinkFromDiscriminatorValue, serializeHyperlink, type Hyperlink } from './hyperlink';
import { createVulnerabilityComponentFromDiscriminatorValue, serializeVulnerabilityComponent, type VulnerabilityComponent } from './vulnerabilityComponent';
import { VulnerabilitySeverity } from './vulnerabilitySeverity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVulnerabilityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoVulnerability;
}
export function deserializeIntoVulnerability(vulnerability: Vulnerability | undefined = {} as Vulnerability) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(vulnerability),
        "activeExploitsObserved": n => { vulnerability.activeExploitsObserved = n.getBooleanValue(); },
        "articles": n => { vulnerability.articles = n.getCollectionOfObjectValues<Article>(createArticleFromDiscriminatorValue); },
        "commonWeaknessEnumerationIds": n => { vulnerability.commonWeaknessEnumerationIds = n.getCollectionOfPrimitiveValues<string>(); },
        "components": n => { vulnerability.components = n.getCollectionOfObjectValues<VulnerabilityComponent>(createVulnerabilityComponentFromDiscriminatorValue); },
        "createdDateTime": n => { vulnerability.createdDateTime = n.getDateValue(); },
        "cvss2Summary": n => { vulnerability.cvss2Summary = n.getObjectValue<CvssSummary>(createCvssSummaryFromDiscriminatorValue); },
        "cvss3Summary": n => { vulnerability.cvss3Summary = n.getObjectValue<CvssSummary>(createCvssSummaryFromDiscriminatorValue); },
        "description": n => { vulnerability.description = n.getObjectValue<FormattedContent>(createFormattedContentFromDiscriminatorValue); },
        "exploits": n => { vulnerability.exploits = n.getCollectionOfObjectValues<Hyperlink>(createHyperlinkFromDiscriminatorValue); },
        "exploitsAvailable": n => { vulnerability.exploitsAvailable = n.getBooleanValue(); },
        "hasChatter": n => { vulnerability.hasChatter = n.getBooleanValue(); },
        "lastModifiedDateTime": n => { vulnerability.lastModifiedDateTime = n.getDateValue(); },
        "priorityScore": n => { vulnerability.priorityScore = n.getNumberValue(); },
        "publishedDateTime": n => { vulnerability.publishedDateTime = n.getDateValue(); },
        "references": n => { vulnerability.references = n.getCollectionOfObjectValues<Hyperlink>(createHyperlinkFromDiscriminatorValue); },
        "remediation": n => { vulnerability.remediation = n.getObjectValue<FormattedContent>(createFormattedContentFromDiscriminatorValue); },
        "severity": n => { vulnerability.severity = n.getEnumValue<VulnerabilitySeverity>(VulnerabilitySeverity); },
    }
}
export function serializeVulnerability(writer: SerializationWriter, vulnerability: Vulnerability | undefined = {} as Vulnerability) : void {
        serializeEntity(writer, vulnerability)
        writer.writeBooleanValue("activeExploitsObserved", vulnerability.activeExploitsObserved);
        writer.writeCollectionOfObjectValues<Article>("articles", vulnerability.articles, );
        writer.writeCollectionOfPrimitiveValues<string>("commonWeaknessEnumerationIds", vulnerability.commonWeaknessEnumerationIds);
        writer.writeCollectionOfObjectValues<VulnerabilityComponent>("components", vulnerability.components, );
        writer.writeDateValue("createdDateTime", vulnerability.createdDateTime);
        writer.writeObjectValue<CvssSummary>("cvss2Summary", vulnerability.cvss2Summary, );
        writer.writeObjectValue<CvssSummary>("cvss3Summary", vulnerability.cvss3Summary, );
        writer.writeObjectValue<FormattedContent>("description", vulnerability.description, );
        writer.writeCollectionOfObjectValues<Hyperlink>("exploits", vulnerability.exploits, );
        writer.writeBooleanValue("exploitsAvailable", vulnerability.exploitsAvailable);
        writer.writeBooleanValue("hasChatter", vulnerability.hasChatter);
        writer.writeDateValue("lastModifiedDateTime", vulnerability.lastModifiedDateTime);
        writer.writeNumberValue("priorityScore", vulnerability.priorityScore);
        writer.writeDateValue("publishedDateTime", vulnerability.publishedDateTime);
        writer.writeCollectionOfObjectValues<Hyperlink>("references", vulnerability.references, );
        writer.writeObjectValue<FormattedContent>("remediation", vulnerability.remediation, );
        writer.writeEnumValue<VulnerabilitySeverity>("severity", vulnerability.severity);
}
export interface Vulnerability extends Entity, Parsable {
    /**
     * Indicates whether this vulnerability has any known exploits associated to known bad actors.
     */
    activeExploitsObserved?: boolean;
    /**
     * Articles related to this vulnerability.
     */
    articles?: Article[];
    /**
     * Community-defined common weakness enumerations (CWE).
     */
    commonWeaknessEnumerationIds?: string[];
    /**
     * Components related to this vulnerability article.
     */
    components?: VulnerabilityComponent[];
    /**
     * The date and time when this vulnerability article was first created.
     */
    createdDateTime?: Date;
    /**
     * The cvss2Summary property
     */
    cvss2Summary?: CvssSummary;
    /**
     * The cvss3Summary property
     */
    cvss3Summary?: CvssSummary;
    /**
     * The description property
     */
    description?: FormattedContent;
    /**
     * Known exploits for this vulnerability.
     */
    exploits?: Hyperlink[];
    /**
     * Indicates whether this vulnerability has exploits in public sources (such as Packetstorm or Exploit-DB) online.
     */
    exploitsAvailable?: boolean;
    /**
     * Indicates whether chatter about this vulnerability has been discovered online.
     */
    hasChatter?: boolean;
    /**
     * The date and time when this vulnerability article was most recently updated.
     */
    lastModifiedDateTime?: Date;
    /**
     * A unique algorithm that reflects the priority of a vulnerability based on the CVSS score, exploits, chatter, and linkage to malware. This property also evaluates the recency of these components so users can understand which vulnerability should be remediated first.
     */
    priorityScore?: number;
    /**
     * The date and time when this vulnerability article was published.
     */
    publishedDateTime?: Date;
    /**
     * Reference links where further information can be learned about this vulnerability.
     */
    references?: Hyperlink[];
    /**
     * Any known remediation steps.
     */
    remediation?: FormattedContent;
    /**
     * The severity property
     */
    severity?: VulnerabilitySeverity;
}
// tslint:enable
// eslint-enable
