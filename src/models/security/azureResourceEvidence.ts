// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAlertEvidence, serializeAlertEvidence, type AlertEvidence } from './alertEvidence';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AzureResourceEvidence extends AlertEvidence, Parsable {
    /**
     * The unique identifier for the Azure resource.
     */
    resourceId?: string;
    /**
     * The name of the resource.
     */
    resourceName?: string;
    /**
     * The type of the resource.
     */
    resourceType?: string;
}
export function createAzureResourceEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAzureResourceEvidence;
}
export function deserializeIntoAzureResourceEvidence(azureResourceEvidence: AzureResourceEvidence | undefined = {} as AzureResourceEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(azureResourceEvidence),
        "resourceId": n => { azureResourceEvidence.resourceId = n.getStringValue(); },
        "resourceName": n => { azureResourceEvidence.resourceName = n.getStringValue(); },
        "resourceType": n => { azureResourceEvidence.resourceType = n.getStringValue(); },
    }
}
export function serializeAzureResourceEvidence(writer: SerializationWriter, azureResourceEvidence: AzureResourceEvidence | undefined = {} as AzureResourceEvidence) : void {
    serializeAlertEvidence(writer, azureResourceEvidence)
    writer.writeStringValue("resourceId", azureResourceEvidence.resourceId);
    writer.writeStringValue("resourceName", azureResourceEvidence.resourceName);
    writer.writeStringValue("resourceType", azureResourceEvidence.resourceType);
}
// tslint:enable
// eslint-enable
