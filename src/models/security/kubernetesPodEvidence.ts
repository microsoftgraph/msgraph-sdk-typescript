// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAlertEvidence, serializeAlertEvidence, type AlertEvidence } from './alertEvidence';
import { createContainerEvidenceFromDiscriminatorValue, serializeContainerEvidence, type ContainerEvidence } from './containerEvidence';
import { createDictionaryFromDiscriminatorValue, serializeDictionary, type Dictionary } from './dictionary';
import { createIpEvidenceFromDiscriminatorValue, serializeIpEvidence, type IpEvidence } from './ipEvidence';
import { createKubernetesControllerEvidenceFromDiscriminatorValue, serializeKubernetesControllerEvidence, type KubernetesControllerEvidence } from './kubernetesControllerEvidence';
import { createKubernetesNamespaceEvidenceFromDiscriminatorValue, serializeKubernetesNamespaceEvidence, type KubernetesNamespaceEvidence } from './kubernetesNamespaceEvidence';
import { createKubernetesServiceAccountEvidenceFromDiscriminatorValue, serializeKubernetesServiceAccountEvidence, type KubernetesServiceAccountEvidence } from './kubernetesServiceAccountEvidence';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createKubernetesPodEvidenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoKubernetesPodEvidence;
}
export function deserializeIntoKubernetesPodEvidence(kubernetesPodEvidence: KubernetesPodEvidence | undefined = {} as KubernetesPodEvidence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAlertEvidence(kubernetesPodEvidence),
        "containers": n => { kubernetesPodEvidence.containers = n.getCollectionOfObjectValues<ContainerEvidence>(createContainerEvidenceFromDiscriminatorValue); },
        "controller": n => { kubernetesPodEvidence.controller = n.getObjectValue<KubernetesControllerEvidence>(createKubernetesControllerEvidenceFromDiscriminatorValue); },
        "ephemeralContainers": n => { kubernetesPodEvidence.ephemeralContainers = n.getCollectionOfObjectValues<ContainerEvidence>(createContainerEvidenceFromDiscriminatorValue); },
        "initContainers": n => { kubernetesPodEvidence.initContainers = n.getCollectionOfObjectValues<ContainerEvidence>(createContainerEvidenceFromDiscriminatorValue); },
        "labels": n => { kubernetesPodEvidence.labels = n.getObjectValue<Dictionary>(createDictionaryFromDiscriminatorValue); },
        "name": n => { kubernetesPodEvidence.name = n.getStringValue(); },
        "namespace": n => { kubernetesPodEvidence.namespace = n.getObjectValue<KubernetesNamespaceEvidence>(createKubernetesNamespaceEvidenceFromDiscriminatorValue); },
        "podIp": n => { kubernetesPodEvidence.podIp = n.getObjectValue<IpEvidence>(createIpEvidenceFromDiscriminatorValue); },
        "serviceAccount": n => { kubernetesPodEvidence.serviceAccount = n.getObjectValue<KubernetesServiceAccountEvidence>(createKubernetesServiceAccountEvidenceFromDiscriminatorValue); },
    }
}
export interface KubernetesPodEvidence extends AlertEvidence, Parsable {
    /**
     * The list of pod containers which are not init or ephemeral containers.
     */
    containers?: ContainerEvidence[];
    /**
     * The pod controller.
     */
    controller?: KubernetesControllerEvidence;
    /**
     * The list of pod ephemeral containers.
     */
    ephemeralContainers?: ContainerEvidence[];
    /**
     * The list of pod init containers.
     */
    initContainers?: ContainerEvidence[];
    /**
     * The pod labels.
     */
    labels?: Dictionary;
    /**
     * The pod name.
     */
    name?: string;
    /**
     * The pod namespace.
     */
    namespace?: KubernetesNamespaceEvidence;
    /**
     * The pod IP.
     */
    podIp?: IpEvidence;
    /**
     * The pod service account.
     */
    serviceAccount?: KubernetesServiceAccountEvidence;
}
export function serializeKubernetesPodEvidence(writer: SerializationWriter, kubernetesPodEvidence: KubernetesPodEvidence | undefined = {} as KubernetesPodEvidence) : void {
        serializeAlertEvidence(writer, kubernetesPodEvidence)
        writer.writeCollectionOfObjectValues<ContainerEvidence>("containers", kubernetesPodEvidence.containers, serializeContainerEvidence);
        writer.writeObjectValue<KubernetesControllerEvidence>("controller", kubernetesPodEvidence.controller, serializeKubernetesControllerEvidence);
        writer.writeCollectionOfObjectValues<ContainerEvidence>("ephemeralContainers", kubernetesPodEvidence.ephemeralContainers, serializeContainerEvidence);
        writer.writeCollectionOfObjectValues<ContainerEvidence>("initContainers", kubernetesPodEvidence.initContainers, serializeContainerEvidence);
        writer.writeObjectValue<Dictionary>("labels", kubernetesPodEvidence.labels, serializeDictionary);
        writer.writeStringValue("name", kubernetesPodEvidence.name);
        writer.writeObjectValue<KubernetesNamespaceEvidence>("namespace", kubernetesPodEvidence.namespace, serializeKubernetesNamespaceEvidence);
        writer.writeObjectValue<IpEvidence>("podIp", kubernetesPodEvidence.podIp, serializeIpEvidence);
        writer.writeObjectValue<KubernetesServiceAccountEvidence>("serviceAccount", kubernetesPodEvidence.serviceAccount, serializeKubernetesServiceAccountEvidence);
}
// tslint:enable
// eslint-enable
