// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoArtifact, serializeArtifact, type Artifact } from './artifact';
import { createHostFromDiscriminatorValue, serializeHost, type Host } from './host';
import { createHostSslCertificatePortFromDiscriminatorValue, serializeHostSslCertificatePort, type HostSslCertificatePort } from './hostSslCertificatePort';
import { createSslCertificateFromDiscriminatorValue, serializeSslCertificate, type SslCertificate } from './sslCertificate';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createHostSslCertificateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoHostSslCertificate;
}
export function deserializeIntoHostSslCertificate(hostSslCertificate: HostSslCertificate | undefined = {} as HostSslCertificate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoArtifact(hostSslCertificate),
        "firstSeenDateTime": n => { hostSslCertificate.firstSeenDateTime = n.getDateValue(); },
        "host": n => { hostSslCertificate.host = n.getObjectValue<Host>(createHostFromDiscriminatorValue); },
        "lastSeenDateTime": n => { hostSslCertificate.lastSeenDateTime = n.getDateValue(); },
        "ports": n => { hostSslCertificate.ports = n.getCollectionOfObjectValues<HostSslCertificatePort>(createHostSslCertificatePortFromDiscriminatorValue); },
        "sslCertificate": n => { hostSslCertificate.sslCertificate = n.getObjectValue<SslCertificate>(createSslCertificateFromDiscriminatorValue); },
    }
}
export interface HostSslCertificate extends Artifact, Parsable {
    /**
     * The first date and time when this hostSslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    firstSeenDateTime?: Date;
    /**
     * The host for this hostSslCertificate.
     */
    host?: Host;
    /**
     * The most recent date and time when this hostSslCertificate was observed. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastSeenDateTime?: Date;
    /**
     * The ports related with this hostSslCertificate.
     */
    ports?: HostSslCertificatePort[];
    /**
     * The sslCertificate for this hostSslCertificate.
     */
    sslCertificate?: SslCertificate;
}
export function serializeHostSslCertificate(writer: SerializationWriter, hostSslCertificate: HostSslCertificate | undefined = {} as HostSslCertificate) : void {
        serializeArtifact(writer, hostSslCertificate)
        writer.writeDateValue("firstSeenDateTime", hostSslCertificate.firstSeenDateTime);
        writer.writeObjectValue<Host>("host", hostSslCertificate.host, );
        writer.writeDateValue("lastSeenDateTime", hostSslCertificate.lastSeenDateTime);
        writer.writeCollectionOfObjectValues<HostSslCertificatePort>("ports", hostSslCertificate.ports, );
        writer.writeObjectValue<SslCertificate>("sslCertificate", hostSslCertificate.sslCertificate, );
}
// tslint:enable
// eslint-enable
