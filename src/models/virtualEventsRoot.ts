// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createVirtualEventFromDiscriminatorValue, serializeVirtualEvent, type VirtualEvent } from './virtualEvent';
import { createVirtualEventWebinarFromDiscriminatorValue, serializeVirtualEventWebinar, type VirtualEventWebinar } from './virtualEventWebinar';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVirtualEventsRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoVirtualEventsRoot;
}
export function deserializeIntoVirtualEventsRoot(virtualEventsRoot: VirtualEventsRoot | undefined = {} as VirtualEventsRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(virtualEventsRoot),
        "events": n => { virtualEventsRoot.events = n.getCollectionOfObjectValues<VirtualEvent>(createVirtualEventFromDiscriminatorValue); },
        "webinars": n => { virtualEventsRoot.webinars = n.getCollectionOfObjectValues<VirtualEventWebinar>(createVirtualEventWebinarFromDiscriminatorValue); },
    }
}
export function serializeVirtualEventsRoot(writer: SerializationWriter, virtualEventsRoot: VirtualEventsRoot | undefined = {} as VirtualEventsRoot) : void {
    serializeEntity(writer, virtualEventsRoot)
    writer.writeCollectionOfObjectValues<VirtualEvent>("events", virtualEventsRoot.events, serializeVirtualEvent);
    writer.writeCollectionOfObjectValues<VirtualEventWebinar>("webinars", virtualEventsRoot.webinars, serializeVirtualEventWebinar);
}
export interface VirtualEventsRoot extends Entity, Parsable {
    /**
     * The events property
     */
    events?: VirtualEvent[];
    /**
     * The webinars property
     */
    webinars?: VirtualEventWebinar[];
}
// tslint:enable
// eslint-enable
