// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIncomingContextFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIncomingContext;
}
export function deserializeIntoIncomingContext(incomingContext: IncomingContext | undefined = {} as IncomingContext) : Record<string, (node: ParseNode) => void> {
    return {
        "observedParticipantId": n => { incomingContext.observedParticipantId = n.getStringValue(); },
        "@odata.type": n => { incomingContext.odataType = n.getStringValue(); },
        "onBehalfOf": n => { incomingContext.onBehalfOf = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "sourceParticipantId": n => { incomingContext.sourceParticipantId = n.getStringValue(); },
        "transferor": n => { incomingContext.transferor = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
    }
}
export interface IncomingContext extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The ID of the participant that is under observation. Read-only.
     */
    observedParticipantId?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The identity that the call is happening on behalf of.
     */
    onBehalfOf?: IdentitySet;
    /**
     * The ID of the participant that triggered the incoming call. Read-only.
     */
    sourceParticipantId?: string;
    /**
     * The identity that transferred the call.
     */
    transferor?: IdentitySet;
}
export function serializeIncomingContext(writer: SerializationWriter, incomingContext: IncomingContext | undefined = {} as IncomingContext) : void {
        writer.writeStringValue("observedParticipantId", incomingContext.observedParticipantId);
        writer.writeStringValue("@odata.type", incomingContext.odataType);
        writer.writeObjectValue<IdentitySet>("onBehalfOf", incomingContext.onBehalfOf, );
        writer.writeStringValue("sourceParticipantId", incomingContext.sourceParticipantId);
        writer.writeObjectValue<IdentitySet>("transferor", incomingContext.transferor, );
        writer.writeAdditionalData(incomingContext.additionalData);
}
// tslint:enable
// eslint-enable
