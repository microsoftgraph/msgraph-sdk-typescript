// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAudioConferencingFromDiscriminatorValue, serializeAudioConferencing, type AudioConferencing } from './audioConferencing';
import { createChatInfoFromDiscriminatorValue, serializeChatInfo, type ChatInfo } from './chatInfo';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type OnlineMeeting, type VirtualEventSession } from './index';
import { createItemBodyFromDiscriminatorValue, serializeItemBody, type ItemBody } from './itemBody';
import { createJoinMeetingIdSettingsFromDiscriminatorValue, serializeJoinMeetingIdSettings, type JoinMeetingIdSettings } from './joinMeetingIdSettings';
import { createLobbyBypassSettingsFromDiscriminatorValue, serializeLobbyBypassSettings, type LobbyBypassSettings } from './lobbyBypassSettings';
import { createMeetingAttendanceReportFromDiscriminatorValue, serializeMeetingAttendanceReport, type MeetingAttendanceReport } from './meetingAttendanceReport';
import { MeetingChatHistoryDefaultMode } from './meetingChatHistoryDefaultMode';
import { MeetingChatMode } from './meetingChatMode';
import { deserializeIntoOnlineMeeting } from './onlineMeeting';
import { OnlineMeetingPresenters } from './onlineMeetingPresenters';
import { deserializeIntoVirtualEventSession } from './virtualEventSession';
import { createWatermarkProtectionValuesFromDiscriminatorValue, serializeWatermarkProtectionValues, type WatermarkProtectionValues } from './watermarkProtectionValues';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOnlineMeetingBaseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.onlineMeeting":
                    return deserializeIntoOnlineMeeting;
                case "#microsoft.graph.virtualEventSession":
                    return deserializeIntoVirtualEventSession;
            }
        }
    }
    return deserializeIntoOnlineMeetingBase;
}
export function deserializeIntoOnlineMeetingBase(onlineMeetingBase: OnlineMeetingBase | undefined = {} as OnlineMeetingBase) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(onlineMeetingBase),
        "allowAttendeeToEnableCamera": n => { onlineMeetingBase.allowAttendeeToEnableCamera = n.getBooleanValue(); },
        "allowAttendeeToEnableMic": n => { onlineMeetingBase.allowAttendeeToEnableMic = n.getBooleanValue(); },
        "allowedPresenters": n => { onlineMeetingBase.allowedPresenters = n.getEnumValue<OnlineMeetingPresenters>(OnlineMeetingPresenters); },
        "allowMeetingChat": n => { onlineMeetingBase.allowMeetingChat = n.getEnumValue<MeetingChatMode>(MeetingChatMode); },
        "allowParticipantsToChangeName": n => { onlineMeetingBase.allowParticipantsToChangeName = n.getBooleanValue(); },
        "allowTeamworkReactions": n => { onlineMeetingBase.allowTeamworkReactions = n.getBooleanValue(); },
        "attendanceReports": n => { onlineMeetingBase.attendanceReports = n.getCollectionOfObjectValues<MeetingAttendanceReport>(createMeetingAttendanceReportFromDiscriminatorValue); },
        "audioConferencing": n => { onlineMeetingBase.audioConferencing = n.getObjectValue<AudioConferencing>(createAudioConferencingFromDiscriminatorValue); },
        "chatInfo": n => { onlineMeetingBase.chatInfo = n.getObjectValue<ChatInfo>(createChatInfoFromDiscriminatorValue); },
        "isEntryExitAnnounced": n => { onlineMeetingBase.isEntryExitAnnounced = n.getBooleanValue(); },
        "joinInformation": n => { onlineMeetingBase.joinInformation = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
        "joinMeetingIdSettings": n => { onlineMeetingBase.joinMeetingIdSettings = n.getObjectValue<JoinMeetingIdSettings>(createJoinMeetingIdSettingsFromDiscriminatorValue); },
        "joinWebUrl": n => { onlineMeetingBase.joinWebUrl = n.getStringValue(); },
        "lobbyBypassSettings": n => { onlineMeetingBase.lobbyBypassSettings = n.getObjectValue<LobbyBypassSettings>(createLobbyBypassSettingsFromDiscriminatorValue); },
        "recordAutomatically": n => { onlineMeetingBase.recordAutomatically = n.getBooleanValue(); },
        "shareMeetingChatHistoryDefault": n => { onlineMeetingBase.shareMeetingChatHistoryDefault = n.getEnumValue<MeetingChatHistoryDefaultMode>(MeetingChatHistoryDefaultMode); },
        "subject": n => { onlineMeetingBase.subject = n.getStringValue(); },
        "videoTeleconferenceId": n => { onlineMeetingBase.videoTeleconferenceId = n.getStringValue(); },
        "watermarkProtection": n => { onlineMeetingBase.watermarkProtection = n.getObjectValue<WatermarkProtectionValues>(createWatermarkProtectionValuesFromDiscriminatorValue); },
    }
}
export interface OnlineMeetingBase extends Entity, Parsable {
    /**
     * The allowAttendeeToEnableCamera property
     */
    allowAttendeeToEnableCamera?: boolean;
    /**
     * The allowAttendeeToEnableMic property
     */
    allowAttendeeToEnableMic?: boolean;
    /**
     * The allowedPresenters property
     */
    allowedPresenters?: OnlineMeetingPresenters;
    /**
     * The allowMeetingChat property
     */
    allowMeetingChat?: MeetingChatMode;
    /**
     * The allowParticipantsToChangeName property
     */
    allowParticipantsToChangeName?: boolean;
    /**
     * The allowTeamworkReactions property
     */
    allowTeamworkReactions?: boolean;
    /**
     * The attendanceReports property
     */
    attendanceReports?: MeetingAttendanceReport[];
    /**
     * The audioConferencing property
     */
    audioConferencing?: AudioConferencing;
    /**
     * The chatInfo property
     */
    chatInfo?: ChatInfo;
    /**
     * The isEntryExitAnnounced property
     */
    isEntryExitAnnounced?: boolean;
    /**
     * The joinInformation property
     */
    joinInformation?: ItemBody;
    /**
     * The joinMeetingIdSettings property
     */
    joinMeetingIdSettings?: JoinMeetingIdSettings;
    /**
     * The joinWebUrl property
     */
    joinWebUrl?: string;
    /**
     * The lobbyBypassSettings property
     */
    lobbyBypassSettings?: LobbyBypassSettings;
    /**
     * The recordAutomatically property
     */
    recordAutomatically?: boolean;
    /**
     * The shareMeetingChatHistoryDefault property
     */
    shareMeetingChatHistoryDefault?: MeetingChatHistoryDefaultMode;
    /**
     * The subject property
     */
    subject?: string;
    /**
     * The videoTeleconferenceId property
     */
    videoTeleconferenceId?: string;
    /**
     * The watermarkProtection property
     */
    watermarkProtection?: WatermarkProtectionValues;
}
export function serializeOnlineMeetingBase(writer: SerializationWriter, onlineMeetingBase: OnlineMeetingBase | undefined = {} as OnlineMeetingBase) : void {
        serializeEntity(writer, onlineMeetingBase)
        writer.writeBooleanValue("allowAttendeeToEnableCamera", onlineMeetingBase.allowAttendeeToEnableCamera);
        writer.writeBooleanValue("allowAttendeeToEnableMic", onlineMeetingBase.allowAttendeeToEnableMic);
        writer.writeEnumValue<OnlineMeetingPresenters>("allowedPresenters", onlineMeetingBase.allowedPresenters);
        writer.writeEnumValue<MeetingChatMode>("allowMeetingChat", onlineMeetingBase.allowMeetingChat);
        writer.writeBooleanValue("allowParticipantsToChangeName", onlineMeetingBase.allowParticipantsToChangeName);
        writer.writeBooleanValue("allowTeamworkReactions", onlineMeetingBase.allowTeamworkReactions);
        writer.writeCollectionOfObjectValues<MeetingAttendanceReport>("attendanceReports", onlineMeetingBase.attendanceReports, serializeMeetingAttendanceReport);
        writer.writeObjectValue<AudioConferencing>("audioConferencing", onlineMeetingBase.audioConferencing, serializeAudioConferencing);
        writer.writeObjectValue<ChatInfo>("chatInfo", onlineMeetingBase.chatInfo, serializeChatInfo);
        writer.writeBooleanValue("isEntryExitAnnounced", onlineMeetingBase.isEntryExitAnnounced);
        writer.writeObjectValue<ItemBody>("joinInformation", onlineMeetingBase.joinInformation, serializeItemBody);
        writer.writeObjectValue<JoinMeetingIdSettings>("joinMeetingIdSettings", onlineMeetingBase.joinMeetingIdSettings, serializeJoinMeetingIdSettings);
        writer.writeStringValue("joinWebUrl", onlineMeetingBase.joinWebUrl);
        writer.writeObjectValue<LobbyBypassSettings>("lobbyBypassSettings", onlineMeetingBase.lobbyBypassSettings, serializeLobbyBypassSettings);
        writer.writeBooleanValue("recordAutomatically", onlineMeetingBase.recordAutomatically);
        writer.writeEnumValue<MeetingChatHistoryDefaultMode>("shareMeetingChatHistoryDefault", onlineMeetingBase.shareMeetingChatHistoryDefault);
        writer.writeStringValue("subject", onlineMeetingBase.subject);
        writer.writeStringValue("videoTeleconferenceId", onlineMeetingBase.videoTeleconferenceId);
        writer.writeObjectValue<WatermarkProtectionValues>("watermarkProtection", onlineMeetingBase.watermarkProtection, serializeWatermarkProtectionValues);
}
// tslint:enable
// eslint-enable
