// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type ServiceHealthIssue, type ServiceUpdateMessage } from './index';
import { createKeyValuePairFromDiscriminatorValue, serializeKeyValuePair, type KeyValuePair } from './keyValuePair';
import { deserializeIntoServiceHealthIssue } from './serviceHealthIssue';
import { deserializeIntoServiceUpdateMessage } from './serviceUpdateMessage';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createServiceAnnouncementBaseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.serviceHealthIssue":
                    return deserializeIntoServiceHealthIssue;
                case "#microsoft.graph.serviceUpdateMessage":
                    return deserializeIntoServiceUpdateMessage;
            }
        }
    }
    return deserializeIntoServiceAnnouncementBase;
}
export function deserializeIntoServiceAnnouncementBase(serviceAnnouncementBase: ServiceAnnouncementBase | undefined = {} as ServiceAnnouncementBase) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(serviceAnnouncementBase),
        "details": n => { serviceAnnouncementBase.details = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "endDateTime": n => { serviceAnnouncementBase.endDateTime = n.getDateValue(); },
        "lastModifiedDateTime": n => { serviceAnnouncementBase.lastModifiedDateTime = n.getDateValue(); },
        "startDateTime": n => { serviceAnnouncementBase.startDateTime = n.getDateValue(); },
        "title": n => { serviceAnnouncementBase.title = n.getStringValue(); },
    }
}
export function serializeServiceAnnouncementBase(writer: SerializationWriter, serviceAnnouncementBase: ServiceAnnouncementBase | undefined = {} as ServiceAnnouncementBase) : void {
    serializeEntity(writer, serviceAnnouncementBase)
    writer.writeCollectionOfObjectValues<KeyValuePair>("details", serviceAnnouncementBase.details, serializeKeyValuePair);
    writer.writeDateValue("endDateTime", serviceAnnouncementBase.endDateTime);
    writer.writeDateValue("lastModifiedDateTime", serviceAnnouncementBase.lastModifiedDateTime);
    writer.writeDateValue("startDateTime", serviceAnnouncementBase.startDateTime);
    writer.writeStringValue("title", serviceAnnouncementBase.title);
}
export interface ServiceAnnouncementBase extends Entity, Parsable {
    /**
     * More details about service event. This property doesn't support filters.
     */
    details?: KeyValuePair[];
    /**
     * The end time of the service event.
     */
    endDateTime?: Date;
    /**
     * The last modified time of the service event.
     */
    lastModifiedDateTime?: Date;
    /**
     * The start time of the service event.
     */
    startDateTime?: Date;
    /**
     * The title of the service event.
     */
    title?: string;
}
// tslint:enable
// eslint-enable
