// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { LifecycleWorkflowCategory } from './lifecycleWorkflowCategory';
import { createTaskFromDiscriminatorValue, serializeTask, type Task } from './task';
import { createWorkflowExecutionConditionsFromDiscriminatorValue, serializeWorkflowExecutionConditions, type WorkflowExecutionConditions } from './workflowExecutionConditions';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkflowTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkflowTemplate;
}
export function deserializeIntoWorkflowTemplate(workflowTemplate: WorkflowTemplate | undefined = {} as WorkflowTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workflowTemplate),
        "category": n => { workflowTemplate.category = n.getEnumValue<LifecycleWorkflowCategory>(LifecycleWorkflowCategory); },
        "description": n => { workflowTemplate.description = n.getStringValue(); },
        "displayName": n => { workflowTemplate.displayName = n.getStringValue(); },
        "executionConditions": n => { workflowTemplate.executionConditions = n.getObjectValue<WorkflowExecutionConditions>(createWorkflowExecutionConditionsFromDiscriminatorValue); },
        "tasks": n => { workflowTemplate.tasks = n.getCollectionOfObjectValues<Task>(createTaskFromDiscriminatorValue); },
    }
}
export function serializeWorkflowTemplate(writer: SerializationWriter, workflowTemplate: WorkflowTemplate | undefined = {} as WorkflowTemplate) : void {
        serializeEntity(writer, workflowTemplate)
        writer.writeEnumValue<LifecycleWorkflowCategory>("category", workflowTemplate.category);
        writer.writeStringValue("description", workflowTemplate.description);
        writer.writeStringValue("displayName", workflowTemplate.displayName);
        writer.writeObjectValue<WorkflowExecutionConditions>("executionConditions", workflowTemplate.executionConditions, );
        writer.writeCollectionOfObjectValues<Task>("tasks", workflowTemplate.tasks, );
}
export interface WorkflowTemplate extends Entity, Parsable {
    /**
     * The category property
     */
    category?: LifecycleWorkflowCategory;
    /**
     * The description of the workflowTemplate.
     */
    description?: string;
    /**
     * The display name of the workflowTemplate.Supports $filter(eq, ne) and $orderby.
     */
    displayName?: string;
    /**
     * Conditions describing when to execute the workflow and the criteria to identify in-scope subject set.
     */
    executionConditions?: WorkflowExecutionConditions;
    /**
     * Represents the configured tasks to execute and their execution sequence within a workflow. This relationship is expanded by default.
     */
    tasks?: Task[];
}
// tslint:enable
// eslint-enable
