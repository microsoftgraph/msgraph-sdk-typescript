// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createSubjectSetFromDiscriminatorValue, serializeSubjectSet, type SubjectSet } from '../subjectSet';
import { deserializeIntoWorkflowExecutionConditions, serializeWorkflowExecutionConditions, type WorkflowExecutionConditions } from './workflowExecutionConditions';
import { createWorkflowExecutionTriggerFromDiscriminatorValue, serializeWorkflowExecutionTrigger, type WorkflowExecutionTrigger } from './workflowExecutionTrigger';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTriggerAndScopeBasedConditionsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTriggerAndScopeBasedConditions;
}
export function deserializeIntoTriggerAndScopeBasedConditions(triggerAndScopeBasedConditions: TriggerAndScopeBasedConditions | undefined = {} as TriggerAndScopeBasedConditions) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWorkflowExecutionConditions(triggerAndScopeBasedConditions),
        "scope": n => { triggerAndScopeBasedConditions.scope = n.getObjectValue<SubjectSet>(createSubjectSetFromDiscriminatorValue); },
        "trigger": n => { triggerAndScopeBasedConditions.trigger = n.getObjectValue<WorkflowExecutionTrigger>(createWorkflowExecutionTriggerFromDiscriminatorValue); },
    }
}
export function serializeTriggerAndScopeBasedConditions(writer: SerializationWriter, triggerAndScopeBasedConditions: TriggerAndScopeBasedConditions | undefined = {} as TriggerAndScopeBasedConditions) : void {
        serializeWorkflowExecutionConditions(writer, triggerAndScopeBasedConditions)
        writer.writeObjectValue<SubjectSet>("scope", triggerAndScopeBasedConditions.scope, );
        writer.writeObjectValue<WorkflowExecutionTrigger>("trigger", triggerAndScopeBasedConditions.trigger, );
}
export interface TriggerAndScopeBasedConditions extends Parsable, WorkflowExecutionConditions {
    /**
     * Defines who the workflow runs for.
     */
    scope?: SubjectSet;
    /**
     * What triggers a workflow to run.
     */
    trigger?: WorkflowExecutionTrigger;
}
// tslint:enable
// eslint-enable
