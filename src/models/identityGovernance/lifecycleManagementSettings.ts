// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEmailSettingsFromDiscriminatorValue, serializeEmailSettings, type EmailSettings } from '../emailSettings';
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLifecycleManagementSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLifecycleManagementSettings;
}
export function deserializeIntoLifecycleManagementSettings(lifecycleManagementSettings: LifecycleManagementSettings | undefined = {} as LifecycleManagementSettings) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(lifecycleManagementSettings),
        "emailSettings": n => { lifecycleManagementSettings.emailSettings = n.getObjectValue<EmailSettings>(createEmailSettingsFromDiscriminatorValue); },
        "workflowScheduleIntervalInHours": n => { lifecycleManagementSettings.workflowScheduleIntervalInHours = n.getNumberValue(); },
    }
}
export interface LifecycleManagementSettings extends Entity, Parsable {
    /**
     * The emailSettings property
     */
    emailSettings?: EmailSettings;
    /**
     * The interval in hours at which all workflows running in the tenant should be scheduled for execution. This interval has a minimum value of 1 and a maximum value of 24. The default value is 3 hours.
     */
    workflowScheduleIntervalInHours?: number;
}
export function serializeLifecycleManagementSettings(writer: SerializationWriter, lifecycleManagementSettings: LifecycleManagementSettings | undefined = {} as LifecycleManagementSettings) : void {
        serializeEntity(writer, lifecycleManagementSettings)
        writer.writeObjectValue<EmailSettings>("emailSettings", lifecycleManagementSettings.emailSettings, );
        writer.writeNumberValue("workflowScheduleIntervalInHours", lifecycleManagementSettings.workflowScheduleIntervalInHours);
}
// tslint:enable
// eslint-enable
