// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoSubjectSet, serializeSubjectSet, type SubjectSet } from '../subjectSet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRuleBasedSubjectSetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRuleBasedSubjectSet;
}
export function deserializeIntoRuleBasedSubjectSet(ruleBasedSubjectSet: RuleBasedSubjectSet | undefined = {} as RuleBasedSubjectSet) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoSubjectSet(ruleBasedSubjectSet),
        "rule": n => { ruleBasedSubjectSet.rule = n.getStringValue(); },
    }
}
export interface RuleBasedSubjectSet extends Parsable, SubjectSet {
    /**
     * The rule for the subject set. Lifecycle Workflows supports a rich set of user properties for configuring the rules using $filter query expressions. For more information, see supported user and query parameters.
     */
    rule?: string;
}
export function serializeRuleBasedSubjectSet(writer: SerializationWriter, ruleBasedSubjectSet: RuleBasedSubjectSet | undefined = {} as RuleBasedSubjectSet) : void {
    serializeSubjectSet(writer, ruleBasedSubjectSet)
    writer.writeStringValue("rule", ruleBasedSubjectSet.rule);
}
// tslint:enable
// eslint-enable
