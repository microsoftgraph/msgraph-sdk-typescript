// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createRunFromDiscriminatorValue, serializeRun, type Run } from './run';
import { createTaskReportFromDiscriminatorValue, serializeTaskReport, type TaskReport } from './taskReport';
import { createUserProcessingResultFromDiscriminatorValue, serializeUserProcessingResult, type UserProcessingResult } from './userProcessingResult';
import { deserializeIntoWorkflowBase, serializeWorkflowBase, type WorkflowBase } from './workflowBase';
import { createWorkflowVersionFromDiscriminatorValue, serializeWorkflowVersion, type WorkflowVersion } from './workflowVersion';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkflowFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkflow;
}
export function deserializeIntoWorkflow(workflow: Workflow | undefined = {} as Workflow) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWorkflowBase(workflow),
        "deletedDateTime": n => { workflow.deletedDateTime = n.getDateValue(); },
        "executionScope": n => { workflow.executionScope = n.getCollectionOfObjectValues<UserProcessingResult>(createUserProcessingResultFromDiscriminatorValue); },
        "id": n => { workflow.id = n.getStringValue(); },
        "nextScheduleRunDateTime": n => { workflow.nextScheduleRunDateTime = n.getDateValue(); },
        "runs": n => { workflow.runs = n.getCollectionOfObjectValues<Run>(createRunFromDiscriminatorValue); },
        "taskReports": n => { workflow.taskReports = n.getCollectionOfObjectValues<TaskReport>(createTaskReportFromDiscriminatorValue); },
        "userProcessingResults": n => { workflow.userProcessingResults = n.getCollectionOfObjectValues<UserProcessingResult>(createUserProcessingResultFromDiscriminatorValue); },
        "version": n => { workflow.version = n.getNumberValue(); },
        "versions": n => { workflow.versions = n.getCollectionOfObjectValues<WorkflowVersion>(createWorkflowVersionFromDiscriminatorValue); },
    }
}
export function serializeWorkflow(writer: SerializationWriter, workflow: Workflow | undefined = {} as Workflow) : void {
    serializeWorkflowBase(writer, workflow)
    writer.writeDateValue("deletedDateTime", workflow.deletedDateTime);
    writer.writeCollectionOfObjectValues<UserProcessingResult>("executionScope", workflow.executionScope, serializeUserProcessingResult);
    writer.writeStringValue("id", workflow.id);
    writer.writeDateValue("nextScheduleRunDateTime", workflow.nextScheduleRunDateTime);
    writer.writeCollectionOfObjectValues<Run>("runs", workflow.runs, serializeRun);
    writer.writeCollectionOfObjectValues<TaskReport>("taskReports", workflow.taskReports, serializeTaskReport);
    writer.writeCollectionOfObjectValues<UserProcessingResult>("userProcessingResults", workflow.userProcessingResults, serializeUserProcessingResult);
    writer.writeNumberValue("version", workflow.version);
    writer.writeCollectionOfObjectValues<WorkflowVersion>("versions", workflow.versions, serializeWorkflowVersion);
}
export interface Workflow extends Parsable, WorkflowBase {
    /**
     * When the workflow was deleted.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    deletedDateTime?: Date;
    /**
     * The unique identifier of the Microsoft Entra identity that last modified the workflow object.
     */
    executionScope?: UserProcessingResult[];
    /**
     * Identifier used for individually addressing a specific workflow.Supports $filter(eq, ne) and $orderby.
     */
    id?: string;
    /**
     * The date time when the workflow is expected to run next based on the schedule interval, if there are any users matching the execution conditions. Supports $filter(lt,gt) and $orderby.
     */
    nextScheduleRunDateTime?: Date;
    /**
     * Workflow runs.
     */
    runs?: Run[];
    /**
     * Represents the aggregation of task execution data for tasks within a workflow object.
     */
    taskReports?: TaskReport[];
    /**
     * Per-user workflow execution results.
     */
    userProcessingResults?: UserProcessingResult[];
    /**
     * The current version number of the workflow. Value is 1 when the workflow is first created.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    version?: number;
    /**
     * The workflow versions that are available.
     */
    versions?: WorkflowVersion[];
}
// tslint:enable
// eslint-enable
