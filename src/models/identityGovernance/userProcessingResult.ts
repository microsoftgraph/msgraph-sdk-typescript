// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createUserFromDiscriminatorValue, serializeUser, type User } from '../user';
import { LifecycleWorkflowProcessingStatus } from './lifecycleWorkflowProcessingStatus';
import { createTaskProcessingResultFromDiscriminatorValue, serializeTaskProcessingResult, type TaskProcessingResult } from './taskProcessingResult';
import { WorkflowExecutionType } from './workflowExecutionType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserProcessingResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserProcessingResult;
}
export function deserializeIntoUserProcessingResult(userProcessingResult: UserProcessingResult | undefined = {} as UserProcessingResult) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(userProcessingResult),
        "completedDateTime": n => { userProcessingResult.completedDateTime = n.getDateValue(); },
        "failedTasksCount": n => { userProcessingResult.failedTasksCount = n.getNumberValue(); },
        "processingStatus": n => { userProcessingResult.processingStatus = n.getEnumValue<LifecycleWorkflowProcessingStatus>(LifecycleWorkflowProcessingStatus); },
        "scheduledDateTime": n => { userProcessingResult.scheduledDateTime = n.getDateValue(); },
        "startedDateTime": n => { userProcessingResult.startedDateTime = n.getDateValue(); },
        "subject": n => { userProcessingResult.subject = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "taskProcessingResults": n => { userProcessingResult.taskProcessingResults = n.getCollectionOfObjectValues<TaskProcessingResult>(createTaskProcessingResultFromDiscriminatorValue); },
        "totalTasksCount": n => { userProcessingResult.totalTasksCount = n.getNumberValue(); },
        "totalUnprocessedTasksCount": n => { userProcessingResult.totalUnprocessedTasksCount = n.getNumberValue(); },
        "workflowExecutionType": n => { userProcessingResult.workflowExecutionType = n.getEnumValue<WorkflowExecutionType>(WorkflowExecutionType); },
        "workflowVersion": n => { userProcessingResult.workflowVersion = n.getNumberValue(); },
    }
}
export function serializeUserProcessingResult(writer: SerializationWriter, userProcessingResult: UserProcessingResult | undefined = {} as UserProcessingResult) : void {
        serializeEntity(writer, userProcessingResult)
        writer.writeDateValue("completedDateTime", userProcessingResult.completedDateTime);
        writer.writeNumberValue("failedTasksCount", userProcessingResult.failedTasksCount);
        writer.writeEnumValue<LifecycleWorkflowProcessingStatus>("processingStatus", userProcessingResult.processingStatus);
        writer.writeDateValue("scheduledDateTime", userProcessingResult.scheduledDateTime);
        writer.writeDateValue("startedDateTime", userProcessingResult.startedDateTime);
        writer.writeObjectValue<User>("subject", userProcessingResult.subject, serializeUser);
        writer.writeCollectionOfObjectValues<TaskProcessingResult>("taskProcessingResults", userProcessingResult.taskProcessingResults, serializeTaskProcessingResult);
        writer.writeNumberValue("totalTasksCount", userProcessingResult.totalTasksCount);
        writer.writeNumberValue("totalUnprocessedTasksCount", userProcessingResult.totalUnprocessedTasksCount);
        writer.writeEnumValue<WorkflowExecutionType>("workflowExecutionType", userProcessingResult.workflowExecutionType);
        writer.writeNumberValue("workflowVersion", userProcessingResult.workflowVersion);
}
export interface UserProcessingResult extends Entity, Parsable {
    /**
     * The date time that the workflow execution for a user completed. Value is null if the workflow hasn't completed.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    completedDateTime?: Date;
    /**
     * The number of tasks that failed in the workflow execution.
     */
    failedTasksCount?: number;
    /**
     * The processingStatus property
     */
    processingStatus?: LifecycleWorkflowProcessingStatus;
    /**
     * The date time that the workflow is scheduled to be executed for a user.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    scheduledDateTime?: Date;
    /**
     * The date time that the workflow execution started. Value is null if the workflow execution has not started.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    startedDateTime?: Date;
    /**
     * The subject property
     */
    subject?: User;
    /**
     * The associated individual task execution.
     */
    taskProcessingResults?: TaskProcessingResult[];
    /**
     * The total number of tasks that in the workflow execution.
     */
    totalTasksCount?: number;
    /**
     * The total number of unprocessed tasks for the workflow.
     */
    totalUnprocessedTasksCount?: number;
    /**
     * The workflowExecutionType property
     */
    workflowExecutionType?: WorkflowExecutionType;
    /**
     * The version of the workflow that was executed.
     */
    workflowVersion?: number;
}
// tslint:enable
// eslint-enable
