// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ValueType } from './valueType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createParameterFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoParameter;
}
export function deserializeIntoParameter(parameter: Parameter | undefined = {} as Parameter) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { parameter.name = n.getStringValue(); },
        "@odata.type": n => { parameter.odataType = n.getStringValue(); },
        "values": n => { parameter.values = n.getCollectionOfPrimitiveValues<string>(); },
        "valueType": n => { parameter.valueType = n.getEnumValue<ValueType>(ValueType); },
    }
}
export interface Parameter extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name of the parameter.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The values of the parameter.
     */
    values?: string[];
    /**
     * The valueType property
     */
    valueType?: ValueType;
}
export function serializeParameter(writer: SerializationWriter, parameter: Parameter | undefined = {} as Parameter) : void {
        writer.writeStringValue("name", parameter.name);
        writer.writeStringValue("@odata.type", parameter.odataType);
        writer.writeCollectionOfPrimitiveValues<string>("values", parameter.values);
        writer.writeEnumValue<ValueType>("valueType", parameter.valueType);
        writer.writeAdditionalData(parameter.additionalData);
}
// tslint:enable
// eslint-enable
