// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoCustomExtensionData, serializeCustomExtensionData, type CustomExtensionData } from '../customExtensionData';
import { createUserFromDiscriminatorValue, serializeUser, type User } from '../user';
import { createTaskFromDiscriminatorValue, serializeTask, type Task } from './task';
import { createTaskProcessingResultFromDiscriminatorValue, serializeTaskProcessingResult, type TaskProcessingResult } from './taskProcessingResult';
import { createWorkflowFromDiscriminatorValue, serializeWorkflow, type Workflow } from './workflow';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCustomTaskExtensionCalloutDataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCustomTaskExtensionCalloutData;
}
export interface CustomTaskExtensionCalloutData extends CustomExtensionData, Parsable {
    /**
     * The subject property
     */
    subject?: User;
    /**
     * The task property
     */
    task?: Task;
    /**
     * The taskProcessingresult property
     */
    taskProcessingresult?: TaskProcessingResult;
    /**
     * The workflow property
     */
    workflow?: Workflow;
}
export function deserializeIntoCustomTaskExtensionCalloutData(customTaskExtensionCalloutData: CustomTaskExtensionCalloutData | undefined = {} as CustomTaskExtensionCalloutData) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCustomExtensionData(customTaskExtensionCalloutData),
        "subject": n => { customTaskExtensionCalloutData.subject = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "task": n => { customTaskExtensionCalloutData.task = n.getObjectValue<Task>(createTaskFromDiscriminatorValue); },
        "taskProcessingresult": n => { customTaskExtensionCalloutData.taskProcessingresult = n.getObjectValue<TaskProcessingResult>(createTaskProcessingResultFromDiscriminatorValue); },
        "workflow": n => { customTaskExtensionCalloutData.workflow = n.getObjectValue<Workflow>(createWorkflowFromDiscriminatorValue); },
    }
}
export function serializeCustomTaskExtensionCalloutData(writer: SerializationWriter, customTaskExtensionCalloutData: CustomTaskExtensionCalloutData | undefined = {} as CustomTaskExtensionCalloutData) : void {
        serializeCustomExtensionData(writer, customTaskExtensionCalloutData)
        writer.writeObjectValue<User>("subject", customTaskExtensionCalloutData.subject, );
        writer.writeObjectValue<Task>("task", customTaskExtensionCalloutData.task, );
        writer.writeObjectValue<TaskProcessingResult>("taskProcessingresult", customTaskExtensionCalloutData.taskProcessingresult, );
        writer.writeObjectValue<Workflow>("workflow", customTaskExtensionCalloutData.workflow, );
}
// tslint:enable
// eslint-enable
