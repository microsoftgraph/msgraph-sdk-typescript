// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createKeyValuePairFromDiscriminatorValue, serializeKeyValuePair, type KeyValuePair } from '../keyValuePair';
import { LifecycleTaskCategory } from './lifecycleTaskCategory';
import { createTaskProcessingResultFromDiscriminatorValue, serializeTaskProcessingResult, type TaskProcessingResult } from './taskProcessingResult';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTaskFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTask;
}
export function deserializeIntoTask(task: Task | undefined = {} as Task) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(task),
        "arguments": n => { task.arguments = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "category": n => { task.category = n.getCollectionOfEnumValues<LifecycleTaskCategory>(LifecycleTaskCategory); },
        "continueOnError": n => { task.continueOnError = n.getBooleanValue(); },
        "description": n => { task.description = n.getStringValue(); },
        "displayName": n => { task.displayName = n.getStringValue(); },
        "executionSequence": n => { task.executionSequence = n.getNumberValue(); },
        "isEnabled": n => { task.isEnabled = n.getBooleanValue(); },
        "taskDefinitionId": n => { task.taskDefinitionId = n.getStringValue(); },
        "taskProcessingResults": n => { task.taskProcessingResults = n.getCollectionOfObjectValues<TaskProcessingResult>(createTaskProcessingResultFromDiscriminatorValue); },
    }
}
export function serializeTask(writer: SerializationWriter, task: Task | undefined = {} as Task) : void {
        serializeEntity(writer, task)
        writer.writeCollectionOfObjectValues<KeyValuePair>("arguments", task.arguments, serializeKeyValuePair);
        writer.writeEnumValue<LifecycleTaskCategory[]>("category", task.category);
        writer.writeBooleanValue("continueOnError", task.continueOnError);
        writer.writeStringValue("description", task.description);
        writer.writeStringValue("displayName", task.displayName);
        writer.writeNumberValue("executionSequence", task.executionSequence);
        writer.writeBooleanValue("isEnabled", task.isEnabled);
        writer.writeStringValue("taskDefinitionId", task.taskDefinitionId);
        writer.writeCollectionOfObjectValues<TaskProcessingResult>("taskProcessingResults", task.taskProcessingResults, serializeTaskProcessingResult);
}
export interface Task extends Entity, Parsable {
    /**
     * Arguments included within the task.  For guidance to configure this property, see Configure the arguments for built-in Lifecycle Workflow tasks. Required.
     */
    arguments?: KeyValuePair[];
    /**
     * The category property
     */
    category?: LifecycleTaskCategory[];
    /**
     * A boolean value that specifies whether, if this task fails, the workflow will stop, and subsequent tasks will not run. Optional.
     */
    continueOnError?: boolean;
    /**
     * A string that describes the purpose of the task for administrative use. Optional.
     */
    description?: string;
    /**
     * A unique string that identifies the task. Required.Supports $filter(eq, ne) and orderBy.
     */
    displayName?: string;
    /**
     * An integer that states in what order the task will run in a workflow.Supports $orderby.
     */
    executionSequence?: number;
    /**
     * A boolean value that denotes whether the task is set to run or not. Optional.Supports $filter(eq, ne) and orderBy.
     */
    isEnabled?: boolean;
    /**
     * A unique template identifier for the task. For more information about the tasks that Lifecycle Workflows currently supports and their unique identifiers, see supported tasks. Required.Supports $filter(eq, ne).
     */
    taskDefinitionId?: string;
    /**
     * The result of processing the task.
     */
    taskProcessingResults?: TaskProcessingResult[];
}
// tslint:enable
// eslint-enable
