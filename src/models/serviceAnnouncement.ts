// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createServiceHealthFromDiscriminatorValue, serializeServiceHealth, type ServiceHealth } from './serviceHealth';
import { createServiceHealthIssueFromDiscriminatorValue, serializeServiceHealthIssue, type ServiceHealthIssue } from './serviceHealthIssue';
import { createServiceUpdateMessageFromDiscriminatorValue, serializeServiceUpdateMessage, type ServiceUpdateMessage } from './serviceUpdateMessage';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createServiceAnnouncementFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoServiceAnnouncement;
}
export function deserializeIntoServiceAnnouncement(serviceAnnouncement: ServiceAnnouncement | undefined = {} as ServiceAnnouncement) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(serviceAnnouncement),
        "healthOverviews": n => { serviceAnnouncement.healthOverviews = n.getCollectionOfObjectValues<ServiceHealth>(createServiceHealthFromDiscriminatorValue); },
        "issues": n => { serviceAnnouncement.issues = n.getCollectionOfObjectValues<ServiceHealthIssue>(createServiceHealthIssueFromDiscriminatorValue); },
        "messages": n => { serviceAnnouncement.messages = n.getCollectionOfObjectValues<ServiceUpdateMessage>(createServiceUpdateMessageFromDiscriminatorValue); },
    }
}
export function serializeServiceAnnouncement(writer: SerializationWriter, serviceAnnouncement: ServiceAnnouncement | undefined = {} as ServiceAnnouncement) : void {
    serializeEntity(writer, serviceAnnouncement)
    writer.writeCollectionOfObjectValues<ServiceHealth>("healthOverviews", serviceAnnouncement.healthOverviews, serializeServiceHealth);
    writer.writeCollectionOfObjectValues<ServiceHealthIssue>("issues", serviceAnnouncement.issues, serializeServiceHealthIssue);
    writer.writeCollectionOfObjectValues<ServiceUpdateMessage>("messages", serviceAnnouncement.messages, serializeServiceUpdateMessage);
}
export interface ServiceAnnouncement extends Entity, Parsable {
    /**
     * A collection of service health information for tenant. This property is a contained navigation property, it is nullable and readonly.
     */
    healthOverviews?: ServiceHealth[];
    /**
     * A collection of service issues for tenant. This property is a contained navigation property, it is nullable and readonly.
     */
    issues?: ServiceHealthIssue[];
    /**
     * A collection of service messages for tenant. This property is a contained navigation property, it is nullable and readonly.
     */
    messages?: ServiceUpdateMessage[];
}
// tslint:enable
// eslint-enable
