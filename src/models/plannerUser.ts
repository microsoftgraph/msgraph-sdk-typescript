// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createPlannerPlanFromDiscriminatorValue, serializePlannerPlan, type PlannerPlan } from './plannerPlan';
import { createPlannerTaskFromDiscriminatorValue, serializePlannerTask, type PlannerTask } from './plannerTask';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPlannerUserFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPlannerUser;
}
export function deserializeIntoPlannerUser(plannerUser: PlannerUser | undefined = {} as PlannerUser) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(plannerUser),
        "plans": n => { plannerUser.plans = n.getCollectionOfObjectValues<PlannerPlan>(createPlannerPlanFromDiscriminatorValue); },
        "tasks": n => { plannerUser.tasks = n.getCollectionOfObjectValues<PlannerTask>(createPlannerTaskFromDiscriminatorValue); },
    }
}
export interface PlannerUser extends Entity, Parsable {
    /**
     * Read-only. Nullable. Returns the plannerTasks assigned to the user.
     */
    plans?: PlannerPlan[];
    /**
     * Read-only. Nullable. Returns the plannerPlans shared with the user.
     */
    tasks?: PlannerTask[];
}
export function serializePlannerUser(writer: SerializationWriter, plannerUser: PlannerUser | undefined = {} as PlannerUser) : void {
    serializeEntity(writer, plannerUser)
    writer.writeCollectionOfObjectValues<PlannerPlan>("plans", plannerUser.plans, serializePlannerPlan);
    writer.writeCollectionOfObjectValues<PlannerTask>("tasks", plannerUser.tasks, serializePlannerTask);
}
// tslint:enable
// eslint-enable
