// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AccessReviewExpirationBehavior } from './accessReviewExpirationBehavior';
import { createEntitlementManagementScheduleFromDiscriminatorValue, serializeEntitlementManagementSchedule, type EntitlementManagementSchedule } from './entitlementManagementSchedule';
import { createSubjectSetFromDiscriminatorValue, serializeSubjectSet, type SubjectSet } from './subjectSet';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageAssignmentReviewSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The default decision to apply if the access is not reviewed. The possible values are: keepAccess, removeAccess, acceptAccessRecommendation, unknownFutureValue.
     */
    expirationBehavior?: AccessReviewExpirationBehavior;
    /**
     * This collection specifies the users who will be the fallback reviewers when the primary reviewers don't respond.
     */
    fallbackReviewers?: SubjectSet[];
    /**
     * If true, access reviews are required for assignments through this policy.
     */
    isEnabled?: boolean;
    /**
     * Specifies whether to display recommendations to the reviewer. The default value is true.
     */
    isRecommendationEnabled?: boolean;
    /**
     * Specifies whether the reviewer must provide justification for the approval. The default value is true.
     */
    isReviewerJustificationRequired?: boolean;
    /**
     * Specifies whether the principals can review their own assignments.
     */
    isSelfReview?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * This collection specifies the users or group of users who will review the access package assignments.
     */
    primaryReviewers?: SubjectSet[];
    /**
     * When the first review should start and how often it should recur.
     */
    schedule?: EntitlementManagementSchedule;
}
export function createAccessPackageAssignmentReviewSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessPackageAssignmentReviewSettings;
}
export function deserializeIntoAccessPackageAssignmentReviewSettings(accessPackageAssignmentReviewSettings: AccessPackageAssignmentReviewSettings | undefined = {} as AccessPackageAssignmentReviewSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "expirationBehavior": n => { accessPackageAssignmentReviewSettings.expirationBehavior = n.getEnumValue<AccessReviewExpirationBehavior>(AccessReviewExpirationBehavior); },
        "fallbackReviewers": n => { accessPackageAssignmentReviewSettings.fallbackReviewers = n.getCollectionOfObjectValues<SubjectSet>(createSubjectSetFromDiscriminatorValue); },
        "isEnabled": n => { accessPackageAssignmentReviewSettings.isEnabled = n.getBooleanValue(); },
        "isRecommendationEnabled": n => { accessPackageAssignmentReviewSettings.isRecommendationEnabled = n.getBooleanValue(); },
        "isReviewerJustificationRequired": n => { accessPackageAssignmentReviewSettings.isReviewerJustificationRequired = n.getBooleanValue(); },
        "isSelfReview": n => { accessPackageAssignmentReviewSettings.isSelfReview = n.getBooleanValue(); },
        "@odata.type": n => { accessPackageAssignmentReviewSettings.odataType = n.getStringValue(); },
        "primaryReviewers": n => { accessPackageAssignmentReviewSettings.primaryReviewers = n.getCollectionOfObjectValues<SubjectSet>(createSubjectSetFromDiscriminatorValue); },
        "schedule": n => { accessPackageAssignmentReviewSettings.schedule = n.getObjectValue<EntitlementManagementSchedule>(createEntitlementManagementScheduleFromDiscriminatorValue); },
    }
}
export function serializeAccessPackageAssignmentReviewSettings(writer: SerializationWriter, accessPackageAssignmentReviewSettings: AccessPackageAssignmentReviewSettings | undefined = {} as AccessPackageAssignmentReviewSettings) : void {
    writer.writeEnumValue<AccessReviewExpirationBehavior>("expirationBehavior", accessPackageAssignmentReviewSettings.expirationBehavior);
    writer.writeCollectionOfObjectValues<SubjectSet>("fallbackReviewers", accessPackageAssignmentReviewSettings.fallbackReviewers, serializeSubjectSet);
    writer.writeBooleanValue("isEnabled", accessPackageAssignmentReviewSettings.isEnabled);
    writer.writeBooleanValue("isRecommendationEnabled", accessPackageAssignmentReviewSettings.isRecommendationEnabled);
    writer.writeBooleanValue("isReviewerJustificationRequired", accessPackageAssignmentReviewSettings.isReviewerJustificationRequired);
    writer.writeBooleanValue("isSelfReview", accessPackageAssignmentReviewSettings.isSelfReview);
    writer.writeStringValue("@odata.type", accessPackageAssignmentReviewSettings.odataType);
    writer.writeCollectionOfObjectValues<SubjectSet>("primaryReviewers", accessPackageAssignmentReviewSettings.primaryReviewers, serializeSubjectSet);
    writer.writeObjectValue<EntitlementManagementSchedule>("schedule", accessPackageAssignmentReviewSettings.schedule, serializeEntitlementManagementSchedule);
    writer.writeAdditionalData(accessPackageAssignmentReviewSettings.additionalData);
}
// tslint:enable
// eslint-enable
