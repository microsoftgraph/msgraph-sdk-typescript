// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoChangeTrackedEntity, serializeChangeTrackedEntity, type ChangeTrackedEntity } from './changeTrackedEntity';
import { createTimeOffItemFromDiscriminatorValue, serializeTimeOffItem, type TimeOffItem } from './timeOffItem';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTimeOffFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTimeOff;
}
export function deserializeIntoTimeOff(timeOff: TimeOff | undefined = {} as TimeOff) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoChangeTrackedEntity(timeOff),
        "draftTimeOff": n => { timeOff.draftTimeOff = n.getObjectValue<TimeOffItem>(createTimeOffItemFromDiscriminatorValue); },
        "sharedTimeOff": n => { timeOff.sharedTimeOff = n.getObjectValue<TimeOffItem>(createTimeOffItemFromDiscriminatorValue); },
        "userId": n => { timeOff.userId = n.getStringValue(); },
    }
}
export function serializeTimeOff(writer: SerializationWriter, timeOff: TimeOff | undefined = {} as TimeOff) : void {
    serializeChangeTrackedEntity(writer, timeOff)
    writer.writeObjectValue<TimeOffItem>("draftTimeOff", timeOff.draftTimeOff, serializeTimeOffItem);
    writer.writeObjectValue<TimeOffItem>("sharedTimeOff", timeOff.sharedTimeOff, serializeTimeOffItem);
    writer.writeStringValue("userId", timeOff.userId);
}
export interface TimeOff extends ChangeTrackedEntity, Parsable {
    /**
     * The draft version of this timeOff that is viewable by managers. Required.
     */
    draftTimeOff?: TimeOffItem;
    /**
     * The shared version of this timeOff that is viewable by both employees and managers. Required.
     */
    sharedTimeOff?: TimeOffItem;
    /**
     * ID of the user assigned to the timeOff. Required.
     */
    userId?: string;
}
// tslint:enable
// eslint-enable
