// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAuthenticationMethod, serializeAuthenticationMethod, type AuthenticationMethod } from './authenticationMethod';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTemporaryAccessPassAuthenticationMethodFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTemporaryAccessPassAuthenticationMethod;
}
export function deserializeIntoTemporaryAccessPassAuthenticationMethod(temporaryAccessPassAuthenticationMethod: TemporaryAccessPassAuthenticationMethod | undefined = {} as TemporaryAccessPassAuthenticationMethod) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuthenticationMethod(temporaryAccessPassAuthenticationMethod),
        "createdDateTime": n => { temporaryAccessPassAuthenticationMethod.createdDateTime = n.getDateValue(); },
        "isUsable": n => { temporaryAccessPassAuthenticationMethod.isUsable = n.getBooleanValue(); },
        "isUsableOnce": n => { temporaryAccessPassAuthenticationMethod.isUsableOnce = n.getBooleanValue(); },
        "lifetimeInMinutes": n => { temporaryAccessPassAuthenticationMethod.lifetimeInMinutes = n.getNumberValue(); },
        "methodUsabilityReason": n => { temporaryAccessPassAuthenticationMethod.methodUsabilityReason = n.getStringValue(); },
        "startDateTime": n => { temporaryAccessPassAuthenticationMethod.startDateTime = n.getDateValue(); },
        "temporaryAccessPass": n => { temporaryAccessPassAuthenticationMethod.temporaryAccessPass = n.getStringValue(); },
    }
}
export function serializeTemporaryAccessPassAuthenticationMethod(writer: SerializationWriter, temporaryAccessPassAuthenticationMethod: TemporaryAccessPassAuthenticationMethod | undefined = {} as TemporaryAccessPassAuthenticationMethod) : void {
    serializeAuthenticationMethod(writer, temporaryAccessPassAuthenticationMethod)
    writer.writeDateValue("createdDateTime", temporaryAccessPassAuthenticationMethod.createdDateTime);
    writer.writeBooleanValue("isUsable", temporaryAccessPassAuthenticationMethod.isUsable);
    writer.writeBooleanValue("isUsableOnce", temporaryAccessPassAuthenticationMethod.isUsableOnce);
    writer.writeNumberValue("lifetimeInMinutes", temporaryAccessPassAuthenticationMethod.lifetimeInMinutes);
    writer.writeStringValue("methodUsabilityReason", temporaryAccessPassAuthenticationMethod.methodUsabilityReason);
    writer.writeDateValue("startDateTime", temporaryAccessPassAuthenticationMethod.startDateTime);
    writer.writeStringValue("temporaryAccessPass", temporaryAccessPassAuthenticationMethod.temporaryAccessPass);
}
export interface TemporaryAccessPassAuthenticationMethod extends AuthenticationMethod, Parsable {
    /**
     * The date and time when the Temporary Access Pass was created.
     */
    createdDateTime?: Date;
    /**
     * The state of the authentication method that indicates whether it's currently usable by the user.
     */
    isUsable?: boolean;
    /**
     * Determines whether the pass is limited to a one-time use. If true, the pass can be used once; if false, the pass can be used multiple times within the Temporary Access Pass lifetime.
     */
    isUsableOnce?: boolean;
    /**
     * The lifetime of the Temporary Access Pass in minutes starting at startDateTime. Must be between 10 and 43200 inclusive (equivalent to 30 days).
     */
    lifetimeInMinutes?: number;
    /**
     * Details about the usability state (isUsable). Reasons can include: EnabledByPolicy, DisabledByPolicy, Expired, NotYetValid, OneTimeUsed.
     */
    methodUsabilityReason?: string;
    /**
     * The date and time when the Temporary Access Pass becomes available to use and when isUsable is true is enforced.
     */
    startDateTime?: Date;
    /**
     * The Temporary Access Pass used to authenticate. Returned only on creation of a new temporaryAccessPassAuthenticationMethod object; Hidden in subsequent read operations and returned as null with GET.
     */
    temporaryAccessPass?: string;
}
// tslint:enable
// eslint-enable
