// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from './group';
import { PrivilegedAccessGroupAssignmentType } from './privilegedAccessGroupAssignmentType';
import { createPrivilegedAccessGroupEligibilityScheduleInstanceFromDiscriminatorValue, serializePrivilegedAccessGroupEligibilityScheduleInstance, type PrivilegedAccessGroupEligibilityScheduleInstance } from './privilegedAccessGroupEligibilityScheduleInstance';
import { PrivilegedAccessGroupMemberType } from './privilegedAccessGroupMemberType';
import { PrivilegedAccessGroupRelationships } from './privilegedAccessGroupRelationships';
import { deserializeIntoPrivilegedAccessScheduleInstance, serializePrivilegedAccessScheduleInstance, type PrivilegedAccessScheduleInstance } from './privilegedAccessScheduleInstance';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrivilegedAccessGroupAssignmentScheduleInstanceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrivilegedAccessGroupAssignmentScheduleInstance;
}
export function deserializeIntoPrivilegedAccessGroupAssignmentScheduleInstance(privilegedAccessGroupAssignmentScheduleInstance: PrivilegedAccessGroupAssignmentScheduleInstance | undefined = {} as PrivilegedAccessGroupAssignmentScheduleInstance) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPrivilegedAccessScheduleInstance(privilegedAccessGroupAssignmentScheduleInstance),
        "accessId": n => { privilegedAccessGroupAssignmentScheduleInstance.accessId = n.getEnumValue<PrivilegedAccessGroupRelationships>(PrivilegedAccessGroupRelationships); },
        "activatedUsing": n => { privilegedAccessGroupAssignmentScheduleInstance.activatedUsing = n.getObjectValue<PrivilegedAccessGroupEligibilityScheduleInstance>(createPrivilegedAccessGroupEligibilityScheduleInstanceFromDiscriminatorValue); },
        "assignmentScheduleId": n => { privilegedAccessGroupAssignmentScheduleInstance.assignmentScheduleId = n.getStringValue(); },
        "assignmentType": n => { privilegedAccessGroupAssignmentScheduleInstance.assignmentType = n.getEnumValue<PrivilegedAccessGroupAssignmentType>(PrivilegedAccessGroupAssignmentType); },
        "group": n => { privilegedAccessGroupAssignmentScheduleInstance.group = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "groupId": n => { privilegedAccessGroupAssignmentScheduleInstance.groupId = n.getStringValue(); },
        "memberType": n => { privilegedAccessGroupAssignmentScheduleInstance.memberType = n.getEnumValue<PrivilegedAccessGroupMemberType>(PrivilegedAccessGroupMemberType); },
        "principal": n => { privilegedAccessGroupAssignmentScheduleInstance.principal = n.getObjectValue<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "principalId": n => { privilegedAccessGroupAssignmentScheduleInstance.principalId = n.getStringValue(); },
    }
}
export interface PrivilegedAccessGroupAssignmentScheduleInstance extends Parsable, PrivilegedAccessScheduleInstance {
    /**
     * The identifier of the membership or ownership assignment relationship to the group. Required. The possible values are: owner, member,  unknownFutureValue. Supports $filter (eq).
     */
    accessId?: PrivilegedAccessGroupRelationships;
    /**
     * When the request activates a membership or ownership in PIM for groups, this object represents the eligibility request for the group. Otherwise, it is null.
     */
    activatedUsing?: PrivilegedAccessGroupEligibilityScheduleInstance;
    /**
     * The identifier of the privilegedAccessGroupAssignmentSchedule from which this instance was created. Required. Supports $filter (eq, ne).
     */
    assignmentScheduleId?: string;
    /**
     * Indicates whether the membership or ownership assignment is granted through activation of an eligibility or through direct assignment. Required. The possible values are: assigned, activated, unknownFutureValue. Supports $filter (eq).
     */
    assignmentType?: PrivilegedAccessGroupAssignmentType;
    /**
     * References the group that is the scope of the membership or ownership assignment through PIM for groups. Supports $expand.
     */
    group?: Group;
    /**
     * The identifier of the group representing the scope of the membership or ownership assignment through PIM for groups. Optional. Supports $filter (eq).
     */
    groupId?: string;
    /**
     * Indicates whether the assignment is derived from a group assignment. It can further imply whether the caller can manage the assignment schedule. Required. The possible values are: direct, group, unknownFutureValue. Supports $filter (eq).
     */
    memberType?: PrivilegedAccessGroupMemberType;
    /**
     * References the principal that's in the scope of the membership or ownership assignment request through the group that's governed by PIM. Supports $expand.
     */
    principal?: DirectoryObject;
    /**
     * The identifier of the principal whose membership or ownership assignment to the group is managed through PIM for groups. Required. Supports $filter (eq).
     */
    principalId?: string;
}
export function serializePrivilegedAccessGroupAssignmentScheduleInstance(writer: SerializationWriter, privilegedAccessGroupAssignmentScheduleInstance: PrivilegedAccessGroupAssignmentScheduleInstance | undefined = {} as PrivilegedAccessGroupAssignmentScheduleInstance) : void {
    serializePrivilegedAccessScheduleInstance(writer, privilegedAccessGroupAssignmentScheduleInstance)
    writer.writeEnumValue<PrivilegedAccessGroupRelationships>("accessId", privilegedAccessGroupAssignmentScheduleInstance.accessId);
    writer.writeObjectValue<PrivilegedAccessGroupEligibilityScheduleInstance>("activatedUsing", privilegedAccessGroupAssignmentScheduleInstance.activatedUsing, serializePrivilegedAccessGroupEligibilityScheduleInstance);
    writer.writeStringValue("assignmentScheduleId", privilegedAccessGroupAssignmentScheduleInstance.assignmentScheduleId);
    writer.writeEnumValue<PrivilegedAccessGroupAssignmentType>("assignmentType", privilegedAccessGroupAssignmentScheduleInstance.assignmentType);
    writer.writeObjectValue<Group>("group", privilegedAccessGroupAssignmentScheduleInstance.group, serializeGroup);
    writer.writeStringValue("groupId", privilegedAccessGroupAssignmentScheduleInstance.groupId);
    writer.writeEnumValue<PrivilegedAccessGroupMemberType>("memberType", privilegedAccessGroupAssignmentScheduleInstance.memberType);
    writer.writeObjectValue<DirectoryObject>("principal", privilegedAccessGroupAssignmentScheduleInstance.principal, serializeDirectoryObject);
    writer.writeStringValue("principalId", privilegedAccessGroupAssignmentScheduleInstance.principalId);
}
// tslint:enable
// eslint-enable
