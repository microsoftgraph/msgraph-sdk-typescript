// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Room, type RoomList } from './index';
import { createOutlookGeoCoordinatesFromDiscriminatorValue, serializeOutlookGeoCoordinates, type OutlookGeoCoordinates } from './outlookGeoCoordinates';
import { createPhysicalAddressFromDiscriminatorValue, serializePhysicalAddress, type PhysicalAddress } from './physicalAddress';
import { deserializeIntoRoom } from './room';
import { deserializeIntoRoomList } from './roomList';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPlaceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.room":
                    return deserializeIntoRoom;
                case "#microsoft.graph.roomList":
                    return deserializeIntoRoomList;
            }
        }
    }
    return deserializeIntoPlace;
}
export function deserializeIntoPlace(place: Place | undefined = {} as Place) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(place),
        "address": n => { place.address = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "displayName": n => { place.displayName = n.getStringValue(); },
        "geoCoordinates": n => { place.geoCoordinates = n.getObjectValue<OutlookGeoCoordinates>(createOutlookGeoCoordinatesFromDiscriminatorValue); },
        "phone": n => { place.phone = n.getStringValue(); },
    }
}
export interface Place extends Entity, Parsable {
    /**
     * The street address of the place.
     */
    address?: PhysicalAddress;
    /**
     * The name associated with the place.
     */
    displayName?: string;
    /**
     * Specifies the place location in latitude, longitude and (optionally) altitude coordinates.
     */
    geoCoordinates?: OutlookGeoCoordinates;
    /**
     * The phone number of the place.
     */
    phone?: string;
}
export function serializePlace(writer: SerializationWriter, place: Place | undefined = {} as Place) : void {
        serializeEntity(writer, place)
        writer.writeObjectValue<PhysicalAddress>("address", place.address, serializePhysicalAddress);
        writer.writeStringValue("displayName", place.displayName);
        writer.writeObjectValue<OutlookGeoCoordinates>("geoCoordinates", place.geoCoordinates, serializeOutlookGeoCoordinates);
        writer.writeStringValue("phone", place.phone);
}
// tslint:enable
// eslint-enable
