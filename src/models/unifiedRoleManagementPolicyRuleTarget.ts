// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { UnifiedRoleManagementPolicyRuleTargetOperations } from './unifiedRoleManagementPolicyRuleTargetOperations';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleManagementPolicyRuleTargetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRoleManagementPolicyRuleTarget;
}
export function deserializeIntoUnifiedRoleManagementPolicyRuleTarget(unifiedRoleManagementPolicyRuleTarget: UnifiedRoleManagementPolicyRuleTarget | undefined = {} as UnifiedRoleManagementPolicyRuleTarget) : Record<string, (node: ParseNode) => void> {
    return {
        "caller": n => { unifiedRoleManagementPolicyRuleTarget.caller = n.getStringValue(); },
        "enforcedSettings": n => { unifiedRoleManagementPolicyRuleTarget.enforcedSettings = n.getCollectionOfPrimitiveValues<string>(); },
        "inheritableSettings": n => { unifiedRoleManagementPolicyRuleTarget.inheritableSettings = n.getCollectionOfPrimitiveValues<string>(); },
        "level": n => { unifiedRoleManagementPolicyRuleTarget.level = n.getStringValue(); },
        "@odata.type": n => { unifiedRoleManagementPolicyRuleTarget.odataType = n.getStringValue(); },
        "operations": n => { unifiedRoleManagementPolicyRuleTarget.operations = n.getCollectionOfEnumValues<UnifiedRoleManagementPolicyRuleTargetOperations>(UnifiedRoleManagementPolicyRuleTargetOperations); },
        "targetObjects": n => { unifiedRoleManagementPolicyRuleTarget.targetObjects = n.getCollectionOfObjectValues<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
    }
}
export function serializeUnifiedRoleManagementPolicyRuleTarget(writer: SerializationWriter, unifiedRoleManagementPolicyRuleTarget: UnifiedRoleManagementPolicyRuleTarget | undefined = {} as UnifiedRoleManagementPolicyRuleTarget) : void {
    writer.writeStringValue("caller", unifiedRoleManagementPolicyRuleTarget.caller);
    writer.writeCollectionOfPrimitiveValues<string>("enforcedSettings", unifiedRoleManagementPolicyRuleTarget.enforcedSettings);
    writer.writeCollectionOfPrimitiveValues<string>("inheritableSettings", unifiedRoleManagementPolicyRuleTarget.inheritableSettings);
    writer.writeStringValue("level", unifiedRoleManagementPolicyRuleTarget.level);
    writer.writeStringValue("@odata.type", unifiedRoleManagementPolicyRuleTarget.odataType);
    if(unifiedRoleManagementPolicyRuleTarget.operations)
    writer.writeEnumValue<UnifiedRoleManagementPolicyRuleTargetOperations>("operations", ...unifiedRoleManagementPolicyRuleTarget.operations);
    writer.writeCollectionOfObjectValues<DirectoryObject>("targetObjects", unifiedRoleManagementPolicyRuleTarget.targetObjects, serializeDirectoryObject);
    writer.writeAdditionalData(unifiedRoleManagementPolicyRuleTarget.additionalData);
}
export interface UnifiedRoleManagementPolicyRuleTarget extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The type of caller that's the target of the policy rule. Allowed values are: None, Admin, EndUser.
     */
    caller?: string;
    /**
     * The list of role settings that are enforced and cannot be overridden by child scopes. Use All for all settings.
     */
    enforcedSettings?: string[];
    /**
     * The list of role settings that can be inherited by child scopes. Use All for all settings.
     */
    inheritableSettings?: string[];
    /**
     * The role assignment type that's the target of policy rule. Allowed values are: Eligibility, Assignment.
     */
    level?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The role management operations that are the target of the policy rule. Allowed values are: All, Activate, Deactivate, Assign, Update, Remove, Extend, Renew.
     */
    operations?: UnifiedRoleManagementPolicyRuleTargetOperations[];
    /**
     * The targetObjects property
     */
    targetObjects?: DirectoryObject[];
}
// tslint:enable
// eslint-enable
