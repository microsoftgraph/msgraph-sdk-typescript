// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createLicenseUnitsDetailFromDiscriminatorValue, serializeLicenseUnitsDetail, type LicenseUnitsDetail } from './licenseUnitsDetail';
import { createServicePlanInfoFromDiscriminatorValue, serializeServicePlanInfo, type ServicePlanInfo } from './servicePlanInfo';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export function createSubscribedSkuFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSubscribedSku;
}
export function deserializeIntoSubscribedSku(subscribedSku: SubscribedSku | undefined = {} as SubscribedSku) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(subscribedSku),
        "accountId": n => { subscribedSku.accountId = n.getStringValue(); },
        "accountName": n => { subscribedSku.accountName = n.getStringValue(); },
        "appliesTo": n => { subscribedSku.appliesTo = n.getStringValue(); },
        "capabilityStatus": n => { subscribedSku.capabilityStatus = n.getStringValue(); },
        "consumedUnits": n => { subscribedSku.consumedUnits = n.getNumberValue(); },
        "prepaidUnits": n => { subscribedSku.prepaidUnits = n.getObjectValue<LicenseUnitsDetail>(createLicenseUnitsDetailFromDiscriminatorValue); },
        "servicePlans": n => { subscribedSku.servicePlans = n.getCollectionOfObjectValues<ServicePlanInfo>(createServicePlanInfoFromDiscriminatorValue); },
        "skuId": n => { subscribedSku.skuId = n.getGuidValue(); },
        "skuPartNumber": n => { subscribedSku.skuPartNumber = n.getStringValue(); },
        "subscriptionIds": n => { subscribedSku.subscriptionIds = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export function serializeSubscribedSku(writer: SerializationWriter, subscribedSku: SubscribedSku | undefined = {} as SubscribedSku) : void {
    serializeEntity(writer, subscribedSku)
    writer.writeStringValue("accountId", subscribedSku.accountId);
    writer.writeStringValue("accountName", subscribedSku.accountName);
    writer.writeStringValue("appliesTo", subscribedSku.appliesTo);
    writer.writeStringValue("capabilityStatus", subscribedSku.capabilityStatus);
    writer.writeNumberValue("consumedUnits", subscribedSku.consumedUnits);
    writer.writeObjectValue<LicenseUnitsDetail>("prepaidUnits", subscribedSku.prepaidUnits, serializeLicenseUnitsDetail);
    writer.writeCollectionOfObjectValues<ServicePlanInfo>("servicePlans", subscribedSku.servicePlans, serializeServicePlanInfo);
    writer.writeGuidValue("skuId", subscribedSku.skuId);
    writer.writeStringValue("skuPartNumber", subscribedSku.skuPartNumber);
    writer.writeCollectionOfPrimitiveValues<string>("subscriptionIds", subscribedSku.subscriptionIds);
}
export interface SubscribedSku extends Entity, Parsable {
    /**
     * The unique ID of the account this SKU belongs to.
     */
    accountId?: string;
    /**
     * The name of the account this SKU belongs to.
     */
    accountName?: string;
    /**
     * The target class for this SKU. Only SKUs with target class User are assignable. Possible values are: 'User', 'Company'.
     */
    appliesTo?: string;
    /**
     * Enabled indicates that the prepaidUnits property has at least one unit that is enabled. LockedOut indicates that the customer canceled their subscription. Possible values are: Enabled, Warning, Suspended, Deleted, LockedOut.
     */
    capabilityStatus?: string;
    /**
     * The number of licenses that have been assigned.
     */
    consumedUnits?: number;
    /**
     * Information about the number and status of prepaid licenses.
     */
    prepaidUnits?: LicenseUnitsDetail;
    /**
     * Information about the service plans that are available with the SKU. Not nullable.
     */
    servicePlans?: ServicePlanInfo[];
    /**
     * The unique identifier (GUID) for the service SKU.
     */
    skuId?: Guid;
    /**
     * The SKU part number; for example: 'AAD_PREMIUM' or 'RMSBASIC'. To get a list of commercial subscriptions that an organization has acquired, see List subscribedSkus.
     */
    skuPartNumber?: string;
    /**
     * The subscriptionIds property
     */
    subscriptionIds?: string[];
}
// tslint:enable
// eslint-enable
