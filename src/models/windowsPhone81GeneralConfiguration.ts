// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAppListItemFromDiscriminatorValue, serializeAppListItem, type AppListItem } from './appListItem';
import { AppListType } from './appListType';
import { deserializeIntoDeviceConfiguration, serializeDeviceConfiguration, type DeviceConfiguration } from './deviceConfiguration';
import { RequiredPasswordType } from './requiredPasswordType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindowsPhone81GeneralConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindowsPhone81GeneralConfiguration;
}
export function deserializeIntoWindowsPhone81GeneralConfiguration(windowsPhone81GeneralConfiguration: WindowsPhone81GeneralConfiguration | undefined = {} as WindowsPhone81GeneralConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceConfiguration(windowsPhone81GeneralConfiguration),
        "applyOnlyToWindowsPhone81": n => { windowsPhone81GeneralConfiguration.applyOnlyToWindowsPhone81 = n.getBooleanValue(); },
        "appsBlockCopyPaste": n => { windowsPhone81GeneralConfiguration.appsBlockCopyPaste = n.getBooleanValue(); },
        "bluetoothBlocked": n => { windowsPhone81GeneralConfiguration.bluetoothBlocked = n.getBooleanValue(); },
        "cameraBlocked": n => { windowsPhone81GeneralConfiguration.cameraBlocked = n.getBooleanValue(); },
        "cellularBlockWifiTethering": n => { windowsPhone81GeneralConfiguration.cellularBlockWifiTethering = n.getBooleanValue(); },
        "compliantAppListType": n => { windowsPhone81GeneralConfiguration.compliantAppListType = n.getEnumValue<AppListType>(AppListType); },
        "compliantAppsList": n => { windowsPhone81GeneralConfiguration.compliantAppsList = n.getCollectionOfObjectValues<AppListItem>(createAppListItemFromDiscriminatorValue); },
        "diagnosticDataBlockSubmission": n => { windowsPhone81GeneralConfiguration.diagnosticDataBlockSubmission = n.getBooleanValue(); },
        "emailBlockAddingAccounts": n => { windowsPhone81GeneralConfiguration.emailBlockAddingAccounts = n.getBooleanValue(); },
        "locationServicesBlocked": n => { windowsPhone81GeneralConfiguration.locationServicesBlocked = n.getBooleanValue(); },
        "microsoftAccountBlocked": n => { windowsPhone81GeneralConfiguration.microsoftAccountBlocked = n.getBooleanValue(); },
        "nfcBlocked": n => { windowsPhone81GeneralConfiguration.nfcBlocked = n.getBooleanValue(); },
        "passwordBlockSimple": n => { windowsPhone81GeneralConfiguration.passwordBlockSimple = n.getBooleanValue(); },
        "passwordExpirationDays": n => { windowsPhone81GeneralConfiguration.passwordExpirationDays = n.getNumberValue(); },
        "passwordMinimumCharacterSetCount": n => { windowsPhone81GeneralConfiguration.passwordMinimumCharacterSetCount = n.getNumberValue(); },
        "passwordMinimumLength": n => { windowsPhone81GeneralConfiguration.passwordMinimumLength = n.getNumberValue(); },
        "passwordMinutesOfInactivityBeforeScreenTimeout": n => { windowsPhone81GeneralConfiguration.passwordMinutesOfInactivityBeforeScreenTimeout = n.getNumberValue(); },
        "passwordPreviousPasswordBlockCount": n => { windowsPhone81GeneralConfiguration.passwordPreviousPasswordBlockCount = n.getNumberValue(); },
        "passwordRequired": n => { windowsPhone81GeneralConfiguration.passwordRequired = n.getBooleanValue(); },
        "passwordRequiredType": n => { windowsPhone81GeneralConfiguration.passwordRequiredType = n.getEnumValue<RequiredPasswordType>(RequiredPasswordType); },
        "passwordSignInFailureCountBeforeFactoryReset": n => { windowsPhone81GeneralConfiguration.passwordSignInFailureCountBeforeFactoryReset = n.getNumberValue(); },
        "screenCaptureBlocked": n => { windowsPhone81GeneralConfiguration.screenCaptureBlocked = n.getBooleanValue(); },
        "storageBlockRemovableStorage": n => { windowsPhone81GeneralConfiguration.storageBlockRemovableStorage = n.getBooleanValue(); },
        "storageRequireEncryption": n => { windowsPhone81GeneralConfiguration.storageRequireEncryption = n.getBooleanValue(); },
        "webBrowserBlocked": n => { windowsPhone81GeneralConfiguration.webBrowserBlocked = n.getBooleanValue(); },
        "wifiBlockAutomaticConnectHotspots": n => { windowsPhone81GeneralConfiguration.wifiBlockAutomaticConnectHotspots = n.getBooleanValue(); },
        "wifiBlocked": n => { windowsPhone81GeneralConfiguration.wifiBlocked = n.getBooleanValue(); },
        "wifiBlockHotspotReporting": n => { windowsPhone81GeneralConfiguration.wifiBlockHotspotReporting = n.getBooleanValue(); },
        "windowsStoreBlocked": n => { windowsPhone81GeneralConfiguration.windowsStoreBlocked = n.getBooleanValue(); },
    }
}
export function serializeWindowsPhone81GeneralConfiguration(writer: SerializationWriter, windowsPhone81GeneralConfiguration: WindowsPhone81GeneralConfiguration | undefined = {} as WindowsPhone81GeneralConfiguration) : void {
        serializeDeviceConfiguration(writer, windowsPhone81GeneralConfiguration)
        writer.writeBooleanValue("appsBlockCopyPaste", windowsPhone81GeneralConfiguration.appsBlockCopyPaste);
        writer.writeBooleanValue("bluetoothBlocked", windowsPhone81GeneralConfiguration.bluetoothBlocked);
        writer.writeBooleanValue("cameraBlocked", windowsPhone81GeneralConfiguration.cameraBlocked);
        writer.writeBooleanValue("cellularBlockWifiTethering", windowsPhone81GeneralConfiguration.cellularBlockWifiTethering);
        writer.writeEnumValue<AppListType>("compliantAppListType", windowsPhone81GeneralConfiguration.compliantAppListType);
        writer.writeCollectionOfObjectValues<AppListItem>("compliantAppsList", windowsPhone81GeneralConfiguration.compliantAppsList, serializeAppListItem);
        writer.writeBooleanValue("diagnosticDataBlockSubmission", windowsPhone81GeneralConfiguration.diagnosticDataBlockSubmission);
        writer.writeBooleanValue("emailBlockAddingAccounts", windowsPhone81GeneralConfiguration.emailBlockAddingAccounts);
        writer.writeBooleanValue("locationServicesBlocked", windowsPhone81GeneralConfiguration.locationServicesBlocked);
        writer.writeBooleanValue("microsoftAccountBlocked", windowsPhone81GeneralConfiguration.microsoftAccountBlocked);
        writer.writeBooleanValue("nfcBlocked", windowsPhone81GeneralConfiguration.nfcBlocked);
        writer.writeBooleanValue("passwordBlockSimple", windowsPhone81GeneralConfiguration.passwordBlockSimple);
        writer.writeNumberValue("passwordExpirationDays", windowsPhone81GeneralConfiguration.passwordExpirationDays);
        writer.writeNumberValue("passwordMinimumCharacterSetCount", windowsPhone81GeneralConfiguration.passwordMinimumCharacterSetCount);
        writer.writeNumberValue("passwordMinimumLength", windowsPhone81GeneralConfiguration.passwordMinimumLength);
        writer.writeNumberValue("passwordMinutesOfInactivityBeforeScreenTimeout", windowsPhone81GeneralConfiguration.passwordMinutesOfInactivityBeforeScreenTimeout);
        writer.writeNumberValue("passwordPreviousPasswordBlockCount", windowsPhone81GeneralConfiguration.passwordPreviousPasswordBlockCount);
        writer.writeBooleanValue("passwordRequired", windowsPhone81GeneralConfiguration.passwordRequired);
        writer.writeEnumValue<RequiredPasswordType>("passwordRequiredType", windowsPhone81GeneralConfiguration.passwordRequiredType);
        writer.writeNumberValue("passwordSignInFailureCountBeforeFactoryReset", windowsPhone81GeneralConfiguration.passwordSignInFailureCountBeforeFactoryReset);
        writer.writeBooleanValue("screenCaptureBlocked", windowsPhone81GeneralConfiguration.screenCaptureBlocked);
        writer.writeBooleanValue("storageBlockRemovableStorage", windowsPhone81GeneralConfiguration.storageBlockRemovableStorage);
        writer.writeBooleanValue("storageRequireEncryption", windowsPhone81GeneralConfiguration.storageRequireEncryption);
        writer.writeBooleanValue("webBrowserBlocked", windowsPhone81GeneralConfiguration.webBrowserBlocked);
        writer.writeBooleanValue("wifiBlockAutomaticConnectHotspots", windowsPhone81GeneralConfiguration.wifiBlockAutomaticConnectHotspots);
        writer.writeBooleanValue("wifiBlocked", windowsPhone81GeneralConfiguration.wifiBlocked);
        writer.writeBooleanValue("wifiBlockHotspotReporting", windowsPhone81GeneralConfiguration.wifiBlockHotspotReporting);
        writer.writeBooleanValue("windowsStoreBlocked", windowsPhone81GeneralConfiguration.windowsStoreBlocked);
}
export interface WindowsPhone81GeneralConfiguration extends DeviceConfiguration, Parsable {
    /**
     * Value indicating whether this policy only applies to Windows Phone 8.1. This property is read-only.
     */
    applyOnlyToWindowsPhone81?: boolean;
    /**
     * Indicates whether or not to block copy paste.
     */
    appsBlockCopyPaste?: boolean;
    /**
     * Indicates whether or not to block bluetooth.
     */
    bluetoothBlocked?: boolean;
    /**
     * Indicates whether or not to block camera.
     */
    cameraBlocked?: boolean;
    /**
     * Indicates whether or not to block Wi-Fi tethering. Has no impact if Wi-Fi is blocked.
     */
    cellularBlockWifiTethering?: boolean;
    /**
     * Possible values of the compliance app list.
     */
    compliantAppListType?: AppListType;
    /**
     * List of apps in the compliance (either allow list or block list, controlled by CompliantAppListType). This collection can contain a maximum of 10000 elements.
     */
    compliantAppsList?: AppListItem[];
    /**
     * Indicates whether or not to block diagnostic data submission.
     */
    diagnosticDataBlockSubmission?: boolean;
    /**
     * Indicates whether or not to block custom email accounts.
     */
    emailBlockAddingAccounts?: boolean;
    /**
     * Indicates whether or not to block location services.
     */
    locationServicesBlocked?: boolean;
    /**
     * Indicates whether or not to block using a Microsoft Account.
     */
    microsoftAccountBlocked?: boolean;
    /**
     * Indicates whether or not to block Near-Field Communication.
     */
    nfcBlocked?: boolean;
    /**
     * Indicates whether or not to block syncing the calendar.
     */
    passwordBlockSimple?: boolean;
    /**
     * Number of days before the password expires.
     */
    passwordExpirationDays?: number;
    /**
     * Number of character sets a password must contain.
     */
    passwordMinimumCharacterSetCount?: number;
    /**
     * Minimum length of passwords.
     */
    passwordMinimumLength?: number;
    /**
     * Minutes of inactivity before screen timeout.
     */
    passwordMinutesOfInactivityBeforeScreenTimeout?: number;
    /**
     * Number of previous passwords to block. Valid values 0 to 24
     */
    passwordPreviousPasswordBlockCount?: number;
    /**
     * Indicates whether or not to require a password.
     */
    passwordRequired?: boolean;
    /**
     * Possible values of required passwords.
     */
    passwordRequiredType?: RequiredPasswordType;
    /**
     * Number of sign in failures allowed before factory reset.
     */
    passwordSignInFailureCountBeforeFactoryReset?: number;
    /**
     * Indicates whether or not to block screenshots.
     */
    screenCaptureBlocked?: boolean;
    /**
     * Indicates whether or not to block removable storage.
     */
    storageBlockRemovableStorage?: boolean;
    /**
     * Indicates whether or not to require encryption.
     */
    storageRequireEncryption?: boolean;
    /**
     * Indicates whether or not to block the web browser.
     */
    webBrowserBlocked?: boolean;
    /**
     * Indicates whether or not to block automatically connecting to Wi-Fi hotspots. Has no impact if Wi-Fi is blocked.
     */
    wifiBlockAutomaticConnectHotspots?: boolean;
    /**
     * Indicates whether or not to block Wi-Fi.
     */
    wifiBlocked?: boolean;
    /**
     * Indicates whether or not to block Wi-Fi hotspot reporting. Has no impact if Wi-Fi is blocked.
     */
    wifiBlockHotspotReporting?: boolean;
    /**
     * Indicates whether or not to block the Windows Store.
     */
    windowsStoreBlocked?: boolean;
}
// tslint:enable
// eslint-enable
