import {PasswordCredential} from './passwordCredential';
import {AdditionalDataHolder, Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export class PasswordCredentialImpl implements AdditionalDataHolder, Parsable, PasswordCredential {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    public additionalData: Record<string, unknown>;
    /** Do not use. */
    public customKeyIdentifier?: string | undefined;
    /** Friendly name for the password. Optional. */
    public displayName?: string | undefined;
    /** The date and time at which the password expires represented using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional. */
    public endDateTime?: Date | undefined;
    /** Contains the first three characters of the password. Read-only. */
    public hint?: string | undefined;
    /** The unique identifier for the password. */
    public keyId?: string | undefined;
    /** Read-only; Contains the strong passwords generated by Azure AD that are 16-64 characters in length. The generated password value is only returned during the initial POST request to addPassword. There is no way to retrieve this password in the future. */
    public secretText?: string | undefined;
    /** The date and time at which the password becomes valid. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional. */
    public startDateTime?: Date | undefined;
    /**
     * Instantiates a new passwordCredential and sets the default values.
     * @param passwordCredentialParameterValue 
     */
    public constructor(passwordCredentialParameterValue?: PasswordCredential | undefined) {
        this.additionalData = passwordCredentialParameterValue?.additionalData ? passwordCredentialParameterValue?.additionalData! : {}
        this.customKeyIdentifier = passwordCredentialParameterValue?.customKeyIdentifier ;
        this.displayName = passwordCredentialParameterValue?.displayName ;
        this.endDateTime = passwordCredentialParameterValue?.endDateTime ;
        this.hint = passwordCredentialParameterValue?.hint ;
        this.keyId = passwordCredentialParameterValue?.keyId ;
        this.secretText = passwordCredentialParameterValue?.secretText ;
        this.startDateTime = passwordCredentialParameterValue?.startDateTime ;
    };
    /**
     * The deserialization information for the current model
     * @returns a Record<string, (node: ParseNode) => void>
     */
    public getFieldDeserializers() : Record<string, (node: ParseNode) => void> {
        return {
            "customKeyIdentifier": n => { this.customKeyIdentifier = n.getStringValue(); },
            "displayName": n => { this.displayName = n.getStringValue(); },
            "endDateTime": n => { this.endDateTime = n.getDateValue(); },
            "hint": n => { this.hint = n.getStringValue(); },
            "keyId": n => { this.keyId = n.getStringValue(); },
            "secretText": n => { this.secretText = n.getStringValue(); },
            "startDateTime": n => { this.startDateTime = n.getDateValue(); },
        };
    };
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    public serialize(writer: SerializationWriter) : void {
        if(!writer) throw new Error("writer cannot be undefined");
        if(this.customKeyIdentifier){
        writer.writeStringValue("customKeyIdentifier", this.customKeyIdentifier);
        }
        if(this.displayName){
        writer.writeStringValue("displayName", this.displayName);
        }
        if(this.endDateTime){
        writer.writeDateValue("endDateTime", this.endDateTime);
        }
        if(this.hint){
        writer.writeStringValue("hint", this.hint);
        }
        if(this.keyId){
        writer.writeStringValue("keyId", this.keyId);
        }
        if(this.secretText){
        writer.writeStringValue("secretText", this.secretText);
        }
        if(this.startDateTime){
        writer.writeDateValue("startDateTime", this.startDateTime);
        }
        writer.writeAdditionalData(this.additionalData);
    };
}
