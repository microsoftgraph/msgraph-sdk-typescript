// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessLocations extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Location IDs excluded from scope of policy.
     */
    excludeLocations?: string[];
    /**
     * Location IDs in scope of policy unless explicitly excluded, All, or AllTrusted.
     */
    includeLocations?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createConditionalAccessLocationsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessLocations;
}
export function deserializeIntoConditionalAccessLocations(conditionalAccessLocations: ConditionalAccessLocations | undefined = {} as ConditionalAccessLocations) : Record<string, (node: ParseNode) => void> {
    return {
        "excludeLocations": n => { conditionalAccessLocations.excludeLocations = n.getCollectionOfPrimitiveValues<string>(); },
        "includeLocations": n => { conditionalAccessLocations.includeLocations = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { conditionalAccessLocations.odataType = n.getStringValue(); },
    }
}
export function serializeConditionalAccessLocations(writer: SerializationWriter, conditionalAccessLocations: ConditionalAccessLocations | undefined = {} as ConditionalAccessLocations) : void {
    writer.writeCollectionOfPrimitiveValues<string>("excludeLocations", conditionalAccessLocations.excludeLocations);
    writer.writeCollectionOfPrimitiveValues<string>("includeLocations", conditionalAccessLocations.includeLocations);
    writer.writeStringValue("@odata.type", conditionalAccessLocations.odataType);
    writer.writeAdditionalData(conditionalAccessLocations.additionalData);
}
// tslint:enable
// eslint-enable
