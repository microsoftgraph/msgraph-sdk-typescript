// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttributeMappingParameterSchemaFromDiscriminatorValue, serializeAttributeMappingParameterSchema, type AttributeMappingParameterSchema } from './attributeMappingParameterSchema';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttributeMappingFunctionSchema extends Entity, Parsable {
    /**
     * Collection of function parameters.
     */
    parameters?: AttributeMappingParameterSchema[];
}
export function createAttributeMappingFunctionSchemaFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttributeMappingFunctionSchema;
}
export function deserializeIntoAttributeMappingFunctionSchema(attributeMappingFunctionSchema: AttributeMappingFunctionSchema | undefined = {} as AttributeMappingFunctionSchema) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(attributeMappingFunctionSchema),
        "parameters": n => { attributeMappingFunctionSchema.parameters = n.getCollectionOfObjectValues<AttributeMappingParameterSchema>(createAttributeMappingParameterSchemaFromDiscriminatorValue); },
    }
}
export function serializeAttributeMappingFunctionSchema(writer: SerializationWriter, attributeMappingFunctionSchema: AttributeMappingFunctionSchema | undefined = {} as AttributeMappingFunctionSchema) : void {
        serializeEntity(writer, attributeMappingFunctionSchema)
        writer.writeCollectionOfObjectValues<AttributeMappingParameterSchema>("parameters", attributeMappingFunctionSchema.parameters, serializeAttributeMappingParameterSchema);
}
// tslint:enable
// eslint-enable
