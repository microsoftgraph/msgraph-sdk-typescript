// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDeviceConfiguration, serializeDeviceConfiguration, type DeviceConfiguration } from './deviceConfiguration';
import { createSharedPCAccountManagerPolicyFromDiscriminatorValue, serializeSharedPCAccountManagerPolicy, type SharedPCAccountManagerPolicy } from './sharedPCAccountManagerPolicy';
import { SharedPCAllowedAccountType } from './sharedPCAllowedAccountType';
import { type Parsable, type ParseNode, type SerializationWriter, type TimeOnly } from '@microsoft/kiota-abstractions';

export function createSharedPCConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSharedPCConfiguration;
}
export function deserializeIntoSharedPCConfiguration(sharedPCConfiguration: SharedPCConfiguration | undefined = {} as SharedPCConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceConfiguration(sharedPCConfiguration),
        "accountManagerPolicy": n => { sharedPCConfiguration.accountManagerPolicy = n.getObjectValue<SharedPCAccountManagerPolicy>(createSharedPCAccountManagerPolicyFromDiscriminatorValue); },
        "allowedAccounts": n => { sharedPCConfiguration.allowedAccounts = n.getCollectionOfEnumValues<SharedPCAllowedAccountType>(SharedPCAllowedAccountType); },
        "allowLocalStorage": n => { sharedPCConfiguration.allowLocalStorage = n.getBooleanValue(); },
        "disableAccountManager": n => { sharedPCConfiguration.disableAccountManager = n.getBooleanValue(); },
        "disableEduPolicies": n => { sharedPCConfiguration.disableEduPolicies = n.getBooleanValue(); },
        "disablePowerPolicies": n => { sharedPCConfiguration.disablePowerPolicies = n.getBooleanValue(); },
        "disableSignInOnResume": n => { sharedPCConfiguration.disableSignInOnResume = n.getBooleanValue(); },
        "enabled": n => { sharedPCConfiguration.enabled = n.getBooleanValue(); },
        "idleTimeBeforeSleepInSeconds": n => { sharedPCConfiguration.idleTimeBeforeSleepInSeconds = n.getNumberValue(); },
        "kioskAppDisplayName": n => { sharedPCConfiguration.kioskAppDisplayName = n.getStringValue(); },
        "kioskAppUserModelId": n => { sharedPCConfiguration.kioskAppUserModelId = n.getStringValue(); },
        "maintenanceStartTime": n => { sharedPCConfiguration.maintenanceStartTime = n.getTimeOnlyValue(); },
    }
}
export function serializeSharedPCConfiguration(writer: SerializationWriter, sharedPCConfiguration: SharedPCConfiguration | undefined = {} as SharedPCConfiguration) : void {
        serializeDeviceConfiguration(writer, sharedPCConfiguration)
        writer.writeObjectValue<SharedPCAccountManagerPolicy>("accountManagerPolicy", sharedPCConfiguration.accountManagerPolicy, );
        writer.writeEnumValue<SharedPCAllowedAccountType[]>("allowedAccounts", sharedPCConfiguration.allowedAccounts);
        writer.writeBooleanValue("allowLocalStorage", sharedPCConfiguration.allowLocalStorage);
        writer.writeBooleanValue("disableAccountManager", sharedPCConfiguration.disableAccountManager);
        writer.writeBooleanValue("disableEduPolicies", sharedPCConfiguration.disableEduPolicies);
        writer.writeBooleanValue("disablePowerPolicies", sharedPCConfiguration.disablePowerPolicies);
        writer.writeBooleanValue("disableSignInOnResume", sharedPCConfiguration.disableSignInOnResume);
        writer.writeBooleanValue("enabled", sharedPCConfiguration.enabled);
        writer.writeNumberValue("idleTimeBeforeSleepInSeconds", sharedPCConfiguration.idleTimeBeforeSleepInSeconds);
        writer.writeStringValue("kioskAppDisplayName", sharedPCConfiguration.kioskAppDisplayName);
        writer.writeStringValue("kioskAppUserModelId", sharedPCConfiguration.kioskAppUserModelId);
        writer.writeTimeOnlyValue("maintenanceStartTime", sharedPCConfiguration.maintenanceStartTime);
}
export interface SharedPCConfiguration extends DeviceConfiguration, Parsable {
    /**
     * Specifies how accounts are managed on a shared PC. Only applies when disableAccountManager is false.
     */
    accountManagerPolicy?: SharedPCAccountManagerPolicy;
    /**
     * Type of accounts that are allowed to share the PC.
     */
    allowedAccounts?: SharedPCAllowedAccountType[];
    /**
     * Specifies whether local storage is allowed on a shared PC.
     */
    allowLocalStorage?: boolean;
    /**
     * Disables the account manager for shared PC mode.
     */
    disableAccountManager?: boolean;
    /**
     * Specifies whether the default shared PC education environment policies should be disabled. For Windows 10 RS2 and later, this policy will be applied without setting Enabled to true.
     */
    disableEduPolicies?: boolean;
    /**
     * Specifies whether the default shared PC power policies should be disabled.
     */
    disablePowerPolicies?: boolean;
    /**
     * Disables the requirement to sign in whenever the device wakes up from sleep mode.
     */
    disableSignInOnResume?: boolean;
    /**
     * Enables shared PC mode and applies the shared pc policies.
     */
    enabled?: boolean;
    /**
     * Specifies the time in seconds that a device must sit idle before the PC goes to sleep. Setting this value to 0 prevents the sleep timeout from occurring.
     */
    idleTimeBeforeSleepInSeconds?: number;
    /**
     * Specifies the display text for the account shown on the sign-in screen which launches the app specified by SetKioskAppUserModelId. Only applies when KioskAppUserModelId is set.
     */
    kioskAppDisplayName?: string;
    /**
     * Specifies the application user model ID of the app to use with assigned access.
     */
    kioskAppUserModelId?: string;
    /**
     * Specifies the daily start time of maintenance hour.
     */
    maintenanceStartTime?: TimeOnly;
}
// tslint:enable
// eslint-enable
