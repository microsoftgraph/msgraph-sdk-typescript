// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createHashesFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoHashes;
}
export function deserializeIntoHashes(hashes: Hashes | undefined = {} as Hashes) : Record<string, (node: ParseNode) => void> {
    return {
        "crc32Hash": n => { hashes.crc32Hash = n.getStringValue(); },
        "@odata.type": n => { hashes.odataType = n.getStringValue(); },
        "quickXorHash": n => { hashes.quickXorHash = n.getStringValue(); },
        "sha1Hash": n => { hashes.sha1Hash = n.getStringValue(); },
        "sha256Hash": n => { hashes.sha256Hash = n.getStringValue(); },
    }
}
export interface Hashes extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The CRC32 value of the file in little endian (if available). Read-only.
     */
    crc32Hash?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A proprietary hash of the file that can be used to determine if the contents of the file have changed (if available). Read-only.
     */
    quickXorHash?: string;
    /**
     * SHA1 hash for the contents of the file (if available). Read-only.
     */
    sha1Hash?: string;
    /**
     * SHA256 hash for the contents of the file (if available). Read-only.
     */
    sha256Hash?: string;
}
export function serializeHashes(writer: SerializationWriter, hashes: Hashes | undefined = {} as Hashes) : void {
        writer.writeStringValue("crc32Hash", hashes.crc32Hash);
        writer.writeStringValue("@odata.type", hashes.odataType);
        writer.writeStringValue("quickXorHash", hashes.quickXorHash);
        writer.writeStringValue("sha1Hash", hashes.sha1Hash);
        writer.writeStringValue("sha256Hash", hashes.sha256Hash);
        writer.writeAdditionalData(hashes.additionalData);
}
// tslint:enable
// eslint-enable
