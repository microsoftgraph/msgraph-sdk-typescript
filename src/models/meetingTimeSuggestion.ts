// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttendeeAvailabilityFromDiscriminatorValue, serializeAttendeeAvailability, type AttendeeAvailability } from './attendeeAvailability';
import { FreeBusyStatus } from './freeBusyStatus';
import { createLocationFromDiscriminatorValue, serializeLocation, type Location } from './location';
import { createTimeSlotFromDiscriminatorValue, serializeTimeSlot, type TimeSlot } from './timeSlot';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMeetingTimeSuggestionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMeetingTimeSuggestion;
}
export function deserializeIntoMeetingTimeSuggestion(meetingTimeSuggestion: MeetingTimeSuggestion | undefined = {} as MeetingTimeSuggestion) : Record<string, (node: ParseNode) => void> {
    return {
        "attendeeAvailability": n => { meetingTimeSuggestion.attendeeAvailability = n.getCollectionOfObjectValues<AttendeeAvailability>(createAttendeeAvailabilityFromDiscriminatorValue); },
        "confidence": n => { meetingTimeSuggestion.confidence = n.getNumberValue(); },
        "locations": n => { meetingTimeSuggestion.locations = n.getCollectionOfObjectValues<Location>(createLocationFromDiscriminatorValue); },
        "meetingTimeSlot": n => { meetingTimeSuggestion.meetingTimeSlot = n.getObjectValue<TimeSlot>(createTimeSlotFromDiscriminatorValue); },
        "@odata.type": n => { meetingTimeSuggestion.odataType = n.getStringValue(); },
        "order": n => { meetingTimeSuggestion.order = n.getNumberValue(); },
        "organizerAvailability": n => { meetingTimeSuggestion.organizerAvailability = n.getEnumValue<FreeBusyStatus>(FreeBusyStatus); },
        "suggestionReason": n => { meetingTimeSuggestion.suggestionReason = n.getStringValue(); },
    }
}
export interface MeetingTimeSuggestion extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * An array that shows the availability status of each attendee for this meeting suggestion.
     */
    attendeeAvailability?: AttendeeAvailability[];
    /**
     * A percentage that represents the likelhood of all the attendees attending.
     */
    confidence?: number;
    /**
     * An array that specifies the name and geographic location of each meeting location for this meeting suggestion.
     */
    locations?: Location[];
    /**
     * A time period suggested for the meeting.
     */
    meetingTimeSlot?: TimeSlot;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Order of meeting time suggestions sorted by their computed confidence value from high to low, then by chronology if there are suggestions with the same confidence.
     */
    order?: number;
    /**
     * Availability of the meeting organizer for this meeting suggestion. The possible values are: free, tentative, busy, oof, workingElsewhere, unknown.
     */
    organizerAvailability?: FreeBusyStatus;
    /**
     * Reason for suggesting the meeting time.
     */
    suggestionReason?: string;
}
export function serializeMeetingTimeSuggestion(writer: SerializationWriter, meetingTimeSuggestion: MeetingTimeSuggestion | undefined = {} as MeetingTimeSuggestion) : void {
        writer.writeCollectionOfObjectValues<AttendeeAvailability>("attendeeAvailability", meetingTimeSuggestion.attendeeAvailability, serializeAttendeeAvailability);
        writer.writeNumberValue("confidence", meetingTimeSuggestion.confidence);
        writer.writeCollectionOfObjectValues<Location>("locations", meetingTimeSuggestion.locations, serializeLocation);
        writer.writeObjectValue<TimeSlot>("meetingTimeSlot", meetingTimeSuggestion.meetingTimeSlot, serializeTimeSlot);
        writer.writeStringValue("@odata.type", meetingTimeSuggestion.odataType);
        writer.writeNumberValue("order", meetingTimeSuggestion.order);
        writer.writeEnumValue<FreeBusyStatus>("organizerAvailability", meetingTimeSuggestion.organizerAvailability);
        writer.writeStringValue("suggestionReason", meetingTimeSuggestion.suggestionReason);
        writer.writeAdditionalData(meetingTimeSuggestion.additionalData);
}
// tslint:enable
// eslint-enable
