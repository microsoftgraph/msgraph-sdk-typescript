// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { WindowsDefenderProductStatus } from './windowsDefenderProductStatus';
import { WindowsDeviceHealthState } from './windowsDeviceHealthState';
import { createWindowsDeviceMalwareStateFromDiscriminatorValue, serializeWindowsDeviceMalwareState, type WindowsDeviceMalwareState } from './windowsDeviceMalwareState';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindowsProtectionStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindowsProtectionState;
}
export function deserializeIntoWindowsProtectionState(windowsProtectionState: WindowsProtectionState | undefined = {} as WindowsProtectionState) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(windowsProtectionState),
        "antiMalwareVersion": n => { windowsProtectionState.antiMalwareVersion = n.getStringValue(); },
        "detectedMalwareState": n => { windowsProtectionState.detectedMalwareState = n.getCollectionOfObjectValues<WindowsDeviceMalwareState>(createWindowsDeviceMalwareStateFromDiscriminatorValue); },
        "deviceState": n => { windowsProtectionState.deviceState = n.getCollectionOfEnumValues<WindowsDeviceHealthState>(WindowsDeviceHealthState); },
        "engineVersion": n => { windowsProtectionState.engineVersion = n.getStringValue(); },
        "fullScanOverdue": n => { windowsProtectionState.fullScanOverdue = n.getBooleanValue(); },
        "fullScanRequired": n => { windowsProtectionState.fullScanRequired = n.getBooleanValue(); },
        "isVirtualMachine": n => { windowsProtectionState.isVirtualMachine = n.getBooleanValue(); },
        "lastFullScanDateTime": n => { windowsProtectionState.lastFullScanDateTime = n.getDateValue(); },
        "lastFullScanSignatureVersion": n => { windowsProtectionState.lastFullScanSignatureVersion = n.getStringValue(); },
        "lastQuickScanDateTime": n => { windowsProtectionState.lastQuickScanDateTime = n.getDateValue(); },
        "lastQuickScanSignatureVersion": n => { windowsProtectionState.lastQuickScanSignatureVersion = n.getStringValue(); },
        "lastReportedDateTime": n => { windowsProtectionState.lastReportedDateTime = n.getDateValue(); },
        "malwareProtectionEnabled": n => { windowsProtectionState.malwareProtectionEnabled = n.getBooleanValue(); },
        "networkInspectionSystemEnabled": n => { windowsProtectionState.networkInspectionSystemEnabled = n.getBooleanValue(); },
        "productStatus": n => { windowsProtectionState.productStatus = n.getCollectionOfEnumValues<WindowsDefenderProductStatus>(WindowsDefenderProductStatus); },
        "quickScanOverdue": n => { windowsProtectionState.quickScanOverdue = n.getBooleanValue(); },
        "realTimeProtectionEnabled": n => { windowsProtectionState.realTimeProtectionEnabled = n.getBooleanValue(); },
        "rebootRequired": n => { windowsProtectionState.rebootRequired = n.getBooleanValue(); },
        "signatureUpdateOverdue": n => { windowsProtectionState.signatureUpdateOverdue = n.getBooleanValue(); },
        "signatureVersion": n => { windowsProtectionState.signatureVersion = n.getStringValue(); },
        "tamperProtectionEnabled": n => { windowsProtectionState.tamperProtectionEnabled = n.getBooleanValue(); },
    }
}
export function serializeWindowsProtectionState(writer: SerializationWriter, windowsProtectionState: WindowsProtectionState | undefined = {} as WindowsProtectionState) : void {
        serializeEntity(writer, windowsProtectionState)
        writer.writeStringValue("antiMalwareVersion", windowsProtectionState.antiMalwareVersion);
        writer.writeCollectionOfObjectValues<WindowsDeviceMalwareState>("detectedMalwareState", windowsProtectionState.detectedMalwareState, serializeWindowsDeviceMalwareState);
        writer.writeEnumValue<WindowsDeviceHealthState[]>("deviceState", windowsProtectionState.deviceState);
        writer.writeStringValue("engineVersion", windowsProtectionState.engineVersion);
        writer.writeBooleanValue("fullScanOverdue", windowsProtectionState.fullScanOverdue);
        writer.writeBooleanValue("fullScanRequired", windowsProtectionState.fullScanRequired);
        writer.writeBooleanValue("isVirtualMachine", windowsProtectionState.isVirtualMachine);
        writer.writeDateValue("lastFullScanDateTime", windowsProtectionState.lastFullScanDateTime);
        writer.writeStringValue("lastFullScanSignatureVersion", windowsProtectionState.lastFullScanSignatureVersion);
        writer.writeDateValue("lastQuickScanDateTime", windowsProtectionState.lastQuickScanDateTime);
        writer.writeStringValue("lastQuickScanSignatureVersion", windowsProtectionState.lastQuickScanSignatureVersion);
        writer.writeDateValue("lastReportedDateTime", windowsProtectionState.lastReportedDateTime);
        writer.writeBooleanValue("malwareProtectionEnabled", windowsProtectionState.malwareProtectionEnabled);
        writer.writeBooleanValue("networkInspectionSystemEnabled", windowsProtectionState.networkInspectionSystemEnabled);
        writer.writeEnumValue<WindowsDefenderProductStatus[]>("productStatus", windowsProtectionState.productStatus);
        writer.writeBooleanValue("quickScanOverdue", windowsProtectionState.quickScanOverdue);
        writer.writeBooleanValue("realTimeProtectionEnabled", windowsProtectionState.realTimeProtectionEnabled);
        writer.writeBooleanValue("rebootRequired", windowsProtectionState.rebootRequired);
        writer.writeBooleanValue("signatureUpdateOverdue", windowsProtectionState.signatureUpdateOverdue);
        writer.writeStringValue("signatureVersion", windowsProtectionState.signatureVersion);
        writer.writeBooleanValue("tamperProtectionEnabled", windowsProtectionState.tamperProtectionEnabled);
}
export interface WindowsProtectionState extends Entity, Parsable {
    /**
     * Current anti malware version
     */
    antiMalwareVersion?: string;
    /**
     * Device malware list
     */
    detectedMalwareState?: WindowsDeviceMalwareState[];
    /**
     * Indicates device's health state. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical.
     */
    deviceState?: WindowsDeviceHealthState[];
    /**
     * Current endpoint protection engine's version
     */
    engineVersion?: string;
    /**
     * When TRUE indicates full scan is overdue, when FALSE indicates full scan is not overdue. Defaults to setting on client device.
     */
    fullScanOverdue?: boolean;
    /**
     * When TRUE indicates full scan is required, when FALSE indicates full scan is not required. Defaults to setting on client device.
     */
    fullScanRequired?: boolean;
    /**
     * When TRUE indicates the device is a virtual machine, when FALSE indicates the device is not a virtual machine. Defaults to setting on client device.
     */
    isVirtualMachine?: boolean;
    /**
     * Last quick scan datetime
     */
    lastFullScanDateTime?: Date;
    /**
     * Last full scan signature version
     */
    lastFullScanSignatureVersion?: string;
    /**
     * Last quick scan datetime
     */
    lastQuickScanDateTime?: Date;
    /**
     * Last quick scan signature version
     */
    lastQuickScanSignatureVersion?: string;
    /**
     * Last device health status reported time
     */
    lastReportedDateTime?: Date;
    /**
     * When TRUE indicates anti malware is enabled when FALSE indicates anti malware is not enabled.
     */
    malwareProtectionEnabled?: boolean;
    /**
     * When TRUE indicates network inspection system enabled, when FALSE indicates network inspection system is not enabled. Defaults to setting on client device.
     */
    networkInspectionSystemEnabled?: boolean;
    /**
     * Product Status of Windows Defender Antivirus. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall.
     */
    productStatus?: WindowsDefenderProductStatus[];
    /**
     * When TRUE indicates quick scan is overdue, when FALSE indicates quick scan is not overdue. Defaults to setting on client device.
     */
    quickScanOverdue?: boolean;
    /**
     * When TRUE indicates real time protection is enabled, when FALSE indicates real time protection is not enabled. Defaults to setting on client device.
     */
    realTimeProtectionEnabled?: boolean;
    /**
     * When TRUE indicates reboot is required, when FALSE indicates when TRUE indicates reboot is not required. Defaults to setting on client device.
     */
    rebootRequired?: boolean;
    /**
     * When TRUE indicates signature is out of date, when FALSE indicates signature is not out of date. Defaults to setting on client device.
     */
    signatureUpdateOverdue?: boolean;
    /**
     * Current malware definitions version
     */
    signatureVersion?: string;
    /**
     * When TRUE indicates the Windows Defender tamper protection feature is enabled, when FALSE indicates the Windows Defender tamper protection feature is not enabled. Defaults to setting on client device.
     */
    tamperProtectionEnabled?: boolean;
}
// tslint:enable
// eslint-enable
