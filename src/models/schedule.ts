// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createOfferShiftRequestFromDiscriminatorValue, serializeOfferShiftRequest, type OfferShiftRequest } from './offerShiftRequest';
import { createOpenShiftFromDiscriminatorValue, serializeOpenShift, type OpenShift } from './openShift';
import { createOpenShiftChangeRequestFromDiscriminatorValue, serializeOpenShiftChangeRequest, type OpenShiftChangeRequest } from './openShiftChangeRequest';
import { OperationStatus } from './operationStatus';
import { createSchedulingGroupFromDiscriminatorValue, serializeSchedulingGroup, type SchedulingGroup } from './schedulingGroup';
import { createShiftFromDiscriminatorValue, serializeShift, type Shift } from './shift';
import { createSwapShiftsChangeRequestFromDiscriminatorValue, serializeSwapShiftsChangeRequest, type SwapShiftsChangeRequest } from './swapShiftsChangeRequest';
import { createTimeOffFromDiscriminatorValue, serializeTimeOff, type TimeOff } from './timeOff';
import { createTimeOffReasonFromDiscriminatorValue, serializeTimeOffReason, type TimeOffReason } from './timeOffReason';
import { createTimeOffRequestFromDiscriminatorValue, serializeTimeOffRequest, type TimeOffRequest } from './timeOffRequest';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createScheduleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSchedule;
}
export function deserializeIntoSchedule(schedule: Schedule | undefined = {} as Schedule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(schedule),
        "enabled": n => { schedule.enabled = n.getBooleanValue(); },
        "offerShiftRequests": n => { schedule.offerShiftRequests = n.getCollectionOfObjectValues<OfferShiftRequest>(createOfferShiftRequestFromDiscriminatorValue); },
        "offerShiftRequestsEnabled": n => { schedule.offerShiftRequestsEnabled = n.getBooleanValue(); },
        "openShiftChangeRequests": n => { schedule.openShiftChangeRequests = n.getCollectionOfObjectValues<OpenShiftChangeRequest>(createOpenShiftChangeRequestFromDiscriminatorValue); },
        "openShifts": n => { schedule.openShifts = n.getCollectionOfObjectValues<OpenShift>(createOpenShiftFromDiscriminatorValue); },
        "openShiftsEnabled": n => { schedule.openShiftsEnabled = n.getBooleanValue(); },
        "provisionStatus": n => { schedule.provisionStatus = n.getEnumValue<OperationStatus>(OperationStatus); },
        "provisionStatusCode": n => { schedule.provisionStatusCode = n.getStringValue(); },
        "schedulingGroups": n => { schedule.schedulingGroups = n.getCollectionOfObjectValues<SchedulingGroup>(createSchedulingGroupFromDiscriminatorValue); },
        "shifts": n => { schedule.shifts = n.getCollectionOfObjectValues<Shift>(createShiftFromDiscriminatorValue); },
        "swapShiftsChangeRequests": n => { schedule.swapShiftsChangeRequests = n.getCollectionOfObjectValues<SwapShiftsChangeRequest>(createSwapShiftsChangeRequestFromDiscriminatorValue); },
        "swapShiftsRequestsEnabled": n => { schedule.swapShiftsRequestsEnabled = n.getBooleanValue(); },
        "timeClockEnabled": n => { schedule.timeClockEnabled = n.getBooleanValue(); },
        "timeOffReasons": n => { schedule.timeOffReasons = n.getCollectionOfObjectValues<TimeOffReason>(createTimeOffReasonFromDiscriminatorValue); },
        "timeOffRequests": n => { schedule.timeOffRequests = n.getCollectionOfObjectValues<TimeOffRequest>(createTimeOffRequestFromDiscriminatorValue); },
        "timeOffRequestsEnabled": n => { schedule.timeOffRequestsEnabled = n.getBooleanValue(); },
        "timesOff": n => { schedule.timesOff = n.getCollectionOfObjectValues<TimeOff>(createTimeOffFromDiscriminatorValue); },
        "timeZone": n => { schedule.timeZone = n.getStringValue(); },
        "workforceIntegrationIds": n => { schedule.workforceIntegrationIds = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface Schedule extends Entity, Parsable {
    /**
     * Indicates whether the schedule is enabled for the team. Required.
     */
    enabled?: boolean;
    /**
     * The offer requests for shifts in the schedule.
     */
    offerShiftRequests?: OfferShiftRequest[];
    /**
     * Indicates whether offer shift requests are enabled for the schedule.
     */
    offerShiftRequestsEnabled?: boolean;
    /**
     * The open shift requests in the schedule.
     */
    openShiftChangeRequests?: OpenShiftChangeRequest[];
    /**
     * The set of open shifts in a scheduling group in the schedule.
     */
    openShifts?: OpenShift[];
    /**
     * Indicates whether open shifts are enabled for the schedule.
     */
    openShiftsEnabled?: boolean;
    /**
     * The status of the schedule provisioning. The possible values are notStarted, running, completed, failed.
     */
    provisionStatus?: OperationStatus;
    /**
     * Additional information about why schedule provisioning failed.
     */
    provisionStatusCode?: string;
    /**
     * The logical grouping of users in the schedule (usually by role).
     */
    schedulingGroups?: SchedulingGroup[];
    /**
     * The shifts in the schedule.
     */
    shifts?: Shift[];
    /**
     * The swap requests for shifts in the schedule.
     */
    swapShiftsChangeRequests?: SwapShiftsChangeRequest[];
    /**
     * Indicates whether swap shifts requests are enabled for the schedule.
     */
    swapShiftsRequestsEnabled?: boolean;
    /**
     * Indicates whether time clock is enabled for the schedule.
     */
    timeClockEnabled?: boolean;
    /**
     * The set of reasons for a time off in the schedule.
     */
    timeOffReasons?: TimeOffReason[];
    /**
     * The time off requests in the schedule.
     */
    timeOffRequests?: TimeOffRequest[];
    /**
     * Indicates whether time off requests are enabled for the schedule.
     */
    timeOffRequestsEnabled?: boolean;
    /**
     * The instances of times off in the schedule.
     */
    timesOff?: TimeOff[];
    /**
     * Indicates the time zone of the schedule team using tz database format. Required.
     */
    timeZone?: string;
    /**
     * The workforceIntegrationIds property
     */
    workforceIntegrationIds?: string[];
}
export function serializeSchedule(writer: SerializationWriter, schedule: Schedule | undefined = {} as Schedule) : void {
        serializeEntity(writer, schedule)
        writer.writeBooleanValue("enabled", schedule.enabled);
        writer.writeCollectionOfObjectValues<OfferShiftRequest>("offerShiftRequests", schedule.offerShiftRequests, );
        writer.writeBooleanValue("offerShiftRequestsEnabled", schedule.offerShiftRequestsEnabled);
        writer.writeCollectionOfObjectValues<OpenShiftChangeRequest>("openShiftChangeRequests", schedule.openShiftChangeRequests, );
        writer.writeCollectionOfObjectValues<OpenShift>("openShifts", schedule.openShifts, );
        writer.writeBooleanValue("openShiftsEnabled", schedule.openShiftsEnabled);
        writer.writeCollectionOfObjectValues<SchedulingGroup>("schedulingGroups", schedule.schedulingGroups, );
        writer.writeCollectionOfObjectValues<Shift>("shifts", schedule.shifts, );
        writer.writeCollectionOfObjectValues<SwapShiftsChangeRequest>("swapShiftsChangeRequests", schedule.swapShiftsChangeRequests, );
        writer.writeBooleanValue("swapShiftsRequestsEnabled", schedule.swapShiftsRequestsEnabled);
        writer.writeBooleanValue("timeClockEnabled", schedule.timeClockEnabled);
        writer.writeCollectionOfObjectValues<TimeOffReason>("timeOffReasons", schedule.timeOffReasons, );
        writer.writeCollectionOfObjectValues<TimeOffRequest>("timeOffRequests", schedule.timeOffRequests, );
        writer.writeBooleanValue("timeOffRequestsEnabled", schedule.timeOffRequestsEnabled);
        writer.writeCollectionOfObjectValues<TimeOff>("timesOff", schedule.timesOff, );
        writer.writeStringValue("timeZone", schedule.timeZone);
        writer.writeCollectionOfPrimitiveValues<string>("workforceIntegrationIds", schedule.workforceIntegrationIds);
}
// tslint:enable
// eslint-enable
