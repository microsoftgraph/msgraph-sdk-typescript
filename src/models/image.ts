// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createImageFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoImage;
}
export function deserializeIntoImage(image: Image | undefined = {} as Image) : Record<string, (node: ParseNode) => void> {
    return {
        "height": n => { image.height = n.getNumberValue(); },
        "@odata.type": n => { image.odataType = n.getStringValue(); },
        "width": n => { image.width = n.getNumberValue(); },
    }
}
export interface Image extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Optional. Height of the image, in pixels. Read-only.
     */
    height?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Optional. Width of the image, in pixels. Read-only.
     */
    width?: number;
}
export function serializeImage(writer: SerializationWriter, image: Image | undefined = {} as Image) : void {
    writer.writeNumberValue("height", image.height);
    writer.writeStringValue("@odata.type", image.odataType);
    writer.writeNumberValue("width", image.width);
    writer.writeAdditionalData(image.additionalData);
}
// tslint:enable
// eslint-enable
