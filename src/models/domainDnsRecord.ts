// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDomainDnsCnameRecord } from './domainDnsCnameRecord';
import { deserializeIntoDomainDnsMxRecord } from './domainDnsMxRecord';
import { deserializeIntoDomainDnsSrvRecord } from './domainDnsSrvRecord';
import { deserializeIntoDomainDnsTxtRecord } from './domainDnsTxtRecord';
import { deserializeIntoDomainDnsUnavailableRecord } from './domainDnsUnavailableRecord';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type DomainDnsCnameRecord, type DomainDnsMxRecord, type DomainDnsSrvRecord, type DomainDnsTxtRecord, type DomainDnsUnavailableRecord } from './index';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDomainDnsRecordFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.domainDnsCnameRecord":
                    return deserializeIntoDomainDnsCnameRecord;
                case "#microsoft.graph.domainDnsMxRecord":
                    return deserializeIntoDomainDnsMxRecord;
                case "#microsoft.graph.domainDnsSrvRecord":
                    return deserializeIntoDomainDnsSrvRecord;
                case "#microsoft.graph.domainDnsTxtRecord":
                    return deserializeIntoDomainDnsTxtRecord;
                case "#microsoft.graph.domainDnsUnavailableRecord":
                    return deserializeIntoDomainDnsUnavailableRecord;
            }
        }
    }
    return deserializeIntoDomainDnsRecord;
}
export function deserializeIntoDomainDnsRecord(domainDnsRecord: DomainDnsRecord | undefined = {} as DomainDnsRecord) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(domainDnsRecord),
        "isOptional": n => { domainDnsRecord.isOptional = n.getBooleanValue(); },
        "label": n => { domainDnsRecord.label = n.getStringValue(); },
        "recordType": n => { domainDnsRecord.recordType = n.getStringValue(); },
        "supportedService": n => { domainDnsRecord.supportedService = n.getStringValue(); },
        "ttl": n => { domainDnsRecord.ttl = n.getNumberValue(); },
    }
}
export interface DomainDnsRecord extends Entity, Parsable {
    /**
     * If false, this record must be configured by the customer at the DNS host for Microsoft Online Services to operate correctly with the domain.
     */
    isOptional?: boolean;
    /**
     * Value used when configuring the name of the DNS record at the DNS host.
     */
    label?: string;
    /**
     * Indicates what type of DNS record this entity represents. The value can be CName, Mx, Srv, or Txt.
     */
    recordType?: string;
    /**
     * Microsoft Online Service or feature that has a dependency on this DNS record. Can be one of the following values: null, Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune.
     */
    supportedService?: string;
    /**
     * Value to use when configuring the time-to-live (ttl) property of the DNS record at the DNS host. Not nullable.
     */
    ttl?: number;
}
export function serializeDomainDnsRecord(writer: SerializationWriter, domainDnsRecord: DomainDnsRecord | undefined = {} as DomainDnsRecord) : void {
    serializeEntity(writer, domainDnsRecord)
    writer.writeBooleanValue("isOptional", domainDnsRecord.isOptional);
    writer.writeStringValue("label", domainDnsRecord.label);
    writer.writeStringValue("recordType", domainDnsRecord.recordType);
    writer.writeStringValue("supportedService", domainDnsRecord.supportedService);
    writer.writeNumberValue("ttl", domainDnsRecord.ttl);
}
// tslint:enable
// eslint-enable
