// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDeviceConfiguration, serializeDeviceConfiguration, type DeviceConfiguration } from './deviceConfiguration';
import { InternetSiteSecurityLevel } from './internetSiteSecurityLevel';
import { RequiredPasswordType } from './requiredPasswordType';
import { SiteSecurityLevel } from './siteSecurityLevel';
import { WindowsUserAccountControlSettings } from './windowsUserAccountControlSettings';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindows81GeneralConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindows81GeneralConfiguration;
}
export function deserializeIntoWindows81GeneralConfiguration(windows81GeneralConfiguration: Windows81GeneralConfiguration | undefined = {} as Windows81GeneralConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceConfiguration(windows81GeneralConfiguration),
        "accountsBlockAddingNonMicrosoftAccountEmail": n => { windows81GeneralConfiguration.accountsBlockAddingNonMicrosoftAccountEmail = n.getBooleanValue(); },
        "applyOnlyToWindows81": n => { windows81GeneralConfiguration.applyOnlyToWindows81 = n.getBooleanValue(); },
        "browserBlockAutofill": n => { windows81GeneralConfiguration.browserBlockAutofill = n.getBooleanValue(); },
        "browserBlockAutomaticDetectionOfIntranetSites": n => { windows81GeneralConfiguration.browserBlockAutomaticDetectionOfIntranetSites = n.getBooleanValue(); },
        "browserBlockEnterpriseModeAccess": n => { windows81GeneralConfiguration.browserBlockEnterpriseModeAccess = n.getBooleanValue(); },
        "browserBlockJavaScript": n => { windows81GeneralConfiguration.browserBlockJavaScript = n.getBooleanValue(); },
        "browserBlockPlugins": n => { windows81GeneralConfiguration.browserBlockPlugins = n.getBooleanValue(); },
        "browserBlockPopups": n => { windows81GeneralConfiguration.browserBlockPopups = n.getBooleanValue(); },
        "browserBlockSendingDoNotTrackHeader": n => { windows81GeneralConfiguration.browserBlockSendingDoNotTrackHeader = n.getBooleanValue(); },
        "browserBlockSingleWordEntryOnIntranetSites": n => { windows81GeneralConfiguration.browserBlockSingleWordEntryOnIntranetSites = n.getBooleanValue(); },
        "browserEnterpriseModeSiteListLocation": n => { windows81GeneralConfiguration.browserEnterpriseModeSiteListLocation = n.getStringValue(); },
        "browserInternetSecurityLevel": n => { windows81GeneralConfiguration.browserInternetSecurityLevel = n.getEnumValue<InternetSiteSecurityLevel>(InternetSiteSecurityLevel); },
        "browserIntranetSecurityLevel": n => { windows81GeneralConfiguration.browserIntranetSecurityLevel = n.getEnumValue<SiteSecurityLevel>(SiteSecurityLevel); },
        "browserLoggingReportLocation": n => { windows81GeneralConfiguration.browserLoggingReportLocation = n.getStringValue(); },
        "browserRequireFirewall": n => { windows81GeneralConfiguration.browserRequireFirewall = n.getBooleanValue(); },
        "browserRequireFraudWarning": n => { windows81GeneralConfiguration.browserRequireFraudWarning = n.getBooleanValue(); },
        "browserRequireHighSecurityForRestrictedSites": n => { windows81GeneralConfiguration.browserRequireHighSecurityForRestrictedSites = n.getBooleanValue(); },
        "browserRequireSmartScreen": n => { windows81GeneralConfiguration.browserRequireSmartScreen = n.getBooleanValue(); },
        "browserTrustedSitesSecurityLevel": n => { windows81GeneralConfiguration.browserTrustedSitesSecurityLevel = n.getEnumValue<SiteSecurityLevel>(SiteSecurityLevel); },
        "cellularBlockDataRoaming": n => { windows81GeneralConfiguration.cellularBlockDataRoaming = n.getBooleanValue(); },
        "diagnosticsBlockDataSubmission": n => { windows81GeneralConfiguration.diagnosticsBlockDataSubmission = n.getBooleanValue(); },
        "passwordBlockPicturePasswordAndPin": n => { windows81GeneralConfiguration.passwordBlockPicturePasswordAndPin = n.getBooleanValue(); },
        "passwordExpirationDays": n => { windows81GeneralConfiguration.passwordExpirationDays = n.getNumberValue(); },
        "passwordMinimumCharacterSetCount": n => { windows81GeneralConfiguration.passwordMinimumCharacterSetCount = n.getNumberValue(); },
        "passwordMinimumLength": n => { windows81GeneralConfiguration.passwordMinimumLength = n.getNumberValue(); },
        "passwordMinutesOfInactivityBeforeScreenTimeout": n => { windows81GeneralConfiguration.passwordMinutesOfInactivityBeforeScreenTimeout = n.getNumberValue(); },
        "passwordPreviousPasswordBlockCount": n => { windows81GeneralConfiguration.passwordPreviousPasswordBlockCount = n.getNumberValue(); },
        "passwordRequiredType": n => { windows81GeneralConfiguration.passwordRequiredType = n.getEnumValue<RequiredPasswordType>(RequiredPasswordType); },
        "passwordSignInFailureCountBeforeFactoryReset": n => { windows81GeneralConfiguration.passwordSignInFailureCountBeforeFactoryReset = n.getNumberValue(); },
        "storageRequireDeviceEncryption": n => { windows81GeneralConfiguration.storageRequireDeviceEncryption = n.getBooleanValue(); },
        "updatesRequireAutomaticUpdates": n => { windows81GeneralConfiguration.updatesRequireAutomaticUpdates = n.getBooleanValue(); },
        "userAccountControlSettings": n => { windows81GeneralConfiguration.userAccountControlSettings = n.getEnumValue<WindowsUserAccountControlSettings>(WindowsUserAccountControlSettings); },
        "workFoldersUrl": n => { windows81GeneralConfiguration.workFoldersUrl = n.getStringValue(); },
    }
}
export function serializeWindows81GeneralConfiguration(writer: SerializationWriter, windows81GeneralConfiguration: Windows81GeneralConfiguration | undefined = {} as Windows81GeneralConfiguration) : void {
        serializeDeviceConfiguration(writer, windows81GeneralConfiguration)
        writer.writeBooleanValue("accountsBlockAddingNonMicrosoftAccountEmail", windows81GeneralConfiguration.accountsBlockAddingNonMicrosoftAccountEmail);
        writer.writeBooleanValue("browserBlockAutofill", windows81GeneralConfiguration.browserBlockAutofill);
        writer.writeBooleanValue("browserBlockAutomaticDetectionOfIntranetSites", windows81GeneralConfiguration.browserBlockAutomaticDetectionOfIntranetSites);
        writer.writeBooleanValue("browserBlockEnterpriseModeAccess", windows81GeneralConfiguration.browserBlockEnterpriseModeAccess);
        writer.writeBooleanValue("browserBlockJavaScript", windows81GeneralConfiguration.browserBlockJavaScript);
        writer.writeBooleanValue("browserBlockPlugins", windows81GeneralConfiguration.browserBlockPlugins);
        writer.writeBooleanValue("browserBlockPopups", windows81GeneralConfiguration.browserBlockPopups);
        writer.writeBooleanValue("browserBlockSendingDoNotTrackHeader", windows81GeneralConfiguration.browserBlockSendingDoNotTrackHeader);
        writer.writeBooleanValue("browserBlockSingleWordEntryOnIntranetSites", windows81GeneralConfiguration.browserBlockSingleWordEntryOnIntranetSites);
        writer.writeStringValue("browserEnterpriseModeSiteListLocation", windows81GeneralConfiguration.browserEnterpriseModeSiteListLocation);
        writer.writeEnumValue<InternetSiteSecurityLevel>("browserInternetSecurityLevel", windows81GeneralConfiguration.browserInternetSecurityLevel);
        writer.writeEnumValue<SiteSecurityLevel>("browserIntranetSecurityLevel", windows81GeneralConfiguration.browserIntranetSecurityLevel);
        writer.writeStringValue("browserLoggingReportLocation", windows81GeneralConfiguration.browserLoggingReportLocation);
        writer.writeBooleanValue("browserRequireFirewall", windows81GeneralConfiguration.browserRequireFirewall);
        writer.writeBooleanValue("browserRequireFraudWarning", windows81GeneralConfiguration.browserRequireFraudWarning);
        writer.writeBooleanValue("browserRequireHighSecurityForRestrictedSites", windows81GeneralConfiguration.browserRequireHighSecurityForRestrictedSites);
        writer.writeBooleanValue("browserRequireSmartScreen", windows81GeneralConfiguration.browserRequireSmartScreen);
        writer.writeEnumValue<SiteSecurityLevel>("browserTrustedSitesSecurityLevel", windows81GeneralConfiguration.browserTrustedSitesSecurityLevel);
        writer.writeBooleanValue("cellularBlockDataRoaming", windows81GeneralConfiguration.cellularBlockDataRoaming);
        writer.writeBooleanValue("diagnosticsBlockDataSubmission", windows81GeneralConfiguration.diagnosticsBlockDataSubmission);
        writer.writeBooleanValue("passwordBlockPicturePasswordAndPin", windows81GeneralConfiguration.passwordBlockPicturePasswordAndPin);
        writer.writeNumberValue("passwordExpirationDays", windows81GeneralConfiguration.passwordExpirationDays);
        writer.writeNumberValue("passwordMinimumCharacterSetCount", windows81GeneralConfiguration.passwordMinimumCharacterSetCount);
        writer.writeNumberValue("passwordMinimumLength", windows81GeneralConfiguration.passwordMinimumLength);
        writer.writeNumberValue("passwordMinutesOfInactivityBeforeScreenTimeout", windows81GeneralConfiguration.passwordMinutesOfInactivityBeforeScreenTimeout);
        writer.writeNumberValue("passwordPreviousPasswordBlockCount", windows81GeneralConfiguration.passwordPreviousPasswordBlockCount);
        writer.writeEnumValue<RequiredPasswordType>("passwordRequiredType", windows81GeneralConfiguration.passwordRequiredType);
        writer.writeNumberValue("passwordSignInFailureCountBeforeFactoryReset", windows81GeneralConfiguration.passwordSignInFailureCountBeforeFactoryReset);
        writer.writeBooleanValue("storageRequireDeviceEncryption", windows81GeneralConfiguration.storageRequireDeviceEncryption);
        writer.writeBooleanValue("updatesRequireAutomaticUpdates", windows81GeneralConfiguration.updatesRequireAutomaticUpdates);
        writer.writeEnumValue<WindowsUserAccountControlSettings>("userAccountControlSettings", windows81GeneralConfiguration.userAccountControlSettings);
        writer.writeStringValue("workFoldersUrl", windows81GeneralConfiguration.workFoldersUrl);
}
export interface Windows81GeneralConfiguration extends DeviceConfiguration, Parsable {
    /**
     * Indicates whether or not to Block the user from adding email accounts to the device that are not associated with a Microsoft account.
     */
    accountsBlockAddingNonMicrosoftAccountEmail?: boolean;
    /**
     * Value indicating whether this policy only applies to Windows 8.1. This property is read-only.
     */
    applyOnlyToWindows81?: boolean;
    /**
     * Indicates whether or not to block auto fill.
     */
    browserBlockAutofill?: boolean;
    /**
     * Indicates whether or not to block automatic detection of Intranet sites.
     */
    browserBlockAutomaticDetectionOfIntranetSites?: boolean;
    /**
     * Indicates whether or not to block enterprise mode access.
     */
    browserBlockEnterpriseModeAccess?: boolean;
    /**
     * Indicates whether or not to Block the user from using JavaScript.
     */
    browserBlockJavaScript?: boolean;
    /**
     * Indicates whether or not to block plug-ins.
     */
    browserBlockPlugins?: boolean;
    /**
     * Indicates whether or not to block popups.
     */
    browserBlockPopups?: boolean;
    /**
     * Indicates whether or not to Block the user from sending the do not track header.
     */
    browserBlockSendingDoNotTrackHeader?: boolean;
    /**
     * Indicates whether or not to block a single word entry on Intranet sites.
     */
    browserBlockSingleWordEntryOnIntranetSites?: boolean;
    /**
     * The enterprise mode site list location. Could be a local file, local network or http location.
     */
    browserEnterpriseModeSiteListLocation?: string;
    /**
     * Possible values for internet site security level.
     */
    browserInternetSecurityLevel?: InternetSiteSecurityLevel;
    /**
     * Possible values for site security level.
     */
    browserIntranetSecurityLevel?: SiteSecurityLevel;
    /**
     * The logging report location.
     */
    browserLoggingReportLocation?: string;
    /**
     * Indicates whether or not to require a firewall.
     */
    browserRequireFirewall?: boolean;
    /**
     * Indicates whether or not to require fraud warning.
     */
    browserRequireFraudWarning?: boolean;
    /**
     * Indicates whether or not to require high security for restricted sites.
     */
    browserRequireHighSecurityForRestrictedSites?: boolean;
    /**
     * Indicates whether or not to require the user to use the smart screen filter.
     */
    browserRequireSmartScreen?: boolean;
    /**
     * Possible values for site security level.
     */
    browserTrustedSitesSecurityLevel?: SiteSecurityLevel;
    /**
     * Indicates whether or not to block data roaming.
     */
    cellularBlockDataRoaming?: boolean;
    /**
     * Indicates whether or not to block diagnostic data submission.
     */
    diagnosticsBlockDataSubmission?: boolean;
    /**
     * Indicates whether or not to Block the user from using a pictures password and pin.
     */
    passwordBlockPicturePasswordAndPin?: boolean;
    /**
     * Password expiration in days.
     */
    passwordExpirationDays?: number;
    /**
     * The number of character sets required in the password.
     */
    passwordMinimumCharacterSetCount?: number;
    /**
     * The minimum password length.
     */
    passwordMinimumLength?: number;
    /**
     * The minutes of inactivity before the screen times out.
     */
    passwordMinutesOfInactivityBeforeScreenTimeout?: number;
    /**
     * The number of previous passwords to prevent re-use of. Valid values 0 to 24
     */
    passwordPreviousPasswordBlockCount?: number;
    /**
     * Possible values of required passwords.
     */
    passwordRequiredType?: RequiredPasswordType;
    /**
     * The number of sign in failures before factory reset.
     */
    passwordSignInFailureCountBeforeFactoryReset?: number;
    /**
     * Indicates whether or not to require encryption on a mobile device.
     */
    storageRequireDeviceEncryption?: boolean;
    /**
     * Indicates whether or not to require automatic updates.
     */
    updatesRequireAutomaticUpdates?: boolean;
    /**
     * Possible values for Windows user account control settings.
     */
    userAccountControlSettings?: WindowsUserAccountControlSettings;
    /**
     * The work folders url.
     */
    workFoldersUrl?: string;
}
// tslint:enable
// eslint-enable
