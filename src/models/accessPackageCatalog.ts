// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAccessPackageFromDiscriminatorValue, serializeAccessPackage, type AccessPackage } from './accessPackage';
import { AccessPackageCatalogState } from './accessPackageCatalogState';
import { AccessPackageCatalogType } from './accessPackageCatalogType';
import { createAccessPackageResourceFromDiscriminatorValue, serializeAccessPackageResource, type AccessPackageResource } from './accessPackageResource';
import { createAccessPackageResourceRoleFromDiscriminatorValue, serializeAccessPackageResourceRole, type AccessPackageResourceRole } from './accessPackageResourceRole';
import { createAccessPackageResourceScopeFromDiscriminatorValue, serializeAccessPackageResourceScope, type AccessPackageResourceScope } from './accessPackageResourceScope';
import { createCustomCalloutExtensionFromDiscriminatorValue, serializeCustomCalloutExtension, type CustomCalloutExtension } from './customCalloutExtension';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageCatalog extends Entity, Parsable {
    /**
     * The access packages in this catalog. Read-only. Nullable.
     */
    accessPackages?: AccessPackage[];
    /**
     * Whether the catalog is created by a user or entitlement management. The possible values are: userManaged, serviceDefault, serviceManaged, unknownFutureValue.
     */
    catalogType?: AccessPackageCatalogType;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    createdDateTime?: Date;
    /**
     * The customWorkflowExtensions property
     */
    customWorkflowExtensions?: CustomCalloutExtension[];
    /**
     * The description of the access package catalog.
     */
    description?: string;
    /**
     * The display name of the access package catalog.
     */
    displayName?: string;
    /**
     * Whether the access packages in this catalog can be requested by users outside of the tenant.
     */
    isExternallyVisible?: boolean;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    modifiedDateTime?: Date;
    /**
     * The resourceRoles property
     */
    resourceRoles?: AccessPackageResourceRole[];
    /**
     * Access package resources in this catalog.
     */
    resources?: AccessPackageResource[];
    /**
     * The resourceScopes property
     */
    resourceScopes?: AccessPackageResourceScope[];
    /**
     * Has the value published if the access packages are available for management. The possible values are: unpublished, published, unknownFutureValue.
     */
    state?: AccessPackageCatalogState;
}
export function createAccessPackageCatalogFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessPackageCatalog;
}
export function deserializeIntoAccessPackageCatalog(accessPackageCatalog: AccessPackageCatalog | undefined = {} as AccessPackageCatalog) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(accessPackageCatalog),
        "accessPackages": n => { accessPackageCatalog.accessPackages = n.getCollectionOfObjectValues<AccessPackage>(createAccessPackageFromDiscriminatorValue); },
        "catalogType": n => { accessPackageCatalog.catalogType = n.getEnumValue<AccessPackageCatalogType>(AccessPackageCatalogType); },
        "createdDateTime": n => { accessPackageCatalog.createdDateTime = n.getDateValue(); },
        "customWorkflowExtensions": n => { accessPackageCatalog.customWorkflowExtensions = n.getCollectionOfObjectValues<CustomCalloutExtension>(createCustomCalloutExtensionFromDiscriminatorValue); },
        "description": n => { accessPackageCatalog.description = n.getStringValue(); },
        "displayName": n => { accessPackageCatalog.displayName = n.getStringValue(); },
        "isExternallyVisible": n => { accessPackageCatalog.isExternallyVisible = n.getBooleanValue(); },
        "modifiedDateTime": n => { accessPackageCatalog.modifiedDateTime = n.getDateValue(); },
        "resourceRoles": n => { accessPackageCatalog.resourceRoles = n.getCollectionOfObjectValues<AccessPackageResourceRole>(createAccessPackageResourceRoleFromDiscriminatorValue); },
        "resources": n => { accessPackageCatalog.resources = n.getCollectionOfObjectValues<AccessPackageResource>(createAccessPackageResourceFromDiscriminatorValue); },
        "resourceScopes": n => { accessPackageCatalog.resourceScopes = n.getCollectionOfObjectValues<AccessPackageResourceScope>(createAccessPackageResourceScopeFromDiscriminatorValue); },
        "state": n => { accessPackageCatalog.state = n.getEnumValue<AccessPackageCatalogState>(AccessPackageCatalogState); },
    }
}
export function serializeAccessPackageCatalog(writer: SerializationWriter, accessPackageCatalog: AccessPackageCatalog | undefined = {} as AccessPackageCatalog) : void {
        serializeEntity(writer, accessPackageCatalog)
        writer.writeCollectionOfObjectValues<AccessPackage>("accessPackages", accessPackageCatalog.accessPackages, );
        writer.writeEnumValue<AccessPackageCatalogType>("catalogType", accessPackageCatalog.catalogType);
        writer.writeDateValue("createdDateTime", accessPackageCatalog.createdDateTime);
        writer.writeCollectionOfObjectValues<CustomCalloutExtension>("customWorkflowExtensions", accessPackageCatalog.customWorkflowExtensions, );
        writer.writeStringValue("description", accessPackageCatalog.description);
        writer.writeStringValue("displayName", accessPackageCatalog.displayName);
        writer.writeBooleanValue("isExternallyVisible", accessPackageCatalog.isExternallyVisible);
        writer.writeDateValue("modifiedDateTime", accessPackageCatalog.modifiedDateTime);
        writer.writeCollectionOfObjectValues<AccessPackageResourceRole>("resourceRoles", accessPackageCatalog.resourceRoles, );
        writer.writeCollectionOfObjectValues<AccessPackageResource>("resources", accessPackageCatalog.resources, );
        writer.writeCollectionOfObjectValues<AccessPackageResourceScope>("resourceScopes", accessPackageCatalog.resourceScopes, );
        writer.writeEnumValue<AccessPackageCatalogState>("state", accessPackageCatalog.state);
}
// tslint:enable
// eslint-enable
