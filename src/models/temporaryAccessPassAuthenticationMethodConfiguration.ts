// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAuthenticationMethodConfiguration, serializeAuthenticationMethodConfiguration, type AuthenticationMethodConfiguration } from './authenticationMethodConfiguration';
import { createAuthenticationMethodTargetFromDiscriminatorValue, serializeAuthenticationMethodTarget, type AuthenticationMethodTarget } from './authenticationMethodTarget';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTemporaryAccessPassAuthenticationMethodConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTemporaryAccessPassAuthenticationMethodConfiguration;
}
export function deserializeIntoTemporaryAccessPassAuthenticationMethodConfiguration(temporaryAccessPassAuthenticationMethodConfiguration: TemporaryAccessPassAuthenticationMethodConfiguration | undefined = {} as TemporaryAccessPassAuthenticationMethodConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuthenticationMethodConfiguration(temporaryAccessPassAuthenticationMethodConfiguration),
        "defaultLength": n => { temporaryAccessPassAuthenticationMethodConfiguration.defaultLength = n.getNumberValue(); },
        "defaultLifetimeInMinutes": n => { temporaryAccessPassAuthenticationMethodConfiguration.defaultLifetimeInMinutes = n.getNumberValue(); },
        "includeTargets": n => { temporaryAccessPassAuthenticationMethodConfiguration.includeTargets = n.getCollectionOfObjectValues<AuthenticationMethodTarget>(createAuthenticationMethodTargetFromDiscriminatorValue); },
        "isUsableOnce": n => { temporaryAccessPassAuthenticationMethodConfiguration.isUsableOnce = n.getBooleanValue(); },
        "maximumLifetimeInMinutes": n => { temporaryAccessPassAuthenticationMethodConfiguration.maximumLifetimeInMinutes = n.getNumberValue(); },
        "minimumLifetimeInMinutes": n => { temporaryAccessPassAuthenticationMethodConfiguration.minimumLifetimeInMinutes = n.getNumberValue(); },
    }
}
export function serializeTemporaryAccessPassAuthenticationMethodConfiguration(writer: SerializationWriter, temporaryAccessPassAuthenticationMethodConfiguration: TemporaryAccessPassAuthenticationMethodConfiguration | undefined = {} as TemporaryAccessPassAuthenticationMethodConfiguration) : void {
        serializeAuthenticationMethodConfiguration(writer, temporaryAccessPassAuthenticationMethodConfiguration)
        writer.writeNumberValue("defaultLength", temporaryAccessPassAuthenticationMethodConfiguration.defaultLength);
        writer.writeNumberValue("defaultLifetimeInMinutes", temporaryAccessPassAuthenticationMethodConfiguration.defaultLifetimeInMinutes);
        writer.writeCollectionOfObjectValues<AuthenticationMethodTarget>("includeTargets", temporaryAccessPassAuthenticationMethodConfiguration.includeTargets, );
        writer.writeBooleanValue("isUsableOnce", temporaryAccessPassAuthenticationMethodConfiguration.isUsableOnce);
        writer.writeNumberValue("maximumLifetimeInMinutes", temporaryAccessPassAuthenticationMethodConfiguration.maximumLifetimeInMinutes);
        writer.writeNumberValue("minimumLifetimeInMinutes", temporaryAccessPassAuthenticationMethodConfiguration.minimumLifetimeInMinutes);
}
export interface TemporaryAccessPassAuthenticationMethodConfiguration extends AuthenticationMethodConfiguration, Parsable {
    /**
     * Default length in characters of a Temporary Access Pass object. Must be between 8 and 48 characters.
     */
    defaultLength?: number;
    /**
     * Default lifetime in minutes for a Temporary Access Pass. Value can be any integer between the minimumLifetimeInMinutes and maximumLifetimeInMinutes.
     */
    defaultLifetimeInMinutes?: number;
    /**
     * A collection of groups that are enabled to use the authentication method.
     */
    includeTargets?: AuthenticationMethodTarget[];
    /**
     * If true, all the passes in the tenant will be restricted to one-time use. If false, passes in the tenant can be created to be either one-time use or reusable.
     */
    isUsableOnce?: boolean;
    /**
     * Maximum lifetime in minutes for any Temporary Access Pass created in the tenant. Value can be between 10 and 43200 minutes (equivalent to 30 days).
     */
    maximumLifetimeInMinutes?: number;
    /**
     * Minimum lifetime in minutes for any Temporary Access Pass created in the tenant. Value can be between 10 and 43200 minutes (equivalent to 30 days).
     */
    minimumLifetimeInMinutes?: number;
}
// tslint:enable
// eslint-enable
