// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAuthenticationMethodConfiguration, serializeAuthenticationMethodConfiguration, type AuthenticationMethodConfiguration } from './authenticationMethodConfiguration';
import { createAuthenticationMethodTargetFromDiscriminatorValue, serializeAuthenticationMethodTarget, type AuthenticationMethodTarget } from './authenticationMethodTarget';
import { createFido2KeyRestrictionsFromDiscriminatorValue, serializeFido2KeyRestrictions, type Fido2KeyRestrictions } from './fido2KeyRestrictions';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFido2AuthenticationMethodConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFido2AuthenticationMethodConfiguration;
}
export function deserializeIntoFido2AuthenticationMethodConfiguration(fido2AuthenticationMethodConfiguration: Fido2AuthenticationMethodConfiguration | undefined = {} as Fido2AuthenticationMethodConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuthenticationMethodConfiguration(fido2AuthenticationMethodConfiguration),
        "includeTargets": n => { fido2AuthenticationMethodConfiguration.includeTargets = n.getCollectionOfObjectValues<AuthenticationMethodTarget>(createAuthenticationMethodTargetFromDiscriminatorValue); },
        "isAttestationEnforced": n => { fido2AuthenticationMethodConfiguration.isAttestationEnforced = n.getBooleanValue(); },
        "isSelfServiceRegistrationAllowed": n => { fido2AuthenticationMethodConfiguration.isSelfServiceRegistrationAllowed = n.getBooleanValue(); },
        "keyRestrictions": n => { fido2AuthenticationMethodConfiguration.keyRestrictions = n.getObjectValue<Fido2KeyRestrictions>(createFido2KeyRestrictionsFromDiscriminatorValue); },
    }
}
export interface Fido2AuthenticationMethodConfiguration extends AuthenticationMethodConfiguration, Parsable {
    /**
     * A collection of groups that are enabled to use the authentication method.
     */
    includeTargets?: AuthenticationMethodTarget[];
    /**
     * Determines whether attestation must be enforced for FIDO2 security key registration.
     */
    isAttestationEnforced?: boolean;
    /**
     * Determines if users can register new FIDO2 security keys.
     */
    isSelfServiceRegistrationAllowed?: boolean;
    /**
     * Controls whether key restrictions are enforced on FIDO2 security keys, either allowing or disallowing certain key types as defined by Authenticator Attestation GUID (AAGUID), an identifier that indicates the type (e.g. make and model) of the authenticator.
     */
    keyRestrictions?: Fido2KeyRestrictions;
}
export function serializeFido2AuthenticationMethodConfiguration(writer: SerializationWriter, fido2AuthenticationMethodConfiguration: Fido2AuthenticationMethodConfiguration | undefined = {} as Fido2AuthenticationMethodConfiguration) : void {
        serializeAuthenticationMethodConfiguration(writer, fido2AuthenticationMethodConfiguration)
        writer.writeCollectionOfObjectValues<AuthenticationMethodTarget>("includeTargets", fido2AuthenticationMethodConfiguration.includeTargets, serializeAuthenticationMethodTarget);
        writer.writeBooleanValue("isAttestationEnforced", fido2AuthenticationMethodConfiguration.isAttestationEnforced);
        writer.writeBooleanValue("isSelfServiceRegistrationAllowed", fido2AuthenticationMethodConfiguration.isSelfServiceRegistrationAllowed);
        writer.writeObjectValue<Fido2KeyRestrictions>("keyRestrictions", fido2AuthenticationMethodConfiguration.keyRestrictions, serializeFido2KeyRestrictions);
}
// tslint:enable
// eslint-enable
