// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createFreeBusyErrorFromDiscriminatorValue, serializeFreeBusyError, type FreeBusyError } from './freeBusyError';
import { createScheduleItemFromDiscriminatorValue, serializeScheduleItem, type ScheduleItem } from './scheduleItem';
import { createWorkingHoursFromDiscriminatorValue, serializeWorkingHours, type WorkingHours } from './workingHours';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createScheduleInformationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoScheduleInformation;
}
export function deserializeIntoScheduleInformation(scheduleInformation: ScheduleInformation | undefined = {} as ScheduleInformation) : Record<string, (node: ParseNode) => void> {
    return {
        "availabilityView": n => { scheduleInformation.availabilityView = n.getStringValue(); },
        "error": n => { scheduleInformation.errorEscaped = n.getObjectValue<FreeBusyError>(createFreeBusyErrorFromDiscriminatorValue); },
        "@odata.type": n => { scheduleInformation.odataType = n.getStringValue(); },
        "scheduleId": n => { scheduleInformation.scheduleId = n.getStringValue(); },
        "scheduleItems": n => { scheduleInformation.scheduleItems = n.getCollectionOfObjectValues<ScheduleItem>(createScheduleItemFromDiscriminatorValue); },
        "workingHours": n => { scheduleInformation.workingHours = n.getObjectValue<WorkingHours>(createWorkingHoursFromDiscriminatorValue); },
    }
}
export interface ScheduleInformation extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents a merged view of availability of all the items in scheduleItems. The view consists of time slots. Availability during each time slot is indicated with: 0= free, 1= tentative, 2= busy, 3= out of office, 4= working elsewhere.
     */
    availabilityView?: string;
    /**
     * Error information from attempting to get the availability of the user, distribution list, or resource.
     */
    errorEscaped?: FreeBusyError;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * An SMTP address of the user, distribution list, or resource, identifying an instance of scheduleInformation.
     */
    scheduleId?: string;
    /**
     * Contains the items that describe the availability of the user or resource.
     */
    scheduleItems?: ScheduleItem[];
    /**
     * The days of the week and hours in a specific time zone that the user works. These are set as part of the user's mailboxSettings.
     */
    workingHours?: WorkingHours;
}
export function serializeScheduleInformation(writer: SerializationWriter, scheduleInformation: ScheduleInformation | undefined = {} as ScheduleInformation) : void {
    writer.writeStringValue("availabilityView", scheduleInformation.availabilityView);
    writer.writeObjectValue<FreeBusyError>("error", scheduleInformation.errorEscaped, serializeFreeBusyError);
    writer.writeStringValue("@odata.type", scheduleInformation.odataType);
    writer.writeStringValue("scheduleId", scheduleInformation.scheduleId);
    writer.writeCollectionOfObjectValues<ScheduleItem>("scheduleItems", scheduleInformation.scheduleItems, serializeScheduleItem);
    writer.writeObjectValue<WorkingHours>("workingHours", scheduleInformation.workingHours, serializeWorkingHours);
    writer.writeAdditionalData(scheduleInformation.additionalData);
}
// tslint:enable
// eslint-enable
