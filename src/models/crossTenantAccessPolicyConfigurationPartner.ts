// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCrossTenantAccessPolicyB2BSettingFromDiscriminatorValue, serializeCrossTenantAccessPolicyB2BSetting, type CrossTenantAccessPolicyB2BSetting } from './crossTenantAccessPolicyB2BSetting';
import { createCrossTenantAccessPolicyInboundTrustFromDiscriminatorValue, serializeCrossTenantAccessPolicyInboundTrust, type CrossTenantAccessPolicyInboundTrust } from './crossTenantAccessPolicyInboundTrust';
import { createCrossTenantIdentitySyncPolicyPartnerFromDiscriminatorValue, serializeCrossTenantIdentitySyncPolicyPartner, type CrossTenantIdentitySyncPolicyPartner } from './crossTenantIdentitySyncPolicyPartner';
import { createInboundOutboundPolicyConfigurationFromDiscriminatorValue, serializeInboundOutboundPolicyConfiguration, type InboundOutboundPolicyConfiguration } from './inboundOutboundPolicyConfiguration';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCrossTenantAccessPolicyConfigurationPartnerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCrossTenantAccessPolicyConfigurationPartner;
}
export interface CrossTenantAccessPolicyConfigurationPartner extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Determines the partner-specific configuration for automatic user consent settings. Unless specifically configured, the inboundAllowed and outboundAllowed properties are null and inherit from the default settings, which is always false.
     */
    automaticUserConsentSettings?: InboundOutboundPolicyConfiguration;
    /**
     * Defines your partner-specific configuration for users from other organizations accessing your resources via Microsoft Entra B2B collaboration.
     */
    b2bCollaborationInbound?: CrossTenantAccessPolicyB2BSetting;
    /**
     * Defines your partner-specific configuration for users in your organization going outbound to access resources in another organization via Microsoft Entra B2B collaboration.
     */
    b2bCollaborationOutbound?: CrossTenantAccessPolicyB2BSetting;
    /**
     * Defines your partner-specific configuration for users from other organizations accessing your resources via Azure B2B direct connect.
     */
    b2bDirectConnectInbound?: CrossTenantAccessPolicyB2BSetting;
    /**
     * Defines your partner-specific configuration for users in your organization going outbound to access resources in another organization via Microsoft Entra B2B direct connect.
     */
    b2bDirectConnectOutbound?: CrossTenantAccessPolicyB2BSetting;
    /**
     * Defines the cross-tenant policy for the synchronization of users from a partner tenant. Use this user synchronization policy to streamline collaboration between users in a multitenant organization by automating the creation, update, and deletion of users from one tenant to another.
     */
    identitySynchronization?: CrossTenantIdentitySyncPolicyPartner;
    /**
     * Determines the partner-specific configuration for trusting other Conditional Access claims from external Microsoft Entra organizations.
     */
    inboundTrust?: CrossTenantAccessPolicyInboundTrust;
    /**
     * Identifies whether the partner-specific configuration is a Cloud Service Provider for your organization.
     */
    isServiceProvider?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The tenant identifier for the partner Microsoft Entra organization. Read-only. Key.
     */
    tenantId?: string;
}
export function deserializeIntoCrossTenantAccessPolicyConfigurationPartner(crossTenantAccessPolicyConfigurationPartner: CrossTenantAccessPolicyConfigurationPartner | undefined = {} as CrossTenantAccessPolicyConfigurationPartner) : Record<string, (node: ParseNode) => void> {
    return {
        "automaticUserConsentSettings": n => { crossTenantAccessPolicyConfigurationPartner.automaticUserConsentSettings = n.getObjectValue<InboundOutboundPolicyConfiguration>(createInboundOutboundPolicyConfigurationFromDiscriminatorValue); },
        "b2bCollaborationInbound": n => { crossTenantAccessPolicyConfigurationPartner.b2bCollaborationInbound = n.getObjectValue<CrossTenantAccessPolicyB2BSetting>(createCrossTenantAccessPolicyB2BSettingFromDiscriminatorValue); },
        "b2bCollaborationOutbound": n => { crossTenantAccessPolicyConfigurationPartner.b2bCollaborationOutbound = n.getObjectValue<CrossTenantAccessPolicyB2BSetting>(createCrossTenantAccessPolicyB2BSettingFromDiscriminatorValue); },
        "b2bDirectConnectInbound": n => { crossTenantAccessPolicyConfigurationPartner.b2bDirectConnectInbound = n.getObjectValue<CrossTenantAccessPolicyB2BSetting>(createCrossTenantAccessPolicyB2BSettingFromDiscriminatorValue); },
        "b2bDirectConnectOutbound": n => { crossTenantAccessPolicyConfigurationPartner.b2bDirectConnectOutbound = n.getObjectValue<CrossTenantAccessPolicyB2BSetting>(createCrossTenantAccessPolicyB2BSettingFromDiscriminatorValue); },
        "identitySynchronization": n => { crossTenantAccessPolicyConfigurationPartner.identitySynchronization = n.getObjectValue<CrossTenantIdentitySyncPolicyPartner>(createCrossTenantIdentitySyncPolicyPartnerFromDiscriminatorValue); },
        "inboundTrust": n => { crossTenantAccessPolicyConfigurationPartner.inboundTrust = n.getObjectValue<CrossTenantAccessPolicyInboundTrust>(createCrossTenantAccessPolicyInboundTrustFromDiscriminatorValue); },
        "isServiceProvider": n => { crossTenantAccessPolicyConfigurationPartner.isServiceProvider = n.getBooleanValue(); },
        "@odata.type": n => { crossTenantAccessPolicyConfigurationPartner.odataType = n.getStringValue(); },
        "tenantId": n => { crossTenantAccessPolicyConfigurationPartner.tenantId = n.getStringValue(); },
    }
}
export function serializeCrossTenantAccessPolicyConfigurationPartner(writer: SerializationWriter, crossTenantAccessPolicyConfigurationPartner: CrossTenantAccessPolicyConfigurationPartner | undefined = {} as CrossTenantAccessPolicyConfigurationPartner) : void {
    writer.writeObjectValue<InboundOutboundPolicyConfiguration>("automaticUserConsentSettings", crossTenantAccessPolicyConfigurationPartner.automaticUserConsentSettings, serializeInboundOutboundPolicyConfiguration);
    writer.writeObjectValue<CrossTenantAccessPolicyB2BSetting>("b2bCollaborationInbound", crossTenantAccessPolicyConfigurationPartner.b2bCollaborationInbound, serializeCrossTenantAccessPolicyB2BSetting);
    writer.writeObjectValue<CrossTenantAccessPolicyB2BSetting>("b2bCollaborationOutbound", crossTenantAccessPolicyConfigurationPartner.b2bCollaborationOutbound, serializeCrossTenantAccessPolicyB2BSetting);
    writer.writeObjectValue<CrossTenantAccessPolicyB2BSetting>("b2bDirectConnectInbound", crossTenantAccessPolicyConfigurationPartner.b2bDirectConnectInbound, serializeCrossTenantAccessPolicyB2BSetting);
    writer.writeObjectValue<CrossTenantAccessPolicyB2BSetting>("b2bDirectConnectOutbound", crossTenantAccessPolicyConfigurationPartner.b2bDirectConnectOutbound, serializeCrossTenantAccessPolicyB2BSetting);
    writer.writeObjectValue<CrossTenantIdentitySyncPolicyPartner>("identitySynchronization", crossTenantAccessPolicyConfigurationPartner.identitySynchronization, serializeCrossTenantIdentitySyncPolicyPartner);
    writer.writeObjectValue<CrossTenantAccessPolicyInboundTrust>("inboundTrust", crossTenantAccessPolicyConfigurationPartner.inboundTrust, serializeCrossTenantAccessPolicyInboundTrust);
    writer.writeBooleanValue("isServiceProvider", crossTenantAccessPolicyConfigurationPartner.isServiceProvider);
    writer.writeStringValue("@odata.type", crossTenantAccessPolicyConfigurationPartner.odataType);
    writer.writeStringValue("tenantId", crossTenantAccessPolicyConfigurationPartner.tenantId);
    writer.writeAdditionalData(crossTenantAccessPolicyConfigurationPartner.additionalData);
}
// tslint:enable
// eslint-enable
