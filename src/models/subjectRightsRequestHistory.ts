// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { SubjectRightsRequestStage } from './subjectRightsRequestStage';
import { SubjectRightsRequestStageStatus } from './subjectRightsRequestStageStatus';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSubjectRightsRequestHistoryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSubjectRightsRequestHistory;
}
export function deserializeIntoSubjectRightsRequestHistory(subjectRightsRequestHistory: SubjectRightsRequestHistory | undefined = {} as SubjectRightsRequestHistory) : Record<string, (node: ParseNode) => void> {
    return {
        "changedBy": n => { subjectRightsRequestHistory.changedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "eventDateTime": n => { subjectRightsRequestHistory.eventDateTime = n.getDateValue(); },
        "@odata.type": n => { subjectRightsRequestHistory.odataType = n.getStringValue(); },
        "stage": n => { subjectRightsRequestHistory.stage = n.getEnumValue<SubjectRightsRequestStage>(SubjectRightsRequestStage); },
        "stageStatus": n => { subjectRightsRequestHistory.stageStatus = n.getEnumValue<SubjectRightsRequestStageStatus>(SubjectRightsRequestStageStatus); },
        "type": n => { subjectRightsRequestHistory.type = n.getStringValue(); },
    }
}
export function serializeSubjectRightsRequestHistory(writer: SerializationWriter, subjectRightsRequestHistory: SubjectRightsRequestHistory | undefined = {} as SubjectRightsRequestHistory) : void {
        writer.writeObjectValue<IdentitySet>("changedBy", subjectRightsRequestHistory.changedBy, serializeIdentitySet);
        writer.writeDateValue("eventDateTime", subjectRightsRequestHistory.eventDateTime);
        writer.writeStringValue("@odata.type", subjectRightsRequestHistory.odataType);
        writer.writeEnumValue<SubjectRightsRequestStage>("stage", subjectRightsRequestHistory.stage);
        writer.writeEnumValue<SubjectRightsRequestStageStatus>("stageStatus", subjectRightsRequestHistory.stageStatus);
        writer.writeStringValue("type", subjectRightsRequestHistory.type);
        writer.writeAdditionalData(subjectRightsRequestHistory.additionalData);
}
export interface SubjectRightsRequestHistory extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Identity of the user who changed the  subject rights request.
     */
    changedBy?: IdentitySet;
    /**
     * Data and time when the entity was changed.
     */
    eventDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The stage when the entity was changed. Possible values are: contentRetrieval, contentReview, generateReport, contentDeletion, caseResolved, unknownFutureValue, approval. Note that you must use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: approval.
     */
    stage?: SubjectRightsRequestStage;
    /**
     * The status of the stage when the entity was changed. Possible values are: notStarted, current, completed, failed, unknownFutureValue.
     */
    stageStatus?: SubjectRightsRequestStageStatus;
    /**
     * Type of history.
     */
    type?: string;
}
// tslint:enable
// eslint-enable
