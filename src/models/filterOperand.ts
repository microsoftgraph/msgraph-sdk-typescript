// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFilterOperandFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFilterOperand;
}
export function deserializeIntoFilterOperand(filterOperand: FilterOperand | undefined = {} as FilterOperand) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { filterOperand.odataType = n.getStringValue(); },
        "values": n => { filterOperand.values = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface FilterOperand extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Collection of values.
     */
    values?: string[];
}
export function serializeFilterOperand(writer: SerializationWriter, filterOperand: FilterOperand | undefined = {} as FilterOperand) : void {
    writer.writeStringValue("@odata.type", filterOperand.odataType);
    writer.writeCollectionOfPrimitiveValues<string>("values", filterOperand.values);
    writer.writeAdditionalData(filterOperand.additionalData);
}
// tslint:enable
// eslint-enable
