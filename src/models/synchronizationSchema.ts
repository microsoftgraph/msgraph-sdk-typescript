// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDirectoryDefinitionFromDiscriminatorValue, serializeDirectoryDefinition, type DirectoryDefinition } from './directoryDefinition';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createSynchronizationRuleFromDiscriminatorValue, serializeSynchronizationRule, type SynchronizationRule } from './synchronizationRule';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSynchronizationSchemaFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSynchronizationSchema;
}
export function deserializeIntoSynchronizationSchema(synchronizationSchema: SynchronizationSchema | undefined = {} as SynchronizationSchema) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(synchronizationSchema),
        "directories": n => { synchronizationSchema.directories = n.getCollectionOfObjectValues<DirectoryDefinition>(createDirectoryDefinitionFromDiscriminatorValue); },
        "synchronizationRules": n => { synchronizationSchema.synchronizationRules = n.getCollectionOfObjectValues<SynchronizationRule>(createSynchronizationRuleFromDiscriminatorValue); },
        "version": n => { synchronizationSchema.version = n.getStringValue(); },
    }
}
export function serializeSynchronizationSchema(writer: SerializationWriter, synchronizationSchema: SynchronizationSchema | undefined = {} as SynchronizationSchema) : void {
        serializeEntity(writer, synchronizationSchema)
        writer.writeCollectionOfObjectValues<DirectoryDefinition>("directories", synchronizationSchema.directories, );
        writer.writeCollectionOfObjectValues<SynchronizationRule>("synchronizationRules", synchronizationSchema.synchronizationRules, );
        writer.writeStringValue("version", synchronizationSchema.version);
}
export interface SynchronizationSchema extends Entity, Parsable {
    /**
     * Contains the collection of directories and all of their objects.
     */
    directories?: DirectoryDefinition[];
    /**
     * A collection of synchronization rules configured for the synchronizationJob or synchronizationTemplate.
     */
    synchronizationRules?: SynchronizationRule[];
    /**
     * The version of the schema, updated automatically with every schema change.
     */
    version?: string;
}
// tslint:enable
// eslint-enable
