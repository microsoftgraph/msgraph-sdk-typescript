import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createMailTipsErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMailTipsError;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoMailTipsError(mailTipsError: MailTipsError | undefined = {} as MailTipsError) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { mailTipsError.code = n.getStringValue(); },
        "message": n => { mailTipsError.message = n.getStringValue(); },
        "@odata.type": n => { mailTipsError.odataType = n.getStringValue(); },
    }
}
export interface MailTipsError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error code.
     */
    code?: string;
    /**
     * The error message.
     */
    message?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeMailTipsError(writer: SerializationWriter, mailTipsError: MailTipsError | undefined = {} as MailTipsError) : void {
        writer.writeStringValue("code", mailTipsError.code);
        writer.writeStringValue("message", mailTipsError.message);
        writer.writeStringValue("@odata.type", mailTipsError.odataType);
        writer.writeAdditionalData(mailTipsError.additionalData);
}
