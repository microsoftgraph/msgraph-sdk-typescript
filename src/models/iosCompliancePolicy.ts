// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDeviceCompliancePolicy, serializeDeviceCompliancePolicy, type DeviceCompliancePolicy } from './deviceCompliancePolicy';
import { DeviceThreatProtectionLevel } from './deviceThreatProtectionLevel';
import { RequiredPasswordType } from './requiredPasswordType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIosCompliancePolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIosCompliancePolicy;
}
export function deserializeIntoIosCompliancePolicy(iosCompliancePolicy: IosCompliancePolicy | undefined = {} as IosCompliancePolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceCompliancePolicy(iosCompliancePolicy),
        "deviceThreatProtectionEnabled": n => { iosCompliancePolicy.deviceThreatProtectionEnabled = n.getBooleanValue(); },
        "deviceThreatProtectionRequiredSecurityLevel": n => { iosCompliancePolicy.deviceThreatProtectionRequiredSecurityLevel = n.getEnumValue<DeviceThreatProtectionLevel>(DeviceThreatProtectionLevel); },
        "managedEmailProfileRequired": n => { iosCompliancePolicy.managedEmailProfileRequired = n.getBooleanValue(); },
        "osMaximumVersion": n => { iosCompliancePolicy.osMaximumVersion = n.getStringValue(); },
        "osMinimumVersion": n => { iosCompliancePolicy.osMinimumVersion = n.getStringValue(); },
        "passcodeBlockSimple": n => { iosCompliancePolicy.passcodeBlockSimple = n.getBooleanValue(); },
        "passcodeExpirationDays": n => { iosCompliancePolicy.passcodeExpirationDays = n.getNumberValue(); },
        "passcodeMinimumCharacterSetCount": n => { iosCompliancePolicy.passcodeMinimumCharacterSetCount = n.getNumberValue(); },
        "passcodeMinimumLength": n => { iosCompliancePolicy.passcodeMinimumLength = n.getNumberValue(); },
        "passcodeMinutesOfInactivityBeforeLock": n => { iosCompliancePolicy.passcodeMinutesOfInactivityBeforeLock = n.getNumberValue(); },
        "passcodePreviousPasscodeBlockCount": n => { iosCompliancePolicy.passcodePreviousPasscodeBlockCount = n.getNumberValue(); },
        "passcodeRequired": n => { iosCompliancePolicy.passcodeRequired = n.getBooleanValue(); },
        "passcodeRequiredType": n => { iosCompliancePolicy.passcodeRequiredType = n.getEnumValue<RequiredPasswordType>(RequiredPasswordType); },
        "securityBlockJailbrokenDevices": n => { iosCompliancePolicy.securityBlockJailbrokenDevices = n.getBooleanValue(); },
    }
}
export interface IosCompliancePolicy extends DeviceCompliancePolicy, Parsable {
    /**
     * Require that devices have enabled device threat protection .
     */
    deviceThreatProtectionEnabled?: boolean;
    /**
     * Device threat protection levels for the Device Threat Protection API.
     */
    deviceThreatProtectionRequiredSecurityLevel?: DeviceThreatProtectionLevel;
    /**
     * Indicates whether or not to require a managed email profile.
     */
    managedEmailProfileRequired?: boolean;
    /**
     * Maximum IOS version.
     */
    osMaximumVersion?: string;
    /**
     * Minimum IOS version.
     */
    osMinimumVersion?: string;
    /**
     * Indicates whether or not to block simple passcodes.
     */
    passcodeBlockSimple?: boolean;
    /**
     * Number of days before the passcode expires. Valid values 1 to 65535
     */
    passcodeExpirationDays?: number;
    /**
     * The number of character sets required in the password.
     */
    passcodeMinimumCharacterSetCount?: number;
    /**
     * Minimum length of passcode. Valid values 4 to 14
     */
    passcodeMinimumLength?: number;
    /**
     * Minutes of inactivity before a passcode is required.
     */
    passcodeMinutesOfInactivityBeforeLock?: number;
    /**
     * Number of previous passcodes to block. Valid values 1 to 24
     */
    passcodePreviousPasscodeBlockCount?: number;
    /**
     * Indicates whether or not to require a passcode.
     */
    passcodeRequired?: boolean;
    /**
     * Possible values of required passwords.
     */
    passcodeRequiredType?: RequiredPasswordType;
    /**
     * Devices must not be jailbroken or rooted.
     */
    securityBlockJailbrokenDevices?: boolean;
}
export function serializeIosCompliancePolicy(writer: SerializationWriter, iosCompliancePolicy: IosCompliancePolicy | undefined = {} as IosCompliancePolicy) : void {
        serializeDeviceCompliancePolicy(writer, iosCompliancePolicy)
        writer.writeBooleanValue("deviceThreatProtectionEnabled", iosCompliancePolicy.deviceThreatProtectionEnabled);
        writer.writeEnumValue<DeviceThreatProtectionLevel>("deviceThreatProtectionRequiredSecurityLevel", iosCompliancePolicy.deviceThreatProtectionRequiredSecurityLevel);
        writer.writeBooleanValue("managedEmailProfileRequired", iosCompliancePolicy.managedEmailProfileRequired);
        writer.writeStringValue("osMaximumVersion", iosCompliancePolicy.osMaximumVersion);
        writer.writeStringValue("osMinimumVersion", iosCompliancePolicy.osMinimumVersion);
        writer.writeBooleanValue("passcodeBlockSimple", iosCompliancePolicy.passcodeBlockSimple);
        writer.writeNumberValue("passcodeExpirationDays", iosCompliancePolicy.passcodeExpirationDays);
        writer.writeNumberValue("passcodeMinimumCharacterSetCount", iosCompliancePolicy.passcodeMinimumCharacterSetCount);
        writer.writeNumberValue("passcodeMinimumLength", iosCompliancePolicy.passcodeMinimumLength);
        writer.writeNumberValue("passcodeMinutesOfInactivityBeforeLock", iosCompliancePolicy.passcodeMinutesOfInactivityBeforeLock);
        writer.writeNumberValue("passcodePreviousPasscodeBlockCount", iosCompliancePolicy.passcodePreviousPasscodeBlockCount);
        writer.writeBooleanValue("passcodeRequired", iosCompliancePolicy.passcodeRequired);
        writer.writeEnumValue<RequiredPasswordType>("passcodeRequiredType", iosCompliancePolicy.passcodeRequiredType);
        writer.writeBooleanValue("securityBlockJailbrokenDevices", iosCompliancePolicy.securityBlockJailbrokenDevices);
}
// tslint:enable
// eslint-enable
