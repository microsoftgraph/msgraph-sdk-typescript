// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOnenoteOperationErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOnenoteOperationError;
}
export function deserializeIntoOnenoteOperationError(onenoteOperationError: OnenoteOperationError | undefined = {} as OnenoteOperationError) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { onenoteOperationError.code = n.getStringValue(); },
        "message": n => { onenoteOperationError.message = n.getStringValue(); },
        "@odata.type": n => { onenoteOperationError.odataType = n.getStringValue(); },
    }
}
export interface OnenoteOperationError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error code.
     */
    code?: string;
    /**
     * The error message.
     */
    message?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeOnenoteOperationError(writer: SerializationWriter, onenoteOperationError: OnenoteOperationError | undefined = {} as OnenoteOperationError) : void {
        writer.writeStringValue("code", onenoteOperationError.code);
        writer.writeStringValue("message", onenoteOperationError.message);
        writer.writeStringValue("@odata.type", onenoteOperationError.odataType);
        writer.writeAdditionalData(onenoteOperationError.additionalData);
}
// tslint:enable
// eslint-enable
