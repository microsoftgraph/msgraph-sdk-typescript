// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { TrainingStatus } from './trainingStatus';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserTrainingStatusInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserTrainingStatusInfo;
}
export function deserializeIntoUserTrainingStatusInfo(userTrainingStatusInfo: UserTrainingStatusInfo | undefined = {} as UserTrainingStatusInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "assignedDateTime": n => { userTrainingStatusInfo.assignedDateTime = n.getDateValue(); },
        "completionDateTime": n => { userTrainingStatusInfo.completionDateTime = n.getDateValue(); },
        "displayName": n => { userTrainingStatusInfo.displayName = n.getStringValue(); },
        "@odata.type": n => { userTrainingStatusInfo.odataType = n.getStringValue(); },
        "trainingStatus": n => { userTrainingStatusInfo.trainingStatus = n.getEnumValue<TrainingStatus>(TrainingStatus); },
    }
}
export function serializeUserTrainingStatusInfo(writer: SerializationWriter, userTrainingStatusInfo: UserTrainingStatusInfo | undefined = {} as UserTrainingStatusInfo) : void {
    writer.writeDateValue("assignedDateTime", userTrainingStatusInfo.assignedDateTime);
    writer.writeDateValue("completionDateTime", userTrainingStatusInfo.completionDateTime);
    writer.writeStringValue("displayName", userTrainingStatusInfo.displayName);
    writer.writeStringValue("@odata.type", userTrainingStatusInfo.odataType);
    writer.writeEnumValue<TrainingStatus>("trainingStatus", userTrainingStatusInfo.trainingStatus);
    writer.writeAdditionalData(userTrainingStatusInfo.additionalData);
}
export interface UserTrainingStatusInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Date and time of assignment of the training to the user.
     */
    assignedDateTime?: Date;
    /**
     * Date and time of completion of the training by the user.
     */
    completionDateTime?: Date;
    /**
     * Display name of the assigned training.
     */
    displayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The status of the training assigned to the user. Possible values are: unknown, assigned, inProgress, completed, overdue, unknownFutureValue.
     */
    trainingStatus?: TrainingStatus;
}
// tslint:enable
// eslint-enable
