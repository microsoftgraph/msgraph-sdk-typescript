// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AverageComparativeScore extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Average score within specified basis.
     */
    averageScore?: number;
    /**
     * Scope type. The possible values are: AllTenants, TotalSeats, IndustryTypes.
     */
    basis?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createAverageComparativeScoreFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAverageComparativeScore;
}
export function deserializeIntoAverageComparativeScore(averageComparativeScore: AverageComparativeScore | undefined = {} as AverageComparativeScore) : Record<string, (node: ParseNode) => void> {
    return {
        "averageScore": n => { averageComparativeScore.averageScore = n.getNumberValue(); },
        "basis": n => { averageComparativeScore.basis = n.getStringValue(); },
        "@odata.type": n => { averageComparativeScore.odataType = n.getStringValue(); },
    }
}
export function serializeAverageComparativeScore(writer: SerializationWriter, averageComparativeScore: AverageComparativeScore | undefined = {} as AverageComparativeScore) : void {
    writer.writeNumberValue("averageScore", averageComparativeScore.averageScore);
    writer.writeStringValue("basis", averageComparativeScore.basis);
    writer.writeStringValue("@odata.type", averageComparativeScore.odataType);
    writer.writeAdditionalData(averageComparativeScore.additionalData);
}
// tslint:enable
// eslint-enable
