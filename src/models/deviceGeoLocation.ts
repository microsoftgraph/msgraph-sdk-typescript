// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceGeoLocationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceGeoLocation;
}
export function deserializeIntoDeviceGeoLocation(deviceGeoLocation: DeviceGeoLocation | undefined = {} as DeviceGeoLocation) : Record<string, (node: ParseNode) => void> {
    return {
        "altitude": n => { deviceGeoLocation.altitude = n.getNumberValue(); },
        "heading": n => { deviceGeoLocation.heading = n.getNumberValue(); },
        "horizontalAccuracy": n => { deviceGeoLocation.horizontalAccuracy = n.getNumberValue(); },
        "lastCollectedDateTime": n => { deviceGeoLocation.lastCollectedDateTime = n.getDateValue(); },
        "latitude": n => { deviceGeoLocation.latitude = n.getNumberValue(); },
        "longitude": n => { deviceGeoLocation.longitude = n.getNumberValue(); },
        "@odata.type": n => { deviceGeoLocation.odataType = n.getStringValue(); },
        "speed": n => { deviceGeoLocation.speed = n.getNumberValue(); },
        "verticalAccuracy": n => { deviceGeoLocation.verticalAccuracy = n.getNumberValue(); },
    }
}
export interface DeviceGeoLocation extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Altitude, given in meters above sea level
     */
    altitude?: number;
    /**
     * Heading in degrees from true north
     */
    heading?: number;
    /**
     * Accuracy of longitude and latitude in meters
     */
    horizontalAccuracy?: number;
    /**
     * Time at which location was recorded, relative to UTC
     */
    lastCollectedDateTime?: Date;
    /**
     * Latitude coordinate of the device's location
     */
    latitude?: number;
    /**
     * Longitude coordinate of the device's location
     */
    longitude?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Speed the device is traveling in meters per second
     */
    speed?: number;
    /**
     * Accuracy of altitude in meters
     */
    verticalAccuracy?: number;
}
export function serializeDeviceGeoLocation(writer: SerializationWriter, deviceGeoLocation: DeviceGeoLocation | undefined = {} as DeviceGeoLocation) : void {
    writer.writeNumberValue("altitude", deviceGeoLocation.altitude);
    writer.writeNumberValue("heading", deviceGeoLocation.heading);
    writer.writeNumberValue("horizontalAccuracy", deviceGeoLocation.horizontalAccuracy);
    writer.writeDateValue("lastCollectedDateTime", deviceGeoLocation.lastCollectedDateTime);
    writer.writeNumberValue("latitude", deviceGeoLocation.latitude);
    writer.writeNumberValue("longitude", deviceGeoLocation.longitude);
    writer.writeStringValue("@odata.type", deviceGeoLocation.odataType);
    writer.writeNumberValue("speed", deviceGeoLocation.speed);
    writer.writeNumberValue("verticalAccuracy", deviceGeoLocation.verticalAccuracy);
    writer.writeAdditionalData(deviceGeoLocation.additionalData);
}
// tslint:enable
// eslint-enable
