// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOnPremisesProvisioningErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOnPremisesProvisioningError;
}
export function deserializeIntoOnPremisesProvisioningError(onPremisesProvisioningError: OnPremisesProvisioningError | undefined = {} as OnPremisesProvisioningError) : Record<string, (node: ParseNode) => void> {
    return {
        "category": n => { onPremisesProvisioningError.category = n.getStringValue(); },
        "occurredDateTime": n => { onPremisesProvisioningError.occurredDateTime = n.getDateValue(); },
        "@odata.type": n => { onPremisesProvisioningError.odataType = n.getStringValue(); },
        "propertyCausingError": n => { onPremisesProvisioningError.propertyCausingError = n.getStringValue(); },
        "value": n => { onPremisesProvisioningError.value = n.getStringValue(); },
    }
}
export interface OnPremisesProvisioningError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Category of the provisioning error. Note: Currently, there is only one possible value. Possible value: PropertyConflict - indicates a property value is not unique. Other objects contain the same value for the property.
     */
    category?: string;
    /**
     * The date and time at which the error occurred.
     */
    occurredDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Name of the directory property causing the error. Current possible values: UserPrincipalName or ProxyAddress
     */
    propertyCausingError?: string;
    /**
     * Value of the property causing the error.
     */
    value?: string;
}
export function serializeOnPremisesProvisioningError(writer: SerializationWriter, onPremisesProvisioningError: OnPremisesProvisioningError | undefined = {} as OnPremisesProvisioningError) : void {
        writer.writeStringValue("category", onPremisesProvisioningError.category);
        writer.writeDateValue("occurredDateTime", onPremisesProvisioningError.occurredDateTime);
        writer.writeStringValue("@odata.type", onPremisesProvisioningError.odataType);
        writer.writeStringValue("propertyCausingError", onPremisesProvisioningError.propertyCausingError);
        writer.writeStringValue("value", onPremisesProvisioningError.value);
        writer.writeAdditionalData(onPremisesProvisioningError.additionalData);
}
// tslint:enable
// eslint-enable
