import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createGroupFilterFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGroupFilter;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoGroupFilter(groupFilter: GroupFilter | undefined = {} as GroupFilter) : Record<string, (node: ParseNode) => void> {
    return {
        "includedGroups": n => { groupFilter.includedGroups = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { groupFilter.odataType = n.getStringValue(); },
    }
}
export interface GroupFilter extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The includedGroups property
     */
    includedGroups?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeGroupFilter(writer: SerializationWriter, groupFilter: GroupFilter | undefined = {} as GroupFilter) : void {
        writer.writeCollectionOfPrimitiveValues<string>("includedGroups", groupFilter.includedGroups);
        writer.writeStringValue("@odata.type", groupFilter.odataType);
        writer.writeAdditionalData(groupFilter.additionalData);
}
