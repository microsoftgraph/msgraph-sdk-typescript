// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { IosNotificationAlertType } from './iosNotificationAlertType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIosNotificationSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIosNotificationSettings;
}
export function deserializeIntoIosNotificationSettings(iosNotificationSettings: IosNotificationSettings | undefined = {} as IosNotificationSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "alertType": n => { iosNotificationSettings.alertType = n.getEnumValue<IosNotificationAlertType>(IosNotificationAlertType); },
        "appName": n => { iosNotificationSettings.appName = n.getStringValue(); },
        "badgesEnabled": n => { iosNotificationSettings.badgesEnabled = n.getBooleanValue(); },
        "bundleID": n => { iosNotificationSettings.bundleID = n.getStringValue(); },
        "enabled": n => { iosNotificationSettings.enabled = n.getBooleanValue(); },
        "@odata.type": n => { iosNotificationSettings.odataType = n.getStringValue(); },
        "publisher": n => { iosNotificationSettings.publisher = n.getStringValue(); },
        "showInNotificationCenter": n => { iosNotificationSettings.showInNotificationCenter = n.getBooleanValue(); },
        "showOnLockScreen": n => { iosNotificationSettings.showOnLockScreen = n.getBooleanValue(); },
        "soundsEnabled": n => { iosNotificationSettings.soundsEnabled = n.getBooleanValue(); },
    }
}
export interface IosNotificationSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Notification Settings Alert Type.
     */
    alertType?: IosNotificationAlertType;
    /**
     * Application name to be associated with the bundleID.
     */
    appName?: string;
    /**
     * Indicates whether badges are allowed for this app.
     */
    badgesEnabled?: boolean;
    /**
     * Bundle id of app to which to apply these notification settings.
     */
    bundleID?: string;
    /**
     * Indicates whether notifications are allowed for this app.
     */
    enabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Publisher to be associated with the bundleID.
     */
    publisher?: string;
    /**
     * Indicates whether notifications can be shown in notification center.
     */
    showInNotificationCenter?: boolean;
    /**
     * Indicates whether notifications can be shown on the lock screen.
     */
    showOnLockScreen?: boolean;
    /**
     * Indicates whether sounds are allowed for this app.
     */
    soundsEnabled?: boolean;
}
export function serializeIosNotificationSettings(writer: SerializationWriter, iosNotificationSettings: IosNotificationSettings | undefined = {} as IosNotificationSettings) : void {
    writer.writeEnumValue<IosNotificationAlertType>("alertType", iosNotificationSettings.alertType);
    writer.writeStringValue("appName", iosNotificationSettings.appName);
    writer.writeBooleanValue("badgesEnabled", iosNotificationSettings.badgesEnabled);
    writer.writeStringValue("bundleID", iosNotificationSettings.bundleID);
    writer.writeBooleanValue("enabled", iosNotificationSettings.enabled);
    writer.writeStringValue("@odata.type", iosNotificationSettings.odataType);
    writer.writeStringValue("publisher", iosNotificationSettings.publisher);
    writer.writeBooleanValue("showInNotificationCenter", iosNotificationSettings.showInNotificationCenter);
    writer.writeBooleanValue("showOnLockScreen", iosNotificationSettings.showOnLockScreen);
    writer.writeBooleanValue("soundsEnabled", iosNotificationSettings.soundsEnabled);
    writer.writeAdditionalData(iosNotificationSettings.additionalData);
}
// tslint:enable
// eslint-enable
