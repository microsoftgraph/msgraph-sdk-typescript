// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDateTimeColumnFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDateTimeColumn;
}
export interface DateTimeColumn extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * How the value should be presented in the UX. Must be one of default, friendly, or standard. See below for more details. If unspecified, treated as default.
     */
    displayAs?: string;
    /**
     * Indicates whether the value should be presented as a date only or a date and time. Must be one of dateOnly or dateTime
     */
    format?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function deserializeIntoDateTimeColumn(dateTimeColumn: DateTimeColumn | undefined = {} as DateTimeColumn) : Record<string, (node: ParseNode) => void> {
    return {
        "displayAs": n => { dateTimeColumn.displayAs = n.getStringValue(); },
        "format": n => { dateTimeColumn.format = n.getStringValue(); },
        "@odata.type": n => { dateTimeColumn.odataType = n.getStringValue(); },
    }
}
export function serializeDateTimeColumn(writer: SerializationWriter, dateTimeColumn: DateTimeColumn | undefined = {} as DateTimeColumn) : void {
        writer.writeStringValue("displayAs", dateTimeColumn.displayAs);
        writer.writeStringValue("format", dateTimeColumn.format);
        writer.writeStringValue("@odata.type", dateTimeColumn.odataType);
        writer.writeAdditionalData(dateTimeColumn.additionalData);
}
// tslint:enable
// eslint-enable
