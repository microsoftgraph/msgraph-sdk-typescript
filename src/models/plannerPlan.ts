// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { createPlannerBucketFromDiscriminatorValue, serializePlannerBucket, type PlannerBucket } from './plannerBucket';
import { createPlannerPlanContainerFromDiscriminatorValue, serializePlannerPlanContainer, type PlannerPlanContainer } from './plannerPlanContainer';
import { createPlannerPlanDetailsFromDiscriminatorValue, serializePlannerPlanDetails, type PlannerPlanDetails } from './plannerPlanDetails';
import { createPlannerTaskFromDiscriminatorValue, serializePlannerTask, type PlannerTask } from './plannerTask';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPlannerPlanFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPlannerPlan;
}
export function deserializeIntoPlannerPlan(plannerPlan: PlannerPlan | undefined = {} as PlannerPlan) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(plannerPlan),
        "buckets": n => { plannerPlan.buckets = n.getCollectionOfObjectValues<PlannerBucket>(createPlannerBucketFromDiscriminatorValue); },
        "container": n => { plannerPlan.container = n.getObjectValue<PlannerPlanContainer>(createPlannerPlanContainerFromDiscriminatorValue); },
        "createdBy": n => { plannerPlan.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { plannerPlan.createdDateTime = n.getDateValue(); },
        "details": n => { plannerPlan.details = n.getObjectValue<PlannerPlanDetails>(createPlannerPlanDetailsFromDiscriminatorValue); },
        "owner": n => { plannerPlan.owner = n.getStringValue(); },
        "tasks": n => { plannerPlan.tasks = n.getCollectionOfObjectValues<PlannerTask>(createPlannerTaskFromDiscriminatorValue); },
        "title": n => { plannerPlan.title = n.getStringValue(); },
    }
}
export interface PlannerPlan extends Entity, Parsable {
    /**
     * Read-only. Nullable. Collection of buckets in the plan.
     */
    buckets?: PlannerBucket[];
    /**
     * Identifies the container of the plan. Specify only the url, the containerId and type, or all properties. After it's set, this property canâ€™t be updated. Required.
     */
    container?: PlannerPlanContainer;
    /**
     * Read-only. The user who created the plan.
     */
    createdBy?: IdentitySet;
    /**
     * Read-only. Date and time at which the plan is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    createdDateTime?: Date;
    /**
     * Read-only. Nullable. Extra details about the plan.
     */
    details?: PlannerPlanDetails;
    /**
     * The owner property
     */
    owner?: string;
    /**
     * Read-only. Nullable. Collection of tasks in the plan.
     */
    tasks?: PlannerTask[];
    /**
     * Required. Title of the plan.
     */
    title?: string;
}
export function serializePlannerPlan(writer: SerializationWriter, plannerPlan: PlannerPlan | undefined = {} as PlannerPlan) : void {
        serializeEntity(writer, plannerPlan)
        writer.writeCollectionOfObjectValues<PlannerBucket>("buckets", plannerPlan.buckets, serializePlannerBucket);
        writer.writeObjectValue<PlannerPlanContainer>("container", plannerPlan.container, serializePlannerPlanContainer);
        writer.writeObjectValue<IdentitySet>("createdBy", plannerPlan.createdBy, serializeIdentitySet);
        writer.writeDateValue("createdDateTime", plannerPlan.createdDateTime);
        writer.writeObjectValue<PlannerPlanDetails>("details", plannerPlan.details, serializePlannerPlanDetails);
        writer.writeStringValue("owner", plannerPlan.owner);
        writer.writeCollectionOfObjectValues<PlannerTask>("tasks", plannerPlan.tasks, serializePlannerTask);
        writer.writeStringValue("title", plannerPlan.title);
}
// tslint:enable
// eslint-enable
