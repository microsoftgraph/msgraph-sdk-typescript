// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DeviceManagementExportJobLocalizationType } from './deviceManagementExportJobLocalizationType';
import { DeviceManagementReportFileFormat } from './deviceManagementReportFileFormat';
import { DeviceManagementReportStatus } from './deviceManagementReportStatus';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceManagementExportJobFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceManagementExportJob;
}
export function deserializeIntoDeviceManagementExportJob(deviceManagementExportJob: DeviceManagementExportJob | undefined = {} as DeviceManagementExportJob) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceManagementExportJob),
        "expirationDateTime": n => { deviceManagementExportJob.expirationDateTime = n.getDateValue(); },
        "filter": n => { deviceManagementExportJob.filter = n.getStringValue(); },
        "format": n => { deviceManagementExportJob.format = n.getEnumValue<DeviceManagementReportFileFormat>(DeviceManagementReportFileFormat); },
        "localizationType": n => { deviceManagementExportJob.localizationType = n.getEnumValue<DeviceManagementExportJobLocalizationType>(DeviceManagementExportJobLocalizationType); },
        "reportName": n => { deviceManagementExportJob.reportName = n.getStringValue(); },
        "requestDateTime": n => { deviceManagementExportJob.requestDateTime = n.getDateValue(); },
        "select": n => { deviceManagementExportJob.select = n.getCollectionOfPrimitiveValues<string>(); },
        "snapshotId": n => { deviceManagementExportJob.snapshotId = n.getStringValue(); },
        "status": n => { deviceManagementExportJob.status = n.getEnumValue<DeviceManagementReportStatus>(DeviceManagementReportStatus); },
        "url": n => { deviceManagementExportJob.url = n.getStringValue(); },
    }
}
export interface DeviceManagementExportJob extends Entity, Parsable {
    /**
     * Time that the exported report expires
     */
    expirationDateTime?: Date;
    /**
     * Filters applied on the report
     */
    filter?: string;
    /**
     * Possible values for the file format of a report
     */
    format?: DeviceManagementReportFileFormat;
    /**
     * Configures how the requested export job is localized
     */
    localizationType?: DeviceManagementExportJobLocalizationType;
    /**
     * Name of the report
     */
    reportName?: string;
    /**
     * Time that the exported report was requested
     */
    requestDateTime?: Date;
    /**
     * Columns selected from the report
     */
    select?: string[];
    /**
     * A snapshot is an identifiable subset of the dataset represented by the ReportName. A sessionId or CachedReportConfiguration id can be used here. If a sessionId is specified, Filter, Select, and OrderBy are applied to the data represented by the sessionId. Filter, Select, and OrderBy cannot be specified together with a CachedReportConfiguration id.
     */
    snapshotId?: string;
    /**
     * Possible statuses associated with a generated report
     */
    status?: DeviceManagementReportStatus;
    /**
     * Temporary location of the exported report
     */
    url?: string;
}
export function serializeDeviceManagementExportJob(writer: SerializationWriter, deviceManagementExportJob: DeviceManagementExportJob | undefined = {} as DeviceManagementExportJob) : void {
    serializeEntity(writer, deviceManagementExportJob)
    writer.writeDateValue("expirationDateTime", deviceManagementExportJob.expirationDateTime);
    writer.writeStringValue("filter", deviceManagementExportJob.filter);
    writer.writeEnumValue<DeviceManagementReportFileFormat>("format", deviceManagementExportJob.format);
    writer.writeEnumValue<DeviceManagementExportJobLocalizationType>("localizationType", deviceManagementExportJob.localizationType);
    writer.writeStringValue("reportName", deviceManagementExportJob.reportName);
    writer.writeDateValue("requestDateTime", deviceManagementExportJob.requestDateTime);
    writer.writeCollectionOfPrimitiveValues<string>("select", deviceManagementExportJob.select);
    writer.writeStringValue("snapshotId", deviceManagementExportJob.snapshotId);
    writer.writeEnumValue<DeviceManagementReportStatus>("status", deviceManagementExportJob.status);
    writer.writeStringValue("url", deviceManagementExportJob.url);
}
// tslint:enable
// eslint-enable
