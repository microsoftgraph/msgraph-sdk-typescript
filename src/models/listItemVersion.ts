// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoBaseItemVersion, serializeBaseItemVersion, type BaseItemVersion } from './baseItemVersion';
import { deserializeIntoDocumentSetVersion } from './documentSetVersion';
import { createFieldValueSetFromDiscriminatorValue, serializeFieldValueSet, type FieldValueSet } from './fieldValueSet';
import { type DocumentSetVersion } from './index';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createListItemVersionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.documentSetVersion":
                    return deserializeIntoDocumentSetVersion;
            }
        }
    }
    return deserializeIntoListItemVersion;
}
export function deserializeIntoListItemVersion(listItemVersion: ListItemVersion | undefined = {} as ListItemVersion) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseItemVersion(listItemVersion),
        "fields": n => { listItemVersion.fields = n.getObjectValue<FieldValueSet>(createFieldValueSetFromDiscriminatorValue); },
    }
}
export interface ListItemVersion extends BaseItemVersion, Parsable {
    /**
     * A collection of the fields and values for this version of the list item.
     */
    fields?: FieldValueSet;
}
export function serializeListItemVersion(writer: SerializationWriter, listItemVersion: ListItemVersion | undefined = {} as ListItemVersion) : void {
    serializeBaseItemVersion(writer, listItemVersion)
    writer.writeObjectValue<FieldValueSet>("fields", listItemVersion.fields, serializeFieldValueSet);
}
// tslint:enable
// eslint-enable
