// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createPlannerTaskFromDiscriminatorValue, serializePlannerTask, type PlannerTask } from './plannerTask';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPlannerBucketFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPlannerBucket;
}
export function deserializeIntoPlannerBucket(plannerBucket: PlannerBucket | undefined = {} as PlannerBucket) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(plannerBucket),
        "name": n => { plannerBucket.name = n.getStringValue(); },
        "orderHint": n => { plannerBucket.orderHint = n.getStringValue(); },
        "planId": n => { plannerBucket.planId = n.getStringValue(); },
        "tasks": n => { plannerBucket.tasks = n.getCollectionOfObjectValues<PlannerTask>(createPlannerTaskFromDiscriminatorValue); },
    }
}
export interface PlannerBucket extends Entity, Parsable {
    /**
     * Name of the bucket.
     */
    name?: string;
    /**
     * Hint used to order items of this type in a list view. For details about the supported format, see Using order hints in Planner.
     */
    orderHint?: string;
    /**
     * Plan ID to which the bucket belongs.
     */
    planId?: string;
    /**
     * Read-only. Nullable. The collection of tasks in the bucket.
     */
    tasks?: PlannerTask[];
}
export function serializePlannerBucket(writer: SerializationWriter, plannerBucket: PlannerBucket | undefined = {} as PlannerBucket) : void {
        serializeEntity(writer, plannerBucket)
        writer.writeStringValue("name", plannerBucket.name);
        writer.writeStringValue("orderHint", plannerBucket.orderHint);
        writer.writeStringValue("planId", plannerBucket.planId);
        writer.writeCollectionOfObjectValues<PlannerTask>("tasks", plannerBucket.tasks, );
}
// tslint:enable
// eslint-enable
