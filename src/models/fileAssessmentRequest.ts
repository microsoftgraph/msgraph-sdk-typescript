// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoThreatAssessmentRequest, serializeThreatAssessmentRequest, type ThreatAssessmentRequest } from './threatAssessmentRequest';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFileAssessmentRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFileAssessmentRequest;
}
export function deserializeIntoFileAssessmentRequest(fileAssessmentRequest: FileAssessmentRequest | undefined = {} as FileAssessmentRequest) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoThreatAssessmentRequest(fileAssessmentRequest),
        "contentData": n => { fileAssessmentRequest.contentData = n.getStringValue(); },
        "fileName": n => { fileAssessmentRequest.fileName = n.getStringValue(); },
    }
}
export interface FileAssessmentRequest extends Parsable, ThreatAssessmentRequest {
    /**
     * Base64 encoded file content. The file content can't fetch back because it isn't stored.
     */
    contentData?: string;
    /**
     * The file name.
     */
    fileName?: string;
}
export function serializeFileAssessmentRequest(writer: SerializationWriter, fileAssessmentRequest: FileAssessmentRequest | undefined = {} as FileAssessmentRequest) : void {
        serializeThreatAssessmentRequest(writer, fileAssessmentRequest)
        writer.writeStringValue("contentData", fileAssessmentRequest.contentData);
        writer.writeStringValue("fileName", fileAssessmentRequest.fileName);
}
// tslint:enable
// eslint-enable
