// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ContentTypeOrder extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates whether this is the default content type
     */
    defaultEscaped?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies the position in which the content type appears in the selection UI.
     */
    position?: number;
}
export function createContentTypeOrderFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoContentTypeOrder;
}
export function deserializeIntoContentTypeOrder(contentTypeOrder: ContentTypeOrder | undefined = {} as ContentTypeOrder) : Record<string, (node: ParseNode) => void> {
    return {
        "default": n => { contentTypeOrder.defaultEscaped = n.getBooleanValue(); },
        "@odata.type": n => { contentTypeOrder.odataType = n.getStringValue(); },
        "position": n => { contentTypeOrder.position = n.getNumberValue(); },
    }
}
export function serializeContentTypeOrder(writer: SerializationWriter, contentTypeOrder: ContentTypeOrder | undefined = {} as ContentTypeOrder) : void {
        writer.writeBooleanValue("default", contentTypeOrder.defaultEscaped);
        writer.writeStringValue("@odata.type", contentTypeOrder.odataType);
        writer.writeNumberValue("position", contentTypeOrder.position);
        writer.writeAdditionalData(contentTypeOrder.additionalData);
}
// tslint:enable
// eslint-enable
