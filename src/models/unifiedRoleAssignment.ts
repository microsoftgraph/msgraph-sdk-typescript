// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAppScopeFromDiscriminatorValue, serializeAppScope, type AppScope } from './appScope';
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createUnifiedRoleDefinitionFromDiscriminatorValue, serializeUnifiedRoleDefinition, type UnifiedRoleDefinition } from './unifiedRoleDefinition';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleAssignmentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRoleAssignment;
}
export function deserializeIntoUnifiedRoleAssignment(unifiedRoleAssignment: UnifiedRoleAssignment | undefined = {} as UnifiedRoleAssignment) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(unifiedRoleAssignment),
        "appScope": n => { unifiedRoleAssignment.appScope = n.getObjectValue<AppScope>(createAppScopeFromDiscriminatorValue); },
        "appScopeId": n => { unifiedRoleAssignment.appScopeId = n.getStringValue(); },
        "condition": n => { unifiedRoleAssignment.condition = n.getStringValue(); },
        "directoryScope": n => { unifiedRoleAssignment.directoryScope = n.getObjectValue<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "directoryScopeId": n => { unifiedRoleAssignment.directoryScopeId = n.getStringValue(); },
        "principal": n => { unifiedRoleAssignment.principal = n.getObjectValue<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "principalId": n => { unifiedRoleAssignment.principalId = n.getStringValue(); },
        "roleDefinition": n => { unifiedRoleAssignment.roleDefinition = n.getObjectValue<UnifiedRoleDefinition>(createUnifiedRoleDefinitionFromDiscriminatorValue); },
        "roleDefinitionId": n => { unifiedRoleAssignment.roleDefinitionId = n.getStringValue(); },
    }
}
export function serializeUnifiedRoleAssignment(writer: SerializationWriter, unifiedRoleAssignment: UnifiedRoleAssignment | undefined = {} as UnifiedRoleAssignment) : void {
    serializeEntity(writer, unifiedRoleAssignment)
    writer.writeObjectValue<AppScope>("appScope", unifiedRoleAssignment.appScope, serializeAppScope);
    writer.writeStringValue("appScopeId", unifiedRoleAssignment.appScopeId);
    writer.writeStringValue("condition", unifiedRoleAssignment.condition);
    writer.writeObjectValue<DirectoryObject>("directoryScope", unifiedRoleAssignment.directoryScope, serializeDirectoryObject);
    writer.writeStringValue("directoryScopeId", unifiedRoleAssignment.directoryScopeId);
    writer.writeObjectValue<DirectoryObject>("principal", unifiedRoleAssignment.principal, serializeDirectoryObject);
    writer.writeStringValue("principalId", unifiedRoleAssignment.principalId);
    writer.writeObjectValue<UnifiedRoleDefinition>("roleDefinition", unifiedRoleAssignment.roleDefinition, serializeUnifiedRoleDefinition);
    writer.writeStringValue("roleDefinitionId", unifiedRoleAssignment.roleDefinitionId);
}
export interface UnifiedRoleAssignment extends Entity, Parsable {
    /**
     * Read-only property with details of the app specific scope when the assignment scope is app specific. Containment entity. Supports $expand.
     */
    appScope?: AppScope;
    /**
     * Identifier of the app specific scope when the assignment scope is app specific. The scope of an assignment determines the set of resources for which the principal has been granted access. App scopes are scopes that are defined and understood by a resource application only. For the entitlement management provider, use this property to specify a catalog, for example /AccessPackageCatalog/beedadfe-01d5-4025-910b-84abb9369997. Supports $filter (eq, in). For example /roleManagement/entitlementManagement/roleAssignments?$filter=appScopeId eq '/AccessPackageCatalog/{catalog id}'.
     */
    appScopeId?: string;
    /**
     * The condition property
     */
    condition?: string;
    /**
     * The directory object that is the scope of the assignment. Read-only. Supports $expand.
     */
    directoryScope?: DirectoryObject;
    /**
     * Identifier of the directory object representing the scope of the assignment. The scope of an assignment determines the set of resources for which the principal has been granted access. Directory scopes are shared scopes stored in the directory that are understood by multiple applications, unlike app scopes that are defined and understood by a resource application only. Supports $filter (eq, in).
     */
    directoryScopeId?: string;
    /**
     * Referencing the assigned principal. Read-only. Supports $expand.
     */
    principal?: DirectoryObject;
    /**
     * Identifier of the principal to which the assignment is granted. Supported principals are users, role-assignable groups, and service principals. Supports $filter (eq, in).
     */
    principalId?: string;
    /**
     * The roleDefinition the assignment is for.  Supports $expand.
     */
    roleDefinition?: UnifiedRoleDefinition;
    /**
     * Identifier of the unifiedRoleDefinition the assignment is for. Read-only. Supports $filter (eq, in).
     */
    roleDefinitionId?: string;
}
// tslint:enable
// eslint-enable
