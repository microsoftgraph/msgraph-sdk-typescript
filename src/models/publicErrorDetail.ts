// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPublicErrorDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPublicErrorDetail;
}
export function deserializeIntoPublicErrorDetail(publicErrorDetail: PublicErrorDetail | undefined = {} as PublicErrorDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { publicErrorDetail.code = n.getStringValue(); },
        "message": n => { publicErrorDetail.message = n.getStringValue(); },
        "@odata.type": n => { publicErrorDetail.odataType = n.getStringValue(); },
        "target": n => { publicErrorDetail.target = n.getStringValue(); },
    }
}
export interface PublicErrorDetail extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error code.
     */
    code?: string;
    /**
     * The error message.
     */
    message?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The target of the error.
     */
    target?: string;
}
export function serializePublicErrorDetail(writer: SerializationWriter, publicErrorDetail: PublicErrorDetail | undefined = {} as PublicErrorDetail) : void {
    writer.writeStringValue("code", publicErrorDetail.code);
    writer.writeStringValue("message", publicErrorDetail.message);
    writer.writeStringValue("@odata.type", publicErrorDetail.odataType);
    writer.writeStringValue("target", publicErrorDetail.target);
    writer.writeAdditionalData(publicErrorDetail.additionalData);
}
// tslint:enable
// eslint-enable
