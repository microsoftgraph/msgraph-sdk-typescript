// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from './group';
import { createPrinterFromDiscriminatorValue, serializePrinter, type Printer } from './printer';
import { deserializeIntoPrinterBase, serializePrinterBase, type PrinterBase } from './printerBase';
import { createPrinterShareViewpointFromDiscriminatorValue, serializePrinterShareViewpoint, type PrinterShareViewpoint } from './printerShareViewpoint';
import { createUserFromDiscriminatorValue, serializeUser, type User } from './user';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrinterShareFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrinterShare;
}
export function deserializeIntoPrinterShare(printerShare: PrinterShare | undefined = {} as PrinterShare) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPrinterBase(printerShare),
        "allowAllUsers": n => { printerShare.allowAllUsers = n.getBooleanValue(); },
        "allowedGroups": n => { printerShare.allowedGroups = n.getCollectionOfObjectValues<Group>(createGroupFromDiscriminatorValue); },
        "allowedUsers": n => { printerShare.allowedUsers = n.getCollectionOfObjectValues<User>(createUserFromDiscriminatorValue); },
        "createdDateTime": n => { printerShare.createdDateTime = n.getDateValue(); },
        "printer": n => { printerShare.printer = n.getObjectValue<Printer>(createPrinterFromDiscriminatorValue); },
        "viewPoint": n => { printerShare.viewPoint = n.getObjectValue<PrinterShareViewpoint>(createPrinterShareViewpointFromDiscriminatorValue); },
    }
}
export interface PrinterShare extends Parsable, PrinterBase {
    /**
     * If true, all users and groups will be granted access to this printer share. This supersedes the allow lists defined by the allowedUsers and allowedGroups navigation properties.
     */
    allowAllUsers?: boolean;
    /**
     * The groups whose users have access to print using the printer.
     */
    allowedGroups?: Group[];
    /**
     * The users who have access to print using the printer.
     */
    allowedUsers?: User[];
    /**
     * The DateTimeOffset when the printer share was created. Read-only.
     */
    createdDateTime?: Date;
    /**
     * The printer that this printer share is related to.
     */
    printer?: Printer;
    /**
     * Additional data for a printer share as viewed by the signed-in user.
     */
    viewPoint?: PrinterShareViewpoint;
}
export function serializePrinterShare(writer: SerializationWriter, printerShare: PrinterShare | undefined = {} as PrinterShare) : void {
        serializePrinterBase(writer, printerShare)
        writer.writeBooleanValue("allowAllUsers", printerShare.allowAllUsers);
        writer.writeCollectionOfObjectValues<Group>("allowedGroups", printerShare.allowedGroups, serializeGroup);
        writer.writeCollectionOfObjectValues<User>("allowedUsers", printerShare.allowedUsers, serializeUser);
        writer.writeDateValue("createdDateTime", printerShare.createdDateTime);
        writer.writeObjectValue<Printer>("printer", printerShare.printer, serializePrinter);
        writer.writeObjectValue<PrinterShareViewpoint>("viewPoint", printerShare.viewPoint, serializePrinterShareViewpoint);
}
// tslint:enable
// eslint-enable
