// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { RegistryHive } from './registryHive';
import { RegistryOperation } from './registryOperation';
import { RegistryValueType } from './registryValueType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRegistryKeyStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRegistryKeyState;
}
export function deserializeIntoRegistryKeyState(registryKeyState: RegistryKeyState | undefined = {} as RegistryKeyState) : Record<string, (node: ParseNode) => void> {
    return {
        "hive": n => { registryKeyState.hive = n.getEnumValue<RegistryHive>(RegistryHive); },
        "key": n => { registryKeyState.key = n.getStringValue(); },
        "@odata.type": n => { registryKeyState.odataType = n.getStringValue(); },
        "oldKey": n => { registryKeyState.oldKey = n.getStringValue(); },
        "oldValueData": n => { registryKeyState.oldValueData = n.getStringValue(); },
        "oldValueName": n => { registryKeyState.oldValueName = n.getStringValue(); },
        "operation": n => { registryKeyState.operation = n.getEnumValue<RegistryOperation>(RegistryOperation); },
        "processId": n => { registryKeyState.processId = n.getNumberValue(); },
        "valueData": n => { registryKeyState.valueData = n.getStringValue(); },
        "valueName": n => { registryKeyState.valueName = n.getStringValue(); },
        "valueType": n => { registryKeyState.valueType = n.getEnumValue<RegistryValueType>(RegistryValueType); },
    }
}
export interface RegistryKeyState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A Windows registry hive : HKEYCURRENTCONFIG HKEYCURRENTUSER HKEYLOCALMACHINE/SAM HKEYLOCALMACHINE/Security HKEYLOCALMACHINE/Software HKEYLOCALMACHINE/System HKEY_USERS/.Default. Possible values are: unknown, currentConfig, currentUser, localMachineSam, localMachineSecurity, localMachineSoftware, localMachineSystem, usersDefault.
     */
    hive?: RegistryHive;
    /**
     * Current (i.e. changed) registry key (excludes HIVE).
     */
    key?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Previous (i.e. before changed) registry key (excludes HIVE).
     */
    oldKey?: string;
    /**
     * Previous (i.e. before changed) registry key value data (contents).
     */
    oldValueData?: string;
    /**
     * Previous (i.e. before changed) registry key value name.
     */
    oldValueName?: string;
    /**
     * Operation that changed the registry key name and/or value. Possible values are: unknown, create, modify, delete.
     */
    operation?: RegistryOperation;
    /**
     * Process ID (PID) of the process that modified the registry key (process details will appear in the alert 'processes' collection).
     */
    processId?: number;
    /**
     * Current (i.e. changed) registry key value data (contents).
     */
    valueData?: string;
    /**
     * Current (i.e. changed) registry key value name
     */
    valueName?: string;
    /**
     * Registry key value type REGBINARY REGDWORD REGDWORDLITTLEENDIAN REGDWORDBIGENDIANREGEXPANDSZ REGLINK REGMULTISZ REGNONE REGQWORD REGQWORDLITTLEENDIAN REG_SZ Possible values are: unknown, binary, dword, dwordLittleEndian, dwordBigEndian, expandSz, link, multiSz, none, qword, qwordlittleEndian, sz.
     */
    valueType?: RegistryValueType;
}
export function serializeRegistryKeyState(writer: SerializationWriter, registryKeyState: RegistryKeyState | undefined = {} as RegistryKeyState) : void {
    writer.writeEnumValue<RegistryHive>("hive", registryKeyState.hive);
    writer.writeStringValue("key", registryKeyState.key);
    writer.writeStringValue("@odata.type", registryKeyState.odataType);
    writer.writeStringValue("oldKey", registryKeyState.oldKey);
    writer.writeStringValue("oldValueData", registryKeyState.oldValueData);
    writer.writeStringValue("oldValueName", registryKeyState.oldValueName);
    writer.writeEnumValue<RegistryOperation>("operation", registryKeyState.operation);
    writer.writeNumberValue("processId", registryKeyState.processId);
    writer.writeStringValue("valueData", registryKeyState.valueData);
    writer.writeStringValue("valueName", registryKeyState.valueName);
    writer.writeEnumValue<RegistryValueType>("valueType", registryKeyState.valueType);
    writer.writeAdditionalData(registryKeyState.additionalData);
}
// tslint:enable
// eslint-enable
