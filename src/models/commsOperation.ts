// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAddLargeGalleryViewOperation } from './addLargeGalleryViewOperation';
import { deserializeIntoCancelMediaProcessingOperation } from './cancelMediaProcessingOperation';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type AddLargeGalleryViewOperation, type CancelMediaProcessingOperation, type InviteParticipantsOperation, type MuteParticipantOperation, type PlayPromptOperation, type RecordOperation, type StartHoldMusicOperation, type StopHoldMusicOperation, type SubscribeToToneOperation, type UnmuteParticipantOperation, type UpdateRecordingStatusOperation } from './index';
import { deserializeIntoInviteParticipantsOperation } from './inviteParticipantsOperation';
import { deserializeIntoMuteParticipantOperation } from './muteParticipantOperation';
import { OperationStatus } from './operationStatus';
import { deserializeIntoPlayPromptOperation } from './playPromptOperation';
import { deserializeIntoRecordOperation } from './recordOperation';
import { createResultInfoFromDiscriminatorValue, serializeResultInfo, type ResultInfo } from './resultInfo';
import { deserializeIntoStartHoldMusicOperation } from './startHoldMusicOperation';
import { deserializeIntoStopHoldMusicOperation } from './stopHoldMusicOperation';
import { deserializeIntoSubscribeToToneOperation } from './subscribeToToneOperation';
import { deserializeIntoUnmuteParticipantOperation } from './unmuteParticipantOperation';
import { deserializeIntoUpdateRecordingStatusOperation } from './updateRecordingStatusOperation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CommsOperation extends Entity, Parsable {
    /**
     * Unique Client Context string. Max limit is 256 chars.
     */
    clientContext?: string;
    /**
     * The result information. Read-only.
     */
    resultInfo?: ResultInfo;
    /**
     * The status property
     */
    status?: OperationStatus;
}
export function createCommsOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.addLargeGalleryViewOperation":
                    return deserializeIntoAddLargeGalleryViewOperation;
                case "#microsoft.graph.cancelMediaProcessingOperation":
                    return deserializeIntoCancelMediaProcessingOperation;
                case "#microsoft.graph.inviteParticipantsOperation":
                    return deserializeIntoInviteParticipantsOperation;
                case "#microsoft.graph.muteParticipantOperation":
                    return deserializeIntoMuteParticipantOperation;
                case "#microsoft.graph.playPromptOperation":
                    return deserializeIntoPlayPromptOperation;
                case "#microsoft.graph.recordOperation":
                    return deserializeIntoRecordOperation;
                case "#microsoft.graph.startHoldMusicOperation":
                    return deserializeIntoStartHoldMusicOperation;
                case "#microsoft.graph.stopHoldMusicOperation":
                    return deserializeIntoStopHoldMusicOperation;
                case "#microsoft.graph.subscribeToToneOperation":
                    return deserializeIntoSubscribeToToneOperation;
                case "#microsoft.graph.unmuteParticipantOperation":
                    return deserializeIntoUnmuteParticipantOperation;
                case "#microsoft.graph.updateRecordingStatusOperation":
                    return deserializeIntoUpdateRecordingStatusOperation;
            }
        }
    }
    return deserializeIntoCommsOperation;
}
export function deserializeIntoCommsOperation(commsOperation: CommsOperation | undefined = {} as CommsOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(commsOperation),
        "clientContext": n => { commsOperation.clientContext = n.getStringValue(); },
        "resultInfo": n => { commsOperation.resultInfo = n.getObjectValue<ResultInfo>(createResultInfoFromDiscriminatorValue); },
        "status": n => { commsOperation.status = n.getEnumValue<OperationStatus>(OperationStatus); },
    }
}
export function serializeCommsOperation(writer: SerializationWriter, commsOperation: CommsOperation | undefined = {} as CommsOperation) : void {
    serializeEntity(writer, commsOperation)
    writer.writeStringValue("clientContext", commsOperation.clientContext);
    writer.writeObjectValue<ResultInfo>("resultInfo", commsOperation.resultInfo, serializeResultInfo);
    writer.writeEnumValue<OperationStatus>("status", commsOperation.status);
}
// tslint:enable
// eslint-enable
