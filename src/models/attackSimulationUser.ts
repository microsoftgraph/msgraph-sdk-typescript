// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttackSimulationUser extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Display name of the user.
     */
    displayName?: string;
    /**
     * Email address of the user.
     */
    email?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * This is the id property value of the user resource that represents the user in the Microsoft Entra tenant.
     */
    userId?: string;
}
export function createAttackSimulationUserFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttackSimulationUser;
}
export function deserializeIntoAttackSimulationUser(attackSimulationUser: AttackSimulationUser | undefined = {} as AttackSimulationUser) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { attackSimulationUser.displayName = n.getStringValue(); },
        "email": n => { attackSimulationUser.email = n.getStringValue(); },
        "@odata.type": n => { attackSimulationUser.odataType = n.getStringValue(); },
        "userId": n => { attackSimulationUser.userId = n.getStringValue(); },
    }
}
export function serializeAttackSimulationUser(writer: SerializationWriter, attackSimulationUser: AttackSimulationUser | undefined = {} as AttackSimulationUser) : void {
        writer.writeStringValue("displayName", attackSimulationUser.displayName);
        writer.writeStringValue("email", attackSimulationUser.email);
        writer.writeStringValue("@odata.type", attackSimulationUser.odataType);
        writer.writeStringValue("userId", attackSimulationUser.userId);
        writer.writeAdditionalData(attackSimulationUser.additionalData);
}
// tslint:enable
// eslint-enable
