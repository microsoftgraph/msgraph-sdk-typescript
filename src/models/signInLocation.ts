// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createGeoCoordinatesFromDiscriminatorValue, serializeGeoCoordinates, type GeoCoordinates } from './geoCoordinates';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSignInLocationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSignInLocation;
}
export function deserializeIntoSignInLocation(signInLocation: SignInLocation | undefined = {} as SignInLocation) : Record<string, (node: ParseNode) => void> {
    return {
        "city": n => { signInLocation.city = n.getStringValue(); },
        "countryOrRegion": n => { signInLocation.countryOrRegion = n.getStringValue(); },
        "geoCoordinates": n => { signInLocation.geoCoordinates = n.getObjectValue<GeoCoordinates>(createGeoCoordinatesFromDiscriminatorValue); },
        "@odata.type": n => { signInLocation.odataType = n.getStringValue(); },
        "state": n => { signInLocation.state = n.getStringValue(); },
    }
}
export function serializeSignInLocation(writer: SerializationWriter, signInLocation: SignInLocation | undefined = {} as SignInLocation) : void {
        writer.writeStringValue("city", signInLocation.city);
        writer.writeStringValue("countryOrRegion", signInLocation.countryOrRegion);
        writer.writeObjectValue<GeoCoordinates>("geoCoordinates", signInLocation.geoCoordinates, );
        writer.writeStringValue("@odata.type", signInLocation.odataType);
        writer.writeStringValue("state", signInLocation.state);
        writer.writeAdditionalData(signInLocation.additionalData);
}
export interface SignInLocation extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Provides the city where the sign-in originated and is determined using latitude/longitude information from the sign-in activity.
     */
    city?: string;
    /**
     * Provides the country code info (two letter code) where the sign-in originated.  This is calculated using latitude/longitude information from the sign-in activity.
     */
    countryOrRegion?: string;
    /**
     * Provides the latitude, longitude and altitude where the sign-in originated.
     */
    geoCoordinates?: GeoCoordinates;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Provides the State where the sign-in originated. This is calculated using latitude/longitude information from the sign-in activity.
     */
    state?: string;
}
// tslint:enable
// eslint-enable
