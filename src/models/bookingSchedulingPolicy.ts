// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Duration, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BookingSchedulingPolicy extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * True if to allow customers to choose a specific person for the booking.
     */
    allowStaffSelection?: boolean;
    /**
     * Maximum number of days in advance that a booking can be made. It follows the ISO 8601 format.
     */
    maximumAdvance?: Duration;
    /**
     * The minimum amount of time before which bookings and cancellations must be made. It follows the ISO 8601 format.
     */
    minimumLeadTime?: Duration;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * True to notify the business via email when a booking is created or changed. Use the email address specified in the email property of the bookingBusiness entity for the business.
     */
    sendConfirmationsToOwner?: boolean;
    /**
     * Duration of each time slot, denoted in ISO 8601 format.
     */
    timeSlotInterval?: Duration;
}
export function createBookingSchedulingPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBookingSchedulingPolicy;
}
export function deserializeIntoBookingSchedulingPolicy(bookingSchedulingPolicy: BookingSchedulingPolicy | undefined = {} as BookingSchedulingPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        "allowStaffSelection": n => { bookingSchedulingPolicy.allowStaffSelection = n.getBooleanValue(); },
        "maximumAdvance": n => { bookingSchedulingPolicy.maximumAdvance = n.getDurationValue(); },
        "minimumLeadTime": n => { bookingSchedulingPolicy.minimumLeadTime = n.getDurationValue(); },
        "@odata.type": n => { bookingSchedulingPolicy.odataType = n.getStringValue(); },
        "sendConfirmationsToOwner": n => { bookingSchedulingPolicy.sendConfirmationsToOwner = n.getBooleanValue(); },
        "timeSlotInterval": n => { bookingSchedulingPolicy.timeSlotInterval = n.getDurationValue(); },
    }
}
export function serializeBookingSchedulingPolicy(writer: SerializationWriter, bookingSchedulingPolicy: BookingSchedulingPolicy | undefined = {} as BookingSchedulingPolicy) : void {
        writer.writeBooleanValue("allowStaffSelection", bookingSchedulingPolicy.allowStaffSelection);
        writer.writeDurationValue("maximumAdvance", bookingSchedulingPolicy.maximumAdvance);
        writer.writeDurationValue("minimumLeadTime", bookingSchedulingPolicy.minimumLeadTime);
        writer.writeStringValue("@odata.type", bookingSchedulingPolicy.odataType);
        writer.writeBooleanValue("sendConfirmationsToOwner", bookingSchedulingPolicy.sendConfirmationsToOwner);
        writer.writeDurationValue("timeSlotInterval", bookingSchedulingPolicy.timeSlotInterval);
        writer.writeAdditionalData(bookingSchedulingPolicy.additionalData);
}
// tslint:enable
// eslint-enable
