// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createActivityHistoryItemFromDiscriminatorValue, serializeActivityHistoryItem, type ActivityHistoryItem } from './activityHistoryItem';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from './json';
import { Status } from './status';
import { createVisualInfoFromDiscriminatorValue, serializeVisualInfo, type VisualInfo } from './visualInfo';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserActivityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserActivity;
}
export function deserializeIntoUserActivity(userActivity: UserActivity | undefined = {} as UserActivity) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(userActivity),
        "activationUrl": n => { userActivity.activationUrl = n.getStringValue(); },
        "activitySourceHost": n => { userActivity.activitySourceHost = n.getStringValue(); },
        "appActivityId": n => { userActivity.appActivityId = n.getStringValue(); },
        "appDisplayName": n => { userActivity.appDisplayName = n.getStringValue(); },
        "contentInfo": n => { userActivity.contentInfo = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "contentUrl": n => { userActivity.contentUrl = n.getStringValue(); },
        "createdDateTime": n => { userActivity.createdDateTime = n.getDateValue(); },
        "expirationDateTime": n => { userActivity.expirationDateTime = n.getDateValue(); },
        "fallbackUrl": n => { userActivity.fallbackUrl = n.getStringValue(); },
        "historyItems": n => { userActivity.historyItems = n.getCollectionOfObjectValues<ActivityHistoryItem>(createActivityHistoryItemFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { userActivity.lastModifiedDateTime = n.getDateValue(); },
        "status": n => { userActivity.status = n.getEnumValue<Status>(Status); },
        "userTimezone": n => { userActivity.userTimezone = n.getStringValue(); },
        "visualElements": n => { userActivity.visualElements = n.getObjectValue<VisualInfo>(createVisualInfoFromDiscriminatorValue); },
    }
}
export function serializeUserActivity(writer: SerializationWriter, userActivity: UserActivity | undefined = {} as UserActivity) : void {
        serializeEntity(writer, userActivity)
        writer.writeStringValue("activationUrl", userActivity.activationUrl);
        writer.writeStringValue("activitySourceHost", userActivity.activitySourceHost);
        writer.writeStringValue("appActivityId", userActivity.appActivityId);
        writer.writeStringValue("appDisplayName", userActivity.appDisplayName);
        writer.writeObjectValue<Json>("contentInfo", userActivity.contentInfo, serializeJson);
        writer.writeStringValue("contentUrl", userActivity.contentUrl);
        writer.writeDateValue("createdDateTime", userActivity.createdDateTime);
        writer.writeDateValue("expirationDateTime", userActivity.expirationDateTime);
        writer.writeStringValue("fallbackUrl", userActivity.fallbackUrl);
        writer.writeCollectionOfObjectValues<ActivityHistoryItem>("historyItems", userActivity.historyItems, serializeActivityHistoryItem);
        writer.writeDateValue("lastModifiedDateTime", userActivity.lastModifiedDateTime);
        writer.writeEnumValue<Status>("status", userActivity.status);
        writer.writeStringValue("userTimezone", userActivity.userTimezone);
        writer.writeObjectValue<VisualInfo>("visualElements", userActivity.visualElements, serializeVisualInfo);
}
export interface UserActivity extends Entity, Parsable {
    /**
     * Required. URL used to launch the activity in the best native experience represented by the appId. Might launch a web-based app if no native app exists.
     */
    activationUrl?: string;
    /**
     * Required. URL for the domain representing the cross-platform identity mapping for the app. Mapping is stored either as a JSON file hosted on the domain or configurable via Windows Dev Center. The JSON file is named cross-platform-app-identifiers and is hosted at root of your HTTPS domain, either at the top level domain or include a sub domain. For example: https://contoso.com or https://myapp.contoso.com but NOT https://myapp.contoso.com/somepath. You must have a unique file and domain (or sub domain) per cross-platform app identity. For example, a separate file and domain is needed for Word vs. PowerPoint.
     */
    activitySourceHost?: string;
    /**
     * Required. The unique activity ID in the context of the app - supplied by caller and immutable thereafter.
     */
    appActivityId?: string;
    /**
     * Optional. Short text description of the app used to generate the activity for use in cases when the app is not installed on the userâ€™s local device.
     */
    appDisplayName?: string;
    /**
     * Optional. A custom piece of data - JSON-LD extensible description of content according to schema.org syntax.
     */
    contentInfo?: Json;
    /**
     * Optional. Used in the event the content can be rendered outside of a native or web-based app experience (for example, a pointer to an item in an RSS feed).
     */
    contentUrl?: string;
    /**
     * Set by the server. DateTime in UTC when the object was created on the server.
     */
    createdDateTime?: Date;
    /**
     * Set by the server. DateTime in UTC when the object expired on the server.
     */
    expirationDateTime?: Date;
    /**
     * Optional. URL used to launch the activity in a web-based app, if available.
     */
    fallbackUrl?: string;
    /**
     * Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.
     */
    historyItems?: ActivityHistoryItem[];
    /**
     * Set by the server. DateTime in UTC when the object was modified on the server.
     */
    lastModifiedDateTime?: Date;
    /**
     * Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored.
     */
    status?: Status;
    /**
     * Optional. The timezone in which the user's device used to generate the activity was located at activity creation time; values supplied as Olson IDs in order to support cross-platform representation.
     */
    userTimezone?: string;
    /**
     * The visualElements property
     */
    visualElements?: VisualInfo;
}
// tslint:enable
// eslint-enable
