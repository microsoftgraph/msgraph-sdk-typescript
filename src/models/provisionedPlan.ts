// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createProvisionedPlanFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoProvisionedPlan;
}
export function deserializeIntoProvisionedPlan(provisionedPlan: ProvisionedPlan | undefined = {} as ProvisionedPlan) : Record<string, (node: ParseNode) => void> {
    return {
        "capabilityStatus": n => { provisionedPlan.capabilityStatus = n.getStringValue(); },
        "@odata.type": n => { provisionedPlan.odataType = n.getStringValue(); },
        "provisioningStatus": n => { provisionedPlan.provisioningStatus = n.getStringValue(); },
        "service": n => { provisionedPlan.service = n.getStringValue(); },
    }
}
export interface ProvisionedPlan extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * For example, 'Enabled'.
     */
    capabilityStatus?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * For example, 'Success'.
     */
    provisioningStatus?: string;
    /**
     * The name of the service; for example, 'AccessControlS2S'
     */
    service?: string;
}
export function serializeProvisionedPlan(writer: SerializationWriter, provisionedPlan: ProvisionedPlan | undefined = {} as ProvisionedPlan) : void {
        writer.writeStringValue("capabilityStatus", provisionedPlan.capabilityStatus);
        writer.writeStringValue("@odata.type", provisionedPlan.odataType);
        writer.writeStringValue("provisioningStatus", provisionedPlan.provisioningStatus);
        writer.writeStringValue("service", provisionedPlan.service);
        writer.writeAdditionalData(provisionedPlan.additionalData);
}
// tslint:enable
// eslint-enable
