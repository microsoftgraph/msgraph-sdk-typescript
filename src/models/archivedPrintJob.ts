// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { PrintJobProcessingState } from './printJobProcessingState';
import { createUserIdentityFromDiscriminatorValue, serializeUserIdentity, type UserIdentity } from './userIdentity';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ArchivedPrintJob extends AdditionalDataHolder, Parsable {
    /**
     * True if the job was acquired by a printer; false otherwise. Read-only.
     */
    acquiredByPrinter?: boolean;
    /**
     * The dateTimeOffset when the job was acquired by the printer, if any. Read-only.
     */
    acquiredDateTime?: Date;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The dateTimeOffset when the job was completed, canceled or aborted. Read-only.
     */
    completionDateTime?: Date;
    /**
     * The number of copies that were printed. Read-only.
     */
    copiesPrinted?: number;
    /**
     * The user who created the print job. Read-only.
     */
    createdBy?: UserIdentity;
    /**
     * The dateTimeOffset when the job was created. Read-only.
     */
    createdDateTime?: Date;
    /**
     * The archived print job's GUID. Read-only.
     */
    id?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The printer ID that the job was queued for. Read-only.
     */
    printerId?: string;
    /**
     * The printer name that the job was queued for. Read-only.
     */
    printerName?: string;
    /**
     * The processingState property
     */
    processingState?: PrintJobProcessingState;
}
export function createArchivedPrintJobFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoArchivedPrintJob;
}
export function deserializeIntoArchivedPrintJob(archivedPrintJob: ArchivedPrintJob | undefined = {} as ArchivedPrintJob) : Record<string, (node: ParseNode) => void> {
    return {
        "acquiredByPrinter": n => { archivedPrintJob.acquiredByPrinter = n.getBooleanValue(); },
        "acquiredDateTime": n => { archivedPrintJob.acquiredDateTime = n.getDateValue(); },
        "completionDateTime": n => { archivedPrintJob.completionDateTime = n.getDateValue(); },
        "copiesPrinted": n => { archivedPrintJob.copiesPrinted = n.getNumberValue(); },
        "createdBy": n => { archivedPrintJob.createdBy = n.getObjectValue<UserIdentity>(createUserIdentityFromDiscriminatorValue); },
        "createdDateTime": n => { archivedPrintJob.createdDateTime = n.getDateValue(); },
        "id": n => { archivedPrintJob.id = n.getStringValue(); },
        "@odata.type": n => { archivedPrintJob.odataType = n.getStringValue(); },
        "printerId": n => { archivedPrintJob.printerId = n.getStringValue(); },
        "printerName": n => { archivedPrintJob.printerName = n.getStringValue(); },
        "processingState": n => { archivedPrintJob.processingState = n.getEnumValue<PrintJobProcessingState>(PrintJobProcessingState); },
    }
}
export function serializeArchivedPrintJob(writer: SerializationWriter, archivedPrintJob: ArchivedPrintJob | undefined = {} as ArchivedPrintJob) : void {
    writer.writeBooleanValue("acquiredByPrinter", archivedPrintJob.acquiredByPrinter);
    writer.writeDateValue("acquiredDateTime", archivedPrintJob.acquiredDateTime);
    writer.writeDateValue("completionDateTime", archivedPrintJob.completionDateTime);
    writer.writeNumberValue("copiesPrinted", archivedPrintJob.copiesPrinted);
    writer.writeObjectValue<UserIdentity>("createdBy", archivedPrintJob.createdBy, serializeUserIdentity);
    writer.writeDateValue("createdDateTime", archivedPrintJob.createdDateTime);
    writer.writeStringValue("id", archivedPrintJob.id);
    writer.writeStringValue("@odata.type", archivedPrintJob.odataType);
    writer.writeStringValue("printerId", archivedPrintJob.printerId);
    writer.writeStringValue("printerName", archivedPrintJob.printerName);
    writer.writeEnumValue<PrintJobProcessingState>("processingState", archivedPrintJob.processingState);
    writer.writeAdditionalData(archivedPrintJob.additionalData);
}
// tslint:enable
// eslint-enable
