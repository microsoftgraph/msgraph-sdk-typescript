// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttributeDefinitionFromDiscriminatorValue, serializeAttributeDefinition, type AttributeDefinition } from './attributeDefinition';
import { createObjectDefinitionMetadataEntryFromDiscriminatorValue, serializeObjectDefinitionMetadataEntry, type ObjectDefinitionMetadataEntry } from './objectDefinitionMetadataEntry';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createObjectDefinitionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoObjectDefinition;
}
export function deserializeIntoObjectDefinition(objectDefinition: ObjectDefinition | undefined = {} as ObjectDefinition) : Record<string, (node: ParseNode) => void> {
    return {
        "attributes": n => { objectDefinition.attributes = n.getCollectionOfObjectValues<AttributeDefinition>(createAttributeDefinitionFromDiscriminatorValue); },
        "metadata": n => { objectDefinition.metadata = n.getCollectionOfObjectValues<ObjectDefinitionMetadataEntry>(createObjectDefinitionMetadataEntryFromDiscriminatorValue); },
        "name": n => { objectDefinition.name = n.getStringValue(); },
        "@odata.type": n => { objectDefinition.odataType = n.getStringValue(); },
        "supportedApis": n => { objectDefinition.supportedApis = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface ObjectDefinition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Defines attributes of the object.
     */
    attributes?: AttributeDefinition[];
    /**
     * Metadata for the given object.
     */
    metadata?: ObjectDefinitionMetadataEntry[];
    /**
     * Name of the object. Must be unique within a directory definition. Not nullable.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The API that the provisioning service queries to retrieve data for synchronization.
     */
    supportedApis?: string[];
}
export function serializeObjectDefinition(writer: SerializationWriter, objectDefinition: ObjectDefinition | undefined = {} as ObjectDefinition) : void {
    writer.writeCollectionOfObjectValues<AttributeDefinition>("attributes", objectDefinition.attributes, serializeAttributeDefinition);
    writer.writeCollectionOfObjectValues<ObjectDefinitionMetadataEntry>("metadata", objectDefinition.metadata, serializeObjectDefinitionMetadataEntry);
    writer.writeStringValue("name", objectDefinition.name);
    writer.writeStringValue("@odata.type", objectDefinition.odataType);
    writer.writeCollectionOfPrimitiveValues<string>("supportedApis", objectDefinition.supportedApis);
    writer.writeAdditionalData(objectDefinition.additionalData);
}
// tslint:enable
// eslint-enable
