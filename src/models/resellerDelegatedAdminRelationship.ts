// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDelegatedAdminRelationship, serializeDelegatedAdminRelationship, type DelegatedAdminRelationship } from './delegatedAdminRelationship';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createResellerDelegatedAdminRelationshipFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoResellerDelegatedAdminRelationship;
}
export function deserializeIntoResellerDelegatedAdminRelationship(resellerDelegatedAdminRelationship: ResellerDelegatedAdminRelationship | undefined = {} as ResellerDelegatedAdminRelationship) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDelegatedAdminRelationship(resellerDelegatedAdminRelationship),
        "indirectProviderTenantId": n => { resellerDelegatedAdminRelationship.indirectProviderTenantId = n.getStringValue(); },
        "isPartnerConsentPending": n => { resellerDelegatedAdminRelationship.isPartnerConsentPending = n.getBooleanValue(); },
    }
}
export interface ResellerDelegatedAdminRelationship extends DelegatedAdminRelationship, Parsable {
    /**
     * The tenant ID of the indirect provider partner who created the relationship for the indirect reseller partner.
     */
    indirectProviderTenantId?: string;
    /**
     * Indicates the indirect reseller partner consent status. true indicates that the partner has yet to review the relationship; false indicates that the partner has already provided consent by approving or rejecting the relationship.
     */
    isPartnerConsentPending?: boolean;
}
export function serializeResellerDelegatedAdminRelationship(writer: SerializationWriter, resellerDelegatedAdminRelationship: ResellerDelegatedAdminRelationship | undefined = {} as ResellerDelegatedAdminRelationship) : void {
    serializeDelegatedAdminRelationship(writer, resellerDelegatedAdminRelationship)
    writer.writeStringValue("indirectProviderTenantId", resellerDelegatedAdminRelationship.indirectProviderTenantId);
    writer.writeBooleanValue("isPartnerConsentPending", resellerDelegatedAdminRelationship.isPartnerConsentPending);
}
// tslint:enable
// eslint-enable
