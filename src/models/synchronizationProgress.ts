// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSynchronizationProgressFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSynchronizationProgress;
}
export function deserializeIntoSynchronizationProgress(synchronizationProgress: SynchronizationProgress | undefined = {} as SynchronizationProgress) : Record<string, (node: ParseNode) => void> {
    return {
        "completedUnits": n => { synchronizationProgress.completedUnits = n.getNumberValue(); },
        "@odata.type": n => { synchronizationProgress.odataType = n.getStringValue(); },
        "progressObservationDateTime": n => { synchronizationProgress.progressObservationDateTime = n.getDateValue(); },
        "totalUnits": n => { synchronizationProgress.totalUnits = n.getNumberValue(); },
        "units": n => { synchronizationProgress.units = n.getStringValue(); },
    }
}
export function serializeSynchronizationProgress(writer: SerializationWriter, synchronizationProgress: SynchronizationProgress | undefined = {} as SynchronizationProgress) : void {
    writer.writeNumberValue("completedUnits", synchronizationProgress.completedUnits);
    writer.writeStringValue("@odata.type", synchronizationProgress.odataType);
    writer.writeDateValue("progressObservationDateTime", synchronizationProgress.progressObservationDateTime);
    writer.writeNumberValue("totalUnits", synchronizationProgress.totalUnits);
    writer.writeStringValue("units", synchronizationProgress.units);
    writer.writeAdditionalData(synchronizationProgress.additionalData);
}
export interface SynchronizationProgress extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The numerator of a progress ratio; the number of units of changes already processed.
     */
    completedUnits?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The time of a progress observation as an offset in minutes from UTC.
     */
    progressObservationDateTime?: Date;
    /**
     * The denominator of a progress ratio; a number of units of changes to be processed to accomplish synchronization.
     */
    totalUnits?: number;
    /**
     * An optional description of the units.
     */
    units?: string;
}
// tslint:enable
// eslint-enable
