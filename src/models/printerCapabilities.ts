// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIntegerRangeFromDiscriminatorValue, serializeIntegerRange, type IntegerRange } from './integerRange';
import { PrintColorMode } from './printColorMode';
import { PrintDuplexMode } from './printDuplexMode';
import { PrinterFeedOrientation } from './printerFeedOrientation';
import { PrintFinishing } from './printFinishing';
import { PrintMultipageLayout } from './printMultipageLayout';
import { PrintOrientation } from './printOrientation';
import { PrintQuality } from './printQuality';
import { PrintScaling } from './printScaling';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrinterCapabilitiesFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrinterCapabilities;
}
export function deserializeIntoPrinterCapabilities(printerCapabilities: PrinterCapabilities | undefined = {} as PrinterCapabilities) : Record<string, (node: ParseNode) => void> {
    return {
        "bottomMargins": n => { printerCapabilities.bottomMargins = n.getCollectionOfPrimitiveValues<number>(); },
        "collation": n => { printerCapabilities.collation = n.getBooleanValue(); },
        "colorModes": n => { printerCapabilities.colorModes = n.getCollectionOfEnumValues<PrintColorMode>(PrintColorMode); },
        "contentTypes": n => { printerCapabilities.contentTypes = n.getCollectionOfPrimitiveValues<string>(); },
        "copiesPerJob": n => { printerCapabilities.copiesPerJob = n.getObjectValue<IntegerRange>(createIntegerRangeFromDiscriminatorValue); },
        "dpis": n => { printerCapabilities.dpis = n.getCollectionOfPrimitiveValues<number>(); },
        "duplexModes": n => { printerCapabilities.duplexModes = n.getCollectionOfEnumValues<PrintDuplexMode>(PrintDuplexMode); },
        "feedOrientations": n => { printerCapabilities.feedOrientations = n.getCollectionOfEnumValues<PrinterFeedOrientation>(PrinterFeedOrientation); },
        "finishings": n => { printerCapabilities.finishings = n.getCollectionOfEnumValues<PrintFinishing>(PrintFinishing); },
        "inputBins": n => { printerCapabilities.inputBins = n.getCollectionOfPrimitiveValues<string>(); },
        "isColorPrintingSupported": n => { printerCapabilities.isColorPrintingSupported = n.getBooleanValue(); },
        "isPageRangeSupported": n => { printerCapabilities.isPageRangeSupported = n.getBooleanValue(); },
        "leftMargins": n => { printerCapabilities.leftMargins = n.getCollectionOfPrimitiveValues<number>(); },
        "mediaColors": n => { printerCapabilities.mediaColors = n.getCollectionOfPrimitiveValues<string>(); },
        "mediaSizes": n => { printerCapabilities.mediaSizes = n.getCollectionOfPrimitiveValues<string>(); },
        "mediaTypes": n => { printerCapabilities.mediaTypes = n.getCollectionOfPrimitiveValues<string>(); },
        "multipageLayouts": n => { printerCapabilities.multipageLayouts = n.getCollectionOfEnumValues<PrintMultipageLayout>(PrintMultipageLayout); },
        "@odata.type": n => { printerCapabilities.odataType = n.getStringValue(); },
        "orientations": n => { printerCapabilities.orientations = n.getCollectionOfEnumValues<PrintOrientation>(PrintOrientation); },
        "outputBins": n => { printerCapabilities.outputBins = n.getCollectionOfPrimitiveValues<string>(); },
        "pagesPerSheet": n => { printerCapabilities.pagesPerSheet = n.getCollectionOfPrimitiveValues<number>(); },
        "qualities": n => { printerCapabilities.qualities = n.getCollectionOfEnumValues<PrintQuality>(PrintQuality); },
        "rightMargins": n => { printerCapabilities.rightMargins = n.getCollectionOfPrimitiveValues<number>(); },
        "scalings": n => { printerCapabilities.scalings = n.getCollectionOfEnumValues<PrintScaling>(PrintScaling); },
        "supportsFitPdfToPage": n => { printerCapabilities.supportsFitPdfToPage = n.getBooleanValue(); },
        "topMargins": n => { printerCapabilities.topMargins = n.getCollectionOfPrimitiveValues<number>(); },
    }
}
export interface PrinterCapabilities extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A list of supported bottom margins(in microns) for the printer.
     */
    bottomMargins?: number[];
    /**
     * True if the printer supports collating when printing muliple copies of a multi-page document; false otherwise.
     */
    collation?: boolean;
    /**
     * The color modes supported by the printer. Valid values are described in the following table.
     */
    colorModes?: PrintColorMode[];
    /**
     * A list of supported content (MIME) types that the printer supports. It is not guaranteed that the Universal Print service supports printing all of these MIME types.
     */
    contentTypes?: string[];
    /**
     * The range of copies per job supported by the printer.
     */
    copiesPerJob?: IntegerRange;
    /**
     * The list of print resolutions in DPI that are supported by the printer.
     */
    dpis?: number[];
    /**
     * The list of duplex modes that are supported by the printer. Valid values are described in the following table.
     */
    duplexModes?: PrintDuplexMode[];
    /**
     * The list of feed orientations that are supported by the printer.
     */
    feedOrientations?: PrinterFeedOrientation[];
    /**
     * Finishing processes the printer supports for a printed document.
     */
    finishings?: PrintFinishing[];
    /**
     * Supported input bins for the printer.
     */
    inputBins?: string[];
    /**
     * True if color printing is supported by the printer; false otherwise. Read-only.
     */
    isColorPrintingSupported?: boolean;
    /**
     * True if the printer supports printing by page ranges; false otherwise.
     */
    isPageRangeSupported?: boolean;
    /**
     * A list of supported left margins(in microns) for the printer.
     */
    leftMargins?: number[];
    /**
     * The media (i.e., paper) colors supported by the printer.
     */
    mediaColors?: string[];
    /**
     * The media sizes supported by the printer. Supports standard size names for ISO and ANSI media sizes. Valid values are in the following table.
     */
    mediaSizes?: string[];
    /**
     * The media types supported by the printer.
     */
    mediaTypes?: string[];
    /**
     * The presentation directions supported by the printer. Supported values are described in the following table.
     */
    multipageLayouts?: PrintMultipageLayout[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The print orientations supported by the printer. Valid values are described in the following table.
     */
    orientations?: PrintOrientation[];
    /**
     * The printer's supported output bins (trays).
     */
    outputBins?: string[];
    /**
     * Supported number of Input Pages to impose upon a single Impression.
     */
    pagesPerSheet?: number[];
    /**
     * The print qualities supported by the printer.
     */
    qualities?: PrintQuality[];
    /**
     * A list of supported right margins(in microns) for the printer.
     */
    rightMargins?: number[];
    /**
     * Supported print scalings.
     */
    scalings?: PrintScaling[];
    /**
     * True if the printer supports scaling PDF pages to match the print media size; false otherwise.
     */
    supportsFitPdfToPage?: boolean;
    /**
     * A list of supported top margins(in microns) for the printer.
     */
    topMargins?: number[];
}
export function serializePrinterCapabilities(writer: SerializationWriter, printerCapabilities: PrinterCapabilities | undefined = {} as PrinterCapabilities) : void {
        writer.writeCollectionOfPrimitiveValues<number>("bottomMargins", printerCapabilities.bottomMargins);
        writer.writeBooleanValue("collation", printerCapabilities.collation);
        if(printerCapabilities.colorModes)
        writer.writeEnumValue<PrintColorMode>("colorModes", ...printerCapabilities.colorModes);
        writer.writeCollectionOfPrimitiveValues<string>("contentTypes", printerCapabilities.contentTypes);
        writer.writeObjectValue<IntegerRange>("copiesPerJob", printerCapabilities.copiesPerJob, serializeIntegerRange);
        writer.writeCollectionOfPrimitiveValues<number>("dpis", printerCapabilities.dpis);
        if(printerCapabilities.duplexModes)
        writer.writeEnumValue<PrintDuplexMode>("duplexModes", ...printerCapabilities.duplexModes);
        if(printerCapabilities.feedOrientations)
        writer.writeEnumValue<PrinterFeedOrientation>("feedOrientations", ...printerCapabilities.feedOrientations);
        if(printerCapabilities.finishings)
        writer.writeEnumValue<PrintFinishing>("finishings", ...printerCapabilities.finishings);
        writer.writeCollectionOfPrimitiveValues<string>("inputBins", printerCapabilities.inputBins);
        writer.writeBooleanValue("isColorPrintingSupported", printerCapabilities.isColorPrintingSupported);
        writer.writeBooleanValue("isPageRangeSupported", printerCapabilities.isPageRangeSupported);
        writer.writeCollectionOfPrimitiveValues<number>("leftMargins", printerCapabilities.leftMargins);
        writer.writeCollectionOfPrimitiveValues<string>("mediaColors", printerCapabilities.mediaColors);
        writer.writeCollectionOfPrimitiveValues<string>("mediaSizes", printerCapabilities.mediaSizes);
        writer.writeCollectionOfPrimitiveValues<string>("mediaTypes", printerCapabilities.mediaTypes);
        if(printerCapabilities.multipageLayouts)
        writer.writeEnumValue<PrintMultipageLayout>("multipageLayouts", ...printerCapabilities.multipageLayouts);
        writer.writeStringValue("@odata.type", printerCapabilities.odataType);
        if(printerCapabilities.orientations)
        writer.writeEnumValue<PrintOrientation>("orientations", ...printerCapabilities.orientations);
        writer.writeCollectionOfPrimitiveValues<string>("outputBins", printerCapabilities.outputBins);
        writer.writeCollectionOfPrimitiveValues<number>("pagesPerSheet", printerCapabilities.pagesPerSheet);
        if(printerCapabilities.qualities)
        writer.writeEnumValue<PrintQuality>("qualities", ...printerCapabilities.qualities);
        writer.writeCollectionOfPrimitiveValues<number>("rightMargins", printerCapabilities.rightMargins);
        if(printerCapabilities.scalings)
        writer.writeEnumValue<PrintScaling>("scalings", ...printerCapabilities.scalings);
        writer.writeBooleanValue("supportsFitPdfToPage", printerCapabilities.supportsFitPdfToPage);
        writer.writeCollectionOfPrimitiveValues<number>("topMargins", printerCapabilities.topMargins);
        writer.writeAdditionalData(printerCapabilities.additionalData);
}
// tslint:enable
// eslint-enable
