// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export function createLicenseAssignmentStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLicenseAssignmentState;
}
export function deserializeIntoLicenseAssignmentState(licenseAssignmentState: LicenseAssignmentState | undefined = {} as LicenseAssignmentState) : Record<string, (node: ParseNode) => void> {
    return {
        "assignedByGroup": n => { licenseAssignmentState.assignedByGroup = n.getStringValue(); },
        "disabledPlans": n => { licenseAssignmentState.disabledPlans = n.getCollectionOfPrimitiveValues<Guid>(); },
        "error": n => { licenseAssignmentState.errorEscaped = n.getStringValue(); },
        "lastUpdatedDateTime": n => { licenseAssignmentState.lastUpdatedDateTime = n.getDateValue(); },
        "@odata.type": n => { licenseAssignmentState.odataType = n.getStringValue(); },
        "skuId": n => { licenseAssignmentState.skuId = n.getGuidValue(); },
        "state": n => { licenseAssignmentState.state = n.getStringValue(); },
    }
}
export interface LicenseAssignmentState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The assignedByGroup property
     */
    assignedByGroup?: string;
    /**
     * The disabledPlans property
     */
    disabledPlans?: Guid[];
    /**
     * The error property
     */
    errorEscaped?: string;
    /**
     * The lastUpdatedDateTime property
     */
    lastUpdatedDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The skuId property
     */
    skuId?: Guid;
    /**
     * The state property
     */
    state?: string;
}
export function serializeLicenseAssignmentState(writer: SerializationWriter, licenseAssignmentState: LicenseAssignmentState | undefined = {} as LicenseAssignmentState) : void {
    writer.writeStringValue("assignedByGroup", licenseAssignmentState.assignedByGroup);
    writer.writeCollectionOfPrimitiveValues<Guid>("disabledPlans", licenseAssignmentState.disabledPlans);
    writer.writeStringValue("error", licenseAssignmentState.errorEscaped);
    writer.writeDateValue("lastUpdatedDateTime", licenseAssignmentState.lastUpdatedDateTime);
    writer.writeStringValue("@odata.type", licenseAssignmentState.odataType);
    writer.writeGuidValue("skuId", licenseAssignmentState.skuId);
    writer.writeStringValue("state", licenseAssignmentState.state);
    writer.writeAdditionalData(licenseAssignmentState.additionalData);
}
// tslint:enable
// eslint-enable
