// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ManagedAppDataEncryptionType } from './managedAppDataEncryptionType';
import { createManagedAppPolicyDeploymentSummaryFromDiscriminatorValue, serializeManagedAppPolicyDeploymentSummary, type ManagedAppPolicyDeploymentSummary } from './managedAppPolicyDeploymentSummary';
import { createManagedMobileAppFromDiscriminatorValue, serializeManagedMobileApp, type ManagedMobileApp } from './managedMobileApp';
import { deserializeIntoTargetedManagedAppProtection, serializeTargetedManagedAppProtection, type TargetedManagedAppProtection } from './targetedManagedAppProtection';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIosManagedAppProtectionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIosManagedAppProtection;
}
export function deserializeIntoIosManagedAppProtection(iosManagedAppProtection: IosManagedAppProtection | undefined = {} as IosManagedAppProtection) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoTargetedManagedAppProtection(iosManagedAppProtection),
        "appDataEncryptionType": n => { iosManagedAppProtection.appDataEncryptionType = n.getEnumValue<ManagedAppDataEncryptionType>(ManagedAppDataEncryptionType); },
        "apps": n => { iosManagedAppProtection.apps = n.getCollectionOfObjectValues<ManagedMobileApp>(createManagedMobileAppFromDiscriminatorValue); },
        "customBrowserProtocol": n => { iosManagedAppProtection.customBrowserProtocol = n.getStringValue(); },
        "deployedAppCount": n => { iosManagedAppProtection.deployedAppCount = n.getNumberValue(); },
        "deploymentSummary": n => { iosManagedAppProtection.deploymentSummary = n.getObjectValue<ManagedAppPolicyDeploymentSummary>(createManagedAppPolicyDeploymentSummaryFromDiscriminatorValue); },
        "faceIdBlocked": n => { iosManagedAppProtection.faceIdBlocked = n.getBooleanValue(); },
        "minimumRequiredSdkVersion": n => { iosManagedAppProtection.minimumRequiredSdkVersion = n.getStringValue(); },
    }
}
export interface IosManagedAppProtection extends Parsable, TargetedManagedAppProtection {
    /**
     * Represents the level to which app data is encrypted for managed apps
     */
    appDataEncryptionType?: ManagedAppDataEncryptionType;
    /**
     * List of apps to which the policy is deployed.
     */
    apps?: ManagedMobileApp[];
    /**
     * A custom browser protocol to open weblink on iOS. When this property is configured, ManagedBrowserToOpenLinksRequired should be true.
     */
    customBrowserProtocol?: string;
    /**
     * Count of apps to which the current policy is deployed.
     */
    deployedAppCount?: number;
    /**
     * Navigation property to deployment summary of the configuration.
     */
    deploymentSummary?: ManagedAppPolicyDeploymentSummary;
    /**
     * Indicates whether use of the FaceID is allowed in place of a pin if PinRequired is set to True.
     */
    faceIdBlocked?: boolean;
    /**
     * Versions less than the specified version will block the managed app from accessing company data.
     */
    minimumRequiredSdkVersion?: string;
}
export function serializeIosManagedAppProtection(writer: SerializationWriter, iosManagedAppProtection: IosManagedAppProtection | undefined = {} as IosManagedAppProtection) : void {
        serializeTargetedManagedAppProtection(writer, iosManagedAppProtection)
        writer.writeEnumValue<ManagedAppDataEncryptionType>("appDataEncryptionType", iosManagedAppProtection.appDataEncryptionType);
        writer.writeCollectionOfObjectValues<ManagedMobileApp>("apps", iosManagedAppProtection.apps, );
        writer.writeStringValue("customBrowserProtocol", iosManagedAppProtection.customBrowserProtocol);
        writer.writeNumberValue("deployedAppCount", iosManagedAppProtection.deployedAppCount);
        writer.writeObjectValue<ManagedAppPolicyDeploymentSummary>("deploymentSummary", iosManagedAppProtection.deploymentSummary, );
        writer.writeBooleanValue("faceIdBlocked", iosManagedAppProtection.faceIdBlocked);
        writer.writeStringValue("minimumRequiredSdkVersion", iosManagedAppProtection.minimumRequiredSdkVersion);
}
// tslint:enable
// eslint-enable
