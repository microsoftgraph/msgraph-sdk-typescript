import { deserializeIntoIpRange, serializeIpRange, type IpRange } from './ipRange';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createIPv6CidrRangeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIPv6CidrRange;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoIPv6CidrRange(iPv6CidrRange: IPv6CidrRange | undefined = {} as IPv6CidrRange) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIpRange(iPv6CidrRange),
        "cidrAddress": n => { iPv6CidrRange.cidrAddress = n.getStringValue(); },
    }
}
export interface IPv6CidrRange extends IpRange, Parsable {
    /**
     * IPv6 address in CIDR notation. Not nullable.
     */
    cidrAddress?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeIPv6CidrRange(writer: SerializationWriter, iPv6CidrRange: IPv6CidrRange | undefined = {} as IPv6CidrRange) : void {
        serializeIpRange(writer, iPv6CidrRange)
        writer.writeStringValue("cidrAddress", iPv6CidrRange.cidrAddress);
}
