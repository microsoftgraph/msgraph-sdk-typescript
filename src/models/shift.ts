// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoChangeTrackedEntity, serializeChangeTrackedEntity, type ChangeTrackedEntity } from './changeTrackedEntity';
import { createShiftItemFromDiscriminatorValue, serializeShiftItem, type ShiftItem } from './shiftItem';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createShiftFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoShift;
}
export function deserializeIntoShift(shift: Shift | undefined = {} as Shift) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoChangeTrackedEntity(shift),
        "draftShift": n => { shift.draftShift = n.getObjectValue<ShiftItem>(createShiftItemFromDiscriminatorValue); },
        "schedulingGroupId": n => { shift.schedulingGroupId = n.getStringValue(); },
        "sharedShift": n => { shift.sharedShift = n.getObjectValue<ShiftItem>(createShiftItemFromDiscriminatorValue); },
        "userId": n => { shift.userId = n.getStringValue(); },
    }
}
export function serializeShift(writer: SerializationWriter, shift: Shift | undefined = {} as Shift) : void {
    serializeChangeTrackedEntity(writer, shift)
    writer.writeObjectValue<ShiftItem>("draftShift", shift.draftShift, serializeShiftItem);
    writer.writeStringValue("schedulingGroupId", shift.schedulingGroupId);
    writer.writeObjectValue<ShiftItem>("sharedShift", shift.sharedShift, serializeShiftItem);
    writer.writeStringValue("userId", shift.userId);
}
export interface Shift extends ChangeTrackedEntity, Parsable {
    /**
     * The draft version of this shift that is viewable by managers. Required.
     */
    draftShift?: ShiftItem;
    /**
     * ID of the scheduling group the shift is part of. Required.
     */
    schedulingGroupId?: string;
    /**
     * The shared version of this shift that is viewable by both employees and managers. Required.
     */
    sharedShift?: ShiftItem;
    /**
     * ID of the user assigned to the shift. Required.
     */
    userId?: string;
}
// tslint:enable
// eslint-enable
