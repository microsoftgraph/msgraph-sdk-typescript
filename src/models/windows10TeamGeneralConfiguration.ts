// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDeviceConfiguration, serializeDeviceConfiguration, type DeviceConfiguration } from './deviceConfiguration';
import { MiracastChannel } from './miracastChannel';
import { WelcomeScreenMeetingInformation } from './welcomeScreenMeetingInformation';
import { type Parsable, type ParseNode, type SerializationWriter, type TimeOnly } from '@microsoft/kiota-abstractions';

export function createWindows10TeamGeneralConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindows10TeamGeneralConfiguration;
}
export function deserializeIntoWindows10TeamGeneralConfiguration(windows10TeamGeneralConfiguration: Windows10TeamGeneralConfiguration | undefined = {} as Windows10TeamGeneralConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceConfiguration(windows10TeamGeneralConfiguration),
        "azureOperationalInsightsBlockTelemetry": n => { windows10TeamGeneralConfiguration.azureOperationalInsightsBlockTelemetry = n.getBooleanValue(); },
        "azureOperationalInsightsWorkspaceId": n => { windows10TeamGeneralConfiguration.azureOperationalInsightsWorkspaceId = n.getStringValue(); },
        "azureOperationalInsightsWorkspaceKey": n => { windows10TeamGeneralConfiguration.azureOperationalInsightsWorkspaceKey = n.getStringValue(); },
        "connectAppBlockAutoLaunch": n => { windows10TeamGeneralConfiguration.connectAppBlockAutoLaunch = n.getBooleanValue(); },
        "maintenanceWindowBlocked": n => { windows10TeamGeneralConfiguration.maintenanceWindowBlocked = n.getBooleanValue(); },
        "maintenanceWindowDurationInHours": n => { windows10TeamGeneralConfiguration.maintenanceWindowDurationInHours = n.getNumberValue(); },
        "maintenanceWindowStartTime": n => { windows10TeamGeneralConfiguration.maintenanceWindowStartTime = n.getTimeOnlyValue(); },
        "miracastBlocked": n => { windows10TeamGeneralConfiguration.miracastBlocked = n.getBooleanValue(); },
        "miracastChannel": n => { windows10TeamGeneralConfiguration.miracastChannel = n.getEnumValue<MiracastChannel>(MiracastChannel); },
        "miracastRequirePin": n => { windows10TeamGeneralConfiguration.miracastRequirePin = n.getBooleanValue(); },
        "settingsBlockMyMeetingsAndFiles": n => { windows10TeamGeneralConfiguration.settingsBlockMyMeetingsAndFiles = n.getBooleanValue(); },
        "settingsBlockSessionResume": n => { windows10TeamGeneralConfiguration.settingsBlockSessionResume = n.getBooleanValue(); },
        "settingsBlockSigninSuggestions": n => { windows10TeamGeneralConfiguration.settingsBlockSigninSuggestions = n.getBooleanValue(); },
        "settingsDefaultVolume": n => { windows10TeamGeneralConfiguration.settingsDefaultVolume = n.getNumberValue(); },
        "settingsScreenTimeoutInMinutes": n => { windows10TeamGeneralConfiguration.settingsScreenTimeoutInMinutes = n.getNumberValue(); },
        "settingsSessionTimeoutInMinutes": n => { windows10TeamGeneralConfiguration.settingsSessionTimeoutInMinutes = n.getNumberValue(); },
        "settingsSleepTimeoutInMinutes": n => { windows10TeamGeneralConfiguration.settingsSleepTimeoutInMinutes = n.getNumberValue(); },
        "welcomeScreenBackgroundImageUrl": n => { windows10TeamGeneralConfiguration.welcomeScreenBackgroundImageUrl = n.getStringValue(); },
        "welcomeScreenBlockAutomaticWakeUp": n => { windows10TeamGeneralConfiguration.welcomeScreenBlockAutomaticWakeUp = n.getBooleanValue(); },
        "welcomeScreenMeetingInformation": n => { windows10TeamGeneralConfiguration.welcomeScreenMeetingInformation = n.getEnumValue<WelcomeScreenMeetingInformation>(WelcomeScreenMeetingInformation); },
    }
}
export function serializeWindows10TeamGeneralConfiguration(writer: SerializationWriter, windows10TeamGeneralConfiguration: Windows10TeamGeneralConfiguration | undefined = {} as Windows10TeamGeneralConfiguration) : void {
        serializeDeviceConfiguration(writer, windows10TeamGeneralConfiguration)
        writer.writeBooleanValue("azureOperationalInsightsBlockTelemetry", windows10TeamGeneralConfiguration.azureOperationalInsightsBlockTelemetry);
        writer.writeStringValue("azureOperationalInsightsWorkspaceId", windows10TeamGeneralConfiguration.azureOperationalInsightsWorkspaceId);
        writer.writeStringValue("azureOperationalInsightsWorkspaceKey", windows10TeamGeneralConfiguration.azureOperationalInsightsWorkspaceKey);
        writer.writeBooleanValue("connectAppBlockAutoLaunch", windows10TeamGeneralConfiguration.connectAppBlockAutoLaunch);
        writer.writeBooleanValue("maintenanceWindowBlocked", windows10TeamGeneralConfiguration.maintenanceWindowBlocked);
        writer.writeNumberValue("maintenanceWindowDurationInHours", windows10TeamGeneralConfiguration.maintenanceWindowDurationInHours);
        writer.writeTimeOnlyValue("maintenanceWindowStartTime", windows10TeamGeneralConfiguration.maintenanceWindowStartTime);
        writer.writeBooleanValue("miracastBlocked", windows10TeamGeneralConfiguration.miracastBlocked);
        writer.writeEnumValue<MiracastChannel>("miracastChannel", windows10TeamGeneralConfiguration.miracastChannel);
        writer.writeBooleanValue("miracastRequirePin", windows10TeamGeneralConfiguration.miracastRequirePin);
        writer.writeBooleanValue("settingsBlockMyMeetingsAndFiles", windows10TeamGeneralConfiguration.settingsBlockMyMeetingsAndFiles);
        writer.writeBooleanValue("settingsBlockSessionResume", windows10TeamGeneralConfiguration.settingsBlockSessionResume);
        writer.writeBooleanValue("settingsBlockSigninSuggestions", windows10TeamGeneralConfiguration.settingsBlockSigninSuggestions);
        writer.writeNumberValue("settingsDefaultVolume", windows10TeamGeneralConfiguration.settingsDefaultVolume);
        writer.writeNumberValue("settingsScreenTimeoutInMinutes", windows10TeamGeneralConfiguration.settingsScreenTimeoutInMinutes);
        writer.writeNumberValue("settingsSessionTimeoutInMinutes", windows10TeamGeneralConfiguration.settingsSessionTimeoutInMinutes);
        writer.writeNumberValue("settingsSleepTimeoutInMinutes", windows10TeamGeneralConfiguration.settingsSleepTimeoutInMinutes);
        writer.writeStringValue("welcomeScreenBackgroundImageUrl", windows10TeamGeneralConfiguration.welcomeScreenBackgroundImageUrl);
        writer.writeBooleanValue("welcomeScreenBlockAutomaticWakeUp", windows10TeamGeneralConfiguration.welcomeScreenBlockAutomaticWakeUp);
        writer.writeEnumValue<WelcomeScreenMeetingInformation>("welcomeScreenMeetingInformation", windows10TeamGeneralConfiguration.welcomeScreenMeetingInformation);
}
export interface Windows10TeamGeneralConfiguration extends DeviceConfiguration, Parsable {
    /**
     * Indicates whether or not to Block Azure Operational Insights.
     */
    azureOperationalInsightsBlockTelemetry?: boolean;
    /**
     * The Azure Operational Insights workspace id.
     */
    azureOperationalInsightsWorkspaceId?: string;
    /**
     * The Azure Operational Insights Workspace key.
     */
    azureOperationalInsightsWorkspaceKey?: string;
    /**
     * Specifies whether to automatically launch the Connect app whenever a projection is initiated.
     */
    connectAppBlockAutoLaunch?: boolean;
    /**
     * Indicates whether or not to Block setting a maintenance window for device updates.
     */
    maintenanceWindowBlocked?: boolean;
    /**
     * Maintenance window duration for device updates. Valid values 0 to 5
     */
    maintenanceWindowDurationInHours?: number;
    /**
     * Maintenance window start time for device updates.
     */
    maintenanceWindowStartTime?: TimeOnly;
    /**
     * Indicates whether or not to Block wireless projection.
     */
    miracastBlocked?: boolean;
    /**
     * Possible values for Miracast channel.
     */
    miracastChannel?: MiracastChannel;
    /**
     * Indicates whether or not to require a pin for wireless projection.
     */
    miracastRequirePin?: boolean;
    /**
     * Specifies whether to disable the 'My meetings and files' feature in the Start menu, which shows the signed-in user's meetings and files from Office 365.
     */
    settingsBlockMyMeetingsAndFiles?: boolean;
    /**
     * Specifies whether to allow the ability to resume a session when the session times out.
     */
    settingsBlockSessionResume?: boolean;
    /**
     * Specifies whether to disable auto-populating of the sign-in dialog with invitees from scheduled meetings.
     */
    settingsBlockSigninSuggestions?: boolean;
    /**
     * Specifies the default volume value for a new session. Permitted values are 0-100. The default is 45. Valid values 0 to 100
     */
    settingsDefaultVolume?: number;
    /**
     * Specifies the number of minutes until the Hub screen turns off.
     */
    settingsScreenTimeoutInMinutes?: number;
    /**
     * Specifies the number of minutes until the session times out.
     */
    settingsSessionTimeoutInMinutes?: number;
    /**
     * Specifies the number of minutes until the Hub enters sleep mode.
     */
    settingsSleepTimeoutInMinutes?: number;
    /**
     * The welcome screen background image URL. The URL must use the HTTPS protocol and return a PNG image.
     */
    welcomeScreenBackgroundImageUrl?: string;
    /**
     * Indicates whether or not to Block the welcome screen from waking up automatically when someone enters the room.
     */
    welcomeScreenBlockAutomaticWakeUp?: boolean;
    /**
     * Possible values for welcome screen meeting information.
     */
    welcomeScreenMeetingInformation?: WelcomeScreenMeetingInformation;
}
// tslint:enable
// eslint-enable
