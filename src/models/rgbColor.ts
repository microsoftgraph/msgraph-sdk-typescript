// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRgbColorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRgbColor;
}
export function deserializeIntoRgbColor(rgbColor: RgbColor | undefined = {} as RgbColor) : Record<string, (node: ParseNode) => void> {
    return {
        "b": n => { rgbColor.b = n.getNumberValue(); },
        "g": n => { rgbColor.g = n.getNumberValue(); },
        "@odata.type": n => { rgbColor.odataType = n.getStringValue(); },
        "r": n => { rgbColor.r = n.getNumberValue(); },
    }
}
export interface RgbColor extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Blue value
     */
    b?: number;
    /**
     * Green value
     */
    g?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Red value
     */
    r?: number;
}
export function serializeRgbColor(writer: SerializationWriter, rgbColor: RgbColor | undefined = {} as RgbColor) : void {
    writer.writeNumberValue("b", rgbColor.b);
    writer.writeNumberValue("g", rgbColor.g);
    writer.writeStringValue("@odata.type", rgbColor.odataType);
    writer.writeNumberValue("r", rgbColor.r);
    writer.writeAdditionalData(rgbColor.additionalData);
}
// tslint:enable
// eslint-enable
