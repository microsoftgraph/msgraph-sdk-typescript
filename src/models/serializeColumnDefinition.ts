import { type BooleanColumn } from './booleanColumn';
import { type CalculatedColumn } from './calculatedColumn';
import { type ChoiceColumn } from './choiceColumn';
import { type ColumnDefinition } from './columnDefinition';
import { ColumnTypes } from './columnTypes';
import { type ColumnValidation } from './columnValidation';
import { type ContentApprovalStatusColumn } from './contentApprovalStatusColumn';
import { type ContentTypeInfo } from './contentTypeInfo';
import { type CurrencyColumn } from './currencyColumn';
import { type DateTimeColumn } from './dateTimeColumn';
import { type DefaultColumnValue } from './defaultColumnValue';
import { type GeolocationColumn } from './geolocationColumn';
import { type HyperlinkOrPictureColumn } from './hyperlinkOrPictureColumn';
import { type LookupColumn } from './lookupColumn';
import { type NumberColumn } from './numberColumn';
import { type PersonOrGroupColumn } from './personOrGroupColumn';
import { serializeBooleanColumn } from './serializeBooleanColumn';
import { serializeCalculatedColumn } from './serializeCalculatedColumn';
import { serializeChoiceColumn } from './serializeChoiceColumn';
import { serializeColumnValidation } from './serializeColumnValidation';
import { serializeContentApprovalStatusColumn } from './serializeContentApprovalStatusColumn';
import { serializeContentTypeInfo } from './serializeContentTypeInfo';
import { serializeCurrencyColumn } from './serializeCurrencyColumn';
import { serializeDateTimeColumn } from './serializeDateTimeColumn';
import { serializeDefaultColumnValue } from './serializeDefaultColumnValue';
import { serializeEntity } from './serializeEntity';
import { serializeGeolocationColumn } from './serializeGeolocationColumn';
import { serializeHyperlinkOrPictureColumn } from './serializeHyperlinkOrPictureColumn';
import { serializeLookupColumn } from './serializeLookupColumn';
import { serializeNumberColumn } from './serializeNumberColumn';
import { serializePersonOrGroupColumn } from './serializePersonOrGroupColumn';
import { serializeTermColumn } from './serializeTermColumn';
import { serializeTextColumn } from './serializeTextColumn';
import { serializeThumbnailColumn } from './serializeThumbnailColumn';
import { type TermColumn } from './termColumn';
import { type TextColumn } from './textColumn';
import { type ThumbnailColumn } from './thumbnailColumn';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function serializeColumnDefinition(writer: SerializationWriter, columnDefinition: ColumnDefinition | undefined = {} as ColumnDefinition) : void {
        serializeEntity(writer, columnDefinition)
        writer.writeObjectValue<BooleanColumn>("boolean", columnDefinition.boolean, serializeBooleanColumn);
        writer.writeObjectValue<CalculatedColumn>("calculated", columnDefinition.calculated, serializeCalculatedColumn);
        writer.writeObjectValue<ChoiceColumn>("choice", columnDefinition.choice, serializeChoiceColumn);
        writer.writeStringValue("columnGroup", columnDefinition.columnGroup);
        writer.writeObjectValue<ContentApprovalStatusColumn>("contentApprovalStatus", columnDefinition.contentApprovalStatus, serializeContentApprovalStatusColumn);
        writer.writeObjectValue<CurrencyColumn>("currency", columnDefinition.currency, serializeCurrencyColumn);
        writer.writeObjectValue<DateTimeColumn>("dateTime", columnDefinition.dateTime, serializeDateTimeColumn);
        writer.writeObjectValue<DefaultColumnValue>("defaultValue", columnDefinition.defaultValue, serializeDefaultColumnValue);
        writer.writeStringValue("description", columnDefinition.description);
        writer.writeStringValue("displayName", columnDefinition.displayName);
        writer.writeBooleanValue("enforceUniqueValues", columnDefinition.enforceUniqueValues);
        writer.writeObjectValue<GeolocationColumn>("geolocation", columnDefinition.geolocation, serializeGeolocationColumn);
        writer.writeBooleanValue("hidden", columnDefinition.hidden);
        writer.writeObjectValue<HyperlinkOrPictureColumn>("hyperlinkOrPicture", columnDefinition.hyperlinkOrPicture, serializeHyperlinkOrPictureColumn);
        writer.writeBooleanValue("indexed", columnDefinition.indexed);
        writer.writeBooleanValue("isDeletable", columnDefinition.isDeletable);
        writer.writeBooleanValue("isReorderable", columnDefinition.isReorderable);
        writer.writeBooleanValue("isSealed", columnDefinition.isSealed);
        writer.writeObjectValue<LookupColumn>("lookup", columnDefinition.lookup, serializeLookupColumn);
        writer.writeStringValue("name", columnDefinition.name);
        writer.writeObjectValue<NumberColumn>("number", columnDefinition.number, serializeNumberColumn);
        writer.writeObjectValue<PersonOrGroupColumn>("personOrGroup", columnDefinition.personOrGroup, serializePersonOrGroupColumn);
        writer.writeBooleanValue("propagateChanges", columnDefinition.propagateChanges);
        writer.writeBooleanValue("readOnly", columnDefinition.readOnly);
        writer.writeBooleanValue("required", columnDefinition.required);
        writer.writeObjectValue<ColumnDefinition>("sourceColumn", columnDefinition.sourceColumn, serializeColumnDefinition);
        writer.writeObjectValue<ContentTypeInfo>("sourceContentType", columnDefinition.sourceContentType, serializeContentTypeInfo);
        writer.writeObjectValue<TermColumn>("term", columnDefinition.term, serializeTermColumn);
        writer.writeObjectValue<TextColumn>("text", columnDefinition.text, serializeTextColumn);
        writer.writeObjectValue<ThumbnailColumn>("thumbnail", columnDefinition.thumbnail, serializeThumbnailColumn);
        writer.writeEnumValue<ColumnTypes>("type", columnDefinition.type);
        writer.writeObjectValue<ColumnValidation>("validation", columnDefinition.validation, serializeColumnValidation);
}
