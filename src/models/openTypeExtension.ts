import { deserializeIntoExtension, serializeExtension, type Extension } from './extension';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createOpenTypeExtensionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOpenTypeExtension;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoOpenTypeExtension(openTypeExtension: OpenTypeExtension | undefined = {} as OpenTypeExtension) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoExtension(openTypeExtension),
        "extensionName": n => { openTypeExtension.extensionName = n.getStringValue(); },
    }
}
export interface OpenTypeExtension extends Extension, Parsable {
    /**
     * A unique text identifier for an open type data extension. Optional.
     */
    extensionName?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeOpenTypeExtension(writer: SerializationWriter, openTypeExtension: OpenTypeExtension | undefined = {} as OpenTypeExtension) : void {
        serializeExtension(writer, openTypeExtension)
        writer.writeStringValue("extensionName", openTypeExtension.extensionName);
}
