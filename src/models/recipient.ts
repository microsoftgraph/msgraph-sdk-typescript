// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAttendee } from './attendee';
import { deserializeIntoAttendeeBase } from './attendeeBase';
import { createEmailAddressFromDiscriminatorValue, serializeEmailAddress, type EmailAddress } from './emailAddress';
import { type Attendee, type AttendeeBase } from './index';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRecipientFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.attendee":
                    return deserializeIntoAttendee;
                case "#microsoft.graph.attendeeBase":
                    return deserializeIntoAttendeeBase;
            }
        }
    }
    return deserializeIntoRecipient;
}
export function deserializeIntoRecipient(recipient: Recipient | undefined = {} as Recipient) : Record<string, (node: ParseNode) => void> {
    return {
        "emailAddress": n => { recipient.emailAddress = n.getObjectValue<EmailAddress>(createEmailAddressFromDiscriminatorValue); },
        "@odata.type": n => { recipient.odataType = n.getStringValue(); },
    }
}
export interface Recipient extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The recipient's email address.
     */
    emailAddress?: EmailAddress;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeRecipient(writer: SerializationWriter, recipient: Recipient | undefined = {} as Recipient) : void {
        writer.writeObjectValue<EmailAddress>("emailAddress", recipient.emailAddress, serializeEmailAddress);
        writer.writeStringValue("@odata.type", recipient.odataType);
        writer.writeAdditionalData(recipient.additionalData);
}
// tslint:enable
// eslint-enable
