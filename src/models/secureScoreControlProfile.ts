// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createComplianceInformationFromDiscriminatorValue, serializeComplianceInformation, type ComplianceInformation } from './complianceInformation';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createSecureScoreControlStateUpdateFromDiscriminatorValue, serializeSecureScoreControlStateUpdate, type SecureScoreControlStateUpdate } from './secureScoreControlStateUpdate';
import { createSecurityVendorInformationFromDiscriminatorValue, serializeSecurityVendorInformation, type SecurityVendorInformation } from './securityVendorInformation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSecureScoreControlProfileFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSecureScoreControlProfile;
}
export function deserializeIntoSecureScoreControlProfile(secureScoreControlProfile: SecureScoreControlProfile | undefined = {} as SecureScoreControlProfile) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(secureScoreControlProfile),
        "actionType": n => { secureScoreControlProfile.actionType = n.getStringValue(); },
        "actionUrl": n => { secureScoreControlProfile.actionUrl = n.getStringValue(); },
        "azureTenantId": n => { secureScoreControlProfile.azureTenantId = n.getStringValue(); },
        "complianceInformation": n => { secureScoreControlProfile.complianceInformation = n.getCollectionOfObjectValues<ComplianceInformation>(createComplianceInformationFromDiscriminatorValue); },
        "controlCategory": n => { secureScoreControlProfile.controlCategory = n.getStringValue(); },
        "controlStateUpdates": n => { secureScoreControlProfile.controlStateUpdates = n.getCollectionOfObjectValues<SecureScoreControlStateUpdate>(createSecureScoreControlStateUpdateFromDiscriminatorValue); },
        "deprecated": n => { secureScoreControlProfile.deprecated = n.getBooleanValue(); },
        "implementationCost": n => { secureScoreControlProfile.implementationCost = n.getStringValue(); },
        "lastModifiedDateTime": n => { secureScoreControlProfile.lastModifiedDateTime = n.getDateValue(); },
        "maxScore": n => { secureScoreControlProfile.maxScore = n.getNumberValue(); },
        "rank": n => { secureScoreControlProfile.rank = n.getNumberValue(); },
        "remediation": n => { secureScoreControlProfile.remediation = n.getStringValue(); },
        "remediationImpact": n => { secureScoreControlProfile.remediationImpact = n.getStringValue(); },
        "service": n => { secureScoreControlProfile.service = n.getStringValue(); },
        "threats": n => { secureScoreControlProfile.threats = n.getCollectionOfPrimitiveValues<string>(); },
        "tier": n => { secureScoreControlProfile.tier = n.getStringValue(); },
        "title": n => { secureScoreControlProfile.title = n.getStringValue(); },
        "userImpact": n => { secureScoreControlProfile.userImpact = n.getStringValue(); },
        "vendorInformation": n => { secureScoreControlProfile.vendorInformation = n.getObjectValue<SecurityVendorInformation>(createSecurityVendorInformationFromDiscriminatorValue); },
    }
}
export interface SecureScoreControlProfile extends Entity, Parsable {
    /**
     * Control action type (Config, Review, Behavior).
     */
    actionType?: string;
    /**
     * URL to where the control can be actioned.
     */
    actionUrl?: string;
    /**
     * GUID string for tenant ID.
     */
    azureTenantId?: string;
    /**
     * The collection of compliance information associated with secure score control
     */
    complianceInformation?: ComplianceInformation[];
    /**
     * Control action category (Identity, Data, Device, Apps, Infrastructure).
     */
    controlCategory?: string;
    /**
     * Flag to indicate where the tenant has marked a control (ignored, thirdParty, reviewed) (supports update).
     */
    controlStateUpdates?: SecureScoreControlStateUpdate[];
    /**
     * Flag to indicate if a control is depreciated.
     */
    deprecated?: boolean;
    /**
     * Resource cost of implemmentating control (low, moderate, high).
     */
    implementationCost?: string;
    /**
     * Time at which the control profile entity was last modified. The Timestamp type represents date and time
     */
    lastModifiedDateTime?: Date;
    /**
     * max attainable score for the control.
     */
    maxScore?: number;
    /**
     * Microsoft's stack ranking of control.
     */
    rank?: number;
    /**
     * Description of what the control will help remediate.
     */
    remediation?: string;
    /**
     * Description of the impact on users of the remediation.
     */
    remediationImpact?: string;
    /**
     * Service that owns the control (Exchange, Sharepoint, Microsoft Entra ID).
     */
    service?: string;
    /**
     * List of threats the control mitigates (accountBreach, dataDeletion, dataExfiltration, dataSpillage,
     */
    threats?: string[];
    /**
     * The tier property
     */
    tier?: string;
    /**
     * The title property
     */
    title?: string;
    /**
     * The userImpact property
     */
    userImpact?: string;
    /**
     * The vendorInformation property
     */
    vendorInformation?: SecurityVendorInformation;
}
export function serializeSecureScoreControlProfile(writer: SerializationWriter, secureScoreControlProfile: SecureScoreControlProfile | undefined = {} as SecureScoreControlProfile) : void {
    serializeEntity(writer, secureScoreControlProfile)
    writer.writeStringValue("actionType", secureScoreControlProfile.actionType);
    writer.writeStringValue("actionUrl", secureScoreControlProfile.actionUrl);
    writer.writeStringValue("azureTenantId", secureScoreControlProfile.azureTenantId);
    writer.writeCollectionOfObjectValues<ComplianceInformation>("complianceInformation", secureScoreControlProfile.complianceInformation, serializeComplianceInformation);
    writer.writeStringValue("controlCategory", secureScoreControlProfile.controlCategory);
    writer.writeCollectionOfObjectValues<SecureScoreControlStateUpdate>("controlStateUpdates", secureScoreControlProfile.controlStateUpdates, serializeSecureScoreControlStateUpdate);
    writer.writeBooleanValue("deprecated", secureScoreControlProfile.deprecated);
    writer.writeStringValue("implementationCost", secureScoreControlProfile.implementationCost);
    writer.writeDateValue("lastModifiedDateTime", secureScoreControlProfile.lastModifiedDateTime);
    writer.writeNumberValue("maxScore", secureScoreControlProfile.maxScore);
    writer.writeNumberValue("rank", secureScoreControlProfile.rank);
    writer.writeStringValue("remediation", secureScoreControlProfile.remediation);
    writer.writeStringValue("remediationImpact", secureScoreControlProfile.remediationImpact);
    writer.writeStringValue("service", secureScoreControlProfile.service);
    writer.writeCollectionOfPrimitiveValues<string>("threats", secureScoreControlProfile.threats);
    writer.writeStringValue("tier", secureScoreControlProfile.tier);
    writer.writeStringValue("title", secureScoreControlProfile.title);
    writer.writeStringValue("userImpact", secureScoreControlProfile.userImpact);
    writer.writeObjectValue<SecurityVendorInformation>("vendorInformation", secureScoreControlProfile.vendorInformation, serializeSecurityVendorInformation);
}
// tslint:enable
// eslint-enable
