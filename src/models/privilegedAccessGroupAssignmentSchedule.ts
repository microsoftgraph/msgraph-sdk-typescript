// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from './group';
import { PrivilegedAccessGroupAssignmentType } from './privilegedAccessGroupAssignmentType';
import { createPrivilegedAccessGroupEligibilityScheduleFromDiscriminatorValue, serializePrivilegedAccessGroupEligibilitySchedule, type PrivilegedAccessGroupEligibilitySchedule } from './privilegedAccessGroupEligibilitySchedule';
import { PrivilegedAccessGroupMemberType } from './privilegedAccessGroupMemberType';
import { PrivilegedAccessGroupRelationships } from './privilegedAccessGroupRelationships';
import { deserializeIntoPrivilegedAccessSchedule, serializePrivilegedAccessSchedule, type PrivilegedAccessSchedule } from './privilegedAccessSchedule';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrivilegedAccessGroupAssignmentScheduleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrivilegedAccessGroupAssignmentSchedule;
}
export function deserializeIntoPrivilegedAccessGroupAssignmentSchedule(privilegedAccessGroupAssignmentSchedule: PrivilegedAccessGroupAssignmentSchedule | undefined = {} as PrivilegedAccessGroupAssignmentSchedule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPrivilegedAccessSchedule(privilegedAccessGroupAssignmentSchedule),
        "accessId": n => { privilegedAccessGroupAssignmentSchedule.accessId = n.getEnumValue<PrivilegedAccessGroupRelationships>(PrivilegedAccessGroupRelationships); },
        "activatedUsing": n => { privilegedAccessGroupAssignmentSchedule.activatedUsing = n.getObjectValue<PrivilegedAccessGroupEligibilitySchedule>(createPrivilegedAccessGroupEligibilityScheduleFromDiscriminatorValue); },
        "assignmentType": n => { privilegedAccessGroupAssignmentSchedule.assignmentType = n.getEnumValue<PrivilegedAccessGroupAssignmentType>(PrivilegedAccessGroupAssignmentType); },
        "group": n => { privilegedAccessGroupAssignmentSchedule.group = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "groupId": n => { privilegedAccessGroupAssignmentSchedule.groupId = n.getStringValue(); },
        "memberType": n => { privilegedAccessGroupAssignmentSchedule.memberType = n.getEnumValue<PrivilegedAccessGroupMemberType>(PrivilegedAccessGroupMemberType); },
        "principal": n => { privilegedAccessGroupAssignmentSchedule.principal = n.getObjectValue<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "principalId": n => { privilegedAccessGroupAssignmentSchedule.principalId = n.getStringValue(); },
    }
}
export interface PrivilegedAccessGroupAssignmentSchedule extends Parsable, PrivilegedAccessSchedule {
    /**
     * The identifier of the membership or ownership assignment to the group that is governed by PIM. Required. The possible values are: owner, member, unknownFutureValue. Supports $filter (eq).
     */
    accessId?: PrivilegedAccessGroupRelationships;
    /**
     * When the request activates an ownership or membership assignment in PIM for groups, this object represents the eligibility relationship. Otherwise, it is null. Supports $expand.
     */
    activatedUsing?: PrivilegedAccessGroupEligibilitySchedule;
    /**
     * Indicates whether the membership or ownership assignment for the principal is granted through activation or direct assignment. Required. The possible values are: assigned, activated, unknownFutureValue. Supports $filter (eq).
     */
    assignmentType?: PrivilegedAccessGroupAssignmentType;
    /**
     * References the group that is the scope of the membership or ownership assignment through PIM for groups. Supports $expand.
     */
    group?: Group;
    /**
     * The identifier of the group representing the scope of the membership or ownership assignment through PIM for groups. Required. Supports $filter (eq).
     */
    groupId?: string;
    /**
     * Indicates whether the assignment is derived from a direct group assignment or through a transitive assignment. The possible values are: direct, group, unknownFutureValue. Supports $filter (eq).
     */
    memberType?: PrivilegedAccessGroupMemberType;
    /**
     * References the principal that's in the scope of this membership or ownership assignment request to the group that's governed by PIM. Supports $expand.
     */
    principal?: DirectoryObject;
    /**
     * The identifier of the principal whose membership or ownership assignment is granted through PIM for groups. Required. Supports $filter (eq).
     */
    principalId?: string;
}
export function serializePrivilegedAccessGroupAssignmentSchedule(writer: SerializationWriter, privilegedAccessGroupAssignmentSchedule: PrivilegedAccessGroupAssignmentSchedule | undefined = {} as PrivilegedAccessGroupAssignmentSchedule) : void {
        serializePrivilegedAccessSchedule(writer, privilegedAccessGroupAssignmentSchedule)
        writer.writeEnumValue<PrivilegedAccessGroupRelationships>("accessId", privilegedAccessGroupAssignmentSchedule.accessId);
        writer.writeObjectValue<PrivilegedAccessGroupEligibilitySchedule>("activatedUsing", privilegedAccessGroupAssignmentSchedule.activatedUsing, serializePrivilegedAccessGroupEligibilitySchedule);
        writer.writeEnumValue<PrivilegedAccessGroupAssignmentType>("assignmentType", privilegedAccessGroupAssignmentSchedule.assignmentType);
        writer.writeObjectValue<Group>("group", privilegedAccessGroupAssignmentSchedule.group, serializeGroup);
        writer.writeStringValue("groupId", privilegedAccessGroupAssignmentSchedule.groupId);
        writer.writeEnumValue<PrivilegedAccessGroupMemberType>("memberType", privilegedAccessGroupAssignmentSchedule.memberType);
        writer.writeObjectValue<DirectoryObject>("principal", privilegedAccessGroupAssignmentSchedule.principal, serializeDirectoryObject);
        writer.writeStringValue("principalId", privilegedAccessGroupAssignmentSchedule.principalId);
}
// tslint:enable
// eslint-enable
