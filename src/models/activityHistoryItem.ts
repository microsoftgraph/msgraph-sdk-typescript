// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { Status } from './status';
import { createUserActivityFromDiscriminatorValue, serializeUserActivity, type UserActivity } from './userActivity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ActivityHistoryItem extends Entity, Parsable {
    /**
     * Optional. The duration of active user engagement. if not supplied, this is calculated from the startedDateTime and lastActiveDateTime.
     */
    activeDurationSeconds?: number;
    /**
     * The activity property
     */
    activity?: UserActivity;
    /**
     * Set by the server. DateTime in UTC when the object was created on the server.
     */
    createdDateTime?: Date;
    /**
     * Optional. UTC DateTime when the historyItem will undergo hard-delete. Can be set by the client.
     */
    expirationDateTime?: Date;
    /**
     * Optional. UTC DateTime when the historyItem (activity session) was last understood as active or finished - if null, historyItem status should be Ongoing.
     */
    lastActiveDateTime?: Date;
    /**
     * Set by the server. DateTime in UTC when the object was modified on the server.
     */
    lastModifiedDateTime?: Date;
    /**
     * Required. UTC DateTime when the historyItem (activity session) was started. Required for timeline history.
     */
    startedDateTime?: Date;
    /**
     * Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored.
     */
    status?: Status;
    /**
     * Optional. The timezone in which the user's device used to generate the activity was located at activity creation time. Values supplied as Olson IDs in order to support cross-platform representation.
     */
    userTimezone?: string;
}
export function createActivityHistoryItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoActivityHistoryItem;
}
export function deserializeIntoActivityHistoryItem(activityHistoryItem: ActivityHistoryItem | undefined = {} as ActivityHistoryItem) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(activityHistoryItem),
        "activeDurationSeconds": n => { activityHistoryItem.activeDurationSeconds = n.getNumberValue(); },
        "activity": n => { activityHistoryItem.activity = n.getObjectValue<UserActivity>(createUserActivityFromDiscriminatorValue); },
        "createdDateTime": n => { activityHistoryItem.createdDateTime = n.getDateValue(); },
        "expirationDateTime": n => { activityHistoryItem.expirationDateTime = n.getDateValue(); },
        "lastActiveDateTime": n => { activityHistoryItem.lastActiveDateTime = n.getDateValue(); },
        "lastModifiedDateTime": n => { activityHistoryItem.lastModifiedDateTime = n.getDateValue(); },
        "startedDateTime": n => { activityHistoryItem.startedDateTime = n.getDateValue(); },
        "status": n => { activityHistoryItem.status = n.getEnumValue<Status>(Status); },
        "userTimezone": n => { activityHistoryItem.userTimezone = n.getStringValue(); },
    }
}
export function serializeActivityHistoryItem(writer: SerializationWriter, activityHistoryItem: ActivityHistoryItem | undefined = {} as ActivityHistoryItem) : void {
        serializeEntity(writer, activityHistoryItem)
        writer.writeNumberValue("activeDurationSeconds", activityHistoryItem.activeDurationSeconds);
        writer.writeObjectValue<UserActivity>("activity", activityHistoryItem.activity, );
        writer.writeDateValue("createdDateTime", activityHistoryItem.createdDateTime);
        writer.writeDateValue("expirationDateTime", activityHistoryItem.expirationDateTime);
        writer.writeDateValue("lastActiveDateTime", activityHistoryItem.lastActiveDateTime);
        writer.writeDateValue("lastModifiedDateTime", activityHistoryItem.lastModifiedDateTime);
        writer.writeDateValue("startedDateTime", activityHistoryItem.startedDateTime);
        writer.writeEnumValue<Status>("status", activityHistoryItem.status);
        writer.writeStringValue("userTimezone", activityHistoryItem.userTimezone);
}
// tslint:enable
// eslint-enable
