// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttackSimulationUserFromDiscriminatorValue, serializeAttackSimulationUser, type AttackSimulationUser } from './attackSimulationUser';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttackSimulationSimulationUserCoverage extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * User in an attack simulation and training campaign.
     */
    attackSimulationUser?: AttackSimulationUser;
    /**
     * Number of link clicks in the received payloads by the user in attack simulation and training campaigns.
     */
    clickCount?: number;
    /**
     * Number of compromising actions by the user in attack simulation and training campaigns.
     */
    compromisedCount?: number;
    /**
     * Date and time of the latest attack simulation and training campaign that the user was included in.
     */
    latestSimulationDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Number of attack simulation and training campaigns that the user was included in.
     */
    simulationCount?: number;
}
export function createAttackSimulationSimulationUserCoverageFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttackSimulationSimulationUserCoverage;
}
export function deserializeIntoAttackSimulationSimulationUserCoverage(attackSimulationSimulationUserCoverage: AttackSimulationSimulationUserCoverage | undefined = {} as AttackSimulationSimulationUserCoverage) : Record<string, (node: ParseNode) => void> {
    return {
        "attackSimulationUser": n => { attackSimulationSimulationUserCoverage.attackSimulationUser = n.getObjectValue<AttackSimulationUser>(createAttackSimulationUserFromDiscriminatorValue); },
        "clickCount": n => { attackSimulationSimulationUserCoverage.clickCount = n.getNumberValue(); },
        "compromisedCount": n => { attackSimulationSimulationUserCoverage.compromisedCount = n.getNumberValue(); },
        "latestSimulationDateTime": n => { attackSimulationSimulationUserCoverage.latestSimulationDateTime = n.getDateValue(); },
        "@odata.type": n => { attackSimulationSimulationUserCoverage.odataType = n.getStringValue(); },
        "simulationCount": n => { attackSimulationSimulationUserCoverage.simulationCount = n.getNumberValue(); },
    }
}
export function serializeAttackSimulationSimulationUserCoverage(writer: SerializationWriter, attackSimulationSimulationUserCoverage: AttackSimulationSimulationUserCoverage | undefined = {} as AttackSimulationSimulationUserCoverage) : void {
    writer.writeObjectValue<AttackSimulationUser>("attackSimulationUser", attackSimulationSimulationUserCoverage.attackSimulationUser, serializeAttackSimulationUser);
    writer.writeNumberValue("clickCount", attackSimulationSimulationUserCoverage.clickCount);
    writer.writeNumberValue("compromisedCount", attackSimulationSimulationUserCoverage.compromisedCount);
    writer.writeDateValue("latestSimulationDateTime", attackSimulationSimulationUserCoverage.latestSimulationDateTime);
    writer.writeStringValue("@odata.type", attackSimulationSimulationUserCoverage.odataType);
    writer.writeNumberValue("simulationCount", attackSimulationSimulationUserCoverage.simulationCount);
    writer.writeAdditionalData(attackSimulationSimulationUserCoverage.additionalData);
}
// tslint:enable
// eslint-enable
