// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createNotebookFromDiscriminatorValue, serializeNotebook, type Notebook } from './notebook';
import { createOnenoteOperationFromDiscriminatorValue, serializeOnenoteOperation, type OnenoteOperation } from './onenoteOperation';
import { createOnenotePageFromDiscriminatorValue, serializeOnenotePage, type OnenotePage } from './onenotePage';
import { createOnenoteResourceFromDiscriminatorValue, serializeOnenoteResource, type OnenoteResource } from './onenoteResource';
import { createOnenoteSectionFromDiscriminatorValue, serializeOnenoteSection, type OnenoteSection } from './onenoteSection';
import { createSectionGroupFromDiscriminatorValue, serializeSectionGroup, type SectionGroup } from './sectionGroup';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOnenoteFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOnenote;
}
export function deserializeIntoOnenote(onenote: Onenote | undefined = {} as Onenote) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(onenote),
        "notebooks": n => { onenote.notebooks = n.getCollectionOfObjectValues<Notebook>(createNotebookFromDiscriminatorValue); },
        "operations": n => { onenote.operations = n.getCollectionOfObjectValues<OnenoteOperation>(createOnenoteOperationFromDiscriminatorValue); },
        "pages": n => { onenote.pages = n.getCollectionOfObjectValues<OnenotePage>(createOnenotePageFromDiscriminatorValue); },
        "resources": n => { onenote.resources = n.getCollectionOfObjectValues<OnenoteResource>(createOnenoteResourceFromDiscriminatorValue); },
        "sectionGroups": n => { onenote.sectionGroups = n.getCollectionOfObjectValues<SectionGroup>(createSectionGroupFromDiscriminatorValue); },
        "sections": n => { onenote.sections = n.getCollectionOfObjectValues<OnenoteSection>(createOnenoteSectionFromDiscriminatorValue); },
    }
}
export interface Onenote extends Entity, Parsable {
    /**
     * The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.
     */
    notebooks?: Notebook[];
    /**
     * The status of OneNote operations. Getting an operations collection isn't supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.
     */
    operations?: OnenoteOperation[];
    /**
     * The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.
     */
    pages?: OnenotePage[];
    /**
     * The image and other file resources in OneNote pages. Getting a resources collection isn't supported, but you can get the binary content of a specific resource. Read-only. Nullable.
     */
    resources?: OnenoteResource[];
    /**
     * The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.
     */
    sectionGroups?: SectionGroup[];
    /**
     * The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.
     */
    sections?: OnenoteSection[];
}
export function serializeOnenote(writer: SerializationWriter, onenote: Onenote | undefined = {} as Onenote) : void {
        serializeEntity(writer, onenote)
        writer.writeCollectionOfObjectValues<Notebook>("notebooks", onenote.notebooks, serializeNotebook);
        writer.writeCollectionOfObjectValues<OnenoteOperation>("operations", onenote.operations, serializeOnenoteOperation);
        writer.writeCollectionOfObjectValues<OnenotePage>("pages", onenote.pages, serializeOnenotePage);
        writer.writeCollectionOfObjectValues<OnenoteResource>("resources", onenote.resources, serializeOnenoteResource);
        writer.writeCollectionOfObjectValues<SectionGroup>("sectionGroups", onenote.sectionGroups, serializeSectionGroup);
        writer.writeCollectionOfObjectValues<OnenoteSection>("sections", onenote.sections, serializeOnenoteSection);
}
// tslint:enable
// eslint-enable
