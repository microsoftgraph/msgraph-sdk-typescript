import { deserializeIntoEventMessage, serializeEventMessage, type EventMessage } from './eventMessage';
import { ResponseType } from './responseType';
import { createTimeSlotFromDiscriminatorValue, serializeTimeSlot, type TimeSlot } from './timeSlot';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createEventMessageResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEventMessageResponse;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoEventMessageResponse(eventMessageResponse: EventMessageResponse | undefined = {} as EventMessageResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEventMessage(eventMessageResponse),
        "proposedNewTime": n => { eventMessageResponse.proposedNewTime = n.getObjectValue<TimeSlot>(createTimeSlotFromDiscriminatorValue); },
        "responseType": n => { eventMessageResponse.responseType = n.getEnumValue<ResponseType>(ResponseType); },
    }
}
export interface EventMessageResponse extends EventMessage, Parsable {
    /**
     * The proposedNewTime property
     */
    proposedNewTime?: TimeSlot;
    /**
     * The responseType property
     */
    responseType?: ResponseType;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeEventMessageResponse(writer: SerializationWriter, eventMessageResponse: EventMessageResponse | undefined = {} as EventMessageResponse) : void {
        serializeEventMessage(writer, eventMessageResponse)
        writer.writeObjectValue<TimeSlot>("proposedNewTime", eventMessageResponse.proposedNewTime, );
        writer.writeEnumValue<ResponseType>("responseType", eventMessageResponse.responseType);
}
