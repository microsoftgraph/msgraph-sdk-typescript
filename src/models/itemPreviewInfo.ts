// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createItemPreviewInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoItemPreviewInfo;
}
export function deserializeIntoItemPreviewInfo(itemPreviewInfo: ItemPreviewInfo | undefined = {} as ItemPreviewInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "getUrl": n => { itemPreviewInfo.getUrl = n.getStringValue(); },
        "@odata.type": n => { itemPreviewInfo.odataType = n.getStringValue(); },
        "postParameters": n => { itemPreviewInfo.postParameters = n.getStringValue(); },
        "postUrl": n => { itemPreviewInfo.postUrl = n.getStringValue(); },
    }
}
export interface ItemPreviewInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The getUrl property
     */
    getUrl?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The postParameters property
     */
    postParameters?: string;
    /**
     * The postUrl property
     */
    postUrl?: string;
}
export function serializeItemPreviewInfo(writer: SerializationWriter, itemPreviewInfo: ItemPreviewInfo | undefined = {} as ItemPreviewInfo) : void {
    writer.writeStringValue("getUrl", itemPreviewInfo.getUrl);
    writer.writeStringValue("@odata.type", itemPreviewInfo.odataType);
    writer.writeStringValue("postParameters", itemPreviewInfo.postParameters);
    writer.writeStringValue("postUrl", itemPreviewInfo.postUrl);
    writer.writeAdditionalData(itemPreviewInfo.additionalData);
}
// tslint:enable
// eslint-enable
