// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPublicErrorDetailFromDiscriminatorValue, serializePublicErrorDetail, type PublicErrorDetail } from './publicErrorDetail';
import { createPublicInnerErrorFromDiscriminatorValue, serializePublicInnerError, type PublicInnerError } from './publicInnerError';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPublicErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPublicError;
}
export function deserializeIntoPublicError(publicError: PublicError | undefined = {} as PublicError) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { publicError.code = n.getStringValue(); },
        "details": n => { publicError.details = n.getCollectionOfObjectValues<PublicErrorDetail>(createPublicErrorDetailFromDiscriminatorValue); },
        "innerError": n => { publicError.innerError = n.getObjectValue<PublicInnerError>(createPublicInnerErrorFromDiscriminatorValue); },
        "message": n => { publicError.message = n.getStringValue(); },
        "@odata.type": n => { publicError.odataType = n.getStringValue(); },
        "target": n => { publicError.target = n.getStringValue(); },
    }
}
export interface PublicError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents the error code.
     */
    code?: string;
    /**
     * Details of the error.
     */
    details?: PublicErrorDetail[];
    /**
     * Details of the inner error.
     */
    innerError?: PublicInnerError;
    /**
     * A non-localized message for the developer.
     */
    message?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The target of the error.
     */
    target?: string;
}
export function serializePublicError(writer: SerializationWriter, publicError: PublicError | undefined = {} as PublicError) : void {
        writer.writeStringValue("code", publicError.code);
        writer.writeCollectionOfObjectValues<PublicErrorDetail>("details", publicError.details, serializePublicErrorDetail);
        writer.writeObjectValue<PublicInnerError>("innerError", publicError.innerError, serializePublicInnerError);
        writer.writeStringValue("message", publicError.message);
        writer.writeStringValue("@odata.type", publicError.odataType);
        writer.writeStringValue("target", publicError.target);
        writer.writeAdditionalData(publicError.additionalData);
}
// tslint:enable
// eslint-enable
