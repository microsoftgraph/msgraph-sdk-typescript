// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createBookingAppointmentFromDiscriminatorValue, serializeBookingAppointment, type BookingAppointment } from './bookingAppointment';
import { createBookingCustomerBaseFromDiscriminatorValue, serializeBookingCustomerBase, type BookingCustomerBase } from './bookingCustomerBase';
import { createBookingCustomQuestionFromDiscriminatorValue, serializeBookingCustomQuestion, type BookingCustomQuestion } from './bookingCustomQuestion';
import { createBookingSchedulingPolicyFromDiscriminatorValue, serializeBookingSchedulingPolicy, type BookingSchedulingPolicy } from './bookingSchedulingPolicy';
import { createBookingServiceFromDiscriminatorValue, serializeBookingService, type BookingService } from './bookingService';
import { createBookingStaffMemberBaseFromDiscriminatorValue, serializeBookingStaffMemberBase, type BookingStaffMemberBase } from './bookingStaffMemberBase';
import { createBookingWorkHoursFromDiscriminatorValue, serializeBookingWorkHours, type BookingWorkHours } from './bookingWorkHours';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createPhysicalAddressFromDiscriminatorValue, serializePhysicalAddress, type PhysicalAddress } from './physicalAddress';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BookingBusiness extends Entity, Parsable {
    /**
     * The street address of the business. The address property, together with phone and webSiteUrl, appear in the footer of a business scheduling page. The attribute type of physicalAddress is not supported in v1.0. Internally we map the addresses to the type others.
     */
    address?: PhysicalAddress;
    /**
     * All the appointments of this business. Read-only. Nullable.
     */
    appointments?: BookingAppointment[];
    /**
     * The hours of operation for the business.
     */
    businessHours?: BookingWorkHours[];
    /**
     * The type of business.
     */
    businessType?: string;
    /**
     * The set of appointments of this business in a specified date range. Read-only. Nullable.
     */
    calendarView?: BookingAppointment[];
    /**
     * All the customers of this business. Read-only. Nullable.
     */
    customers?: BookingCustomerBase[];
    /**
     * All the custom questions of this business. Read-only. Nullable.
     */
    customQuestions?: BookingCustomQuestion[];
    /**
     * The code for the currency that the business operates in on Microsoft Bookings.
     */
    defaultCurrencyIso?: string;
    /**
     * The name of the business, which interfaces with customers. This name appears at the top of the business scheduling page.
     */
    displayName?: string;
    /**
     * The email address for the business.
     */
    email?: string;
    /**
     * The scheduling page has been made available to external customers. Use the publish and unpublish actions to set this property. Read-only.
     */
    isPublished?: boolean;
    /**
     * The language of the self-service booking page.
     */
    languageTag?: string;
    /**
     * The telephone number for the business. The phone property, together with address and webSiteUrl, appear in the footer of a business scheduling page.
     */
    phone?: string;
    /**
     * The URL for the scheduling page, which is set after you publish or unpublish the page. Read-only.
     */
    publicUrl?: string;
    /**
     * Specifies how bookings can be created for this business.
     */
    schedulingPolicy?: BookingSchedulingPolicy;
    /**
     * All the services offered by this business. Read-only. Nullable.
     */
    services?: BookingService[];
    /**
     * All the staff members that provide services in this business. Read-only. Nullable.
     */
    staffMembers?: BookingStaffMemberBase[];
    /**
     * The URL of the business web site. The webSiteUrl property, together with address, phone, appear in the footer of a business scheduling page.
     */
    webSiteUrl?: string;
}
export function createBookingBusinessFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBookingBusiness;
}
export function deserializeIntoBookingBusiness(bookingBusiness: BookingBusiness | undefined = {} as BookingBusiness) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(bookingBusiness),
        "address": n => { bookingBusiness.address = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "appointments": n => { bookingBusiness.appointments = n.getCollectionOfObjectValues<BookingAppointment>(createBookingAppointmentFromDiscriminatorValue); },
        "businessHours": n => { bookingBusiness.businessHours = n.getCollectionOfObjectValues<BookingWorkHours>(createBookingWorkHoursFromDiscriminatorValue); },
        "businessType": n => { bookingBusiness.businessType = n.getStringValue(); },
        "calendarView": n => { bookingBusiness.calendarView = n.getCollectionOfObjectValues<BookingAppointment>(createBookingAppointmentFromDiscriminatorValue); },
        "customers": n => { bookingBusiness.customers = n.getCollectionOfObjectValues<BookingCustomerBase>(createBookingCustomerBaseFromDiscriminatorValue); },
        "customQuestions": n => { bookingBusiness.customQuestions = n.getCollectionOfObjectValues<BookingCustomQuestion>(createBookingCustomQuestionFromDiscriminatorValue); },
        "defaultCurrencyIso": n => { bookingBusiness.defaultCurrencyIso = n.getStringValue(); },
        "displayName": n => { bookingBusiness.displayName = n.getStringValue(); },
        "email": n => { bookingBusiness.email = n.getStringValue(); },
        "isPublished": n => { bookingBusiness.isPublished = n.getBooleanValue(); },
        "languageTag": n => { bookingBusiness.languageTag = n.getStringValue(); },
        "phone": n => { bookingBusiness.phone = n.getStringValue(); },
        "publicUrl": n => { bookingBusiness.publicUrl = n.getStringValue(); },
        "schedulingPolicy": n => { bookingBusiness.schedulingPolicy = n.getObjectValue<BookingSchedulingPolicy>(createBookingSchedulingPolicyFromDiscriminatorValue); },
        "services": n => { bookingBusiness.services = n.getCollectionOfObjectValues<BookingService>(createBookingServiceFromDiscriminatorValue); },
        "staffMembers": n => { bookingBusiness.staffMembers = n.getCollectionOfObjectValues<BookingStaffMemberBase>(createBookingStaffMemberBaseFromDiscriminatorValue); },
        "webSiteUrl": n => { bookingBusiness.webSiteUrl = n.getStringValue(); },
    }
}
export function serializeBookingBusiness(writer: SerializationWriter, bookingBusiness: BookingBusiness | undefined = {} as BookingBusiness) : void {
        serializeEntity(writer, bookingBusiness)
        writer.writeObjectValue<PhysicalAddress>("address", bookingBusiness.address, );
        writer.writeCollectionOfObjectValues<BookingAppointment>("appointments", bookingBusiness.appointments, );
        writer.writeCollectionOfObjectValues<BookingWorkHours>("businessHours", bookingBusiness.businessHours, );
        writer.writeStringValue("businessType", bookingBusiness.businessType);
        writer.writeCollectionOfObjectValues<BookingAppointment>("calendarView", bookingBusiness.calendarView, );
        writer.writeCollectionOfObjectValues<BookingCustomerBase>("customers", bookingBusiness.customers, );
        writer.writeCollectionOfObjectValues<BookingCustomQuestion>("customQuestions", bookingBusiness.customQuestions, );
        writer.writeStringValue("defaultCurrencyIso", bookingBusiness.defaultCurrencyIso);
        writer.writeStringValue("displayName", bookingBusiness.displayName);
        writer.writeStringValue("email", bookingBusiness.email);
        writer.writeStringValue("languageTag", bookingBusiness.languageTag);
        writer.writeStringValue("phone", bookingBusiness.phone);
        writer.writeObjectValue<BookingSchedulingPolicy>("schedulingPolicy", bookingBusiness.schedulingPolicy, );
        writer.writeCollectionOfObjectValues<BookingService>("services", bookingBusiness.services, );
        writer.writeCollectionOfObjectValues<BookingStaffMemberBase>("staffMembers", bookingBusiness.staffMembers, );
        writer.writeStringValue("webSiteUrl", bookingBusiness.webSiteUrl);
}
// tslint:enable
// eslint-enable
