// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPhotoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPhoto;
}
export function deserializeIntoPhoto(photo: Photo | undefined = {} as Photo) : Record<string, (node: ParseNode) => void> {
    return {
        "cameraMake": n => { photo.cameraMake = n.getStringValue(); },
        "cameraModel": n => { photo.cameraModel = n.getStringValue(); },
        "exposureDenominator": n => { photo.exposureDenominator = n.getNumberValue(); },
        "exposureNumerator": n => { photo.exposureNumerator = n.getNumberValue(); },
        "fNumber": n => { photo.fNumber = n.getNumberValue(); },
        "focalLength": n => { photo.focalLength = n.getNumberValue(); },
        "iso": n => { photo.iso = n.getNumberValue(); },
        "@odata.type": n => { photo.odataType = n.getStringValue(); },
        "orientation": n => { photo.orientation = n.getNumberValue(); },
        "takenDateTime": n => { photo.takenDateTime = n.getDateValue(); },
    }
}
export interface Photo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Camera manufacturer. Read-only.
     */
    cameraMake?: string;
    /**
     * Camera model. Read-only.
     */
    cameraModel?: string;
    /**
     * The denominator for the exposure time fraction from the camera. Read-only.
     */
    exposureDenominator?: number;
    /**
     * The numerator for the exposure time fraction from the camera. Read-only.
     */
    exposureNumerator?: number;
    /**
     * The F-stop value from the camera. Read-only.
     */
    fNumber?: number;
    /**
     * The focal length from the camera. Read-only.
     */
    focalLength?: number;
    /**
     * The ISO value from the camera. Read-only.
     */
    iso?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The orientation value from the camera. Writable on OneDrive Personal.
     */
    orientation?: number;
    /**
     * Represents the date and time the photo was taken. Read-only.
     */
    takenDateTime?: Date;
}
export function serializePhoto(writer: SerializationWriter, photo: Photo | undefined = {} as Photo) : void {
    writer.writeStringValue("cameraMake", photo.cameraMake);
    writer.writeStringValue("cameraModel", photo.cameraModel);
    writer.writeNumberValue("exposureDenominator", photo.exposureDenominator);
    writer.writeNumberValue("exposureNumerator", photo.exposureNumerator);
    writer.writeNumberValue("fNumber", photo.fNumber);
    writer.writeNumberValue("focalLength", photo.focalLength);
    writer.writeNumberValue("iso", photo.iso);
    writer.writeStringValue("@odata.type", photo.odataType);
    writer.writeNumberValue("orientation", photo.orientation);
    writer.writeDateValue("takenDateTime", photo.takenDateTime);
    writer.writeAdditionalData(photo.additionalData);
}
// tslint:enable
// eslint-enable
