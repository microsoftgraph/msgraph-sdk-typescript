// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConditionalAccessGuestsOrExternalUsersFromDiscriminatorValue, serializeConditionalAccessGuestsOrExternalUsers, type ConditionalAccessGuestsOrExternalUsers } from './conditionalAccessGuestsOrExternalUsers';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessUsers extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Group IDs excluded from scope of policy.
     */
    excludeGroups?: string[];
    /**
     * Internal guests or external users excluded from the policy scope. Optionally populated.
     */
    excludeGuestsOrExternalUsers?: ConditionalAccessGuestsOrExternalUsers;
    /**
     * Role IDs excluded from scope of policy.
     */
    excludeRoles?: string[];
    /**
     * User IDs excluded from scope of policy and/or GuestsOrExternalUsers.
     */
    excludeUsers?: string[];
    /**
     * Group IDs in scope of policy unless explicitly excluded.
     */
    includeGroups?: string[];
    /**
     * Internal guests or external users included in the policy scope. Optionally populated.
     */
    includeGuestsOrExternalUsers?: ConditionalAccessGuestsOrExternalUsers;
    /**
     * Role IDs in scope of policy unless explicitly excluded.
     */
    includeRoles?: string[];
    /**
     * User IDs in scope of policy unless explicitly excluded, None, All, or GuestsOrExternalUsers.
     */
    includeUsers?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createConditionalAccessUsersFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessUsers;
}
export function deserializeIntoConditionalAccessUsers(conditionalAccessUsers: ConditionalAccessUsers | undefined = {} as ConditionalAccessUsers) : Record<string, (node: ParseNode) => void> {
    return {
        "excludeGroups": n => { conditionalAccessUsers.excludeGroups = n.getCollectionOfPrimitiveValues<string>(); },
        "excludeGuestsOrExternalUsers": n => { conditionalAccessUsers.excludeGuestsOrExternalUsers = n.getObjectValue<ConditionalAccessGuestsOrExternalUsers>(createConditionalAccessGuestsOrExternalUsersFromDiscriminatorValue); },
        "excludeRoles": n => { conditionalAccessUsers.excludeRoles = n.getCollectionOfPrimitiveValues<string>(); },
        "excludeUsers": n => { conditionalAccessUsers.excludeUsers = n.getCollectionOfPrimitiveValues<string>(); },
        "includeGroups": n => { conditionalAccessUsers.includeGroups = n.getCollectionOfPrimitiveValues<string>(); },
        "includeGuestsOrExternalUsers": n => { conditionalAccessUsers.includeGuestsOrExternalUsers = n.getObjectValue<ConditionalAccessGuestsOrExternalUsers>(createConditionalAccessGuestsOrExternalUsersFromDiscriminatorValue); },
        "includeRoles": n => { conditionalAccessUsers.includeRoles = n.getCollectionOfPrimitiveValues<string>(); },
        "includeUsers": n => { conditionalAccessUsers.includeUsers = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { conditionalAccessUsers.odataType = n.getStringValue(); },
    }
}
export function serializeConditionalAccessUsers(writer: SerializationWriter, conditionalAccessUsers: ConditionalAccessUsers | undefined = {} as ConditionalAccessUsers) : void {
        writer.writeCollectionOfPrimitiveValues<string>("excludeGroups", conditionalAccessUsers.excludeGroups);
        writer.writeObjectValue<ConditionalAccessGuestsOrExternalUsers>("excludeGuestsOrExternalUsers", conditionalAccessUsers.excludeGuestsOrExternalUsers, serializeConditionalAccessGuestsOrExternalUsers);
        writer.writeCollectionOfPrimitiveValues<string>("excludeRoles", conditionalAccessUsers.excludeRoles);
        writer.writeCollectionOfPrimitiveValues<string>("excludeUsers", conditionalAccessUsers.excludeUsers);
        writer.writeCollectionOfPrimitiveValues<string>("includeGroups", conditionalAccessUsers.includeGroups);
        writer.writeObjectValue<ConditionalAccessGuestsOrExternalUsers>("includeGuestsOrExternalUsers", conditionalAccessUsers.includeGuestsOrExternalUsers, serializeConditionalAccessGuestsOrExternalUsers);
        writer.writeCollectionOfPrimitiveValues<string>("includeRoles", conditionalAccessUsers.includeRoles);
        writer.writeCollectionOfPrimitiveValues<string>("includeUsers", conditionalAccessUsers.includeUsers);
        writer.writeStringValue("@odata.type", conditionalAccessUsers.odataType);
        writer.writeAdditionalData(conditionalAccessUsers.additionalData);
}
// tslint:enable
// eslint-enable
