// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { SettingSourceType } from './settingSourceType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSettingSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSettingSource;
}
export function deserializeIntoSettingSource(settingSource: SettingSource | undefined = {} as SettingSource) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { settingSource.displayName = n.getStringValue(); },
        "id": n => { settingSource.id = n.getStringValue(); },
        "@odata.type": n => { settingSource.odataType = n.getStringValue(); },
        "sourceType": n => { settingSource.sourceType = n.getEnumValue<SettingSourceType>(SettingSourceType); },
    }
}
export function serializeSettingSource(writer: SerializationWriter, settingSource: SettingSource | undefined = {} as SettingSource) : void {
    writer.writeStringValue("displayName", settingSource.displayName);
    writer.writeStringValue("id", settingSource.id);
    writer.writeStringValue("@odata.type", settingSource.odataType);
    writer.writeEnumValue<SettingSourceType>("sourceType", settingSource.sourceType);
    writer.writeAdditionalData(settingSource.additionalData);
}
export interface SettingSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Not yet documented
     */
    displayName?: string;
    /**
     * Not yet documented
     */
    id?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The sourceType property
     */
    sourceType?: SettingSourceType;
}
// tslint:enable
// eslint-enable
