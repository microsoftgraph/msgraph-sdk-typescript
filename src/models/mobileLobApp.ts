// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAndroidLobApp } from './androidLobApp';
import { type AndroidLobApp, type IosLobApp, type MacOSDmgApp, type MacOSLobApp, type Win32LobApp, type WindowsAppX, type WindowsMobileMSI, type WindowsUniversalAppX } from './index';
import { deserializeIntoIosLobApp } from './iosLobApp';
import { deserializeIntoMacOSDmgApp } from './macOSDmgApp';
import { deserializeIntoMacOSLobApp } from './macOSLobApp';
import { deserializeIntoMobileApp, serializeMobileApp, type MobileApp } from './mobileApp';
import { createMobileAppContentFromDiscriminatorValue, serializeMobileAppContent, type MobileAppContent } from './mobileAppContent';
import { deserializeIntoWin32LobApp } from './win32LobApp';
import { deserializeIntoWindowsAppX } from './windowsAppX';
import { deserializeIntoWindowsMobileMSI } from './windowsMobileMSI';
import { deserializeIntoWindowsUniversalAppX } from './windowsUniversalAppX';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMobileLobAppFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.androidLobApp":
                    return deserializeIntoAndroidLobApp;
                case "#microsoft.graph.iosLobApp":
                    return deserializeIntoIosLobApp;
                case "#microsoft.graph.macOSDmgApp":
                    return deserializeIntoMacOSDmgApp;
                case "#microsoft.graph.macOSLobApp":
                    return deserializeIntoMacOSLobApp;
                case "#microsoft.graph.win32LobApp":
                    return deserializeIntoWin32LobApp;
                case "#microsoft.graph.windowsAppX":
                    return deserializeIntoWindowsAppX;
                case "#microsoft.graph.windowsMobileMSI":
                    return deserializeIntoWindowsMobileMSI;
                case "#microsoft.graph.windowsUniversalAppX":
                    return deserializeIntoWindowsUniversalAppX;
            }
        }
    }
    return deserializeIntoMobileLobApp;
}
export function deserializeIntoMobileLobApp(mobileLobApp: MobileLobApp | undefined = {} as MobileLobApp) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMobileApp(mobileLobApp),
        "committedContentVersion": n => { mobileLobApp.committedContentVersion = n.getStringValue(); },
        "contentVersions": n => { mobileLobApp.contentVersions = n.getCollectionOfObjectValues<MobileAppContent>(createMobileAppContentFromDiscriminatorValue); },
        "fileName": n => { mobileLobApp.fileName = n.getStringValue(); },
        "size": n => { mobileLobApp.size = n.getNumberValue(); },
    }
}
export interface MobileLobApp extends MobileApp, Parsable {
    /**
     * The internal committed content version.
     */
    committedContentVersion?: string;
    /**
     * The list of content versions for this app.
     */
    contentVersions?: MobileAppContent[];
    /**
     * The name of the main Lob application file.
     */
    fileName?: string;
    /**
     * The total size, including all uploaded files.
     */
    size?: number;
}
export function serializeMobileLobApp(writer: SerializationWriter, mobileLobApp: MobileLobApp | undefined = {} as MobileLobApp) : void {
    serializeMobileApp(writer, mobileLobApp)
    writer.writeStringValue("committedContentVersion", mobileLobApp.committedContentVersion);
    writer.writeCollectionOfObjectValues<MobileAppContent>("contentVersions", mobileLobApp.contentVersions, serializeMobileAppContent);
    writer.writeStringValue("fileName", mobileLobApp.fileName);
    writer.writeNumberValue("size", mobileLobApp.size);
}
// tslint:enable
// eslint-enable
