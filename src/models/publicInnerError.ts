// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPublicErrorDetailFromDiscriminatorValue, serializePublicErrorDetail, type PublicErrorDetail } from './publicErrorDetail';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPublicInnerErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPublicInnerError;
}
export function deserializeIntoPublicInnerError(publicInnerError: PublicInnerError | undefined = {} as PublicInnerError) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { publicInnerError.code = n.getStringValue(); },
        "details": n => { publicInnerError.details = n.getCollectionOfObjectValues<PublicErrorDetail>(createPublicErrorDetailFromDiscriminatorValue); },
        "message": n => { publicInnerError.message = n.getStringValue(); },
        "@odata.type": n => { publicInnerError.odataType = n.getStringValue(); },
        "target": n => { publicInnerError.target = n.getStringValue(); },
    }
}
export interface PublicInnerError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error code.
     */
    code?: string;
    /**
     * A collection of error details.
     */
    details?: PublicErrorDetail[];
    /**
     * The error message.
     */
    message?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The target of the error.
     */
    target?: string;
}
export function serializePublicInnerError(writer: SerializationWriter, publicInnerError: PublicInnerError | undefined = {} as PublicInnerError) : void {
        writer.writeStringValue("code", publicInnerError.code);
        writer.writeCollectionOfObjectValues<PublicErrorDetail>("details", publicInnerError.details, );
        writer.writeStringValue("message", publicInnerError.message);
        writer.writeStringValue("@odata.type", publicInnerError.odataType);
        writer.writeStringValue("target", publicInnerError.target);
        writer.writeAdditionalData(publicInnerError.additionalData);
}
// tslint:enable
// eslint-enable
