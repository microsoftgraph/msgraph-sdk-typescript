// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoIpRange, serializeIpRange, type IpRange } from './ipRange';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIPv4CidrRangeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIPv4CidrRange;
}
export function deserializeIntoIPv4CidrRange(iPv4CidrRange: IPv4CidrRange | undefined = {} as IPv4CidrRange) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIpRange(iPv4CidrRange),
        "cidrAddress": n => { iPv4CidrRange.cidrAddress = n.getStringValue(); },
    }
}
export interface IPv4CidrRange extends IpRange, Parsable {
    /**
     * IPv4 address in CIDR notation. Not nullable.
     */
    cidrAddress?: string;
}
export function serializeIPv4CidrRange(writer: SerializationWriter, iPv4CidrRange: IPv4CidrRange | undefined = {} as IPv4CidrRange) : void {
    serializeIpRange(writer, iPv4CidrRange)
    writer.writeStringValue("cidrAddress", iPv4CidrRange.cidrAddress);
}
// tslint:enable
// eslint-enable
