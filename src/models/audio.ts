// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Audio extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The title of the album for this audio file.
     */
    album?: string;
    /**
     * The artist named on the album for the audio file.
     */
    albumArtist?: string;
    /**
     * The performing artist for the audio file.
     */
    artist?: string;
    /**
     * Bitrate expressed in kbps.
     */
    bitrate?: number;
    /**
     * The name of the composer of the audio file.
     */
    composers?: string;
    /**
     * Copyright information for the audio file.
     */
    copyright?: string;
    /**
     * The number of the disc this audio file came from.
     */
    disc?: number;
    /**
     * The total number of discs in this album.
     */
    discCount?: number;
    /**
     * Duration of the audio file, expressed in milliseconds
     */
    duration?: number;
    /**
     * The genre of this audio file.
     */
    genre?: string;
    /**
     * Indicates if the file is protected with digital rights management.
     */
    hasDrm?: boolean;
    /**
     * Indicates if the file is encoded with a variable bitrate.
     */
    isVariableBitrate?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The title of the audio file.
     */
    title?: string;
    /**
     * The number of the track on the original disc for this audio file.
     */
    track?: number;
    /**
     * The total number of tracks on the original disc for this audio file.
     */
    trackCount?: number;
    /**
     * The year the audio file was recorded.
     */
    year?: number;
}
export function createAudioFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAudio;
}
export function deserializeIntoAudio(audio: Audio | undefined = {} as Audio) : Record<string, (node: ParseNode) => void> {
    return {
        "album": n => { audio.album = n.getStringValue(); },
        "albumArtist": n => { audio.albumArtist = n.getStringValue(); },
        "artist": n => { audio.artist = n.getStringValue(); },
        "bitrate": n => { audio.bitrate = n.getNumberValue(); },
        "composers": n => { audio.composers = n.getStringValue(); },
        "copyright": n => { audio.copyright = n.getStringValue(); },
        "disc": n => { audio.disc = n.getNumberValue(); },
        "discCount": n => { audio.discCount = n.getNumberValue(); },
        "duration": n => { audio.duration = n.getNumberValue(); },
        "genre": n => { audio.genre = n.getStringValue(); },
        "hasDrm": n => { audio.hasDrm = n.getBooleanValue(); },
        "isVariableBitrate": n => { audio.isVariableBitrate = n.getBooleanValue(); },
        "@odata.type": n => { audio.odataType = n.getStringValue(); },
        "title": n => { audio.title = n.getStringValue(); },
        "track": n => { audio.track = n.getNumberValue(); },
        "trackCount": n => { audio.trackCount = n.getNumberValue(); },
        "year": n => { audio.year = n.getNumberValue(); },
    }
}
export function serializeAudio(writer: SerializationWriter, audio: Audio | undefined = {} as Audio) : void {
        writer.writeStringValue("album", audio.album);
        writer.writeStringValue("albumArtist", audio.albumArtist);
        writer.writeStringValue("artist", audio.artist);
        writer.writeNumberValue("bitrate", audio.bitrate);
        writer.writeStringValue("composers", audio.composers);
        writer.writeStringValue("copyright", audio.copyright);
        writer.writeNumberValue("disc", audio.disc);
        writer.writeNumberValue("discCount", audio.discCount);
        writer.writeNumberValue("duration", audio.duration);
        writer.writeStringValue("genre", audio.genre);
        writer.writeBooleanValue("hasDrm", audio.hasDrm);
        writer.writeBooleanValue("isVariableBitrate", audio.isVariableBitrate);
        writer.writeStringValue("@odata.type", audio.odataType);
        writer.writeStringValue("title", audio.title);
        writer.writeNumberValue("track", audio.track);
        writer.writeNumberValue("trackCount", audio.trackCount);
        writer.writeNumberValue("year", audio.year);
        writer.writeAdditionalData(audio.additionalData);
}
// tslint:enable
// eslint-enable
