// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentityUserFlowAttributeFromDiscriminatorValue, serializeIdentityUserFlowAttribute, type IdentityUserFlowAttribute } from './identityUserFlowAttribute';
import { IdentityUserFlowAttributeInputType } from './identityUserFlowAttributeInputType';
import { createUserAttributeValuesItemFromDiscriminatorValue, serializeUserAttributeValuesItem, type UserAttributeValuesItem } from './userAttributeValuesItem';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIdentityUserFlowAttributeAssignmentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIdentityUserFlowAttributeAssignment;
}
export function deserializeIntoIdentityUserFlowAttributeAssignment(identityUserFlowAttributeAssignment: IdentityUserFlowAttributeAssignment | undefined = {} as IdentityUserFlowAttributeAssignment) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(identityUserFlowAttributeAssignment),
        "displayName": n => { identityUserFlowAttributeAssignment.displayName = n.getStringValue(); },
        "isOptional": n => { identityUserFlowAttributeAssignment.isOptional = n.getBooleanValue(); },
        "requiresVerification": n => { identityUserFlowAttributeAssignment.requiresVerification = n.getBooleanValue(); },
        "userAttribute": n => { identityUserFlowAttributeAssignment.userAttribute = n.getObjectValue<IdentityUserFlowAttribute>(createIdentityUserFlowAttributeFromDiscriminatorValue); },
        "userAttributeValues": n => { identityUserFlowAttributeAssignment.userAttributeValues = n.getCollectionOfObjectValues<UserAttributeValuesItem>(createUserAttributeValuesItemFromDiscriminatorValue); },
        "userInputType": n => { identityUserFlowAttributeAssignment.userInputType = n.getEnumValue<IdentityUserFlowAttributeInputType>(IdentityUserFlowAttributeInputType); },
    }
}
export interface IdentityUserFlowAttributeAssignment extends Entity, Parsable {
    /**
     * The display name of the identityUserFlowAttribute within a user flow.
     */
    displayName?: string;
    /**
     * Determines whether the identityUserFlowAttribute is optional. true means the user doesn't have to provide a value. false means the user can't complete sign-up without providing a value.
     */
    isOptional?: boolean;
    /**
     * Determines whether the identityUserFlowAttribute requires verification, and is only used for verifying the user's phone number or email address.
     */
    requiresVerification?: boolean;
    /**
     * The user attribute that you want to add to your user flow.
     */
    userAttribute?: IdentityUserFlowAttribute;
    /**
     * The input options for the user flow attribute. Only applicable when the userInputType is radioSingleSelect, dropdownSingleSelect, or checkboxMultiSelect.
     */
    userAttributeValues?: UserAttributeValuesItem[];
    /**
     * The userInputType property
     */
    userInputType?: IdentityUserFlowAttributeInputType;
}
export function serializeIdentityUserFlowAttributeAssignment(writer: SerializationWriter, identityUserFlowAttributeAssignment: IdentityUserFlowAttributeAssignment | undefined = {} as IdentityUserFlowAttributeAssignment) : void {
        serializeEntity(writer, identityUserFlowAttributeAssignment)
        writer.writeStringValue("displayName", identityUserFlowAttributeAssignment.displayName);
        writer.writeBooleanValue("isOptional", identityUserFlowAttributeAssignment.isOptional);
        writer.writeBooleanValue("requiresVerification", identityUserFlowAttributeAssignment.requiresVerification);
        writer.writeObjectValue<IdentityUserFlowAttribute>("userAttribute", identityUserFlowAttributeAssignment.userAttribute, );
        writer.writeCollectionOfObjectValues<UserAttributeValuesItem>("userAttributeValues", identityUserFlowAttributeAssignment.userAttributeValues, );
        writer.writeEnumValue<IdentityUserFlowAttributeInputType>("userInputType", identityUserFlowAttributeAssignment.userInputType);
}
// tslint:enable
// eslint-enable
