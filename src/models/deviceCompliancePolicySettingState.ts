// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ComplianceStatus } from './complianceStatus';
import { createSettingSourceFromDiscriminatorValue, serializeSettingSource, type SettingSource } from './settingSource';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceCompliancePolicySettingStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceCompliancePolicySettingState;
}
export function deserializeIntoDeviceCompliancePolicySettingState(deviceCompliancePolicySettingState: DeviceCompliancePolicySettingState | undefined = {} as DeviceCompliancePolicySettingState) : Record<string, (node: ParseNode) => void> {
    return {
        "currentValue": n => { deviceCompliancePolicySettingState.currentValue = n.getStringValue(); },
        "errorCode": n => { deviceCompliancePolicySettingState.errorCode = n.getNumberValue(); },
        "errorDescription": n => { deviceCompliancePolicySettingState.errorDescription = n.getStringValue(); },
        "instanceDisplayName": n => { deviceCompliancePolicySettingState.instanceDisplayName = n.getStringValue(); },
        "@odata.type": n => { deviceCompliancePolicySettingState.odataType = n.getStringValue(); },
        "setting": n => { deviceCompliancePolicySettingState.setting = n.getStringValue(); },
        "settingName": n => { deviceCompliancePolicySettingState.settingName = n.getStringValue(); },
        "sources": n => { deviceCompliancePolicySettingState.sources = n.getCollectionOfObjectValues<SettingSource>(createSettingSourceFromDiscriminatorValue); },
        "state": n => { deviceCompliancePolicySettingState.state = n.getEnumValue<ComplianceStatus>(ComplianceStatus); },
        "userEmail": n => { deviceCompliancePolicySettingState.userEmail = n.getStringValue(); },
        "userId": n => { deviceCompliancePolicySettingState.userId = n.getStringValue(); },
        "userName": n => { deviceCompliancePolicySettingState.userName = n.getStringValue(); },
        "userPrincipalName": n => { deviceCompliancePolicySettingState.userPrincipalName = n.getStringValue(); },
    }
}
export interface DeviceCompliancePolicySettingState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Current value of setting on device
     */
    currentValue?: string;
    /**
     * Error code for the setting
     */
    errorCode?: number;
    /**
     * Error description
     */
    errorDescription?: string;
    /**
     * Name of setting instance that is being reported.
     */
    instanceDisplayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The setting that is being reported
     */
    setting?: string;
    /**
     * Localized/user friendly setting name that is being reported
     */
    settingName?: string;
    /**
     * Contributing policies
     */
    sources?: SettingSource[];
    /**
     * The state property
     */
    state?: ComplianceStatus;
    /**
     * UserEmail
     */
    userEmail?: string;
    /**
     * UserId
     */
    userId?: string;
    /**
     * UserName
     */
    userName?: string;
    /**
     * UserPrincipalName.
     */
    userPrincipalName?: string;
}
export function serializeDeviceCompliancePolicySettingState(writer: SerializationWriter, deviceCompliancePolicySettingState: DeviceCompliancePolicySettingState | undefined = {} as DeviceCompliancePolicySettingState) : void {
        writer.writeStringValue("currentValue", deviceCompliancePolicySettingState.currentValue);
        writer.writeNumberValue("errorCode", deviceCompliancePolicySettingState.errorCode);
        writer.writeStringValue("errorDescription", deviceCompliancePolicySettingState.errorDescription);
        writer.writeStringValue("instanceDisplayName", deviceCompliancePolicySettingState.instanceDisplayName);
        writer.writeStringValue("@odata.type", deviceCompliancePolicySettingState.odataType);
        writer.writeStringValue("setting", deviceCompliancePolicySettingState.setting);
        writer.writeStringValue("settingName", deviceCompliancePolicySettingState.settingName);
        writer.writeCollectionOfObjectValues<SettingSource>("sources", deviceCompliancePolicySettingState.sources, );
        writer.writeEnumValue<ComplianceStatus>("state", deviceCompliancePolicySettingState.state);
        writer.writeStringValue("userEmail", deviceCompliancePolicySettingState.userEmail);
        writer.writeStringValue("userId", deviceCompliancePolicySettingState.userId);
        writer.writeStringValue("userName", deviceCompliancePolicySettingState.userName);
        writer.writeStringValue("userPrincipalName", deviceCompliancePolicySettingState.userPrincipalName);
        writer.writeAdditionalData(deviceCompliancePolicySettingState.additionalData);
}
// tslint:enable
// eslint-enable
