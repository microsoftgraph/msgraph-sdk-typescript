// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoConditionalAccessSessionControl, serializeConditionalAccessSessionControl, type ConditionalAccessSessionControl } from './conditionalAccessSessionControl';
import { SignInFrequencyAuthenticationType } from './signInFrequencyAuthenticationType';
import { SignInFrequencyInterval } from './signInFrequencyInterval';
import { SigninFrequencyType } from './signinFrequencyType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSignInFrequencySessionControlFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSignInFrequencySessionControl;
}
export function deserializeIntoSignInFrequencySessionControl(signInFrequencySessionControl: SignInFrequencySessionControl | undefined = {} as SignInFrequencySessionControl) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoConditionalAccessSessionControl(signInFrequencySessionControl),
        "authenticationType": n => { signInFrequencySessionControl.authenticationType = n.getEnumValue<SignInFrequencyAuthenticationType>(SignInFrequencyAuthenticationType); },
        "frequencyInterval": n => { signInFrequencySessionControl.frequencyInterval = n.getEnumValue<SignInFrequencyInterval>(SignInFrequencyInterval); },
        "type": n => { signInFrequencySessionControl.type = n.getEnumValue<SigninFrequencyType>(SigninFrequencyType); },
        "value": n => { signInFrequencySessionControl.value = n.getNumberValue(); },
    }
}
export function serializeSignInFrequencySessionControl(writer: SerializationWriter, signInFrequencySessionControl: SignInFrequencySessionControl | undefined = {} as SignInFrequencySessionControl) : void {
        serializeConditionalAccessSessionControl(writer, signInFrequencySessionControl)
        writer.writeEnumValue<SignInFrequencyAuthenticationType>("authenticationType", signInFrequencySessionControl.authenticationType);
        writer.writeEnumValue<SignInFrequencyInterval>("frequencyInterval", signInFrequencySessionControl.frequencyInterval);
        writer.writeEnumValue<SigninFrequencyType>("type", signInFrequencySessionControl.type);
        writer.writeNumberValue("value", signInFrequencySessionControl.value);
}
export interface SignInFrequencySessionControl extends ConditionalAccessSessionControl, Parsable {
    /**
     * The possible values are primaryAndSecondaryAuthentication, secondaryAuthentication, unknownFutureValue.
     */
    authenticationType?: SignInFrequencyAuthenticationType;
    /**
     * The possible values are timeBased, everyTime, unknownFutureValue.
     */
    frequencyInterval?: SignInFrequencyInterval;
    /**
     * Possible values are: days, hours.
     */
    type?: SigninFrequencyType;
    /**
     * The number of days or hours.
     */
    value?: number;
}
// tslint:enable
// eslint-enable
