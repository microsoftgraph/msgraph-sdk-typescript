// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createWorkbookChartDataLabelFormatFromDiscriminatorValue, serializeWorkbookChartDataLabelFormat, type WorkbookChartDataLabelFormat } from './workbookChartDataLabelFormat';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookChartDataLabelsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookChartDataLabels;
}
export function deserializeIntoWorkbookChartDataLabels(workbookChartDataLabels: WorkbookChartDataLabels | undefined = {} as WorkbookChartDataLabels) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartDataLabels),
        "format": n => { workbookChartDataLabels.format = n.getObjectValue<WorkbookChartDataLabelFormat>(createWorkbookChartDataLabelFormatFromDiscriminatorValue); },
        "position": n => { workbookChartDataLabels.position = n.getStringValue(); },
        "separator": n => { workbookChartDataLabels.separator = n.getStringValue(); },
        "showBubbleSize": n => { workbookChartDataLabels.showBubbleSize = n.getBooleanValue(); },
        "showCategoryName": n => { workbookChartDataLabels.showCategoryName = n.getBooleanValue(); },
        "showLegendKey": n => { workbookChartDataLabels.showLegendKey = n.getBooleanValue(); },
        "showPercentage": n => { workbookChartDataLabels.showPercentage = n.getBooleanValue(); },
        "showSeriesName": n => { workbookChartDataLabels.showSeriesName = n.getBooleanValue(); },
        "showValue": n => { workbookChartDataLabels.showValue = n.getBooleanValue(); },
    }
}
export function serializeWorkbookChartDataLabels(writer: SerializationWriter, workbookChartDataLabels: WorkbookChartDataLabels | undefined = {} as WorkbookChartDataLabels) : void {
        serializeEntity(writer, workbookChartDataLabels)
        writer.writeObjectValue<WorkbookChartDataLabelFormat>("format", workbookChartDataLabels.format, serializeWorkbookChartDataLabelFormat);
        writer.writeStringValue("position", workbookChartDataLabels.position);
        writer.writeStringValue("separator", workbookChartDataLabels.separator);
        writer.writeBooleanValue("showBubbleSize", workbookChartDataLabels.showBubbleSize);
        writer.writeBooleanValue("showCategoryName", workbookChartDataLabels.showCategoryName);
        writer.writeBooleanValue("showLegendKey", workbookChartDataLabels.showLegendKey);
        writer.writeBooleanValue("showPercentage", workbookChartDataLabels.showPercentage);
        writer.writeBooleanValue("showSeriesName", workbookChartDataLabels.showSeriesName);
        writer.writeBooleanValue("showValue", workbookChartDataLabels.showValue);
}
export interface WorkbookChartDataLabels extends Entity, Parsable {
    /**
     * Represents the format of chart data labels, which includes fill and font formatting. Read-only.
     */
    format?: WorkbookChartDataLabelFormat;
    /**
     * DataLabelPosition value that represents the position of the data label. The possible values are: None, Center, InsideEnd, InsideBase, OutsideEnd, Left, Right, Top, Bottom, BestFit, Callout.
     */
    position?: string;
    /**
     * String representing the separator used for the data labels on a chart.
     */
    separator?: string;
    /**
     * Boolean value representing if the data label bubble size is visible or not.
     */
    showBubbleSize?: boolean;
    /**
     * Boolean value representing if the data label category name is visible or not.
     */
    showCategoryName?: boolean;
    /**
     * Boolean value representing if the data label legend key is visible or not.
     */
    showLegendKey?: boolean;
    /**
     * Boolean value representing if the data label percentage is visible or not.
     */
    showPercentage?: boolean;
    /**
     * Boolean value representing if the data label series name is visible or not.
     */
    showSeriesName?: boolean;
    /**
     * Boolean value representing if the data label value is visible or not.
     */
    showValue?: boolean;
}
// tslint:enable
// eslint-enable
