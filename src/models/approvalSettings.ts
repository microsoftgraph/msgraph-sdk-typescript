// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createUnifiedApprovalStageFromDiscriminatorValue, serializeUnifiedApprovalStage, type UnifiedApprovalStage } from './unifiedApprovalStage';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ApprovalSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * One of SingleStage, Serial, Parallel, NoApproval (default). NoApproval is used when isApprovalRequired is false.
     */
    approvalMode?: string;
    /**
     * If approval is required, the one or two elements of this collection define each of the stages of approval. An empty array if no approval is required.
     */
    approvalStages?: UnifiedApprovalStage[];
    /**
     * Indicates whether approval is required for requests in this policy.
     */
    isApprovalRequired?: boolean;
    /**
     * Indicates whether approval is required for a user to extend their assignment.
     */
    isApprovalRequiredForExtension?: boolean;
    /**
     * Indicates whether the requestor is required to supply a justification in their request.
     */
    isRequestorJustificationRequired?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createApprovalSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoApprovalSettings;
}
export function deserializeIntoApprovalSettings(approvalSettings: ApprovalSettings | undefined = {} as ApprovalSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "approvalMode": n => { approvalSettings.approvalMode = n.getStringValue(); },
        "approvalStages": n => { approvalSettings.approvalStages = n.getCollectionOfObjectValues<UnifiedApprovalStage>(createUnifiedApprovalStageFromDiscriminatorValue); },
        "isApprovalRequired": n => { approvalSettings.isApprovalRequired = n.getBooleanValue(); },
        "isApprovalRequiredForExtension": n => { approvalSettings.isApprovalRequiredForExtension = n.getBooleanValue(); },
        "isRequestorJustificationRequired": n => { approvalSettings.isRequestorJustificationRequired = n.getBooleanValue(); },
        "@odata.type": n => { approvalSettings.odataType = n.getStringValue(); },
    }
}
export function serializeApprovalSettings(writer: SerializationWriter, approvalSettings: ApprovalSettings | undefined = {} as ApprovalSettings) : void {
        writer.writeStringValue("approvalMode", approvalSettings.approvalMode);
        writer.writeCollectionOfObjectValues<UnifiedApprovalStage>("approvalStages", approvalSettings.approvalStages, serializeUnifiedApprovalStage);
        writer.writeBooleanValue("isApprovalRequired", approvalSettings.isApprovalRequired);
        writer.writeBooleanValue("isApprovalRequiredForExtension", approvalSettings.isApprovalRequiredForExtension);
        writer.writeBooleanValue("isRequestorJustificationRequired", approvalSettings.isRequestorJustificationRequired);
        writer.writeStringValue("@odata.type", approvalSettings.odataType);
        writer.writeAdditionalData(approvalSettings.additionalData);
}
// tslint:enable
// eslint-enable
