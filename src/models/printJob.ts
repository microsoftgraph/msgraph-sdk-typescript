// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createPrintDocumentFromDiscriminatorValue, serializePrintDocument, type PrintDocument } from './printDocument';
import { createPrintJobConfigurationFromDiscriminatorValue, serializePrintJobConfiguration, type PrintJobConfiguration } from './printJobConfiguration';
import { createPrintJobStatusFromDiscriminatorValue, serializePrintJobStatus, type PrintJobStatus } from './printJobStatus';
import { createPrintTaskFromDiscriminatorValue, serializePrintTask, type PrintTask } from './printTask';
import { createUserIdentityFromDiscriminatorValue, serializeUserIdentity, type UserIdentity } from './userIdentity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrintJobFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrintJob;
}
export function deserializeIntoPrintJob(printJob: PrintJob | undefined = {} as PrintJob) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(printJob),
        "configuration": n => { printJob.configuration = n.getObjectValue<PrintJobConfiguration>(createPrintJobConfigurationFromDiscriminatorValue); },
        "createdBy": n => { printJob.createdBy = n.getObjectValue<UserIdentity>(createUserIdentityFromDiscriminatorValue); },
        "createdDateTime": n => { printJob.createdDateTime = n.getDateValue(); },
        "documents": n => { printJob.documents = n.getCollectionOfObjectValues<PrintDocument>(createPrintDocumentFromDiscriminatorValue); },
        "isFetchable": n => { printJob.isFetchable = n.getBooleanValue(); },
        "redirectedFrom": n => { printJob.redirectedFrom = n.getStringValue(); },
        "redirectedTo": n => { printJob.redirectedTo = n.getStringValue(); },
        "status": n => { printJob.status = n.getObjectValue<PrintJobStatus>(createPrintJobStatusFromDiscriminatorValue); },
        "tasks": n => { printJob.tasks = n.getCollectionOfObjectValues<PrintTask>(createPrintTaskFromDiscriminatorValue); },
    }
}
export interface PrintJob extends Entity, Parsable {
    /**
     * The configuration property
     */
    configuration?: PrintJobConfiguration;
    /**
     * The createdBy property
     */
    createdBy?: UserIdentity;
    /**
     * The DateTimeOffset when the job was created. Read-only.
     */
    createdDateTime?: Date;
    /**
     * The documents property
     */
    documents?: PrintDocument[];
    /**
     * If true, document can be fetched by printer.
     */
    isFetchable?: boolean;
    /**
     * Contains the source job URL, if the job has been redirected from another printer.
     */
    redirectedFrom?: string;
    /**
     * Contains the destination job URL, if the job has been redirected to another printer.
     */
    redirectedTo?: string;
    /**
     * The status property
     */
    status?: PrintJobStatus;
    /**
     * A list of printTasks that were triggered by this print job.
     */
    tasks?: PrintTask[];
}
export function serializePrintJob(writer: SerializationWriter, printJob: PrintJob | undefined = {} as PrintJob) : void {
        serializeEntity(writer, printJob)
        writer.writeObjectValue<PrintJobConfiguration>("configuration", printJob.configuration, );
        writer.writeObjectValue<UserIdentity>("createdBy", printJob.createdBy, );
        writer.writeDateValue("createdDateTime", printJob.createdDateTime);
        writer.writeCollectionOfObjectValues<PrintDocument>("documents", printJob.documents, );
        writer.writeBooleanValue("isFetchable", printJob.isFetchable);
        writer.writeStringValue("redirectedFrom", printJob.redirectedFrom);
        writer.writeStringValue("redirectedTo", printJob.redirectedTo);
        writer.writeObjectValue<PrintJobStatus>("status", printJob.status, );
        writer.writeCollectionOfObjectValues<PrintTask>("tasks", printJob.tasks, );
}
// tslint:enable
// eslint-enable
