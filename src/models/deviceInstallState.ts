// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { InstallState } from './installState';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceInstallStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceInstallState;
}
export function deserializeIntoDeviceInstallState(deviceInstallState: DeviceInstallState | undefined = {} as DeviceInstallState) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceInstallState),
        "deviceId": n => { deviceInstallState.deviceId = n.getStringValue(); },
        "deviceName": n => { deviceInstallState.deviceName = n.getStringValue(); },
        "errorCode": n => { deviceInstallState.errorCode = n.getStringValue(); },
        "installState": n => { deviceInstallState.installState = n.getEnumValue<InstallState>(InstallState); },
        "lastSyncDateTime": n => { deviceInstallState.lastSyncDateTime = n.getDateValue(); },
        "osDescription": n => { deviceInstallState.osDescription = n.getStringValue(); },
        "osVersion": n => { deviceInstallState.osVersion = n.getStringValue(); },
        "userName": n => { deviceInstallState.userName = n.getStringValue(); },
    }
}
export interface DeviceInstallState extends Entity, Parsable {
    /**
     * Device Id.
     */
    deviceId?: string;
    /**
     * Device name.
     */
    deviceName?: string;
    /**
     * The error code for install failures.
     */
    errorCode?: string;
    /**
     * Possible values for install state.
     */
    installState?: InstallState;
    /**
     * Last sync date and time.
     */
    lastSyncDateTime?: Date;
    /**
     * OS Description.
     */
    osDescription?: string;
    /**
     * OS Version.
     */
    osVersion?: string;
    /**
     * Device User Name.
     */
    userName?: string;
}
export function serializeDeviceInstallState(writer: SerializationWriter, deviceInstallState: DeviceInstallState | undefined = {} as DeviceInstallState) : void {
    serializeEntity(writer, deviceInstallState)
    writer.writeStringValue("deviceId", deviceInstallState.deviceId);
    writer.writeStringValue("deviceName", deviceInstallState.deviceName);
    writer.writeStringValue("errorCode", deviceInstallState.errorCode);
    writer.writeEnumValue<InstallState>("installState", deviceInstallState.installState);
    writer.writeDateValue("lastSyncDateTime", deviceInstallState.lastSyncDateTime);
    writer.writeStringValue("osDescription", deviceInstallState.osDescription);
    writer.writeStringValue("osVersion", deviceInstallState.osVersion);
    writer.writeStringValue("userName", deviceInstallState.userName);
}
// tslint:enable
// eslint-enable
