// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createInvestigationSecurityStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoInvestigationSecurityState;
}
export function deserializeIntoInvestigationSecurityState(investigationSecurityState: InvestigationSecurityState | undefined = {} as InvestigationSecurityState) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { investigationSecurityState.name = n.getStringValue(); },
        "@odata.type": n => { investigationSecurityState.odataType = n.getStringValue(); },
        "status": n => { investigationSecurityState.status = n.getStringValue(); },
    }
}
export interface InvestigationSecurityState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name property
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The status property
     */
    status?: string;
}
export function serializeInvestigationSecurityState(writer: SerializationWriter, investigationSecurityState: InvestigationSecurityState | undefined = {} as InvestigationSecurityState) : void {
    writer.writeStringValue("name", investigationSecurityState.name);
    writer.writeStringValue("@odata.type", investigationSecurityState.odataType);
    writer.writeStringValue("status", investigationSecurityState.status);
    writer.writeAdditionalData(investigationSecurityState.additionalData);
}
// tslint:enable
// eslint-enable
