// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createMobileContainedAppFromDiscriminatorValue, serializeMobileContainedApp, type MobileContainedApp } from './mobileContainedApp';
import { deserializeIntoMobileLobApp, serializeMobileLobApp, type MobileLobApp } from './mobileLobApp';
import { WindowsArchitecture } from './windowsArchitecture';
import { WindowsDeviceType } from './windowsDeviceType';
import { createWindowsMinimumOperatingSystemFromDiscriminatorValue, serializeWindowsMinimumOperatingSystem, type WindowsMinimumOperatingSystem } from './windowsMinimumOperatingSystem';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindowsUniversalAppXFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindowsUniversalAppX;
}
export function deserializeIntoWindowsUniversalAppX(windowsUniversalAppX: WindowsUniversalAppX | undefined = {} as WindowsUniversalAppX) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMobileLobApp(windowsUniversalAppX),
        "applicableArchitectures": n => { windowsUniversalAppX.applicableArchitectures = n.getCollectionOfEnumValues<WindowsArchitecture>(WindowsArchitecture); },
        "applicableDeviceTypes": n => { windowsUniversalAppX.applicableDeviceTypes = n.getCollectionOfEnumValues<WindowsDeviceType>(WindowsDeviceType); },
        "committedContainedApps": n => { windowsUniversalAppX.committedContainedApps = n.getCollectionOfObjectValues<MobileContainedApp>(createMobileContainedAppFromDiscriminatorValue); },
        "identityName": n => { windowsUniversalAppX.identityName = n.getStringValue(); },
        "identityPublisherHash": n => { windowsUniversalAppX.identityPublisherHash = n.getStringValue(); },
        "identityResourceIdentifier": n => { windowsUniversalAppX.identityResourceIdentifier = n.getStringValue(); },
        "identityVersion": n => { windowsUniversalAppX.identityVersion = n.getStringValue(); },
        "isBundle": n => { windowsUniversalAppX.isBundle = n.getBooleanValue(); },
        "minimumSupportedOperatingSystem": n => { windowsUniversalAppX.minimumSupportedOperatingSystem = n.getObjectValue<WindowsMinimumOperatingSystem>(createWindowsMinimumOperatingSystemFromDiscriminatorValue); },
    }
}
export function serializeWindowsUniversalAppX(writer: SerializationWriter, windowsUniversalAppX: WindowsUniversalAppX | undefined = {} as WindowsUniversalAppX) : void {
    serializeMobileLobApp(writer, windowsUniversalAppX)
    writer.writeEnumValue<WindowsArchitecture[]>("applicableArchitectures", windowsUniversalAppX.applicableArchitectures);
    writer.writeEnumValue<WindowsDeviceType[]>("applicableDeviceTypes", windowsUniversalAppX.applicableDeviceTypes);
    writer.writeCollectionOfObjectValues<MobileContainedApp>("committedContainedApps", windowsUniversalAppX.committedContainedApps, serializeMobileContainedApp);
    writer.writeStringValue("identityName", windowsUniversalAppX.identityName);
    writer.writeStringValue("identityPublisherHash", windowsUniversalAppX.identityPublisherHash);
    writer.writeStringValue("identityResourceIdentifier", windowsUniversalAppX.identityResourceIdentifier);
    writer.writeStringValue("identityVersion", windowsUniversalAppX.identityVersion);
    writer.writeBooleanValue("isBundle", windowsUniversalAppX.isBundle);
    writer.writeObjectValue<WindowsMinimumOperatingSystem>("minimumSupportedOperatingSystem", windowsUniversalAppX.minimumSupportedOperatingSystem, serializeWindowsMinimumOperatingSystem);
}
export interface WindowsUniversalAppX extends MobileLobApp, Parsable {
    /**
     * Contains properties for Windows architecture.
     */
    applicableArchitectures?: WindowsArchitecture[];
    /**
     * Contains properties for Windows device type. Multiple values can be selected. Default value is `none`.
     */
    applicableDeviceTypes?: WindowsDeviceType[];
    /**
     * The collection of contained apps in the committed mobileAppContent of a windowsUniversalAppX app.
     */
    committedContainedApps?: MobileContainedApp[];
    /**
     * The Identity Name.
     */
    identityName?: string;
    /**
     * The Identity Publisher Hash.
     */
    identityPublisherHash?: string;
    /**
     * The Identity Resource Identifier.
     */
    identityResourceIdentifier?: string;
    /**
     * The identity version.
     */
    identityVersion?: string;
    /**
     * Whether or not the app is a bundle.
     */
    isBundle?: boolean;
    /**
     * The minimum operating system required for a Windows mobile app.
     */
    minimumSupportedOperatingSystem?: WindowsMinimumOperatingSystem;
}
// tslint:enable
// eslint-enable
