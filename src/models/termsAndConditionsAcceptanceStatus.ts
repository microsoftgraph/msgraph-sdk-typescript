// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createTermsAndConditionsFromDiscriminatorValue, serializeTermsAndConditions, type TermsAndConditions } from './termsAndConditions';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTermsAndConditionsAcceptanceStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTermsAndConditionsAcceptanceStatus;
}
export function deserializeIntoTermsAndConditionsAcceptanceStatus(termsAndConditionsAcceptanceStatus: TermsAndConditionsAcceptanceStatus | undefined = {} as TermsAndConditionsAcceptanceStatus) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(termsAndConditionsAcceptanceStatus),
        "acceptedDateTime": n => { termsAndConditionsAcceptanceStatus.acceptedDateTime = n.getDateValue(); },
        "acceptedVersion": n => { termsAndConditionsAcceptanceStatus.acceptedVersion = n.getNumberValue(); },
        "termsAndConditions": n => { termsAndConditionsAcceptanceStatus.termsAndConditions = n.getObjectValue<TermsAndConditions>(createTermsAndConditionsFromDiscriminatorValue); },
        "userDisplayName": n => { termsAndConditionsAcceptanceStatus.userDisplayName = n.getStringValue(); },
        "userPrincipalName": n => { termsAndConditionsAcceptanceStatus.userPrincipalName = n.getStringValue(); },
    }
}
export function serializeTermsAndConditionsAcceptanceStatus(writer: SerializationWriter, termsAndConditionsAcceptanceStatus: TermsAndConditionsAcceptanceStatus | undefined = {} as TermsAndConditionsAcceptanceStatus) : void {
    serializeEntity(writer, termsAndConditionsAcceptanceStatus)
    writer.writeDateValue("acceptedDateTime", termsAndConditionsAcceptanceStatus.acceptedDateTime);
    writer.writeNumberValue("acceptedVersion", termsAndConditionsAcceptanceStatus.acceptedVersion);
    writer.writeObjectValue<TermsAndConditions>("termsAndConditions", termsAndConditionsAcceptanceStatus.termsAndConditions, serializeTermsAndConditions);
    writer.writeStringValue("userDisplayName", termsAndConditionsAcceptanceStatus.userDisplayName);
    writer.writeStringValue("userPrincipalName", termsAndConditionsAcceptanceStatus.userPrincipalName);
}
export interface TermsAndConditionsAcceptanceStatus extends Entity, Parsable {
    /**
     * DateTime when the terms were last accepted by the user.
     */
    acceptedDateTime?: Date;
    /**
     * Most recent version number of the T&C accepted by the user.
     */
    acceptedVersion?: number;
    /**
     * Navigation link to the terms and conditions that are assigned.
     */
    termsAndConditions?: TermsAndConditions;
    /**
     * Display name of the user whose acceptance the entity represents.
     */
    userDisplayName?: string;
    /**
     * The userPrincipalName of the User that accepted the term.
     */
    userPrincipalName?: string;
}
// tslint:enable
// eslint-enable
