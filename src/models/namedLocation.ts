// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoCountryNamedLocation } from './countryNamedLocation';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type CountryNamedLocation, type IpNamedLocation } from './index';
import { deserializeIntoIpNamedLocation } from './ipNamedLocation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createNamedLocationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.countryNamedLocation":
                    return deserializeIntoCountryNamedLocation;
                case "#microsoft.graph.ipNamedLocation":
                    return deserializeIntoIpNamedLocation;
            }
        }
    }
    return deserializeIntoNamedLocation;
}
export function deserializeIntoNamedLocation(namedLocation: NamedLocation | undefined = {} as NamedLocation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(namedLocation),
        "createdDateTime": n => { namedLocation.createdDateTime = n.getDateValue(); },
        "displayName": n => { namedLocation.displayName = n.getStringValue(); },
        "modifiedDateTime": n => { namedLocation.modifiedDateTime = n.getDateValue(); },
    }
}
export interface NamedLocation extends Entity, Parsable {
    /**
     * The Timestamp type represents creation date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    createdDateTime?: Date;
    /**
     * Human-readable name of the location.
     */
    displayName?: string;
    /**
     * The Timestamp type represents last modified date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    modifiedDateTime?: Date;
}
export function serializeNamedLocation(writer: SerializationWriter, namedLocation: NamedLocation | undefined = {} as NamedLocation) : void {
    serializeEntity(writer, namedLocation)
    writer.writeDateValue("createdDateTime", namedLocation.createdDateTime);
    writer.writeStringValue("displayName", namedLocation.displayName);
    writer.writeDateValue("modifiedDateTime", namedLocation.modifiedDateTime);
}
// tslint:enable
// eslint-enable
