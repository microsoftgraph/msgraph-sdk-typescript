import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createUnifiedRoleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRole;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoUnifiedRole(unifiedRole: UnifiedRole | undefined = {} as UnifiedRole) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { unifiedRole.odataType = n.getStringValue(); },
        "roleDefinitionId": n => { unifiedRole.roleDefinitionId = n.getStringValue(); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeUnifiedRole(writer: SerializationWriter, unifiedRole: UnifiedRole | undefined = {} as UnifiedRole) : void {
        writer.writeStringValue("@odata.type", unifiedRole.odataType);
        writer.writeStringValue("roleDefinitionId", unifiedRole.roleDefinitionId);
        writer.writeAdditionalData(unifiedRole.additionalData);
}
export interface UnifiedRole extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The unified role definition ID of the directory role. Refer to unifiedRoleDefinition resource.
     */
    roleDefinitionId?: string;
}
