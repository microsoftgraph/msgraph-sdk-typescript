// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTelecomExpenseManagementPartnerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTelecomExpenseManagementPartner;
}
export function deserializeIntoTelecomExpenseManagementPartner(telecomExpenseManagementPartner: TelecomExpenseManagementPartner | undefined = {} as TelecomExpenseManagementPartner) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(telecomExpenseManagementPartner),
        "appAuthorized": n => { telecomExpenseManagementPartner.appAuthorized = n.getBooleanValue(); },
        "displayName": n => { telecomExpenseManagementPartner.displayName = n.getStringValue(); },
        "enabled": n => { telecomExpenseManagementPartner.enabled = n.getBooleanValue(); },
        "lastConnectionDateTime": n => { telecomExpenseManagementPartner.lastConnectionDateTime = n.getDateValue(); },
        "url": n => { telecomExpenseManagementPartner.url = n.getStringValue(); },
    }
}
export function serializeTelecomExpenseManagementPartner(writer: SerializationWriter, telecomExpenseManagementPartner: TelecomExpenseManagementPartner | undefined = {} as TelecomExpenseManagementPartner) : void {
        serializeEntity(writer, telecomExpenseManagementPartner)
        writer.writeBooleanValue("appAuthorized", telecomExpenseManagementPartner.appAuthorized);
        writer.writeStringValue("displayName", telecomExpenseManagementPartner.displayName);
        writer.writeBooleanValue("enabled", telecomExpenseManagementPartner.enabled);
        writer.writeDateValue("lastConnectionDateTime", telecomExpenseManagementPartner.lastConnectionDateTime);
        writer.writeStringValue("url", telecomExpenseManagementPartner.url);
}
export interface TelecomExpenseManagementPartner extends Entity, Parsable {
    /**
     * Whether the partner's AAD app has been authorized to access Intune.
     */
    appAuthorized?: boolean;
    /**
     * Display name of the TEM partner.
     */
    displayName?: string;
    /**
     * Whether Intune's connection to the TEM service is currently enabled or disabled.
     */
    enabled?: boolean;
    /**
     * Timestamp of the last request sent to Intune by the TEM partner.
     */
    lastConnectionDateTime?: Date;
    /**
     * URL of the TEM partner's administrative control panel, where an administrator can configure their TEM service.
     */
    url?: string;
}
// tslint:enable
// eslint-enable
