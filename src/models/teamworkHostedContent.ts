// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoChatMessageHostedContent } from './chatMessageHostedContent';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type ChatMessageHostedContent } from './index';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTeamworkHostedContentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.chatMessageHostedContent":
                    return deserializeIntoChatMessageHostedContent;
            }
        }
    }
    return deserializeIntoTeamworkHostedContent;
}
export function deserializeIntoTeamworkHostedContent(teamworkHostedContent: TeamworkHostedContent | undefined = {} as TeamworkHostedContent) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(teamworkHostedContent),
        "contentBytes": n => { teamworkHostedContent.contentBytes = n.getStringValue(); },
        "contentType": n => { teamworkHostedContent.contentType = n.getStringValue(); },
    }
}
export function serializeTeamworkHostedContent(writer: SerializationWriter, teamworkHostedContent: TeamworkHostedContent | undefined = {} as TeamworkHostedContent) : void {
    serializeEntity(writer, teamworkHostedContent)
    writer.writeStringValue("contentBytes", teamworkHostedContent.contentBytes);
    writer.writeStringValue("contentType", teamworkHostedContent.contentType);
}
export interface TeamworkHostedContent extends Entity, Parsable {
    /**
     * Write only. Bytes for the hosted content (such as images).
     */
    contentBytes?: string;
    /**
     * Write only. Content type. such as image/png, image/jpg.
     */
    contentType?: string;
}
// tslint:enable
// eslint-enable
