// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAccessPackageFromDiscriminatorValue, serializeAccessPackage, type AccessPackage } from './accessPackage';
import { createAccessPackageAssignmentPolicyFromDiscriminatorValue, serializeAccessPackageAssignmentPolicy, type AccessPackageAssignmentPolicy } from './accessPackageAssignmentPolicy';
import { AccessPackageAssignmentState } from './accessPackageAssignmentState';
import { createAccessPackageSubjectFromDiscriminatorValue, serializeAccessPackageSubject, type AccessPackageSubject } from './accessPackageSubject';
import { createCustomExtensionCalloutInstanceFromDiscriminatorValue, serializeCustomExtensionCalloutInstance, type CustomExtensionCalloutInstance } from './customExtensionCalloutInstance';
import { createEntitlementManagementScheduleFromDiscriminatorValue, serializeEntitlementManagementSchedule, type EntitlementManagementSchedule } from './entitlementManagementSchedule';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageAssignment extends Entity, Parsable {
    /**
     * Read-only. Nullable. Supports $filter (eq) on the id property and $expand query parameters.
     */
    accessPackage?: AccessPackage;
    /**
     * Read-only. Supports $filter (eq) on the id property and $expand query parameters.
     */
    assignmentPolicy?: AccessPackageAssignmentPolicy;
    /**
     * Information about all the custom extension calls that were made during the access package assignment workflow.
     */
    customExtensionCalloutInstances?: CustomExtensionCalloutInstance[];
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    expiredDateTime?: Date;
    /**
     * When the access assignment is to be in place. Read-only.
     */
    schedule?: EntitlementManagementSchedule;
    /**
     * The state of the access package assignment. The possible values are: delivering, partiallyDelivered, delivered, expired, deliveryFailed, unknownFutureValue. Read-only. Supports $filter (eq).
     */
    state?: AccessPackageAssignmentState;
    /**
     * More information about the assignment lifecycle.  Possible values include Delivering, Delivered, NearExpiry1DayNotificationTriggered, or ExpiredNotificationTriggered.  Read-only.
     */
    status?: string;
    /**
     * The subject of the access package assignment. Read-only. Nullable. Supports $expand. Supports $filter (eq) on objectId.
     */
    target?: AccessPackageSubject;
}
export function createAccessPackageAssignmentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessPackageAssignment;
}
export function deserializeIntoAccessPackageAssignment(accessPackageAssignment: AccessPackageAssignment | undefined = {} as AccessPackageAssignment) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(accessPackageAssignment),
        "accessPackage": n => { accessPackageAssignment.accessPackage = n.getObjectValue<AccessPackage>(createAccessPackageFromDiscriminatorValue); },
        "assignmentPolicy": n => { accessPackageAssignment.assignmentPolicy = n.getObjectValue<AccessPackageAssignmentPolicy>(createAccessPackageAssignmentPolicyFromDiscriminatorValue); },
        "customExtensionCalloutInstances": n => { accessPackageAssignment.customExtensionCalloutInstances = n.getCollectionOfObjectValues<CustomExtensionCalloutInstance>(createCustomExtensionCalloutInstanceFromDiscriminatorValue); },
        "expiredDateTime": n => { accessPackageAssignment.expiredDateTime = n.getDateValue(); },
        "schedule": n => { accessPackageAssignment.schedule = n.getObjectValue<EntitlementManagementSchedule>(createEntitlementManagementScheduleFromDiscriminatorValue); },
        "state": n => { accessPackageAssignment.state = n.getEnumValue<AccessPackageAssignmentState>(AccessPackageAssignmentState); },
        "status": n => { accessPackageAssignment.status = n.getStringValue(); },
        "target": n => { accessPackageAssignment.target = n.getObjectValue<AccessPackageSubject>(createAccessPackageSubjectFromDiscriminatorValue); },
    }
}
export function serializeAccessPackageAssignment(writer: SerializationWriter, accessPackageAssignment: AccessPackageAssignment | undefined = {} as AccessPackageAssignment) : void {
    serializeEntity(writer, accessPackageAssignment)
    writer.writeObjectValue<AccessPackage>("accessPackage", accessPackageAssignment.accessPackage, serializeAccessPackage);
    writer.writeObjectValue<AccessPackageAssignmentPolicy>("assignmentPolicy", accessPackageAssignment.assignmentPolicy, serializeAccessPackageAssignmentPolicy);
    writer.writeCollectionOfObjectValues<CustomExtensionCalloutInstance>("customExtensionCalloutInstances", accessPackageAssignment.customExtensionCalloutInstances, serializeCustomExtensionCalloutInstance);
    writer.writeDateValue("expiredDateTime", accessPackageAssignment.expiredDateTime);
    writer.writeObjectValue<EntitlementManagementSchedule>("schedule", accessPackageAssignment.schedule, serializeEntitlementManagementSchedule);
    writer.writeEnumValue<AccessPackageAssignmentState>("state", accessPackageAssignment.state);
    writer.writeStringValue("status", accessPackageAssignment.status);
    writer.writeObjectValue<AccessPackageSubject>("target", accessPackageAssignment.target, serializeAccessPackageSubject);
}
// tslint:enable
// eslint-enable
