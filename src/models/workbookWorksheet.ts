// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createWorkbookChartFromDiscriminatorValue, serializeWorkbookChart, type WorkbookChart } from './workbookChart';
import { createWorkbookNamedItemFromDiscriminatorValue, serializeWorkbookNamedItem, type WorkbookNamedItem } from './workbookNamedItem';
import { createWorkbookPivotTableFromDiscriminatorValue, serializeWorkbookPivotTable, type WorkbookPivotTable } from './workbookPivotTable';
import { createWorkbookTableFromDiscriminatorValue, serializeWorkbookTable, type WorkbookTable } from './workbookTable';
import { createWorkbookWorksheetProtectionFromDiscriminatorValue, serializeWorkbookWorksheetProtection, type WorkbookWorksheetProtection } from './workbookWorksheetProtection';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookWorksheetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookWorksheet;
}
export function deserializeIntoWorkbookWorksheet(workbookWorksheet: WorkbookWorksheet | undefined = {} as WorkbookWorksheet) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookWorksheet),
        "charts": n => { workbookWorksheet.charts = n.getCollectionOfObjectValues<WorkbookChart>(createWorkbookChartFromDiscriminatorValue); },
        "name": n => { workbookWorksheet.name = n.getStringValue(); },
        "names": n => { workbookWorksheet.names = n.getCollectionOfObjectValues<WorkbookNamedItem>(createWorkbookNamedItemFromDiscriminatorValue); },
        "pivotTables": n => { workbookWorksheet.pivotTables = n.getCollectionOfObjectValues<WorkbookPivotTable>(createWorkbookPivotTableFromDiscriminatorValue); },
        "position": n => { workbookWorksheet.position = n.getNumberValue(); },
        "protection": n => { workbookWorksheet.protection = n.getObjectValue<WorkbookWorksheetProtection>(createWorkbookWorksheetProtectionFromDiscriminatorValue); },
        "tables": n => { workbookWorksheet.tables = n.getCollectionOfObjectValues<WorkbookTable>(createWorkbookTableFromDiscriminatorValue); },
        "visibility": n => { workbookWorksheet.visibility = n.getStringValue(); },
    }
}
export function serializeWorkbookWorksheet(writer: SerializationWriter, workbookWorksheet: WorkbookWorksheet | undefined = {} as WorkbookWorksheet) : void {
        serializeEntity(writer, workbookWorksheet)
        writer.writeCollectionOfObjectValues<WorkbookChart>("charts", workbookWorksheet.charts, serializeWorkbookChart);
        writer.writeStringValue("name", workbookWorksheet.name);
        writer.writeCollectionOfObjectValues<WorkbookNamedItem>("names", workbookWorksheet.names, serializeWorkbookNamedItem);
        writer.writeCollectionOfObjectValues<WorkbookPivotTable>("pivotTables", workbookWorksheet.pivotTables, serializeWorkbookPivotTable);
        writer.writeNumberValue("position", workbookWorksheet.position);
        writer.writeObjectValue<WorkbookWorksheetProtection>("protection", workbookWorksheet.protection, serializeWorkbookWorksheetProtection);
        writer.writeCollectionOfObjectValues<WorkbookTable>("tables", workbookWorksheet.tables, serializeWorkbookTable);
        writer.writeStringValue("visibility", workbookWorksheet.visibility);
}
export interface WorkbookWorksheet extends Entity, Parsable {
    /**
     * Returns collection of charts that are part of the worksheet. Read-only.
     */
    charts?: WorkbookChart[];
    /**
     * The display name of the worksheet.
     */
    name?: string;
    /**
     * Returns collection of names that are associated with the worksheet. Read-only.
     */
    names?: WorkbookNamedItem[];
    /**
     * Collection of PivotTables that are part of the worksheet.
     */
    pivotTables?: WorkbookPivotTable[];
    /**
     * The zero-based position of the worksheet within the workbook.
     */
    position?: number;
    /**
     * Returns sheet protection object for a worksheet. Read-only.
     */
    protection?: WorkbookWorksheetProtection;
    /**
     * Collection of tables that are part of the worksheet. Read-only.
     */
    tables?: WorkbookTable[];
    /**
     * The Visibility of the worksheet. The possible values are: Visible, Hidden, VeryHidden.
     */
    visibility?: string;
}
// tslint:enable
// eslint-enable
