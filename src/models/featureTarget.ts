// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { FeatureTargetType } from './featureTargetType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFeatureTargetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFeatureTarget;
}
export function deserializeIntoFeatureTarget(featureTarget: FeatureTarget | undefined = {} as FeatureTarget) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { featureTarget.id = n.getStringValue(); },
        "@odata.type": n => { featureTarget.odataType = n.getStringValue(); },
        "targetType": n => { featureTarget.targetType = n.getEnumValue<FeatureTargetType>(FeatureTargetType); },
    }
}
export interface FeatureTarget extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The ID of the entity that's targeted in the include or exclude rule, or all_users to target all users.
     */
    id?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The kind of entity that's targeted. The possible values are: group, administrativeUnit, role, unknownFutureValue.
     */
    targetType?: FeatureTargetType;
}
export function serializeFeatureTarget(writer: SerializationWriter, featureTarget: FeatureTarget | undefined = {} as FeatureTarget) : void {
        writer.writeStringValue("id", featureTarget.id);
        writer.writeStringValue("@odata.type", featureTarget.odataType);
        writer.writeEnumValue<FeatureTargetType>("targetType", featureTarget.targetType);
        writer.writeAdditionalData(featureTarget.additionalData);
}
// tslint:enable
// eslint-enable
