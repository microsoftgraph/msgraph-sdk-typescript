import { type AudioRoutingGroup } from './audioRoutingGroup';
import { type Call } from './call';
import { CallDirection } from './callDirection';
import { type CallMediaState } from './callMediaState';
import { type CallOptions } from './callOptions';
import { type CallRoute } from './callRoute';
import { CallState } from './callState';
import { type CallTranscriptionInfo } from './callTranscriptionInfo';
import { type ChatInfo } from './chatInfo';
import { type CommsOperation } from './commsOperation';
import { type ContentSharingSession } from './contentSharingSession';
import { type IncomingContext } from './incomingContext';
import { type InvitationParticipantInfo } from './invitationParticipantInfo';
import { type MediaConfig } from './mediaConfig';
import { type MeetingInfo } from './meetingInfo';
import { Modality } from './modality';
import { type Participant } from './participant';
import { type ParticipantInfo } from './participantInfo';
import { type ResultInfo } from './resultInfo';
import { serializeAudioRoutingGroup } from './serializeAudioRoutingGroup';
import { serializeCallMediaState } from './serializeCallMediaState';
import { serializeCallOptions } from './serializeCallOptions';
import { serializeCallRoute } from './serializeCallRoute';
import { serializeCallTranscriptionInfo } from './serializeCallTranscriptionInfo';
import { serializeChatInfo } from './serializeChatInfo';
import { serializeCommsOperation } from './serializeCommsOperation';
import { serializeContentSharingSession } from './serializeContentSharingSession';
import { serializeEntity } from './serializeEntity';
import { serializeIncomingContext } from './serializeIncomingContext';
import { serializeInvitationParticipantInfo } from './serializeInvitationParticipantInfo';
import { serializeMediaConfig } from './serializeMediaConfig';
import { serializeMeetingInfo } from './serializeMeetingInfo';
import { serializeParticipant } from './serializeParticipant';
import { serializeParticipantInfo } from './serializeParticipantInfo';
import { serializeResultInfo } from './serializeResultInfo';
import { serializeToneInfo } from './serializeToneInfo';
import { type ToneInfo } from './toneInfo';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function serializeCall(writer: SerializationWriter, call: Call | undefined = {} as Call) : void {
        serializeEntity(writer, call)
        writer.writeCollectionOfObjectValues<AudioRoutingGroup>("audioRoutingGroups", call.audioRoutingGroups, serializeAudioRoutingGroup);
        writer.writeStringValue("callbackUri", call.callbackUri);
        writer.writeStringValue("callChainId", call.callChainId);
        writer.writeObjectValue<CallOptions>("callOptions", call.callOptions, serializeCallOptions);
        writer.writeCollectionOfObjectValues<CallRoute>("callRoutes", call.callRoutes, serializeCallRoute);
        writer.writeObjectValue<ChatInfo>("chatInfo", call.chatInfo, serializeChatInfo);
        writer.writeCollectionOfObjectValues<ContentSharingSession>("contentSharingSessions", call.contentSharingSessions, serializeContentSharingSession);
        writer.writeEnumValue<CallDirection>("direction", call.direction);
        writer.writeObjectValue<IncomingContext>("incomingContext", call.incomingContext, serializeIncomingContext);
        writer.writeObjectValue<MediaConfig>("mediaConfig", call.mediaConfig, serializeMediaConfig);
        writer.writeObjectValue<CallMediaState>("mediaState", call.mediaState, serializeCallMediaState);
        writer.writeObjectValue<MeetingInfo>("meetingInfo", call.meetingInfo, serializeMeetingInfo);
        writer.writeStringValue("myParticipantId", call.myParticipantId);
        writer.writeCollectionOfObjectValues<CommsOperation>("operations", call.operations, serializeCommsOperation);
        writer.writeCollectionOfObjectValues<Participant>("participants", call.participants, serializeParticipant);
        if(call.requestedModalities)
        writer.writeEnumValue<Modality>("requestedModalities", ...call.requestedModalities);
        writer.writeObjectValue<ResultInfo>("resultInfo", call.resultInfo, serializeResultInfo);
        writer.writeObjectValue<ParticipantInfo>("source", call.source, serializeParticipantInfo);
        writer.writeEnumValue<CallState>("state", call.state);
        writer.writeStringValue("subject", call.subject);
        writer.writeCollectionOfObjectValues<InvitationParticipantInfo>("targets", call.targets, serializeInvitationParticipantInfo);
        writer.writeStringValue("tenantId", call.tenantId);
        writer.writeObjectValue<ToneInfo>("toneInfo", call.toneInfo, serializeToneInfo);
        writer.writeObjectValue<CallTranscriptionInfo>("transcription", call.transcription, serializeCallTranscriptionInfo);
}
