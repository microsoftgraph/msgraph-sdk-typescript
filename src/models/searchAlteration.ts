// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAlteredQueryTokenFromDiscriminatorValue, serializeAlteredQueryToken, type AlteredQueryToken } from './alteredQueryToken';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSearchAlterationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSearchAlteration;
}
export function deserializeIntoSearchAlteration(searchAlteration: SearchAlteration | undefined = {} as SearchAlteration) : Record<string, (node: ParseNode) => void> {
    return {
        "alteredHighlightedQueryString": n => { searchAlteration.alteredHighlightedQueryString = n.getStringValue(); },
        "alteredQueryString": n => { searchAlteration.alteredQueryString = n.getStringValue(); },
        "alteredQueryTokens": n => { searchAlteration.alteredQueryTokens = n.getCollectionOfObjectValues<AlteredQueryToken>(createAlteredQueryTokenFromDiscriminatorValue); },
        "@odata.type": n => { searchAlteration.odataType = n.getStringValue(); },
    }
}
export interface SearchAlteration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Defines the altered highlighted query string with spelling correction. The annotation around the corrected segment is: /ue000, /ue001.
     */
    alteredHighlightedQueryString?: string;
    /**
     * Defines the altered query string with spelling correction.
     */
    alteredQueryString?: string;
    /**
     * Represents changed segments related to an original user query.
     */
    alteredQueryTokens?: AlteredQueryToken[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeSearchAlteration(writer: SerializationWriter, searchAlteration: SearchAlteration | undefined = {} as SearchAlteration) : void {
        writer.writeStringValue("alteredHighlightedQueryString", searchAlteration.alteredHighlightedQueryString);
        writer.writeStringValue("alteredQueryString", searchAlteration.alteredQueryString);
        writer.writeCollectionOfObjectValues<AlteredQueryToken>("alteredQueryTokens", searchAlteration.alteredQueryTokens, );
        writer.writeStringValue("@odata.type", searchAlteration.odataType);
        writer.writeAdditionalData(searchAlteration.additionalData);
}
// tslint:enable
// eslint-enable
