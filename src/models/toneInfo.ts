// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { Tone } from './tone';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createToneInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoToneInfo;
}
export function deserializeIntoToneInfo(toneInfo: ToneInfo | undefined = {} as ToneInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { toneInfo.odataType = n.getStringValue(); },
        "sequenceId": n => { toneInfo.sequenceId = n.getNumberValue(); },
        "tone": n => { toneInfo.tone = n.getEnumValue<Tone>(Tone); },
    }
}
export function serializeToneInfo(writer: SerializationWriter, toneInfo: ToneInfo | undefined = {} as ToneInfo) : void {
    writer.writeStringValue("@odata.type", toneInfo.odataType);
    writer.writeNumberValue("sequenceId", toneInfo.sequenceId);
    writer.writeEnumValue<Tone>("tone", toneInfo.tone);
    writer.writeAdditionalData(toneInfo.additionalData);
}
export interface ToneInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * An incremental identifier used for ordering DTMF events.
     */
    sequenceId?: number;
    /**
     * The tone property
     */
    tone?: Tone;
}
// tslint:enable
// eslint-enable
