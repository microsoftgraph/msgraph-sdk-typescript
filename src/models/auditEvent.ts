// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAuditActorFromDiscriminatorValue, serializeAuditActor, type AuditActor } from './auditActor';
import { createAuditResourceFromDiscriminatorValue, serializeAuditResource, type AuditResource } from './auditResource';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export interface AuditEvent extends Entity, Parsable {
    /**
     * Friendly name of the activity.
     */
    activity?: string;
    /**
     * The date time in UTC when the activity was performed.
     */
    activityDateTime?: Date;
    /**
     * The HTTP operation type of the activity.
     */
    activityOperationType?: string;
    /**
     * The result of the activity.
     */
    activityResult?: string;
    /**
     * The type of activity that was being performed.
     */
    activityType?: string;
    /**
     * AAD user and application that are associated with the audit event.
     */
    actor?: AuditActor;
    /**
     * Audit category.
     */
    category?: string;
    /**
     * Component name.
     */
    componentName?: string;
    /**
     * The client request Id that is used to correlate activity within the system.
     */
    correlationId?: Guid;
    /**
     * Event display name.
     */
    displayName?: string;
    /**
     * Resources being modified.
     */
    resources?: AuditResource[];
}
export function createAuditEventFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuditEvent;
}
export function deserializeIntoAuditEvent(auditEvent: AuditEvent | undefined = {} as AuditEvent) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(auditEvent),
        "activity": n => { auditEvent.activity = n.getStringValue(); },
        "activityDateTime": n => { auditEvent.activityDateTime = n.getDateValue(); },
        "activityOperationType": n => { auditEvent.activityOperationType = n.getStringValue(); },
        "activityResult": n => { auditEvent.activityResult = n.getStringValue(); },
        "activityType": n => { auditEvent.activityType = n.getStringValue(); },
        "actor": n => { auditEvent.actor = n.getObjectValue<AuditActor>(createAuditActorFromDiscriminatorValue); },
        "category": n => { auditEvent.category = n.getStringValue(); },
        "componentName": n => { auditEvent.componentName = n.getStringValue(); },
        "correlationId": n => { auditEvent.correlationId = n.getGuidValue(); },
        "displayName": n => { auditEvent.displayName = n.getStringValue(); },
        "resources": n => { auditEvent.resources = n.getCollectionOfObjectValues<AuditResource>(createAuditResourceFromDiscriminatorValue); },
    }
}
export function serializeAuditEvent(writer: SerializationWriter, auditEvent: AuditEvent | undefined = {} as AuditEvent) : void {
    serializeEntity(writer, auditEvent)
    writer.writeStringValue("activity", auditEvent.activity);
    writer.writeDateValue("activityDateTime", auditEvent.activityDateTime);
    writer.writeStringValue("activityOperationType", auditEvent.activityOperationType);
    writer.writeStringValue("activityResult", auditEvent.activityResult);
    writer.writeStringValue("activityType", auditEvent.activityType);
    writer.writeObjectValue<AuditActor>("actor", auditEvent.actor, serializeAuditActor);
    writer.writeStringValue("category", auditEvent.category);
    writer.writeStringValue("componentName", auditEvent.componentName);
    writer.writeGuidValue("correlationId", auditEvent.correlationId);
    writer.writeStringValue("displayName", auditEvent.displayName);
    writer.writeCollectionOfObjectValues<AuditResource>("resources", auditEvent.resources, serializeAuditResource);
}
// tslint:enable
// eslint-enable
