// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { NetworkConnectionType } from './networkConnectionType';
import { NetworkTransportProtocol } from './networkTransportProtocol';
import { createTraceRouteHopFromDiscriminatorValue, serializeTraceRouteHop, type TraceRouteHop } from './traceRouteHop';
import { WifiBand } from './wifiBand';
import { WifiRadioType } from './wifiRadioType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createNetworkInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoNetworkInfo;
}
export function deserializeIntoNetworkInfo(networkInfo: NetworkInfo | undefined = {} as NetworkInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "bandwidthLowEventRatio": n => { networkInfo.bandwidthLowEventRatio = n.getNumberValue(); },
        "basicServiceSetIdentifier": n => { networkInfo.basicServiceSetIdentifier = n.getStringValue(); },
        "connectionType": n => { networkInfo.connectionType = n.getEnumValue<NetworkConnectionType>(NetworkConnectionType); },
        "delayEventRatio": n => { networkInfo.delayEventRatio = n.getNumberValue(); },
        "dnsSuffix": n => { networkInfo.dnsSuffix = n.getStringValue(); },
        "ipAddress": n => { networkInfo.ipAddress = n.getStringValue(); },
        "linkSpeed": n => { networkInfo.linkSpeed = n.getNumberValue(); },
        "macAddress": n => { networkInfo.macAddress = n.getStringValue(); },
        "networkTransportProtocol": n => { networkInfo.networkTransportProtocol = n.getEnumValue<NetworkTransportProtocol>(NetworkTransportProtocol); },
        "@odata.type": n => { networkInfo.odataType = n.getStringValue(); },
        "port": n => { networkInfo.port = n.getNumberValue(); },
        "receivedQualityEventRatio": n => { networkInfo.receivedQualityEventRatio = n.getNumberValue(); },
        "reflexiveIPAddress": n => { networkInfo.reflexiveIPAddress = n.getStringValue(); },
        "relayIPAddress": n => { networkInfo.relayIPAddress = n.getStringValue(); },
        "relayPort": n => { networkInfo.relayPort = n.getNumberValue(); },
        "sentQualityEventRatio": n => { networkInfo.sentQualityEventRatio = n.getNumberValue(); },
        "subnet": n => { networkInfo.subnet = n.getStringValue(); },
        "traceRouteHops": n => { networkInfo.traceRouteHops = n.getCollectionOfObjectValues<TraceRouteHop>(createTraceRouteHopFromDiscriminatorValue); },
        "wifiBand": n => { networkInfo.wifiBand = n.getEnumValue<WifiBand>(WifiBand); },
        "wifiBatteryCharge": n => { networkInfo.wifiBatteryCharge = n.getNumberValue(); },
        "wifiChannel": n => { networkInfo.wifiChannel = n.getNumberValue(); },
        "wifiMicrosoftDriver": n => { networkInfo.wifiMicrosoftDriver = n.getStringValue(); },
        "wifiMicrosoftDriverVersion": n => { networkInfo.wifiMicrosoftDriverVersion = n.getStringValue(); },
        "wifiRadioType": n => { networkInfo.wifiRadioType = n.getEnumValue<WifiRadioType>(WifiRadioType); },
        "wifiSignalStrength": n => { networkInfo.wifiSignalStrength = n.getNumberValue(); },
        "wifiVendorDriver": n => { networkInfo.wifiVendorDriver = n.getStringValue(); },
        "wifiVendorDriverVersion": n => { networkInfo.wifiVendorDriverVersion = n.getStringValue(); },
    }
}
export interface NetworkInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Fraction of the call that the media endpoint detected the available bandwidth or bandwidth policy was low enough to cause poor quality of the audio sent.
     */
    bandwidthLowEventRatio?: number;
    /**
     * The wireless LAN basic service set identifier of the media endpoint used to connect to the network.
     */
    basicServiceSetIdentifier?: string;
    /**
     * The connectionType property
     */
    connectionType?: NetworkConnectionType;
    /**
     * Fraction of the call that the media endpoint detected the network delay was significant enough to impact the ability to have real-time two-way communication.
     */
    delayEventRatio?: number;
    /**
     * DNS suffix associated with the network adapter of the media endpoint.
     */
    dnsSuffix?: string;
    /**
     * IP address of the media endpoint.
     */
    ipAddress?: string;
    /**
     * Link speed in bits per second reported by the network adapter used by the media endpoint.
     */
    linkSpeed?: number;
    /**
     * The media access control (MAC) address of the media endpoint's network device. This value may be missing or shown as 02:00:00:00:00:00 due to operating system privacy policies.
     */
    macAddress?: string;
    /**
     * The networkTransportProtocol property
     */
    networkTransportProtocol?: NetworkTransportProtocol;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Network port number used by media endpoint.
     */
    port?: number;
    /**
     * Fraction of the call that the media endpoint detected the network was causing poor quality of the audio received.
     */
    receivedQualityEventRatio?: number;
    /**
     * IP address of the media endpoint as seen by the media relay server. This is typically the public internet IP address associated to the endpoint.
     */
    reflexiveIPAddress?: string;
    /**
     * IP address of the media relay server allocated by the media endpoint.
     */
    relayIPAddress?: string;
    /**
     * Network port number allocated on the media relay server by the media endpoint.
     */
    relayPort?: number;
    /**
     * Fraction of the call that the media endpoint detected the network was causing poor quality of the audio sent.
     */
    sentQualityEventRatio?: number;
    /**
     * Subnet used for media stream by the media endpoint.
     */
    subnet?: string;
    /**
     * List of network trace route hops collected for this media stream.*
     */
    traceRouteHops?: TraceRouteHop[];
    /**
     * The wifiBand property
     */
    wifiBand?: WifiBand;
    /**
     * Estimated remaining battery charge in percentage reported by the media endpoint.
     */
    wifiBatteryCharge?: number;
    /**
     * WiFi channel used by the media endpoint.
     */
    wifiChannel?: number;
    /**
     * Name of the Microsoft WiFi driver used by the media endpoint. Value may be localized based on the language used by endpoint.
     */
    wifiMicrosoftDriver?: string;
    /**
     * Version of the Microsoft WiFi driver used by the media endpoint.
     */
    wifiMicrosoftDriverVersion?: string;
    /**
     * The wifiRadioType property
     */
    wifiRadioType?: WifiRadioType;
    /**
     * WiFi signal strength in percentage reported by the media endpoint.
     */
    wifiSignalStrength?: number;
    /**
     * Name of the WiFi driver used by the media endpoint. Value may be localized based on the language used by endpoint.
     */
    wifiVendorDriver?: string;
    /**
     * Version of the WiFi driver used by the media endpoint.
     */
    wifiVendorDriverVersion?: string;
}
export function serializeNetworkInfo(writer: SerializationWriter, networkInfo: NetworkInfo | undefined = {} as NetworkInfo) : void {
    writer.writeNumberValue("bandwidthLowEventRatio", networkInfo.bandwidthLowEventRatio);
    writer.writeStringValue("basicServiceSetIdentifier", networkInfo.basicServiceSetIdentifier);
    writer.writeEnumValue<NetworkConnectionType>("connectionType", networkInfo.connectionType);
    writer.writeNumberValue("delayEventRatio", networkInfo.delayEventRatio);
    writer.writeStringValue("dnsSuffix", networkInfo.dnsSuffix);
    writer.writeStringValue("ipAddress", networkInfo.ipAddress);
    writer.writeNumberValue("linkSpeed", networkInfo.linkSpeed);
    writer.writeStringValue("macAddress", networkInfo.macAddress);
    writer.writeEnumValue<NetworkTransportProtocol>("networkTransportProtocol", networkInfo.networkTransportProtocol);
    writer.writeStringValue("@odata.type", networkInfo.odataType);
    writer.writeNumberValue("port", networkInfo.port);
    writer.writeNumberValue("receivedQualityEventRatio", networkInfo.receivedQualityEventRatio);
    writer.writeStringValue("reflexiveIPAddress", networkInfo.reflexiveIPAddress);
    writer.writeStringValue("relayIPAddress", networkInfo.relayIPAddress);
    writer.writeNumberValue("relayPort", networkInfo.relayPort);
    writer.writeNumberValue("sentQualityEventRatio", networkInfo.sentQualityEventRatio);
    writer.writeStringValue("subnet", networkInfo.subnet);
    writer.writeCollectionOfObjectValues<TraceRouteHop>("traceRouteHops", networkInfo.traceRouteHops, serializeTraceRouteHop);
    writer.writeEnumValue<WifiBand>("wifiBand", networkInfo.wifiBand);
    writer.writeNumberValue("wifiBatteryCharge", networkInfo.wifiBatteryCharge);
    writer.writeNumberValue("wifiChannel", networkInfo.wifiChannel);
    writer.writeStringValue("wifiMicrosoftDriver", networkInfo.wifiMicrosoftDriver);
    writer.writeStringValue("wifiMicrosoftDriverVersion", networkInfo.wifiMicrosoftDriverVersion);
    writer.writeEnumValue<WifiRadioType>("wifiRadioType", networkInfo.wifiRadioType);
    writer.writeNumberValue("wifiSignalStrength", networkInfo.wifiSignalStrength);
    writer.writeStringValue("wifiVendorDriver", networkInfo.wifiVendorDriver);
    writer.writeStringValue("wifiVendorDriverVersion", networkInfo.wifiVendorDriverVersion);
    writer.writeAdditionalData(networkInfo.additionalData);
}
// tslint:enable
// eslint-enable
