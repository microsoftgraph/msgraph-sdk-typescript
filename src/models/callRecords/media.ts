// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDeviceInfoFromDiscriminatorValue, serializeDeviceInfo, type DeviceInfo } from './deviceInfo';
import { createMediaStreamFromDiscriminatorValue, serializeMediaStream, type MediaStream } from './mediaStream';
import { createNetworkInfoFromDiscriminatorValue, serializeNetworkInfo, type NetworkInfo } from './networkInfo';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMediaFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMedia;
}
export function deserializeIntoMedia(media: Media | undefined = {} as Media) : Record<string, (node: ParseNode) => void> {
    return {
        "calleeDevice": n => { media.calleeDevice = n.getObjectValue<DeviceInfo>(createDeviceInfoFromDiscriminatorValue); },
        "calleeNetwork": n => { media.calleeNetwork = n.getObjectValue<NetworkInfo>(createNetworkInfoFromDiscriminatorValue); },
        "callerDevice": n => { media.callerDevice = n.getObjectValue<DeviceInfo>(createDeviceInfoFromDiscriminatorValue); },
        "callerNetwork": n => { media.callerNetwork = n.getObjectValue<NetworkInfo>(createNetworkInfoFromDiscriminatorValue); },
        "label": n => { media.label = n.getStringValue(); },
        "@odata.type": n => { media.odataType = n.getStringValue(); },
        "streams": n => { media.streams = n.getCollectionOfObjectValues<MediaStream>(createMediaStreamFromDiscriminatorValue); },
    }
}
export interface Media extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Device information associated with the callee endpoint of this media.
     */
    calleeDevice?: DeviceInfo;
    /**
     * Network information associated with the callee endpoint of this media.
     */
    calleeNetwork?: NetworkInfo;
    /**
     * Device information associated with the caller endpoint of this media.
     */
    callerDevice?: DeviceInfo;
    /**
     * Network information associated with the caller endpoint of this media.
     */
    callerNetwork?: NetworkInfo;
    /**
     * How the media was identified during media negotiation stage.
     */
    label?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Network streams associated with this media.
     */
    streams?: MediaStream[];
}
export function serializeMedia(writer: SerializationWriter, media: Media | undefined = {} as Media) : void {
        writer.writeObjectValue<DeviceInfo>("calleeDevice", media.calleeDevice, serializeDeviceInfo);
        writer.writeObjectValue<NetworkInfo>("calleeNetwork", media.calleeNetwork, serializeNetworkInfo);
        writer.writeObjectValue<DeviceInfo>("callerDevice", media.callerDevice, serializeDeviceInfo);
        writer.writeObjectValue<NetworkInfo>("callerNetwork", media.callerNetwork, serializeNetworkInfo);
        writer.writeStringValue("label", media.label);
        writer.writeStringValue("@odata.type", media.odataType);
        writer.writeCollectionOfObjectValues<MediaStream>("streams", media.streams, serializeMediaStream);
        writer.writeAdditionalData(media.additionalData);
}
// tslint:enable
// eslint-enable
