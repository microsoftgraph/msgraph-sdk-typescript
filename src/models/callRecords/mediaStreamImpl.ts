import {MediaStream} from './mediaStream';
import {MediaStreamDirection} from './mediaStreamDirection';
import {AdditionalDataHolder, Duration, Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export class MediaStreamImpl implements AdditionalDataHolder, MediaStream, Parsable {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    public additionalData: Record<string, unknown>;
    /** Average Network Mean Opinion Score degradation for stream. Represents how much the network loss and jitter has impacted the quality of received audio. */
    public averageAudioDegradation?: number | undefined;
    /** Average jitter for the stream computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator. */
    public averageAudioNetworkJitter?: Duration | undefined;
    /** Average estimated bandwidth available between two endpoints in bits per second. */
    public averageBandwidthEstimate?: number | undefined;
    /** Average jitter for the stream computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator. */
    public averageJitter?: Duration | undefined;
    /** Average packet loss rate for stream. */
    public averagePacketLossRate?: number | undefined;
    /** Ratio of the number of audio frames with samples generated by packet loss concealment to the total number of audio frames. */
    public averageRatioOfConcealedSamples?: number | undefined;
    /** Average frames per second received for all video streams computed over the duration of the session. */
    public averageReceivedFrameRate?: number | undefined;
    /** Average network propagation round-trip time computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator. */
    public averageRoundTripTime?: Duration | undefined;
    /** Average percentage of video frames lost as displayed to the user. */
    public averageVideoFrameLossPercentage?: number | undefined;
    /** Average frames per second received for a video stream, computed over the duration of the session. */
    public averageVideoFrameRate?: number | undefined;
    /** Average fraction of packets lost, as specified in [RFC 3550][], computed over the duration of the session. */
    public averageVideoPacketLossRate?: number | undefined;
    /** UTC time when the stream ended. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    public endDateTime?: Date | undefined;
    /** Fraction of the call where frame rate is less than 7.5 frames per second. */
    public lowFrameRateRatio?: number | undefined;
    /** Fraction of the call that the client is running less than 70% expected video processing capability. */
    public lowVideoProcessingCapabilityRatio?: number | undefined;
    /** Maximum of audio network jitter computed over each of the 20 second windows during the session, denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator. */
    public maxAudioNetworkJitter?: Duration | undefined;
    /** Maximum jitter for the stream computed as specified in RFC 3550, denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator. */
    public maxJitter?: Duration | undefined;
    /** Maximum packet loss rate for the stream. */
    public maxPacketLossRate?: number | undefined;
    /** Maximum ratio of packets concealed by the healer. */
    public maxRatioOfConcealedSamples?: number | undefined;
    /** Maximum network propagation round-trip time computed as specified in [RFC 3550][], denoted in [ISO 8601][] format. For example, 1 second is denoted as 'PT1S', where 'P' is the duration designator, 'T' is the time designator, and 'S' is the second designator. */
    public maxRoundTripTime?: Duration | undefined;
    /** Packet count for the stream. */
    public packetUtilization?: number | undefined;
    /** Packet loss rate after FEC has been applied aggregated across all video streams and codecs. */
    public postForwardErrorCorrectionPacketLossRate?: number | undefined;
    /** UTC time when the stream started. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    public startDateTime?: Date | undefined;
    /** Indicates the direction of the media stream. Possible values are: callerToCallee, calleeToCaller. */
    public streamDirection?: MediaStreamDirection | undefined;
    /** Unique identifier for the stream. */
    public streamId?: string | undefined;
    /** True if the media stream bypassed the Mediation Server and went straight between client and PSTN Gateway/PBX, false otherwise. */
    public wasMediaBypassed?: boolean | undefined;
    /**
     * Instantiates a new mediaStream and sets the default values.
     * @param mediaStreamParameterValue 
     */
    public constructor(mediaStreamParameterValue?: MediaStream | undefined) {
        this.additionalData = mediaStreamParameterValue?.additionalData ? mediaStreamParameterValue?.additionalData! : {}
        this.averageAudioDegradation = mediaStreamParameterValue?.averageAudioDegradation ;
        this.averageAudioNetworkJitter = mediaStreamParameterValue?.averageAudioNetworkJitter ;
        this.averageBandwidthEstimate = mediaStreamParameterValue?.averageBandwidthEstimate ;
        this.averageJitter = mediaStreamParameterValue?.averageJitter ;
        this.averagePacketLossRate = mediaStreamParameterValue?.averagePacketLossRate ;
        this.averageRatioOfConcealedSamples = mediaStreamParameterValue?.averageRatioOfConcealedSamples ;
        this.averageReceivedFrameRate = mediaStreamParameterValue?.averageReceivedFrameRate ;
        this.averageRoundTripTime = mediaStreamParameterValue?.averageRoundTripTime ;
        this.averageVideoFrameLossPercentage = mediaStreamParameterValue?.averageVideoFrameLossPercentage ;
        this.averageVideoFrameRate = mediaStreamParameterValue?.averageVideoFrameRate ;
        this.averageVideoPacketLossRate = mediaStreamParameterValue?.averageVideoPacketLossRate ;
        this.endDateTime = mediaStreamParameterValue?.endDateTime ;
        this.lowFrameRateRatio = mediaStreamParameterValue?.lowFrameRateRatio ;
        this.lowVideoProcessingCapabilityRatio = mediaStreamParameterValue?.lowVideoProcessingCapabilityRatio ;
        this.maxAudioNetworkJitter = mediaStreamParameterValue?.maxAudioNetworkJitter ;
        this.maxJitter = mediaStreamParameterValue?.maxJitter ;
        this.maxPacketLossRate = mediaStreamParameterValue?.maxPacketLossRate ;
        this.maxRatioOfConcealedSamples = mediaStreamParameterValue?.maxRatioOfConcealedSamples ;
        this.maxRoundTripTime = mediaStreamParameterValue?.maxRoundTripTime ;
        this.packetUtilization = mediaStreamParameterValue?.packetUtilization ;
        this.postForwardErrorCorrectionPacketLossRate = mediaStreamParameterValue?.postForwardErrorCorrectionPacketLossRate ;
        this.startDateTime = mediaStreamParameterValue?.startDateTime ;
        this.streamDirection = mediaStreamParameterValue?.streamDirection ;
        this.streamId = mediaStreamParameterValue?.streamId ;
        this.wasMediaBypassed = mediaStreamParameterValue?.wasMediaBypassed ;
    };
    /**
     * The deserialization information for the current model
     * @returns a Record<string, (node: ParseNode) => void>
     */
    public getFieldDeserializers() : Record<string, (node: ParseNode) => void> {
        return {
            "averageAudioDegradation": n => { this.averageAudioDegradation = n.getNumberValue(); },
            "averageAudioNetworkJitter": n => { this.averageAudioNetworkJitter = n.getDurationValue(); },
            "averageBandwidthEstimate": n => { this.averageBandwidthEstimate = n.getNumberValue(); },
            "averageJitter": n => { this.averageJitter = n.getDurationValue(); },
            "averagePacketLossRate": n => { this.averagePacketLossRate = n.getNumberValue(); },
            "averageRatioOfConcealedSamples": n => { this.averageRatioOfConcealedSamples = n.getNumberValue(); },
            "averageReceivedFrameRate": n => { this.averageReceivedFrameRate = n.getNumberValue(); },
            "averageRoundTripTime": n => { this.averageRoundTripTime = n.getDurationValue(); },
            "averageVideoFrameLossPercentage": n => { this.averageVideoFrameLossPercentage = n.getNumberValue(); },
            "averageVideoFrameRate": n => { this.averageVideoFrameRate = n.getNumberValue(); },
            "averageVideoPacketLossRate": n => { this.averageVideoPacketLossRate = n.getNumberValue(); },
            "endDateTime": n => { this.endDateTime = n.getDateValue(); },
            "lowFrameRateRatio": n => { this.lowFrameRateRatio = n.getNumberValue(); },
            "lowVideoProcessingCapabilityRatio": n => { this.lowVideoProcessingCapabilityRatio = n.getNumberValue(); },
            "maxAudioNetworkJitter": n => { this.maxAudioNetworkJitter = n.getDurationValue(); },
            "maxJitter": n => { this.maxJitter = n.getDurationValue(); },
            "maxPacketLossRate": n => { this.maxPacketLossRate = n.getNumberValue(); },
            "maxRatioOfConcealedSamples": n => { this.maxRatioOfConcealedSamples = n.getNumberValue(); },
            "maxRoundTripTime": n => { this.maxRoundTripTime = n.getDurationValue(); },
            "packetUtilization": n => { this.packetUtilization = n.getNumberValue(); },
            "postForwardErrorCorrectionPacketLossRate": n => { this.postForwardErrorCorrectionPacketLossRate = n.getNumberValue(); },
            "startDateTime": n => { this.startDateTime = n.getDateValue(); },
            "streamDirection": n => { this.streamDirection = n.getEnumValue<MediaStreamDirection>(MediaStreamDirection); },
            "streamId": n => { this.streamId = n.getStringValue(); },
            "wasMediaBypassed": n => { this.wasMediaBypassed = n.getBooleanValue(); },
        };
    };
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    public serialize(writer: SerializationWriter) : void {
        if(!writer) throw new Error("writer cannot be undefined");
        if(this.averageAudioDegradation){
        writer.writeNumberValue("averageAudioDegradation", this.averageAudioDegradation);
        }
        if(this.averageAudioNetworkJitter){
        writer.writeDurationValue("averageAudioNetworkJitter", this.averageAudioNetworkJitter);
        }
        if(this.averageBandwidthEstimate){
        writer.writeNumberValue("averageBandwidthEstimate", this.averageBandwidthEstimate);
        }
        if(this.averageJitter){
        writer.writeDurationValue("averageJitter", this.averageJitter);
        }
        if(this.averagePacketLossRate){
        writer.writeNumberValue("averagePacketLossRate", this.averagePacketLossRate);
        }
        if(this.averageRatioOfConcealedSamples){
        writer.writeNumberValue("averageRatioOfConcealedSamples", this.averageRatioOfConcealedSamples);
        }
        if(this.averageReceivedFrameRate){
        writer.writeNumberValue("averageReceivedFrameRate", this.averageReceivedFrameRate);
        }
        if(this.averageRoundTripTime){
        writer.writeDurationValue("averageRoundTripTime", this.averageRoundTripTime);
        }
        if(this.averageVideoFrameLossPercentage){
        writer.writeNumberValue("averageVideoFrameLossPercentage", this.averageVideoFrameLossPercentage);
        }
        if(this.averageVideoFrameRate){
        writer.writeNumberValue("averageVideoFrameRate", this.averageVideoFrameRate);
        }
        if(this.averageVideoPacketLossRate){
        writer.writeNumberValue("averageVideoPacketLossRate", this.averageVideoPacketLossRate);
        }
        if(this.endDateTime){
        writer.writeDateValue("endDateTime", this.endDateTime);
        }
        if(this.lowFrameRateRatio){
        writer.writeNumberValue("lowFrameRateRatio", this.lowFrameRateRatio);
        }
        if(this.lowVideoProcessingCapabilityRatio){
        writer.writeNumberValue("lowVideoProcessingCapabilityRatio", this.lowVideoProcessingCapabilityRatio);
        }
        if(this.maxAudioNetworkJitter){
        writer.writeDurationValue("maxAudioNetworkJitter", this.maxAudioNetworkJitter);
        }
        if(this.maxJitter){
        writer.writeDurationValue("maxJitter", this.maxJitter);
        }
        if(this.maxPacketLossRate){
        writer.writeNumberValue("maxPacketLossRate", this.maxPacketLossRate);
        }
        if(this.maxRatioOfConcealedSamples){
        writer.writeNumberValue("maxRatioOfConcealedSamples", this.maxRatioOfConcealedSamples);
        }
        if(this.maxRoundTripTime){
        writer.writeDurationValue("maxRoundTripTime", this.maxRoundTripTime);
        }
        if(this.packetUtilization){
        writer.writeNumberValue("packetUtilization", this.packetUtilization);
        }
        if(this.postForwardErrorCorrectionPacketLossRate){
        writer.writeNumberValue("postForwardErrorCorrectionPacketLossRate", this.postForwardErrorCorrectionPacketLossRate);
        }
        if(this.startDateTime){
        writer.writeDateValue("startDateTime", this.startDateTime);
        }
        if(this.streamDirection){
        writer.writeEnumValue<MediaStreamDirection>("streamDirection", this.streamDirection);
        }
        if(this.streamId){
        writer.writeStringValue("streamId", this.streamId);
        }
        if(this.wasMediaBypassed){
        writer.writeBooleanValue("wasMediaBypassed", this.wasMediaBypassed);
        }
        writer.writeAdditionalData(this.additionalData);
    };
}
