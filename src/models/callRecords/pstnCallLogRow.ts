// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { PstnCallDurationSource } from './pstnCallDurationSource';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPstnCallLogRowFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPstnCallLogRow;
}
export function deserializeIntoPstnCallLogRow(pstnCallLogRow: PstnCallLogRow | undefined = {} as PstnCallLogRow) : Record<string, (node: ParseNode) => void> {
    return {
        "callDurationSource": n => { pstnCallLogRow.callDurationSource = n.getEnumValue<PstnCallDurationSource>(PstnCallDurationSource); },
        "calleeNumber": n => { pstnCallLogRow.calleeNumber = n.getStringValue(); },
        "callerNumber": n => { pstnCallLogRow.callerNumber = n.getStringValue(); },
        "callId": n => { pstnCallLogRow.callId = n.getStringValue(); },
        "callType": n => { pstnCallLogRow.callType = n.getStringValue(); },
        "charge": n => { pstnCallLogRow.charge = n.getNumberValue(); },
        "conferenceId": n => { pstnCallLogRow.conferenceId = n.getStringValue(); },
        "connectionCharge": n => { pstnCallLogRow.connectionCharge = n.getNumberValue(); },
        "currency": n => { pstnCallLogRow.currency = n.getStringValue(); },
        "destinationContext": n => { pstnCallLogRow.destinationContext = n.getStringValue(); },
        "destinationName": n => { pstnCallLogRow.destinationName = n.getStringValue(); },
        "duration": n => { pstnCallLogRow.duration = n.getNumberValue(); },
        "endDateTime": n => { pstnCallLogRow.endDateTime = n.getDateValue(); },
        "id": n => { pstnCallLogRow.id = n.getStringValue(); },
        "inventoryType": n => { pstnCallLogRow.inventoryType = n.getStringValue(); },
        "licenseCapability": n => { pstnCallLogRow.licenseCapability = n.getStringValue(); },
        "@odata.type": n => { pstnCallLogRow.odataType = n.getStringValue(); },
        "operator": n => { pstnCallLogRow.operator = n.getStringValue(); },
        "startDateTime": n => { pstnCallLogRow.startDateTime = n.getDateValue(); },
        "tenantCountryCode": n => { pstnCallLogRow.tenantCountryCode = n.getStringValue(); },
        "usageCountryCode": n => { pstnCallLogRow.usageCountryCode = n.getStringValue(); },
        "userDisplayName": n => { pstnCallLogRow.userDisplayName = n.getStringValue(); },
        "userId": n => { pstnCallLogRow.userId = n.getStringValue(); },
        "userPrincipalName": n => { pstnCallLogRow.userPrincipalName = n.getStringValue(); },
    }
}
export interface PstnCallLogRow extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The source of the call duration data. If the call uses a third-party telecommunications operator via the Operator Connect Program, the operator can provide their own call duration data. In this case, the property value is operator. Otherwise, the value is microsoft.
     */
    callDurationSource?: PstnCallDurationSource;
    /**
     * Number dialed in E.164 format.
     */
    calleeNumber?: string;
    /**
     * Number that received the call for inbound calls or the number dialed for outbound calls. E.164 format.
     */
    callerNumber?: string;
    /**
     * Call identifier. Not guaranteed to be unique.
     */
    callId?: string;
    /**
     * Indicates whether the call was a PSTN outbound or inbound call and the type of call, such as a call placed by a user or an audio conference.
     */
    callType?: string;
    /**
     * Amount of money or cost of the call that is charged to your account.
     */
    charge?: number;
    /**
     * ID of the audio conference.
     */
    conferenceId?: string;
    /**
     * Connection fee price.
     */
    connectionCharge?: number;
    /**
     * Type of currency used to calculate the cost of the call. For details, see (ISO 4217.
     */
    currency?: string;
    /**
     * Whether the call was domestic (within a country or region) or international (outside a country or region), based on the user's location.
     */
    destinationContext?: string;
    /**
     * Country or region dialed.
     */
    destinationName?: string;
    /**
     * How long the call was connected, in seconds.
     */
    duration?: number;
    /**
     * Call end time.
     */
    endDateTime?: Date;
    /**
     * Unique call identifier. GUID.
     */
    id?: string;
    /**
     * User's phone number type, such as a service of toll-free number.
     */
    inventoryType?: string;
    /**
     * The license used for the call.
     */
    licenseCapability?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The telecommunications operator which provided PSTN services for this call. This might be Microsoft, or it might be a third-party operator via the Operator Connect Program.
     */
    operator?: string;
    /**
     * Call start time.
     */
    startDateTime?: Date;
    /**
     * Country code of the tenant. For details, see ISO 3166-1 alpha-2.
     */
    tenantCountryCode?: string;
    /**
     * Country code of the user. For details, see ISO 3166-1 alpha-2.
     */
    usageCountryCode?: string;
    /**
     * Display name of the user.
     */
    userDisplayName?: string;
    /**
     * Calling user's ID in Microsoft Graph. GUID. This and other user info will be null/empty for bot call types (ucapin, ucapout).
     */
    userId?: string;
    /**
     * The user principal name (sign-in name) in Microsoft Entra ID. This is usually the same as the user's SIP address, and can be the same as the user's email address.
     */
    userPrincipalName?: string;
}
export function serializePstnCallLogRow(writer: SerializationWriter, pstnCallLogRow: PstnCallLogRow | undefined = {} as PstnCallLogRow) : void {
    writer.writeEnumValue<PstnCallDurationSource>("callDurationSource", pstnCallLogRow.callDurationSource);
    writer.writeStringValue("calleeNumber", pstnCallLogRow.calleeNumber);
    writer.writeStringValue("callerNumber", pstnCallLogRow.callerNumber);
    writer.writeStringValue("callId", pstnCallLogRow.callId);
    writer.writeStringValue("callType", pstnCallLogRow.callType);
    writer.writeNumberValue("charge", pstnCallLogRow.charge);
    writer.writeStringValue("conferenceId", pstnCallLogRow.conferenceId);
    writer.writeNumberValue("connectionCharge", pstnCallLogRow.connectionCharge);
    writer.writeStringValue("currency", pstnCallLogRow.currency);
    writer.writeStringValue("destinationContext", pstnCallLogRow.destinationContext);
    writer.writeStringValue("destinationName", pstnCallLogRow.destinationName);
    writer.writeNumberValue("duration", pstnCallLogRow.duration);
    writer.writeDateValue("endDateTime", pstnCallLogRow.endDateTime);
    writer.writeStringValue("id", pstnCallLogRow.id);
    writer.writeStringValue("inventoryType", pstnCallLogRow.inventoryType);
    writer.writeStringValue("licenseCapability", pstnCallLogRow.licenseCapability);
    writer.writeStringValue("@odata.type", pstnCallLogRow.odataType);
    writer.writeStringValue("operator", pstnCallLogRow.operator);
    writer.writeDateValue("startDateTime", pstnCallLogRow.startDateTime);
    writer.writeStringValue("tenantCountryCode", pstnCallLogRow.tenantCountryCode);
    writer.writeStringValue("usageCountryCode", pstnCallLogRow.usageCountryCode);
    writer.writeStringValue("userDisplayName", pstnCallLogRow.userDisplayName);
    writer.writeStringValue("userId", pstnCallLogRow.userId);
    writer.writeStringValue("userPrincipalName", pstnCallLogRow.userPrincipalName);
    writer.writeAdditionalData(pstnCallLogRow.additionalData);
}
// tslint:enable
// eslint-enable
