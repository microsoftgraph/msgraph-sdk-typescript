// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { FailureStage } from './failureStage';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFailureInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFailureInfo;
}
export function deserializeIntoFailureInfo(failureInfo: FailureInfo | undefined = {} as FailureInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { failureInfo.odataType = n.getStringValue(); },
        "reason": n => { failureInfo.reason = n.getStringValue(); },
        "stage": n => { failureInfo.stage = n.getEnumValue<FailureStage>(FailureStage); },
    }
}
export interface FailureInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Classification of why a call or portion of a call failed.
     */
    reason?: string;
    /**
     * The stage property
     */
    stage?: FailureStage;
}
export function serializeFailureInfo(writer: SerializationWriter, failureInfo: FailureInfo | undefined = {} as FailureInfo) : void {
    writer.writeStringValue("@odata.type", failureInfo.odataType);
    writer.writeStringValue("reason", failureInfo.reason);
    writer.writeEnumValue<FailureStage>("stage", failureInfo.stage);
    writer.writeAdditionalData(failureInfo.additionalData);
}
// tslint:enable
// eslint-enable
