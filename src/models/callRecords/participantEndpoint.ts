// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from '../identitySet';
import { deserializeIntoEndpoint, serializeEndpoint, type Endpoint } from './endpoint';
import { createUserFeedbackFromDiscriminatorValue, serializeUserFeedback, type UserFeedback } from './userFeedback';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createParticipantEndpointFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoParticipantEndpoint;
}
export function deserializeIntoParticipantEndpoint(participantEndpoint: ParticipantEndpoint | undefined = {} as ParticipantEndpoint) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEndpoint(participantEndpoint),
        "cpuCoresCount": n => { participantEndpoint.cpuCoresCount = n.getNumberValue(); },
        "cpuName": n => { participantEndpoint.cpuName = n.getStringValue(); },
        "cpuProcessorSpeedInMhz": n => { participantEndpoint.cpuProcessorSpeedInMhz = n.getNumberValue(); },
        "feedback": n => { participantEndpoint.feedback = n.getObjectValue<UserFeedback>(createUserFeedbackFromDiscriminatorValue); },
        "identity": n => { participantEndpoint.identity = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "name": n => { participantEndpoint.name = n.getStringValue(); },
    }
}
export interface ParticipantEndpoint extends Endpoint, Parsable {
    /**
     * CPU number of cores used by the media endpoint.
     */
    cpuCoresCount?: number;
    /**
     * CPU name used by the media endpoint.
     */
    cpuName?: string;
    /**
     * CPU processor speed used by the media endpoint.
     */
    cpuProcessorSpeedInMhz?: number;
    /**
     * The feedback provided by the user of this endpoint about the quality of the session.
     */
    feedback?: UserFeedback;
    /**
     * Identity associated with the endpoint.
     */
    identity?: IdentitySet;
    /**
     * Name of the device used by the media endpoint.
     */
    name?: string;
}
export function serializeParticipantEndpoint(writer: SerializationWriter, participantEndpoint: ParticipantEndpoint | undefined = {} as ParticipantEndpoint) : void {
        serializeEndpoint(writer, participantEndpoint)
        writer.writeNumberValue("cpuCoresCount", participantEndpoint.cpuCoresCount);
        writer.writeStringValue("cpuName", participantEndpoint.cpuName);
        writer.writeNumberValue("cpuProcessorSpeedInMhz", participantEndpoint.cpuProcessorSpeedInMhz);
        writer.writeObjectValue<UserFeedback>("feedback", participantEndpoint.feedback, serializeUserFeedback);
        writer.writeObjectValue<IdentitySet>("identity", participantEndpoint.identity, serializeIdentitySet);
        writer.writeStringValue("name", participantEndpoint.name);
}
// tslint:enable
// eslint-enable
