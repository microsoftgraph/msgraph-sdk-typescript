// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AlertTrigger extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name of the property serving as a detection trigger.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Type of the property in the key:value pair for interpretation. For example, String, Boolean etc.
     */
    type?: string;
    /**
     * Value of the property serving as a detection trigger.
     */
    value?: string;
}
export function createAlertTriggerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAlertTrigger;
}
export function deserializeIntoAlertTrigger(alertTrigger: AlertTrigger | undefined = {} as AlertTrigger) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { alertTrigger.name = n.getStringValue(); },
        "@odata.type": n => { alertTrigger.odataType = n.getStringValue(); },
        "type": n => { alertTrigger.type = n.getStringValue(); },
        "value": n => { alertTrigger.value = n.getStringValue(); },
    }
}
export function serializeAlertTrigger(writer: SerializationWriter, alertTrigger: AlertTrigger | undefined = {} as AlertTrigger) : void {
    writer.writeStringValue("name", alertTrigger.name);
    writer.writeStringValue("@odata.type", alertTrigger.odataType);
    writer.writeStringValue("type", alertTrigger.type);
    writer.writeStringValue("value", alertTrigger.value);
    writer.writeAdditionalData(alertTrigger.additionalData);
}
// tslint:enable
// eslint-enable
