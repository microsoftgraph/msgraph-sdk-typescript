// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createOptionalClaimFromDiscriminatorValue, serializeOptionalClaim, type OptionalClaim } from './optionalClaim';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOptionalClaimsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOptionalClaims;
}
export function deserializeIntoOptionalClaims(optionalClaims: OptionalClaims | undefined = {} as OptionalClaims) : Record<string, (node: ParseNode) => void> {
    return {
        "accessToken": n => { optionalClaims.accessToken = n.getCollectionOfObjectValues<OptionalClaim>(createOptionalClaimFromDiscriminatorValue); },
        "idToken": n => { optionalClaims.idToken = n.getCollectionOfObjectValues<OptionalClaim>(createOptionalClaimFromDiscriminatorValue); },
        "@odata.type": n => { optionalClaims.odataType = n.getStringValue(); },
        "saml2Token": n => { optionalClaims.saml2Token = n.getCollectionOfObjectValues<OptionalClaim>(createOptionalClaimFromDiscriminatorValue); },
    }
}
export interface OptionalClaims extends AdditionalDataHolder, Parsable {
    /**
     * The optional claims returned in the JWT access token.
     */
    accessToken?: OptionalClaim[];
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The optional claims returned in the JWT ID token.
     */
    idToken?: OptionalClaim[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The optional claims returned in the SAML token.
     */
    saml2Token?: OptionalClaim[];
}
export function serializeOptionalClaims(writer: SerializationWriter, optionalClaims: OptionalClaims | undefined = {} as OptionalClaims) : void {
    writer.writeCollectionOfObjectValues<OptionalClaim>("accessToken", optionalClaims.accessToken, serializeOptionalClaim);
    writer.writeCollectionOfObjectValues<OptionalClaim>("idToken", optionalClaims.idToken, serializeOptionalClaim);
    writer.writeStringValue("@odata.type", optionalClaims.odataType);
    writer.writeCollectionOfObjectValues<OptionalClaim>("saml2Token", optionalClaims.saml2Token, serializeOptionalClaim);
    writer.writeAdditionalData(optionalClaims.additionalData);
}
// tslint:enable
// eslint-enable
