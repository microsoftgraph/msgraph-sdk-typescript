// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AlertDetection extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The detectionType property
     */
    detectionType?: string;
    /**
     * The method property
     */
    method?: string;
    /**
     * The name property
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createAlertDetectionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAlertDetection;
}
export function deserializeIntoAlertDetection(alertDetection: AlertDetection | undefined = {} as AlertDetection) : Record<string, (node: ParseNode) => void> {
    return {
        "detectionType": n => { alertDetection.detectionType = n.getStringValue(); },
        "method": n => { alertDetection.method = n.getStringValue(); },
        "name": n => { alertDetection.name = n.getStringValue(); },
        "@odata.type": n => { alertDetection.odataType = n.getStringValue(); },
    }
}
export function serializeAlertDetection(writer: SerializationWriter, alertDetection: AlertDetection | undefined = {} as AlertDetection) : void {
    writer.writeStringValue("detectionType", alertDetection.detectionType);
    writer.writeStringValue("method", alertDetection.method);
    writer.writeStringValue("name", alertDetection.name);
    writer.writeStringValue("@odata.type", alertDetection.odataType);
    writer.writeAdditionalData(alertDetection.additionalData);
}
// tslint:enable
// eslint-enable
