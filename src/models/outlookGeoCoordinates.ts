// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOutlookGeoCoordinatesFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOutlookGeoCoordinates;
}
export function deserializeIntoOutlookGeoCoordinates(outlookGeoCoordinates: OutlookGeoCoordinates | undefined = {} as OutlookGeoCoordinates) : Record<string, (node: ParseNode) => void> {
    return {
        "accuracy": n => { outlookGeoCoordinates.accuracy = n.getNumberValue(); },
        "altitude": n => { outlookGeoCoordinates.altitude = n.getNumberValue(); },
        "altitudeAccuracy": n => { outlookGeoCoordinates.altitudeAccuracy = n.getNumberValue(); },
        "latitude": n => { outlookGeoCoordinates.latitude = n.getNumberValue(); },
        "longitude": n => { outlookGeoCoordinates.longitude = n.getNumberValue(); },
        "@odata.type": n => { outlookGeoCoordinates.odataType = n.getStringValue(); },
    }
}
export interface OutlookGeoCoordinates extends AdditionalDataHolder, Parsable {
    /**
     * The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude and longitude are accurate to within 50 meters.
     */
    accuracy?: number;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The altitude of the location.
     */
    altitude?: number;
    /**
     * The accuracy of the altitude.
     */
    altitudeAccuracy?: number;
    /**
     * The latitude of the location.
     */
    latitude?: number;
    /**
     * The longitude of the location.
     */
    longitude?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeOutlookGeoCoordinates(writer: SerializationWriter, outlookGeoCoordinates: OutlookGeoCoordinates | undefined = {} as OutlookGeoCoordinates) : void {
    writer.writeNumberValue("accuracy", outlookGeoCoordinates.accuracy);
    writer.writeNumberValue("altitude", outlookGeoCoordinates.altitude);
    writer.writeNumberValue("altitudeAccuracy", outlookGeoCoordinates.altitudeAccuracy);
    writer.writeNumberValue("latitude", outlookGeoCoordinates.latitude);
    writer.writeNumberValue("longitude", outlookGeoCoordinates.longitude);
    writer.writeStringValue("@odata.type", outlookGeoCoordinates.odataType);
    writer.writeAdditionalData(outlookGeoCoordinates.additionalData);
}
// tslint:enable
// eslint-enable
