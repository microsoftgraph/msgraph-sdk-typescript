// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAzureActiveDirectoryTenant } from './azureActiveDirectoryTenant';
import { deserializeIntoCrossCloudAzureActiveDirectoryTenant } from './crossCloudAzureActiveDirectoryTenant';
import { deserializeIntoDomainIdentitySource } from './domainIdentitySource';
import { deserializeIntoExternalDomainFederation } from './externalDomainFederation';
import { type AzureActiveDirectoryTenant, type CrossCloudAzureActiveDirectoryTenant, type DomainIdentitySource, type ExternalDomainFederation } from './index';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIdentitySourceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.azureActiveDirectoryTenant":
                    return deserializeIntoAzureActiveDirectoryTenant;
                case "#microsoft.graph.crossCloudAzureActiveDirectoryTenant":
                    return deserializeIntoCrossCloudAzureActiveDirectoryTenant;
                case "#microsoft.graph.domainIdentitySource":
                    return deserializeIntoDomainIdentitySource;
                case "#microsoft.graph.externalDomainFederation":
                    return deserializeIntoExternalDomainFederation;
            }
        }
    }
    return deserializeIntoIdentitySource;
}
export function deserializeIntoIdentitySource(identitySource: IdentitySource | undefined = {} as IdentitySource) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { identitySource.odataType = n.getStringValue(); },
    }
}
export interface IdentitySource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeIdentitySource(writer: SerializationWriter, identitySource: IdentitySource | undefined = {} as IdentitySource) : void {
    writer.writeStringValue("@odata.type", identitySource.odataType);
    writer.writeAdditionalData(identitySource.additionalData);
}
// tslint:enable
// eslint-enable
