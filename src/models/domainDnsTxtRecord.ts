import { deserializeIntoDomainDnsRecord, serializeDomainDnsRecord, type DomainDnsRecord } from './domainDnsRecord';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createDomainDnsTxtRecordFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDomainDnsTxtRecord;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoDomainDnsTxtRecord(domainDnsTxtRecord: DomainDnsTxtRecord | undefined = {} as DomainDnsTxtRecord) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDomainDnsRecord(domainDnsTxtRecord),
        "text": n => { domainDnsTxtRecord.text = n.getStringValue(); },
    }
}
export interface DomainDnsTxtRecord extends DomainDnsRecord, Parsable {
    /**
     * Value used when configuring the text property at the DNS host.
     */
    text?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeDomainDnsTxtRecord(writer: SerializationWriter, domainDnsTxtRecord: DomainDnsTxtRecord | undefined = {} as DomainDnsTxtRecord) : void {
        serializeDomainDnsRecord(writer, domainDnsTxtRecord)
        writer.writeStringValue("text", domainDnsTxtRecord.text);
}
