// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConditionalAccessFilterFromDiscriminatorValue, serializeConditionalAccessFilter, type ConditionalAccessFilter } from './conditionalAccessFilter';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessClientApplications extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Service principal IDs excluded from the policy scope.
     */
    excludeServicePrincipals?: string[];
    /**
     * Service principal IDs included in the policy scope, or ServicePrincipalsInMyTenant.
     */
    includeServicePrincipals?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The servicePrincipalFilter property
     */
    servicePrincipalFilter?: ConditionalAccessFilter;
}
export function createConditionalAccessClientApplicationsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessClientApplications;
}
export function deserializeIntoConditionalAccessClientApplications(conditionalAccessClientApplications: ConditionalAccessClientApplications | undefined = {} as ConditionalAccessClientApplications) : Record<string, (node: ParseNode) => void> {
    return {
        "excludeServicePrincipals": n => { conditionalAccessClientApplications.excludeServicePrincipals = n.getCollectionOfPrimitiveValues<string>(); },
        "includeServicePrincipals": n => { conditionalAccessClientApplications.includeServicePrincipals = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { conditionalAccessClientApplications.odataType = n.getStringValue(); },
        "servicePrincipalFilter": n => { conditionalAccessClientApplications.servicePrincipalFilter = n.getObjectValue<ConditionalAccessFilter>(createConditionalAccessFilterFromDiscriminatorValue); },
    }
}
export function serializeConditionalAccessClientApplications(writer: SerializationWriter, conditionalAccessClientApplications: ConditionalAccessClientApplications | undefined = {} as ConditionalAccessClientApplications) : void {
    writer.writeCollectionOfPrimitiveValues<string>("excludeServicePrincipals", conditionalAccessClientApplications.excludeServicePrincipals);
    writer.writeCollectionOfPrimitiveValues<string>("includeServicePrincipals", conditionalAccessClientApplications.includeServicePrincipals);
    writer.writeStringValue("@odata.type", conditionalAccessClientApplications.odataType);
    writer.writeObjectValue<ConditionalAccessFilter>("servicePrincipalFilter", conditionalAccessClientApplications.servicePrincipalFilter, serializeConditionalAccessFilter);
    writer.writeAdditionalData(conditionalAccessClientApplications.additionalData);
}
// tslint:enable
// eslint-enable
