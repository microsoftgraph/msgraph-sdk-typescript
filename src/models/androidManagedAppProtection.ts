// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createManagedAppPolicyDeploymentSummaryFromDiscriminatorValue, serializeManagedAppPolicyDeploymentSummary, type ManagedAppPolicyDeploymentSummary } from './managedAppPolicyDeploymentSummary';
import { createManagedMobileAppFromDiscriminatorValue, serializeManagedMobileApp, type ManagedMobileApp } from './managedMobileApp';
import { deserializeIntoTargetedManagedAppProtection, serializeTargetedManagedAppProtection, type TargetedManagedAppProtection } from './targetedManagedAppProtection';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AndroidManagedAppProtection extends Parsable, TargetedManagedAppProtection {
    /**
     * List of apps to which the policy is deployed.
     */
    apps?: ManagedMobileApp[];
    /**
     * Friendly name of the preferred custom browser to open weblink on Android. When this property is configured, ManagedBrowserToOpenLinksRequired should be true.
     */
    customBrowserDisplayName?: string;
    /**
     * Unique identifier of the preferred custom browser to open weblink on Android. When this property is configured, ManagedBrowserToOpenLinksRequired should be true.
     */
    customBrowserPackageId?: string;
    /**
     * Count of apps to which the current policy is deployed.
     */
    deployedAppCount?: number;
    /**
     * Navigation property to deployment summary of the configuration.
     */
    deploymentSummary?: ManagedAppPolicyDeploymentSummary;
    /**
     * When this setting is enabled, app level encryption is disabled if device level encryption is enabled
     */
    disableAppEncryptionIfDeviceEncryptionIsEnabled?: boolean;
    /**
     * Indicates whether application data for managed apps should be encrypted
     */
    encryptAppData?: boolean;
    /**
     * Define the oldest required Android security patch level a user can have to gain secure access to the app.
     */
    minimumRequiredPatchVersion?: string;
    /**
     * Define the oldest recommended Android security patch level a user can have for secure access to the app.
     */
    minimumWarningPatchVersion?: string;
    /**
     * Indicates whether a managed user can take screen captures of managed apps
     */
    screenCaptureBlocked?: boolean;
}
export function createAndroidManagedAppProtectionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAndroidManagedAppProtection;
}
export function deserializeIntoAndroidManagedAppProtection(androidManagedAppProtection: AndroidManagedAppProtection | undefined = {} as AndroidManagedAppProtection) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoTargetedManagedAppProtection(androidManagedAppProtection),
        "apps": n => { androidManagedAppProtection.apps = n.getCollectionOfObjectValues<ManagedMobileApp>(createManagedMobileAppFromDiscriminatorValue); },
        "customBrowserDisplayName": n => { androidManagedAppProtection.customBrowserDisplayName = n.getStringValue(); },
        "customBrowserPackageId": n => { androidManagedAppProtection.customBrowserPackageId = n.getStringValue(); },
        "deployedAppCount": n => { androidManagedAppProtection.deployedAppCount = n.getNumberValue(); },
        "deploymentSummary": n => { androidManagedAppProtection.deploymentSummary = n.getObjectValue<ManagedAppPolicyDeploymentSummary>(createManagedAppPolicyDeploymentSummaryFromDiscriminatorValue); },
        "disableAppEncryptionIfDeviceEncryptionIsEnabled": n => { androidManagedAppProtection.disableAppEncryptionIfDeviceEncryptionIsEnabled = n.getBooleanValue(); },
        "encryptAppData": n => { androidManagedAppProtection.encryptAppData = n.getBooleanValue(); },
        "minimumRequiredPatchVersion": n => { androidManagedAppProtection.minimumRequiredPatchVersion = n.getStringValue(); },
        "minimumWarningPatchVersion": n => { androidManagedAppProtection.minimumWarningPatchVersion = n.getStringValue(); },
        "screenCaptureBlocked": n => { androidManagedAppProtection.screenCaptureBlocked = n.getBooleanValue(); },
    }
}
export function serializeAndroidManagedAppProtection(writer: SerializationWriter, androidManagedAppProtection: AndroidManagedAppProtection | undefined = {} as AndroidManagedAppProtection) : void {
        serializeTargetedManagedAppProtection(writer, androidManagedAppProtection)
        writer.writeCollectionOfObjectValues<ManagedMobileApp>("apps", androidManagedAppProtection.apps, );
        writer.writeStringValue("customBrowserDisplayName", androidManagedAppProtection.customBrowserDisplayName);
        writer.writeStringValue("customBrowserPackageId", androidManagedAppProtection.customBrowserPackageId);
        writer.writeNumberValue("deployedAppCount", androidManagedAppProtection.deployedAppCount);
        writer.writeObjectValue<ManagedAppPolicyDeploymentSummary>("deploymentSummary", androidManagedAppProtection.deploymentSummary, );
        writer.writeBooleanValue("disableAppEncryptionIfDeviceEncryptionIsEnabled", androidManagedAppProtection.disableAppEncryptionIfDeviceEncryptionIsEnabled);
        writer.writeBooleanValue("encryptAppData", androidManagedAppProtection.encryptAppData);
        writer.writeStringValue("minimumRequiredPatchVersion", androidManagedAppProtection.minimumRequiredPatchVersion);
        writer.writeStringValue("minimumWarningPatchVersion", androidManagedAppProtection.minimumWarningPatchVersion);
        writer.writeBooleanValue("screenCaptureBlocked", androidManagedAppProtection.screenCaptureBlocked);
}
// tslint:enable
// eslint-enable
