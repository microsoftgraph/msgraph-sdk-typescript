// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createKeyCredentialConfigurationFromDiscriminatorValue, serializeKeyCredentialConfiguration, type KeyCredentialConfiguration } from './keyCredentialConfiguration';
import { createPasswordCredentialConfigurationFromDiscriminatorValue, serializePasswordCredentialConfiguration, type PasswordCredentialConfiguration } from './passwordCredentialConfiguration';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AppManagementConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Collection of keyCredential restrictions settings to be applied to an application or service principal.
     */
    keyCredentials?: KeyCredentialConfiguration[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Collection of password restrictions settings to be applied to an application or service principal.
     */
    passwordCredentials?: PasswordCredentialConfiguration[];
}
export function createAppManagementConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAppManagementConfiguration;
}
export function deserializeIntoAppManagementConfiguration(appManagementConfiguration: AppManagementConfiguration | undefined = {} as AppManagementConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        "keyCredentials": n => { appManagementConfiguration.keyCredentials = n.getCollectionOfObjectValues<KeyCredentialConfiguration>(createKeyCredentialConfigurationFromDiscriminatorValue); },
        "@odata.type": n => { appManagementConfiguration.odataType = n.getStringValue(); },
        "passwordCredentials": n => { appManagementConfiguration.passwordCredentials = n.getCollectionOfObjectValues<PasswordCredentialConfiguration>(createPasswordCredentialConfigurationFromDiscriminatorValue); },
    }
}
export function serializeAppManagementConfiguration(writer: SerializationWriter, appManagementConfiguration: AppManagementConfiguration | undefined = {} as AppManagementConfiguration) : void {
        writer.writeCollectionOfObjectValues<KeyCredentialConfiguration>("keyCredentials", appManagementConfiguration.keyCredentials, serializeKeyCredentialConfiguration);
        writer.writeStringValue("@odata.type", appManagementConfiguration.odataType);
        writer.writeCollectionOfObjectValues<PasswordCredentialConfiguration>("passwordCredentials", appManagementConfiguration.passwordCredentials, serializePasswordCredentialConfiguration);
        writer.writeAdditionalData(appManagementConfiguration.additionalData);
}
// tslint:enable
// eslint-enable
