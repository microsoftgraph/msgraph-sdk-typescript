// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createMacOSIncludedAppFromDiscriminatorValue, serializeMacOSIncludedApp, type MacOSIncludedApp } from './macOSIncludedApp';
import { createMacOSMinimumOperatingSystemFromDiscriminatorValue, serializeMacOSMinimumOperatingSystem, type MacOSMinimumOperatingSystem } from './macOSMinimumOperatingSystem';
import { deserializeIntoMobileLobApp, serializeMobileLobApp, type MobileLobApp } from './mobileLobApp';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMacOSDmgAppFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMacOSDmgApp;
}
export function deserializeIntoMacOSDmgApp(macOSDmgApp: MacOSDmgApp | undefined = {} as MacOSDmgApp) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMobileLobApp(macOSDmgApp),
        "ignoreVersionDetection": n => { macOSDmgApp.ignoreVersionDetection = n.getBooleanValue(); },
        "includedApps": n => { macOSDmgApp.includedApps = n.getCollectionOfObjectValues<MacOSIncludedApp>(createMacOSIncludedAppFromDiscriminatorValue); },
        "minimumSupportedOperatingSystem": n => { macOSDmgApp.minimumSupportedOperatingSystem = n.getObjectValue<MacOSMinimumOperatingSystem>(createMacOSMinimumOperatingSystemFromDiscriminatorValue); },
        "primaryBundleId": n => { macOSDmgApp.primaryBundleId = n.getStringValue(); },
        "primaryBundleVersion": n => { macOSDmgApp.primaryBundleVersion = n.getStringValue(); },
    }
}
export interface MacOSDmgApp extends MobileLobApp, Parsable {
    /**
     * When TRUE, indicates that the app's version will NOT be used to detect if the app is installed on a device. When FALSE, indicates that the app's version will be used to detect if the app is installed on a device. Set this to true for apps that use a self update feature. The default value is FALSE.
     */
    ignoreVersionDetection?: boolean;
    /**
     * The list of .apps expected to be installed by the DMG (Apple Disk Image)
     */
    includedApps?: MacOSIncludedApp[];
    /**
     * ComplexType macOSMinimumOperatingSystem that indicates the minimum operating system applicable for the application.
     */
    minimumSupportedOperatingSystem?: MacOSMinimumOperatingSystem;
    /**
     * The bundleId of the primary .app in the DMG (Apple Disk Image). This maps to the CFBundleIdentifier in the app's bundle configuration.
     */
    primaryBundleId?: string;
    /**
     * The version of the primary .app in the DMG (Apple Disk Image). This maps to the CFBundleShortVersion in the app's bundle configuration.
     */
    primaryBundleVersion?: string;
}
export function serializeMacOSDmgApp(writer: SerializationWriter, macOSDmgApp: MacOSDmgApp | undefined = {} as MacOSDmgApp) : void {
        serializeMobileLobApp(writer, macOSDmgApp)
        writer.writeBooleanValue("ignoreVersionDetection", macOSDmgApp.ignoreVersionDetection);
        writer.writeCollectionOfObjectValues<MacOSIncludedApp>("includedApps", macOSDmgApp.includedApps, );
        writer.writeObjectValue<MacOSMinimumOperatingSystem>("minimumSupportedOperatingSystem", macOSDmgApp.minimumSupportedOperatingSystem, );
        writer.writeStringValue("primaryBundleId", macOSDmgApp.primaryBundleId);
        writer.writeStringValue("primaryBundleVersion", macOSDmgApp.primaryBundleVersion);
}
// tslint:enable
// eslint-enable
