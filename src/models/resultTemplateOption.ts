// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createResultTemplateOptionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoResultTemplateOption;
}
export function deserializeIntoResultTemplateOption(resultTemplateOption: ResultTemplateOption | undefined = {} as ResultTemplateOption) : Record<string, (node: ParseNode) => void> {
    return {
        "enableResultTemplate": n => { resultTemplateOption.enableResultTemplate = n.getBooleanValue(); },
        "@odata.type": n => { resultTemplateOption.odataType = n.getStringValue(); },
    }
}
export interface ResultTemplateOption extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates whether search display layouts are enabled. If enabled, the user will get the result template to render the search results content in the resultTemplates property of the response. The result template is based on Adaptive Cards. Optional.
     */
    enableResultTemplate?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeResultTemplateOption(writer: SerializationWriter, resultTemplateOption: ResultTemplateOption | undefined = {} as ResultTemplateOption) : void {
    writer.writeBooleanValue("enableResultTemplate", resultTemplateOption.enableResultTemplate);
    writer.writeStringValue("@odata.type", resultTemplateOption.odataType);
    writer.writeAdditionalData(resultTemplateOption.additionalData);
}
// tslint:enable
// eslint-enable
