// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createExtensionSchemaPropertyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoExtensionSchemaProperty;
}
export function deserializeIntoExtensionSchemaProperty(extensionSchemaProperty: ExtensionSchemaProperty | undefined = {} as ExtensionSchemaProperty) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { extensionSchemaProperty.name = n.getStringValue(); },
        "@odata.type": n => { extensionSchemaProperty.odataType = n.getStringValue(); },
        "type": n => { extensionSchemaProperty.type = n.getStringValue(); },
    }
}
export interface ExtensionSchemaProperty extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name of the strongly typed property defined as part of a schema extension.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The type of the property that is defined as part of a schema extension.  Allowed values are Binary, Boolean, DateTime, Integer or String. See the table in the Supported property data types section for more details.
     */
    type?: string;
}
export function serializeExtensionSchemaProperty(writer: SerializationWriter, extensionSchemaProperty: ExtensionSchemaProperty | undefined = {} as ExtensionSchemaProperty) : void {
    writer.writeStringValue("name", extensionSchemaProperty.name);
    writer.writeStringValue("@odata.type", extensionSchemaProperty.odataType);
    writer.writeStringValue("type", extensionSchemaProperty.type);
    writer.writeAdditionalData(extensionSchemaProperty.additionalData);
}
// tslint:enable
// eslint-enable
