import { deserializeIntoConditionalAccessSessionControl, serializeConditionalAccessSessionControl, type ConditionalAccessSessionControl } from './conditionalAccessSessionControl';
import { PersistentBrowserSessionMode } from './persistentBrowserSessionMode';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createPersistentBrowserSessionControlFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPersistentBrowserSessionControl;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoPersistentBrowserSessionControl(persistentBrowserSessionControl: PersistentBrowserSessionControl | undefined = {} as PersistentBrowserSessionControl) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoConditionalAccessSessionControl(persistentBrowserSessionControl),
        "mode": n => { persistentBrowserSessionControl.mode = n.getEnumValue<PersistentBrowserSessionMode>(PersistentBrowserSessionMode); },
    }
}
export interface PersistentBrowserSessionControl extends ConditionalAccessSessionControl, Parsable {
    /**
     * Possible values are: always, never.
     */
    mode?: PersistentBrowserSessionMode;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializePersistentBrowserSessionControl(writer: SerializationWriter, persistentBrowserSessionControl: PersistentBrowserSessionControl | undefined = {} as PersistentBrowserSessionControl) : void {
        serializeConditionalAccessSessionControl(writer, persistentBrowserSessionControl)
        writer.writeEnumValue<PersistentBrowserSessionMode>("mode", persistentBrowserSessionControl.mode);
}
