// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AppScope extends Entity, Parsable {
    /**
     * Provides the display name of the app-specific resource represented by the app scope. Provided for display purposes since appScopeId is often an immutable, non-human-readable id. Read-only.
     */
    displayName?: string;
    /**
     * Describes the type of app-specific resource represented by the app scope and is provided for display purposes, so a user interface can convey to the user the kind of app specific resource represented by the app scope. Read-only.
     */
    type?: string;
}
export function createAppScopeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAppScope;
}
export function deserializeIntoAppScope(appScope: AppScope | undefined = {} as AppScope) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(appScope),
        "displayName": n => { appScope.displayName = n.getStringValue(); },
        "type": n => { appScope.type = n.getStringValue(); },
    }
}
export function serializeAppScope(writer: SerializationWriter, appScope: AppScope | undefined = {} as AppScope) : void {
        serializeEntity(writer, appScope)
        writer.writeStringValue("displayName", appScope.displayName);
        writer.writeStringValue("type", appScope.type);
}
// tslint:enable
// eslint-enable
