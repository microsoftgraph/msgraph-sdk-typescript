// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserExperienceAnalyticsAppHealthApplicationPerformanceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserExperienceAnalyticsAppHealthApplicationPerformance;
}
export function deserializeIntoUserExperienceAnalyticsAppHealthApplicationPerformance(userExperienceAnalyticsAppHealthApplicationPerformance: UserExperienceAnalyticsAppHealthApplicationPerformance | undefined = {} as UserExperienceAnalyticsAppHealthApplicationPerformance) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(userExperienceAnalyticsAppHealthApplicationPerformance),
        "activeDeviceCount": n => { userExperienceAnalyticsAppHealthApplicationPerformance.activeDeviceCount = n.getNumberValue(); },
        "appCrashCount": n => { userExperienceAnalyticsAppHealthApplicationPerformance.appCrashCount = n.getNumberValue(); },
        "appDisplayName": n => { userExperienceAnalyticsAppHealthApplicationPerformance.appDisplayName = n.getStringValue(); },
        "appHangCount": n => { userExperienceAnalyticsAppHealthApplicationPerformance.appHangCount = n.getNumberValue(); },
        "appHealthScore": n => { userExperienceAnalyticsAppHealthApplicationPerformance.appHealthScore = n.getNumberValue(); },
        "appName": n => { userExperienceAnalyticsAppHealthApplicationPerformance.appName = n.getStringValue(); },
        "appPublisher": n => { userExperienceAnalyticsAppHealthApplicationPerformance.appPublisher = n.getStringValue(); },
        "appUsageDuration": n => { userExperienceAnalyticsAppHealthApplicationPerformance.appUsageDuration = n.getNumberValue(); },
        "meanTimeToFailureInMinutes": n => { userExperienceAnalyticsAppHealthApplicationPerformance.meanTimeToFailureInMinutes = n.getNumberValue(); },
    }
}
export function serializeUserExperienceAnalyticsAppHealthApplicationPerformance(writer: SerializationWriter, userExperienceAnalyticsAppHealthApplicationPerformance: UserExperienceAnalyticsAppHealthApplicationPerformance | undefined = {} as UserExperienceAnalyticsAppHealthApplicationPerformance) : void {
    serializeEntity(writer, userExperienceAnalyticsAppHealthApplicationPerformance)
    writer.writeNumberValue("activeDeviceCount", userExperienceAnalyticsAppHealthApplicationPerformance.activeDeviceCount);
    writer.writeNumberValue("appCrashCount", userExperienceAnalyticsAppHealthApplicationPerformance.appCrashCount);
    writer.writeStringValue("appDisplayName", userExperienceAnalyticsAppHealthApplicationPerformance.appDisplayName);
    writer.writeNumberValue("appHangCount", userExperienceAnalyticsAppHealthApplicationPerformance.appHangCount);
    writer.writeNumberValue("appHealthScore", userExperienceAnalyticsAppHealthApplicationPerformance.appHealthScore);
    writer.writeStringValue("appName", userExperienceAnalyticsAppHealthApplicationPerformance.appName);
    writer.writeStringValue("appPublisher", userExperienceAnalyticsAppHealthApplicationPerformance.appPublisher);
    writer.writeNumberValue("appUsageDuration", userExperienceAnalyticsAppHealthApplicationPerformance.appUsageDuration);
    writer.writeNumberValue("meanTimeToFailureInMinutes", userExperienceAnalyticsAppHealthApplicationPerformance.meanTimeToFailureInMinutes);
}
export interface UserExperienceAnalyticsAppHealthApplicationPerformance extends Entity, Parsable {
    /**
     * The health score of the application. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
     */
    activeDeviceCount?: number;
    /**
     * The number of crashes for the application. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
     */
    appCrashCount?: number;
    /**
     * The friendly name of the application. Possible values are: Outlook, Excel. Supports: $select, $OrderBy. Read-only.
     */
    appDisplayName?: string;
    /**
     * The number of hangs for the application. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
     */
    appHangCount?: number;
    /**
     * The health score of the application. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
     */
    appHealthScore?: number;
    /**
     * The name of the application. Possible values are: outlook.exe, excel.exe. Supports: $select, $OrderBy. Read-only.
     */
    appName?: string;
    /**
     * The publisher of the application. Supports: $select, $OrderBy. Read-only.
     */
    appPublisher?: string;
    /**
     * The total usage time of the application in minutes. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
     */
    appUsageDuration?: number;
    /**
     * The mean time to failure for the application in minutes. Valid values 0 to 2147483647. Supports: $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
     */
    meanTimeToFailureInMinutes?: number;
}
// tslint:enable
// eslint-enable
