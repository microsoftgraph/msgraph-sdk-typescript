// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type PrivilegedAccessGroupAssignmentSchedule, type PrivilegedAccessGroupEligibilitySchedule } from './index';
import { deserializeIntoPrivilegedAccessGroupAssignmentSchedule } from './privilegedAccessGroupAssignmentSchedule';
import { deserializeIntoPrivilegedAccessGroupEligibilitySchedule } from './privilegedAccessGroupEligibilitySchedule';
import { createRequestScheduleFromDiscriminatorValue, serializeRequestSchedule, type RequestSchedule } from './requestSchedule';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrivilegedAccessScheduleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.privilegedAccessGroupAssignmentSchedule":
                    return deserializeIntoPrivilegedAccessGroupAssignmentSchedule;
                case "#microsoft.graph.privilegedAccessGroupEligibilitySchedule":
                    return deserializeIntoPrivilegedAccessGroupEligibilitySchedule;
            }
        }
    }
    return deserializeIntoPrivilegedAccessSchedule;
}
export function deserializeIntoPrivilegedAccessSchedule(privilegedAccessSchedule: PrivilegedAccessSchedule | undefined = {} as PrivilegedAccessSchedule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(privilegedAccessSchedule),
        "createdDateTime": n => { privilegedAccessSchedule.createdDateTime = n.getDateValue(); },
        "createdUsing": n => { privilegedAccessSchedule.createdUsing = n.getStringValue(); },
        "modifiedDateTime": n => { privilegedAccessSchedule.modifiedDateTime = n.getDateValue(); },
        "scheduleInfo": n => { privilegedAccessSchedule.scheduleInfo = n.getObjectValue<RequestSchedule>(createRequestScheduleFromDiscriminatorValue); },
        "status": n => { privilegedAccessSchedule.status = n.getStringValue(); },
    }
}
export interface PrivilegedAccessSchedule extends Entity, Parsable {
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The createdUsing property
     */
    createdUsing?: string;
    /**
     * The modifiedDateTime property
     */
    modifiedDateTime?: Date;
    /**
     * The scheduleInfo property
     */
    scheduleInfo?: RequestSchedule;
    /**
     * The status property
     */
    status?: string;
}
export function serializePrivilegedAccessSchedule(writer: SerializationWriter, privilegedAccessSchedule: PrivilegedAccessSchedule | undefined = {} as PrivilegedAccessSchedule) : void {
        serializeEntity(writer, privilegedAccessSchedule)
        writer.writeDateValue("createdDateTime", privilegedAccessSchedule.createdDateTime);
        writer.writeStringValue("createdUsing", privilegedAccessSchedule.createdUsing);
        writer.writeDateValue("modifiedDateTime", privilegedAccessSchedule.modifiedDateTime);
        writer.writeObjectValue<RequestSchedule>("scheduleInfo", privilegedAccessSchedule.scheduleInfo, );
        writer.writeStringValue("status", privilegedAccessSchedule.status);
}
// tslint:enable
// eslint-enable
