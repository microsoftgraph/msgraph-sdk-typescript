// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoConditionalAccessAllExternalTenants } from './conditionalAccessAllExternalTenants';
import { deserializeIntoConditionalAccessEnumeratedExternalTenants } from './conditionalAccessEnumeratedExternalTenants';
import { ConditionalAccessExternalTenantsMembershipKind } from './conditionalAccessExternalTenantsMembershipKind';
import { type ConditionalAccessAllExternalTenants, type ConditionalAccessEnumeratedExternalTenants } from './index';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessExternalTenants extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The membership kind. Possible values are: all, enumerated, unknownFutureValue. The enumerated member references an conditionalAccessEnumeratedExternalTenants object.
     */
    membershipKind?: ConditionalAccessExternalTenantsMembershipKind;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createConditionalAccessExternalTenantsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.conditionalAccessAllExternalTenants":
                    return deserializeIntoConditionalAccessAllExternalTenants;
                case "#microsoft.graph.conditionalAccessEnumeratedExternalTenants":
                    return deserializeIntoConditionalAccessEnumeratedExternalTenants;
            }
        }
    }
    return deserializeIntoConditionalAccessExternalTenants;
}
export function deserializeIntoConditionalAccessExternalTenants(conditionalAccessExternalTenants: ConditionalAccessExternalTenants | undefined = {} as ConditionalAccessExternalTenants) : Record<string, (node: ParseNode) => void> {
    return {
        "membershipKind": n => { conditionalAccessExternalTenants.membershipKind = n.getEnumValue<ConditionalAccessExternalTenantsMembershipKind>(ConditionalAccessExternalTenantsMembershipKind); },
        "@odata.type": n => { conditionalAccessExternalTenants.odataType = n.getStringValue(); },
    }
}
export function serializeConditionalAccessExternalTenants(writer: SerializationWriter, conditionalAccessExternalTenants: ConditionalAccessExternalTenants | undefined = {} as ConditionalAccessExternalTenants) : void {
    writer.writeEnumValue<ConditionalAccessExternalTenantsMembershipKind>("membershipKind", conditionalAccessExternalTenants.membershipKind);
    writer.writeStringValue("@odata.type", conditionalAccessExternalTenants.odataType);
    writer.writeAdditionalData(conditionalAccessExternalTenants.additionalData);
}
// tslint:enable
// eslint-enable
