import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createPreAuthorizedApplicationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPreAuthorizedApplication;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoPreAuthorizedApplication(preAuthorizedApplication: PreAuthorizedApplication | undefined = {} as PreAuthorizedApplication) : Record<string, (node: ParseNode) => void> {
    return {
        "appId": n => { preAuthorizedApplication.appId = n.getStringValue(); },
        "delegatedPermissionIds": n => { preAuthorizedApplication.delegatedPermissionIds = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { preAuthorizedApplication.odataType = n.getStringValue(); },
    }
}
export interface PreAuthorizedApplication extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The unique identifier for the application.
     */
    appId?: string;
    /**
     * The unique identifier for the oauth2PermissionScopes the application requires.
     */
    delegatedPermissionIds?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializePreAuthorizedApplication(writer: SerializationWriter, preAuthorizedApplication: PreAuthorizedApplication | undefined = {} as PreAuthorizedApplication) : void {
        writer.writeStringValue("appId", preAuthorizedApplication.appId);
        writer.writeCollectionOfPrimitiveValues<string>("delegatedPermissionIds", preAuthorizedApplication.delegatedPermissionIds);
        writer.writeStringValue("@odata.type", preAuthorizedApplication.odataType);
        writer.writeAdditionalData(preAuthorizedApplication.additionalData);
}
