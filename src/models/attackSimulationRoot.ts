// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttackSimulationOperationFromDiscriminatorValue, serializeAttackSimulationOperation, type AttackSimulationOperation } from './attackSimulationOperation';
import { createEndUserNotificationFromDiscriminatorValue, serializeEndUserNotification, type EndUserNotification } from './endUserNotification';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createLandingPageFromDiscriminatorValue, serializeLandingPage, type LandingPage } from './landingPage';
import { createLoginPageFromDiscriminatorValue, serializeLoginPage, type LoginPage } from './loginPage';
import { createPayloadFromDiscriminatorValue, serializePayload, type Payload } from './payload';
import { createSimulationFromDiscriminatorValue, serializeSimulation, type Simulation } from './simulation';
import { createSimulationAutomationFromDiscriminatorValue, serializeSimulationAutomation, type SimulationAutomation } from './simulationAutomation';
import { createTrainingFromDiscriminatorValue, serializeTraining, type Training } from './training';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttackSimulationRoot extends Entity, Parsable {
    /**
     * Represents an end user's notification for an attack simulation training.
     */
    endUserNotifications?: EndUserNotification[];
    /**
     * Represents an attack simulation training landing page.
     */
    landingPages?: LandingPage[];
    /**
     * Represents an attack simulation training login page.
     */
    loginPages?: LoginPage[];
    /**
     * Represents an attack simulation training operation.
     */
    operations?: AttackSimulationOperation[];
    /**
     * Represents an attack simulation training campaign payload in a tenant.
     */
    payloads?: Payload[];
    /**
     * Represents simulation automation created to run on a tenant.
     */
    simulationAutomations?: SimulationAutomation[];
    /**
     * Represents an attack simulation training campaign in a tenant.
     */
    simulations?: Simulation[];
    /**
     * Represents details about attack simulation trainings.
     */
    trainings?: Training[];
}
export function createAttackSimulationRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttackSimulationRoot;
}
export function deserializeIntoAttackSimulationRoot(attackSimulationRoot: AttackSimulationRoot | undefined = {} as AttackSimulationRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(attackSimulationRoot),
        "endUserNotifications": n => { attackSimulationRoot.endUserNotifications = n.getCollectionOfObjectValues<EndUserNotification>(createEndUserNotificationFromDiscriminatorValue); },
        "landingPages": n => { attackSimulationRoot.landingPages = n.getCollectionOfObjectValues<LandingPage>(createLandingPageFromDiscriminatorValue); },
        "loginPages": n => { attackSimulationRoot.loginPages = n.getCollectionOfObjectValues<LoginPage>(createLoginPageFromDiscriminatorValue); },
        "operations": n => { attackSimulationRoot.operations = n.getCollectionOfObjectValues<AttackSimulationOperation>(createAttackSimulationOperationFromDiscriminatorValue); },
        "payloads": n => { attackSimulationRoot.payloads = n.getCollectionOfObjectValues<Payload>(createPayloadFromDiscriminatorValue); },
        "simulationAutomations": n => { attackSimulationRoot.simulationAutomations = n.getCollectionOfObjectValues<SimulationAutomation>(createSimulationAutomationFromDiscriminatorValue); },
        "simulations": n => { attackSimulationRoot.simulations = n.getCollectionOfObjectValues<Simulation>(createSimulationFromDiscriminatorValue); },
        "trainings": n => { attackSimulationRoot.trainings = n.getCollectionOfObjectValues<Training>(createTrainingFromDiscriminatorValue); },
    }
}
export function serializeAttackSimulationRoot(writer: SerializationWriter, attackSimulationRoot: AttackSimulationRoot | undefined = {} as AttackSimulationRoot) : void {
        serializeEntity(writer, attackSimulationRoot)
        writer.writeCollectionOfObjectValues<EndUserNotification>("endUserNotifications", attackSimulationRoot.endUserNotifications, serializeEndUserNotification);
        writer.writeCollectionOfObjectValues<LandingPage>("landingPages", attackSimulationRoot.landingPages, serializeLandingPage);
        writer.writeCollectionOfObjectValues<LoginPage>("loginPages", attackSimulationRoot.loginPages, serializeLoginPage);
        writer.writeCollectionOfObjectValues<AttackSimulationOperation>("operations", attackSimulationRoot.operations, serializeAttackSimulationOperation);
        writer.writeCollectionOfObjectValues<Payload>("payloads", attackSimulationRoot.payloads, serializePayload);
        writer.writeCollectionOfObjectValues<SimulationAutomation>("simulationAutomations", attackSimulationRoot.simulationAutomations, serializeSimulationAutomation);
        writer.writeCollectionOfObjectValues<Simulation>("simulations", attackSimulationRoot.simulations, serializeSimulation);
        writer.writeCollectionOfObjectValues<Training>("trainings", attackSimulationRoot.trainings, serializeTraining);
}
// tslint:enable
// eslint-enable
