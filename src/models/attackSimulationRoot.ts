import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createSimulationFromDiscriminatorValue, serializeSimulation, type Simulation } from './simulation';
import { createSimulationAutomationFromDiscriminatorValue, serializeSimulationAutomation, type SimulationAutomation } from './simulationAutomation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttackSimulationRoot extends Entity, Parsable {
    /**
     * Represents simulation automation created to run on a tenant.
     */
    simulationAutomations?: SimulationAutomation[];
    /**
     * Represents an attack simulation training campaign in a tenant.
     */
    simulations?: Simulation[];
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createAttackSimulationRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttackSimulationRoot;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoAttackSimulationRoot(attackSimulationRoot: AttackSimulationRoot | undefined = {} as AttackSimulationRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(attackSimulationRoot),
        "simulationAutomations": n => { attackSimulationRoot.simulationAutomations = n.getCollectionOfObjectValues<SimulationAutomation>(createSimulationAutomationFromDiscriminatorValue); },
        "simulations": n => { attackSimulationRoot.simulations = n.getCollectionOfObjectValues<Simulation>(createSimulationFromDiscriminatorValue); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeAttackSimulationRoot(writer: SerializationWriter, attackSimulationRoot: AttackSimulationRoot | undefined = {} as AttackSimulationRoot) : void {
        serializeEntity(writer, attackSimulationRoot)
        writer.writeCollectionOfObjectValues<SimulationAutomation>("simulationAutomations", attackSimulationRoot.simulationAutomations, );
        writer.writeCollectionOfObjectValues<Simulation>("simulations", attackSimulationRoot.simulations, );
}
