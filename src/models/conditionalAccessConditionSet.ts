// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConditionalAccessApplicationsFromDiscriminatorValue, serializeConditionalAccessApplications, type ConditionalAccessApplications } from './conditionalAccessApplications';
import { ConditionalAccessClientApp } from './conditionalAccessClientApp';
import { createConditionalAccessClientApplicationsFromDiscriminatorValue, serializeConditionalAccessClientApplications, type ConditionalAccessClientApplications } from './conditionalAccessClientApplications';
import { createConditionalAccessDevicesFromDiscriminatorValue, serializeConditionalAccessDevices, type ConditionalAccessDevices } from './conditionalAccessDevices';
import { createConditionalAccessLocationsFromDiscriminatorValue, serializeConditionalAccessLocations, type ConditionalAccessLocations } from './conditionalAccessLocations';
import { createConditionalAccessPlatformsFromDiscriminatorValue, serializeConditionalAccessPlatforms, type ConditionalAccessPlatforms } from './conditionalAccessPlatforms';
import { createConditionalAccessUsersFromDiscriminatorValue, serializeConditionalAccessUsers, type ConditionalAccessUsers } from './conditionalAccessUsers';
import { RiskLevel } from './riskLevel';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessConditionSet extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Applications and user actions included in and excluded from the policy. Required.
     */
    applications?: ConditionalAccessApplications;
    /**
     * Client applications (service principals and workload identities) included in and excluded from the policy. Either users or clientApplications is required.
     */
    clientApplications?: ConditionalAccessClientApplications;
    /**
     * Client application types included in the policy. Possible values are: all, browser, mobileAppsAndDesktopClients, exchangeActiveSync, easSupported, other. Required.  The easUnsupported enumeration member will be deprecated in favor of exchangeActiveSync which includes EAS supported and unsupported platforms.
     */
    clientAppTypes?: ConditionalAccessClientApp[];
    /**
     * Devices in the policy.
     */
    devices?: ConditionalAccessDevices;
    /**
     * Locations included in and excluded from the policy.
     */
    locations?: ConditionalAccessLocations;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Platforms included in and excluded from the policy.
     */
    platforms?: ConditionalAccessPlatforms;
    /**
     * Service principal risk levels included in the policy. Possible values are: low, medium, high, none, unknownFutureValue.
     */
    servicePrincipalRiskLevels?: RiskLevel[];
    /**
     * Sign-in risk levels included in the policy. Possible values are: low, medium, high, hidden, none, unknownFutureValue. Required.
     */
    signInRiskLevels?: RiskLevel[];
    /**
     * User risk levels included in the policy. Possible values are: low, medium, high, hidden, none, unknownFutureValue. Required.
     */
    userRiskLevels?: RiskLevel[];
    /**
     * Users, groups, and roles included in and excluded from the policy. Either users or clientApplications is required.
     */
    users?: ConditionalAccessUsers;
}
export function createConditionalAccessConditionSetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessConditionSet;
}
export function deserializeIntoConditionalAccessConditionSet(conditionalAccessConditionSet: ConditionalAccessConditionSet | undefined = {} as ConditionalAccessConditionSet) : Record<string, (node: ParseNode) => void> {
    return {
        "applications": n => { conditionalAccessConditionSet.applications = n.getObjectValue<ConditionalAccessApplications>(createConditionalAccessApplicationsFromDiscriminatorValue); },
        "clientApplications": n => { conditionalAccessConditionSet.clientApplications = n.getObjectValue<ConditionalAccessClientApplications>(createConditionalAccessClientApplicationsFromDiscriminatorValue); },
        "clientAppTypes": n => { conditionalAccessConditionSet.clientAppTypes = n.getCollectionOfEnumValues<ConditionalAccessClientApp>(ConditionalAccessClientApp); },
        "devices": n => { conditionalAccessConditionSet.devices = n.getObjectValue<ConditionalAccessDevices>(createConditionalAccessDevicesFromDiscriminatorValue); },
        "locations": n => { conditionalAccessConditionSet.locations = n.getObjectValue<ConditionalAccessLocations>(createConditionalAccessLocationsFromDiscriminatorValue); },
        "@odata.type": n => { conditionalAccessConditionSet.odataType = n.getStringValue(); },
        "platforms": n => { conditionalAccessConditionSet.platforms = n.getObjectValue<ConditionalAccessPlatforms>(createConditionalAccessPlatformsFromDiscriminatorValue); },
        "servicePrincipalRiskLevels": n => { conditionalAccessConditionSet.servicePrincipalRiskLevels = n.getCollectionOfEnumValues<RiskLevel>(RiskLevel); },
        "signInRiskLevels": n => { conditionalAccessConditionSet.signInRiskLevels = n.getCollectionOfEnumValues<RiskLevel>(RiskLevel); },
        "userRiskLevels": n => { conditionalAccessConditionSet.userRiskLevels = n.getCollectionOfEnumValues<RiskLevel>(RiskLevel); },
        "users": n => { conditionalAccessConditionSet.users = n.getObjectValue<ConditionalAccessUsers>(createConditionalAccessUsersFromDiscriminatorValue); },
    }
}
export function serializeConditionalAccessConditionSet(writer: SerializationWriter, conditionalAccessConditionSet: ConditionalAccessConditionSet | undefined = {} as ConditionalAccessConditionSet) : void {
        writer.writeObjectValue<ConditionalAccessApplications>("applications", conditionalAccessConditionSet.applications, serializeConditionalAccessApplications);
        writer.writeObjectValue<ConditionalAccessClientApplications>("clientApplications", conditionalAccessConditionSet.clientApplications, serializeConditionalAccessClientApplications);
        if(conditionalAccessConditionSet.clientAppTypes)
        writer.writeEnumValue<ConditionalAccessClientApp>("clientAppTypes", ...conditionalAccessConditionSet.clientAppTypes);
        writer.writeObjectValue<ConditionalAccessDevices>("devices", conditionalAccessConditionSet.devices, serializeConditionalAccessDevices);
        writer.writeObjectValue<ConditionalAccessLocations>("locations", conditionalAccessConditionSet.locations, serializeConditionalAccessLocations);
        writer.writeStringValue("@odata.type", conditionalAccessConditionSet.odataType);
        writer.writeObjectValue<ConditionalAccessPlatforms>("platforms", conditionalAccessConditionSet.platforms, serializeConditionalAccessPlatforms);
        if(conditionalAccessConditionSet.servicePrincipalRiskLevels)
        writer.writeEnumValue<RiskLevel>("servicePrincipalRiskLevels", ...conditionalAccessConditionSet.servicePrincipalRiskLevels);
        if(conditionalAccessConditionSet.signInRiskLevels)
        writer.writeEnumValue<RiskLevel>("signInRiskLevels", ...conditionalAccessConditionSet.signInRiskLevels);
        if(conditionalAccessConditionSet.userRiskLevels)
        writer.writeEnumValue<RiskLevel>("userRiskLevels", ...conditionalAccessConditionSet.userRiskLevels);
        writer.writeObjectValue<ConditionalAccessUsers>("users", conditionalAccessConditionSet.users, serializeConditionalAccessUsers);
        writer.writeAdditionalData(conditionalAccessConditionSet.additionalData);
}
// tslint:enable
// eslint-enable
