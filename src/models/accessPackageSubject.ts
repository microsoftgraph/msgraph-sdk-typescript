// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AccessPackageSubjectType } from './accessPackageSubjectType';
import { createConnectedOrganizationFromDiscriminatorValue, serializeConnectedOrganization, type ConnectedOrganization } from './connectedOrganization';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageSubject extends Entity, Parsable {
    /**
     * The connected organization of the subject. Read-only. Nullable.
     */
    connectedOrganization?: ConnectedOrganization;
    /**
     * The display name of the subject.
     */
    displayName?: string;
    /**
     * The email address of the subject.
     */
    email?: string;
    /**
     * The object identifier of the subject. null if the subject isn't yet a user in the tenant.
     */
    objectId?: string;
    /**
     * A string representation of the principal's security identifier, if known, or null if the subject doesn't have a security identifier.
     */
    onPremisesSecurityIdentifier?: string;
    /**
     * The principal name, if known, of the subject.
     */
    principalName?: string;
    /**
     * The resource type of the subject. The possible values are: notSpecified, user, servicePrincipal, unknownFutureValue.
     */
    subjectType?: AccessPackageSubjectType;
}
export function createAccessPackageSubjectFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessPackageSubject;
}
export function deserializeIntoAccessPackageSubject(accessPackageSubject: AccessPackageSubject | undefined = {} as AccessPackageSubject) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(accessPackageSubject),
        "connectedOrganization": n => { accessPackageSubject.connectedOrganization = n.getObjectValue<ConnectedOrganization>(createConnectedOrganizationFromDiscriminatorValue); },
        "displayName": n => { accessPackageSubject.displayName = n.getStringValue(); },
        "email": n => { accessPackageSubject.email = n.getStringValue(); },
        "objectId": n => { accessPackageSubject.objectId = n.getStringValue(); },
        "onPremisesSecurityIdentifier": n => { accessPackageSubject.onPremisesSecurityIdentifier = n.getStringValue(); },
        "principalName": n => { accessPackageSubject.principalName = n.getStringValue(); },
        "subjectType": n => { accessPackageSubject.subjectType = n.getEnumValue<AccessPackageSubjectType>(AccessPackageSubjectType); },
    }
}
export function serializeAccessPackageSubject(writer: SerializationWriter, accessPackageSubject: AccessPackageSubject | undefined = {} as AccessPackageSubject) : void {
        serializeEntity(writer, accessPackageSubject)
        writer.writeObjectValue<ConnectedOrganization>("connectedOrganization", accessPackageSubject.connectedOrganization, serializeConnectedOrganization);
        writer.writeStringValue("displayName", accessPackageSubject.displayName);
        writer.writeStringValue("email", accessPackageSubject.email);
        writer.writeStringValue("objectId", accessPackageSubject.objectId);
        writer.writeStringValue("onPremisesSecurityIdentifier", accessPackageSubject.onPremisesSecurityIdentifier);
        writer.writeStringValue("principalName", accessPackageSubject.principalName);
        writer.writeEnumValue<AccessPackageSubjectType>("subjectType", accessPackageSubject.subjectType);
}
// tslint:enable
// eslint-enable
