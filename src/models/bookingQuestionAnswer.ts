// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AnswerInputType } from './answerInputType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BookingQuestionAnswer extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The answer given by the user in case the answerInputType is text.
     */
    answer?: string;
    /**
     * The expected answer type. The possible values are: text, radioButton, unknownFutureValue.
     */
    answerInputType?: AnswerInputType;
    /**
     * In case the answerInputType is radioButton, this will consists of a list of possible answer values.
     */
    answerOptions?: string[];
    /**
     * Indicates whether it is mandatory to answer the custom question.
     */
    isRequired?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The question.
     */
    question?: string;
    /**
     * The ID of the custom question.
     */
    questionId?: string;
    /**
     * The answers selected by the user.
     */
    selectedOptions?: string[];
}
export function createBookingQuestionAnswerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBookingQuestionAnswer;
}
export function deserializeIntoBookingQuestionAnswer(bookingQuestionAnswer: BookingQuestionAnswer | undefined = {} as BookingQuestionAnswer) : Record<string, (node: ParseNode) => void> {
    return {
        "answer": n => { bookingQuestionAnswer.answer = n.getStringValue(); },
        "answerInputType": n => { bookingQuestionAnswer.answerInputType = n.getEnumValue<AnswerInputType>(AnswerInputType); },
        "answerOptions": n => { bookingQuestionAnswer.answerOptions = n.getCollectionOfPrimitiveValues<string>(); },
        "isRequired": n => { bookingQuestionAnswer.isRequired = n.getBooleanValue(); },
        "@odata.type": n => { bookingQuestionAnswer.odataType = n.getStringValue(); },
        "question": n => { bookingQuestionAnswer.question = n.getStringValue(); },
        "questionId": n => { bookingQuestionAnswer.questionId = n.getStringValue(); },
        "selectedOptions": n => { bookingQuestionAnswer.selectedOptions = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export function serializeBookingQuestionAnswer(writer: SerializationWriter, bookingQuestionAnswer: BookingQuestionAnswer | undefined = {} as BookingQuestionAnswer) : void {
        writer.writeStringValue("answer", bookingQuestionAnswer.answer);
        writer.writeEnumValue<AnswerInputType>("answerInputType", bookingQuestionAnswer.answerInputType);
        writer.writeCollectionOfPrimitiveValues<string>("answerOptions", bookingQuestionAnswer.answerOptions);
        writer.writeBooleanValue("isRequired", bookingQuestionAnswer.isRequired);
        writer.writeStringValue("@odata.type", bookingQuestionAnswer.odataType);
        writer.writeStringValue("question", bookingQuestionAnswer.question);
        writer.writeStringValue("questionId", bookingQuestionAnswer.questionId);
        writer.writeCollectionOfPrimitiveValues<string>("selectedOptions", bookingQuestionAnswer.selectedOptions);
        writer.writeAdditionalData(bookingQuestionAnswer.additionalData);
}
// tslint:enable
// eslint-enable
