import {Alert} from './alert';
import {AlertDetection} from './alertDetection';
import {AlertFeedback} from './alertFeedback';
import {AlertHistoryState} from './alertHistoryState';
import {AlertSeverity} from './alertSeverity';
import {AlertStatus} from './alertStatus';
import {AlertTrigger} from './alertTrigger';
import {CloudAppSecurityState} from './cloudAppSecurityState';
import {createAlertDetectionFromDiscriminatorValue} from './createAlertDetectionFromDiscriminatorValue';
import {createAlertHistoryStateFromDiscriminatorValue} from './createAlertHistoryStateFromDiscriminatorValue';
import {createAlertTriggerFromDiscriminatorValue} from './createAlertTriggerFromDiscriminatorValue';
import {createCloudAppSecurityStateFromDiscriminatorValue} from './createCloudAppSecurityStateFromDiscriminatorValue';
import {createFileSecurityStateFromDiscriminatorValue} from './createFileSecurityStateFromDiscriminatorValue';
import {createHostSecurityStateFromDiscriminatorValue} from './createHostSecurityStateFromDiscriminatorValue';
import {createInvestigationSecurityStateFromDiscriminatorValue} from './createInvestigationSecurityStateFromDiscriminatorValue';
import {createMalwareStateFromDiscriminatorValue} from './createMalwareStateFromDiscriminatorValue';
import {createMessageSecurityStateFromDiscriminatorValue} from './createMessageSecurityStateFromDiscriminatorValue';
import {createNetworkConnectionFromDiscriminatorValue} from './createNetworkConnectionFromDiscriminatorValue';
import {createProcessFromDiscriminatorValue} from './createProcessFromDiscriminatorValue';
import {createRegistryKeyStateFromDiscriminatorValue} from './createRegistryKeyStateFromDiscriminatorValue';
import {createSecurityResourceFromDiscriminatorValue} from './createSecurityResourceFromDiscriminatorValue';
import {createSecurityVendorInformationFromDiscriminatorValue} from './createSecurityVendorInformationFromDiscriminatorValue';
import {createUriClickSecurityStateFromDiscriminatorValue} from './createUriClickSecurityStateFromDiscriminatorValue';
import {createUserSecurityStateFromDiscriminatorValue} from './createUserSecurityStateFromDiscriminatorValue';
import {createVulnerabilityStateFromDiscriminatorValue} from './createVulnerabilityStateFromDiscriminatorValue';
import {FileSecurityState} from './fileSecurityState';
import {HostSecurityState} from './hostSecurityState';
import {AlertDetectionImpl, AlertHistoryStateImpl, AlertTriggerImpl, CloudAppSecurityStateImpl, EntityImpl, FileSecurityStateImpl, HostSecurityStateImpl, InvestigationSecurityStateImpl, MalwareStateImpl, MessageSecurityStateImpl, NetworkConnectionImpl, ProcessImpl, RegistryKeyStateImpl, SecurityResourceImpl, SecurityVendorInformationImpl, UriClickSecurityStateImpl, UserSecurityStateImpl, VulnerabilityStateImpl} from './index';
import {InvestigationSecurityState} from './investigationSecurityState';
import {MalwareState} from './malwareState';
import {MessageSecurityState} from './messageSecurityState';
import {NetworkConnection} from './networkConnection';
import {Process} from './process';
import {RegistryKeyState} from './registryKeyState';
import {SecurityResource} from './securityResource';
import {SecurityVendorInformation} from './securityVendorInformation';
import {UriClickSecurityState} from './uriClickSecurityState';
import {UserSecurityState} from './userSecurityState';
import {VulnerabilityState} from './vulnerabilityState';
import {Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

/** Provides operations to manage the security singleton. */
export class AlertImpl extends EntityImpl implements Alert, Parsable {
    /** Name or alias of the activity group (attacker) this alert is attributed to. */
    public activityGroupName?: string | undefined;
    /** The alertDetections property */
    public alertDetections?: AlertDetection[] | undefined;
    /** Name of the analyst the alert is assigned to for triage, investigation, or remediation (supports update). */
    public assignedTo?: string | undefined;
    /** Azure subscription ID, present if this alert is related to an Azure resource. */
    public azureSubscriptionId?: string | undefined;
    /** Azure Active Directory tenant ID. Required. */
    public azureTenantId?: string | undefined;
    /** Category of the alert (for example, credentialTheft, ransomware, etc.). */
    public category?: string | undefined;
    /** Time at which the alert was closed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z (supports update). */
    public closedDateTime?: Date | undefined;
    /** Security-related stateful information generated by the provider about the cloud application/s related to this alert. */
    public cloudAppStates?: CloudAppSecurityState[] | undefined;
    /** Customer-provided comments on alert (for customer alert management) (supports update). */
    public comments?: string[] | undefined;
    /** Confidence of the detection logic (percentage between 1-100). */
    public confidence?: number | undefined;
    /** Time at which the alert was created by the alert provider. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required. */
    public createdDateTime?: Date | undefined;
    /** Alert description. */
    public description?: string | undefined;
    /** Set of alerts related to this alert entity (each alert is pushed to the SIEM as a separate record). */
    public detectionIds?: string[] | undefined;
    /** Time at which the event(s) that served as the trigger(s) to generate the alert occurred. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required. */
    public eventDateTime?: Date | undefined;
    /** Analyst feedback on the alert. Possible values are: unknown, truePositive, falsePositive, benignPositive. (supports update) */
    public feedback?: AlertFeedback | undefined;
    /** Security-related stateful information generated by the provider about the file(s) related to this alert. */
    public fileStates?: FileSecurityState[] | undefined;
    /** A collection of alertHistoryStates comprising an audit log of all updates made to an alert. */
    public historyStates?: AlertHistoryState[] | undefined;
    /** Security-related stateful information generated by the provider about the host(s) related to this alert. */
    public hostStates?: HostSecurityState[] | undefined;
    /** IDs of incidents related to current alert. */
    public incidentIds?: string[] | undefined;
    /** The investigationSecurityStates property */
    public investigationSecurityStates?: InvestigationSecurityState[] | undefined;
    /** The lastEventDateTime property */
    public lastEventDateTime?: Date | undefined;
    /** Time at which the alert entity was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    public lastModifiedDateTime?: Date | undefined;
    /** Threat Intelligence pertaining to malware related to this alert. */
    public malwareStates?: MalwareState[] | undefined;
    /** The messageSecurityStates property */
    public messageSecurityStates?: MessageSecurityState[] | undefined;
    /** Security-related stateful information generated by the provider about the network connection(s) related to this alert. */
    public networkConnections?: NetworkConnection[] | undefined;
    /** Security-related stateful information generated by the provider about the process or processes related to this alert. */
    public processes?: Process[] | undefined;
    /** Vendor/provider recommended action(s) to take as a result of the alert (for example, isolate machine, enforce2FA, reimage host). */
    public recommendedActions?: string[] | undefined;
    /** Security-related stateful information generated by the provider about the registry keys related to this alert. */
    public registryKeyStates?: RegistryKeyState[] | undefined;
    /** Resources related to current alert. For example, for some alerts this can have the Azure Resource value. */
    public securityResources?: SecurityResource[] | undefined;
    /** Alert severity - set by vendor/provider. Possible values are: unknown, informational, low, medium, high. Required. */
    public severity?: AlertSeverity | undefined;
    /** Hyperlinks (URIs) to the source material related to the alert, for example, provider's user interface for alerts or log search, etc. */
    public sourceMaterials?: string[] | undefined;
    /** Alert lifecycle status (stage). Possible values are: unknown, newAlert, inProgress, resolved. (supports update). Required. */
    public status?: AlertStatus | undefined;
    /** User-definable labels that can be applied to an alert and can serve as filter conditions (for example 'HVA', 'SAW', etc.) (supports update). */
    public tags?: string[] | undefined;
    /** Alert title. Required. */
    public title?: string | undefined;
    /** Security-related information about the specific properties that triggered the alert (properties appearing in the alert). Alerts might contain information about multiple users, hosts, files, ip addresses. This field indicates which properties triggered the alert generation. */
    public triggers?: AlertTrigger[] | undefined;
    /** The uriClickSecurityStates property */
    public uriClickSecurityStates?: UriClickSecurityState[] | undefined;
    /** Security-related stateful information generated by the provider about the user accounts related to this alert. */
    public userStates?: UserSecurityState[] | undefined;
    /** Complex type containing details about the security product/service vendor, provider, and subprovider (for example, vendor=Microsoft; provider=Windows Defender ATP; subProvider=AppLocker). Required. */
    public vendorInformation?: SecurityVendorInformation | undefined;
    /** Threat intelligence pertaining to one or more vulnerabilities related to this alert. */
    public vulnerabilityStates?: VulnerabilityState[] | undefined;
    /**
     * Instantiates a new alert and sets the default values.
     * @param alertParameterValue 
     */
    public constructor(alertParameterValue?: Alert | undefined) {
        super();
        this.activityGroupName = alertParameterValue?.activityGroupName ;
        this.alertDetections = alertParameterValue?.alertDetections ;
        this.assignedTo = alertParameterValue?.assignedTo ;
        this.azureSubscriptionId = alertParameterValue?.azureSubscriptionId ;
        this.azureTenantId = alertParameterValue?.azureTenantId ;
        this.category = alertParameterValue?.category ;
        this.closedDateTime = alertParameterValue?.closedDateTime ;
        this.cloudAppStates = alertParameterValue?.cloudAppStates ;
        this.comments = alertParameterValue?.comments ;
        this.confidence = alertParameterValue?.confidence ;
        this.createdDateTime = alertParameterValue?.createdDateTime ;
        this.description = alertParameterValue?.description ;
        this.detectionIds = alertParameterValue?.detectionIds ;
        this.eventDateTime = alertParameterValue?.eventDateTime ;
        this.feedback = alertParameterValue?.feedback ;
        this.fileStates = alertParameterValue?.fileStates ;
        this.historyStates = alertParameterValue?.historyStates ;
        this.hostStates = alertParameterValue?.hostStates ;
        this.incidentIds = alertParameterValue?.incidentIds ;
        this.investigationSecurityStates = alertParameterValue?.investigationSecurityStates ;
        this.lastEventDateTime = alertParameterValue?.lastEventDateTime ;
        this.lastModifiedDateTime = alertParameterValue?.lastModifiedDateTime ;
        this.malwareStates = alertParameterValue?.malwareStates ;
        this.messageSecurityStates = alertParameterValue?.messageSecurityStates ;
        this.networkConnections = alertParameterValue?.networkConnections ;
        this.processes = alertParameterValue?.processes ;
        this.recommendedActions = alertParameterValue?.recommendedActions ;
        this.registryKeyStates = alertParameterValue?.registryKeyStates ;
        this.securityResources = alertParameterValue?.securityResources ;
        this.severity = alertParameterValue?.severity ;
        this.sourceMaterials = alertParameterValue?.sourceMaterials ;
        this.status = alertParameterValue?.status ;
        this.tags = alertParameterValue?.tags ;
        this.title = alertParameterValue?.title ;
        this.triggers = alertParameterValue?.triggers ;
        this.uriClickSecurityStates = alertParameterValue?.uriClickSecurityStates ;
        this.userStates = alertParameterValue?.userStates ;
        this.vendorInformation = alertParameterValue?.vendorInformation ;
        this.vulnerabilityStates = alertParameterValue?.vulnerabilityStates ;
    };
    /**
     * The deserialization information for the current model
     * @returns a Record<string, (node: ParseNode) => void>
     */
    public getFieldDeserializers() : Record<string, (node: ParseNode) => void> {
        return {...super.getFieldDeserializers(),
            "activityGroupName": n => { this.activityGroupName = n.getStringValue(); },
            "alertDetections": n => { this.alertDetections = n.getCollectionOfObjectValues<AlertDetectionImpl>(createAlertDetectionFromDiscriminatorValue); },
            "assignedTo": n => { this.assignedTo = n.getStringValue(); },
            "azureSubscriptionId": n => { this.azureSubscriptionId = n.getStringValue(); },
            "azureTenantId": n => { this.azureTenantId = n.getStringValue(); },
            "category": n => { this.category = n.getStringValue(); },
            "closedDateTime": n => { this.closedDateTime = n.getDateValue(); },
            "cloudAppStates": n => { this.cloudAppStates = n.getCollectionOfObjectValues<CloudAppSecurityStateImpl>(createCloudAppSecurityStateFromDiscriminatorValue); },
            "comments": n => { this.comments = n.getCollectionOfPrimitiveValues<string>(); },
            "confidence": n => { this.confidence = n.getNumberValue(); },
            "createdDateTime": n => { this.createdDateTime = n.getDateValue(); },
            "description": n => { this.description = n.getStringValue(); },
            "detectionIds": n => { this.detectionIds = n.getCollectionOfPrimitiveValues<string>(); },
            "eventDateTime": n => { this.eventDateTime = n.getDateValue(); },
            "feedback": n => { this.feedback = n.getEnumValue<AlertFeedback>(AlertFeedback); },
            "fileStates": n => { this.fileStates = n.getCollectionOfObjectValues<FileSecurityStateImpl>(createFileSecurityStateFromDiscriminatorValue); },
            "historyStates": n => { this.historyStates = n.getCollectionOfObjectValues<AlertHistoryStateImpl>(createAlertHistoryStateFromDiscriminatorValue); },
            "hostStates": n => { this.hostStates = n.getCollectionOfObjectValues<HostSecurityStateImpl>(createHostSecurityStateFromDiscriminatorValue); },
            "incidentIds": n => { this.incidentIds = n.getCollectionOfPrimitiveValues<string>(); },
            "investigationSecurityStates": n => { this.investigationSecurityStates = n.getCollectionOfObjectValues<InvestigationSecurityStateImpl>(createInvestigationSecurityStateFromDiscriminatorValue); },
            "lastEventDateTime": n => { this.lastEventDateTime = n.getDateValue(); },
            "lastModifiedDateTime": n => { this.lastModifiedDateTime = n.getDateValue(); },
            "malwareStates": n => { this.malwareStates = n.getCollectionOfObjectValues<MalwareStateImpl>(createMalwareStateFromDiscriminatorValue); },
            "messageSecurityStates": n => { this.messageSecurityStates = n.getCollectionOfObjectValues<MessageSecurityStateImpl>(createMessageSecurityStateFromDiscriminatorValue); },
            "networkConnections": n => { this.networkConnections = n.getCollectionOfObjectValues<NetworkConnectionImpl>(createNetworkConnectionFromDiscriminatorValue); },
            "processes": n => { this.processes = n.getCollectionOfObjectValues<ProcessImpl>(createProcessFromDiscriminatorValue); },
            "recommendedActions": n => { this.recommendedActions = n.getCollectionOfPrimitiveValues<string>(); },
            "registryKeyStates": n => { this.registryKeyStates = n.getCollectionOfObjectValues<RegistryKeyStateImpl>(createRegistryKeyStateFromDiscriminatorValue); },
            "securityResources": n => { this.securityResources = n.getCollectionOfObjectValues<SecurityResourceImpl>(createSecurityResourceFromDiscriminatorValue); },
            "severity": n => { this.severity = n.getEnumValue<AlertSeverity>(AlertSeverity); },
            "sourceMaterials": n => { this.sourceMaterials = n.getCollectionOfPrimitiveValues<string>(); },
            "status": n => { this.status = n.getEnumValue<AlertStatus>(AlertStatus); },
            "tags": n => { this.tags = n.getCollectionOfPrimitiveValues<string>(); },
            "title": n => { this.title = n.getStringValue(); },
            "triggers": n => { this.triggers = n.getCollectionOfObjectValues<AlertTriggerImpl>(createAlertTriggerFromDiscriminatorValue); },
            "uriClickSecurityStates": n => { this.uriClickSecurityStates = n.getCollectionOfObjectValues<UriClickSecurityStateImpl>(createUriClickSecurityStateFromDiscriminatorValue); },
            "userStates": n => { this.userStates = n.getCollectionOfObjectValues<UserSecurityStateImpl>(createUserSecurityStateFromDiscriminatorValue); },
            "vendorInformation": n => { this.vendorInformation = n.getObjectValue<SecurityVendorInformationImpl>(createSecurityVendorInformationFromDiscriminatorValue); },
            "vulnerabilityStates": n => { this.vulnerabilityStates = n.getCollectionOfObjectValues<VulnerabilityStateImpl>(createVulnerabilityStateFromDiscriminatorValue); },
        };
    };
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    public serialize(writer: SerializationWriter) : void {
        if(!writer) throw new Error("writer cannot be undefined");
        super.serialize(writer);
        if(this.activityGroupName){
        writer.writeStringValue("activityGroupName", this.activityGroupName);
        }
        if(this.alertDetections && this.alertDetections.length != 0){        const alertDetectionsArrValue: AlertDetectionImpl[] = []; this.alertDetections?.forEach(element => {alertDetectionsArrValue.push(new AlertDetectionImpl(element));});
        writer.writeCollectionOfObjectValues<AlertDetectionImpl>("alertDetections", alertDetectionsArrValue);
        }
        if(this.assignedTo){
        writer.writeStringValue("assignedTo", this.assignedTo);
        }
        if(this.azureSubscriptionId){
        writer.writeStringValue("azureSubscriptionId", this.azureSubscriptionId);
        }
        if(this.azureTenantId){
        writer.writeStringValue("azureTenantId", this.azureTenantId);
        }
        if(this.category){
        writer.writeStringValue("category", this.category);
        }
        if(this.closedDateTime){
        writer.writeDateValue("closedDateTime", this.closedDateTime);
        }
        if(this.cloudAppStates && this.cloudAppStates.length != 0){        const cloudAppStatesArrValue: CloudAppSecurityStateImpl[] = []; this.cloudAppStates?.forEach(element => {cloudAppStatesArrValue.push(new CloudAppSecurityStateImpl(element));});
        writer.writeCollectionOfObjectValues<CloudAppSecurityStateImpl>("cloudAppStates", cloudAppStatesArrValue);
        }
        if(this.comments){
        writer.writeCollectionOfPrimitiveValues<string>("comments", this.comments);
        }
        if(this.confidence){
        writer.writeNumberValue("confidence", this.confidence);
        }
        if(this.createdDateTime){
        writer.writeDateValue("createdDateTime", this.createdDateTime);
        }
        if(this.description){
        writer.writeStringValue("description", this.description);
        }
        if(this.detectionIds){
        writer.writeCollectionOfPrimitiveValues<string>("detectionIds", this.detectionIds);
        }
        if(this.eventDateTime){
        writer.writeDateValue("eventDateTime", this.eventDateTime);
        }
        if(this.feedback){
        writer.writeEnumValue<AlertFeedback>("feedback", this.feedback);
        }
        if(this.fileStates && this.fileStates.length != 0){        const fileStatesArrValue: FileSecurityStateImpl[] = []; this.fileStates?.forEach(element => {fileStatesArrValue.push(new FileSecurityStateImpl(element));});
        writer.writeCollectionOfObjectValues<FileSecurityStateImpl>("fileStates", fileStatesArrValue);
        }
        if(this.historyStates && this.historyStates.length != 0){        const historyStatesArrValue: AlertHistoryStateImpl[] = []; this.historyStates?.forEach(element => {historyStatesArrValue.push(new AlertHistoryStateImpl(element));});
        writer.writeCollectionOfObjectValues<AlertHistoryStateImpl>("historyStates", historyStatesArrValue);
        }
        if(this.hostStates && this.hostStates.length != 0){        const hostStatesArrValue: HostSecurityStateImpl[] = []; this.hostStates?.forEach(element => {hostStatesArrValue.push(new HostSecurityStateImpl(element));});
        writer.writeCollectionOfObjectValues<HostSecurityStateImpl>("hostStates", hostStatesArrValue);
        }
        if(this.incidentIds){
        writer.writeCollectionOfPrimitiveValues<string>("incidentIds", this.incidentIds);
        }
        if(this.investigationSecurityStates && this.investigationSecurityStates.length != 0){        const investigationSecurityStatesArrValue: InvestigationSecurityStateImpl[] = []; this.investigationSecurityStates?.forEach(element => {investigationSecurityStatesArrValue.push(new InvestigationSecurityStateImpl(element));});
        writer.writeCollectionOfObjectValues<InvestigationSecurityStateImpl>("investigationSecurityStates", investigationSecurityStatesArrValue);
        }
        if(this.lastEventDateTime){
        writer.writeDateValue("lastEventDateTime", this.lastEventDateTime);
        }
        if(this.lastModifiedDateTime){
        writer.writeDateValue("lastModifiedDateTime", this.lastModifiedDateTime);
        }
        if(this.malwareStates && this.malwareStates.length != 0){        const malwareStatesArrValue: MalwareStateImpl[] = []; this.malwareStates?.forEach(element => {malwareStatesArrValue.push(new MalwareStateImpl(element));});
        writer.writeCollectionOfObjectValues<MalwareStateImpl>("malwareStates", malwareStatesArrValue);
        }
        if(this.messageSecurityStates && this.messageSecurityStates.length != 0){        const messageSecurityStatesArrValue: MessageSecurityStateImpl[] = []; this.messageSecurityStates?.forEach(element => {messageSecurityStatesArrValue.push(new MessageSecurityStateImpl(element));});
        writer.writeCollectionOfObjectValues<MessageSecurityStateImpl>("messageSecurityStates", messageSecurityStatesArrValue);
        }
        if(this.networkConnections && this.networkConnections.length != 0){        const networkConnectionsArrValue: NetworkConnectionImpl[] = []; this.networkConnections?.forEach(element => {networkConnectionsArrValue.push(new NetworkConnectionImpl(element));});
        writer.writeCollectionOfObjectValues<NetworkConnectionImpl>("networkConnections", networkConnectionsArrValue);
        }
        if(this.processes && this.processes.length != 0){        const processesArrValue: ProcessImpl[] = []; this.processes?.forEach(element => {processesArrValue.push(new ProcessImpl(element));});
        writer.writeCollectionOfObjectValues<ProcessImpl>("processes", processesArrValue);
        }
        if(this.recommendedActions){
        writer.writeCollectionOfPrimitiveValues<string>("recommendedActions", this.recommendedActions);
        }
        if(this.registryKeyStates && this.registryKeyStates.length != 0){        const registryKeyStatesArrValue: RegistryKeyStateImpl[] = []; this.registryKeyStates?.forEach(element => {registryKeyStatesArrValue.push(new RegistryKeyStateImpl(element));});
        writer.writeCollectionOfObjectValues<RegistryKeyStateImpl>("registryKeyStates", registryKeyStatesArrValue);
        }
        if(this.securityResources && this.securityResources.length != 0){        const securityResourcesArrValue: SecurityResourceImpl[] = []; this.securityResources?.forEach(element => {securityResourcesArrValue.push(new SecurityResourceImpl(element));});
        writer.writeCollectionOfObjectValues<SecurityResourceImpl>("securityResources", securityResourcesArrValue);
        }
        if(this.severity){
        writer.writeEnumValue<AlertSeverity>("severity", this.severity);
        }
        if(this.sourceMaterials){
        writer.writeCollectionOfPrimitiveValues<string>("sourceMaterials", this.sourceMaterials);
        }
        if(this.status){
        writer.writeEnumValue<AlertStatus>("status", this.status);
        }
        if(this.tags){
        writer.writeCollectionOfPrimitiveValues<string>("tags", this.tags);
        }
        if(this.title){
        writer.writeStringValue("title", this.title);
        }
        if(this.triggers && this.triggers.length != 0){        const triggersArrValue: AlertTriggerImpl[] = []; this.triggers?.forEach(element => {triggersArrValue.push(new AlertTriggerImpl(element));});
        writer.writeCollectionOfObjectValues<AlertTriggerImpl>("triggers", triggersArrValue);
        }
        if(this.uriClickSecurityStates && this.uriClickSecurityStates.length != 0){        const uriClickSecurityStatesArrValue: UriClickSecurityStateImpl[] = []; this.uriClickSecurityStates?.forEach(element => {uriClickSecurityStatesArrValue.push(new UriClickSecurityStateImpl(element));});
        writer.writeCollectionOfObjectValues<UriClickSecurityStateImpl>("uriClickSecurityStates", uriClickSecurityStatesArrValue);
        }
        if(this.userStates && this.userStates.length != 0){        const userStatesArrValue: UserSecurityStateImpl[] = []; this.userStates?.forEach(element => {userStatesArrValue.push(new UserSecurityStateImpl(element));});
        writer.writeCollectionOfObjectValues<UserSecurityStateImpl>("userStates", userStatesArrValue);
        }
        if(this.vendorInformation){
        writer.writeObjectValue<SecurityVendorInformationImpl>("vendorInformation", new SecurityVendorInformationImpl(this.vendorInformation));
        }
        if(this.vulnerabilityStates && this.vulnerabilityStates.length != 0){        const vulnerabilityStatesArrValue: VulnerabilityStateImpl[] = []; this.vulnerabilityStates?.forEach(element => {vulnerabilityStatesArrValue.push(new VulnerabilityStateImpl(element));});
        writer.writeCollectionOfObjectValues<VulnerabilityStateImpl>("vulnerabilityStates", vulnerabilityStatesArrValue);
        }
    };
}
