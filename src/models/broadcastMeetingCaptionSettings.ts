// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BroadcastMeetingCaptionSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates whether captions are enabled for this Teams live event.
     */
    isCaptionEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The spoken language.
     */
    spokenLanguage?: string;
    /**
     * The translation languages (choose up to 6).
     */
    translationLanguages?: string[];
}
export function createBroadcastMeetingCaptionSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBroadcastMeetingCaptionSettings;
}
export function deserializeIntoBroadcastMeetingCaptionSettings(broadcastMeetingCaptionSettings: BroadcastMeetingCaptionSettings | undefined = {} as BroadcastMeetingCaptionSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "isCaptionEnabled": n => { broadcastMeetingCaptionSettings.isCaptionEnabled = n.getBooleanValue(); },
        "@odata.type": n => { broadcastMeetingCaptionSettings.odataType = n.getStringValue(); },
        "spokenLanguage": n => { broadcastMeetingCaptionSettings.spokenLanguage = n.getStringValue(); },
        "translationLanguages": n => { broadcastMeetingCaptionSettings.translationLanguages = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export function serializeBroadcastMeetingCaptionSettings(writer: SerializationWriter, broadcastMeetingCaptionSettings: BroadcastMeetingCaptionSettings | undefined = {} as BroadcastMeetingCaptionSettings) : void {
    writer.writeBooleanValue("isCaptionEnabled", broadcastMeetingCaptionSettings.isCaptionEnabled);
    writer.writeStringValue("@odata.type", broadcastMeetingCaptionSettings.odataType);
    writer.writeStringValue("spokenLanguage", broadcastMeetingCaptionSettings.spokenLanguage);
    writer.writeCollectionOfPrimitiveValues<string>("translationLanguages", broadcastMeetingCaptionSettings.translationLanguages);
    writer.writeAdditionalData(broadcastMeetingCaptionSettings.additionalData);
}
// tslint:enable
// eslint-enable
