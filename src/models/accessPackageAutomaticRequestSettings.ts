// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Duration, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageAutomaticRequestSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The duration for which access must be retained before the target's access is revoked once they leave the allowed target scope.
     */
    gracePeriodBeforeAccessRemoval?: Duration;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Indicates whether automatic assignment must be removed for targets who move out of the allowed target scope.
     */
    removeAccessWhenTargetLeavesAllowedTargets?: boolean;
    /**
     * If set to true, automatic assignments will be created for targets in the allowed target scope.
     */
    requestAccessForAllowedTargets?: boolean;
}
export function createAccessPackageAutomaticRequestSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessPackageAutomaticRequestSettings;
}
export function deserializeIntoAccessPackageAutomaticRequestSettings(accessPackageAutomaticRequestSettings: AccessPackageAutomaticRequestSettings | undefined = {} as AccessPackageAutomaticRequestSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "gracePeriodBeforeAccessRemoval": n => { accessPackageAutomaticRequestSettings.gracePeriodBeforeAccessRemoval = n.getDurationValue(); },
        "@odata.type": n => { accessPackageAutomaticRequestSettings.odataType = n.getStringValue(); },
        "removeAccessWhenTargetLeavesAllowedTargets": n => { accessPackageAutomaticRequestSettings.removeAccessWhenTargetLeavesAllowedTargets = n.getBooleanValue(); },
        "requestAccessForAllowedTargets": n => { accessPackageAutomaticRequestSettings.requestAccessForAllowedTargets = n.getBooleanValue(); },
    }
}
export function serializeAccessPackageAutomaticRequestSettings(writer: SerializationWriter, accessPackageAutomaticRequestSettings: AccessPackageAutomaticRequestSettings | undefined = {} as AccessPackageAutomaticRequestSettings) : void {
        writer.writeDurationValue("gracePeriodBeforeAccessRemoval", accessPackageAutomaticRequestSettings.gracePeriodBeforeAccessRemoval);
        writer.writeStringValue("@odata.type", accessPackageAutomaticRequestSettings.odataType);
        writer.writeBooleanValue("removeAccessWhenTargetLeavesAllowedTargets", accessPackageAutomaticRequestSettings.removeAccessWhenTargetLeavesAllowedTargets);
        writer.writeBooleanValue("requestAccessForAllowedTargets", accessPackageAutomaticRequestSettings.requestAccessForAllowedTargets);
        writer.writeAdditionalData(accessPackageAutomaticRequestSettings.additionalData);
}
// tslint:enable
// eslint-enable
