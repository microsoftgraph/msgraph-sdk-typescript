// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAccessPackageResourceFromDiscriminatorValue, serializeAccessPackageResource, type AccessPackageResource } from './accessPackageResource';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageResourceScope extends Entity, Parsable {
    /**
     * The description of the scope.
     */
    description?: string;
    /**
     * The display name of the scope.
     */
    displayName?: string;
    /**
     * True if the scopes are arranged in a hierarchy and this is the top or root scope of the resource.
     */
    isRootScope?: boolean;
    /**
     * The unique identifier for the scope in the resource as defined in the origin system.
     */
    originId?: string;
    /**
     * The origin system for the scope.
     */
    originSystem?: string;
    /**
     * The resource property
     */
    resource?: AccessPackageResource;
}
export function createAccessPackageResourceScopeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessPackageResourceScope;
}
export function deserializeIntoAccessPackageResourceScope(accessPackageResourceScope: AccessPackageResourceScope | undefined = {} as AccessPackageResourceScope) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(accessPackageResourceScope),
        "description": n => { accessPackageResourceScope.description = n.getStringValue(); },
        "displayName": n => { accessPackageResourceScope.displayName = n.getStringValue(); },
        "isRootScope": n => { accessPackageResourceScope.isRootScope = n.getBooleanValue(); },
        "originId": n => { accessPackageResourceScope.originId = n.getStringValue(); },
        "originSystem": n => { accessPackageResourceScope.originSystem = n.getStringValue(); },
        "resource": n => { accessPackageResourceScope.resource = n.getObjectValue<AccessPackageResource>(createAccessPackageResourceFromDiscriminatorValue); },
    }
}
export function serializeAccessPackageResourceScope(writer: SerializationWriter, accessPackageResourceScope: AccessPackageResourceScope | undefined = {} as AccessPackageResourceScope) : void {
    serializeEntity(writer, accessPackageResourceScope)
    writer.writeStringValue("description", accessPackageResourceScope.description);
    writer.writeStringValue("displayName", accessPackageResourceScope.displayName);
    writer.writeBooleanValue("isRootScope", accessPackageResourceScope.isRootScope);
    writer.writeStringValue("originId", accessPackageResourceScope.originId);
    writer.writeStringValue("originSystem", accessPackageResourceScope.originSystem);
    writer.writeObjectValue<AccessPackageResource>("resource", accessPackageResourceScope.resource, serializeAccessPackageResource);
}
// tslint:enable
// eslint-enable
