// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createUnifiedRoleEligibilityScheduleInstanceFromDiscriminatorValue, serializeUnifiedRoleEligibilityScheduleInstance, type UnifiedRoleEligibilityScheduleInstance } from './unifiedRoleEligibilityScheduleInstance';
import { deserializeIntoUnifiedRoleScheduleInstanceBase, serializeUnifiedRoleScheduleInstanceBase, type UnifiedRoleScheduleInstanceBase } from './unifiedRoleScheduleInstanceBase';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleAssignmentScheduleInstanceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRoleAssignmentScheduleInstance;
}
export function deserializeIntoUnifiedRoleAssignmentScheduleInstance(unifiedRoleAssignmentScheduleInstance: UnifiedRoleAssignmentScheduleInstance | undefined = {} as UnifiedRoleAssignmentScheduleInstance) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoUnifiedRoleScheduleInstanceBase(unifiedRoleAssignmentScheduleInstance),
        "activatedUsing": n => { unifiedRoleAssignmentScheduleInstance.activatedUsing = n.getObjectValue<UnifiedRoleEligibilityScheduleInstance>(createUnifiedRoleEligibilityScheduleInstanceFromDiscriminatorValue); },
        "assignmentType": n => { unifiedRoleAssignmentScheduleInstance.assignmentType = n.getStringValue(); },
        "endDateTime": n => { unifiedRoleAssignmentScheduleInstance.endDateTime = n.getDateValue(); },
        "memberType": n => { unifiedRoleAssignmentScheduleInstance.memberType = n.getStringValue(); },
        "roleAssignmentOriginId": n => { unifiedRoleAssignmentScheduleInstance.roleAssignmentOriginId = n.getStringValue(); },
        "roleAssignmentScheduleId": n => { unifiedRoleAssignmentScheduleInstance.roleAssignmentScheduleId = n.getStringValue(); },
        "startDateTime": n => { unifiedRoleAssignmentScheduleInstance.startDateTime = n.getDateValue(); },
    }
}
export function serializeUnifiedRoleAssignmentScheduleInstance(writer: SerializationWriter, unifiedRoleAssignmentScheduleInstance: UnifiedRoleAssignmentScheduleInstance | undefined = {} as UnifiedRoleAssignmentScheduleInstance) : void {
    serializeUnifiedRoleScheduleInstanceBase(writer, unifiedRoleAssignmentScheduleInstance)
    writer.writeObjectValue<UnifiedRoleEligibilityScheduleInstance>("activatedUsing", unifiedRoleAssignmentScheduleInstance.activatedUsing, serializeUnifiedRoleEligibilityScheduleInstance);
    writer.writeStringValue("assignmentType", unifiedRoleAssignmentScheduleInstance.assignmentType);
    writer.writeDateValue("endDateTime", unifiedRoleAssignmentScheduleInstance.endDateTime);
    writer.writeStringValue("memberType", unifiedRoleAssignmentScheduleInstance.memberType);
    writer.writeStringValue("roleAssignmentOriginId", unifiedRoleAssignmentScheduleInstance.roleAssignmentOriginId);
    writer.writeStringValue("roleAssignmentScheduleId", unifiedRoleAssignmentScheduleInstance.roleAssignmentScheduleId);
    writer.writeDateValue("startDateTime", unifiedRoleAssignmentScheduleInstance.startDateTime);
}
export interface UnifiedRoleAssignmentScheduleInstance extends Parsable, UnifiedRoleScheduleInstanceBase {
    /**
     * If the request is from an eligible administrator to activate a role, this parameter will show the related eligible assignment for that activation. Otherwise, it is null. Supports $expand.
     */
    activatedUsing?: UnifiedRoleEligibilityScheduleInstance;
    /**
     * Type of the assignment which can either be Assigned or Activated. Supports $filter (eq, ne).
     */
    assignmentType?: string;
    /**
     * The end date of the schedule instance.
     */
    endDateTime?: Date;
    /**
     * How the assignments is inherited. It can either be Inherited, Direct, or Group. It can further imply whether the unifiedRoleAssignmentSchedule can be managed by the caller. Supports $filter (eq, ne).
     */
    memberType?: string;
    /**
     * The identifier of the role assignment in Microsoft Entra. Supports $filter (eq, ne).
     */
    roleAssignmentOriginId?: string;
    /**
     * The identifier of the unifiedRoleAssignmentSchedule object from which this instance was created. Supports $filter (eq, ne).
     */
    roleAssignmentScheduleId?: string;
    /**
     * When this instance starts.
     */
    startDateTime?: Date;
}
// tslint:enable
// eslint-enable
