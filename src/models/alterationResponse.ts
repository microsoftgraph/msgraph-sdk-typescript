// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createSearchAlterationFromDiscriminatorValue, serializeSearchAlteration, type SearchAlteration } from './searchAlteration';
import { SearchAlterationType } from './searchAlterationType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AlterationResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Defines the original user query string.
     */
    originalQueryString?: string;
    /**
     * Defines the details of the alteration information for the spelling correction.
     */
    queryAlteration?: SearchAlteration;
    /**
     * Defines the type of the spelling correction. Possible values are: suggestion, modification.
     */
    queryAlterationType?: SearchAlterationType;
}
export function createAlterationResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAlterationResponse;
}
export function deserializeIntoAlterationResponse(alterationResponse: AlterationResponse | undefined = {} as AlterationResponse) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { alterationResponse.odataType = n.getStringValue(); },
        "originalQueryString": n => { alterationResponse.originalQueryString = n.getStringValue(); },
        "queryAlteration": n => { alterationResponse.queryAlteration = n.getObjectValue<SearchAlteration>(createSearchAlterationFromDiscriminatorValue); },
        "queryAlterationType": n => { alterationResponse.queryAlterationType = n.getEnumValue<SearchAlterationType>(SearchAlterationType); },
    }
}
export function serializeAlterationResponse(writer: SerializationWriter, alterationResponse: AlterationResponse | undefined = {} as AlterationResponse) : void {
        writer.writeStringValue("@odata.type", alterationResponse.odataType);
        writer.writeStringValue("originalQueryString", alterationResponse.originalQueryString);
        writer.writeObjectValue<SearchAlteration>("queryAlteration", alterationResponse.queryAlteration, serializeSearchAlteration);
        writer.writeEnumValue<SearchAlterationType>("queryAlterationType", alterationResponse.queryAlterationType);
        writer.writeAdditionalData(alterationResponse.additionalData);
}
// tslint:enable
// eslint-enable
