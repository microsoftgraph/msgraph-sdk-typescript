// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createKeyValueFromDiscriminatorValue, serializeKeyValue, type KeyValue } from './keyValue';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export interface AddIn extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The properties property
     */
    properties?: KeyValue[];
    /**
     * The type property
     */
    type?: string;
}
export function createAddInFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAddIn;
}
export function deserializeIntoAddIn(addIn: AddIn | undefined = {} as AddIn) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { addIn.id = n.getGuidValue(); },
        "@odata.type": n => { addIn.odataType = n.getStringValue(); },
        "properties": n => { addIn.properties = n.getCollectionOfObjectValues<KeyValue>(createKeyValueFromDiscriminatorValue); },
        "type": n => { addIn.type = n.getStringValue(); },
    }
}
export function serializeAddIn(writer: SerializationWriter, addIn: AddIn | undefined = {} as AddIn) : void {
        writer.writeGuidValue("id", addIn.id);
        writer.writeStringValue("@odata.type", addIn.odataType);
        writer.writeCollectionOfObjectValues<KeyValue>("properties", addIn.properties, serializeKeyValue);
        writer.writeStringValue("type", addIn.type);
        writer.writeAdditionalData(addIn.additionalData);
}
// tslint:enable
// eslint-enable
