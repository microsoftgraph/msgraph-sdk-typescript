// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGeoCoordinatesFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGeoCoordinates;
}
export function deserializeIntoGeoCoordinates(geoCoordinates: GeoCoordinates | undefined = {} as GeoCoordinates) : Record<string, (node: ParseNode) => void> {
    return {
        "altitude": n => { geoCoordinates.altitude = n.getNumberValue(); },
        "latitude": n => { geoCoordinates.latitude = n.getNumberValue(); },
        "longitude": n => { geoCoordinates.longitude = n.getNumberValue(); },
        "@odata.type": n => { geoCoordinates.odataType = n.getStringValue(); },
    }
}
export interface GeoCoordinates extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Optional. The altitude (height), in feet,  above sea level for the item. Read-only.
     */
    altitude?: number;
    /**
     * Optional. The latitude, in decimal, for the item. Read-only.
     */
    latitude?: number;
    /**
     * Optional. The longitude, in decimal, for the item. Read-only.
     */
    longitude?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeGeoCoordinates(writer: SerializationWriter, geoCoordinates: GeoCoordinates | undefined = {} as GeoCoordinates) : void {
        writer.writeNumberValue("altitude", geoCoordinates.altitude);
        writer.writeNumberValue("latitude", geoCoordinates.latitude);
        writer.writeNumberValue("longitude", geoCoordinates.longitude);
        writer.writeStringValue("@odata.type", geoCoordinates.odataType);
        writer.writeAdditionalData(geoCoordinates.additionalData);
}
// tslint:enable
// eslint-enable
