// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoConditionalAccessExternalTenants, serializeConditionalAccessExternalTenants, type ConditionalAccessExternalTenants } from './conditionalAccessExternalTenants';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessAllExternalTenants extends ConditionalAccessExternalTenants, Parsable {
}
export function createConditionalAccessAllExternalTenantsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessAllExternalTenants;
}
export function deserializeIntoConditionalAccessAllExternalTenants(conditionalAccessAllExternalTenants: ConditionalAccessAllExternalTenants | undefined = {} as ConditionalAccessAllExternalTenants) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoConditionalAccessExternalTenants(conditionalAccessAllExternalTenants),
    }
}
export function serializeConditionalAccessAllExternalTenants(writer: SerializationWriter, conditionalAccessAllExternalTenants: ConditionalAccessAllExternalTenants | undefined = {} as ConditionalAccessAllExternalTenants) : void {
        serializeConditionalAccessExternalTenants(writer, conditionalAccessAllExternalTenants)
}
// tslint:enable
// eslint-enable
