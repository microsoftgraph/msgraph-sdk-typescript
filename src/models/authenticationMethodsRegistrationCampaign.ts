// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AdvancedConfigState } from './advancedConfigState';
import { createAuthenticationMethodsRegistrationCampaignIncludeTargetFromDiscriminatorValue, serializeAuthenticationMethodsRegistrationCampaignIncludeTarget, type AuthenticationMethodsRegistrationCampaignIncludeTarget } from './authenticationMethodsRegistrationCampaignIncludeTarget';
import { createExcludeTargetFromDiscriminatorValue, serializeExcludeTarget, type ExcludeTarget } from './excludeTarget';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthenticationMethodsRegistrationCampaign extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Users and groups of users that are excluded from being prompted to set up the authentication method.
     */
    excludeTargets?: ExcludeTarget[];
    /**
     * Users and groups of users that are prompted to set up the authentication method.
     */
    includeTargets?: AuthenticationMethodsRegistrationCampaignIncludeTarget[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies the number of days that the user sees a prompt again if they select 'Not now' and snoozes the prompt. Minimum: 0 days. Maximum: 14 days. If the value is '0', the user is prompted during every MFA attempt.
     */
    snoozeDurationInDays?: number;
    /**
     * The state property
     */
    state?: AdvancedConfigState;
}
export function createAuthenticationMethodsRegistrationCampaignFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuthenticationMethodsRegistrationCampaign;
}
export function deserializeIntoAuthenticationMethodsRegistrationCampaign(authenticationMethodsRegistrationCampaign: AuthenticationMethodsRegistrationCampaign | undefined = {} as AuthenticationMethodsRegistrationCampaign) : Record<string, (node: ParseNode) => void> {
    return {
        "excludeTargets": n => { authenticationMethodsRegistrationCampaign.excludeTargets = n.getCollectionOfObjectValues<ExcludeTarget>(createExcludeTargetFromDiscriminatorValue); },
        "includeTargets": n => { authenticationMethodsRegistrationCampaign.includeTargets = n.getCollectionOfObjectValues<AuthenticationMethodsRegistrationCampaignIncludeTarget>(createAuthenticationMethodsRegistrationCampaignIncludeTargetFromDiscriminatorValue); },
        "@odata.type": n => { authenticationMethodsRegistrationCampaign.odataType = n.getStringValue(); },
        "snoozeDurationInDays": n => { authenticationMethodsRegistrationCampaign.snoozeDurationInDays = n.getNumberValue(); },
        "state": n => { authenticationMethodsRegistrationCampaign.state = n.getEnumValue<AdvancedConfigState>(AdvancedConfigState); },
    }
}
export function serializeAuthenticationMethodsRegistrationCampaign(writer: SerializationWriter, authenticationMethodsRegistrationCampaign: AuthenticationMethodsRegistrationCampaign | undefined = {} as AuthenticationMethodsRegistrationCampaign) : void {
    writer.writeCollectionOfObjectValues<ExcludeTarget>("excludeTargets", authenticationMethodsRegistrationCampaign.excludeTargets, serializeExcludeTarget);
    writer.writeCollectionOfObjectValues<AuthenticationMethodsRegistrationCampaignIncludeTarget>("includeTargets", authenticationMethodsRegistrationCampaign.includeTargets, serializeAuthenticationMethodsRegistrationCampaignIncludeTarget);
    writer.writeStringValue("@odata.type", authenticationMethodsRegistrationCampaign.odataType);
    writer.writeNumberValue("snoozeDurationInDays", authenticationMethodsRegistrationCampaign.snoozeDurationInDays);
    writer.writeEnumValue<AdvancedConfigState>("state", authenticationMethodsRegistrationCampaign.state);
    writer.writeAdditionalData(authenticationMethodsRegistrationCampaign.additionalData);
}
// tslint:enable
// eslint-enable
