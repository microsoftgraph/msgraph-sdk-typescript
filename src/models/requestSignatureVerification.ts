// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { WeakAlgorithms } from './weakAlgorithms';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRequestSignatureVerificationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRequestSignatureVerification;
}
export function deserializeIntoRequestSignatureVerification(requestSignatureVerification: RequestSignatureVerification | undefined = {} as RequestSignatureVerification) : Record<string, (node: ParseNode) => void> {
    return {
        "allowedWeakAlgorithms": n => { requestSignatureVerification.allowedWeakAlgorithms = n.getCollectionOfEnumValues<WeakAlgorithms>(WeakAlgorithms); },
        "isSignedRequestRequired": n => { requestSignatureVerification.isSignedRequestRequired = n.getBooleanValue(); },
        "@odata.type": n => { requestSignatureVerification.odataType = n.getStringValue(); },
    }
}
export interface RequestSignatureVerification extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies which weak algorithms are allowed.  The possible values are: rsaSha1, unknownFutureValue.
     */
    allowedWeakAlgorithms?: WeakAlgorithms[];
    /**
     * Specifies whether signed authentication requests for this application should be required.
     */
    isSignedRequestRequired?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeRequestSignatureVerification(writer: SerializationWriter, requestSignatureVerification: RequestSignatureVerification | undefined = {} as RequestSignatureVerification) : void {
        writer.writeEnumValue<WeakAlgorithms[]>("allowedWeakAlgorithms", requestSignatureVerification.allowedWeakAlgorithms);
        writer.writeBooleanValue("isSignedRequestRequired", requestSignatureVerification.isSignedRequestRequired);
        writer.writeStringValue("@odata.type", requestSignatureVerification.odataType);
        writer.writeAdditionalData(requestSignatureVerification.additionalData);
}
// tslint:enable
// eslint-enable
