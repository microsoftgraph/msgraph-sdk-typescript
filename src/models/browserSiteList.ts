// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createBrowserSharedCookieFromDiscriminatorValue, serializeBrowserSharedCookie, type BrowserSharedCookie } from './browserSharedCookie';
import { createBrowserSiteFromDiscriminatorValue, serializeBrowserSite, type BrowserSite } from './browserSite';
import { BrowserSiteListStatus } from './browserSiteListStatus';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BrowserSiteList extends Entity, Parsable {
    /**
     * The description of the site list.
     */
    description?: string;
    /**
     * The name of the site list.
     */
    displayName?: string;
    /**
     * The user who last modified the site list.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The date and time when the site list was last modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * The user who published the site list.
     */
    publishedBy?: IdentitySet;
    /**
     * The date and time when the site list was published.
     */
    publishedDateTime?: Date;
    /**
     * The current revision of the site list.
     */
    revision?: string;
    /**
     * A collection of shared cookies defined for the site list.
     */
    sharedCookies?: BrowserSharedCookie[];
    /**
     * A collection of sites defined for the site list.
     */
    sites?: BrowserSite[];
    /**
     * The status property
     */
    status?: BrowserSiteListStatus;
}
export function createBrowserSiteListFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBrowserSiteList;
}
export function deserializeIntoBrowserSiteList(browserSiteList: BrowserSiteList | undefined = {} as BrowserSiteList) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(browserSiteList),
        "description": n => { browserSiteList.description = n.getStringValue(); },
        "displayName": n => { browserSiteList.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { browserSiteList.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { browserSiteList.lastModifiedDateTime = n.getDateValue(); },
        "publishedBy": n => { browserSiteList.publishedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "publishedDateTime": n => { browserSiteList.publishedDateTime = n.getDateValue(); },
        "revision": n => { browserSiteList.revision = n.getStringValue(); },
        "sharedCookies": n => { browserSiteList.sharedCookies = n.getCollectionOfObjectValues<BrowserSharedCookie>(createBrowserSharedCookieFromDiscriminatorValue); },
        "sites": n => { browserSiteList.sites = n.getCollectionOfObjectValues<BrowserSite>(createBrowserSiteFromDiscriminatorValue); },
        "status": n => { browserSiteList.status = n.getEnumValue<BrowserSiteListStatus>(BrowserSiteListStatus); },
    }
}
export function serializeBrowserSiteList(writer: SerializationWriter, browserSiteList: BrowserSiteList | undefined = {} as BrowserSiteList) : void {
    serializeEntity(writer, browserSiteList)
    writer.writeStringValue("description", browserSiteList.description);
    writer.writeStringValue("displayName", browserSiteList.displayName);
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", browserSiteList.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", browserSiteList.lastModifiedDateTime);
    writer.writeObjectValue<IdentitySet>("publishedBy", browserSiteList.publishedBy, serializeIdentitySet);
    writer.writeDateValue("publishedDateTime", browserSiteList.publishedDateTime);
    writer.writeStringValue("revision", browserSiteList.revision);
    writer.writeCollectionOfObjectValues<BrowserSharedCookie>("sharedCookies", browserSiteList.sharedCookies, serializeBrowserSharedCookie);
    writer.writeCollectionOfObjectValues<BrowserSite>("sites", browserSiteList.sites, serializeBrowserSite);
    writer.writeEnumValue<BrowserSiteListStatus>("status", browserSiteList.status);
}
// tslint:enable
// eslint-enable
