// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoApplicationEnforcedRestrictionsSessionControl } from './applicationEnforcedRestrictionsSessionControl';
import { deserializeIntoCloudAppSecuritySessionControl } from './cloudAppSecuritySessionControl';
import { type ApplicationEnforcedRestrictionsSessionControl, type CloudAppSecuritySessionControl, type PersistentBrowserSessionControl, type SignInFrequencySessionControl } from './index';
import { deserializeIntoPersistentBrowserSessionControl } from './persistentBrowserSessionControl';
import { deserializeIntoSignInFrequencySessionControl } from './signInFrequencySessionControl';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessSessionControl extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies whether the session control is enabled.
     */
    isEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createConditionalAccessSessionControlFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.applicationEnforcedRestrictionsSessionControl":
                    return deserializeIntoApplicationEnforcedRestrictionsSessionControl;
                case "#microsoft.graph.cloudAppSecuritySessionControl":
                    return deserializeIntoCloudAppSecuritySessionControl;
                case "#microsoft.graph.persistentBrowserSessionControl":
                    return deserializeIntoPersistentBrowserSessionControl;
                case "#microsoft.graph.signInFrequencySessionControl":
                    return deserializeIntoSignInFrequencySessionControl;
            }
        }
    }
    return deserializeIntoConditionalAccessSessionControl;
}
export function deserializeIntoConditionalAccessSessionControl(conditionalAccessSessionControl: ConditionalAccessSessionControl | undefined = {} as ConditionalAccessSessionControl) : Record<string, (node: ParseNode) => void> {
    return {
        "isEnabled": n => { conditionalAccessSessionControl.isEnabled = n.getBooleanValue(); },
        "@odata.type": n => { conditionalAccessSessionControl.odataType = n.getStringValue(); },
    }
}
export function serializeConditionalAccessSessionControl(writer: SerializationWriter, conditionalAccessSessionControl: ConditionalAccessSessionControl | undefined = {} as ConditionalAccessSessionControl) : void {
    writer.writeBooleanValue("isEnabled", conditionalAccessSessionControl.isEnabled);
    writer.writeStringValue("@odata.type", conditionalAccessSessionControl.odataType);
    writer.writeAdditionalData(conditionalAccessSessionControl.additionalData);
}
// tslint:enable
// eslint-enable
