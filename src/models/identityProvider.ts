// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIdentityProviderFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIdentityProvider;
}
export function deserializeIntoIdentityProvider(identityProvider: IdentityProvider | undefined = {} as IdentityProvider) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(identityProvider),
        "clientId": n => { identityProvider.clientId = n.getStringValue(); },
        "clientSecret": n => { identityProvider.clientSecret = n.getStringValue(); },
        "name": n => { identityProvider.name = n.getStringValue(); },
        "type": n => { identityProvider.type = n.getStringValue(); },
    }
}
export interface IdentityProvider extends Entity, Parsable {
    /**
     * The client ID for the application. This is the client ID obtained when registering the application with the identity provider. Required. Not nullable.
     */
    clientId?: string;
    /**
     * The client secret for the application. This is the client secret obtained when registering the application with the identity provider. This is write-only. A read operation will return .  Required. Not nullable.
     */
    clientSecret?: string;
    /**
     * The display name of the identity provider. Not nullable.
     */
    name?: string;
    /**
     * The identity provider type is a required field. For B2B scenario: Google, Facebook. For B2C scenario: Microsoft, Google, Amazon, LinkedIn, Facebook, GitHub, Twitter, Weibo, QQ, WeChat, OpenIDConnect. Not nullable.
     */
    type?: string;
}
export function serializeIdentityProvider(writer: SerializationWriter, identityProvider: IdentityProvider | undefined = {} as IdentityProvider) : void {
        serializeEntity(writer, identityProvider)
        writer.writeStringValue("clientId", identityProvider.clientId);
        writer.writeStringValue("clientSecret", identityProvider.clientSecret);
        writer.writeStringValue("name", identityProvider.name);
        writer.writeStringValue("type", identityProvider.type);
}
// tslint:enable
// eslint-enable
