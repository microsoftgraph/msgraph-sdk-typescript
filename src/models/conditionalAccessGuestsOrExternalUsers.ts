// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConditionalAccessExternalTenantsFromDiscriminatorValue, serializeConditionalAccessExternalTenants, type ConditionalAccessExternalTenants } from './conditionalAccessExternalTenants';
import { ConditionalAccessGuestOrExternalUserTypes } from './conditionalAccessGuestOrExternalUserTypes';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessGuestsOrExternalUsers extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The tenant IDs of the selected types of external users. Either all B2B tenant or a collection of tenant IDs. External tenants can be specified only when the property guestOrExternalUserTypes isn't null or an empty String.
     */
    externalTenants?: ConditionalAccessExternalTenants;
    /**
     * The guestOrExternalUserTypes property
     */
    guestOrExternalUserTypes?: ConditionalAccessGuestOrExternalUserTypes[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createConditionalAccessGuestsOrExternalUsersFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessGuestsOrExternalUsers;
}
export function deserializeIntoConditionalAccessGuestsOrExternalUsers(conditionalAccessGuestsOrExternalUsers: ConditionalAccessGuestsOrExternalUsers | undefined = {} as ConditionalAccessGuestsOrExternalUsers) : Record<string, (node: ParseNode) => void> {
    return {
        "externalTenants": n => { conditionalAccessGuestsOrExternalUsers.externalTenants = n.getObjectValue<ConditionalAccessExternalTenants>(createConditionalAccessExternalTenantsFromDiscriminatorValue); },
        "guestOrExternalUserTypes": n => { conditionalAccessGuestsOrExternalUsers.guestOrExternalUserTypes = n.getCollectionOfEnumValues<ConditionalAccessGuestOrExternalUserTypes>(ConditionalAccessGuestOrExternalUserTypes); },
        "@odata.type": n => { conditionalAccessGuestsOrExternalUsers.odataType = n.getStringValue(); },
    }
}
export function serializeConditionalAccessGuestsOrExternalUsers(writer: SerializationWriter, conditionalAccessGuestsOrExternalUsers: ConditionalAccessGuestsOrExternalUsers | undefined = {} as ConditionalAccessGuestsOrExternalUsers) : void {
        writer.writeObjectValue<ConditionalAccessExternalTenants>("externalTenants", conditionalAccessGuestsOrExternalUsers.externalTenants, );
        writer.writeEnumValue<ConditionalAccessGuestOrExternalUserTypes[]>("guestOrExternalUserTypes", conditionalAccessGuestsOrExternalUsers.guestOrExternalUserTypes);
        writer.writeStringValue("@odata.type", conditionalAccessGuestsOrExternalUsers.odataType);
        writer.writeAdditionalData(conditionalAccessGuestsOrExternalUsers.additionalData);
}
// tslint:enable
// eslint-enable
