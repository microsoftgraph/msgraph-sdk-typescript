// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessReviewReviewer extends Entity, Parsable {
    /**
     * The date when the reviewer was added for the access review.
     */
    createdDateTime?: Date;
    /**
     * Name of reviewer.
     */
    displayName?: string;
    /**
     * User principal name of the reviewer.
     */
    userPrincipalName?: string;
}
export function createAccessReviewReviewerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessReviewReviewer;
}
export function deserializeIntoAccessReviewReviewer(accessReviewReviewer: AccessReviewReviewer | undefined = {} as AccessReviewReviewer) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(accessReviewReviewer),
        "createdDateTime": n => { accessReviewReviewer.createdDateTime = n.getDateValue(); },
        "displayName": n => { accessReviewReviewer.displayName = n.getStringValue(); },
        "userPrincipalName": n => { accessReviewReviewer.userPrincipalName = n.getStringValue(); },
    }
}
export function serializeAccessReviewReviewer(writer: SerializationWriter, accessReviewReviewer: AccessReviewReviewer | undefined = {} as AccessReviewReviewer) : void {
        serializeEntity(writer, accessReviewReviewer)
        writer.writeDateValue("createdDateTime", accessReviewReviewer.createdDateTime);
        writer.writeStringValue("displayName", accessReviewReviewer.displayName);
        writer.writeStringValue("userPrincipalName", accessReviewReviewer.userPrincipalName);
}
// tslint:enable
// eslint-enable
