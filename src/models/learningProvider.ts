// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createLearningContentFromDiscriminatorValue, serializeLearningContent, type LearningContent } from './learningContent';
import { createLearningCourseActivityFromDiscriminatorValue, serializeLearningCourseActivity, type LearningCourseActivity } from './learningCourseActivity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLearningProviderFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLearningProvider;
}
export function deserializeIntoLearningProvider(learningProvider: LearningProvider | undefined = {} as LearningProvider) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(learningProvider),
        "displayName": n => { learningProvider.displayName = n.getStringValue(); },
        "isCourseActivitySyncEnabled": n => { learningProvider.isCourseActivitySyncEnabled = n.getBooleanValue(); },
        "learningContents": n => { learningProvider.learningContents = n.getCollectionOfObjectValues<LearningContent>(createLearningContentFromDiscriminatorValue); },
        "learningCourseActivities": n => { learningProvider.learningCourseActivities = n.getCollectionOfObjectValues<LearningCourseActivity>(createLearningCourseActivityFromDiscriminatorValue); },
        "loginWebUrl": n => { learningProvider.loginWebUrl = n.getStringValue(); },
        "longLogoWebUrlForDarkTheme": n => { learningProvider.longLogoWebUrlForDarkTheme = n.getStringValue(); },
        "longLogoWebUrlForLightTheme": n => { learningProvider.longLogoWebUrlForLightTheme = n.getStringValue(); },
        "squareLogoWebUrlForDarkTheme": n => { learningProvider.squareLogoWebUrlForDarkTheme = n.getStringValue(); },
        "squareLogoWebUrlForLightTheme": n => { learningProvider.squareLogoWebUrlForLightTheme = n.getStringValue(); },
    }
}
export interface LearningProvider extends Entity, Parsable {
    /**
     * The display name that appears in Viva Learning. Required.
     */
    displayName?: string;
    /**
     * Indicates whether a provider can ingest learning course activity records. The default value is false. Set to true to make learningCourseActivities available for this provider.
     */
    isCourseActivitySyncEnabled?: boolean;
    /**
     * Learning catalog items for the provider.
     */
    learningContents?: LearningContent[];
    /**
     * The learningCourseActivities property
     */
    learningCourseActivities?: LearningCourseActivity[];
    /**
     * Authentication URL to access the courses for the provider. Optional.
     */
    loginWebUrl?: string;
    /**
     * The long logo URL for the dark mode that needs to be a publicly accessible image. This image would be saved to the blob storage of Viva Learning for rendering within the Viva Learning app. Required.
     */
    longLogoWebUrlForDarkTheme?: string;
    /**
     * The long logo URL for the light mode that needs to be a publicly accessible image. This image would be saved to the blob storage of Viva Learning for rendering within the Viva Learning app. Required.
     */
    longLogoWebUrlForLightTheme?: string;
    /**
     * The square logo URL for the dark mode that needs to be a publicly accessible image. This image would be saved to the blob storage of Viva Learning for rendering within the Viva Learning app. Required.
     */
    squareLogoWebUrlForDarkTheme?: string;
    /**
     * The square logo URL for the light mode that needs to be a publicly accessible image. This image would be saved to the blob storage of Viva Learning for rendering within the Viva Learning app. Required.
     */
    squareLogoWebUrlForLightTheme?: string;
}
export function serializeLearningProvider(writer: SerializationWriter, learningProvider: LearningProvider | undefined = {} as LearningProvider) : void {
        serializeEntity(writer, learningProvider)
        writer.writeStringValue("displayName", learningProvider.displayName);
        writer.writeBooleanValue("isCourseActivitySyncEnabled", learningProvider.isCourseActivitySyncEnabled);
        writer.writeCollectionOfObjectValues<LearningContent>("learningContents", learningProvider.learningContents, serializeLearningContent);
        writer.writeCollectionOfObjectValues<LearningCourseActivity>("learningCourseActivities", learningProvider.learningCourseActivities, serializeLearningCourseActivity);
        writer.writeStringValue("loginWebUrl", learningProvider.loginWebUrl);
        writer.writeStringValue("longLogoWebUrlForDarkTheme", learningProvider.longLogoWebUrlForDarkTheme);
        writer.writeStringValue("longLogoWebUrlForLightTheme", learningProvider.longLogoWebUrlForLightTheme);
        writer.writeStringValue("squareLogoWebUrlForDarkTheme", learningProvider.squareLogoWebUrlForDarkTheme);
        writer.writeStringValue("squareLogoWebUrlForLightTheme", learningProvider.squareLogoWebUrlForLightTheme);
}
// tslint:enable
// eslint-enable
