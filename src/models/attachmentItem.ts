// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AttachmentType } from './attachmentType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttachmentItem extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The type of attachment. Possible values are: file, item, reference. Required.
     */
    attachmentType?: AttachmentType;
    /**
     * The CID or Content-Id of the attachment for referencing for the in-line attachments using the <img src='cid:contentId'> tag in HTML messages. Optional.
     */
    contentId?: string;
    /**
     * The nature of the data in the attachment. Optional.
     */
    contentType?: string;
    /**
     * true if the attachment is an inline attachment; otherwise, false. Optional.
     */
    isInline?: boolean;
    /**
     * The display name of the attachment. This can be a descriptive string and doesn't have to be the actual file name. Required.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The length of the attachment in bytes. Required.
     */
    size?: number;
}
export function createAttachmentItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttachmentItem;
}
export function deserializeIntoAttachmentItem(attachmentItem: AttachmentItem | undefined = {} as AttachmentItem) : Record<string, (node: ParseNode) => void> {
    return {
        "attachmentType": n => { attachmentItem.attachmentType = n.getEnumValue<AttachmentType>(AttachmentType); },
        "contentId": n => { attachmentItem.contentId = n.getStringValue(); },
        "contentType": n => { attachmentItem.contentType = n.getStringValue(); },
        "isInline": n => { attachmentItem.isInline = n.getBooleanValue(); },
        "name": n => { attachmentItem.name = n.getStringValue(); },
        "@odata.type": n => { attachmentItem.odataType = n.getStringValue(); },
        "size": n => { attachmentItem.size = n.getNumberValue(); },
    }
}
export function serializeAttachmentItem(writer: SerializationWriter, attachmentItem: AttachmentItem | undefined = {} as AttachmentItem) : void {
        writer.writeEnumValue<AttachmentType>("attachmentType", attachmentItem.attachmentType);
        writer.writeStringValue("contentId", attachmentItem.contentId);
        writer.writeStringValue("contentType", attachmentItem.contentType);
        writer.writeBooleanValue("isInline", attachmentItem.isInline);
        writer.writeStringValue("name", attachmentItem.name);
        writer.writeStringValue("@odata.type", attachmentItem.odataType);
        writer.writeNumberValue("size", attachmentItem.size);
        writer.writeAdditionalData(attachmentItem.additionalData);
}
// tslint:enable
// eslint-enable
