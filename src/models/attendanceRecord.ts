// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttendanceIntervalFromDiscriminatorValue, serializeAttendanceInterval, type AttendanceInterval } from './attendanceInterval';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentityFromDiscriminatorValue, serializeIdentity, type Identity } from './identity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttendanceRecord extends Entity, Parsable {
    /**
     * List of time periods between joining and leaving a meeting.
     */
    attendanceIntervals?: AttendanceInterval[];
    /**
     * Email address of the user associated with this attendance record.
     */
    emailAddress?: string;
    /**
     * Identity of the user associated with this attendance record.
     */
    identity?: Identity;
    /**
     * Role of the attendee. Possible values are: None, Attendee, Presenter, and Organizer.
     */
    role?: string;
    /**
     * Total duration of the attendances in seconds.
     */
    totalAttendanceInSeconds?: number;
}
export function createAttendanceRecordFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttendanceRecord;
}
export function deserializeIntoAttendanceRecord(attendanceRecord: AttendanceRecord | undefined = {} as AttendanceRecord) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(attendanceRecord),
        "attendanceIntervals": n => { attendanceRecord.attendanceIntervals = n.getCollectionOfObjectValues<AttendanceInterval>(createAttendanceIntervalFromDiscriminatorValue); },
        "emailAddress": n => { attendanceRecord.emailAddress = n.getStringValue(); },
        "identity": n => { attendanceRecord.identity = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "role": n => { attendanceRecord.role = n.getStringValue(); },
        "totalAttendanceInSeconds": n => { attendanceRecord.totalAttendanceInSeconds = n.getNumberValue(); },
    }
}
export function serializeAttendanceRecord(writer: SerializationWriter, attendanceRecord: AttendanceRecord | undefined = {} as AttendanceRecord) : void {
    serializeEntity(writer, attendanceRecord)
    writer.writeCollectionOfObjectValues<AttendanceInterval>("attendanceIntervals", attendanceRecord.attendanceIntervals, serializeAttendanceInterval);
    writer.writeStringValue("emailAddress", attendanceRecord.emailAddress);
    writer.writeObjectValue<Identity>("identity", attendanceRecord.identity, serializeIdentity);
    writer.writeStringValue("role", attendanceRecord.role);
    writer.writeNumberValue("totalAttendanceInSeconds", attendanceRecord.totalAttendanceInSeconds);
}
// tslint:enable
// eslint-enable
