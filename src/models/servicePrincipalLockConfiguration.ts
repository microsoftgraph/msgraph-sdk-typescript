// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createServicePrincipalLockConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoServicePrincipalLockConfiguration;
}
export function deserializeIntoServicePrincipalLockConfiguration(servicePrincipalLockConfiguration: ServicePrincipalLockConfiguration | undefined = {} as ServicePrincipalLockConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        "allProperties": n => { servicePrincipalLockConfiguration.allProperties = n.getBooleanValue(); },
        "credentialsWithUsageSign": n => { servicePrincipalLockConfiguration.credentialsWithUsageSign = n.getBooleanValue(); },
        "credentialsWithUsageVerify": n => { servicePrincipalLockConfiguration.credentialsWithUsageVerify = n.getBooleanValue(); },
        "isEnabled": n => { servicePrincipalLockConfiguration.isEnabled = n.getBooleanValue(); },
        "@odata.type": n => { servicePrincipalLockConfiguration.odataType = n.getStringValue(); },
        "tokenEncryptionKeyId": n => { servicePrincipalLockConfiguration.tokenEncryptionKeyId = n.getBooleanValue(); },
    }
}
export function serializeServicePrincipalLockConfiguration(writer: SerializationWriter, servicePrincipalLockConfiguration: ServicePrincipalLockConfiguration | undefined = {} as ServicePrincipalLockConfiguration) : void {
        writer.writeBooleanValue("allProperties", servicePrincipalLockConfiguration.allProperties);
        writer.writeBooleanValue("credentialsWithUsageSign", servicePrincipalLockConfiguration.credentialsWithUsageSign);
        writer.writeBooleanValue("credentialsWithUsageVerify", servicePrincipalLockConfiguration.credentialsWithUsageVerify);
        writer.writeBooleanValue("isEnabled", servicePrincipalLockConfiguration.isEnabled);
        writer.writeStringValue("@odata.type", servicePrincipalLockConfiguration.odataType);
        writer.writeBooleanValue("tokenEncryptionKeyId", servicePrincipalLockConfiguration.tokenEncryptionKeyId);
        writer.writeAdditionalData(servicePrincipalLockConfiguration.additionalData);
}
export interface ServicePrincipalLockConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Enables locking all sensitive properties. The sensitive properties are keyCredentials, passwordCredentials, and tokenEncryptionKeyId.
     */
    allProperties?: boolean;
    /**
     * Locks the keyCredentials and passwordCredentials properties for modification where credential usage type is Sign.
     */
    credentialsWithUsageSign?: boolean;
    /**
     * Locks the keyCredentials and passwordCredentials properties for modification where credential usage type is Verify. This locks OAuth service principals.
     */
    credentialsWithUsageVerify?: boolean;
    /**
     * Enables or disables service principal lock configuration. To allow the sensitive properties to be updated, update this property to false to disable the lock on the service principal.
     */
    isEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Locks the tokenEncryptionKeyId property for modification on the service principal.
     */
    tokenEncryptionKeyId?: boolean;
}
// tslint:enable
// eslint-enable
