// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIpRangeFromDiscriminatorValue, serializeIpRange, type IpRange } from './ipRange';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindowsInformationProtectionIPRangeCollectionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindowsInformationProtectionIPRangeCollection;
}
export function deserializeIntoWindowsInformationProtectionIPRangeCollection(windowsInformationProtectionIPRangeCollection: WindowsInformationProtectionIPRangeCollection | undefined = {} as WindowsInformationProtectionIPRangeCollection) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { windowsInformationProtectionIPRangeCollection.displayName = n.getStringValue(); },
        "@odata.type": n => { windowsInformationProtectionIPRangeCollection.odataType = n.getStringValue(); },
        "ranges": n => { windowsInformationProtectionIPRangeCollection.ranges = n.getCollectionOfObjectValues<IpRange>(createIpRangeFromDiscriminatorValue); },
    }
}
export function serializeWindowsInformationProtectionIPRangeCollection(writer: SerializationWriter, windowsInformationProtectionIPRangeCollection: WindowsInformationProtectionIPRangeCollection | undefined = {} as WindowsInformationProtectionIPRangeCollection) : void {
        writer.writeStringValue("displayName", windowsInformationProtectionIPRangeCollection.displayName);
        writer.writeStringValue("@odata.type", windowsInformationProtectionIPRangeCollection.odataType);
        writer.writeCollectionOfObjectValues<IpRange>("ranges", windowsInformationProtectionIPRangeCollection.ranges, );
        writer.writeAdditionalData(windowsInformationProtectionIPRangeCollection.additionalData);
}
export interface WindowsInformationProtectionIPRangeCollection extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Display name
     */
    displayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Collection of ip ranges
     */
    ranges?: IpRange[];
}
// tslint:enable
// eslint-enable
