// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AlternativeSecurityId extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * For internal use only.
     */
    identityProvider?: string;
    /**
     * For internal use only.
     */
    key?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * For internal use only.
     */
    type?: number;
}
export function createAlternativeSecurityIdFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAlternativeSecurityId;
}
export function deserializeIntoAlternativeSecurityId(alternativeSecurityId: AlternativeSecurityId | undefined = {} as AlternativeSecurityId) : Record<string, (node: ParseNode) => void> {
    return {
        "identityProvider": n => { alternativeSecurityId.identityProvider = n.getStringValue(); },
        "key": n => { alternativeSecurityId.key = n.getStringValue(); },
        "@odata.type": n => { alternativeSecurityId.odataType = n.getStringValue(); },
        "type": n => { alternativeSecurityId.type = n.getNumberValue(); },
    }
}
export function serializeAlternativeSecurityId(writer: SerializationWriter, alternativeSecurityId: AlternativeSecurityId | undefined = {} as AlternativeSecurityId) : void {
    writer.writeStringValue("identityProvider", alternativeSecurityId.identityProvider);
    writer.writeStringValue("key", alternativeSecurityId.key);
    writer.writeStringValue("@odata.type", alternativeSecurityId.odataType);
    writer.writeNumberValue("type", alternativeSecurityId.type);
    writer.writeAdditionalData(alternativeSecurityId.additionalData);
}
// tslint:enable
// eslint-enable
