// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserExperienceAnalyticsAppHealthOSVersionPerformanceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserExperienceAnalyticsAppHealthOSVersionPerformance;
}
export function deserializeIntoUserExperienceAnalyticsAppHealthOSVersionPerformance(userExperienceAnalyticsAppHealthOSVersionPerformance: UserExperienceAnalyticsAppHealthOSVersionPerformance | undefined = {} as UserExperienceAnalyticsAppHealthOSVersionPerformance) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(userExperienceAnalyticsAppHealthOSVersionPerformance),
        "activeDeviceCount": n => { userExperienceAnalyticsAppHealthOSVersionPerformance.activeDeviceCount = n.getNumberValue(); },
        "meanTimeToFailureInMinutes": n => { userExperienceAnalyticsAppHealthOSVersionPerformance.meanTimeToFailureInMinutes = n.getNumberValue(); },
        "osBuildNumber": n => { userExperienceAnalyticsAppHealthOSVersionPerformance.osBuildNumber = n.getStringValue(); },
        "osVersion": n => { userExperienceAnalyticsAppHealthOSVersionPerformance.osVersion = n.getStringValue(); },
        "osVersionAppHealthScore": n => { userExperienceAnalyticsAppHealthOSVersionPerformance.osVersionAppHealthScore = n.getNumberValue(); },
    }
}
export function serializeUserExperienceAnalyticsAppHealthOSVersionPerformance(writer: SerializationWriter, userExperienceAnalyticsAppHealthOSVersionPerformance: UserExperienceAnalyticsAppHealthOSVersionPerformance | undefined = {} as UserExperienceAnalyticsAppHealthOSVersionPerformance) : void {
        serializeEntity(writer, userExperienceAnalyticsAppHealthOSVersionPerformance)
        writer.writeNumberValue("activeDeviceCount", userExperienceAnalyticsAppHealthOSVersionPerformance.activeDeviceCount);
        writer.writeNumberValue("meanTimeToFailureInMinutes", userExperienceAnalyticsAppHealthOSVersionPerformance.meanTimeToFailureInMinutes);
        writer.writeStringValue("osBuildNumber", userExperienceAnalyticsAppHealthOSVersionPerformance.osBuildNumber);
        writer.writeStringValue("osVersion", userExperienceAnalyticsAppHealthOSVersionPerformance.osVersion);
        writer.writeNumberValue("osVersionAppHealthScore", userExperienceAnalyticsAppHealthOSVersionPerformance.osVersionAppHealthScore);
}
export interface UserExperienceAnalyticsAppHealthOSVersionPerformance extends Entity, Parsable {
    /**
     * The number of active devices for the OS version. Valid values 0 to 2147483647. Supports: $filter, $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
     */
    activeDeviceCount?: number;
    /**
     * The mean time to failure for the application in minutes. Valid values 0 to 2147483647. Supports: $filter, $select, $OrderBy. Read-only. Valid values -2147483648 to 2147483647
     */
    meanTimeToFailureInMinutes?: number;
    /**
     * The OS build number installed on the device. Supports: $select, $OrderBy. Read-only.
     */
    osBuildNumber?: string;
    /**
     * The OS version installed on the device. Supports: $select, $OrderBy. Read-only.
     */
    osVersion?: string;
    /**
     * The application health score of the OS version. Valid values 0 to 100. Supports: $filter, $select, $OrderBy. Read-only. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
     */
    osVersionAppHealthScore?: number;
}
// tslint:enable
// eslint-enable
