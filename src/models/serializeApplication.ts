import { type AddIn } from './addIn';
import { type ApiApplication } from './apiApplication';
import { type Application } from './application';
import { type AppManagementPolicy } from './appManagementPolicy';
import { type AppRole } from './appRole';
import { type Certification } from './certification';
import { type DirectoryObject } from './directoryObject';
import { type ExtensionProperty } from './extensionProperty';
import { type FederatedIdentityCredential } from './federatedIdentityCredential';
import { type HomeRealmDiscoveryPolicy } from './homeRealmDiscoveryPolicy';
import { type InformationalUrl } from './informationalUrl';
import { type KeyCredential } from './keyCredential';
import { type OptionalClaims } from './optionalClaims';
import { type ParentalControlSettings } from './parentalControlSettings';
import { type PasswordCredential } from './passwordCredential';
import { type PublicClientApplication } from './publicClientApplication';
import { type RequestSignatureVerification } from './requestSignatureVerification';
import { type RequiredResourceAccess } from './requiredResourceAccess';
import { serializeAddIn } from './serializeAddIn';
import { serializeApiApplication } from './serializeApiApplication';
import { serializeAppManagementPolicy } from './serializeAppManagementPolicy';
import { serializeAppRole } from './serializeAppRole';
import { serializeCertification } from './serializeCertification';
import { serializeDirectoryObject } from './serializeDirectoryObject';
import { serializeExtensionProperty } from './serializeExtensionProperty';
import { serializeFederatedIdentityCredential } from './serializeFederatedIdentityCredential';
import { serializeHomeRealmDiscoveryPolicy } from './serializeHomeRealmDiscoveryPolicy';
import { serializeInformationalUrl } from './serializeInformationalUrl';
import { serializeKeyCredential } from './serializeKeyCredential';
import { serializeOptionalClaims } from './serializeOptionalClaims';
import { serializeParentalControlSettings } from './serializeParentalControlSettings';
import { serializePasswordCredential } from './serializePasswordCredential';
import { serializePublicClientApplication } from './serializePublicClientApplication';
import { serializeRequestSignatureVerification } from './serializeRequestSignatureVerification';
import { serializeRequiredResourceAccess } from './serializeRequiredResourceAccess';
import { serializeServicePrincipalLockConfiguration } from './serializeServicePrincipalLockConfiguration';
import { serializeSpaApplication } from './serializeSpaApplication';
import { serializeSynchronization } from './serializeSynchronization';
import { serializeTokenIssuancePolicy } from './serializeTokenIssuancePolicy';
import { serializeTokenLifetimePolicy } from './serializeTokenLifetimePolicy';
import { serializeVerifiedPublisher } from './serializeVerifiedPublisher';
import { serializeWebApplication } from './serializeWebApplication';
import { type ServicePrincipalLockConfiguration } from './servicePrincipalLockConfiguration';
import { type SpaApplication } from './spaApplication';
import { type Synchronization } from './synchronization';
import { type TokenIssuancePolicy } from './tokenIssuancePolicy';
import { type TokenLifetimePolicy } from './tokenLifetimePolicy';
import { type VerifiedPublisher } from './verifiedPublisher';
import { type WebApplication } from './webApplication';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { Guid } from 'guid-typescript';

export function serializeApplication(writer: SerializationWriter, application: Application | undefined = {} as Application) : void {
        serializeDirectoryObject(writer, application)
        writer.writeCollectionOfObjectValues<AddIn>("addIns", application.addIns, serializeAddIn);
        writer.writeObjectValue<ApiApplication>("api", application.api, serializeApiApplication);
        writer.writeStringValue("appId", application.appId);
        writer.writeStringValue("applicationTemplateId", application.applicationTemplateId);
        writer.writeCollectionOfObjectValues<AppManagementPolicy>("appManagementPolicies", application.appManagementPolicies, serializeAppManagementPolicy);
        writer.writeCollectionOfObjectValues<AppRole>("appRoles", application.appRoles, serializeAppRole);
        writer.writeObjectValue<Certification>("certification", application.certification, serializeCertification);
        writer.writeDateValue("createdDateTime", application.createdDateTime);
        writer.writeObjectValue<DirectoryObject>("createdOnBehalfOf", application.createdOnBehalfOf, serializeDirectoryObject);
        writer.writeStringValue("defaultRedirectUri", application.defaultRedirectUri);
        writer.writeStringValue("description", application.description);
        writer.writeStringValue("disabledByMicrosoftStatus", application.disabledByMicrosoftStatus);
        writer.writeStringValue("displayName", application.displayName);
        writer.writeCollectionOfObjectValues<ExtensionProperty>("extensionProperties", application.extensionProperties, serializeExtensionProperty);
        writer.writeCollectionOfObjectValues<FederatedIdentityCredential>("federatedIdentityCredentials", application.federatedIdentityCredentials, serializeFederatedIdentityCredential);
        writer.writeStringValue("groupMembershipClaims", application.groupMembershipClaims);
        writer.writeCollectionOfObjectValues<HomeRealmDiscoveryPolicy>("homeRealmDiscoveryPolicies", application.homeRealmDiscoveryPolicies, serializeHomeRealmDiscoveryPolicy);
        writer.writeCollectionOfPrimitiveValues<string>("identifierUris", application.identifierUris);
        writer.writeObjectValue<InformationalUrl>("info", application.info, serializeInformationalUrl);
        writer.writeBooleanValue("isDeviceOnlyAuthSupported", application.isDeviceOnlyAuthSupported);
        writer.writeBooleanValue("isFallbackPublicClient", application.isFallbackPublicClient);
        writer.writeCollectionOfObjectValues<KeyCredential>("keyCredentials", application.keyCredentials, serializeKeyCredential);
        writer.writeStringValue("logo", application.logo);
        writer.writeStringValue("notes", application.notes);
        writer.writeBooleanValue("oauth2RequirePostResponse", application.oauth2RequirePostResponse);
        writer.writeObjectValue<OptionalClaims>("optionalClaims", application.optionalClaims, serializeOptionalClaims);
        writer.writeCollectionOfObjectValues<DirectoryObject>("owners", application.owners, serializeDirectoryObject);
        writer.writeObjectValue<ParentalControlSettings>("parentalControlSettings", application.parentalControlSettings, serializeParentalControlSettings);
        writer.writeCollectionOfObjectValues<PasswordCredential>("passwordCredentials", application.passwordCredentials, serializePasswordCredential);
        writer.writeObjectValue<PublicClientApplication>("publicClient", application.publicClient, serializePublicClientApplication);
        writer.writeStringValue("publisherDomain", application.publisherDomain);
        writer.writeObjectValue<RequestSignatureVerification>("requestSignatureVerification", application.requestSignatureVerification, serializeRequestSignatureVerification);
        writer.writeCollectionOfObjectValues<RequiredResourceAccess>("requiredResourceAccess", application.requiredResourceAccess, serializeRequiredResourceAccess);
        writer.writeStringValue("samlMetadataUrl", application.samlMetadataUrl);
        writer.writeStringValue("serviceManagementReference", application.serviceManagementReference);
        writer.writeObjectValue<ServicePrincipalLockConfiguration>("servicePrincipalLockConfiguration", application.servicePrincipalLockConfiguration, serializeServicePrincipalLockConfiguration);
        writer.writeStringValue("signInAudience", application.signInAudience);
        writer.writeObjectValue<SpaApplication>("spa", application.spa, serializeSpaApplication);
        writer.writeObjectValue<Synchronization>("synchronization", application.synchronization, serializeSynchronization);
        writer.writeCollectionOfPrimitiveValues<string>("tags", application.tags);
        writer.writeGuidValue("tokenEncryptionKeyId", application.tokenEncryptionKeyId);
        writer.writeCollectionOfObjectValues<TokenIssuancePolicy>("tokenIssuancePolicies", application.tokenIssuancePolicies, serializeTokenIssuancePolicy);
        writer.writeCollectionOfObjectValues<TokenLifetimePolicy>("tokenLifetimePolicies", application.tokenLifetimePolicies, serializeTokenLifetimePolicy);
        writer.writeObjectValue<VerifiedPublisher>("verifiedPublisher", application.verifiedPublisher, serializeVerifiedPublisher);
        writer.writeObjectValue<WebApplication>("web", application.web, serializeWebApplication);
}
