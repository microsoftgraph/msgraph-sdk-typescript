import {AddIn} from './addIn';
import {ApiApplication} from './apiApplication';
import {Application} from './application';
import {AppManagementPolicy} from './appManagementPolicy';
import {AppRole} from './appRole';
import {Certification} from './certification';
import {DirectoryObject} from './directoryObject';
import {ExtensionProperty} from './extensionProperty';
import {FederatedIdentityCredential} from './federatedIdentityCredential';
import {HomeRealmDiscoveryPolicy} from './homeRealmDiscoveryPolicy';
import {InformationalUrl} from './informationalUrl';
import {KeyCredential} from './keyCredential';
import {OptionalClaims} from './optionalClaims';
import {ParentalControlSettings} from './parentalControlSettings';
import {PasswordCredential} from './passwordCredential';
import {PublicClientApplication} from './publicClientApplication';
import {RequestSignatureVerification} from './requestSignatureVerification';
import {RequiredResourceAccess} from './requiredResourceAccess';
import {serializeAddIn} from './serializeAddIn';
import {serializeApiApplication} from './serializeApiApplication';
import {serializeAppManagementPolicy} from './serializeAppManagementPolicy';
import {serializeAppRole} from './serializeAppRole';
import {serializeCertification} from './serializeCertification';
import {serializeDirectoryObject} from './serializeDirectoryObject';
import {serializeExtensionProperty} from './serializeExtensionProperty';
import {serializeFederatedIdentityCredential} from './serializeFederatedIdentityCredential';
import {serializeHomeRealmDiscoveryPolicy} from './serializeHomeRealmDiscoveryPolicy';
import {serializeInformationalUrl} from './serializeInformationalUrl';
import {serializeKeyCredential} from './serializeKeyCredential';
import {serializeOptionalClaims} from './serializeOptionalClaims';
import {serializeParentalControlSettings} from './serializeParentalControlSettings';
import {serializePasswordCredential} from './serializePasswordCredential';
import {serializePublicClientApplication} from './serializePublicClientApplication';
import {serializeRequestSignatureVerification} from './serializeRequestSignatureVerification';
import {serializeRequiredResourceAccess} from './serializeRequiredResourceAccess';
import {serializeSpaApplication} from './serializeSpaApplication';
import {serializeSynchronization} from './serializeSynchronization';
import {serializeTokenIssuancePolicy} from './serializeTokenIssuancePolicy';
import {serializeTokenLifetimePolicy} from './serializeTokenLifetimePolicy';
import {serializeVerifiedPublisher} from './serializeVerifiedPublisher';
import {serializeWebApplication} from './serializeWebApplication';
import {SpaApplication} from './spaApplication';
import {Synchronization} from './synchronization';
import {TokenIssuancePolicy} from './tokenIssuancePolicy';
import {TokenLifetimePolicy} from './tokenLifetimePolicy';
import {VerifiedPublisher} from './verifiedPublisher';
import {WebApplication} from './webApplication';
import {Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export function serializeApplication(writer: SerializationWriter, application: Application | undefined = {} as Application) : void {
        serializeDirectoryObject(writer, application)
        writer.writeCollectionOfObjectValues<AddIn>("addIns", application.addIns, serializeAddIn);
        writer.writeObjectValue<ApiApplication>("api", application.api, serializeApiApplication);
        writer.writeStringValue("appId", application.appId);
        writer.writeStringValue("applicationTemplateId", application.applicationTemplateId);
        writer.writeCollectionOfObjectValues<AppManagementPolicy>("appManagementPolicies", application.appManagementPolicies, serializeAppManagementPolicy);
        writer.writeCollectionOfObjectValues<AppRole>("appRoles", application.appRoles, serializeAppRole);
        writer.writeObjectValue<Certification>("certification", application.certification, serializeCertification);
        writer.writeDateValue("createdDateTime", application.createdDateTime);
        writer.writeObjectValue<DirectoryObject>("createdOnBehalfOf", application.createdOnBehalfOf, serializeDirectoryObject);
        writer.writeStringValue("defaultRedirectUri", application.defaultRedirectUri);
        writer.writeStringValue("description", application.description);
        writer.writeStringValue("disabledByMicrosoftStatus", application.disabledByMicrosoftStatus);
        writer.writeStringValue("displayName", application.displayName);
        writer.writeCollectionOfObjectValues<ExtensionProperty>("extensionProperties", application.extensionProperties, serializeExtensionProperty);
        writer.writeCollectionOfObjectValues<FederatedIdentityCredential>("federatedIdentityCredentials", application.federatedIdentityCredentials, serializeFederatedIdentityCredential);
        writer.writeStringValue("groupMembershipClaims", application.groupMembershipClaims);
        writer.writeCollectionOfObjectValues<HomeRealmDiscoveryPolicy>("homeRealmDiscoveryPolicies", application.homeRealmDiscoveryPolicies, serializeHomeRealmDiscoveryPolicy);
        writer.writeCollectionOfPrimitiveValues<string>("identifierUris", application.identifierUris);
        writer.writeObjectValue<InformationalUrl>("info", application.info, serializeInformationalUrl);
        writer.writeBooleanValue("isDeviceOnlyAuthSupported", application.isDeviceOnlyAuthSupported);
        writer.writeBooleanValue("isFallbackPublicClient", application.isFallbackPublicClient);
        writer.writeCollectionOfObjectValues<KeyCredential>("keyCredentials", application.keyCredentials, serializeKeyCredential);
        writer.writeStringValue("logo", application.logo);
        writer.writeStringValue("notes", application.notes);
        writer.writeBooleanValue("oauth2RequirePostResponse", application.oauth2RequirePostResponse);
        writer.writeObjectValue<OptionalClaims>("optionalClaims", application.optionalClaims, serializeOptionalClaims);
        writer.writeCollectionOfObjectValues<DirectoryObject>("owners", application.owners, serializeDirectoryObject);
        writer.writeObjectValue<ParentalControlSettings>("parentalControlSettings", application.parentalControlSettings, serializeParentalControlSettings);
        writer.writeCollectionOfObjectValues<PasswordCredential>("passwordCredentials", application.passwordCredentials, serializePasswordCredential);
        writer.writeObjectValue<PublicClientApplication>("publicClient", application.publicClient, serializePublicClientApplication);
        writer.writeStringValue("publisherDomain", application.publisherDomain);
        writer.writeObjectValue<RequestSignatureVerification>("requestSignatureVerification", application.requestSignatureVerification, serializeRequestSignatureVerification);
        writer.writeCollectionOfObjectValues<RequiredResourceAccess>("requiredResourceAccess", application.requiredResourceAccess, serializeRequiredResourceAccess);
        writer.writeStringValue("samlMetadataUrl", application.samlMetadataUrl);
        writer.writeStringValue("serviceManagementReference", application.serviceManagementReference);
        writer.writeStringValue("signInAudience", application.signInAudience);
        writer.writeObjectValue<SpaApplication>("spa", application.spa, serializeSpaApplication);
        writer.writeObjectValue<Synchronization>("synchronization", application.synchronization, serializeSynchronization);
        writer.writeCollectionOfPrimitiveValues<string>("tags", application.tags);
        writer.writeStringValue("tokenEncryptionKeyId", application.tokenEncryptionKeyId);
        writer.writeCollectionOfObjectValues<TokenIssuancePolicy>("tokenIssuancePolicies", application.tokenIssuancePolicies, serializeTokenIssuancePolicy);
        writer.writeCollectionOfObjectValues<TokenLifetimePolicy>("tokenLifetimePolicies", application.tokenLifetimePolicies, serializeTokenLifetimePolicy);
        writer.writeObjectValue<VerifiedPublisher>("verifiedPublisher", application.verifiedPublisher, serializeVerifiedPublisher);
        writer.writeObjectValue<WebApplication>("web", application.web, serializeWebApplication);
}
