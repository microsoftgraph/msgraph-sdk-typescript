// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCallFromDiscriminatorValue, serializeCall, type Call } from './call';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createParticipantLeftNotificationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoParticipantLeftNotification;
}
export function deserializeIntoParticipantLeftNotification(participantLeftNotification: ParticipantLeftNotification | undefined = {} as ParticipantLeftNotification) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(participantLeftNotification),
        "call": n => { participantLeftNotification.call = n.getObjectValue<Call>(createCallFromDiscriminatorValue); },
        "participantId": n => { participantLeftNotification.participantId = n.getStringValue(); },
    }
}
export interface ParticipantLeftNotification extends Entity, Parsable {
    /**
     * The call property
     */
    call?: Call;
    /**
     * ID of the participant under the policy who has left the meeting.
     */
    participantId?: string;
}
export function serializeParticipantLeftNotification(writer: SerializationWriter, participantLeftNotification: ParticipantLeftNotification | undefined = {} as ParticipantLeftNotification) : void {
    serializeEntity(writer, participantLeftNotification)
    writer.writeObjectValue<Call>("call", participantLeftNotification.call, serializeCall);
    writer.writeStringValue("participantId", participantLeftNotification.participantId);
}
// tslint:enable
// eslint-enable
