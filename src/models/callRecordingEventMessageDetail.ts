// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { CallRecordingStatus } from './callRecordingStatus';
import { deserializeIntoEventMessageDetail, serializeEventMessageDetail, type EventMessageDetail } from './eventMessageDetail';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Duration, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CallRecordingEventMessageDetail extends EventMessageDetail, Parsable {
    /**
     * Unique identifier of the call.
     */
    callId?: string;
    /**
     * Display name for the call recording.
     */
    callRecordingDisplayName?: string;
    /**
     * Duration of the call recording.
     */
    callRecordingDuration?: Duration;
    /**
     * Status of the call recording. Possible values are: success, failure, initial, chunkFinished, unknownFutureValue.
     */
    callRecordingStatus?: CallRecordingStatus;
    /**
     * Call recording URL.
     */
    callRecordingUrl?: string;
    /**
     * Initiator of the event.
     */
    initiator?: IdentitySet;
    /**
     * Organizer of the meeting.
     */
    meetingOrganizer?: IdentitySet;
}
export function createCallRecordingEventMessageDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCallRecordingEventMessageDetail;
}
export function deserializeIntoCallRecordingEventMessageDetail(callRecordingEventMessageDetail: CallRecordingEventMessageDetail | undefined = {} as CallRecordingEventMessageDetail) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEventMessageDetail(callRecordingEventMessageDetail),
        "callId": n => { callRecordingEventMessageDetail.callId = n.getStringValue(); },
        "callRecordingDisplayName": n => { callRecordingEventMessageDetail.callRecordingDisplayName = n.getStringValue(); },
        "callRecordingDuration": n => { callRecordingEventMessageDetail.callRecordingDuration = n.getDurationValue(); },
        "callRecordingStatus": n => { callRecordingEventMessageDetail.callRecordingStatus = n.getEnumValue<CallRecordingStatus>(CallRecordingStatus); },
        "callRecordingUrl": n => { callRecordingEventMessageDetail.callRecordingUrl = n.getStringValue(); },
        "initiator": n => { callRecordingEventMessageDetail.initiator = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "meetingOrganizer": n => { callRecordingEventMessageDetail.meetingOrganizer = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
    }
}
export function serializeCallRecordingEventMessageDetail(writer: SerializationWriter, callRecordingEventMessageDetail: CallRecordingEventMessageDetail | undefined = {} as CallRecordingEventMessageDetail) : void {
        serializeEventMessageDetail(writer, callRecordingEventMessageDetail)
        writer.writeStringValue("callId", callRecordingEventMessageDetail.callId);
        writer.writeStringValue("callRecordingDisplayName", callRecordingEventMessageDetail.callRecordingDisplayName);
        writer.writeDurationValue("callRecordingDuration", callRecordingEventMessageDetail.callRecordingDuration);
        writer.writeEnumValue<CallRecordingStatus>("callRecordingStatus", callRecordingEventMessageDetail.callRecordingStatus);
        writer.writeStringValue("callRecordingUrl", callRecordingEventMessageDetail.callRecordingUrl);
        writer.writeObjectValue<IdentitySet>("initiator", callRecordingEventMessageDetail.initiator, );
        writer.writeObjectValue<IdentitySet>("meetingOrganizer", callRecordingEventMessageDetail.meetingOrganizer, );
}
// tslint:enable
// eslint-enable
