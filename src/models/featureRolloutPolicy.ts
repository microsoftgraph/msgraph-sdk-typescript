// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { StagedFeatureName } from './stagedFeatureName';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFeatureRolloutPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFeatureRolloutPolicy;
}
export function deserializeIntoFeatureRolloutPolicy(featureRolloutPolicy: FeatureRolloutPolicy | undefined = {} as FeatureRolloutPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(featureRolloutPolicy),
        "appliesTo": n => { featureRolloutPolicy.appliesTo = n.getCollectionOfObjectValues<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "description": n => { featureRolloutPolicy.description = n.getStringValue(); },
        "displayName": n => { featureRolloutPolicy.displayName = n.getStringValue(); },
        "feature": n => { featureRolloutPolicy.feature = n.getEnumValue<StagedFeatureName>(StagedFeatureName); },
        "isAppliedToOrganization": n => { featureRolloutPolicy.isAppliedToOrganization = n.getBooleanValue(); },
        "isEnabled": n => { featureRolloutPolicy.isEnabled = n.getBooleanValue(); },
    }
}
export interface FeatureRolloutPolicy extends Entity, Parsable {
    /**
     * Nullable. Specifies a list of directoryObjects that feature is enabled for.
     */
    appliesTo?: DirectoryObject[];
    /**
     * A description for this feature rollout policy.
     */
    description?: string;
    /**
     * The display name for this  feature rollout policy.
     */
    displayName?: string;
    /**
     * The feature property
     */
    feature?: StagedFeatureName;
    /**
     * Indicates whether this feature rollout policy should be applied to the entire organization.
     */
    isAppliedToOrganization?: boolean;
    /**
     * Indicates whether the feature rollout is enabled.
     */
    isEnabled?: boolean;
}
export function serializeFeatureRolloutPolicy(writer: SerializationWriter, featureRolloutPolicy: FeatureRolloutPolicy | undefined = {} as FeatureRolloutPolicy) : void {
        serializeEntity(writer, featureRolloutPolicy)
        writer.writeCollectionOfObjectValues<DirectoryObject>("appliesTo", featureRolloutPolicy.appliesTo, serializeDirectoryObject);
        writer.writeStringValue("description", featureRolloutPolicy.description);
        writer.writeStringValue("displayName", featureRolloutPolicy.displayName);
        writer.writeEnumValue<StagedFeatureName>("feature", featureRolloutPolicy.feature);
        writer.writeBooleanValue("isAppliedToOrganization", featureRolloutPolicy.isAppliedToOrganization);
        writer.writeBooleanValue("isEnabled", featureRolloutPolicy.isEnabled);
}
// tslint:enable
// eslint-enable
