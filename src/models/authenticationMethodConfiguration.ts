// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AuthenticationMethodState } from './authenticationMethodState';
import { deserializeIntoEmailAuthenticationMethodConfiguration } from './emailAuthenticationMethodConfiguration';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createExcludeTargetFromDiscriminatorValue, serializeExcludeTarget, type ExcludeTarget } from './excludeTarget';
import { deserializeIntoFido2AuthenticationMethodConfiguration } from './fido2AuthenticationMethodConfiguration';
import { type EmailAuthenticationMethodConfiguration, type Fido2AuthenticationMethodConfiguration, type MicrosoftAuthenticatorAuthenticationMethodConfiguration, type SmsAuthenticationMethodConfiguration, type SoftwareOathAuthenticationMethodConfiguration, type TemporaryAccessPassAuthenticationMethodConfiguration, type VoiceAuthenticationMethodConfiguration, type X509CertificateAuthenticationMethodConfiguration } from './index';
import { deserializeIntoMicrosoftAuthenticatorAuthenticationMethodConfiguration } from './microsoftAuthenticatorAuthenticationMethodConfiguration';
import { deserializeIntoSmsAuthenticationMethodConfiguration } from './smsAuthenticationMethodConfiguration';
import { deserializeIntoSoftwareOathAuthenticationMethodConfiguration } from './softwareOathAuthenticationMethodConfiguration';
import { deserializeIntoTemporaryAccessPassAuthenticationMethodConfiguration } from './temporaryAccessPassAuthenticationMethodConfiguration';
import { deserializeIntoVoiceAuthenticationMethodConfiguration } from './voiceAuthenticationMethodConfiguration';
import { deserializeIntoX509CertificateAuthenticationMethodConfiguration } from './x509CertificateAuthenticationMethodConfiguration';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthenticationMethodConfiguration extends Entity, Parsable {
    /**
     * Groups of users that are excluded from a policy.
     */
    excludeTargets?: ExcludeTarget[];
    /**
     * The state of the policy. Possible values are: enabled, disabled.
     */
    state?: AuthenticationMethodState;
}
export function createAuthenticationMethodConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.emailAuthenticationMethodConfiguration":
                    return deserializeIntoEmailAuthenticationMethodConfiguration;
                case "#microsoft.graph.fido2AuthenticationMethodConfiguration":
                    return deserializeIntoFido2AuthenticationMethodConfiguration;
                case "#microsoft.graph.microsoftAuthenticatorAuthenticationMethodConfiguration":
                    return deserializeIntoMicrosoftAuthenticatorAuthenticationMethodConfiguration;
                case "#microsoft.graph.smsAuthenticationMethodConfiguration":
                    return deserializeIntoSmsAuthenticationMethodConfiguration;
                case "#microsoft.graph.softwareOathAuthenticationMethodConfiguration":
                    return deserializeIntoSoftwareOathAuthenticationMethodConfiguration;
                case "#microsoft.graph.temporaryAccessPassAuthenticationMethodConfiguration":
                    return deserializeIntoTemporaryAccessPassAuthenticationMethodConfiguration;
                case "#microsoft.graph.voiceAuthenticationMethodConfiguration":
                    return deserializeIntoVoiceAuthenticationMethodConfiguration;
                case "#microsoft.graph.x509CertificateAuthenticationMethodConfiguration":
                    return deserializeIntoX509CertificateAuthenticationMethodConfiguration;
            }
        }
    }
    return deserializeIntoAuthenticationMethodConfiguration;
}
export function deserializeIntoAuthenticationMethodConfiguration(authenticationMethodConfiguration: AuthenticationMethodConfiguration | undefined = {} as AuthenticationMethodConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(authenticationMethodConfiguration),
        "excludeTargets": n => { authenticationMethodConfiguration.excludeTargets = n.getCollectionOfObjectValues<ExcludeTarget>(createExcludeTargetFromDiscriminatorValue); },
        "state": n => { authenticationMethodConfiguration.state = n.getEnumValue<AuthenticationMethodState>(AuthenticationMethodState); },
    }
}
export function serializeAuthenticationMethodConfiguration(writer: SerializationWriter, authenticationMethodConfiguration: AuthenticationMethodConfiguration | undefined = {} as AuthenticationMethodConfiguration) : void {
        serializeEntity(writer, authenticationMethodConfiguration)
        writer.writeCollectionOfObjectValues<ExcludeTarget>("excludeTargets", authenticationMethodConfiguration.excludeTargets, );
        writer.writeEnumValue<AuthenticationMethodState>("state", authenticationMethodConfiguration.state);
}
// tslint:enable
// eslint-enable
