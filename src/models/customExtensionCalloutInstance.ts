// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { CustomExtensionCalloutInstanceStatus } from './customExtensionCalloutInstanceStatus';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCustomExtensionCalloutInstanceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCustomExtensionCalloutInstance;
}
export interface CustomExtensionCalloutInstance extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Identification of the custom extension that was triggered at this instance.
     */
    customExtensionId?: string;
    /**
     * Details provided by the logic app during the callback of the request instance.
     */
    detail?: string;
    /**
     * The unique run identifier for the logic app.
     */
    externalCorrelationId?: string;
    /**
     * Unique identifier for the callout instance. Read-only.
     */
    id?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The status of the request to the custom extension. The possible values are: calloutSent, callbackReceived, calloutFailed, callbackTimedOut, waitingForCallback, unknownFutureValue.
     */
    status?: CustomExtensionCalloutInstanceStatus;
}
export function deserializeIntoCustomExtensionCalloutInstance(customExtensionCalloutInstance: CustomExtensionCalloutInstance | undefined = {} as CustomExtensionCalloutInstance) : Record<string, (node: ParseNode) => void> {
    return {
        "customExtensionId": n => { customExtensionCalloutInstance.customExtensionId = n.getStringValue(); },
        "detail": n => { customExtensionCalloutInstance.detail = n.getStringValue(); },
        "externalCorrelationId": n => { customExtensionCalloutInstance.externalCorrelationId = n.getStringValue(); },
        "id": n => { customExtensionCalloutInstance.id = n.getStringValue(); },
        "@odata.type": n => { customExtensionCalloutInstance.odataType = n.getStringValue(); },
        "status": n => { customExtensionCalloutInstance.status = n.getEnumValue<CustomExtensionCalloutInstanceStatus>(CustomExtensionCalloutInstanceStatus); },
    }
}
export function serializeCustomExtensionCalloutInstance(writer: SerializationWriter, customExtensionCalloutInstance: CustomExtensionCalloutInstance | undefined = {} as CustomExtensionCalloutInstance) : void {
        writer.writeStringValue("customExtensionId", customExtensionCalloutInstance.customExtensionId);
        writer.writeStringValue("detail", customExtensionCalloutInstance.detail);
        writer.writeStringValue("externalCorrelationId", customExtensionCalloutInstance.externalCorrelationId);
        writer.writeStringValue("id", customExtensionCalloutInstance.id);
        writer.writeStringValue("@odata.type", customExtensionCalloutInstance.odataType);
        writer.writeEnumValue<CustomExtensionCalloutInstanceStatus>("status", customExtensionCalloutInstance.status);
        writer.writeAdditionalData(customExtensionCalloutInstance.additionalData);
}
// tslint:enable
// eslint-enable
