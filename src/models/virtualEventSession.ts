// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDateTimeTimeZoneFromDiscriminatorValue, serializeDateTimeTimeZone, type DateTimeTimeZone } from './dateTimeTimeZone';
import { deserializeIntoOnlineMeetingBase, serializeOnlineMeetingBase, type OnlineMeetingBase } from './onlineMeetingBase';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVirtualEventSessionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoVirtualEventSession;
}
export function deserializeIntoVirtualEventSession(virtualEventSession: VirtualEventSession | undefined = {} as VirtualEventSession) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOnlineMeetingBase(virtualEventSession),
        "endDateTime": n => { virtualEventSession.endDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "startDateTime": n => { virtualEventSession.startDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
    }
}
export function serializeVirtualEventSession(writer: SerializationWriter, virtualEventSession: VirtualEventSession | undefined = {} as VirtualEventSession) : void {
    serializeOnlineMeetingBase(writer, virtualEventSession)
    writer.writeObjectValue<DateTimeTimeZone>("endDateTime", virtualEventSession.endDateTime, serializeDateTimeTimeZone);
    writer.writeObjectValue<DateTimeTimeZone>("startDateTime", virtualEventSession.startDateTime, serializeDateTimeTimeZone);
}
export interface VirtualEventSession extends OnlineMeetingBase, Parsable {
    /**
     * The endDateTime property
     */
    endDateTime?: DateTimeTimeZone;
    /**
     * The startDateTime property
     */
    startDateTime?: DateTimeTimeZone;
}
// tslint:enable
// eslint-enable
