// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDetailsInfoFromDiscriminatorValue, serializeDetailsInfo, type DetailsInfo } from './detailsInfo';
import { deserializeIntoIdentity, serializeIdentity, type Identity } from './identity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createProvisionedIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoProvisionedIdentity;
}
export function deserializeIntoProvisionedIdentity(provisionedIdentity: ProvisionedIdentity | undefined = {} as ProvisionedIdentity) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(provisionedIdentity),
        "details": n => { provisionedIdentity.details = n.getObjectValue<DetailsInfo>(createDetailsInfoFromDiscriminatorValue); },
        "identityType": n => { provisionedIdentity.identityType = n.getStringValue(); },
    }
}
export interface ProvisionedIdentity extends Identity, Parsable {
    /**
     * Details of the identity.
     */
    details?: DetailsInfo;
    /**
     * Type of identity that has been provisioned, such as 'user' or 'group'. Supports $filter (eq, contains).
     */
    identityType?: string;
}
export function serializeProvisionedIdentity(writer: SerializationWriter, provisionedIdentity: ProvisionedIdentity | undefined = {} as ProvisionedIdentity) : void {
        serializeIdentity(writer, provisionedIdentity)
        writer.writeObjectValue<DetailsInfo>("details", provisionedIdentity.details, serializeDetailsInfo);
        writer.writeStringValue("identityType", provisionedIdentity.identityType);
}
// tslint:enable
// eslint-enable
