// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAndroidManagedAppProtectionFromDiscriminatorValue, serializeAndroidManagedAppProtection, type AndroidManagedAppProtection } from './androidManagedAppProtection';
import { createDefaultManagedAppProtectionFromDiscriminatorValue, serializeDefaultManagedAppProtection, type DefaultManagedAppProtection } from './defaultManagedAppProtection';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIosManagedAppProtectionFromDiscriminatorValue, serializeIosManagedAppProtection, type IosManagedAppProtection } from './iosManagedAppProtection';
import { createManagedAppPolicyFromDiscriminatorValue, serializeManagedAppPolicy, type ManagedAppPolicy } from './managedAppPolicy';
import { createManagedAppRegistrationFromDiscriminatorValue, serializeManagedAppRegistration, type ManagedAppRegistration } from './managedAppRegistration';
import { createManagedAppStatusFromDiscriminatorValue, serializeManagedAppStatus, type ManagedAppStatus } from './managedAppStatus';
import { createManagedDeviceMobileAppConfigurationFromDiscriminatorValue, serializeManagedDeviceMobileAppConfiguration, type ManagedDeviceMobileAppConfiguration } from './managedDeviceMobileAppConfiguration';
import { createManagedEBookFromDiscriminatorValue, serializeManagedEBook, type ManagedEBook } from './managedEBook';
import { createMdmWindowsInformationProtectionPolicyFromDiscriminatorValue, serializeMdmWindowsInformationProtectionPolicy, type MdmWindowsInformationProtectionPolicy } from './mdmWindowsInformationProtectionPolicy';
import { createMobileAppFromDiscriminatorValue, serializeMobileApp, type MobileApp } from './mobileApp';
import { createMobileAppCategoryFromDiscriminatorValue, serializeMobileAppCategory, type MobileAppCategory } from './mobileAppCategory';
import { createTargetedManagedAppConfigurationFromDiscriminatorValue, serializeTargetedManagedAppConfiguration, type TargetedManagedAppConfiguration } from './targetedManagedAppConfiguration';
import { createVppTokenFromDiscriminatorValue, serializeVppToken, type VppToken } from './vppToken';
import { createWindowsInformationProtectionPolicyFromDiscriminatorValue, serializeWindowsInformationProtectionPolicy, type WindowsInformationProtectionPolicy } from './windowsInformationProtectionPolicy';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceAppManagementFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceAppManagement;
}
export function deserializeIntoDeviceAppManagement(deviceAppManagement: DeviceAppManagement | undefined = {} as DeviceAppManagement) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceAppManagement),
        "androidManagedAppProtections": n => { deviceAppManagement.androidManagedAppProtections = n.getCollectionOfObjectValues<AndroidManagedAppProtection>(createAndroidManagedAppProtectionFromDiscriminatorValue); },
        "defaultManagedAppProtections": n => { deviceAppManagement.defaultManagedAppProtections = n.getCollectionOfObjectValues<DefaultManagedAppProtection>(createDefaultManagedAppProtectionFromDiscriminatorValue); },
        "iosManagedAppProtections": n => { deviceAppManagement.iosManagedAppProtections = n.getCollectionOfObjectValues<IosManagedAppProtection>(createIosManagedAppProtectionFromDiscriminatorValue); },
        "isEnabledForMicrosoftStoreForBusiness": n => { deviceAppManagement.isEnabledForMicrosoftStoreForBusiness = n.getBooleanValue(); },
        "managedAppPolicies": n => { deviceAppManagement.managedAppPolicies = n.getCollectionOfObjectValues<ManagedAppPolicy>(createManagedAppPolicyFromDiscriminatorValue); },
        "managedAppRegistrations": n => { deviceAppManagement.managedAppRegistrations = n.getCollectionOfObjectValues<ManagedAppRegistration>(createManagedAppRegistrationFromDiscriminatorValue); },
        "managedAppStatuses": n => { deviceAppManagement.managedAppStatuses = n.getCollectionOfObjectValues<ManagedAppStatus>(createManagedAppStatusFromDiscriminatorValue); },
        "managedEBooks": n => { deviceAppManagement.managedEBooks = n.getCollectionOfObjectValues<ManagedEBook>(createManagedEBookFromDiscriminatorValue); },
        "mdmWindowsInformationProtectionPolicies": n => { deviceAppManagement.mdmWindowsInformationProtectionPolicies = n.getCollectionOfObjectValues<MdmWindowsInformationProtectionPolicy>(createMdmWindowsInformationProtectionPolicyFromDiscriminatorValue); },
        "microsoftStoreForBusinessLanguage": n => { deviceAppManagement.microsoftStoreForBusinessLanguage = n.getStringValue(); },
        "microsoftStoreForBusinessLastCompletedApplicationSyncTime": n => { deviceAppManagement.microsoftStoreForBusinessLastCompletedApplicationSyncTime = n.getDateValue(); },
        "microsoftStoreForBusinessLastSuccessfulSyncDateTime": n => { deviceAppManagement.microsoftStoreForBusinessLastSuccessfulSyncDateTime = n.getDateValue(); },
        "mobileAppCategories": n => { deviceAppManagement.mobileAppCategories = n.getCollectionOfObjectValues<MobileAppCategory>(createMobileAppCategoryFromDiscriminatorValue); },
        "mobileAppConfigurations": n => { deviceAppManagement.mobileAppConfigurations = n.getCollectionOfObjectValues<ManagedDeviceMobileAppConfiguration>(createManagedDeviceMobileAppConfigurationFromDiscriminatorValue); },
        "mobileApps": n => { deviceAppManagement.mobileApps = n.getCollectionOfObjectValues<MobileApp>(createMobileAppFromDiscriminatorValue); },
        "targetedManagedAppConfigurations": n => { deviceAppManagement.targetedManagedAppConfigurations = n.getCollectionOfObjectValues<TargetedManagedAppConfiguration>(createTargetedManagedAppConfigurationFromDiscriminatorValue); },
        "vppTokens": n => { deviceAppManagement.vppTokens = n.getCollectionOfObjectValues<VppToken>(createVppTokenFromDiscriminatorValue); },
        "windowsInformationProtectionPolicies": n => { deviceAppManagement.windowsInformationProtectionPolicies = n.getCollectionOfObjectValues<WindowsInformationProtectionPolicy>(createWindowsInformationProtectionPolicyFromDiscriminatorValue); },
    }
}
export interface DeviceAppManagement extends Entity, Parsable {
    /**
     * Android managed app policies.
     */
    androidManagedAppProtections?: AndroidManagedAppProtection[];
    /**
     * Default managed app policies.
     */
    defaultManagedAppProtections?: DefaultManagedAppProtection[];
    /**
     * iOS managed app policies.
     */
    iosManagedAppProtections?: IosManagedAppProtection[];
    /**
     * Whether the account is enabled for syncing applications from the Microsoft Store for Business.
     */
    isEnabledForMicrosoftStoreForBusiness?: boolean;
    /**
     * Managed app policies.
     */
    managedAppPolicies?: ManagedAppPolicy[];
    /**
     * The managed app registrations.
     */
    managedAppRegistrations?: ManagedAppRegistration[];
    /**
     * The managed app statuses.
     */
    managedAppStatuses?: ManagedAppStatus[];
    /**
     * The Managed eBook.
     */
    managedEBooks?: ManagedEBook[];
    /**
     * Windows information protection for apps running on devices which are MDM enrolled.
     */
    mdmWindowsInformationProtectionPolicies?: MdmWindowsInformationProtectionPolicy[];
    /**
     * The locale information used to sync applications from the Microsoft Store for Business. Cultures that are specific to a country/region. The names of these cultures follow RFC 4646 (Windows Vista and later). The format is -<country/regioncode2>, where  is a lowercase two-letter code derived from ISO 639-1 and <country/regioncode2> is an uppercase two-letter code derived from ISO 3166. For example, en-US for English (United States) is a specific culture.
     */
    microsoftStoreForBusinessLanguage?: string;
    /**
     * The last time an application sync from the Microsoft Store for Business was completed.
     */
    microsoftStoreForBusinessLastCompletedApplicationSyncTime?: Date;
    /**
     * The last time the apps from the Microsoft Store for Business were synced successfully for the account.
     */
    microsoftStoreForBusinessLastSuccessfulSyncDateTime?: Date;
    /**
     * The mobile app categories.
     */
    mobileAppCategories?: MobileAppCategory[];
    /**
     * The Managed Device Mobile Application Configurations.
     */
    mobileAppConfigurations?: ManagedDeviceMobileAppConfiguration[];
    /**
     * The mobile apps.
     */
    mobileApps?: MobileApp[];
    /**
     * Targeted managed app configurations.
     */
    targetedManagedAppConfigurations?: TargetedManagedAppConfiguration[];
    /**
     * List of Vpp tokens for this organization.
     */
    vppTokens?: VppToken[];
    /**
     * Windows information protection for apps running on devices which are not MDM enrolled.
     */
    windowsInformationProtectionPolicies?: WindowsInformationProtectionPolicy[];
}
export function serializeDeviceAppManagement(writer: SerializationWriter, deviceAppManagement: DeviceAppManagement | undefined = {} as DeviceAppManagement) : void {
        serializeEntity(writer, deviceAppManagement)
        writer.writeCollectionOfObjectValues<AndroidManagedAppProtection>("androidManagedAppProtections", deviceAppManagement.androidManagedAppProtections, );
        writer.writeCollectionOfObjectValues<DefaultManagedAppProtection>("defaultManagedAppProtections", deviceAppManagement.defaultManagedAppProtections, );
        writer.writeCollectionOfObjectValues<IosManagedAppProtection>("iosManagedAppProtections", deviceAppManagement.iosManagedAppProtections, );
        writer.writeBooleanValue("isEnabledForMicrosoftStoreForBusiness", deviceAppManagement.isEnabledForMicrosoftStoreForBusiness);
        writer.writeCollectionOfObjectValues<ManagedAppPolicy>("managedAppPolicies", deviceAppManagement.managedAppPolicies, );
        writer.writeCollectionOfObjectValues<ManagedAppRegistration>("managedAppRegistrations", deviceAppManagement.managedAppRegistrations, );
        writer.writeCollectionOfObjectValues<ManagedAppStatus>("managedAppStatuses", deviceAppManagement.managedAppStatuses, );
        writer.writeCollectionOfObjectValues<ManagedEBook>("managedEBooks", deviceAppManagement.managedEBooks, );
        writer.writeCollectionOfObjectValues<MdmWindowsInformationProtectionPolicy>("mdmWindowsInformationProtectionPolicies", deviceAppManagement.mdmWindowsInformationProtectionPolicies, );
        writer.writeStringValue("microsoftStoreForBusinessLanguage", deviceAppManagement.microsoftStoreForBusinessLanguage);
        writer.writeDateValue("microsoftStoreForBusinessLastCompletedApplicationSyncTime", deviceAppManagement.microsoftStoreForBusinessLastCompletedApplicationSyncTime);
        writer.writeDateValue("microsoftStoreForBusinessLastSuccessfulSyncDateTime", deviceAppManagement.microsoftStoreForBusinessLastSuccessfulSyncDateTime);
        writer.writeCollectionOfObjectValues<MobileAppCategory>("mobileAppCategories", deviceAppManagement.mobileAppCategories, );
        writer.writeCollectionOfObjectValues<ManagedDeviceMobileAppConfiguration>("mobileAppConfigurations", deviceAppManagement.mobileAppConfigurations, );
        writer.writeCollectionOfObjectValues<MobileApp>("mobileApps", deviceAppManagement.mobileApps, );
        writer.writeCollectionOfObjectValues<TargetedManagedAppConfiguration>("targetedManagedAppConfigurations", deviceAppManagement.targetedManagedAppConfigurations, );
        writer.writeCollectionOfObjectValues<VppToken>("vppTokens", deviceAppManagement.vppTokens, );
        writer.writeCollectionOfObjectValues<WindowsInformationProtectionPolicy>("windowsInformationProtectionPolicies", deviceAppManagement.windowsInformationProtectionPolicies, );
}
// tslint:enable
// eslint-enable
