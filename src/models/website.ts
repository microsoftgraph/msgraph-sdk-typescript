// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { WebsiteType } from './websiteType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWebsiteFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWebsite;
}
export function deserializeIntoWebsite(website: Website | undefined = {} as Website) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { website.address = n.getStringValue(); },
        "displayName": n => { website.displayName = n.getStringValue(); },
        "@odata.type": n => { website.odataType = n.getStringValue(); },
        "type": n => { website.type = n.getEnumValue<WebsiteType>(WebsiteType); },
    }
}
export function serializeWebsite(writer: SerializationWriter, website: Website | undefined = {} as Website) : void {
        writer.writeStringValue("address", website.address);
        writer.writeStringValue("displayName", website.displayName);
        writer.writeStringValue("@odata.type", website.odataType);
        writer.writeEnumValue<WebsiteType>("type", website.type);
        writer.writeAdditionalData(website.additionalData);
}
export interface Website extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The URL of the website.
     */
    address?: string;
    /**
     * The display name of the web site.
     */
    displayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The possible values are: other, home, work, blog, profile.
     */
    type?: WebsiteType;
}
// tslint:enable
// eslint-enable
