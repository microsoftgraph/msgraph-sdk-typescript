// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createExternalDomainNameFromDiscriminatorValue, serializeExternalDomainName, type ExternalDomainName } from './externalDomainName';
import { deserializeIntoSamlOrWsFedProvider, serializeSamlOrWsFedProvider, type SamlOrWsFedProvider } from './samlOrWsFedProvider';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSamlOrWsFedExternalDomainFederationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSamlOrWsFedExternalDomainFederation;
}
export function deserializeIntoSamlOrWsFedExternalDomainFederation(samlOrWsFedExternalDomainFederation: SamlOrWsFedExternalDomainFederation | undefined = {} as SamlOrWsFedExternalDomainFederation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoSamlOrWsFedProvider(samlOrWsFedExternalDomainFederation),
        "domains": n => { samlOrWsFedExternalDomainFederation.domains = n.getCollectionOfObjectValues<ExternalDomainName>(createExternalDomainNameFromDiscriminatorValue); },
    }
}
export interface SamlOrWsFedExternalDomainFederation extends Parsable, SamlOrWsFedProvider {
    /**
     * Collection of domain names of the external organizations that the tenant is federating with. Supports $filter (eq).
     */
    domains?: ExternalDomainName[];
}
export function serializeSamlOrWsFedExternalDomainFederation(writer: SerializationWriter, samlOrWsFedExternalDomainFederation: SamlOrWsFedExternalDomainFederation | undefined = {} as SamlOrWsFedExternalDomainFederation) : void {
        serializeSamlOrWsFedProvider(writer, samlOrWsFedExternalDomainFederation)
        writer.writeCollectionOfObjectValues<ExternalDomainName>("domains", samlOrWsFedExternalDomainFederation.domains, serializeExternalDomainName);
}
// tslint:enable
// eslint-enable
