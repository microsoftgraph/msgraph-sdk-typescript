// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIncompleteDataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIncompleteData;
}
export function deserializeIntoIncompleteData(incompleteData: IncompleteData | undefined = {} as IncompleteData) : Record<string, (node: ParseNode) => void> {
    return {
        "missingDataBeforeDateTime": n => { incompleteData.missingDataBeforeDateTime = n.getDateValue(); },
        "@odata.type": n => { incompleteData.odataType = n.getStringValue(); },
        "wasThrottled": n => { incompleteData.wasThrottled = n.getBooleanValue(); },
    }
}
export interface IncompleteData extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The service does not have source data before the specified time.
     */
    missingDataBeforeDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Some data was not recorded due to excessive activity.
     */
    wasThrottled?: boolean;
}
export function serializeIncompleteData(writer: SerializationWriter, incompleteData: IncompleteData | undefined = {} as IncompleteData) : void {
        writer.writeDateValue("missingDataBeforeDateTime", incompleteData.missingDataBeforeDateTime);
        writer.writeStringValue("@odata.type", incompleteData.odataType);
        writer.writeBooleanValue("wasThrottled", incompleteData.wasThrottled);
        writer.writeAdditionalData(incompleteData.additionalData);
}
// tslint:enable
// eslint-enable
