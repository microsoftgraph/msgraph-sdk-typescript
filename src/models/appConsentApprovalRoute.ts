// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAppConsentRequestFromDiscriminatorValue, serializeAppConsentRequest, type AppConsentRequest } from './appConsentRequest';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AppConsentApprovalRoute extends Entity, Parsable {
    /**
     * A collection of appConsentRequest objects representing apps for which admin consent has been requested by one or more users.
     */
    appConsentRequests?: AppConsentRequest[];
}
export function createAppConsentApprovalRouteFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAppConsentApprovalRoute;
}
export function deserializeIntoAppConsentApprovalRoute(appConsentApprovalRoute: AppConsentApprovalRoute | undefined = {} as AppConsentApprovalRoute) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(appConsentApprovalRoute),
        "appConsentRequests": n => { appConsentApprovalRoute.appConsentRequests = n.getCollectionOfObjectValues<AppConsentRequest>(createAppConsentRequestFromDiscriminatorValue); },
    }
}
export function serializeAppConsentApprovalRoute(writer: SerializationWriter, appConsentApprovalRoute: AppConsentApprovalRoute | undefined = {} as AppConsentApprovalRoute) : void {
        serializeEntity(writer, appConsentApprovalRoute)
        writer.writeCollectionOfObjectValues<AppConsentRequest>("appConsentRequests", appConsentApprovalRoute.appConsentRequests, );
}
// tslint:enable
// eslint-enable
