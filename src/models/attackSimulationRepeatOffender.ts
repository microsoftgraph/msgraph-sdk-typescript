// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttackSimulationUserFromDiscriminatorValue, serializeAttackSimulationUser, type AttackSimulationUser } from './attackSimulationUser';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttackSimulationRepeatOffender extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The user in an attack simulation and training campaign.
     */
    attackSimulationUser?: AttackSimulationUser;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Number of repeat offences of the user in attack simulation and training campaigns.
     */
    repeatOffenceCount?: number;
}
export function createAttackSimulationRepeatOffenderFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttackSimulationRepeatOffender;
}
export function deserializeIntoAttackSimulationRepeatOffender(attackSimulationRepeatOffender: AttackSimulationRepeatOffender | undefined = {} as AttackSimulationRepeatOffender) : Record<string, (node: ParseNode) => void> {
    return {
        "attackSimulationUser": n => { attackSimulationRepeatOffender.attackSimulationUser = n.getObjectValue<AttackSimulationUser>(createAttackSimulationUserFromDiscriminatorValue); },
        "@odata.type": n => { attackSimulationRepeatOffender.odataType = n.getStringValue(); },
        "repeatOffenceCount": n => { attackSimulationRepeatOffender.repeatOffenceCount = n.getNumberValue(); },
    }
}
export function serializeAttackSimulationRepeatOffender(writer: SerializationWriter, attackSimulationRepeatOffender: AttackSimulationRepeatOffender | undefined = {} as AttackSimulationRepeatOffender) : void {
    writer.writeObjectValue<AttackSimulationUser>("attackSimulationUser", attackSimulationRepeatOffender.attackSimulationUser, serializeAttackSimulationUser);
    writer.writeStringValue("@odata.type", attackSimulationRepeatOffender.odataType);
    writer.writeNumberValue("repeatOffenceCount", attackSimulationRepeatOffender.repeatOffenceCount);
    writer.writeAdditionalData(attackSimulationRepeatOffender.additionalData);
}
// tslint:enable
// eslint-enable
