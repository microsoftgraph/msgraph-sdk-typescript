// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEmailIdentityFromDiscriminatorValue, serializeEmailIdentity, type EmailIdentity } from './emailIdentity';
import { createEndUserNotificationDetailFromDiscriminatorValue, serializeEndUserNotificationDetail, type EndUserNotificationDetail } from './endUserNotificationDetail';
import { EndUserNotificationType } from './endUserNotificationType';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { SimulationContentSource } from './simulationContentSource';
import { SimulationContentStatus } from './simulationContentStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEndUserNotificationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEndUserNotification;
}
export function deserializeIntoEndUserNotification(endUserNotification: EndUserNotification | undefined = {} as EndUserNotification) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(endUserNotification),
        "createdBy": n => { endUserNotification.createdBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "createdDateTime": n => { endUserNotification.createdDateTime = n.getDateValue(); },
        "description": n => { endUserNotification.description = n.getStringValue(); },
        "details": n => { endUserNotification.details = n.getCollectionOfObjectValues<EndUserNotificationDetail>(createEndUserNotificationDetailFromDiscriminatorValue); },
        "displayName": n => { endUserNotification.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { endUserNotification.lastModifiedBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { endUserNotification.lastModifiedDateTime = n.getDateValue(); },
        "notificationType": n => { endUserNotification.notificationType = n.getEnumValue<EndUserNotificationType>(EndUserNotificationType); },
        "source": n => { endUserNotification.source = n.getEnumValue<SimulationContentSource>(SimulationContentSource); },
        "status": n => { endUserNotification.status = n.getEnumValue<SimulationContentStatus>(SimulationContentStatus); },
        "supportedLocales": n => { endUserNotification.supportedLocales = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface EndUserNotification extends Entity, Parsable {
    /**
     * Identity of the user who created the notification.
     */
    createdBy?: EmailIdentity;
    /**
     * Date and time when the notification was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date;
    /**
     * Description of the notification as defined by the user.
     */
    description?: string;
    /**
     * The details property
     */
    details?: EndUserNotificationDetail[];
    /**
     * Name of the notification as defined by the user.
     */
    displayName?: string;
    /**
     * Identity of the user who last modified the notification.
     */
    lastModifiedBy?: EmailIdentity;
    /**
     * Date and time when the notification was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastModifiedDateTime?: Date;
    /**
     * Type of notification. Possible values are: unknown, positiveReinforcement, noTraining, trainingAssignment, trainingReminder, unknownFutureValue.
     */
    notificationType?: EndUserNotificationType;
    /**
     * The source of the content. Possible values are: unknown, global, tenant, unknownFutureValue.
     */
    source?: SimulationContentSource;
    /**
     * The status of the notification. Possible values are: unknown, draft, ready, archive, delete, unknownFutureValue.
     */
    status?: SimulationContentStatus;
    /**
     * Supported locales for endUserNotification content.
     */
    supportedLocales?: string[];
}
export function serializeEndUserNotification(writer: SerializationWriter, endUserNotification: EndUserNotification | undefined = {} as EndUserNotification) : void {
    serializeEntity(writer, endUserNotification)
    writer.writeObjectValue<EmailIdentity>("createdBy", endUserNotification.createdBy, serializeEmailIdentity);
    writer.writeDateValue("createdDateTime", endUserNotification.createdDateTime);
    writer.writeStringValue("description", endUserNotification.description);
    writer.writeCollectionOfObjectValues<EndUserNotificationDetail>("details", endUserNotification.details, serializeEndUserNotificationDetail);
    writer.writeStringValue("displayName", endUserNotification.displayName);
    writer.writeObjectValue<EmailIdentity>("lastModifiedBy", endUserNotification.lastModifiedBy, serializeEmailIdentity);
    writer.writeDateValue("lastModifiedDateTime", endUserNotification.lastModifiedDateTime);
    writer.writeEnumValue<EndUserNotificationType>("notificationType", endUserNotification.notificationType);
    writer.writeEnumValue<SimulationContentSource>("source", endUserNotification.source);
    writer.writeEnumValue<SimulationContentStatus>("status", endUserNotification.status);
    writer.writeCollectionOfPrimitiveValues<string>("supportedLocales", endUserNotification.supportedLocales);
}
// tslint:enable
// eslint-enable
