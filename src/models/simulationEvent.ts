// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSimulationEventFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSimulationEvent;
}
export function deserializeIntoSimulationEvent(simulationEvent: SimulationEvent | undefined = {} as SimulationEvent) : Record<string, (node: ParseNode) => void> {
    return {
        "count": n => { simulationEvent.count = n.getNumberValue(); },
        "eventName": n => { simulationEvent.eventName = n.getStringValue(); },
        "@odata.type": n => { simulationEvent.odataType = n.getStringValue(); },
    }
}
export function serializeSimulationEvent(writer: SerializationWriter, simulationEvent: SimulationEvent | undefined = {} as SimulationEvent) : void {
    writer.writeNumberValue("count", simulationEvent.count);
    writer.writeStringValue("eventName", simulationEvent.eventName);
    writer.writeStringValue("@odata.type", simulationEvent.odataType);
    writer.writeAdditionalData(simulationEvent.additionalData);
}
export interface SimulationEvent extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Count of the simulation event occurrence in an attack simulation and training campaign.
     */
    count?: number;
    /**
     * Name of the simulation event in an attack simulation and training campaign.
     */
    eventName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:enable
// eslint-enable
