// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDeviceCompliancePolicy, serializeDeviceCompliancePolicy, type DeviceCompliancePolicy } from './deviceCompliancePolicy';
import { RequiredPasswordType } from './requiredPasswordType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindows10CompliancePolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindows10CompliancePolicy;
}
export function deserializeIntoWindows10CompliancePolicy(windows10CompliancePolicy: Windows10CompliancePolicy | undefined = {} as Windows10CompliancePolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceCompliancePolicy(windows10CompliancePolicy),
        "bitLockerEnabled": n => { windows10CompliancePolicy.bitLockerEnabled = n.getBooleanValue(); },
        "codeIntegrityEnabled": n => { windows10CompliancePolicy.codeIntegrityEnabled = n.getBooleanValue(); },
        "earlyLaunchAntiMalwareDriverEnabled": n => { windows10CompliancePolicy.earlyLaunchAntiMalwareDriverEnabled = n.getBooleanValue(); },
        "mobileOsMaximumVersion": n => { windows10CompliancePolicy.mobileOsMaximumVersion = n.getStringValue(); },
        "mobileOsMinimumVersion": n => { windows10CompliancePolicy.mobileOsMinimumVersion = n.getStringValue(); },
        "osMaximumVersion": n => { windows10CompliancePolicy.osMaximumVersion = n.getStringValue(); },
        "osMinimumVersion": n => { windows10CompliancePolicy.osMinimumVersion = n.getStringValue(); },
        "passwordBlockSimple": n => { windows10CompliancePolicy.passwordBlockSimple = n.getBooleanValue(); },
        "passwordExpirationDays": n => { windows10CompliancePolicy.passwordExpirationDays = n.getNumberValue(); },
        "passwordMinimumCharacterSetCount": n => { windows10CompliancePolicy.passwordMinimumCharacterSetCount = n.getNumberValue(); },
        "passwordMinimumLength": n => { windows10CompliancePolicy.passwordMinimumLength = n.getNumberValue(); },
        "passwordMinutesOfInactivityBeforeLock": n => { windows10CompliancePolicy.passwordMinutesOfInactivityBeforeLock = n.getNumberValue(); },
        "passwordPreviousPasswordBlockCount": n => { windows10CompliancePolicy.passwordPreviousPasswordBlockCount = n.getNumberValue(); },
        "passwordRequired": n => { windows10CompliancePolicy.passwordRequired = n.getBooleanValue(); },
        "passwordRequiredToUnlockFromIdle": n => { windows10CompliancePolicy.passwordRequiredToUnlockFromIdle = n.getBooleanValue(); },
        "passwordRequiredType": n => { windows10CompliancePolicy.passwordRequiredType = n.getEnumValue<RequiredPasswordType>(RequiredPasswordType); },
        "requireHealthyDeviceReport": n => { windows10CompliancePolicy.requireHealthyDeviceReport = n.getBooleanValue(); },
        "secureBootEnabled": n => { windows10CompliancePolicy.secureBootEnabled = n.getBooleanValue(); },
        "storageRequireEncryption": n => { windows10CompliancePolicy.storageRequireEncryption = n.getBooleanValue(); },
    }
}
export function serializeWindows10CompliancePolicy(writer: SerializationWriter, windows10CompliancePolicy: Windows10CompliancePolicy | undefined = {} as Windows10CompliancePolicy) : void {
    serializeDeviceCompliancePolicy(writer, windows10CompliancePolicy)
    writer.writeBooleanValue("bitLockerEnabled", windows10CompliancePolicy.bitLockerEnabled);
    writer.writeBooleanValue("codeIntegrityEnabled", windows10CompliancePolicy.codeIntegrityEnabled);
    writer.writeBooleanValue("earlyLaunchAntiMalwareDriverEnabled", windows10CompliancePolicy.earlyLaunchAntiMalwareDriverEnabled);
    writer.writeStringValue("mobileOsMaximumVersion", windows10CompliancePolicy.mobileOsMaximumVersion);
    writer.writeStringValue("mobileOsMinimumVersion", windows10CompliancePolicy.mobileOsMinimumVersion);
    writer.writeStringValue("osMaximumVersion", windows10CompliancePolicy.osMaximumVersion);
    writer.writeStringValue("osMinimumVersion", windows10CompliancePolicy.osMinimumVersion);
    writer.writeBooleanValue("passwordBlockSimple", windows10CompliancePolicy.passwordBlockSimple);
    writer.writeNumberValue("passwordExpirationDays", windows10CompliancePolicy.passwordExpirationDays);
    writer.writeNumberValue("passwordMinimumCharacterSetCount", windows10CompliancePolicy.passwordMinimumCharacterSetCount);
    writer.writeNumberValue("passwordMinimumLength", windows10CompliancePolicy.passwordMinimumLength);
    writer.writeNumberValue("passwordMinutesOfInactivityBeforeLock", windows10CompliancePolicy.passwordMinutesOfInactivityBeforeLock);
    writer.writeNumberValue("passwordPreviousPasswordBlockCount", windows10CompliancePolicy.passwordPreviousPasswordBlockCount);
    writer.writeBooleanValue("passwordRequired", windows10CompliancePolicy.passwordRequired);
    writer.writeBooleanValue("passwordRequiredToUnlockFromIdle", windows10CompliancePolicy.passwordRequiredToUnlockFromIdle);
    writer.writeEnumValue<RequiredPasswordType>("passwordRequiredType", windows10CompliancePolicy.passwordRequiredType);
    writer.writeBooleanValue("requireHealthyDeviceReport", windows10CompliancePolicy.requireHealthyDeviceReport);
    writer.writeBooleanValue("secureBootEnabled", windows10CompliancePolicy.secureBootEnabled);
    writer.writeBooleanValue("storageRequireEncryption", windows10CompliancePolicy.storageRequireEncryption);
}
export interface Windows10CompliancePolicy extends DeviceCompliancePolicy, Parsable {
    /**
     * Require devices to be reported healthy by Windows Device Health Attestation - bit locker is enabled
     */
    bitLockerEnabled?: boolean;
    /**
     * Require devices to be reported as healthy by Windows Device Health Attestation.
     */
    codeIntegrityEnabled?: boolean;
    /**
     * Require devices to be reported as healthy by Windows Device Health Attestation - early launch antimalware driver is enabled.
     */
    earlyLaunchAntiMalwareDriverEnabled?: boolean;
    /**
     * Maximum Windows Phone version.
     */
    mobileOsMaximumVersion?: string;
    /**
     * Minimum Windows Phone version.
     */
    mobileOsMinimumVersion?: string;
    /**
     * Maximum Windows 10 version.
     */
    osMaximumVersion?: string;
    /**
     * Minimum Windows 10 version.
     */
    osMinimumVersion?: string;
    /**
     * Indicates whether or not to block simple password.
     */
    passwordBlockSimple?: boolean;
    /**
     * The password expiration in days.
     */
    passwordExpirationDays?: number;
    /**
     * The number of character sets required in the password.
     */
    passwordMinimumCharacterSetCount?: number;
    /**
     * The minimum password length.
     */
    passwordMinimumLength?: number;
    /**
     * Minutes of inactivity before a password is required.
     */
    passwordMinutesOfInactivityBeforeLock?: number;
    /**
     * The number of previous passwords to prevent re-use of.
     */
    passwordPreviousPasswordBlockCount?: number;
    /**
     * Require a password to unlock Windows device.
     */
    passwordRequired?: boolean;
    /**
     * Require a password to unlock an idle device.
     */
    passwordRequiredToUnlockFromIdle?: boolean;
    /**
     * Possible values of required passwords.
     */
    passwordRequiredType?: RequiredPasswordType;
    /**
     * Require devices to be reported as healthy by Windows Device Health Attestation.
     */
    requireHealthyDeviceReport?: boolean;
    /**
     * Require devices to be reported as healthy by Windows Device Health Attestation - secure boot is enabled.
     */
    secureBootEnabled?: boolean;
    /**
     * Require encryption on windows devices.
     */
    storageRequireEncryption?: boolean;
}
// tslint:enable
// eslint-enable
