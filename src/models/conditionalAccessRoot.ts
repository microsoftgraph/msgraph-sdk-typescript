// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAuthenticationContextClassReferenceFromDiscriminatorValue, serializeAuthenticationContextClassReference, type AuthenticationContextClassReference } from './authenticationContextClassReference';
import { createAuthenticationStrengthRootFromDiscriminatorValue, serializeAuthenticationStrengthRoot, type AuthenticationStrengthRoot } from './authenticationStrengthRoot';
import { createConditionalAccessPolicyFromDiscriminatorValue, serializeConditionalAccessPolicy, type ConditionalAccessPolicy } from './conditionalAccessPolicy';
import { createConditionalAccessTemplateFromDiscriminatorValue, serializeConditionalAccessTemplate, type ConditionalAccessTemplate } from './conditionalAccessTemplate';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createNamedLocationFromDiscriminatorValue, serializeNamedLocation, type NamedLocation } from './namedLocation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessRoot extends Entity, Parsable {
    /**
     * Read-only. Nullable. Returns a collection of the specified authentication context class references.
     */
    authenticationContextClassReferences?: AuthenticationContextClassReference[];
    /**
     * The authenticationStrength property
     */
    authenticationStrength?: AuthenticationStrengthRoot;
    /**
     * Read-only. Nullable. Returns a collection of the specified named locations.
     */
    namedLocations?: NamedLocation[];
    /**
     * Read-only. Nullable. Returns a collection of the specified Conditional Access (CA) policies.
     */
    policies?: ConditionalAccessPolicy[];
    /**
     * Read-only. Nullable. Returns a collection of the specified Conditional Access templates.
     */
    templates?: ConditionalAccessTemplate[];
}
export function createConditionalAccessRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessRoot;
}
export function deserializeIntoConditionalAccessRoot(conditionalAccessRoot: ConditionalAccessRoot | undefined = {} as ConditionalAccessRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(conditionalAccessRoot),
        "authenticationContextClassReferences": n => { conditionalAccessRoot.authenticationContextClassReferences = n.getCollectionOfObjectValues<AuthenticationContextClassReference>(createAuthenticationContextClassReferenceFromDiscriminatorValue); },
        "authenticationStrength": n => { conditionalAccessRoot.authenticationStrength = n.getObjectValue<AuthenticationStrengthRoot>(createAuthenticationStrengthRootFromDiscriminatorValue); },
        "namedLocations": n => { conditionalAccessRoot.namedLocations = n.getCollectionOfObjectValues<NamedLocation>(createNamedLocationFromDiscriminatorValue); },
        "policies": n => { conditionalAccessRoot.policies = n.getCollectionOfObjectValues<ConditionalAccessPolicy>(createConditionalAccessPolicyFromDiscriminatorValue); },
        "templates": n => { conditionalAccessRoot.templates = n.getCollectionOfObjectValues<ConditionalAccessTemplate>(createConditionalAccessTemplateFromDiscriminatorValue); },
    }
}
export function serializeConditionalAccessRoot(writer: SerializationWriter, conditionalAccessRoot: ConditionalAccessRoot | undefined = {} as ConditionalAccessRoot) : void {
        serializeEntity(writer, conditionalAccessRoot)
        writer.writeCollectionOfObjectValues<AuthenticationContextClassReference>("authenticationContextClassReferences", conditionalAccessRoot.authenticationContextClassReferences, serializeAuthenticationContextClassReference);
        writer.writeObjectValue<AuthenticationStrengthRoot>("authenticationStrength", conditionalAccessRoot.authenticationStrength, serializeAuthenticationStrengthRoot);
        writer.writeCollectionOfObjectValues<NamedLocation>("namedLocations", conditionalAccessRoot.namedLocations, serializeNamedLocation);
        writer.writeCollectionOfObjectValues<ConditionalAccessPolicy>("policies", conditionalAccessRoot.policies, serializeConditionalAccessPolicy);
        writer.writeCollectionOfObjectValues<ConditionalAccessTemplate>("templates", conditionalAccessRoot.templates, serializeConditionalAccessTemplate);
}
// tslint:enable
// eslint-enable
