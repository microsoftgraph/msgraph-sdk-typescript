// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createPrinterLocationFromDiscriminatorValue, serializePrinterLocation, type PrinterLocation } from './printerLocation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrintConnectorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrintConnector;
}
export function deserializeIntoPrintConnector(printConnector: PrintConnector | undefined = {} as PrintConnector) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(printConnector),
        "appVersion": n => { printConnector.appVersion = n.getStringValue(); },
        "displayName": n => { printConnector.displayName = n.getStringValue(); },
        "fullyQualifiedDomainName": n => { printConnector.fullyQualifiedDomainName = n.getStringValue(); },
        "location": n => { printConnector.location = n.getObjectValue<PrinterLocation>(createPrinterLocationFromDiscriminatorValue); },
        "operatingSystem": n => { printConnector.operatingSystem = n.getStringValue(); },
        "registeredDateTime": n => { printConnector.registeredDateTime = n.getDateValue(); },
    }
}
export interface PrintConnector extends Entity, Parsable {
    /**
     * The connector's version.
     */
    appVersion?: string;
    /**
     * The name of the connector.
     */
    displayName?: string;
    /**
     * The connector machine's hostname.
     */
    fullyQualifiedDomainName?: string;
    /**
     * The physical and/or organizational location of the connector.
     */
    location?: PrinterLocation;
    /**
     * The connector machine's operating system version.
     */
    operatingSystem?: string;
    /**
     * The DateTimeOffset when the connector was registered.
     */
    registeredDateTime?: Date;
}
export function serializePrintConnector(writer: SerializationWriter, printConnector: PrintConnector | undefined = {} as PrintConnector) : void {
        serializeEntity(writer, printConnector)
        writer.writeStringValue("appVersion", printConnector.appVersion);
        writer.writeStringValue("displayName", printConnector.displayName);
        writer.writeStringValue("fullyQualifiedDomainName", printConnector.fullyQualifiedDomainName);
        writer.writeObjectValue<PrinterLocation>("location", printConnector.location, serializePrinterLocation);
        writer.writeStringValue("operatingSystem", printConnector.operatingSystem);
        writer.writeDateValue("registeredDateTime", printConnector.registeredDateTime);
}
// tslint:enable
// eslint-enable
