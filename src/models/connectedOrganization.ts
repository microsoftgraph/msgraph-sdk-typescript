// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ConnectedOrganizationState } from './connectedOrganizationState';
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySourceFromDiscriminatorValue, serializeIdentitySource, type IdentitySource } from './identitySource';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConnectedOrganization extends Entity, Parsable {
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    createdDateTime?: Date;
    /**
     * The description of the connected organization.
     */
    description?: string;
    /**
     * The display name of the connected organization. Supports $filter (eq).
     */
    displayName?: string;
    /**
     * The externalSponsors property
     */
    externalSponsors?: DirectoryObject[];
    /**
     * The identity sources in this connected organization, one of azureActiveDirectoryTenant, domainIdentitySource, externalDomainFederation or crossCloudAzureActiveDirectoryTenant. Nullable.
     */
    identitySources?: IdentitySource[];
    /**
     * The internalSponsors property
     */
    internalSponsors?: DirectoryObject[];
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    modifiedDateTime?: Date;
    /**
     * The state of a connected organization defines whether assignment policies with requestor scope type AllConfiguredConnectedOrganizationSubjects are applicable or not.  The possible values are: configured, proposed, unknownFutureValue.
     */
    state?: ConnectedOrganizationState;
}
export function createConnectedOrganizationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConnectedOrganization;
}
export function deserializeIntoConnectedOrganization(connectedOrganization: ConnectedOrganization | undefined = {} as ConnectedOrganization) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(connectedOrganization),
        "createdDateTime": n => { connectedOrganization.createdDateTime = n.getDateValue(); },
        "description": n => { connectedOrganization.description = n.getStringValue(); },
        "displayName": n => { connectedOrganization.displayName = n.getStringValue(); },
        "externalSponsors": n => { connectedOrganization.externalSponsors = n.getCollectionOfObjectValues<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "identitySources": n => { connectedOrganization.identitySources = n.getCollectionOfObjectValues<IdentitySource>(createIdentitySourceFromDiscriminatorValue); },
        "internalSponsors": n => { connectedOrganization.internalSponsors = n.getCollectionOfObjectValues<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "modifiedDateTime": n => { connectedOrganization.modifiedDateTime = n.getDateValue(); },
        "state": n => { connectedOrganization.state = n.getEnumValue<ConnectedOrganizationState>(ConnectedOrganizationState); },
    }
}
export function serializeConnectedOrganization(writer: SerializationWriter, connectedOrganization: ConnectedOrganization | undefined = {} as ConnectedOrganization) : void {
    serializeEntity(writer, connectedOrganization)
    writer.writeDateValue("createdDateTime", connectedOrganization.createdDateTime);
    writer.writeStringValue("description", connectedOrganization.description);
    writer.writeStringValue("displayName", connectedOrganization.displayName);
    writer.writeCollectionOfObjectValues<DirectoryObject>("externalSponsors", connectedOrganization.externalSponsors, serializeDirectoryObject);
    writer.writeCollectionOfObjectValues<IdentitySource>("identitySources", connectedOrganization.identitySources, serializeIdentitySource);
    writer.writeCollectionOfObjectValues<DirectoryObject>("internalSponsors", connectedOrganization.internalSponsors, serializeDirectoryObject);
    writer.writeDateValue("modifiedDateTime", connectedOrganization.modifiedDateTime);
    writer.writeEnumValue<ConnectedOrganizationState>("state", connectedOrganization.state);
}
// tslint:enable
// eslint-enable
