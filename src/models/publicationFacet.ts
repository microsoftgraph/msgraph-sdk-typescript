// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPublicationFacetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPublicationFacet;
}
export function deserializeIntoPublicationFacet(publicationFacet: PublicationFacet | undefined = {} as PublicationFacet) : Record<string, (node: ParseNode) => void> {
    return {
        "checkedOutBy": n => { publicationFacet.checkedOutBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "level": n => { publicationFacet.level = n.getStringValue(); },
        "@odata.type": n => { publicationFacet.odataType = n.getStringValue(); },
        "versionId": n => { publicationFacet.versionId = n.getStringValue(); },
    }
}
export interface PublicationFacet extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * User who has checked out the file.
     */
    checkedOutBy?: IdentitySet;
    /**
     * The state of publication for this document. Either published or checkout. Read-only.
     */
    level?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The unique identifier for the version that is visible to the current caller. Read-only.
     */
    versionId?: string;
}
export function serializePublicationFacet(writer: SerializationWriter, publicationFacet: PublicationFacet | undefined = {} as PublicationFacet) : void {
    writer.writeObjectValue<IdentitySet>("checkedOutBy", publicationFacet.checkedOutBy, serializeIdentitySet);
    writer.writeStringValue("level", publicationFacet.level);
    writer.writeStringValue("@odata.type", publicationFacet.odataType);
    writer.writeStringValue("versionId", publicationFacet.versionId);
    writer.writeAdditionalData(publicationFacet.additionalData);
}
// tslint:enable
// eslint-enable
