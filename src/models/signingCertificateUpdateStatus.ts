// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSigningCertificateUpdateStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSigningCertificateUpdateStatus;
}
export function deserializeIntoSigningCertificateUpdateStatus(signingCertificateUpdateStatus: SigningCertificateUpdateStatus | undefined = {} as SigningCertificateUpdateStatus) : Record<string, (node: ParseNode) => void> {
    return {
        "certificateUpdateResult": n => { signingCertificateUpdateStatus.certificateUpdateResult = n.getStringValue(); },
        "lastRunDateTime": n => { signingCertificateUpdateStatus.lastRunDateTime = n.getDateValue(); },
        "@odata.type": n => { signingCertificateUpdateStatus.odataType = n.getStringValue(); },
    }
}
export function serializeSigningCertificateUpdateStatus(writer: SerializationWriter, signingCertificateUpdateStatus: SigningCertificateUpdateStatus | undefined = {} as SigningCertificateUpdateStatus) : void {
        writer.writeStringValue("certificateUpdateResult", signingCertificateUpdateStatus.certificateUpdateResult);
        writer.writeDateValue("lastRunDateTime", signingCertificateUpdateStatus.lastRunDateTime);
        writer.writeStringValue("@odata.type", signingCertificateUpdateStatus.odataType);
        writer.writeAdditionalData(signingCertificateUpdateStatus.additionalData);
}
export interface SigningCertificateUpdateStatus extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Status of the last certificate update. Read-only. For a list of statuses, see certificateUpdateResult status.
     */
    certificateUpdateResult?: string;
    /**
     * Date and time in ISO 8601 format and in UTC time when the certificate was last updated. Read-only.
     */
    lastRunDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:enable
// eslint-enable
