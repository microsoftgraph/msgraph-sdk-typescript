// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEmailIdentityFromDiscriminatorValue, serializeEmailIdentity, type EmailIdentity } from './emailIdentity';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createSimulationAutomationRunFromDiscriminatorValue, serializeSimulationAutomationRun, type SimulationAutomationRun } from './simulationAutomationRun';
import { SimulationAutomationStatus } from './simulationAutomationStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSimulationAutomationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSimulationAutomation;
}
export function deserializeIntoSimulationAutomation(simulationAutomation: SimulationAutomation | undefined = {} as SimulationAutomation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(simulationAutomation),
        "createdBy": n => { simulationAutomation.createdBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "createdDateTime": n => { simulationAutomation.createdDateTime = n.getDateValue(); },
        "description": n => { simulationAutomation.description = n.getStringValue(); },
        "displayName": n => { simulationAutomation.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { simulationAutomation.lastModifiedBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { simulationAutomation.lastModifiedDateTime = n.getDateValue(); },
        "lastRunDateTime": n => { simulationAutomation.lastRunDateTime = n.getDateValue(); },
        "nextRunDateTime": n => { simulationAutomation.nextRunDateTime = n.getDateValue(); },
        "runs": n => { simulationAutomation.runs = n.getCollectionOfObjectValues<SimulationAutomationRun>(createSimulationAutomationRunFromDiscriminatorValue); },
        "status": n => { simulationAutomation.status = n.getEnumValue<SimulationAutomationStatus>(SimulationAutomationStatus); },
    }
}
export function serializeSimulationAutomation(writer: SerializationWriter, simulationAutomation: SimulationAutomation | undefined = {} as SimulationAutomation) : void {
    serializeEntity(writer, simulationAutomation)
    writer.writeObjectValue<EmailIdentity>("createdBy", simulationAutomation.createdBy, serializeEmailIdentity);
    writer.writeDateValue("createdDateTime", simulationAutomation.createdDateTime);
    writer.writeStringValue("description", simulationAutomation.description);
    writer.writeStringValue("displayName", simulationAutomation.displayName);
    writer.writeObjectValue<EmailIdentity>("lastModifiedBy", simulationAutomation.lastModifiedBy, serializeEmailIdentity);
    writer.writeDateValue("lastModifiedDateTime", simulationAutomation.lastModifiedDateTime);
    writer.writeDateValue("lastRunDateTime", simulationAutomation.lastRunDateTime);
    writer.writeDateValue("nextRunDateTime", simulationAutomation.nextRunDateTime);
    writer.writeCollectionOfObjectValues<SimulationAutomationRun>("runs", simulationAutomation.runs, serializeSimulationAutomationRun);
    writer.writeEnumValue<SimulationAutomationStatus>("status", simulationAutomation.status);
}
export interface SimulationAutomation extends Entity, Parsable {
    /**
     * Identity of the user who created the attack simulation automation.
     */
    createdBy?: EmailIdentity;
    /**
     * Date and time when the attack simulation automation was created.
     */
    createdDateTime?: Date;
    /**
     * Description of the attack simulation automation.
     */
    description?: string;
    /**
     * Display name of the attack simulation automation. Supports $filter and $orderby.
     */
    displayName?: string;
    /**
     * Identity of the user who most recently modified the attack simulation automation.
     */
    lastModifiedBy?: EmailIdentity;
    /**
     * Date and time when the attack simulation automation was most recently modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * Date and time of the latest run of the attack simulation automation.
     */
    lastRunDateTime?: Date;
    /**
     * Date and time of the upcoming run of the attack simulation automation.
     */
    nextRunDateTime?: Date;
    /**
     * A collection of simulation automation runs.
     */
    runs?: SimulationAutomationRun[];
    /**
     * Status of the attack simulation automation. Supports $filter and $orderby. The possible values are: unknown, draft, notRunning, running, completed, unknownFutureValue.
     */
    status?: SimulationAutomationStatus;
}
// tslint:enable
// eslint-enable
