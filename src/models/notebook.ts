// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createNotebookLinksFromDiscriminatorValue, serializeNotebookLinks, type NotebookLinks } from './notebookLinks';
import { deserializeIntoOnenoteEntityHierarchyModel, serializeOnenoteEntityHierarchyModel, type OnenoteEntityHierarchyModel } from './onenoteEntityHierarchyModel';
import { createOnenoteSectionFromDiscriminatorValue, serializeOnenoteSection, type OnenoteSection } from './onenoteSection';
import { OnenoteUserRole } from './onenoteUserRole';
import { createSectionGroupFromDiscriminatorValue, serializeSectionGroup, type SectionGroup } from './sectionGroup';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createNotebookFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoNotebook;
}
export function deserializeIntoNotebook(notebook: Notebook | undefined = {} as Notebook) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOnenoteEntityHierarchyModel(notebook),
        "isDefault": n => { notebook.isDefault = n.getBooleanValue(); },
        "isShared": n => { notebook.isShared = n.getBooleanValue(); },
        "links": n => { notebook.links = n.getObjectValue<NotebookLinks>(createNotebookLinksFromDiscriminatorValue); },
        "sectionGroups": n => { notebook.sectionGroups = n.getCollectionOfObjectValues<SectionGroup>(createSectionGroupFromDiscriminatorValue); },
        "sectionGroupsUrl": n => { notebook.sectionGroupsUrl = n.getStringValue(); },
        "sections": n => { notebook.sections = n.getCollectionOfObjectValues<OnenoteSection>(createOnenoteSectionFromDiscriminatorValue); },
        "sectionsUrl": n => { notebook.sectionsUrl = n.getStringValue(); },
        "userRole": n => { notebook.userRole = n.getEnumValue<OnenoteUserRole>(OnenoteUserRole); },
    }
}
export interface Notebook extends OnenoteEntityHierarchyModel, Parsable {
    /**
     * Indicates whether this is the user's default notebook. Read-only.
     */
    isDefault?: boolean;
    /**
     * Indicates whether the notebook is shared. If true, the contents of the notebook can be seen by people other than the owner. Read-only.
     */
    isShared?: boolean;
    /**
     * Links for opening the notebook. The oneNoteClientURL link opens the notebook in the OneNote native client if it's installed. The oneNoteWebURL link opens the notebook in OneNote on the web.
     */
    links?: NotebookLinks;
    /**
     * The section groups in the notebook. Read-only. Nullable.
     */
    sectionGroups?: SectionGroup[];
    /**
     * The URL for the sectionGroups navigation property, which returns all the section groups in the notebook. Read-only.
     */
    sectionGroupsUrl?: string;
    /**
     * The sections in the notebook. Read-only. Nullable.
     */
    sections?: OnenoteSection[];
    /**
     * The URL for the sections navigation property, which returns all the sections in the notebook. Read-only.
     */
    sectionsUrl?: string;
    /**
     * Possible values are: Owner, Contributor, Reader, None. Owner represents owner-level access to the notebook. Contributor represents read/write access to the notebook. Reader represents read-only access to the notebook. Read-only.
     */
    userRole?: OnenoteUserRole;
}
export function serializeNotebook(writer: SerializationWriter, notebook: Notebook | undefined = {} as Notebook) : void {
        serializeOnenoteEntityHierarchyModel(writer, notebook)
        writer.writeBooleanValue("isDefault", notebook.isDefault);
        writer.writeBooleanValue("isShared", notebook.isShared);
        writer.writeObjectValue<NotebookLinks>("links", notebook.links, serializeNotebookLinks);
        writer.writeCollectionOfObjectValues<SectionGroup>("sectionGroups", notebook.sectionGroups, serializeSectionGroup);
        writer.writeStringValue("sectionGroupsUrl", notebook.sectionGroupsUrl);
        writer.writeCollectionOfObjectValues<OnenoteSection>("sections", notebook.sections, serializeOnenoteSection);
        writer.writeStringValue("sectionsUrl", notebook.sectionsUrl);
        writer.writeEnumValue<OnenoteUserRole>("userRole", notebook.userRole);
}
// tslint:enable
// eslint-enable
