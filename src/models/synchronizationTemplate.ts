// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createSynchronizationMetadataEntryFromDiscriminatorValue, serializeSynchronizationMetadataEntry, type SynchronizationMetadataEntry } from './synchronizationMetadataEntry';
import { createSynchronizationSchemaFromDiscriminatorValue, serializeSynchronizationSchema, type SynchronizationSchema } from './synchronizationSchema';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export function createSynchronizationTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSynchronizationTemplate;
}
export function deserializeIntoSynchronizationTemplate(synchronizationTemplate: SynchronizationTemplate | undefined = {} as SynchronizationTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(synchronizationTemplate),
        "applicationId": n => { synchronizationTemplate.applicationId = n.getGuidValue(); },
        "default": n => { synchronizationTemplate.defaultEscaped = n.getBooleanValue(); },
        "description": n => { synchronizationTemplate.description = n.getStringValue(); },
        "discoverable": n => { synchronizationTemplate.discoverable = n.getBooleanValue(); },
        "factoryTag": n => { synchronizationTemplate.factoryTag = n.getStringValue(); },
        "metadata": n => { synchronizationTemplate.metadata = n.getCollectionOfObjectValues<SynchronizationMetadataEntry>(createSynchronizationMetadataEntryFromDiscriminatorValue); },
        "schema": n => { synchronizationTemplate.schema = n.getObjectValue<SynchronizationSchema>(createSynchronizationSchemaFromDiscriminatorValue); },
    }
}
export function serializeSynchronizationTemplate(writer: SerializationWriter, synchronizationTemplate: SynchronizationTemplate | undefined = {} as SynchronizationTemplate) : void {
    serializeEntity(writer, synchronizationTemplate)
    writer.writeGuidValue("applicationId", synchronizationTemplate.applicationId);
    writer.writeBooleanValue("default", synchronizationTemplate.defaultEscaped);
    writer.writeStringValue("description", synchronizationTemplate.description);
    writer.writeBooleanValue("discoverable", synchronizationTemplate.discoverable);
    writer.writeStringValue("factoryTag", synchronizationTemplate.factoryTag);
    writer.writeCollectionOfObjectValues<SynchronizationMetadataEntry>("metadata", synchronizationTemplate.metadata, serializeSynchronizationMetadataEntry);
    writer.writeObjectValue<SynchronizationSchema>("schema", synchronizationTemplate.schema, serializeSynchronizationSchema);
}
export interface SynchronizationTemplate extends Entity, Parsable {
    /**
     * Identifier of the application this template belongs to.
     */
    applicationId?: Guid;
    /**
     * true if this template is recommended to be the default for the application.
     */
    defaultEscaped?: boolean;
    /**
     * Description of the template.
     */
    description?: string;
    /**
     * true if this template should appear in the collection of templates available for the application instance (service principal).
     */
    discoverable?: boolean;
    /**
     * One of the well-known factory tags supported by the synchronization engine. The factoryTag tells the synchronization engine which implementation to use when processing jobs based on this template.
     */
    factoryTag?: string;
    /**
     * Additional extension properties. Unless mentioned explicitly, metadata values should not be changed.
     */
    metadata?: SynchronizationMetadataEntry[];
    /**
     * Default synchronization schema for the jobs based on this template.
     */
    schema?: SynchronizationSchema;
}
// tslint:enable
// eslint-enable
