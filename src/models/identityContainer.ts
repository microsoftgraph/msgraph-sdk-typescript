// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createB2xIdentityUserFlowFromDiscriminatorValue, serializeB2xIdentityUserFlow, type B2xIdentityUserFlow } from './b2xIdentityUserFlow';
import { createConditionalAccessRootFromDiscriminatorValue, serializeConditionalAccessRoot, type ConditionalAccessRoot } from './conditionalAccessRoot';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentityApiConnectorFromDiscriminatorValue, serializeIdentityApiConnector, type IdentityApiConnector } from './identityApiConnector';
import { createIdentityProviderBaseFromDiscriminatorValue, serializeIdentityProviderBase, type IdentityProviderBase } from './identityProviderBase';
import { createIdentityUserFlowAttributeFromDiscriminatorValue, serializeIdentityUserFlowAttribute, type IdentityUserFlowAttribute } from './identityUserFlowAttribute';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIdentityContainerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIdentityContainer;
}
export function deserializeIntoIdentityContainer(identityContainer: IdentityContainer | undefined = {} as IdentityContainer) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(identityContainer),
        "apiConnectors": n => { identityContainer.apiConnectors = n.getCollectionOfObjectValues<IdentityApiConnector>(createIdentityApiConnectorFromDiscriminatorValue); },
        "b2xUserFlows": n => { identityContainer.b2xUserFlows = n.getCollectionOfObjectValues<B2xIdentityUserFlow>(createB2xIdentityUserFlowFromDiscriminatorValue); },
        "conditionalAccess": n => { identityContainer.conditionalAccess = n.getObjectValue<ConditionalAccessRoot>(createConditionalAccessRootFromDiscriminatorValue); },
        "identityProviders": n => { identityContainer.identityProviders = n.getCollectionOfObjectValues<IdentityProviderBase>(createIdentityProviderBaseFromDiscriminatorValue); },
        "userFlowAttributes": n => { identityContainer.userFlowAttributes = n.getCollectionOfObjectValues<IdentityUserFlowAttribute>(createIdentityUserFlowAttributeFromDiscriminatorValue); },
    }
}
export interface IdentityContainer extends Entity, Parsable {
    /**
     * Represents entry point for API connectors.
     */
    apiConnectors?: IdentityApiConnector[];
    /**
     * Represents entry point for B2X/self-service sign-up identity userflows.
     */
    b2xUserFlows?: B2xIdentityUserFlow[];
    /**
     * the entry point for the Conditional Access (CA) object model.
     */
    conditionalAccess?: ConditionalAccessRoot;
    /**
     * The identityProviders property
     */
    identityProviders?: IdentityProviderBase[];
    /**
     * Represents entry point for identity userflow attributes.
     */
    userFlowAttributes?: IdentityUserFlowAttribute[];
}
export function serializeIdentityContainer(writer: SerializationWriter, identityContainer: IdentityContainer | undefined = {} as IdentityContainer) : void {
        serializeEntity(writer, identityContainer)
        writer.writeCollectionOfObjectValues<IdentityApiConnector>("apiConnectors", identityContainer.apiConnectors, serializeIdentityApiConnector);
        writer.writeCollectionOfObjectValues<B2xIdentityUserFlow>("b2xUserFlows", identityContainer.b2xUserFlows, serializeB2xIdentityUserFlow);
        writer.writeObjectValue<ConditionalAccessRoot>("conditionalAccess", identityContainer.conditionalAccess, serializeConditionalAccessRoot);
        writer.writeCollectionOfObjectValues<IdentityProviderBase>("identityProviders", identityContainer.identityProviders, serializeIdentityProviderBase);
        writer.writeCollectionOfObjectValues<IdentityUserFlowAttribute>("userFlowAttributes", identityContainer.userFlowAttributes, serializeIdentityUserFlowAttribute);
}
// tslint:enable
// eslint-enable
