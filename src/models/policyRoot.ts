// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createActivityBasedTimeoutPolicyFromDiscriminatorValue, serializeActivityBasedTimeoutPolicy, type ActivityBasedTimeoutPolicy } from './activityBasedTimeoutPolicy';
import { createAdminConsentRequestPolicyFromDiscriminatorValue, serializeAdminConsentRequestPolicy, type AdminConsentRequestPolicy } from './adminConsentRequestPolicy';
import { createAppManagementPolicyFromDiscriminatorValue, serializeAppManagementPolicy, type AppManagementPolicy } from './appManagementPolicy';
import { createAuthenticationFlowsPolicyFromDiscriminatorValue, serializeAuthenticationFlowsPolicy, type AuthenticationFlowsPolicy } from './authenticationFlowsPolicy';
import { createAuthenticationMethodsPolicyFromDiscriminatorValue, serializeAuthenticationMethodsPolicy, type AuthenticationMethodsPolicy } from './authenticationMethodsPolicy';
import { createAuthenticationStrengthPolicyFromDiscriminatorValue, serializeAuthenticationStrengthPolicy, type AuthenticationStrengthPolicy } from './authenticationStrengthPolicy';
import { createAuthorizationPolicyFromDiscriminatorValue, serializeAuthorizationPolicy, type AuthorizationPolicy } from './authorizationPolicy';
import { createClaimsMappingPolicyFromDiscriminatorValue, serializeClaimsMappingPolicy, type ClaimsMappingPolicy } from './claimsMappingPolicy';
import { createConditionalAccessPolicyFromDiscriminatorValue, serializeConditionalAccessPolicy, type ConditionalAccessPolicy } from './conditionalAccessPolicy';
import { createCrossTenantAccessPolicyFromDiscriminatorValue, serializeCrossTenantAccessPolicy, type CrossTenantAccessPolicy } from './crossTenantAccessPolicy';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createFeatureRolloutPolicyFromDiscriminatorValue, serializeFeatureRolloutPolicy, type FeatureRolloutPolicy } from './featureRolloutPolicy';
import { createHomeRealmDiscoveryPolicyFromDiscriminatorValue, serializeHomeRealmDiscoveryPolicy, type HomeRealmDiscoveryPolicy } from './homeRealmDiscoveryPolicy';
import { createIdentitySecurityDefaultsEnforcementPolicyFromDiscriminatorValue, serializeIdentitySecurityDefaultsEnforcementPolicy, type IdentitySecurityDefaultsEnforcementPolicy } from './identitySecurityDefaultsEnforcementPolicy';
import { createPermissionGrantPolicyFromDiscriminatorValue, serializePermissionGrantPolicy, type PermissionGrantPolicy } from './permissionGrantPolicy';
import { createTenantAppManagementPolicyFromDiscriminatorValue, serializeTenantAppManagementPolicy, type TenantAppManagementPolicy } from './tenantAppManagementPolicy';
import { createTokenIssuancePolicyFromDiscriminatorValue, serializeTokenIssuancePolicy, type TokenIssuancePolicy } from './tokenIssuancePolicy';
import { createTokenLifetimePolicyFromDiscriminatorValue, serializeTokenLifetimePolicy, type TokenLifetimePolicy } from './tokenLifetimePolicy';
import { createUnifiedRoleManagementPolicyFromDiscriminatorValue, serializeUnifiedRoleManagementPolicy, type UnifiedRoleManagementPolicy } from './unifiedRoleManagementPolicy';
import { createUnifiedRoleManagementPolicyAssignmentFromDiscriminatorValue, serializeUnifiedRoleManagementPolicyAssignment, type UnifiedRoleManagementPolicyAssignment } from './unifiedRoleManagementPolicyAssignment';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPolicyRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPolicyRoot;
}
export function deserializeIntoPolicyRoot(policyRoot: PolicyRoot | undefined = {} as PolicyRoot) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(policyRoot),
        "activityBasedTimeoutPolicies": n => { policyRoot.activityBasedTimeoutPolicies = n.getCollectionOfObjectValues<ActivityBasedTimeoutPolicy>(createActivityBasedTimeoutPolicyFromDiscriminatorValue); },
        "adminConsentRequestPolicy": n => { policyRoot.adminConsentRequestPolicy = n.getObjectValue<AdminConsentRequestPolicy>(createAdminConsentRequestPolicyFromDiscriminatorValue); },
        "appManagementPolicies": n => { policyRoot.appManagementPolicies = n.getCollectionOfObjectValues<AppManagementPolicy>(createAppManagementPolicyFromDiscriminatorValue); },
        "authenticationFlowsPolicy": n => { policyRoot.authenticationFlowsPolicy = n.getObjectValue<AuthenticationFlowsPolicy>(createAuthenticationFlowsPolicyFromDiscriminatorValue); },
        "authenticationMethodsPolicy": n => { policyRoot.authenticationMethodsPolicy = n.getObjectValue<AuthenticationMethodsPolicy>(createAuthenticationMethodsPolicyFromDiscriminatorValue); },
        "authenticationStrengthPolicies": n => { policyRoot.authenticationStrengthPolicies = n.getCollectionOfObjectValues<AuthenticationStrengthPolicy>(createAuthenticationStrengthPolicyFromDiscriminatorValue); },
        "authorizationPolicy": n => { policyRoot.authorizationPolicy = n.getObjectValue<AuthorizationPolicy>(createAuthorizationPolicyFromDiscriminatorValue); },
        "claimsMappingPolicies": n => { policyRoot.claimsMappingPolicies = n.getCollectionOfObjectValues<ClaimsMappingPolicy>(createClaimsMappingPolicyFromDiscriminatorValue); },
        "conditionalAccessPolicies": n => { policyRoot.conditionalAccessPolicies = n.getCollectionOfObjectValues<ConditionalAccessPolicy>(createConditionalAccessPolicyFromDiscriminatorValue); },
        "crossTenantAccessPolicy": n => { policyRoot.crossTenantAccessPolicy = n.getObjectValue<CrossTenantAccessPolicy>(createCrossTenantAccessPolicyFromDiscriminatorValue); },
        "defaultAppManagementPolicy": n => { policyRoot.defaultAppManagementPolicy = n.getObjectValue<TenantAppManagementPolicy>(createTenantAppManagementPolicyFromDiscriminatorValue); },
        "featureRolloutPolicies": n => { policyRoot.featureRolloutPolicies = n.getCollectionOfObjectValues<FeatureRolloutPolicy>(createFeatureRolloutPolicyFromDiscriminatorValue); },
        "homeRealmDiscoveryPolicies": n => { policyRoot.homeRealmDiscoveryPolicies = n.getCollectionOfObjectValues<HomeRealmDiscoveryPolicy>(createHomeRealmDiscoveryPolicyFromDiscriminatorValue); },
        "identitySecurityDefaultsEnforcementPolicy": n => { policyRoot.identitySecurityDefaultsEnforcementPolicy = n.getObjectValue<IdentitySecurityDefaultsEnforcementPolicy>(createIdentitySecurityDefaultsEnforcementPolicyFromDiscriminatorValue); },
        "permissionGrantPolicies": n => { policyRoot.permissionGrantPolicies = n.getCollectionOfObjectValues<PermissionGrantPolicy>(createPermissionGrantPolicyFromDiscriminatorValue); },
        "roleManagementPolicies": n => { policyRoot.roleManagementPolicies = n.getCollectionOfObjectValues<UnifiedRoleManagementPolicy>(createUnifiedRoleManagementPolicyFromDiscriminatorValue); },
        "roleManagementPolicyAssignments": n => { policyRoot.roleManagementPolicyAssignments = n.getCollectionOfObjectValues<UnifiedRoleManagementPolicyAssignment>(createUnifiedRoleManagementPolicyAssignmentFromDiscriminatorValue); },
        "tokenIssuancePolicies": n => { policyRoot.tokenIssuancePolicies = n.getCollectionOfObjectValues<TokenIssuancePolicy>(createTokenIssuancePolicyFromDiscriminatorValue); },
        "tokenLifetimePolicies": n => { policyRoot.tokenLifetimePolicies = n.getCollectionOfObjectValues<TokenLifetimePolicy>(createTokenLifetimePolicyFromDiscriminatorValue); },
    }
}
export interface PolicyRoot extends Entity, Parsable {
    /**
     * The policy that controls the idle time out for web sessions for applications.
     */
    activityBasedTimeoutPolicies?: ActivityBasedTimeoutPolicy[];
    /**
     * The policy by which consent requests are created and managed for the entire tenant.
     */
    adminConsentRequestPolicy?: AdminConsentRequestPolicy;
    /**
     * The policies that enforce app management restrictions for specific applications and service principals, overriding the defaultAppManagementPolicy.
     */
    appManagementPolicies?: AppManagementPolicy[];
    /**
     * The policy configuration of the self-service sign-up experience of external users.
     */
    authenticationFlowsPolicy?: AuthenticationFlowsPolicy;
    /**
     * The authentication methods and the users that are allowed to use them to sign in and perform multifactor authentication (MFA) in Microsoft Entra ID.
     */
    authenticationMethodsPolicy?: AuthenticationMethodsPolicy;
    /**
     * The authentication method combinations that are to be used in scenarios defined by Microsoft Entra Conditional Access.
     */
    authenticationStrengthPolicies?: AuthenticationStrengthPolicy[];
    /**
     * The policy that controls Microsoft Entra authorization settings.
     */
    authorizationPolicy?: AuthorizationPolicy;
    /**
     * The claim-mapping policies for WS-Fed, SAML, OAuth 2.0, and OpenID Connect protocols, for tokens issued to a specific application.
     */
    claimsMappingPolicies?: ClaimsMappingPolicy[];
    /**
     * The custom rules that define an access scenario.
     */
    conditionalAccessPolicies?: ConditionalAccessPolicy[];
    /**
     * The custom rules that define an access scenario when interacting with external Microsoft Entra tenants.
     */
    crossTenantAccessPolicy?: CrossTenantAccessPolicy;
    /**
     * The tenant-wide policy that enforces app management restrictions for all applications and service principals.
     */
    defaultAppManagementPolicy?: TenantAppManagementPolicy;
    /**
     * The feature rollout policy associated with a directory object.
     */
    featureRolloutPolicies?: FeatureRolloutPolicy[];
    /**
     * The policy to control Microsoft Entra authentication behavior for federated users.
     */
    homeRealmDiscoveryPolicies?: HomeRealmDiscoveryPolicy[];
    /**
     * The policy that represents the security defaults that protect against common attacks.
     */
    identitySecurityDefaultsEnforcementPolicy?: IdentitySecurityDefaultsEnforcementPolicy;
    /**
     * The policy that specifies the conditions under which consent can be granted.
     */
    permissionGrantPolicies?: PermissionGrantPolicy[];
    /**
     * Specifies the various policies associated with scopes and roles.
     */
    roleManagementPolicies?: UnifiedRoleManagementPolicy[];
    /**
     * The assignment of a role management policy to a role definition object.
     */
    roleManagementPolicyAssignments?: UnifiedRoleManagementPolicyAssignment[];
    /**
     * The policy that specifies the characteristics of SAML tokens issued by Microsoft Entra ID.
     */
    tokenIssuancePolicies?: TokenIssuancePolicy[];
    /**
     * The policy that controls the lifetime of a JWT access token, an ID token, or a SAML 1.1/2.0 token issued by Microsoft Entra ID.
     */
    tokenLifetimePolicies?: TokenLifetimePolicy[];
}
export function serializePolicyRoot(writer: SerializationWriter, policyRoot: PolicyRoot | undefined = {} as PolicyRoot) : void {
        serializeEntity(writer, policyRoot)
        writer.writeCollectionOfObjectValues<ActivityBasedTimeoutPolicy>("activityBasedTimeoutPolicies", policyRoot.activityBasedTimeoutPolicies, );
        writer.writeObjectValue<AdminConsentRequestPolicy>("adminConsentRequestPolicy", policyRoot.adminConsentRequestPolicy, );
        writer.writeCollectionOfObjectValues<AppManagementPolicy>("appManagementPolicies", policyRoot.appManagementPolicies, );
        writer.writeObjectValue<AuthenticationFlowsPolicy>("authenticationFlowsPolicy", policyRoot.authenticationFlowsPolicy, );
        writer.writeObjectValue<AuthenticationMethodsPolicy>("authenticationMethodsPolicy", policyRoot.authenticationMethodsPolicy, );
        writer.writeCollectionOfObjectValues<AuthenticationStrengthPolicy>("authenticationStrengthPolicies", policyRoot.authenticationStrengthPolicies, );
        writer.writeObjectValue<AuthorizationPolicy>("authorizationPolicy", policyRoot.authorizationPolicy, );
        writer.writeCollectionOfObjectValues<ClaimsMappingPolicy>("claimsMappingPolicies", policyRoot.claimsMappingPolicies, );
        writer.writeCollectionOfObjectValues<ConditionalAccessPolicy>("conditionalAccessPolicies", policyRoot.conditionalAccessPolicies, );
        writer.writeObjectValue<CrossTenantAccessPolicy>("crossTenantAccessPolicy", policyRoot.crossTenantAccessPolicy, );
        writer.writeObjectValue<TenantAppManagementPolicy>("defaultAppManagementPolicy", policyRoot.defaultAppManagementPolicy, );
        writer.writeCollectionOfObjectValues<FeatureRolloutPolicy>("featureRolloutPolicies", policyRoot.featureRolloutPolicies, );
        writer.writeCollectionOfObjectValues<HomeRealmDiscoveryPolicy>("homeRealmDiscoveryPolicies", policyRoot.homeRealmDiscoveryPolicies, );
        writer.writeObjectValue<IdentitySecurityDefaultsEnforcementPolicy>("identitySecurityDefaultsEnforcementPolicy", policyRoot.identitySecurityDefaultsEnforcementPolicy, );
        writer.writeCollectionOfObjectValues<PermissionGrantPolicy>("permissionGrantPolicies", policyRoot.permissionGrantPolicies, );
        writer.writeCollectionOfObjectValues<UnifiedRoleManagementPolicy>("roleManagementPolicies", policyRoot.roleManagementPolicies, );
        writer.writeCollectionOfObjectValues<UnifiedRoleManagementPolicyAssignment>("roleManagementPolicyAssignments", policyRoot.roleManagementPolicyAssignments, );
        writer.writeCollectionOfObjectValues<TokenIssuancePolicy>("tokenIssuancePolicies", policyRoot.tokenIssuancePolicies, );
        writer.writeCollectionOfObjectValues<TokenLifetimePolicy>("tokenLifetimePolicies", policyRoot.tokenLifetimePolicies, );
}
// tslint:enable
// eslint-enable
