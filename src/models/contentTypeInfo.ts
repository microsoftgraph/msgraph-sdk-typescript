// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ContentTypeInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The ID of the content type.
     */
    id?: string;
    /**
     * The name of the content type.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createContentTypeInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoContentTypeInfo;
}
export function deserializeIntoContentTypeInfo(contentTypeInfo: ContentTypeInfo | undefined = {} as ContentTypeInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { contentTypeInfo.id = n.getStringValue(); },
        "name": n => { contentTypeInfo.name = n.getStringValue(); },
        "@odata.type": n => { contentTypeInfo.odataType = n.getStringValue(); },
    }
}
export function serializeContentTypeInfo(writer: SerializationWriter, contentTypeInfo: ContentTypeInfo | undefined = {} as ContentTypeInfo) : void {
    writer.writeStringValue("id", contentTypeInfo.id);
    writer.writeStringValue("name", contentTypeInfo.name);
    writer.writeStringValue("@odata.type", contentTypeInfo.odataType);
    writer.writeAdditionalData(contentTypeInfo.additionalData);
}
// tslint:enable
// eslint-enable
