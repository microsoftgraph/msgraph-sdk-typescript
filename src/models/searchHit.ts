// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEntityFromDiscriminatorValue, serializeEntity, type Entity } from './entity';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSearchHitFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSearchHit;
}
export function deserializeIntoSearchHit(searchHit: SearchHit | undefined = {} as SearchHit) : Record<string, (node: ParseNode) => void> {
    return {
        "contentSource": n => { searchHit.contentSource = n.getStringValue(); },
        "hitId": n => { searchHit.hitId = n.getStringValue(); },
        "isCollapsed": n => { searchHit.isCollapsed = n.getBooleanValue(); },
        "@odata.type": n => { searchHit.odataType = n.getStringValue(); },
        "rank": n => { searchHit.rank = n.getNumberValue(); },
        "resource": n => { searchHit.resource = n.getObjectValue<Entity>(createEntityFromDiscriminatorValue); },
        "resultTemplateId": n => { searchHit.resultTemplateId = n.getStringValue(); },
        "summary": n => { searchHit.summary = n.getStringValue(); },
    }
}
export interface SearchHit extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name of the content source that the externalItem is part of.
     */
    contentSource?: string;
    /**
     * The internal identifier for the item. The format of the identifier varies based on the entity type. For details, see hitId format.
     */
    hitId?: string;
    /**
     * Indicates whether the current result is collapsed when the collapseProperties property in the searchRequest is used.
     */
    isCollapsed?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The rank or the order of the result.
     */
    rank?: number;
    /**
     * The resource property
     */
    resource?: Entity;
    /**
     * ID of the result template used to render the search result. This ID must map to a display layout in the resultTemplates dictionary that is also included in the searchResponse.
     */
    resultTemplateId?: string;
    /**
     * A summary of the result, if a summary is available.
     */
    summary?: string;
}
export function serializeSearchHit(writer: SerializationWriter, searchHit: SearchHit | undefined = {} as SearchHit) : void {
        writer.writeStringValue("contentSource", searchHit.contentSource);
        writer.writeStringValue("hitId", searchHit.hitId);
        writer.writeBooleanValue("isCollapsed", searchHit.isCollapsed);
        writer.writeStringValue("@odata.type", searchHit.odataType);
        writer.writeNumberValue("rank", searchHit.rank);
        writer.writeObjectValue<Entity>("resource", searchHit.resource, );
        writer.writeStringValue("resultTemplateId", searchHit.resultTemplateId);
        writer.writeStringValue("summary", searchHit.summary);
        writer.writeAdditionalData(searchHit.additionalData);
}
// tslint:enable
// eslint-enable
