// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createFileHashFromDiscriminatorValue, serializeFileHash, type FileHash } from './fileHash';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFileSecurityStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFileSecurityState;
}
export function deserializeIntoFileSecurityState(fileSecurityState: FileSecurityState | undefined = {} as FileSecurityState) : Record<string, (node: ParseNode) => void> {
    return {
        "fileHash": n => { fileSecurityState.fileHash = n.getObjectValue<FileHash>(createFileHashFromDiscriminatorValue); },
        "name": n => { fileSecurityState.name = n.getStringValue(); },
        "@odata.type": n => { fileSecurityState.odataType = n.getStringValue(); },
        "path": n => { fileSecurityState.path = n.getStringValue(); },
        "riskScore": n => { fileSecurityState.riskScore = n.getStringValue(); },
    }
}
export interface FileSecurityState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Complex type containing file hashes (cryptographic and location-sensitive).
     */
    fileHash?: FileHash;
    /**
     * File name (without path).
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Full file path of the file/imageFile.
     */
    path?: string;
    /**
     * Provider generated/calculated risk score of the alert file. Recommended value range of 0-1, which equates to a percentage.
     */
    riskScore?: string;
}
export function serializeFileSecurityState(writer: SerializationWriter, fileSecurityState: FileSecurityState | undefined = {} as FileSecurityState) : void {
        writer.writeObjectValue<FileHash>("fileHash", fileSecurityState.fileHash, serializeFileHash);
        writer.writeStringValue("name", fileSecurityState.name);
        writer.writeStringValue("@odata.type", fileSecurityState.odataType);
        writer.writeStringValue("path", fileSecurityState.path);
        writer.writeStringValue("riskScore", fileSecurityState.riskScore);
        writer.writeAdditionalData(fileSecurityState.additionalData);
}
// tslint:enable
// eslint-enable
