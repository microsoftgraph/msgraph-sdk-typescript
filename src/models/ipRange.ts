// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type IPv4CidrRange, type IPv4Range, type IPv6CidrRange, type IPv6Range } from './index';
import { deserializeIntoIPv4CidrRange } from './iPv4CidrRange';
import { deserializeIntoIPv4Range } from './iPv4Range';
import { deserializeIntoIPv6CidrRange } from './iPv6CidrRange';
import { deserializeIntoIPv6Range } from './iPv6Range';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIpRangeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.iPv4CidrRange":
                    return deserializeIntoIPv4CidrRange;
                case "#microsoft.graph.iPv4Range":
                    return deserializeIntoIPv4Range;
                case "#microsoft.graph.iPv6CidrRange":
                    return deserializeIntoIPv6CidrRange;
                case "#microsoft.graph.iPv6Range":
                    return deserializeIntoIPv6Range;
            }
        }
    }
    return deserializeIntoIpRange;
}
export function deserializeIntoIpRange(ipRange: IpRange | undefined = {} as IpRange) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { ipRange.odataType = n.getStringValue(); },
    }
}
export interface IpRange extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeIpRange(writer: SerializationWriter, ipRange: IpRange | undefined = {} as IpRange) : void {
        writer.writeStringValue("@odata.type", ipRange.odataType);
        writer.writeAdditionalData(ipRange.additionalData);
}
// tslint:enable
// eslint-enable
