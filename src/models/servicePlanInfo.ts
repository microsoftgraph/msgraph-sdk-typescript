// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export function createServicePlanInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoServicePlanInfo;
}
export function deserializeIntoServicePlanInfo(servicePlanInfo: ServicePlanInfo | undefined = {} as ServicePlanInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "appliesTo": n => { servicePlanInfo.appliesTo = n.getStringValue(); },
        "@odata.type": n => { servicePlanInfo.odataType = n.getStringValue(); },
        "provisioningStatus": n => { servicePlanInfo.provisioningStatus = n.getStringValue(); },
        "servicePlanId": n => { servicePlanInfo.servicePlanId = n.getGuidValue(); },
        "servicePlanName": n => { servicePlanInfo.servicePlanName = n.getStringValue(); },
    }
}
export function serializeServicePlanInfo(writer: SerializationWriter, servicePlanInfo: ServicePlanInfo | undefined = {} as ServicePlanInfo) : void {
        writer.writeStringValue("appliesTo", servicePlanInfo.appliesTo);
        writer.writeStringValue("@odata.type", servicePlanInfo.odataType);
        writer.writeStringValue("provisioningStatus", servicePlanInfo.provisioningStatus);
        writer.writeGuidValue("servicePlanId", servicePlanInfo.servicePlanId);
        writer.writeStringValue("servicePlanName", servicePlanInfo.servicePlanName);
        writer.writeAdditionalData(servicePlanInfo.additionalData);
}
export interface ServicePlanInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The object the service plan can be assigned to. The possible values are:User - service plan can be assigned to individual users.Company - service plan can be assigned to the entire tenant.
     */
    appliesTo?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The provisioning status of the service plan. The possible values are:Success - Service is fully provisioned.Disabled - Service is disabled.Error - The service plan isn't provisioned and is in an error state.PendingInput - The service isn't provisioned and is awaiting service confirmation.PendingActivation - The service is provisioned but requires explicit activation by an administrator (for example, Intune_O365 service plan)PendingProvisioning - Microsoft has added a new service to the product SKU and it isn't activated in the tenant.
     */
    provisioningStatus?: string;
    /**
     * The unique identifier of the service plan.
     */
    servicePlanId?: Guid;
    /**
     * The name of the service plan.
     */
    servicePlanName?: string;
}
// tslint:enable
// eslint-enable
