// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { BookingType } from './bookingType';
import { deserializeIntoPlace, serializePlace, type Place } from './place';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRoomFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRoom;
}
export function deserializeIntoRoom(room: Room | undefined = {} as Room) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPlace(room),
        "audioDeviceName": n => { room.audioDeviceName = n.getStringValue(); },
        "bookingType": n => { room.bookingType = n.getEnumValue<BookingType>(BookingType); },
        "building": n => { room.building = n.getStringValue(); },
        "capacity": n => { room.capacity = n.getNumberValue(); },
        "displayDeviceName": n => { room.displayDeviceName = n.getStringValue(); },
        "emailAddress": n => { room.emailAddress = n.getStringValue(); },
        "floorLabel": n => { room.floorLabel = n.getStringValue(); },
        "floorNumber": n => { room.floorNumber = n.getNumberValue(); },
        "isWheelChairAccessible": n => { room.isWheelChairAccessible = n.getBooleanValue(); },
        "label": n => { room.label = n.getStringValue(); },
        "nickname": n => { room.nickname = n.getStringValue(); },
        "tags": n => { room.tags = n.getCollectionOfPrimitiveValues<string>(); },
        "videoDeviceName": n => { room.videoDeviceName = n.getStringValue(); },
    }
}
export interface Room extends Parsable, Place {
    /**
     * Specifies the name of the audio device in the room.
     */
    audioDeviceName?: string;
    /**
     * Type of room. Possible values are standard, and reserved.
     */
    bookingType?: BookingType;
    /**
     * Specifies the building name or building number that the room is in.
     */
    building?: string;
    /**
     * Specifies the capacity of the room.
     */
    capacity?: number;
    /**
     * Specifies the name of the display device in the room.
     */
    displayDeviceName?: string;
    /**
     * Email address of the room.
     */
    emailAddress?: string;
    /**
     * Specifies a descriptive label for the floor, for example, P.
     */
    floorLabel?: string;
    /**
     * Specifies the floor number that the room is on.
     */
    floorNumber?: number;
    /**
     * Specifies whether the room is wheelchair accessible.
     */
    isWheelChairAccessible?: boolean;
    /**
     * Specifies a descriptive label for the room, for example, a number or name.
     */
    label?: string;
    /**
     * Specifies a nickname for the room, for example, 'conf room'.
     */
    nickname?: string;
    /**
     * Specifies additional features of the room, for example, details like the type of view or furniture type.
     */
    tags?: string[];
    /**
     * Specifies the name of the video device in the room.
     */
    videoDeviceName?: string;
}
export function serializeRoom(writer: SerializationWriter, room: Room | undefined = {} as Room) : void {
    serializePlace(writer, room)
    writer.writeStringValue("audioDeviceName", room.audioDeviceName);
    writer.writeEnumValue<BookingType>("bookingType", room.bookingType);
    writer.writeStringValue("building", room.building);
    writer.writeNumberValue("capacity", room.capacity);
    writer.writeStringValue("displayDeviceName", room.displayDeviceName);
    writer.writeStringValue("emailAddress", room.emailAddress);
    writer.writeStringValue("floorLabel", room.floorLabel);
    writer.writeNumberValue("floorNumber", room.floorNumber);
    writer.writeBooleanValue("isWheelChairAccessible", room.isWheelChairAccessible);
    writer.writeStringValue("label", room.label);
    writer.writeStringValue("nickname", room.nickname);
    writer.writeCollectionOfPrimitiveValues<string>("tags", room.tags);
    writer.writeStringValue("videoDeviceName", room.videoDeviceName);
}
// tslint:enable
// eslint-enable
