// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AssignmentType } from './assignmentType';
import { createDateTimeTimeZoneFromDiscriminatorValue, serializeDateTimeTimeZone, type DateTimeTimeZone } from './dateTimeTimeZone';
import { createItemBodyFromDiscriminatorValue, serializeItemBody, type ItemBody } from './itemBody';
import { deserializeIntoLearningCourseActivity, serializeLearningCourseActivity, type LearningCourseActivity } from './learningCourseActivity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLearningAssignmentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLearningAssignment;
}
export function deserializeIntoLearningAssignment(learningAssignment: LearningAssignment | undefined = {} as LearningAssignment) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoLearningCourseActivity(learningAssignment),
        "assignedDateTime": n => { learningAssignment.assignedDateTime = n.getDateValue(); },
        "assignerUserId": n => { learningAssignment.assignerUserId = n.getStringValue(); },
        "assignmentType": n => { learningAssignment.assignmentType = n.getEnumValue<AssignmentType>(AssignmentType); },
        "dueDateTime": n => { learningAssignment.dueDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "notes": n => { learningAssignment.notes = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
    }
}
export interface LearningAssignment extends LearningCourseActivity, Parsable {
    /**
     * Assigned date for the course activity. Optional.
     */
    assignedDateTime?: Date;
    /**
     * The user ID of the assigner. Optional.
     */
    assignerUserId?: string;
    /**
     * The assignmentType property
     */
    assignmentType?: AssignmentType;
    /**
     * Due date for the course activity. Optional.
     */
    dueDateTime?: DateTimeTimeZone;
    /**
     * Notes for the course activity. Optional.
     */
    notes?: ItemBody;
}
export function serializeLearningAssignment(writer: SerializationWriter, learningAssignment: LearningAssignment | undefined = {} as LearningAssignment) : void {
        serializeLearningCourseActivity(writer, learningAssignment)
        writer.writeDateValue("assignedDateTime", learningAssignment.assignedDateTime);
        writer.writeStringValue("assignerUserId", learningAssignment.assignerUserId);
        writer.writeEnumValue<AssignmentType>("assignmentType", learningAssignment.assignmentType);
        writer.writeObjectValue<DateTimeTimeZone>("dueDateTime", learningAssignment.dueDateTime, serializeDateTimeTimeZone);
        writer.writeObjectValue<ItemBody>("notes", learningAssignment.notes, serializeItemBody);
}
// tslint:enable
// eslint-enable
