// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAuthenticationMethodConfiguration, serializeAuthenticationMethodConfiguration, type AuthenticationMethodConfiguration } from './authenticationMethodConfiguration';
import { createMicrosoftAuthenticatorAuthenticationMethodTargetFromDiscriminatorValue, serializeMicrosoftAuthenticatorAuthenticationMethodTarget, type MicrosoftAuthenticatorAuthenticationMethodTarget } from './microsoftAuthenticatorAuthenticationMethodTarget';
import { createMicrosoftAuthenticatorFeatureSettingsFromDiscriminatorValue, serializeMicrosoftAuthenticatorFeatureSettings, type MicrosoftAuthenticatorFeatureSettings } from './microsoftAuthenticatorFeatureSettings';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMicrosoftAuthenticatorAuthenticationMethodConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMicrosoftAuthenticatorAuthenticationMethodConfiguration;
}
export function deserializeIntoMicrosoftAuthenticatorAuthenticationMethodConfiguration(microsoftAuthenticatorAuthenticationMethodConfiguration: MicrosoftAuthenticatorAuthenticationMethodConfiguration | undefined = {} as MicrosoftAuthenticatorAuthenticationMethodConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuthenticationMethodConfiguration(microsoftAuthenticatorAuthenticationMethodConfiguration),
        "featureSettings": n => { microsoftAuthenticatorAuthenticationMethodConfiguration.featureSettings = n.getObjectValue<MicrosoftAuthenticatorFeatureSettings>(createMicrosoftAuthenticatorFeatureSettingsFromDiscriminatorValue); },
        "includeTargets": n => { microsoftAuthenticatorAuthenticationMethodConfiguration.includeTargets = n.getCollectionOfObjectValues<MicrosoftAuthenticatorAuthenticationMethodTarget>(createMicrosoftAuthenticatorAuthenticationMethodTargetFromDiscriminatorValue); },
        "isSoftwareOathEnabled": n => { microsoftAuthenticatorAuthenticationMethodConfiguration.isSoftwareOathEnabled = n.getBooleanValue(); },
    }
}
export interface MicrosoftAuthenticatorAuthenticationMethodConfiguration extends AuthenticationMethodConfiguration, Parsable {
    /**
     * A collection of Microsoft Authenticator settings such as application context and location context, and whether they are enabled for all users or specific users only.
     */
    featureSettings?: MicrosoftAuthenticatorFeatureSettings;
    /**
     * A collection of groups that are enabled to use the authentication method. Expanded by default.
     */
    includeTargets?: MicrosoftAuthenticatorAuthenticationMethodTarget[];
    /**
     * The isSoftwareOathEnabled property
     */
    isSoftwareOathEnabled?: boolean;
}
export function serializeMicrosoftAuthenticatorAuthenticationMethodConfiguration(writer: SerializationWriter, microsoftAuthenticatorAuthenticationMethodConfiguration: MicrosoftAuthenticatorAuthenticationMethodConfiguration | undefined = {} as MicrosoftAuthenticatorAuthenticationMethodConfiguration) : void {
        serializeAuthenticationMethodConfiguration(writer, microsoftAuthenticatorAuthenticationMethodConfiguration)
        writer.writeObjectValue<MicrosoftAuthenticatorFeatureSettings>("featureSettings", microsoftAuthenticatorAuthenticationMethodConfiguration.featureSettings, serializeMicrosoftAuthenticatorFeatureSettings);
        writer.writeCollectionOfObjectValues<MicrosoftAuthenticatorAuthenticationMethodTarget>("includeTargets", microsoftAuthenticatorAuthenticationMethodConfiguration.includeTargets, serializeMicrosoftAuthenticatorAuthenticationMethodTarget);
        writer.writeBooleanValue("isSoftwareOathEnabled", microsoftAuthenticatorAuthenticationMethodConfiguration.isSoftwareOathEnabled);
}
// tslint:enable
// eslint-enable
