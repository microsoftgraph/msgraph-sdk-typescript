// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttributeMappingSourceFromDiscriminatorValue, serializeAttributeMappingSource, type AttributeMappingSource } from './attributeMappingSource';
import { createPublicErrorFromDiscriminatorValue, serializePublicError, type PublicError } from './publicError';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createParseExpressionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoParseExpressionResponse;
}
export function deserializeIntoParseExpressionResponse(parseExpressionResponse: ParseExpressionResponse | undefined = {} as ParseExpressionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { parseExpressionResponse.errorEscaped = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
        "evaluationResult": n => { parseExpressionResponse.evaluationResult = n.getCollectionOfPrimitiveValues<string>(); },
        "evaluationSucceeded": n => { parseExpressionResponse.evaluationSucceeded = n.getBooleanValue(); },
        "@odata.type": n => { parseExpressionResponse.odataType = n.getStringValue(); },
        "parsedExpression": n => { parseExpressionResponse.parsedExpression = n.getObjectValue<AttributeMappingSource>(createAttributeMappingSourceFromDiscriminatorValue); },
        "parsingSucceeded": n => { parseExpressionResponse.parsingSucceeded = n.getBooleanValue(); },
    }
}
export interface ParseExpressionResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Error details, if expression evaluation resulted in an error.
     */
    errorEscaped?: PublicError;
    /**
     * A collection of values produced by the evaluation of the expression.
     */
    evaluationResult?: string[];
    /**
     * true if the evaluation was successful.
     */
    evaluationSucceeded?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * An attributeMappingSource object representing the parsed expression.
     */
    parsedExpression?: AttributeMappingSource;
    /**
     * true if the expression was parsed successfully.
     */
    parsingSucceeded?: boolean;
}
export function serializeParseExpressionResponse(writer: SerializationWriter, parseExpressionResponse: ParseExpressionResponse | undefined = {} as ParseExpressionResponse) : void {
        writer.writeObjectValue<PublicError>("error", parseExpressionResponse.errorEscaped, );
        writer.writeCollectionOfPrimitiveValues<string>("evaluationResult", parseExpressionResponse.evaluationResult);
        writer.writeBooleanValue("evaluationSucceeded", parseExpressionResponse.evaluationSucceeded);
        writer.writeStringValue("@odata.type", parseExpressionResponse.odataType);
        writer.writeObjectValue<AttributeMappingSource>("parsedExpression", parseExpressionResponse.parsedExpression, );
        writer.writeBooleanValue("parsingSucceeded", parseExpressionResponse.parsingSucceeded);
        writer.writeAdditionalData(parseExpressionResponse.additionalData);
}
// tslint:enable
// eslint-enable
