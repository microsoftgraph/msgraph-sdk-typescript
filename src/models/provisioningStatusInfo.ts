// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createProvisioningErrorInfoFromDiscriminatorValue, serializeProvisioningErrorInfo, type ProvisioningErrorInfo } from './provisioningErrorInfo';
import { ProvisioningResult } from './provisioningResult';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createProvisioningStatusInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoProvisioningStatusInfo;
}
export function deserializeIntoProvisioningStatusInfo(provisioningStatusInfo: ProvisioningStatusInfo | undefined = {} as ProvisioningStatusInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "errorInformation": n => { provisioningStatusInfo.errorInformation = n.getObjectValue<ProvisioningErrorInfo>(createProvisioningErrorInfoFromDiscriminatorValue); },
        "@odata.type": n => { provisioningStatusInfo.odataType = n.getStringValue(); },
        "status": n => { provisioningStatusInfo.status = n.getEnumValue<ProvisioningResult>(ProvisioningResult); },
    }
}
export interface ProvisioningStatusInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * If status isn't success/ skipped details for the error are contained in this.
     */
    errorInformation?: ProvisioningErrorInfo;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Possible values are: success, warning, failure, skipped, unknownFutureValue.
     */
    status?: ProvisioningResult;
}
export function serializeProvisioningStatusInfo(writer: SerializationWriter, provisioningStatusInfo: ProvisioningStatusInfo | undefined = {} as ProvisioningStatusInfo) : void {
    writer.writeObjectValue<ProvisioningErrorInfo>("errorInformation", provisioningStatusInfo.errorInformation, serializeProvisioningErrorInfo);
    writer.writeStringValue("@odata.type", provisioningStatusInfo.odataType);
    writer.writeEnumValue<ProvisioningResult>("status", provisioningStatusInfo.status);
    writer.writeAdditionalData(provisioningStatusInfo.additionalData);
}
// tslint:enable
// eslint-enable
