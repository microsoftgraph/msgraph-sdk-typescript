// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type PrintUsageByPrinter, type PrintUsageByUser } from './index';
import { deserializeIntoPrintUsageByPrinter } from './printUsageByPrinter';
import { deserializeIntoPrintUsageByUser } from './printUsageByUser';
import { type DateOnly, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrintUsageFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.printUsageByPrinter":
                    return deserializeIntoPrintUsageByPrinter;
                case "#microsoft.graph.printUsageByUser":
                    return deserializeIntoPrintUsageByUser;
            }
        }
    }
    return deserializeIntoPrintUsage;
}
export function deserializeIntoPrintUsage(printUsage: PrintUsage | undefined = {} as PrintUsage) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(printUsage),
        "blackAndWhitePageCount": n => { printUsage.blackAndWhitePageCount = n.getNumberValue(); },
        "colorPageCount": n => { printUsage.colorPageCount = n.getNumberValue(); },
        "completedBlackAndWhiteJobCount": n => { printUsage.completedBlackAndWhiteJobCount = n.getNumberValue(); },
        "completedColorJobCount": n => { printUsage.completedColorJobCount = n.getNumberValue(); },
        "completedJobCount": n => { printUsage.completedJobCount = n.getNumberValue(); },
        "doubleSidedSheetCount": n => { printUsage.doubleSidedSheetCount = n.getNumberValue(); },
        "incompleteJobCount": n => { printUsage.incompleteJobCount = n.getNumberValue(); },
        "mediaSheetCount": n => { printUsage.mediaSheetCount = n.getNumberValue(); },
        "pageCount": n => { printUsage.pageCount = n.getNumberValue(); },
        "singleSidedSheetCount": n => { printUsage.singleSidedSheetCount = n.getNumberValue(); },
        "usageDate": n => { printUsage.usageDate = n.getDateOnlyValue(); },
    }
}
export interface PrintUsage extends Entity, Parsable {
    /**
     * The blackAndWhitePageCount property
     */
    blackAndWhitePageCount?: number;
    /**
     * The colorPageCount property
     */
    colorPageCount?: number;
    /**
     * The completedBlackAndWhiteJobCount property
     */
    completedBlackAndWhiteJobCount?: number;
    /**
     * The completedColorJobCount property
     */
    completedColorJobCount?: number;
    /**
     * The completedJobCount property
     */
    completedJobCount?: number;
    /**
     * The doubleSidedSheetCount property
     */
    doubleSidedSheetCount?: number;
    /**
     * The incompleteJobCount property
     */
    incompleteJobCount?: number;
    /**
     * The mediaSheetCount property
     */
    mediaSheetCount?: number;
    /**
     * The pageCount property
     */
    pageCount?: number;
    /**
     * The singleSidedSheetCount property
     */
    singleSidedSheetCount?: number;
    /**
     * The usageDate property
     */
    usageDate?: DateOnly;
}
export function serializePrintUsage(writer: SerializationWriter, printUsage: PrintUsage | undefined = {} as PrintUsage) : void {
        serializeEntity(writer, printUsage)
        writer.writeNumberValue("blackAndWhitePageCount", printUsage.blackAndWhitePageCount);
        writer.writeNumberValue("colorPageCount", printUsage.colorPageCount);
        writer.writeNumberValue("completedBlackAndWhiteJobCount", printUsage.completedBlackAndWhiteJobCount);
        writer.writeNumberValue("completedColorJobCount", printUsage.completedColorJobCount);
        writer.writeNumberValue("completedJobCount", printUsage.completedJobCount);
        writer.writeNumberValue("doubleSidedSheetCount", printUsage.doubleSidedSheetCount);
        writer.writeNumberValue("incompleteJobCount", printUsage.incompleteJobCount);
        writer.writeNumberValue("mediaSheetCount", printUsage.mediaSheetCount);
        writer.writeNumberValue("pageCount", printUsage.pageCount);
        writer.writeNumberValue("singleSidedSheetCount", printUsage.singleSidedSheetCount);
        writer.writeDateOnlyValue("usageDate", printUsage.usageDate);
}
// tslint:enable
// eslint-enable
