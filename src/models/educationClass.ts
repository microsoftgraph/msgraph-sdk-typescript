// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEducationAssignmentFromDiscriminatorValue, serializeEducationAssignment, type EducationAssignment } from './educationAssignment';
import { createEducationAssignmentDefaultsFromDiscriminatorValue, serializeEducationAssignmentDefaults, type EducationAssignmentDefaults } from './educationAssignmentDefaults';
import { createEducationAssignmentSettingsFromDiscriminatorValue, serializeEducationAssignmentSettings, type EducationAssignmentSettings } from './educationAssignmentSettings';
import { createEducationCategoryFromDiscriminatorValue, serializeEducationCategory, type EducationCategory } from './educationCategory';
import { createEducationCourseFromDiscriminatorValue, serializeEducationCourse, type EducationCourse } from './educationCourse';
import { EducationExternalSource } from './educationExternalSource';
import { createEducationSchoolFromDiscriminatorValue, serializeEducationSchool, type EducationSchool } from './educationSchool';
import { createEducationTermFromDiscriminatorValue, serializeEducationTerm, type EducationTerm } from './educationTerm';
import { createEducationUserFromDiscriminatorValue, serializeEducationUser, type EducationUser } from './educationUser';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from './group';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEducationClassFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEducationClass;
}
export function deserializeIntoEducationClass(educationClass: EducationClass | undefined = {} as EducationClass) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(educationClass),
        "assignmentCategories": n => { educationClass.assignmentCategories = n.getCollectionOfObjectValues<EducationCategory>(createEducationCategoryFromDiscriminatorValue); },
        "assignmentDefaults": n => { educationClass.assignmentDefaults = n.getObjectValue<EducationAssignmentDefaults>(createEducationAssignmentDefaultsFromDiscriminatorValue); },
        "assignments": n => { educationClass.assignments = n.getCollectionOfObjectValues<EducationAssignment>(createEducationAssignmentFromDiscriminatorValue); },
        "assignmentSettings": n => { educationClass.assignmentSettings = n.getObjectValue<EducationAssignmentSettings>(createEducationAssignmentSettingsFromDiscriminatorValue); },
        "classCode": n => { educationClass.classCode = n.getStringValue(); },
        "course": n => { educationClass.course = n.getObjectValue<EducationCourse>(createEducationCourseFromDiscriminatorValue); },
        "createdBy": n => { educationClass.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "description": n => { educationClass.description = n.getStringValue(); },
        "displayName": n => { educationClass.displayName = n.getStringValue(); },
        "externalId": n => { educationClass.externalId = n.getStringValue(); },
        "externalName": n => { educationClass.externalName = n.getStringValue(); },
        "externalSource": n => { educationClass.externalSource = n.getEnumValue<EducationExternalSource>(EducationExternalSource); },
        "externalSourceDetail": n => { educationClass.externalSourceDetail = n.getStringValue(); },
        "grade": n => { educationClass.grade = n.getStringValue(); },
        "group": n => { educationClass.group = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "mailNickname": n => { educationClass.mailNickname = n.getStringValue(); },
        "members": n => { educationClass.members = n.getCollectionOfObjectValues<EducationUser>(createEducationUserFromDiscriminatorValue); },
        "schools": n => { educationClass.schools = n.getCollectionOfObjectValues<EducationSchool>(createEducationSchoolFromDiscriminatorValue); },
        "teachers": n => { educationClass.teachers = n.getCollectionOfObjectValues<EducationUser>(createEducationUserFromDiscriminatorValue); },
        "term": n => { educationClass.term = n.getObjectValue<EducationTerm>(createEducationTermFromDiscriminatorValue); },
    }
}
export interface EducationClass extends Entity, Parsable {
    /**
     * All categories associated with this class. Nullable.
     */
    assignmentCategories?: EducationCategory[];
    /**
     * Specifies class-level defaults respected by new assignments created in the class.
     */
    assignmentDefaults?: EducationAssignmentDefaults;
    /**
     * All assignments associated with this class. Nullable.
     */
    assignments?: EducationAssignment[];
    /**
     * Specifies class-level assignments settings.
     */
    assignmentSettings?: EducationAssignmentSettings;
    /**
     * Class code used by the school to identify the class.
     */
    classCode?: string;
    /**
     * The course property
     */
    course?: EducationCourse;
    /**
     * Entity who created the class
     */
    createdBy?: IdentitySet;
    /**
     * Description of the class.
     */
    description?: string;
    /**
     * Name of the class.
     */
    displayName?: string;
    /**
     * ID of the class from the syncing system.
     */
    externalId?: string;
    /**
     * Name of the class in the syncing system.
     */
    externalName?: string;
    /**
     * How this class was created. Possible values are: sis, manual.
     */
    externalSource?: EducationExternalSource;
    /**
     * The name of the external source this resources was generated from.
     */
    externalSourceDetail?: string;
    /**
     * Grade level of the class.
     */
    grade?: string;
    /**
     * The underlying Microsoft 365 group object.
     */
    group?: Group;
    /**
     * Mail name for sending email to all members, if this is enabled.
     */
    mailNickname?: string;
    /**
     * All users in the class. Nullable.
     */
    members?: EducationUser[];
    /**
     * All schools that this class is associated with. Nullable.
     */
    schools?: EducationSchool[];
    /**
     * All teachers in the class. Nullable.
     */
    teachers?: EducationUser[];
    /**
     * Term for this class.
     */
    term?: EducationTerm;
}
export function serializeEducationClass(writer: SerializationWriter, educationClass: EducationClass | undefined = {} as EducationClass) : void {
    serializeEntity(writer, educationClass)
    writer.writeCollectionOfObjectValues<EducationCategory>("assignmentCategories", educationClass.assignmentCategories, serializeEducationCategory);
    writer.writeObjectValue<EducationAssignmentDefaults>("assignmentDefaults", educationClass.assignmentDefaults, serializeEducationAssignmentDefaults);
    writer.writeCollectionOfObjectValues<EducationAssignment>("assignments", educationClass.assignments, serializeEducationAssignment);
    writer.writeObjectValue<EducationAssignmentSettings>("assignmentSettings", educationClass.assignmentSettings, serializeEducationAssignmentSettings);
    writer.writeStringValue("classCode", educationClass.classCode);
    writer.writeObjectValue<EducationCourse>("course", educationClass.course, serializeEducationCourse);
    writer.writeObjectValue<IdentitySet>("createdBy", educationClass.createdBy, serializeIdentitySet);
    writer.writeStringValue("description", educationClass.description);
    writer.writeStringValue("displayName", educationClass.displayName);
    writer.writeStringValue("externalId", educationClass.externalId);
    writer.writeStringValue("externalName", educationClass.externalName);
    writer.writeEnumValue<EducationExternalSource>("externalSource", educationClass.externalSource);
    writer.writeStringValue("externalSourceDetail", educationClass.externalSourceDetail);
    writer.writeStringValue("grade", educationClass.grade);
    writer.writeObjectValue<Group>("group", educationClass.group, serializeGroup);
    writer.writeStringValue("mailNickname", educationClass.mailNickname);
    writer.writeCollectionOfObjectValues<EducationUser>("members", educationClass.members, serializeEducationUser);
    writer.writeCollectionOfObjectValues<EducationSchool>("schools", educationClass.schools, serializeEducationSchool);
    writer.writeCollectionOfObjectValues<EducationUser>("teachers", educationClass.teachers, serializeEducationUser);
    writer.writeObjectValue<EducationTerm>("term", educationClass.term, serializeEducationTerm);
}
// tslint:enable
// eslint-enable
