// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ComplianceStatus } from './complianceStatus';
import { createSettingSourceFromDiscriminatorValue, serializeSettingSource, type SettingSource } from './settingSource';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceConfigurationSettingStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceConfigurationSettingState;
}
export function deserializeIntoDeviceConfigurationSettingState(deviceConfigurationSettingState: DeviceConfigurationSettingState | undefined = {} as DeviceConfigurationSettingState) : Record<string, (node: ParseNode) => void> {
    return {
        "currentValue": n => { deviceConfigurationSettingState.currentValue = n.getStringValue(); },
        "errorCode": n => { deviceConfigurationSettingState.errorCode = n.getNumberValue(); },
        "errorDescription": n => { deviceConfigurationSettingState.errorDescription = n.getStringValue(); },
        "instanceDisplayName": n => { deviceConfigurationSettingState.instanceDisplayName = n.getStringValue(); },
        "@odata.type": n => { deviceConfigurationSettingState.odataType = n.getStringValue(); },
        "setting": n => { deviceConfigurationSettingState.setting = n.getStringValue(); },
        "settingName": n => { deviceConfigurationSettingState.settingName = n.getStringValue(); },
        "sources": n => { deviceConfigurationSettingState.sources = n.getCollectionOfObjectValues<SettingSource>(createSettingSourceFromDiscriminatorValue); },
        "state": n => { deviceConfigurationSettingState.state = n.getEnumValue<ComplianceStatus>(ComplianceStatus); },
        "userEmail": n => { deviceConfigurationSettingState.userEmail = n.getStringValue(); },
        "userId": n => { deviceConfigurationSettingState.userId = n.getStringValue(); },
        "userName": n => { deviceConfigurationSettingState.userName = n.getStringValue(); },
        "userPrincipalName": n => { deviceConfigurationSettingState.userPrincipalName = n.getStringValue(); },
    }
}
export interface DeviceConfigurationSettingState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Current value of setting on device
     */
    currentValue?: string;
    /**
     * Error code for the setting
     */
    errorCode?: number;
    /**
     * Error description
     */
    errorDescription?: string;
    /**
     * Name of setting instance that is being reported.
     */
    instanceDisplayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The setting that is being reported
     */
    setting?: string;
    /**
     * Localized/user friendly setting name that is being reported
     */
    settingName?: string;
    /**
     * Contributing policies
     */
    sources?: SettingSource[];
    /**
     * The state property
     */
    state?: ComplianceStatus;
    /**
     * UserEmail
     */
    userEmail?: string;
    /**
     * UserId
     */
    userId?: string;
    /**
     * UserName
     */
    userName?: string;
    /**
     * UserPrincipalName.
     */
    userPrincipalName?: string;
}
export function serializeDeviceConfigurationSettingState(writer: SerializationWriter, deviceConfigurationSettingState: DeviceConfigurationSettingState | undefined = {} as DeviceConfigurationSettingState) : void {
        writer.writeStringValue("currentValue", deviceConfigurationSettingState.currentValue);
        writer.writeNumberValue("errorCode", deviceConfigurationSettingState.errorCode);
        writer.writeStringValue("errorDescription", deviceConfigurationSettingState.errorDescription);
        writer.writeStringValue("instanceDisplayName", deviceConfigurationSettingState.instanceDisplayName);
        writer.writeStringValue("@odata.type", deviceConfigurationSettingState.odataType);
        writer.writeStringValue("setting", deviceConfigurationSettingState.setting);
        writer.writeStringValue("settingName", deviceConfigurationSettingState.settingName);
        writer.writeCollectionOfObjectValues<SettingSource>("sources", deviceConfigurationSettingState.sources, serializeSettingSource);
        writer.writeEnumValue<ComplianceStatus>("state", deviceConfigurationSettingState.state);
        writer.writeStringValue("userEmail", deviceConfigurationSettingState.userEmail);
        writer.writeStringValue("userId", deviceConfigurationSettingState.userId);
        writer.writeStringValue("userName", deviceConfigurationSettingState.userName);
        writer.writeStringValue("userPrincipalName", deviceConfigurationSettingState.userPrincipalName);
        writer.writeAdditionalData(deviceConfigurationSettingState.additionalData);
}
// tslint:enable
// eslint-enable
