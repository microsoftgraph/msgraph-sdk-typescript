// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ProvisioningStatusErrorCategory } from './provisioningStatusErrorCategory';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createProvisioningErrorInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoProvisioningErrorInfo;
}
export function deserializeIntoProvisioningErrorInfo(provisioningErrorInfo: ProvisioningErrorInfo | undefined = {} as ProvisioningErrorInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "additionalDetails": n => { provisioningErrorInfo.additionalDetails = n.getStringValue(); },
        "errorCategory": n => { provisioningErrorInfo.errorCategory = n.getEnumValue<ProvisioningStatusErrorCategory>(ProvisioningStatusErrorCategory); },
        "errorCode": n => { provisioningErrorInfo.errorCode = n.getStringValue(); },
        "@odata.type": n => { provisioningErrorInfo.odataType = n.getStringValue(); },
        "reason": n => { provisioningErrorInfo.reason = n.getStringValue(); },
        "recommendedAction": n => { provisioningErrorInfo.recommendedAction = n.getStringValue(); },
    }
}
export interface ProvisioningErrorInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Additional details if there's error.
     */
    additionalDetails?: string;
    /**
     * Categorizes the error code. Possible values are failure, nonServiceFailure, success, unknownFutureValue
     */
    errorCategory?: ProvisioningStatusErrorCategory;
    /**
     * Unique error code if any occurred. Learn more
     */
    errorCode?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Summarizes the status and describes why the status happened.
     */
    reason?: string;
    /**
     * Provides the resolution for the corresponding error.
     */
    recommendedAction?: string;
}
export function serializeProvisioningErrorInfo(writer: SerializationWriter, provisioningErrorInfo: ProvisioningErrorInfo | undefined = {} as ProvisioningErrorInfo) : void {
    writer.writeStringValue("additionalDetails", provisioningErrorInfo.additionalDetails);
    writer.writeEnumValue<ProvisioningStatusErrorCategory>("errorCategory", provisioningErrorInfo.errorCategory);
    writer.writeStringValue("errorCode", provisioningErrorInfo.errorCode);
    writer.writeStringValue("@odata.type", provisioningErrorInfo.odataType);
    writer.writeStringValue("reason", provisioningErrorInfo.reason);
    writer.writeStringValue("recommendedAction", provisioningErrorInfo.recommendedAction);
    writer.writeAdditionalData(provisioningErrorInfo.additionalData);
}
// tslint:enable
// eslint-enable
