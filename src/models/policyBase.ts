// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoActivityBasedTimeoutPolicy } from './activityBasedTimeoutPolicy';
import { deserializeIntoAppManagementPolicy } from './appManagementPolicy';
import { deserializeIntoAuthorizationPolicy } from './authorizationPolicy';
import { deserializeIntoClaimsMappingPolicy } from './claimsMappingPolicy';
import { deserializeIntoCrossTenantAccessPolicy } from './crossTenantAccessPolicy';
import { deserializeIntoDirectoryObject, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { deserializeIntoHomeRealmDiscoveryPolicy } from './homeRealmDiscoveryPolicy';
import { deserializeIntoIdentitySecurityDefaultsEnforcementPolicy } from './identitySecurityDefaultsEnforcementPolicy';
import { type ActivityBasedTimeoutPolicy, type AppManagementPolicy, type AuthorizationPolicy, type ClaimsMappingPolicy, type CrossTenantAccessPolicy, type HomeRealmDiscoveryPolicy, type IdentitySecurityDefaultsEnforcementPolicy, type PermissionGrantPolicy, type StsPolicy, type TenantAppManagementPolicy, type TokenIssuancePolicy, type TokenLifetimePolicy } from './index';
import { deserializeIntoPermissionGrantPolicy } from './permissionGrantPolicy';
import { deserializeIntoStsPolicy } from './stsPolicy';
import { deserializeIntoTenantAppManagementPolicy } from './tenantAppManagementPolicy';
import { deserializeIntoTokenIssuancePolicy } from './tokenIssuancePolicy';
import { deserializeIntoTokenLifetimePolicy } from './tokenLifetimePolicy';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPolicyBaseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.activityBasedTimeoutPolicy":
                    return deserializeIntoActivityBasedTimeoutPolicy;
                case "#microsoft.graph.appManagementPolicy":
                    return deserializeIntoAppManagementPolicy;
                case "#microsoft.graph.authorizationPolicy":
                    return deserializeIntoAuthorizationPolicy;
                case "#microsoft.graph.claimsMappingPolicy":
                    return deserializeIntoClaimsMappingPolicy;
                case "#microsoft.graph.crossTenantAccessPolicy":
                    return deserializeIntoCrossTenantAccessPolicy;
                case "#microsoft.graph.homeRealmDiscoveryPolicy":
                    return deserializeIntoHomeRealmDiscoveryPolicy;
                case "#microsoft.graph.identitySecurityDefaultsEnforcementPolicy":
                    return deserializeIntoIdentitySecurityDefaultsEnforcementPolicy;
                case "#microsoft.graph.permissionGrantPolicy":
                    return deserializeIntoPermissionGrantPolicy;
                case "#microsoft.graph.stsPolicy":
                    return deserializeIntoStsPolicy;
                case "#microsoft.graph.tenantAppManagementPolicy":
                    return deserializeIntoTenantAppManagementPolicy;
                case "#microsoft.graph.tokenIssuancePolicy":
                    return deserializeIntoTokenIssuancePolicy;
                case "#microsoft.graph.tokenLifetimePolicy":
                    return deserializeIntoTokenLifetimePolicy;
            }
        }
    }
    return deserializeIntoPolicyBase;
}
export function deserializeIntoPolicyBase(policyBase: PolicyBase | undefined = {} as PolicyBase) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDirectoryObject(policyBase),
        "description": n => { policyBase.description = n.getStringValue(); },
        "displayName": n => { policyBase.displayName = n.getStringValue(); },
    }
}
export interface PolicyBase extends DirectoryObject, Parsable {
    /**
     * Description for this policy. Required.
     */
    description?: string;
    /**
     * Display name for this policy. Required.
     */
    displayName?: string;
}
export function serializePolicyBase(writer: SerializationWriter, policyBase: PolicyBase | undefined = {} as PolicyBase) : void {
    serializeDirectoryObject(writer, policyBase)
    writer.writeStringValue("description", policyBase.description);
    writer.writeStringValue("displayName", policyBase.displayName);
}
// tslint:enable
// eslint-enable
