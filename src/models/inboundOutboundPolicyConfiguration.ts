// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createInboundOutboundPolicyConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoInboundOutboundPolicyConfiguration;
}
export function deserializeIntoInboundOutboundPolicyConfiguration(inboundOutboundPolicyConfiguration: InboundOutboundPolicyConfiguration | undefined = {} as InboundOutboundPolicyConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        "inboundAllowed": n => { inboundOutboundPolicyConfiguration.inboundAllowed = n.getBooleanValue(); },
        "@odata.type": n => { inboundOutboundPolicyConfiguration.odataType = n.getStringValue(); },
        "outboundAllowed": n => { inboundOutboundPolicyConfiguration.outboundAllowed = n.getBooleanValue(); },
    }
}
export interface InboundOutboundPolicyConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Defines whether external users coming inbound are allowed.
     */
    inboundAllowed?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Defines whether internal users are allowed to go outbound.
     */
    outboundAllowed?: boolean;
}
export function serializeInboundOutboundPolicyConfiguration(writer: SerializationWriter, inboundOutboundPolicyConfiguration: InboundOutboundPolicyConfiguration | undefined = {} as InboundOutboundPolicyConfiguration) : void {
    writer.writeBooleanValue("inboundAllowed", inboundOutboundPolicyConfiguration.inboundAllowed);
    writer.writeStringValue("@odata.type", inboundOutboundPolicyConfiguration.odataType);
    writer.writeBooleanValue("outboundAllowed", inboundOutboundPolicyConfiguration.outboundAllowed);
    writer.writeAdditionalData(inboundOutboundPolicyConfiguration.additionalData);
}
// tslint:enable
// eslint-enable
