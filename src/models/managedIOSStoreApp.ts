// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIosDeviceTypeFromDiscriminatorValue, serializeIosDeviceType, type IosDeviceType } from './iosDeviceType';
import { createIosMinimumOperatingSystemFromDiscriminatorValue, serializeIosMinimumOperatingSystem, type IosMinimumOperatingSystem } from './iosMinimumOperatingSystem';
import { deserializeIntoManagedApp, serializeManagedApp, type ManagedApp } from './managedApp';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createManagedIOSStoreAppFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoManagedIOSStoreApp;
}
export function deserializeIntoManagedIOSStoreApp(managedIOSStoreApp: ManagedIOSStoreApp | undefined = {} as ManagedIOSStoreApp) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoManagedApp(managedIOSStoreApp),
        "applicableDeviceType": n => { managedIOSStoreApp.applicableDeviceType = n.getObjectValue<IosDeviceType>(createIosDeviceTypeFromDiscriminatorValue); },
        "appStoreUrl": n => { managedIOSStoreApp.appStoreUrl = n.getStringValue(); },
        "bundleId": n => { managedIOSStoreApp.bundleId = n.getStringValue(); },
        "minimumSupportedOperatingSystem": n => { managedIOSStoreApp.minimumSupportedOperatingSystem = n.getObjectValue<IosMinimumOperatingSystem>(createIosMinimumOperatingSystemFromDiscriminatorValue); },
    }
}
export interface ManagedIOSStoreApp extends ManagedApp, Parsable {
    /**
     * Contains properties of the possible iOS device types the mobile app can run on.
     */
    applicableDeviceType?: IosDeviceType;
    /**
     * The Apple AppStoreUrl.
     */
    appStoreUrl?: string;
    /**
     * The app's Bundle ID.
     */
    bundleId?: string;
    /**
     * Contains properties of the minimum operating system required for an iOS mobile app.
     */
    minimumSupportedOperatingSystem?: IosMinimumOperatingSystem;
}
export function serializeManagedIOSStoreApp(writer: SerializationWriter, managedIOSStoreApp: ManagedIOSStoreApp | undefined = {} as ManagedIOSStoreApp) : void {
        serializeManagedApp(writer, managedIOSStoreApp)
        writer.writeObjectValue<IosDeviceType>("applicableDeviceType", managedIOSStoreApp.applicableDeviceType, serializeIosDeviceType);
        writer.writeStringValue("appStoreUrl", managedIOSStoreApp.appStoreUrl);
        writer.writeStringValue("bundleId", managedIOSStoreApp.bundleId);
        writer.writeObjectValue<IosMinimumOperatingSystem>("minimumSupportedOperatingSystem", managedIOSStoreApp.minimumSupportedOperatingSystem, serializeIosMinimumOperatingSystem);
}
// tslint:enable
// eslint-enable
