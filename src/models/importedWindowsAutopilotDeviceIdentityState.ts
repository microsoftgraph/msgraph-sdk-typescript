// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ImportedWindowsAutopilotDeviceIdentityImportStatus } from './importedWindowsAutopilotDeviceIdentityImportStatus';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createImportedWindowsAutopilotDeviceIdentityStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoImportedWindowsAutopilotDeviceIdentityState;
}
export function deserializeIntoImportedWindowsAutopilotDeviceIdentityState(importedWindowsAutopilotDeviceIdentityState: ImportedWindowsAutopilotDeviceIdentityState | undefined = {} as ImportedWindowsAutopilotDeviceIdentityState) : Record<string, (node: ParseNode) => void> {
    return {
        "deviceErrorCode": n => { importedWindowsAutopilotDeviceIdentityState.deviceErrorCode = n.getNumberValue(); },
        "deviceErrorName": n => { importedWindowsAutopilotDeviceIdentityState.deviceErrorName = n.getStringValue(); },
        "deviceImportStatus": n => { importedWindowsAutopilotDeviceIdentityState.deviceImportStatus = n.getEnumValue<ImportedWindowsAutopilotDeviceIdentityImportStatus>(ImportedWindowsAutopilotDeviceIdentityImportStatus); },
        "deviceRegistrationId": n => { importedWindowsAutopilotDeviceIdentityState.deviceRegistrationId = n.getStringValue(); },
        "@odata.type": n => { importedWindowsAutopilotDeviceIdentityState.odataType = n.getStringValue(); },
    }
}
export interface ImportedWindowsAutopilotDeviceIdentityState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Device error code reported by Device Directory Service(DDS).
     */
    deviceErrorCode?: number;
    /**
     * Device error name reported by Device Directory Service(DDS).
     */
    deviceErrorName?: string;
    /**
     * The deviceImportStatus property
     */
    deviceImportStatus?: ImportedWindowsAutopilotDeviceIdentityImportStatus;
    /**
     * Device Registration ID for successfully added device reported by Device Directory Service(DDS).
     */
    deviceRegistrationId?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeImportedWindowsAutopilotDeviceIdentityState(writer: SerializationWriter, importedWindowsAutopilotDeviceIdentityState: ImportedWindowsAutopilotDeviceIdentityState | undefined = {} as ImportedWindowsAutopilotDeviceIdentityState) : void {
        writer.writeNumberValue("deviceErrorCode", importedWindowsAutopilotDeviceIdentityState.deviceErrorCode);
        writer.writeStringValue("deviceErrorName", importedWindowsAutopilotDeviceIdentityState.deviceErrorName);
        writer.writeEnumValue<ImportedWindowsAutopilotDeviceIdentityImportStatus>("deviceImportStatus", importedWindowsAutopilotDeviceIdentityState.deviceImportStatus);
        writer.writeStringValue("deviceRegistrationId", importedWindowsAutopilotDeviceIdentityState.deviceRegistrationId);
        writer.writeStringValue("@odata.type", importedWindowsAutopilotDeviceIdentityState.odataType);
        writer.writeAdditionalData(importedWindowsAutopilotDeviceIdentityState.additionalData);
}
// tslint:enable
// eslint-enable
