// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createExpirationPatternFromDiscriminatorValue, serializeExpirationPattern, type ExpirationPattern } from './expirationPattern';
import { createPatternedRecurrenceFromDiscriminatorValue, serializePatternedRecurrence, type PatternedRecurrence } from './patternedRecurrence';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRequestScheduleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRequestSchedule;
}
export function deserializeIntoRequestSchedule(requestSchedule: RequestSchedule | undefined = {} as RequestSchedule) : Record<string, (node: ParseNode) => void> {
    return {
        "expiration": n => { requestSchedule.expiration = n.getObjectValue<ExpirationPattern>(createExpirationPatternFromDiscriminatorValue); },
        "@odata.type": n => { requestSchedule.odataType = n.getStringValue(); },
        "recurrence": n => { requestSchedule.recurrence = n.getObjectValue<PatternedRecurrence>(createPatternedRecurrenceFromDiscriminatorValue); },
        "startDateTime": n => { requestSchedule.startDateTime = n.getDateValue(); },
    }
}
export interface RequestSchedule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * When the eligible or active assignment expires.
     */
    expiration?: ExpirationPattern;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The frequency of the  eligible or active assignment. This property is currently unsupported in PIM.
     */
    recurrence?: PatternedRecurrence;
    /**
     * When the  eligible or active assignment becomes active.
     */
    startDateTime?: Date;
}
export function serializeRequestSchedule(writer: SerializationWriter, requestSchedule: RequestSchedule | undefined = {} as RequestSchedule) : void {
        writer.writeObjectValue<ExpirationPattern>("expiration", requestSchedule.expiration, serializeExpirationPattern);
        writer.writeStringValue("@odata.type", requestSchedule.odataType);
        writer.writeObjectValue<PatternedRecurrence>("recurrence", requestSchedule.recurrence, serializePatternedRecurrence);
        writer.writeDateValue("startDateTime", requestSchedule.startDateTime);
        writer.writeAdditionalData(requestSchedule.additionalData);
}
// tslint:enable
// eslint-enable
