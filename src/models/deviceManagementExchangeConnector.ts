// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DeviceManagementExchangeConnectorStatus } from './deviceManagementExchangeConnectorStatus';
import { DeviceManagementExchangeConnectorType } from './deviceManagementExchangeConnectorType';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceManagementExchangeConnectorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceManagementExchangeConnector;
}
export function deserializeIntoDeviceManagementExchangeConnector(deviceManagementExchangeConnector: DeviceManagementExchangeConnector | undefined = {} as DeviceManagementExchangeConnector) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceManagementExchangeConnector),
        "connectorServerName": n => { deviceManagementExchangeConnector.connectorServerName = n.getStringValue(); },
        "exchangeAlias": n => { deviceManagementExchangeConnector.exchangeAlias = n.getStringValue(); },
        "exchangeConnectorType": n => { deviceManagementExchangeConnector.exchangeConnectorType = n.getEnumValue<DeviceManagementExchangeConnectorType>(DeviceManagementExchangeConnectorType); },
        "exchangeOrganization": n => { deviceManagementExchangeConnector.exchangeOrganization = n.getStringValue(); },
        "lastSyncDateTime": n => { deviceManagementExchangeConnector.lastSyncDateTime = n.getDateValue(); },
        "primarySmtpAddress": n => { deviceManagementExchangeConnector.primarySmtpAddress = n.getStringValue(); },
        "serverName": n => { deviceManagementExchangeConnector.serverName = n.getStringValue(); },
        "status": n => { deviceManagementExchangeConnector.status = n.getEnumValue<DeviceManagementExchangeConnectorStatus>(DeviceManagementExchangeConnectorStatus); },
        "version": n => { deviceManagementExchangeConnector.version = n.getStringValue(); },
    }
}
export interface DeviceManagementExchangeConnector extends Entity, Parsable {
    /**
     * The name of the server hosting the Exchange Connector.
     */
    connectorServerName?: string;
    /**
     * An alias assigned to the Exchange server
     */
    exchangeAlias?: string;
    /**
     * The type of Exchange Connector.
     */
    exchangeConnectorType?: DeviceManagementExchangeConnectorType;
    /**
     * Exchange Organization to the Exchange server
     */
    exchangeOrganization?: string;
    /**
     * Last sync time for the Exchange Connector
     */
    lastSyncDateTime?: Date;
    /**
     * Email address used to configure the Service To Service Exchange Connector.
     */
    primarySmtpAddress?: string;
    /**
     * The name of the Exchange server.
     */
    serverName?: string;
    /**
     * The current status of the Exchange Connector.
     */
    status?: DeviceManagementExchangeConnectorStatus;
    /**
     * The version of the ExchangeConnectorAgent
     */
    version?: string;
}
export function serializeDeviceManagementExchangeConnector(writer: SerializationWriter, deviceManagementExchangeConnector: DeviceManagementExchangeConnector | undefined = {} as DeviceManagementExchangeConnector) : void {
        serializeEntity(writer, deviceManagementExchangeConnector)
        writer.writeStringValue("connectorServerName", deviceManagementExchangeConnector.connectorServerName);
        writer.writeStringValue("exchangeAlias", deviceManagementExchangeConnector.exchangeAlias);
        writer.writeEnumValue<DeviceManagementExchangeConnectorType>("exchangeConnectorType", deviceManagementExchangeConnector.exchangeConnectorType);
        writer.writeStringValue("exchangeOrganization", deviceManagementExchangeConnector.exchangeOrganization);
        writer.writeDateValue("lastSyncDateTime", deviceManagementExchangeConnector.lastSyncDateTime);
        writer.writeStringValue("primarySmtpAddress", deviceManagementExchangeConnector.primarySmtpAddress);
        writer.writeStringValue("serverName", deviceManagementExchangeConnector.serverName);
        writer.writeEnumValue<DeviceManagementExchangeConnectorStatus>("status", deviceManagementExchangeConnector.status);
        writer.writeStringValue("version", deviceManagementExchangeConnector.version);
}
// tslint:enable
// eslint-enable
