// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createResourceActionFromDiscriminatorValue, serializeResourceAction, type ResourceAction } from './resourceAction';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRolePermissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRolePermission;
}
export function deserializeIntoRolePermission(rolePermission: RolePermission | undefined = {} as RolePermission) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { rolePermission.odataType = n.getStringValue(); },
        "resourceActions": n => { rolePermission.resourceActions = n.getCollectionOfObjectValues<ResourceAction>(createResourceActionFromDiscriminatorValue); },
    }
}
export interface RolePermission extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Resource Actions each containing a set of allowed and not allowed permissions.
     */
    resourceActions?: ResourceAction[];
}
export function serializeRolePermission(writer: SerializationWriter, rolePermission: RolePermission | undefined = {} as RolePermission) : void {
        writer.writeStringValue("@odata.type", rolePermission.odataType);
        writer.writeCollectionOfObjectValues<ResourceAction>("resourceActions", rolePermission.resourceActions, );
        writer.writeAdditionalData(rolePermission.additionalData);
}
// tslint:enable
// eslint-enable
