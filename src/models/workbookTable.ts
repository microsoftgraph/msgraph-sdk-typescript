// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createWorkbookTableColumnFromDiscriminatorValue, serializeWorkbookTableColumn, type WorkbookTableColumn } from './workbookTableColumn';
import { createWorkbookTableRowFromDiscriminatorValue, serializeWorkbookTableRow, type WorkbookTableRow } from './workbookTableRow';
import { createWorkbookTableSortFromDiscriminatorValue, serializeWorkbookTableSort, type WorkbookTableSort } from './workbookTableSort';
import { createWorkbookWorksheetFromDiscriminatorValue, serializeWorkbookWorksheet, type WorkbookWorksheet } from './workbookWorksheet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookTableFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookTable;
}
export function deserializeIntoWorkbookTable(workbookTable: WorkbookTable | undefined = {} as WorkbookTable) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookTable),
        "columns": n => { workbookTable.columns = n.getCollectionOfObjectValues<WorkbookTableColumn>(createWorkbookTableColumnFromDiscriminatorValue); },
        "highlightFirstColumn": n => { workbookTable.highlightFirstColumn = n.getBooleanValue(); },
        "highlightLastColumn": n => { workbookTable.highlightLastColumn = n.getBooleanValue(); },
        "legacyId": n => { workbookTable.legacyId = n.getStringValue(); },
        "name": n => { workbookTable.name = n.getStringValue(); },
        "rows": n => { workbookTable.rows = n.getCollectionOfObjectValues<WorkbookTableRow>(createWorkbookTableRowFromDiscriminatorValue); },
        "showBandedColumns": n => { workbookTable.showBandedColumns = n.getBooleanValue(); },
        "showBandedRows": n => { workbookTable.showBandedRows = n.getBooleanValue(); },
        "showFilterButton": n => { workbookTable.showFilterButton = n.getBooleanValue(); },
        "showHeaders": n => { workbookTable.showHeaders = n.getBooleanValue(); },
        "showTotals": n => { workbookTable.showTotals = n.getBooleanValue(); },
        "sort": n => { workbookTable.sort = n.getObjectValue<WorkbookTableSort>(createWorkbookTableSortFromDiscriminatorValue); },
        "style": n => { workbookTable.style = n.getStringValue(); },
        "worksheet": n => { workbookTable.worksheet = n.getObjectValue<WorkbookWorksheet>(createWorkbookWorksheetFromDiscriminatorValue); },
    }
}
export function serializeWorkbookTable(writer: SerializationWriter, workbookTable: WorkbookTable | undefined = {} as WorkbookTable) : void {
        serializeEntity(writer, workbookTable)
        writer.writeCollectionOfObjectValues<WorkbookTableColumn>("columns", workbookTable.columns, );
        writer.writeBooleanValue("highlightFirstColumn", workbookTable.highlightFirstColumn);
        writer.writeBooleanValue("highlightLastColumn", workbookTable.highlightLastColumn);
        writer.writeStringValue("legacyId", workbookTable.legacyId);
        writer.writeStringValue("name", workbookTable.name);
        writer.writeCollectionOfObjectValues<WorkbookTableRow>("rows", workbookTable.rows, );
        writer.writeBooleanValue("showBandedColumns", workbookTable.showBandedColumns);
        writer.writeBooleanValue("showBandedRows", workbookTable.showBandedRows);
        writer.writeBooleanValue("showFilterButton", workbookTable.showFilterButton);
        writer.writeBooleanValue("showHeaders", workbookTable.showHeaders);
        writer.writeBooleanValue("showTotals", workbookTable.showTotals);
        writer.writeObjectValue<WorkbookTableSort>("sort", workbookTable.sort, );
        writer.writeStringValue("style", workbookTable.style);
        writer.writeObjectValue<WorkbookWorksheet>("worksheet", workbookTable.worksheet, );
}
export interface WorkbookTable extends Entity, Parsable {
    /**
     * Represents a collection of all the columns in the table. Read-only.
     */
    columns?: WorkbookTableColumn[];
    /**
     * Indicates whether the first column contains special formatting.
     */
    highlightFirstColumn?: boolean;
    /**
     * Indicates whether the last column contains special formatting.
     */
    highlightLastColumn?: boolean;
    /**
     * Legacy ID used in older Excel clients. The value of the identifier remains the same even when the table is renamed. This property should be interpreted as an opaque string value and shouldn't be parsed to any other type. Read-only.
     */
    legacyId?: string;
    /**
     * Name of the table.
     */
    name?: string;
    /**
     * Represents a collection of all the rows in the table. Read-only.
     */
    rows?: WorkbookTableRow[];
    /**
     * Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.
     */
    showBandedColumns?: boolean;
    /**
     * Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.
     */
    showBandedRows?: boolean;
    /**
     * Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.
     */
    showFilterButton?: boolean;
    /**
     * Indicates whether the header row is visible or not. This value can be set to show or remove the header row.
     */
    showHeaders?: boolean;
    /**
     * Indicates whether the total row is visible or not. This value can be set to show or remove the total row.
     */
    showTotals?: boolean;
    /**
     * Represents the sorting for the table. Read-only.
     */
    sort?: WorkbookTableSort;
    /**
     * Constant value that represents the Table style. The possible values are: TableStyleLight1 through TableStyleLight21, TableStyleMedium1 through TableStyleMedium28, TableStyleStyleDark1 through TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.
     */
    style?: string;
    /**
     * The worksheet containing the current table. Read-only.
     */
    worksheet?: WorkbookWorksheet;
}
// tslint:enable
// eslint-enable
