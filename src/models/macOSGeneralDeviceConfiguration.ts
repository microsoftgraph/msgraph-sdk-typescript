// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAppListItemFromDiscriminatorValue, serializeAppListItem, type AppListItem } from './appListItem';
import { AppListType } from './appListType';
import { deserializeIntoDeviceConfiguration, serializeDeviceConfiguration, type DeviceConfiguration } from './deviceConfiguration';
import { RequiredPasswordType } from './requiredPasswordType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMacOSGeneralDeviceConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMacOSGeneralDeviceConfiguration;
}
export function deserializeIntoMacOSGeneralDeviceConfiguration(macOSGeneralDeviceConfiguration: MacOSGeneralDeviceConfiguration | undefined = {} as MacOSGeneralDeviceConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceConfiguration(macOSGeneralDeviceConfiguration),
        "compliantAppListType": n => { macOSGeneralDeviceConfiguration.compliantAppListType = n.getEnumValue<AppListType>(AppListType); },
        "compliantAppsList": n => { macOSGeneralDeviceConfiguration.compliantAppsList = n.getCollectionOfObjectValues<AppListItem>(createAppListItemFromDiscriminatorValue); },
        "emailInDomainSuffixes": n => { macOSGeneralDeviceConfiguration.emailInDomainSuffixes = n.getCollectionOfPrimitiveValues<string>(); },
        "passwordBlockSimple": n => { macOSGeneralDeviceConfiguration.passwordBlockSimple = n.getBooleanValue(); },
        "passwordExpirationDays": n => { macOSGeneralDeviceConfiguration.passwordExpirationDays = n.getNumberValue(); },
        "passwordMinimumCharacterSetCount": n => { macOSGeneralDeviceConfiguration.passwordMinimumCharacterSetCount = n.getNumberValue(); },
        "passwordMinimumLength": n => { macOSGeneralDeviceConfiguration.passwordMinimumLength = n.getNumberValue(); },
        "passwordMinutesOfInactivityBeforeLock": n => { macOSGeneralDeviceConfiguration.passwordMinutesOfInactivityBeforeLock = n.getNumberValue(); },
        "passwordMinutesOfInactivityBeforeScreenTimeout": n => { macOSGeneralDeviceConfiguration.passwordMinutesOfInactivityBeforeScreenTimeout = n.getNumberValue(); },
        "passwordPreviousPasswordBlockCount": n => { macOSGeneralDeviceConfiguration.passwordPreviousPasswordBlockCount = n.getNumberValue(); },
        "passwordRequired": n => { macOSGeneralDeviceConfiguration.passwordRequired = n.getBooleanValue(); },
        "passwordRequiredType": n => { macOSGeneralDeviceConfiguration.passwordRequiredType = n.getEnumValue<RequiredPasswordType>(RequiredPasswordType); },
    }
}
export interface MacOSGeneralDeviceConfiguration extends DeviceConfiguration, Parsable {
    /**
     * Possible values of the compliance app list.
     */
    compliantAppListType?: AppListType;
    /**
     * List of apps in the compliance (either allow list or block list, controlled by CompliantAppListType). This collection can contain a maximum of 10000 elements.
     */
    compliantAppsList?: AppListItem[];
    /**
     * An email address lacking a suffix that matches any of these strings will be considered out-of-domain.
     */
    emailInDomainSuffixes?: string[];
    /**
     * Block simple passwords.
     */
    passwordBlockSimple?: boolean;
    /**
     * Number of days before the password expires.
     */
    passwordExpirationDays?: number;
    /**
     * Number of character sets a password must contain. Valid values 0 to 4
     */
    passwordMinimumCharacterSetCount?: number;
    /**
     * Minimum length of passwords.
     */
    passwordMinimumLength?: number;
    /**
     * Minutes of inactivity required before a password is required.
     */
    passwordMinutesOfInactivityBeforeLock?: number;
    /**
     * Minutes of inactivity required before the screen times out.
     */
    passwordMinutesOfInactivityBeforeScreenTimeout?: number;
    /**
     * Number of previous passwords to block.
     */
    passwordPreviousPasswordBlockCount?: number;
    /**
     * Whether or not to require a password.
     */
    passwordRequired?: boolean;
    /**
     * Possible values of required passwords.
     */
    passwordRequiredType?: RequiredPasswordType;
}
export function serializeMacOSGeneralDeviceConfiguration(writer: SerializationWriter, macOSGeneralDeviceConfiguration: MacOSGeneralDeviceConfiguration | undefined = {} as MacOSGeneralDeviceConfiguration) : void {
    serializeDeviceConfiguration(writer, macOSGeneralDeviceConfiguration)
    writer.writeEnumValue<AppListType>("compliantAppListType", macOSGeneralDeviceConfiguration.compliantAppListType);
    writer.writeCollectionOfObjectValues<AppListItem>("compliantAppsList", macOSGeneralDeviceConfiguration.compliantAppsList, serializeAppListItem);
    writer.writeCollectionOfPrimitiveValues<string>("emailInDomainSuffixes", macOSGeneralDeviceConfiguration.emailInDomainSuffixes);
    writer.writeBooleanValue("passwordBlockSimple", macOSGeneralDeviceConfiguration.passwordBlockSimple);
    writer.writeNumberValue("passwordExpirationDays", macOSGeneralDeviceConfiguration.passwordExpirationDays);
    writer.writeNumberValue("passwordMinimumCharacterSetCount", macOSGeneralDeviceConfiguration.passwordMinimumCharacterSetCount);
    writer.writeNumberValue("passwordMinimumLength", macOSGeneralDeviceConfiguration.passwordMinimumLength);
    writer.writeNumberValue("passwordMinutesOfInactivityBeforeLock", macOSGeneralDeviceConfiguration.passwordMinutesOfInactivityBeforeLock);
    writer.writeNumberValue("passwordMinutesOfInactivityBeforeScreenTimeout", macOSGeneralDeviceConfiguration.passwordMinutesOfInactivityBeforeScreenTimeout);
    writer.writeNumberValue("passwordPreviousPasswordBlockCount", macOSGeneralDeviceConfiguration.passwordPreviousPasswordBlockCount);
    writer.writeBooleanValue("passwordRequired", macOSGeneralDeviceConfiguration.passwordRequired);
    writer.writeEnumValue<RequiredPasswordType>("passwordRequiredType", macOSGeneralDeviceConfiguration.passwordRequiredType);
}
// tslint:enable
// eslint-enable
