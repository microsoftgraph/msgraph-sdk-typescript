// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AgreementFileData extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Data that represents the terms of use PDF document. Read-only.
     */
    data?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createAgreementFileDataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAgreementFileData;
}
export function deserializeIntoAgreementFileData(agreementFileData: AgreementFileData | undefined = {} as AgreementFileData) : Record<string, (node: ParseNode) => void> {
    return {
        "data": n => { agreementFileData.data = n.getStringValue(); },
        "@odata.type": n => { agreementFileData.odataType = n.getStringValue(); },
    }
}
export function serializeAgreementFileData(writer: SerializationWriter, agreementFileData: AgreementFileData | undefined = {} as AgreementFileData) : void {
        writer.writeStringValue("data", agreementFileData.data);
        writer.writeStringValue("@odata.type", agreementFileData.odataType);
        writer.writeAdditionalData(agreementFileData.additionalData);
}
// tslint:enable
// eslint-enable
