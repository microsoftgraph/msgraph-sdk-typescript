// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createActivitySettingsFromDiscriminatorValue, serializeActivitySettings, type ActivitySettings } from './activitySettings';
import { createConfigurationFromDiscriminatorValue, serializeConfiguration, type Configuration } from './configuration';
import { createConnectionOperationFromDiscriminatorValue, serializeConnectionOperation, type ConnectionOperation } from './connectionOperation';
import { ConnectionState } from './connectionState';
import { createExternalGroupFromDiscriminatorValue, serializeExternalGroup, type ExternalGroup } from './externalGroup';
import { createExternalItemFromDiscriminatorValue, serializeExternalItem, type ExternalItem } from './externalItem';
import { createSchemaFromDiscriminatorValue, serializeSchema, type Schema } from './schema';
import { createSearchSettingsFromDiscriminatorValue, serializeSearchSettings, type SearchSettings } from './searchSettings';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createExternalConnectionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoExternalConnection;
}
export function deserializeIntoExternalConnection(externalConnection: ExternalConnection | undefined = {} as ExternalConnection) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(externalConnection),
        "activitySettings": n => { externalConnection.activitySettings = n.getObjectValue<ActivitySettings>(createActivitySettingsFromDiscriminatorValue); },
        "configuration": n => { externalConnection.configuration = n.getObjectValue<Configuration>(createConfigurationFromDiscriminatorValue); },
        "description": n => { externalConnection.description = n.getStringValue(); },
        "groups": n => { externalConnection.groups = n.getCollectionOfObjectValues<ExternalGroup>(createExternalGroupFromDiscriminatorValue); },
        "items": n => { externalConnection.items = n.getCollectionOfObjectValues<ExternalItem>(createExternalItemFromDiscriminatorValue); },
        "name": n => { externalConnection.name = n.getStringValue(); },
        "operations": n => { externalConnection.operations = n.getCollectionOfObjectValues<ConnectionOperation>(createConnectionOperationFromDiscriminatorValue); },
        "schema": n => { externalConnection.schema = n.getObjectValue<Schema>(createSchemaFromDiscriminatorValue); },
        "searchSettings": n => { externalConnection.searchSettings = n.getObjectValue<SearchSettings>(createSearchSettingsFromDiscriminatorValue); },
        "state": n => { externalConnection.state = n.getEnumValue<ConnectionState>(ConnectionState); },
    }
}
export interface ExternalConnection extends Entity, Parsable {
    /**
     * Collects configurable settings related to activities involving connector content.
     */
    activitySettings?: ActivitySettings;
    /**
     * Specifies additional application IDs that are allowed to manage the connection and to index content in the connection. Optional.
     */
    configuration?: Configuration;
    /**
     * Description of the connection displayed in the Microsoft 365 admin center. Optional.
     */
    description?: string;
    /**
     * The groups property
     */
    groups?: ExternalGroup[];
    /**
     * The items property
     */
    items?: ExternalItem[];
    /**
     * The display name of the connection to be displayed in the Microsoft 365 admin center. Maximum length of 128 characters. Required.
     */
    name?: string;
    /**
     * The operations property
     */
    operations?: ConnectionOperation[];
    /**
     * The schema property
     */
    schema?: Schema;
    /**
     * The settings configuring the search experience for content in this connection, such as the display templates for search results.
     */
    searchSettings?: SearchSettings;
    /**
     * Indicates the current state of the connection. Possible values are: draft, ready, obsolete, limitExceeded, unknownFutureValue.
     */
    state?: ConnectionState;
}
export function serializeExternalConnection(writer: SerializationWriter, externalConnection: ExternalConnection | undefined = {} as ExternalConnection) : void {
        serializeEntity(writer, externalConnection)
        writer.writeObjectValue<ActivitySettings>("activitySettings", externalConnection.activitySettings, );
        writer.writeObjectValue<Configuration>("configuration", externalConnection.configuration, );
        writer.writeStringValue("description", externalConnection.description);
        writer.writeCollectionOfObjectValues<ExternalGroup>("groups", externalConnection.groups, );
        writer.writeCollectionOfObjectValues<ExternalItem>("items", externalConnection.items, );
        writer.writeStringValue("name", externalConnection.name);
        writer.writeCollectionOfObjectValues<ConnectionOperation>("operations", externalConnection.operations, );
        writer.writeObjectValue<Schema>("schema", externalConnection.schema, );
        writer.writeObjectValue<SearchSettings>("searchSettings", externalConnection.searchSettings, );
}
// tslint:enable
// eslint-enable
