// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createUrlToItemResolverBaseFromDiscriminatorValue, serializeUrlToItemResolverBase, type UrlToItemResolverBase } from './urlToItemResolverBase';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ActivitySettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies configurations to identify an externalItem based on a shared URL.
     */
    urlToItemResolvers?: UrlToItemResolverBase[];
}
export function createActivitySettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoActivitySettings;
}
export function deserializeIntoActivitySettings(activitySettings: ActivitySettings | undefined = {} as ActivitySettings) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { activitySettings.odataType = n.getStringValue(); },
        "urlToItemResolvers": n => { activitySettings.urlToItemResolvers = n.getCollectionOfObjectValues<UrlToItemResolverBase>(createUrlToItemResolverBaseFromDiscriminatorValue); },
    }
}
export function serializeActivitySettings(writer: SerializationWriter, activitySettings: ActivitySettings | undefined = {} as ActivitySettings) : void {
        writer.writeStringValue("@odata.type", activitySettings.odataType);
        writer.writeCollectionOfObjectValues<UrlToItemResolverBase>("urlToItemResolvers", activitySettings.urlToItemResolvers, serializeUrlToItemResolverBase);
        writer.writeAdditionalData(activitySettings.additionalData);
}
// tslint:enable
// eslint-enable
