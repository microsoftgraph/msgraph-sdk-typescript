// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createIdentityFromDiscriminatorValue, serializeIdentity, type Identity } from './identity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createExternalGroupFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoExternalGroup;
}
export function deserializeIntoExternalGroup(externalGroup: ExternalGroup | undefined = {} as ExternalGroup) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(externalGroup),
        "description": n => { externalGroup.description = n.getStringValue(); },
        "displayName": n => { externalGroup.displayName = n.getStringValue(); },
        "members": n => { externalGroup.members = n.getCollectionOfObjectValues<Identity>(createIdentityFromDiscriminatorValue); },
    }
}
export interface ExternalGroup extends Entity, Parsable {
    /**
     * The description of the external group. Optional.
     */
    description?: string;
    /**
     * The friendly name of the external group. Optional.
     */
    displayName?: string;
    /**
     * A member added to an externalGroup. You can add Microsoft Entra users, Microsoft Entra groups, or an externalGroup as members.
     */
    members?: Identity[];
}
export function serializeExternalGroup(writer: SerializationWriter, externalGroup: ExternalGroup | undefined = {} as ExternalGroup) : void {
        serializeEntity(writer, externalGroup)
        writer.writeStringValue("description", externalGroup.description);
        writer.writeStringValue("displayName", externalGroup.displayName);
        writer.writeCollectionOfObjectValues<Identity>("members", externalGroup.members, serializeIdentity);
}
// tslint:enable
// eslint-enable
