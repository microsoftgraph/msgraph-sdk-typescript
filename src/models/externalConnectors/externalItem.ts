// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createAclFromDiscriminatorValue, serializeAcl, type Acl } from './acl';
import { createExternalActivityFromDiscriminatorValue, serializeExternalActivity, type ExternalActivity } from './externalActivity';
import { createExternalItemContentFromDiscriminatorValue, serializeExternalItemContent, type ExternalItemContent } from './externalItemContent';
import { createPropertiesFromDiscriminatorValue, serializeProperties, type Properties } from './properties';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createExternalItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoExternalItem;
}
export function deserializeIntoExternalItem(externalItem: ExternalItem | undefined = {} as ExternalItem) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(externalItem),
        "acl": n => { externalItem.acl = n.getCollectionOfObjectValues<Acl>(createAclFromDiscriminatorValue); },
        "activities": n => { externalItem.activities = n.getCollectionOfObjectValues<ExternalActivity>(createExternalActivityFromDiscriminatorValue); },
        "content": n => { externalItem.content = n.getObjectValue<ExternalItemContent>(createExternalItemContentFromDiscriminatorValue); },
        "properties": n => { externalItem.properties = n.getObjectValue<Properties>(createPropertiesFromDiscriminatorValue); },
    }
}
export interface ExternalItem extends Entity, Parsable {
    /**
     * An array of access control entries. Each entry specifies the access granted to a user or group. Required.
     */
    acl?: Acl[];
    /**
     * Returns a list of activities performed on the item. Write-only.
     */
    activities?: ExternalActivity[];
    /**
     * A plain-text  representation of the contents of the item. The text in this property is full-text indexed. Optional.
     */
    content?: ExternalItemContent;
    /**
     * A property bag with the properties of the item. The properties MUST conform to the schema defined for the externalConnection. Required.
     */
    properties?: Properties;
}
export function serializeExternalItem(writer: SerializationWriter, externalItem: ExternalItem | undefined = {} as ExternalItem) : void {
    serializeEntity(writer, externalItem)
    writer.writeCollectionOfObjectValues<Acl>("acl", externalItem.acl, serializeAcl);
    writer.writeCollectionOfObjectValues<ExternalActivity>("activities", externalItem.activities, serializeExternalActivity);
    writer.writeObjectValue<ExternalItemContent>("content", externalItem.content, serializeExternalItemContent);
    writer.writeObjectValue<Properties>("properties", externalItem.properties, serializeProperties);
}
// tslint:enable
// eslint-enable
