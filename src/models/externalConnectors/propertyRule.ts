// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { BinaryOperator } from '../binaryOperator';
import { RuleOperation } from './ruleOperation';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPropertyRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPropertyRule;
}
export function deserializeIntoPropertyRule(propertyRule: PropertyRule | undefined = {} as PropertyRule) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { propertyRule.odataType = n.getStringValue(); },
        "operation": n => { propertyRule.operation = n.getEnumValue<RuleOperation>(RuleOperation); },
        "property": n => { propertyRule.property = n.getStringValue(); },
        "values": n => { propertyRule.values = n.getCollectionOfPrimitiveValues<string>(); },
        "valuesJoinedBy": n => { propertyRule.valuesJoinedBy = n.getEnumValue<BinaryOperator>(BinaryOperator); },
    }
}
export interface PropertyRule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The operation property
     */
    operation?: RuleOperation;
    /**
     * The property from the externalItem schema. Required.
     */
    property?: string;
    /**
     * A collection with one or many strings. The specified string(s) will be matched with the specified property using the specified operation. Required.
     */
    values?: string[];
    /**
     * The valuesJoinedBy property
     */
    valuesJoinedBy?: BinaryOperator;
}
export function serializePropertyRule(writer: SerializationWriter, propertyRule: PropertyRule | undefined = {} as PropertyRule) : void {
        writer.writeStringValue("@odata.type", propertyRule.odataType);
        writer.writeEnumValue<RuleOperation>("operation", propertyRule.operation);
        writer.writeStringValue("property", propertyRule.property);
        writer.writeCollectionOfPrimitiveValues<string>("values", propertyRule.values);
        writer.writeEnumValue<BinaryOperator>("valuesJoinedBy", propertyRule.valuesJoinedBy);
        writer.writeAdditionalData(propertyRule.additionalData);
}
// tslint:enable
// eslint-enable
