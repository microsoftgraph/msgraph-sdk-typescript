import { createUrlMatchInfoFromDiscriminatorValue, serializeUrlMatchInfo, type UrlMatchInfo } from './urlMatchInfo';
import { deserializeIntoUrlToItemResolverBase, serializeUrlToItemResolverBase, type UrlToItemResolverBase } from './urlToItemResolverBase';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createItemIdResolverFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoItemIdResolver;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoItemIdResolver(itemIdResolver: ItemIdResolver | undefined = {} as ItemIdResolver) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoUrlToItemResolverBase(itemIdResolver),
        "itemId": n => { itemIdResolver.itemId = n.getStringValue(); },
        "urlMatchInfo": n => { itemIdResolver.urlMatchInfo = n.getObjectValue<UrlMatchInfo>(createUrlMatchInfoFromDiscriminatorValue); },
    }
}
export interface ItemIdResolver extends Parsable, UrlToItemResolverBase {
    /**
     * Pattern that specifies how to form the ID of the external item that the URL represents. The named groups from the regular expression in urlPattern within the urlMatchInfo can be referenced by inserting the group name inside curly brackets.
     */
    itemId?: string;
    /**
     * Configurations to match and resolve URL.
     */
    urlMatchInfo?: UrlMatchInfo;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeItemIdResolver(writer: SerializationWriter, itemIdResolver: ItemIdResolver | undefined = {} as ItemIdResolver) : void {
        serializeUrlToItemResolverBase(writer, itemIdResolver)
        writer.writeStringValue("itemId", itemIdResolver.itemId);
        writer.writeObjectValue<UrlMatchInfo>("urlMatchInfo", itemIdResolver.urlMatchInfo, );
}
