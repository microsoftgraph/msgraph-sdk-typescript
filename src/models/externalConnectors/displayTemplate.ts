// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from '../json';
import { createPropertyRuleFromDiscriminatorValue, serializePropertyRule, type PropertyRule } from './propertyRule';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDisplayTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDisplayTemplate;
}
export function deserializeIntoDisplayTemplate(displayTemplate: DisplayTemplate | undefined = {} as DisplayTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { displayTemplate.id = n.getStringValue(); },
        "layout": n => { displayTemplate.layout = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "@odata.type": n => { displayTemplate.odataType = n.getStringValue(); },
        "priority": n => { displayTemplate.priority = n.getNumberValue(); },
        "rules": n => { displayTemplate.rules = n.getCollectionOfObjectValues<PropertyRule>(createPropertyRuleFromDiscriminatorValue); },
    }
}
export interface DisplayTemplate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The text identifier for the display template; for example, contosoTickets. Maximum 16 characters. Only alphanumeric characters allowed.
     */
    id?: string;
    /**
     * The layout property
     */
    layout?: Json;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Defines the priority of a display template. A display template with priority 1 is evaluated before a template with priority 4. Gaps in priority values are supported. Must be positive value.
     */
    priority?: number;
    /**
     * Specifies additional rules for selecting this display template based on the item schema. Optional.
     */
    rules?: PropertyRule[];
}
export function serializeDisplayTemplate(writer: SerializationWriter, displayTemplate: DisplayTemplate | undefined = {} as DisplayTemplate) : void {
        writer.writeStringValue("id", displayTemplate.id);
        writer.writeObjectValue<Json>("layout", displayTemplate.layout, );
        writer.writeStringValue("@odata.type", displayTemplate.odataType);
        writer.writeNumberValue("priority", displayTemplate.priority);
        writer.writeCollectionOfObjectValues<PropertyRule>("rules", displayTemplate.rules, );
        writer.writeAdditionalData(displayTemplate.additionalData);
}
// tslint:enable
// eslint-enable
