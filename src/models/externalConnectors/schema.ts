// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createPropertyFromDiscriminatorValue, serializeProperty, type Property } from './property';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSchemaFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSchema;
}
export function deserializeIntoSchema(schema: Schema | undefined = {} as Schema) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(schema),
        "baseType": n => { schema.baseType = n.getStringValue(); },
        "properties": n => { schema.properties = n.getCollectionOfObjectValues<Property>(createPropertyFromDiscriminatorValue); },
    }
}
export interface Schema extends Entity, Parsable {
    /**
     * Must be set to microsoft.graph.externalConnector.externalItem. Required.
     */
    baseType?: string;
    /**
     * The properties defined for the items in the connection. The minimum number of properties is one, the maximum is 128.
     */
    properties?: Property[];
}
export function serializeSchema(writer: SerializationWriter, schema: Schema | undefined = {} as Schema) : void {
    serializeEntity(writer, schema)
    writer.writeStringValue("baseType", schema.baseType);
    writer.writeCollectionOfObjectValues<Property>("properties", schema.properties, serializeProperty);
}
// tslint:enable
// eslint-enable
