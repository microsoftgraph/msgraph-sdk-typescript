// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createPublicErrorFromDiscriminatorValue, serializePublicError, type PublicError } from '../publicError';
import { ConnectionOperationStatus } from './connectionOperationStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConnectionOperation extends Entity, Parsable {
    /**
     * If status is failed, provides more information about the error that caused the failure.
     */
    errorEscaped?: PublicError;
    /**
     * Indicates the status of the asynchronous operation. Possible values are: unspecified, inprogress, completed, failed, unknownFutureValue.
     */
    status?: ConnectionOperationStatus;
}
export function createConnectionOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConnectionOperation;
}
export function deserializeIntoConnectionOperation(connectionOperation: ConnectionOperation | undefined = {} as ConnectionOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(connectionOperation),
        "error": n => { connectionOperation.errorEscaped = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
        "status": n => { connectionOperation.status = n.getEnumValue<ConnectionOperationStatus>(ConnectionOperationStatus); },
    }
}
export function serializeConnectionOperation(writer: SerializationWriter, connectionOperation: ConnectionOperation | undefined = {} as ConnectionOperation) : void {
    serializeEntity(writer, connectionOperation)
    writer.writeObjectValue<PublicError>("error", connectionOperation.errorEscaped, serializePublicError);
    writer.writeEnumValue<ConnectionOperationStatus>("status", connectionOperation.status);
}
// tslint:enable
// eslint-enable
