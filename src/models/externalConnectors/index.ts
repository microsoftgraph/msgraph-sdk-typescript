// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { BinaryOperator, BinaryOperatorObject, createJsonFromDiscriminatorValue, createPublicErrorFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, deserializeIntoEntity, serializeBaseCollectionPaginationCountResponse, serializeEntity, serializeJson, serializePublicError, type BaseCollectionPaginationCountResponse, type Entity, type Json, type PublicError } from '../';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export type AccessType = (typeof AccessTypeObject)[keyof typeof AccessTypeObject];
export interface Acl extends AdditionalDataHolder, Parsable {
    /**
     * The accessType property
     */
    accessType?: AccessType;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The type property
     */
    type?: AclType;
    /**
     * The unique identifer of the identity. For Microsoft Entra identities, value is set to the object identifier of the user, group or tenant for types user, group and everyone (and everyoneExceptGuests) respectively. For external groups value is set to the ID of the externalGroup
     */
    value?: string;
}
export type AclType = (typeof AclTypeObject)[keyof typeof AclTypeObject];
export interface ActivitySettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies configurations to identify an externalItem based on a shared URL.
     */
    urlToItemResolvers?: UrlToItemResolverBase[];
}
export interface Configuration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A collection of application IDs for registered Microsoft Entra apps that are allowed to manage the externalConnection and to index content in the externalConnection.
     */
    authorizedAppIds?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface ConnectionOperation extends Entity, Parsable {
    /**
     * If status is failed, provides more information about the error that caused the failure.
     */
    errorEscaped?: PublicError;
    /**
     * Indicates the status of the asynchronous operation. Possible values are: unspecified, inprogress, completed, failed, unknownFutureValue.
     */
    status?: ConnectionOperation_status;
}
export interface ConnectionOperationCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ConnectionOperation[];
}
export function createAclFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoAcl;
}
export function createActivitySettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoActivitySettings;
}
export function createConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoConfiguration;
}
export function createConnectionOperationCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoConnectionOperationCollectionResponse;
}
export function createConnectionOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoConnectionOperation;
}
export function createDisplayTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoDisplayTemplate;
}
export function createExternalActivityCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExternalActivityCollectionResponse;
}
export function createExternalActivityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.externalConnectors.externalActivityResult":
                    return deserializeIntoExternalActivityResult;
            }
        }
    }
    return deserializeIntoExternalActivity;
}
export function createExternalActivityResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExternalActivityResult;
}
export function createExternalConnectionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExternalConnectionCollectionResponse;
}
export function createExternalConnectionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExternalConnection;
}
export function createExternalFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExternal;
}
export function createExternalGroupCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExternalGroupCollectionResponse;
}
export function createExternalGroupFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExternalGroup;
}
export function createExternalItemCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExternalItemCollectionResponse;
}
export function createExternalItemContentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExternalItemContent;
}
export function createExternalItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoExternalItem;
}
export function createIdentityCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIdentityCollectionResponse;
}
export function createIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoIdentity;
}
export function createItemIdResolverFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoItemIdResolver;
}
export function createPropertiesFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoProperties;
}
export function createPropertyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoProperty;
}
export function createPropertyRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoPropertyRule;
}
export function createSchemaFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSchema;
}
export function createSearchSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSearchSettings;
}
export function createUrlMatchInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUrlMatchInfo;
}
export function createUrlToItemResolverBaseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.externalConnectors.itemIdResolver":
                    return deserializeIntoItemIdResolver;
            }
        }
    }
    return deserializeIntoUrlToItemResolverBase;
}
export function deserializeIntoAcl(acl: Acl | undefined = {} as Acl) : Record<string, (node: ParseNode) => void> {
    return {
        "accessType": n => { acl.accessType = n.getEnumValue<AccessType>(AccessTypeObject); },
        "@odata.type": n => { acl.odataType = n.getStringValue(); },
        "type": n => { acl.type = n.getEnumValue<AclType>(AclTypeObject); },
        "value": n => { acl.value = n.getStringValue(); },
    }
}
export function deserializeIntoActivitySettings(activitySettings: ActivitySettings | undefined = {} as ActivitySettings) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { activitySettings.odataType = n.getStringValue(); },
        "urlToItemResolvers": n => { activitySettings.urlToItemResolvers = n.getCollectionOfObjectValues<UrlToItemResolverBase>(createUrlToItemResolverBaseFromDiscriminatorValue); },
    }
}
export function deserializeIntoConfiguration(configuration: Configuration | undefined = {} as Configuration) : Record<string, (node: ParseNode) => void> {
    return {
        "authorizedAppIds": n => { configuration.authorizedAppIds = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { configuration.odataType = n.getStringValue(); },
    }
}
export function deserializeIntoConnectionOperation(connectionOperation: ConnectionOperation | undefined = {} as ConnectionOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(connectionOperation),
        "error": n => { connectionOperation.errorEscaped = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
        "status": n => { connectionOperation.status = n.getEnumValue<ConnectionOperation_status>(ConnectionOperation_statusObject); },
    }
}
export function deserializeIntoConnectionOperationCollectionResponse(connectionOperationCollectionResponse: ConnectionOperationCollectionResponse | undefined = {} as ConnectionOperationCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(connectionOperationCollectionResponse),
        "value": n => { connectionOperationCollectionResponse.value = n.getCollectionOfObjectValues<ConnectionOperation>(createConnectionOperationFromDiscriminatorValue); },
    }
}
export function deserializeIntoDisplayTemplate(displayTemplate: DisplayTemplate | undefined = {} as DisplayTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { displayTemplate.id = n.getStringValue(); },
        "layout": n => { displayTemplate.layout = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "@odata.type": n => { displayTemplate.odataType = n.getStringValue(); },
        "priority": n => { displayTemplate.priority = n.getNumberValue(); },
        "rules": n => { displayTemplate.rules = n.getCollectionOfObjectValues<PropertyRule>(createPropertyRuleFromDiscriminatorValue); },
    }
}
export function deserializeIntoExternal(external: External | undefined = {} as External) : Record<string, (node: ParseNode) => void> {
    return {
        "connections": n => { external.connections = n.getCollectionOfObjectValues<ExternalConnection>(createExternalConnectionFromDiscriminatorValue); },
        "@odata.type": n => { external.odataType = n.getStringValue(); },
    }
}
export function deserializeIntoExternalActivity(externalActivity: ExternalActivity | undefined = {} as ExternalActivity) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(externalActivity),
        "performedBy": n => { externalActivity.performedBy = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "startDateTime": n => { externalActivity.startDateTime = n.getDateValue(); },
        "type": n => { externalActivity.type = n.getEnumValue<ExternalActivityType>(ExternalActivityTypeObject); },
    }
}
export function deserializeIntoExternalActivityCollectionResponse(externalActivityCollectionResponse: ExternalActivityCollectionResponse | undefined = {} as ExternalActivityCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(externalActivityCollectionResponse),
        "value": n => { externalActivityCollectionResponse.value = n.getCollectionOfObjectValues<ExternalActivity>(createExternalActivityFromDiscriminatorValue); },
    }
}
export function deserializeIntoExternalActivityResult(externalActivityResult: ExternalActivityResult | undefined = {} as ExternalActivityResult) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoExternalActivity(externalActivityResult),
        "error": n => { externalActivityResult.errorEscaped = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
    }
}
export function deserializeIntoExternalConnection(externalConnection: ExternalConnection | undefined = {} as ExternalConnection) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(externalConnection),
        "activitySettings": n => { externalConnection.activitySettings = n.getObjectValue<ActivitySettings>(createActivitySettingsFromDiscriminatorValue); },
        "configuration": n => { externalConnection.configuration = n.getObjectValue<Configuration>(createConfigurationFromDiscriminatorValue); },
        "connectorId": n => { externalConnection.connectorId = n.getStringValue(); },
        "description": n => { externalConnection.description = n.getStringValue(); },
        "groups": n => { externalConnection.groups = n.getCollectionOfObjectValues<ExternalGroup>(createExternalGroupFromDiscriminatorValue); },
        "items": n => { externalConnection.items = n.getCollectionOfObjectValues<ExternalItem>(createExternalItemFromDiscriminatorValue); },
        "name": n => { externalConnection.name = n.getStringValue(); },
        "operations": n => { externalConnection.operations = n.getCollectionOfObjectValues<ConnectionOperation>(createConnectionOperationFromDiscriminatorValue); },
        "schema": n => { externalConnection.schema = n.getObjectValue<Schema>(createSchemaFromDiscriminatorValue); },
        "searchSettings": n => { externalConnection.searchSettings = n.getObjectValue<SearchSettings>(createSearchSettingsFromDiscriminatorValue); },
        "state": n => { externalConnection.state = n.getEnumValue<ExternalConnection_state>(ExternalConnection_stateObject); },
    }
}
export function deserializeIntoExternalConnectionCollectionResponse(externalConnectionCollectionResponse: ExternalConnectionCollectionResponse | undefined = {} as ExternalConnectionCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(externalConnectionCollectionResponse),
        "value": n => { externalConnectionCollectionResponse.value = n.getCollectionOfObjectValues<ExternalConnection>(createExternalConnectionFromDiscriminatorValue); },
    }
}
export function deserializeIntoExternalGroup(externalGroup: ExternalGroup | undefined = {} as ExternalGroup) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(externalGroup),
        "description": n => { externalGroup.description = n.getStringValue(); },
        "displayName": n => { externalGroup.displayName = n.getStringValue(); },
        "members": n => { externalGroup.members = n.getCollectionOfObjectValues<Identity>(createIdentityFromDiscriminatorValue); },
    }
}
export function deserializeIntoExternalGroupCollectionResponse(externalGroupCollectionResponse: ExternalGroupCollectionResponse | undefined = {} as ExternalGroupCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(externalGroupCollectionResponse),
        "value": n => { externalGroupCollectionResponse.value = n.getCollectionOfObjectValues<ExternalGroup>(createExternalGroupFromDiscriminatorValue); },
    }
}
export function deserializeIntoExternalItem(externalItem: ExternalItem | undefined = {} as ExternalItem) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(externalItem),
        "acl": n => { externalItem.acl = n.getCollectionOfObjectValues<Acl>(createAclFromDiscriminatorValue); },
        "activities": n => { externalItem.activities = n.getCollectionOfObjectValues<ExternalActivity>(createExternalActivityFromDiscriminatorValue); },
        "content": n => { externalItem.content = n.getObjectValue<ExternalItemContent>(createExternalItemContentFromDiscriminatorValue); },
        "properties": n => { externalItem.properties = n.getObjectValue<Properties>(createPropertiesFromDiscriminatorValue); },
    }
}
export function deserializeIntoExternalItemCollectionResponse(externalItemCollectionResponse: ExternalItemCollectionResponse | undefined = {} as ExternalItemCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(externalItemCollectionResponse),
        "value": n => { externalItemCollectionResponse.value = n.getCollectionOfObjectValues<ExternalItem>(createExternalItemFromDiscriminatorValue); },
    }
}
export function deserializeIntoExternalItemContent(externalItemContent: ExternalItemContent | undefined = {} as ExternalItemContent) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { externalItemContent.odataType = n.getStringValue(); },
        "type": n => { externalItemContent.type = n.getEnumValue<ExternalItemContentType>(ExternalItemContentTypeObject); },
        "value": n => { externalItemContent.value = n.getStringValue(); },
    }
}
export function deserializeIntoIdentity(identity: Identity | undefined = {} as Identity) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(identity),
        "type": n => { identity.type = n.getEnumValue<Identity_type>(Identity_typeObject); },
    }
}
export function deserializeIntoIdentityCollectionResponse(identityCollectionResponse: IdentityCollectionResponse | undefined = {} as IdentityCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(identityCollectionResponse),
        "value": n => { identityCollectionResponse.value = n.getCollectionOfObjectValues<Identity>(createIdentityFromDiscriminatorValue); },
    }
}
export function deserializeIntoItemIdResolver(itemIdResolver: ItemIdResolver | undefined = {} as ItemIdResolver) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoUrlToItemResolverBase(itemIdResolver),
        "itemId": n => { itemIdResolver.itemId = n.getStringValue(); },
        "urlMatchInfo": n => { itemIdResolver.urlMatchInfo = n.getObjectValue<UrlMatchInfo>(createUrlMatchInfoFromDiscriminatorValue); },
    }
}
export function deserializeIntoProperties(properties: Properties | undefined = {} as Properties) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { properties.odataType = n.getStringValue(); },
    }
}
export function deserializeIntoProperty(property: Property | undefined = {} as Property) : Record<string, (node: ParseNode) => void> {
    return {
        "aliases": n => { property.aliases = n.getCollectionOfPrimitiveValues<string>(); },
        "isQueryable": n => { property.isQueryable = n.getBooleanValue(); },
        "isRefinable": n => { property.isRefinable = n.getBooleanValue(); },
        "isRetrievable": n => { property.isRetrievable = n.getBooleanValue(); },
        "isSearchable": n => { property.isSearchable = n.getBooleanValue(); },
        "labels": n => { property.labels = n.getCollectionOfEnumValues<Property_labels>(Property_labelsObject); },
        "name": n => { property.name = n.getStringValue(); },
        "@odata.type": n => { property.odataType = n.getStringValue(); },
        "type": n => { property.type = n.getEnumValue<PropertyType>(PropertyTypeObject); },
    }
}
export function deserializeIntoPropertyRule(propertyRule: PropertyRule | undefined = {} as PropertyRule) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { propertyRule.odataType = n.getStringValue(); },
        "operation": n => { propertyRule.operation = n.getEnumValue<RuleOperation>(RuleOperationObject); },
        "property": n => { propertyRule.property = n.getStringValue(); },
        "values": n => { propertyRule.values = n.getCollectionOfPrimitiveValues<string>(); },
        "valuesJoinedBy": n => { propertyRule.valuesJoinedBy = n.getEnumValue<BinaryOperator>(BinaryOperatorObject); },
    }
}
export function deserializeIntoSchema(schema: Schema | undefined = {} as Schema) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(schema),
        "baseType": n => { schema.baseType = n.getStringValue(); },
        "properties": n => { schema.properties = n.getCollectionOfObjectValues<Property>(createPropertyFromDiscriminatorValue); },
    }
}
export function deserializeIntoSearchSettings(searchSettings: SearchSettings | undefined = {} as SearchSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { searchSettings.odataType = n.getStringValue(); },
        "searchResultTemplates": n => { searchSettings.searchResultTemplates = n.getCollectionOfObjectValues<DisplayTemplate>(createDisplayTemplateFromDiscriminatorValue); },
    }
}
export function deserializeIntoUrlMatchInfo(urlMatchInfo: UrlMatchInfo | undefined = {} as UrlMatchInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "baseUrls": n => { urlMatchInfo.baseUrls = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { urlMatchInfo.odataType = n.getStringValue(); },
        "urlPattern": n => { urlMatchInfo.urlPattern = n.getStringValue(); },
    }
}
export function deserializeIntoUrlToItemResolverBase(urlToItemResolverBase: UrlToItemResolverBase | undefined = {} as UrlToItemResolverBase) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { urlToItemResolverBase.odataType = n.getStringValue(); },
        "priority": n => { urlToItemResolverBase.priority = n.getNumberValue(); },
    }
}
export interface DisplayTemplate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The text identifier for the display template; for example, contosoTickets. Maximum 16 characters. Only alphanumeric characters allowed.
     */
    id?: string;
    /**
     * The layout property
     */
    layout?: Json;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Defines the priority of a display template. A display template with priority 1 is evaluated before a template with priority 4. Gaps in priority values are supported. Must be positive value.
     */
    priority?: number;
    /**
     * Specifies additional rules for selecting this display template based on the item schema. Optional.
     */
    rules?: PropertyRule[];
}
export interface External extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The connections property
     */
    connections?: ExternalConnection[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface ExternalActivity extends Entity, Parsable {
    /**
     * Represents an identity used to identify who is responsible for the activity.
     */
    performedBy?: Identity;
    /**
     * The date and time when the particular activity occurred. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    startDateTime?: Date;
    /**
     * The type property
     */
    type?: ExternalActivityType;
}
export interface ExternalActivityCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ExternalActivity[];
}
export interface ExternalActivityResult extends ExternalActivity, Parsable {
    /**
     * Error information that explains the failure to process an external activity.
     */
    errorEscaped?: PublicError;
}
export type ExternalActivityType = (typeof ExternalActivityTypeObject)[keyof typeof ExternalActivityTypeObject];
export interface ExternalConnection extends Entity, Parsable {
    /**
     * Collects configurable settings related to activities involving connector content.
     */
    activitySettings?: ActivitySettings;
    /**
     * Specifies additional application IDs that are allowed to manage the connection and to index content in the connection. Optional.
     */
    configuration?: Configuration;
    /**
     * The Teams app ID. Optional.
     */
    connectorId?: string;
    /**
     * Description of the connection displayed in the Microsoft 365 admin center. Optional.
     */
    description?: string;
    /**
     * The groups property
     */
    groups?: ExternalGroup[];
    /**
     * The items property
     */
    items?: ExternalItem[];
    /**
     * The display name of the connection to be displayed in the Microsoft 365 admin center. Maximum length of 128 characters. Required.
     */
    name?: string;
    /**
     * The operations property
     */
    operations?: ConnectionOperation[];
    /**
     * The schema property
     */
    schema?: Schema;
    /**
     * The settings configuring the search experience for content in this connection, such as the display templates for search results.
     */
    searchSettings?: SearchSettings;
    /**
     * Indicates the current state of the connection. Possible values are: draft, ready, obsolete, limitExceeded, unknownFutureValue.
     */
    state?: ExternalConnection_state;
}
export interface ExternalConnectionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ExternalConnection[];
}
export interface ExternalGroup extends Entity, Parsable {
    /**
     * The description of the external group. Optional.
     */
    description?: string;
    /**
     * The friendly name of the external group. Optional.
     */
    displayName?: string;
    /**
     * A member added to an externalGroup. You can add Microsoft Entra users, Microsoft Entra groups, or an externalGroup as members.
     */
    members?: Identity[];
}
export interface ExternalGroupCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ExternalGroup[];
}
export interface ExternalItem extends Entity, Parsable {
    /**
     * An array of access control entries. Each entry specifies the access granted to a user or group. Required.
     */
    acl?: Acl[];
    /**
     * Returns a list of activities performed on the item. Write-only.
     */
    activities?: ExternalActivity[];
    /**
     * A plain-text  representation of the contents of the item. The text in this property is full-text indexed. Optional.
     */
    content?: ExternalItemContent;
    /**
     * A property bag with the properties of the item. The properties MUST conform to the schema defined for the externalConnection. Required.
     */
    properties?: Properties;
}
export interface ExternalItemCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: ExternalItem[];
}
export interface ExternalItemContent extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The type property
     */
    type?: ExternalItemContentType;
    /**
     * The content for the externalItem. Required.
     */
    value?: string;
}
export type ExternalItemContentType = (typeof ExternalItemContentTypeObject)[keyof typeof ExternalItemContentTypeObject];
export interface Identity extends Entity, Parsable {
    /**
     * The type of identity. Possible values are: user or group for Microsoft Entra identities and externalgroup for groups in an external system.
     */
    type?: Identity_type;
}
export interface IdentityCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Identity[];
}
export interface ItemIdResolver extends Parsable, UrlToItemResolverBase {
    /**
     * Pattern that specifies how to form the ID of the external item that the URL represents. The named groups from the regular expression in urlPattern within the urlMatchInfo can be referenced by inserting the group name inside curly brackets.
     */
    itemId?: string;
    /**
     * Configurations to match and resolve URL.
     */
    urlMatchInfo?: UrlMatchInfo;
}
export interface Properties extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface Property extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A set of aliases or a friendly name for the property. Maximum 32 characters. Only alphanumeric characters allowed. For example, each string may not contain control characters, whitespace, or any of the following: :, ;, ,, (, ), [, ], {, }, %, $, +, !, *, =, &, ?, @, #, /, ~, ', ', <, >, `, ^. Optional.
     */
    aliases?: string[];
    /**
     * Specifies if the property is queryable. Queryable properties can be used in Keyword Query Language (KQL) queries. Optional.
     */
    isQueryable?: boolean;
    /**
     * Specifies if the property is refinable.  Refinable properties can be used to filter search results in the Search API and add a refiner control in the Microsoft Search user experience. Optional.
     */
    isRefinable?: boolean;
    /**
     * Specifies if the property is retrievable. Retrievable properties are returned in the result set when items are returned by the search API. Retrievable properties are also available to add to the display template used to render search results. Optional.
     */
    isRetrievable?: boolean;
    /**
     * Specifies if the property is searchable. Only properties of type String or StringCollection can be searchable. Nonsearchable properties aren't added to the search index. Optional.
     */
    isSearchable?: boolean;
    /**
     * Specifies one or more well-known tags added against a property. Labels help Microsoft Search understand the semantics of the data in the connection. Adding appropriate labels would result in an enhanced search experience (for example, better relevance). Optional.The possible values are: title, url, createdBy, lastModifiedBy, authors, createdDateTime, lastModifiedDateTime, fileName, fileExtension, unknownFutureValue, iconUrl. You must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: iconUrl.
     */
    labels?: Property_labels[];
    /**
     * The name of the property. Maximum 32 characters. Only alphanumeric characters allowed. For example, each string may not contain control characters, whitespace, or any of the following: :, ;, ,, (, ), [, ], {, }, %, $, +, !, *, =, &, ?, @, #, /, ~, ', ', <, >, `, ^.  Required.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The type property
     */
    type?: PropertyType;
}
export interface PropertyRule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The operation property
     */
    operation?: RuleOperation;
    /**
     * The property from the externalItem schema. Required.
     */
    property?: string;
    /**
     * A collection with one or many strings. The specified string(s) will be matched with the specified property using the specified operation. Required.
     */
    values?: string[];
    /**
     * The valuesJoinedBy property
     */
    valuesJoinedBy?: BinaryOperator;
}
export type PropertyType = (typeof PropertyTypeObject)[keyof typeof PropertyTypeObject];
export type RuleOperation = (typeof RuleOperationObject)[keyof typeof RuleOperationObject];
export interface Schema extends Entity, Parsable {
    /**
     * Must be set to microsoft.graph.externalConnector.externalItem. Required.
     */
    baseType?: string;
    /**
     * The properties defined for the items in the connection. The minimum number of properties is one, the maximum is 128.
     */
    properties?: Property[];
}
export interface SearchSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Enables the developer to define the appearance of the content and configure conditions that dictate when the template should be displayed. Maximum of 2 search result templates per connection.
     */
    searchResultTemplates?: DisplayTemplate[];
}
export function serializeAcl(writer: SerializationWriter, acl: Acl | undefined = {} as Acl) : void {
    writer.writeEnumValue<AccessType>("accessType", acl.accessType);
    writer.writeStringValue("@odata.type", acl.odataType);
    writer.writeEnumValue<AclType>("type", acl.type);
    writer.writeStringValue("value", acl.value);
    writer.writeAdditionalData(acl.additionalData);
}
export function serializeActivitySettings(writer: SerializationWriter, activitySettings: ActivitySettings | undefined = {} as ActivitySettings) : void {
    writer.writeStringValue("@odata.type", activitySettings.odataType);
    writer.writeCollectionOfObjectValues<UrlToItemResolverBase>("urlToItemResolvers", activitySettings.urlToItemResolvers, serializeUrlToItemResolverBase);
    writer.writeAdditionalData(activitySettings.additionalData);
}
export function serializeConfiguration(writer: SerializationWriter, configuration: Configuration | undefined = {} as Configuration) : void {
    writer.writeCollectionOfPrimitiveValues<string>("authorizedAppIds", configuration.authorizedAppIds);
    writer.writeStringValue("@odata.type", configuration.odataType);
    writer.writeAdditionalData(configuration.additionalData);
}
export function serializeConnectionOperation(writer: SerializationWriter, connectionOperation: ConnectionOperation | undefined = {} as ConnectionOperation) : void {
    serializeEntity(writer, connectionOperation)
    writer.writeObjectValue<PublicError>("error", connectionOperation.errorEscaped, serializePublicError);
    writer.writeEnumValue<ConnectionOperation_status>("status", connectionOperation.status);
}
export function serializeConnectionOperationCollectionResponse(writer: SerializationWriter, connectionOperationCollectionResponse: ConnectionOperationCollectionResponse | undefined = {} as ConnectionOperationCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, connectionOperationCollectionResponse)
    writer.writeCollectionOfObjectValues<ConnectionOperation>("value", connectionOperationCollectionResponse.value, serializeConnectionOperation);
}
export function serializeDisplayTemplate(writer: SerializationWriter, displayTemplate: DisplayTemplate | undefined = {} as DisplayTemplate) : void {
    writer.writeStringValue("id", displayTemplate.id);
    writer.writeObjectValue<Json>("layout", displayTemplate.layout, serializeJson);
    writer.writeStringValue("@odata.type", displayTemplate.odataType);
    writer.writeNumberValue("priority", displayTemplate.priority);
    writer.writeCollectionOfObjectValues<PropertyRule>("rules", displayTemplate.rules, serializePropertyRule);
    writer.writeAdditionalData(displayTemplate.additionalData);
}
export function serializeExternal(writer: SerializationWriter, external: External | undefined = {} as External) : void {
    writer.writeCollectionOfObjectValues<ExternalConnection>("connections", external.connections, serializeExternalConnection);
    writer.writeStringValue("@odata.type", external.odataType);
    writer.writeAdditionalData(external.additionalData);
}
export function serializeExternalActivity(writer: SerializationWriter, externalActivity: ExternalActivity | undefined = {} as ExternalActivity) : void {
    serializeEntity(writer, externalActivity)
    writer.writeObjectValue<Identity>("performedBy", externalActivity.performedBy, serializeIdentity);
    writer.writeDateValue("startDateTime", externalActivity.startDateTime);
    writer.writeEnumValue<ExternalActivityType>("type", externalActivity.type);
}
export function serializeExternalActivityCollectionResponse(writer: SerializationWriter, externalActivityCollectionResponse: ExternalActivityCollectionResponse | undefined = {} as ExternalActivityCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, externalActivityCollectionResponse)
    writer.writeCollectionOfObjectValues<ExternalActivity>("value", externalActivityCollectionResponse.value, serializeExternalActivity);
}
export function serializeExternalActivityResult(writer: SerializationWriter, externalActivityResult: ExternalActivityResult | undefined = {} as ExternalActivityResult) : void {
    serializeExternalActivity(writer, externalActivityResult)
    writer.writeObjectValue<PublicError>("error", externalActivityResult.errorEscaped, serializePublicError);
}
export function serializeExternalConnection(writer: SerializationWriter, externalConnection: ExternalConnection | undefined = {} as ExternalConnection) : void {
    serializeEntity(writer, externalConnection)
    writer.writeObjectValue<ActivitySettings>("activitySettings", externalConnection.activitySettings, serializeActivitySettings);
    writer.writeObjectValue<Configuration>("configuration", externalConnection.configuration, serializeConfiguration);
    writer.writeStringValue("connectorId", externalConnection.connectorId);
    writer.writeStringValue("description", externalConnection.description);
    writer.writeCollectionOfObjectValues<ExternalGroup>("groups", externalConnection.groups, serializeExternalGroup);
    writer.writeCollectionOfObjectValues<ExternalItem>("items", externalConnection.items, serializeExternalItem);
    writer.writeStringValue("name", externalConnection.name);
    writer.writeCollectionOfObjectValues<ConnectionOperation>("operations", externalConnection.operations, serializeConnectionOperation);
    writer.writeObjectValue<Schema>("schema", externalConnection.schema, serializeSchema);
    writer.writeObjectValue<SearchSettings>("searchSettings", externalConnection.searchSettings, serializeSearchSettings);
}
export function serializeExternalConnectionCollectionResponse(writer: SerializationWriter, externalConnectionCollectionResponse: ExternalConnectionCollectionResponse | undefined = {} as ExternalConnectionCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, externalConnectionCollectionResponse)
    writer.writeCollectionOfObjectValues<ExternalConnection>("value", externalConnectionCollectionResponse.value, serializeExternalConnection);
}
export function serializeExternalGroup(writer: SerializationWriter, externalGroup: ExternalGroup | undefined = {} as ExternalGroup) : void {
    serializeEntity(writer, externalGroup)
    writer.writeStringValue("description", externalGroup.description);
    writer.writeStringValue("displayName", externalGroup.displayName);
    writer.writeCollectionOfObjectValues<Identity>("members", externalGroup.members, serializeIdentity);
}
export function serializeExternalGroupCollectionResponse(writer: SerializationWriter, externalGroupCollectionResponse: ExternalGroupCollectionResponse | undefined = {} as ExternalGroupCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, externalGroupCollectionResponse)
    writer.writeCollectionOfObjectValues<ExternalGroup>("value", externalGroupCollectionResponse.value, serializeExternalGroup);
}
export function serializeExternalItem(writer: SerializationWriter, externalItem: ExternalItem | undefined = {} as ExternalItem) : void {
    serializeEntity(writer, externalItem)
    writer.writeCollectionOfObjectValues<Acl>("acl", externalItem.acl, serializeAcl);
    writer.writeCollectionOfObjectValues<ExternalActivity>("activities", externalItem.activities, serializeExternalActivity);
    writer.writeObjectValue<ExternalItemContent>("content", externalItem.content, serializeExternalItemContent);
    writer.writeObjectValue<Properties>("properties", externalItem.properties, serializeProperties);
}
export function serializeExternalItemCollectionResponse(writer: SerializationWriter, externalItemCollectionResponse: ExternalItemCollectionResponse | undefined = {} as ExternalItemCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, externalItemCollectionResponse)
    writer.writeCollectionOfObjectValues<ExternalItem>("value", externalItemCollectionResponse.value, serializeExternalItem);
}
export function serializeExternalItemContent(writer: SerializationWriter, externalItemContent: ExternalItemContent | undefined = {} as ExternalItemContent) : void {
    writer.writeStringValue("@odata.type", externalItemContent.odataType);
    writer.writeEnumValue<ExternalItemContentType>("type", externalItemContent.type);
    writer.writeStringValue("value", externalItemContent.value);
    writer.writeAdditionalData(externalItemContent.additionalData);
}
export function serializeIdentity(writer: SerializationWriter, identity: Identity | undefined = {} as Identity) : void {
    serializeEntity(writer, identity)
    writer.writeEnumValue<Identity_type>("type", identity.type);
}
export function serializeIdentityCollectionResponse(writer: SerializationWriter, identityCollectionResponse: IdentityCollectionResponse | undefined = {} as IdentityCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, identityCollectionResponse)
    writer.writeCollectionOfObjectValues<Identity>("value", identityCollectionResponse.value, serializeIdentity);
}
export function serializeItemIdResolver(writer: SerializationWriter, itemIdResolver: ItemIdResolver | undefined = {} as ItemIdResolver) : void {
    serializeUrlToItemResolverBase(writer, itemIdResolver)
    writer.writeStringValue("itemId", itemIdResolver.itemId);
    writer.writeObjectValue<UrlMatchInfo>("urlMatchInfo", itemIdResolver.urlMatchInfo, serializeUrlMatchInfo);
}
export function serializeProperties(writer: SerializationWriter, properties: Properties | undefined = {} as Properties) : void {
    writer.writeStringValue("@odata.type", properties.odataType);
    writer.writeAdditionalData(properties.additionalData);
}
export function serializeProperty(writer: SerializationWriter, property: Property | undefined = {} as Property) : void {
    writer.writeCollectionOfPrimitiveValues<string>("aliases", property.aliases);
    writer.writeBooleanValue("isQueryable", property.isQueryable);
    writer.writeBooleanValue("isRefinable", property.isRefinable);
    writer.writeBooleanValue("isRetrievable", property.isRetrievable);
    writer.writeBooleanValue("isSearchable", property.isSearchable);
    if(property.labels)
    writer.writeEnumValue<Property_labels>("labels", ...property.labels);
    writer.writeStringValue("name", property.name);
    writer.writeStringValue("@odata.type", property.odataType);
    writer.writeEnumValue<PropertyType>("type", property.type);
    writer.writeAdditionalData(property.additionalData);
}
export function serializePropertyRule(writer: SerializationWriter, propertyRule: PropertyRule | undefined = {} as PropertyRule) : void {
    writer.writeStringValue("@odata.type", propertyRule.odataType);
    writer.writeEnumValue<RuleOperation>("operation", propertyRule.operation);
    writer.writeStringValue("property", propertyRule.property);
    writer.writeCollectionOfPrimitiveValues<string>("values", propertyRule.values);
    writer.writeEnumValue<BinaryOperator>("valuesJoinedBy", propertyRule.valuesJoinedBy);
    writer.writeAdditionalData(propertyRule.additionalData);
}
export function serializeSchema(writer: SerializationWriter, schema: Schema | undefined = {} as Schema) : void {
    serializeEntity(writer, schema)
    writer.writeStringValue("baseType", schema.baseType);
    writer.writeCollectionOfObjectValues<Property>("properties", schema.properties, serializeProperty);
}
export function serializeSearchSettings(writer: SerializationWriter, searchSettings: SearchSettings | undefined = {} as SearchSettings) : void {
    writer.writeStringValue("@odata.type", searchSettings.odataType);
    writer.writeCollectionOfObjectValues<DisplayTemplate>("searchResultTemplates", searchSettings.searchResultTemplates, serializeDisplayTemplate);
    writer.writeAdditionalData(searchSettings.additionalData);
}
export function serializeUrlMatchInfo(writer: SerializationWriter, urlMatchInfo: UrlMatchInfo | undefined = {} as UrlMatchInfo) : void {
    writer.writeCollectionOfPrimitiveValues<string>("baseUrls", urlMatchInfo.baseUrls);
    writer.writeStringValue("@odata.type", urlMatchInfo.odataType);
    writer.writeStringValue("urlPattern", urlMatchInfo.urlPattern);
    writer.writeAdditionalData(urlMatchInfo.additionalData);
}
export function serializeUrlToItemResolverBase(writer: SerializationWriter, urlToItemResolverBase: UrlToItemResolverBase | undefined = {} as UrlToItemResolverBase) : void {
    writer.writeStringValue("@odata.type", urlToItemResolverBase.odataType);
    writer.writeNumberValue("priority", urlToItemResolverBase.priority);
    writer.writeAdditionalData(urlToItemResolverBase.additionalData);
}
export interface UrlMatchInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A list of the URL prefixes that must match URLs to be processed by this URL-to-item-resolver.
     */
    baseUrls?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A regular expression that will be matched towards the URL that is processed by this URL-to-item-resolver. The ECMAScript specification for regular expressions (ECMA-262) is used for the evaluation. The named groups defined by the regular expression will be used later to extract values from the URL.
     */
    urlPattern?: string;
}
export interface UrlToItemResolverBase extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The priority which defines the sequence in which the urlToItemResolverBase instances are evaluated.
     */
    priority?: number;
}
export const AccessTypeObject = {
    Grant: "grant",
    Deny: "deny",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const AclTypeObject = {
    User: "user",
    Group: "group",
    Everyone: "everyone",
    EveryoneExceptGuests: "everyoneExceptGuests",
    ExternalGroup: "externalGroup",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ExternalActivityTypeObject = {
    Viewed: "viewed",
    Modified: "modified",
    Created: "created",
    Commented: "commented",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ExternalItemContentTypeObject = {
    Text: "text",
    Html: "html",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const PropertyTypeObject = {
    String: "string",
    Int64: "int64",
    Double: "double",
    DateTime: "dateTime",
    Boolean: "boolean",
    StringCollection: "stringCollection",
    Int64Collection: "int64Collection",
    DoubleCollection: "doubleCollection",
    DateTimeCollection: "dateTimeCollection",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const RuleOperationObject = {
    Equals: "equals",
    NotEquals: "notEquals",
    Contains: "contains",
    NotContains: "notContains",
    LessThan: "lessThan",
    GreaterThan: "greaterThan",
    StartsWith: "startsWith",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
// tslint:enable
// eslint-enable
