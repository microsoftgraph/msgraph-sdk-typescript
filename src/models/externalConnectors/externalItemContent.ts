// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ExternalItemContentType } from './externalItemContentType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createExternalItemContentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoExternalItemContent;
}
export function deserializeIntoExternalItemContent(externalItemContent: ExternalItemContent | undefined = {} as ExternalItemContent) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { externalItemContent.odataType = n.getStringValue(); },
        "type": n => { externalItemContent.type = n.getEnumValue<ExternalItemContentType>(ExternalItemContentType); },
        "value": n => { externalItemContent.value = n.getStringValue(); },
    }
}
export interface ExternalItemContent extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The type property
     */
    type?: ExternalItemContentType;
    /**
     * The content for the externalItem. Required.
     */
    value?: string;
}
export function serializeExternalItemContent(writer: SerializationWriter, externalItemContent: ExternalItemContent | undefined = {} as ExternalItemContent) : void {
    writer.writeStringValue("@odata.type", externalItemContent.odataType);
    writer.writeEnumValue<ExternalItemContentType>("type", externalItemContent.type);
    writer.writeStringValue("value", externalItemContent.value);
    writer.writeAdditionalData(externalItemContent.additionalData);
}
// tslint:enable
// eslint-enable
