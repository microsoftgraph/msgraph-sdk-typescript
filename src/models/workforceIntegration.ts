// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoChangeTrackedEntity, serializeChangeTrackedEntity, type ChangeTrackedEntity } from './changeTrackedEntity';
import { createWorkforceIntegrationEncryptionFromDiscriminatorValue, serializeWorkforceIntegrationEncryption, type WorkforceIntegrationEncryption } from './workforceIntegrationEncryption';
import { WorkforceIntegrationSupportedEntities } from './workforceIntegrationSupportedEntities';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkforceIntegrationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkforceIntegration;
}
export function deserializeIntoWorkforceIntegration(workforceIntegration: WorkforceIntegration | undefined = {} as WorkforceIntegration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoChangeTrackedEntity(workforceIntegration),
        "apiVersion": n => { workforceIntegration.apiVersion = n.getNumberValue(); },
        "displayName": n => { workforceIntegration.displayName = n.getStringValue(); },
        "encryption": n => { workforceIntegration.encryption = n.getObjectValue<WorkforceIntegrationEncryption>(createWorkforceIntegrationEncryptionFromDiscriminatorValue); },
        "isActive": n => { workforceIntegration.isActive = n.getBooleanValue(); },
        "supportedEntities": n => { workforceIntegration.supportedEntities = n.getCollectionOfEnumValues<WorkforceIntegrationSupportedEntities>(WorkforceIntegrationSupportedEntities); },
        "url": n => { workforceIntegration.url = n.getStringValue(); },
    }
}
export function serializeWorkforceIntegration(writer: SerializationWriter, workforceIntegration: WorkforceIntegration | undefined = {} as WorkforceIntegration) : void {
        serializeChangeTrackedEntity(writer, workforceIntegration)
        writer.writeNumberValue("apiVersion", workforceIntegration.apiVersion);
        writer.writeStringValue("displayName", workforceIntegration.displayName);
        writer.writeObjectValue<WorkforceIntegrationEncryption>("encryption", workforceIntegration.encryption, );
        writer.writeBooleanValue("isActive", workforceIntegration.isActive);
        writer.writeEnumValue<WorkforceIntegrationSupportedEntities[]>("supportedEntities", workforceIntegration.supportedEntities);
        writer.writeStringValue("url", workforceIntegration.url);
}
export interface WorkforceIntegration extends ChangeTrackedEntity, Parsable {
    /**
     * API version for the call back URL. Start with 1.
     */
    apiVersion?: number;
    /**
     * Name of the workforce integration.
     */
    displayName?: string;
    /**
     * The workforce integration encryption resource.
     */
    encryption?: WorkforceIntegrationEncryption;
    /**
     * Indicates whether this workforce integration is currently active and available.
     */
    isActive?: boolean;
    /**
     * The Shifts entities supported for synchronous change notifications. Shifts will make a call back to the url provided on client changes on those entities added here. By default, no entities are supported for change notifications. Possible values are: none, shift, swapRequest, userShiftPreferences, openshift, openShiftRequest, offerShiftRequest, unknownFutureValue.
     */
    supportedEntities?: WorkforceIntegrationSupportedEntities[];
    /**
     * Workforce Integration URL for callbacks from the Shifts service.
     */
    url?: string;
}
// tslint:enable
// eslint-enable
