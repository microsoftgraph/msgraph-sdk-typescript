// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPhysicalOfficeAddressFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPhysicalOfficeAddress;
}
export function deserializeIntoPhysicalOfficeAddress(physicalOfficeAddress: PhysicalOfficeAddress | undefined = {} as PhysicalOfficeAddress) : Record<string, (node: ParseNode) => void> {
    return {
        "city": n => { physicalOfficeAddress.city = n.getStringValue(); },
        "countryOrRegion": n => { physicalOfficeAddress.countryOrRegion = n.getStringValue(); },
        "@odata.type": n => { physicalOfficeAddress.odataType = n.getStringValue(); },
        "officeLocation": n => { physicalOfficeAddress.officeLocation = n.getStringValue(); },
        "postalCode": n => { physicalOfficeAddress.postalCode = n.getStringValue(); },
        "state": n => { physicalOfficeAddress.state = n.getStringValue(); },
        "street": n => { physicalOfficeAddress.street = n.getStringValue(); },
    }
}
export interface PhysicalOfficeAddress extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The city.
     */
    city?: string;
    /**
     * The country or region. It's a free-format string value, for example, 'United States'.
     */
    countryOrRegion?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Office location such as building and office number for an organizational contact.
     */
    officeLocation?: string;
    /**
     * The postal code.
     */
    postalCode?: string;
    /**
     * The state.
     */
    state?: string;
    /**
     * The street.
     */
    street?: string;
}
export function serializePhysicalOfficeAddress(writer: SerializationWriter, physicalOfficeAddress: PhysicalOfficeAddress | undefined = {} as PhysicalOfficeAddress) : void {
    writer.writeStringValue("city", physicalOfficeAddress.city);
    writer.writeStringValue("countryOrRegion", physicalOfficeAddress.countryOrRegion);
    writer.writeStringValue("@odata.type", physicalOfficeAddress.odataType);
    writer.writeStringValue("officeLocation", physicalOfficeAddress.officeLocation);
    writer.writeStringValue("postalCode", physicalOfficeAddress.postalCode);
    writer.writeStringValue("state", physicalOfficeAddress.state);
    writer.writeStringValue("street", physicalOfficeAddress.street);
    writer.writeAdditionalData(physicalOfficeAddress.additionalData);
}
// tslint:enable
// eslint-enable
