// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createStoragePlanInformationFromDiscriminatorValue, serializeStoragePlanInformation, type StoragePlanInformation } from './storagePlanInformation';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createQuotaFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoQuota;
}
export function deserializeIntoQuota(quota: Quota | undefined = {} as Quota) : Record<string, (node: ParseNode) => void> {
    return {
        "deleted": n => { quota.deleted = n.getNumberValue(); },
        "@odata.type": n => { quota.odataType = n.getStringValue(); },
        "remaining": n => { quota.remaining = n.getNumberValue(); },
        "state": n => { quota.state = n.getStringValue(); },
        "storagePlanInformation": n => { quota.storagePlanInformation = n.getObjectValue<StoragePlanInformation>(createStoragePlanInformationFromDiscriminatorValue); },
        "total": n => { quota.total = n.getNumberValue(); },
        "used": n => { quota.used = n.getNumberValue(); },
    }
}
export interface Quota extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Total space consumed by files in the recycle bin, in bytes. Read-only.
     */
    deleted?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Total space remaining before reaching the quota limit, in bytes. Read-only.
     */
    remaining?: number;
    /**
     * Enumeration value that indicates the state of the storage space. Read-only.
     */
    state?: string;
    /**
     * Information about the drive's storage quota plans. Only in Personal OneDrive.
     */
    storagePlanInformation?: StoragePlanInformation;
    /**
     * Total allowed storage space, in bytes. Read-only.
     */
    total?: number;
    /**
     * Total space used, in bytes. Read-only.
     */
    used?: number;
}
export function serializeQuota(writer: SerializationWriter, quota: Quota | undefined = {} as Quota) : void {
    writer.writeNumberValue("deleted", quota.deleted);
    writer.writeStringValue("@odata.type", quota.odataType);
    writer.writeNumberValue("remaining", quota.remaining);
    writer.writeStringValue("state", quota.state);
    writer.writeObjectValue<StoragePlanInformation>("storagePlanInformation", quota.storagePlanInformation, serializeStoragePlanInformation);
    writer.writeNumberValue("total", quota.total);
    writer.writeNumberValue("used", quota.used);
    writer.writeAdditionalData(quota.additionalData);
}
// tslint:enable
// eslint-enable
