// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoCustomTrainingSetting } from './customTrainingSetting';
import { type CustomTrainingSetting, type MicrosoftCustomTrainingSetting, type MicrosoftManagedTrainingSetting, type MicrosoftTrainingAssignmentMapping, type NoTrainingSetting } from './index';
import { deserializeIntoMicrosoftCustomTrainingSetting } from './microsoftCustomTrainingSetting';
import { deserializeIntoMicrosoftManagedTrainingSetting } from './microsoftManagedTrainingSetting';
import { deserializeIntoMicrosoftTrainingAssignmentMapping } from './microsoftTrainingAssignmentMapping';
import { deserializeIntoNoTrainingSetting } from './noTrainingSetting';
import { TrainingSettingType } from './trainingSettingType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTrainingSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.customTrainingSetting":
                    return deserializeIntoCustomTrainingSetting;
                case "#microsoft.graph.microsoftCustomTrainingSetting":
                    return deserializeIntoMicrosoftCustomTrainingSetting;
                case "#microsoft.graph.microsoftManagedTrainingSetting":
                    return deserializeIntoMicrosoftManagedTrainingSetting;
                case "#microsoft.graph.microsoftTrainingAssignmentMapping":
                    return deserializeIntoMicrosoftTrainingAssignmentMapping;
                case "#microsoft.graph.noTrainingSetting":
                    return deserializeIntoNoTrainingSetting;
            }
        }
    }
    return deserializeIntoTrainingSetting;
}
export function deserializeIntoTrainingSetting(trainingSetting: TrainingSetting | undefined = {} as TrainingSetting) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { trainingSetting.odataType = n.getStringValue(); },
        "settingType": n => { trainingSetting.settingType = n.getEnumValue<TrainingSettingType>(TrainingSettingType); },
    }
}
export function serializeTrainingSetting(writer: SerializationWriter, trainingSetting: TrainingSetting | undefined = {} as TrainingSetting) : void {
        writer.writeStringValue("@odata.type", trainingSetting.odataType);
        writer.writeEnumValue<TrainingSettingType>("settingType", trainingSetting.settingType);
        writer.writeAdditionalData(trainingSetting.additionalData);
}
export interface TrainingSetting extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The settingType property
     */
    settingType?: TrainingSettingType;
}
// tslint:enable
// eslint-enable
