// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDeviceComplianceSettingStateFromDiscriminatorValue, serializeDeviceComplianceSettingState, type DeviceComplianceSettingState } from './deviceComplianceSettingState';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { PolicyPlatformType } from './policyPlatformType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceCompliancePolicySettingStateSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceCompliancePolicySettingStateSummary;
}
export function deserializeIntoDeviceCompliancePolicySettingStateSummary(deviceCompliancePolicySettingStateSummary: DeviceCompliancePolicySettingStateSummary | undefined = {} as DeviceCompliancePolicySettingStateSummary) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceCompliancePolicySettingStateSummary),
        "compliantDeviceCount": n => { deviceCompliancePolicySettingStateSummary.compliantDeviceCount = n.getNumberValue(); },
        "conflictDeviceCount": n => { deviceCompliancePolicySettingStateSummary.conflictDeviceCount = n.getNumberValue(); },
        "deviceComplianceSettingStates": n => { deviceCompliancePolicySettingStateSummary.deviceComplianceSettingStates = n.getCollectionOfObjectValues<DeviceComplianceSettingState>(createDeviceComplianceSettingStateFromDiscriminatorValue); },
        "errorDeviceCount": n => { deviceCompliancePolicySettingStateSummary.errorDeviceCount = n.getNumberValue(); },
        "nonCompliantDeviceCount": n => { deviceCompliancePolicySettingStateSummary.nonCompliantDeviceCount = n.getNumberValue(); },
        "notApplicableDeviceCount": n => { deviceCompliancePolicySettingStateSummary.notApplicableDeviceCount = n.getNumberValue(); },
        "platformType": n => { deviceCompliancePolicySettingStateSummary.platformType = n.getEnumValue<PolicyPlatformType>(PolicyPlatformType); },
        "remediatedDeviceCount": n => { deviceCompliancePolicySettingStateSummary.remediatedDeviceCount = n.getNumberValue(); },
        "setting": n => { deviceCompliancePolicySettingStateSummary.setting = n.getStringValue(); },
        "settingName": n => { deviceCompliancePolicySettingStateSummary.settingName = n.getStringValue(); },
        "unknownDeviceCount": n => { deviceCompliancePolicySettingStateSummary.unknownDeviceCount = n.getNumberValue(); },
    }
}
export interface DeviceCompliancePolicySettingStateSummary extends Entity, Parsable {
    /**
     * Number of compliant devices
     */
    compliantDeviceCount?: number;
    /**
     * Number of conflict devices
     */
    conflictDeviceCount?: number;
    /**
     * Not yet documented
     */
    deviceComplianceSettingStates?: DeviceComplianceSettingState[];
    /**
     * Number of error devices
     */
    errorDeviceCount?: number;
    /**
     * Number of NonCompliant devices
     */
    nonCompliantDeviceCount?: number;
    /**
     * Number of not applicable devices
     */
    notApplicableDeviceCount?: number;
    /**
     * Supported platform types for policies.
     */
    platformType?: PolicyPlatformType;
    /**
     * Number of remediated devices
     */
    remediatedDeviceCount?: number;
    /**
     * The setting class name and property name.
     */
    setting?: string;
    /**
     * Name of the setting.
     */
    settingName?: string;
    /**
     * Number of unknown devices
     */
    unknownDeviceCount?: number;
}
export function serializeDeviceCompliancePolicySettingStateSummary(writer: SerializationWriter, deviceCompliancePolicySettingStateSummary: DeviceCompliancePolicySettingStateSummary | undefined = {} as DeviceCompliancePolicySettingStateSummary) : void {
    serializeEntity(writer, deviceCompliancePolicySettingStateSummary)
    writer.writeNumberValue("compliantDeviceCount", deviceCompliancePolicySettingStateSummary.compliantDeviceCount);
    writer.writeNumberValue("conflictDeviceCount", deviceCompliancePolicySettingStateSummary.conflictDeviceCount);
    writer.writeCollectionOfObjectValues<DeviceComplianceSettingState>("deviceComplianceSettingStates", deviceCompliancePolicySettingStateSummary.deviceComplianceSettingStates, serializeDeviceComplianceSettingState);
    writer.writeNumberValue("errorDeviceCount", deviceCompliancePolicySettingStateSummary.errorDeviceCount);
    writer.writeNumberValue("nonCompliantDeviceCount", deviceCompliancePolicySettingStateSummary.nonCompliantDeviceCount);
    writer.writeNumberValue("notApplicableDeviceCount", deviceCompliancePolicySettingStateSummary.notApplicableDeviceCount);
    writer.writeEnumValue<PolicyPlatformType>("platformType", deviceCompliancePolicySettingStateSummary.platformType);
    writer.writeNumberValue("remediatedDeviceCount", deviceCompliancePolicySettingStateSummary.remediatedDeviceCount);
    writer.writeStringValue("setting", deviceCompliancePolicySettingStateSummary.setting);
    writer.writeStringValue("settingName", deviceCompliancePolicySettingStateSummary.settingName);
    writer.writeNumberValue("unknownDeviceCount", deviceCompliancePolicySettingStateSummary.unknownDeviceCount);
}
// tslint:enable
// eslint-enable
