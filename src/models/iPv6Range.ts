// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoIpRange, serializeIpRange, type IpRange } from './ipRange';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIPv6RangeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIPv6Range;
}
export function deserializeIntoIPv6Range(iPv6Range: IPv6Range | undefined = {} as IPv6Range) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIpRange(iPv6Range),
        "lowerAddress": n => { iPv6Range.lowerAddress = n.getStringValue(); },
        "upperAddress": n => { iPv6Range.upperAddress = n.getStringValue(); },
    }
}
export interface IPv6Range extends IpRange, Parsable {
    /**
     * Lower address.
     */
    lowerAddress?: string;
    /**
     * Upper address.
     */
    upperAddress?: string;
}
export function serializeIPv6Range(writer: SerializationWriter, iPv6Range: IPv6Range | undefined = {} as IPv6Range) : void {
    serializeIpRange(writer, iPv6Range)
    writer.writeStringValue("lowerAddress", iPv6Range.lowerAddress);
    writer.writeStringValue("upperAddress", iPv6Range.upperAddress);
}
// tslint:enable
// eslint-enable
