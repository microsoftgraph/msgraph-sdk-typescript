// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type WindowsInformationProtectionDesktopApp, type WindowsInformationProtectionStoreApp } from './index';
import { deserializeIntoWindowsInformationProtectionDesktopApp } from './windowsInformationProtectionDesktopApp';
import { deserializeIntoWindowsInformationProtectionStoreApp } from './windowsInformationProtectionStoreApp';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindowsInformationProtectionAppFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.windowsInformationProtectionDesktopApp":
                    return deserializeIntoWindowsInformationProtectionDesktopApp;
                case "#microsoft.graph.windowsInformationProtectionStoreApp":
                    return deserializeIntoWindowsInformationProtectionStoreApp;
            }
        }
    }
    return deserializeIntoWindowsInformationProtectionApp;
}
export function deserializeIntoWindowsInformationProtectionApp(windowsInformationProtectionApp: WindowsInformationProtectionApp | undefined = {} as WindowsInformationProtectionApp) : Record<string, (node: ParseNode) => void> {
    return {
        "denied": n => { windowsInformationProtectionApp.denied = n.getBooleanValue(); },
        "description": n => { windowsInformationProtectionApp.description = n.getStringValue(); },
        "displayName": n => { windowsInformationProtectionApp.displayName = n.getStringValue(); },
        "@odata.type": n => { windowsInformationProtectionApp.odataType = n.getStringValue(); },
        "productName": n => { windowsInformationProtectionApp.productName = n.getStringValue(); },
        "publisherName": n => { windowsInformationProtectionApp.publisherName = n.getStringValue(); },
    }
}
export function serializeWindowsInformationProtectionApp(writer: SerializationWriter, windowsInformationProtectionApp: WindowsInformationProtectionApp | undefined = {} as WindowsInformationProtectionApp) : void {
    writer.writeBooleanValue("denied", windowsInformationProtectionApp.denied);
    writer.writeStringValue("description", windowsInformationProtectionApp.description);
    writer.writeStringValue("displayName", windowsInformationProtectionApp.displayName);
    writer.writeStringValue("@odata.type", windowsInformationProtectionApp.odataType);
    writer.writeStringValue("productName", windowsInformationProtectionApp.productName);
    writer.writeStringValue("publisherName", windowsInformationProtectionApp.publisherName);
    writer.writeAdditionalData(windowsInformationProtectionApp.additionalData);
}
export interface WindowsInformationProtectionApp extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * If true, app is denied protection or exemption.
     */
    denied?: boolean;
    /**
     * The app's description.
     */
    description?: string;
    /**
     * App display name.
     */
    displayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The product name.
     */
    productName?: string;
    /**
     * The publisher name
     */
    publisherName?: string;
}
// tslint:enable
// eslint-enable
