// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAuthenticationMethodFeatureConfigurationFromDiscriminatorValue, serializeAuthenticationMethodFeatureConfiguration, type AuthenticationMethodFeatureConfiguration } from './authenticationMethodFeatureConfiguration';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMicrosoftAuthenticatorFeatureSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMicrosoftAuthenticatorFeatureSettings;
}
export function deserializeIntoMicrosoftAuthenticatorFeatureSettings(microsoftAuthenticatorFeatureSettings: MicrosoftAuthenticatorFeatureSettings | undefined = {} as MicrosoftAuthenticatorFeatureSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "displayAppInformationRequiredState": n => { microsoftAuthenticatorFeatureSettings.displayAppInformationRequiredState = n.getObjectValue<AuthenticationMethodFeatureConfiguration>(createAuthenticationMethodFeatureConfigurationFromDiscriminatorValue); },
        "displayLocationInformationRequiredState": n => { microsoftAuthenticatorFeatureSettings.displayLocationInformationRequiredState = n.getObjectValue<AuthenticationMethodFeatureConfiguration>(createAuthenticationMethodFeatureConfigurationFromDiscriminatorValue); },
        "@odata.type": n => { microsoftAuthenticatorFeatureSettings.odataType = n.getStringValue(); },
    }
}
export interface MicrosoftAuthenticatorFeatureSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Determines whether the user's Authenticator app shows them the client app they're signing into.
     */
    displayAppInformationRequiredState?: AuthenticationMethodFeatureConfiguration;
    /**
     * Determines whether the user's Authenticator app shows them the geographic location of where the authentication request originated from.
     */
    displayLocationInformationRequiredState?: AuthenticationMethodFeatureConfiguration;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeMicrosoftAuthenticatorFeatureSettings(writer: SerializationWriter, microsoftAuthenticatorFeatureSettings: MicrosoftAuthenticatorFeatureSettings | undefined = {} as MicrosoftAuthenticatorFeatureSettings) : void {
        writer.writeObjectValue<AuthenticationMethodFeatureConfiguration>("displayAppInformationRequiredState", microsoftAuthenticatorFeatureSettings.displayAppInformationRequiredState, serializeAuthenticationMethodFeatureConfiguration);
        writer.writeObjectValue<AuthenticationMethodFeatureConfiguration>("displayLocationInformationRequiredState", microsoftAuthenticatorFeatureSettings.displayLocationInformationRequiredState, serializeAuthenticationMethodFeatureConfiguration);
        writer.writeStringValue("@odata.type", microsoftAuthenticatorFeatureSettings.odataType);
        writer.writeAdditionalData(microsoftAuthenticatorFeatureSettings.additionalData);
}
// tslint:enable
// eslint-enable
