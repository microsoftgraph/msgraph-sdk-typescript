// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTextColumnFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTextColumn;
}
export function deserializeIntoTextColumn(textColumn: TextColumn | undefined = {} as TextColumn) : Record<string, (node: ParseNode) => void> {
    return {
        "allowMultipleLines": n => { textColumn.allowMultipleLines = n.getBooleanValue(); },
        "appendChangesToExistingText": n => { textColumn.appendChangesToExistingText = n.getBooleanValue(); },
        "linesForEditing": n => { textColumn.linesForEditing = n.getNumberValue(); },
        "maxLength": n => { textColumn.maxLength = n.getNumberValue(); },
        "@odata.type": n => { textColumn.odataType = n.getStringValue(); },
        "textType": n => { textColumn.textType = n.getStringValue(); },
    }
}
export function serializeTextColumn(writer: SerializationWriter, textColumn: TextColumn | undefined = {} as TextColumn) : void {
    writer.writeBooleanValue("allowMultipleLines", textColumn.allowMultipleLines);
    writer.writeBooleanValue("appendChangesToExistingText", textColumn.appendChangesToExistingText);
    writer.writeNumberValue("linesForEditing", textColumn.linesForEditing);
    writer.writeNumberValue("maxLength", textColumn.maxLength);
    writer.writeStringValue("@odata.type", textColumn.odataType);
    writer.writeStringValue("textType", textColumn.textType);
    writer.writeAdditionalData(textColumn.additionalData);
}
export interface TextColumn extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Whether to allow multiple lines of text.
     */
    allowMultipleLines?: boolean;
    /**
     * Whether updates to this column should replace existing text, or append to it.
     */
    appendChangesToExistingText?: boolean;
    /**
     * The size of the text box.
     */
    linesForEditing?: number;
    /**
     * The maximum number of characters for the value.
     */
    maxLength?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The type of text being stored. Must be one of plain or richText
     */
    textType?: string;
}
// tslint:enable
// eslint-enable
