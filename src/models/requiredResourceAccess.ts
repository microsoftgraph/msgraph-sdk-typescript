// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createResourceAccessFromDiscriminatorValue, serializeResourceAccess, type ResourceAccess } from './resourceAccess';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRequiredResourceAccessFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRequiredResourceAccess;
}
export function deserializeIntoRequiredResourceAccess(requiredResourceAccess: RequiredResourceAccess | undefined = {} as RequiredResourceAccess) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { requiredResourceAccess.odataType = n.getStringValue(); },
        "resourceAccess": n => { requiredResourceAccess.resourceAccess = n.getCollectionOfObjectValues<ResourceAccess>(createResourceAccessFromDiscriminatorValue); },
        "resourceAppId": n => { requiredResourceAccess.resourceAppId = n.getStringValue(); },
    }
}
export interface RequiredResourceAccess extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The list of OAuth2.0 permission scopes and app roles that the application requires from the specified resource.
     */
    resourceAccess?: ResourceAccess[];
    /**
     * The unique identifier for the resource that the application requires access to. This should be equal to the appId declared on the target resource application.
     */
    resourceAppId?: string;
}
export function serializeRequiredResourceAccess(writer: SerializationWriter, requiredResourceAccess: RequiredResourceAccess | undefined = {} as RequiredResourceAccess) : void {
        writer.writeStringValue("@odata.type", requiredResourceAccess.odataType);
        writer.writeCollectionOfObjectValues<ResourceAccess>("resourceAccess", requiredResourceAccess.resourceAccess, );
        writer.writeStringValue("resourceAppId", requiredResourceAccess.resourceAppId);
        writer.writeAdditionalData(requiredResourceAccess.additionalData);
}
// tslint:enable
// eslint-enable
