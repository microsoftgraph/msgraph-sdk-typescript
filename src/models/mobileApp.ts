// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAndroidLobApp } from './androidLobApp';
import { deserializeIntoAndroidStoreApp } from './androidStoreApp';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type AndroidLobApp, type AndroidStoreApp, type IosiPadOSWebClip, type IosLobApp, type IosStoreApp, type IosVppApp, type MacOSDmgApp, type MacOSLobApp, type MacOSMicrosoftDefenderApp, type MacOSMicrosoftEdgeApp, type MacOSOfficeSuiteApp, type ManagedAndroidLobApp, type ManagedAndroidStoreApp, type ManagedApp, type ManagedIOSLobApp, type ManagedIOSStoreApp, type ManagedMobileLobApp, type MicrosoftStoreForBusinessApp, type MobileLobApp, type WebApp, type Win32LobApp, type WindowsAppX, type WindowsMicrosoftEdgeApp, type WindowsMobileMSI, type WindowsUniversalAppX, type WindowsWebApp } from './index';
import { deserializeIntoIosiPadOSWebClip } from './iosiPadOSWebClip';
import { deserializeIntoIosLobApp } from './iosLobApp';
import { deserializeIntoIosStoreApp } from './iosStoreApp';
import { deserializeIntoIosVppApp } from './iosVppApp';
import { deserializeIntoMacOSDmgApp } from './macOSDmgApp';
import { deserializeIntoMacOSLobApp } from './macOSLobApp';
import { deserializeIntoMacOSMicrosoftDefenderApp } from './macOSMicrosoftDefenderApp';
import { deserializeIntoMacOSMicrosoftEdgeApp } from './macOSMicrosoftEdgeApp';
import { deserializeIntoMacOSOfficeSuiteApp } from './macOSOfficeSuiteApp';
import { deserializeIntoManagedAndroidLobApp } from './managedAndroidLobApp';
import { deserializeIntoManagedAndroidStoreApp } from './managedAndroidStoreApp';
import { deserializeIntoManagedApp } from './managedApp';
import { deserializeIntoManagedIOSLobApp } from './managedIOSLobApp';
import { deserializeIntoManagedIOSStoreApp } from './managedIOSStoreApp';
import { deserializeIntoManagedMobileLobApp } from './managedMobileLobApp';
import { deserializeIntoMicrosoftStoreForBusinessApp } from './microsoftStoreForBusinessApp';
import { createMimeContentFromDiscriminatorValue, serializeMimeContent, type MimeContent } from './mimeContent';
import { createMobileAppAssignmentFromDiscriminatorValue, serializeMobileAppAssignment, type MobileAppAssignment } from './mobileAppAssignment';
import { createMobileAppCategoryFromDiscriminatorValue, serializeMobileAppCategory, type MobileAppCategory } from './mobileAppCategory';
import { MobileAppPublishingState } from './mobileAppPublishingState';
import { deserializeIntoMobileLobApp } from './mobileLobApp';
import { deserializeIntoWebApp } from './webApp';
import { deserializeIntoWin32LobApp } from './win32LobApp';
import { deserializeIntoWindowsAppX } from './windowsAppX';
import { deserializeIntoWindowsMicrosoftEdgeApp } from './windowsMicrosoftEdgeApp';
import { deserializeIntoWindowsMobileMSI } from './windowsMobileMSI';
import { deserializeIntoWindowsUniversalAppX } from './windowsUniversalAppX';
import { deserializeIntoWindowsWebApp } from './windowsWebApp';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMobileAppFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.androidLobApp":
                    return deserializeIntoAndroidLobApp;
                case "#microsoft.graph.androidStoreApp":
                    return deserializeIntoAndroidStoreApp;
                case "#microsoft.graph.iosiPadOSWebClip":
                    return deserializeIntoIosiPadOSWebClip;
                case "#microsoft.graph.iosLobApp":
                    return deserializeIntoIosLobApp;
                case "#microsoft.graph.iosStoreApp":
                    return deserializeIntoIosStoreApp;
                case "#microsoft.graph.iosVppApp":
                    return deserializeIntoIosVppApp;
                case "#microsoft.graph.macOSDmgApp":
                    return deserializeIntoMacOSDmgApp;
                case "#microsoft.graph.macOSLobApp":
                    return deserializeIntoMacOSLobApp;
                case "#microsoft.graph.macOSMicrosoftDefenderApp":
                    return deserializeIntoMacOSMicrosoftDefenderApp;
                case "#microsoft.graph.macOSMicrosoftEdgeApp":
                    return deserializeIntoMacOSMicrosoftEdgeApp;
                case "#microsoft.graph.macOSOfficeSuiteApp":
                    return deserializeIntoMacOSOfficeSuiteApp;
                case "#microsoft.graph.managedAndroidLobApp":
                    return deserializeIntoManagedAndroidLobApp;
                case "#microsoft.graph.managedAndroidStoreApp":
                    return deserializeIntoManagedAndroidStoreApp;
                case "#microsoft.graph.managedApp":
                    return deserializeIntoManagedApp;
                case "#microsoft.graph.managedIOSLobApp":
                    return deserializeIntoManagedIOSLobApp;
                case "#microsoft.graph.managedIOSStoreApp":
                    return deserializeIntoManagedIOSStoreApp;
                case "#microsoft.graph.managedMobileLobApp":
                    return deserializeIntoManagedMobileLobApp;
                case "#microsoft.graph.microsoftStoreForBusinessApp":
                    return deserializeIntoMicrosoftStoreForBusinessApp;
                case "#microsoft.graph.mobileLobApp":
                    return deserializeIntoMobileLobApp;
                case "#microsoft.graph.webApp":
                    return deserializeIntoWebApp;
                case "#microsoft.graph.win32LobApp":
                    return deserializeIntoWin32LobApp;
                case "#microsoft.graph.windowsAppX":
                    return deserializeIntoWindowsAppX;
                case "#microsoft.graph.windowsMicrosoftEdgeApp":
                    return deserializeIntoWindowsMicrosoftEdgeApp;
                case "#microsoft.graph.windowsMobileMSI":
                    return deserializeIntoWindowsMobileMSI;
                case "#microsoft.graph.windowsUniversalAppX":
                    return deserializeIntoWindowsUniversalAppX;
                case "#microsoft.graph.windowsWebApp":
                    return deserializeIntoWindowsWebApp;
            }
        }
    }
    return deserializeIntoMobileApp;
}
export function deserializeIntoMobileApp(mobileApp: MobileApp | undefined = {} as MobileApp) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(mobileApp),
        "assignments": n => { mobileApp.assignments = n.getCollectionOfObjectValues<MobileAppAssignment>(createMobileAppAssignmentFromDiscriminatorValue); },
        "categories": n => { mobileApp.categories = n.getCollectionOfObjectValues<MobileAppCategory>(createMobileAppCategoryFromDiscriminatorValue); },
        "createdDateTime": n => { mobileApp.createdDateTime = n.getDateValue(); },
        "description": n => { mobileApp.description = n.getStringValue(); },
        "developer": n => { mobileApp.developer = n.getStringValue(); },
        "displayName": n => { mobileApp.displayName = n.getStringValue(); },
        "informationUrl": n => { mobileApp.informationUrl = n.getStringValue(); },
        "isFeatured": n => { mobileApp.isFeatured = n.getBooleanValue(); },
        "largeIcon": n => { mobileApp.largeIcon = n.getObjectValue<MimeContent>(createMimeContentFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { mobileApp.lastModifiedDateTime = n.getDateValue(); },
        "notes": n => { mobileApp.notes = n.getStringValue(); },
        "owner": n => { mobileApp.owner = n.getStringValue(); },
        "privacyInformationUrl": n => { mobileApp.privacyInformationUrl = n.getStringValue(); },
        "publisher": n => { mobileApp.publisher = n.getStringValue(); },
        "publishingState": n => { mobileApp.publishingState = n.getEnumValue<MobileAppPublishingState>(MobileAppPublishingState); },
    }
}
export interface MobileApp extends Entity, Parsable {
    /**
     * The list of group assignments for this mobile app.
     */
    assignments?: MobileAppAssignment[];
    /**
     * The list of categories for this app.
     */
    categories?: MobileAppCategory[];
    /**
     * The date and time the app was created.
     */
    createdDateTime?: Date;
    /**
     * The description of the app.
     */
    description?: string;
    /**
     * The developer of the app.
     */
    developer?: string;
    /**
     * The admin provided or imported title of the app.
     */
    displayName?: string;
    /**
     * The more information Url.
     */
    informationUrl?: string;
    /**
     * The value indicating whether the app is marked as featured by the admin.
     */
    isFeatured?: boolean;
    /**
     * The large icon, to be displayed in the app details and used for upload of the icon.
     */
    largeIcon?: MimeContent;
    /**
     * The date and time the app was last modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * Notes for the app.
     */
    notes?: string;
    /**
     * The owner of the app.
     */
    owner?: string;
    /**
     * The privacy statement Url.
     */
    privacyInformationUrl?: string;
    /**
     * The publisher of the app.
     */
    publisher?: string;
    /**
     * Indicates the publishing state of an app.
     */
    publishingState?: MobileAppPublishingState;
}
export function serializeMobileApp(writer: SerializationWriter, mobileApp: MobileApp | undefined = {} as MobileApp) : void {
        serializeEntity(writer, mobileApp)
        writer.writeCollectionOfObjectValues<MobileAppAssignment>("assignments", mobileApp.assignments, );
        writer.writeCollectionOfObjectValues<MobileAppCategory>("categories", mobileApp.categories, );
        writer.writeDateValue("createdDateTime", mobileApp.createdDateTime);
        writer.writeStringValue("description", mobileApp.description);
        writer.writeStringValue("developer", mobileApp.developer);
        writer.writeStringValue("displayName", mobileApp.displayName);
        writer.writeStringValue("informationUrl", mobileApp.informationUrl);
        writer.writeBooleanValue("isFeatured", mobileApp.isFeatured);
        writer.writeObjectValue<MimeContent>("largeIcon", mobileApp.largeIcon, );
        writer.writeDateValue("lastModifiedDateTime", mobileApp.lastModifiedDateTime);
        writer.writeStringValue("notes", mobileApp.notes);
        writer.writeStringValue("owner", mobileApp.owner);
        writer.writeStringValue("privacyInformationUrl", mobileApp.privacyInformationUrl);
        writer.writeStringValue("publisher", mobileApp.publisher);
        writer.writeEnumValue<MobileAppPublishingState>("publishingState", mobileApp.publishingState);
}
// tslint:enable
// eslint-enable
