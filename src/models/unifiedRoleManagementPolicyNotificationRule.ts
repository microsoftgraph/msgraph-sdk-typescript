// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoUnifiedRoleManagementPolicyRule, serializeUnifiedRoleManagementPolicyRule, type UnifiedRoleManagementPolicyRule } from './unifiedRoleManagementPolicyRule';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleManagementPolicyNotificationRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRoleManagementPolicyNotificationRule;
}
export function deserializeIntoUnifiedRoleManagementPolicyNotificationRule(unifiedRoleManagementPolicyNotificationRule: UnifiedRoleManagementPolicyNotificationRule | undefined = {} as UnifiedRoleManagementPolicyNotificationRule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoUnifiedRoleManagementPolicyRule(unifiedRoleManagementPolicyNotificationRule),
        "isDefaultRecipientsEnabled": n => { unifiedRoleManagementPolicyNotificationRule.isDefaultRecipientsEnabled = n.getBooleanValue(); },
        "notificationLevel": n => { unifiedRoleManagementPolicyNotificationRule.notificationLevel = n.getStringValue(); },
        "notificationRecipients": n => { unifiedRoleManagementPolicyNotificationRule.notificationRecipients = n.getCollectionOfPrimitiveValues<string>(); },
        "notificationType": n => { unifiedRoleManagementPolicyNotificationRule.notificationType = n.getStringValue(); },
        "recipientType": n => { unifiedRoleManagementPolicyNotificationRule.recipientType = n.getStringValue(); },
    }
}
export function serializeUnifiedRoleManagementPolicyNotificationRule(writer: SerializationWriter, unifiedRoleManagementPolicyNotificationRule: UnifiedRoleManagementPolicyNotificationRule | undefined = {} as UnifiedRoleManagementPolicyNotificationRule) : void {
        serializeUnifiedRoleManagementPolicyRule(writer, unifiedRoleManagementPolicyNotificationRule)
        writer.writeBooleanValue("isDefaultRecipientsEnabled", unifiedRoleManagementPolicyNotificationRule.isDefaultRecipientsEnabled);
        writer.writeStringValue("notificationLevel", unifiedRoleManagementPolicyNotificationRule.notificationLevel);
        writer.writeCollectionOfPrimitiveValues<string>("notificationRecipients", unifiedRoleManagementPolicyNotificationRule.notificationRecipients);
        writer.writeStringValue("notificationType", unifiedRoleManagementPolicyNotificationRule.notificationType);
        writer.writeStringValue("recipientType", unifiedRoleManagementPolicyNotificationRule.recipientType);
}
export interface UnifiedRoleManagementPolicyNotificationRule extends Parsable, UnifiedRoleManagementPolicyRule {
    /**
     * Indicates whether a default recipient will receive the notification email.
     */
    isDefaultRecipientsEnabled?: boolean;
    /**
     * The level of notification. The possible values are None, Critical, All.
     */
    notificationLevel?: string;
    /**
     * The list of recipients of the email notifications.
     */
    notificationRecipients?: string[];
    /**
     * The type of notification. Only Email is supported.
     */
    notificationType?: string;
    /**
     * The type of recipient of the notification. The possible values are Requestor, Approver, Admin.
     */
    recipientType?: string;
}
// tslint:enable
// eslint-enable
