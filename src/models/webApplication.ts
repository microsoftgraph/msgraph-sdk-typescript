// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createImplicitGrantSettingsFromDiscriminatorValue, serializeImplicitGrantSettings, type ImplicitGrantSettings } from './implicitGrantSettings';
import { createRedirectUriSettingsFromDiscriminatorValue, serializeRedirectUriSettings, type RedirectUriSettings } from './redirectUriSettings';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWebApplicationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWebApplication;
}
export function deserializeIntoWebApplication(webApplication: WebApplication | undefined = {} as WebApplication) : Record<string, (node: ParseNode) => void> {
    return {
        "homePageUrl": n => { webApplication.homePageUrl = n.getStringValue(); },
        "implicitGrantSettings": n => { webApplication.implicitGrantSettings = n.getObjectValue<ImplicitGrantSettings>(createImplicitGrantSettingsFromDiscriminatorValue); },
        "logoutUrl": n => { webApplication.logoutUrl = n.getStringValue(); },
        "@odata.type": n => { webApplication.odataType = n.getStringValue(); },
        "redirectUris": n => { webApplication.redirectUris = n.getCollectionOfPrimitiveValues<string>(); },
        "redirectUriSettings": n => { webApplication.redirectUriSettings = n.getCollectionOfObjectValues<RedirectUriSettings>(createRedirectUriSettingsFromDiscriminatorValue); },
    }
}
export function serializeWebApplication(writer: SerializationWriter, webApplication: WebApplication | undefined = {} as WebApplication) : void {
    writer.writeStringValue("homePageUrl", webApplication.homePageUrl);
    writer.writeObjectValue<ImplicitGrantSettings>("implicitGrantSettings", webApplication.implicitGrantSettings, serializeImplicitGrantSettings);
    writer.writeStringValue("logoutUrl", webApplication.logoutUrl);
    writer.writeStringValue("@odata.type", webApplication.odataType);
    writer.writeCollectionOfPrimitiveValues<string>("redirectUris", webApplication.redirectUris);
    writer.writeCollectionOfObjectValues<RedirectUriSettings>("redirectUriSettings", webApplication.redirectUriSettings, serializeRedirectUriSettings);
    writer.writeAdditionalData(webApplication.additionalData);
}
export interface WebApplication extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Home page or landing page of the application.
     */
    homePageUrl?: string;
    /**
     * Specifies whether this web application can request tokens using the OAuth 2.0 implicit flow.
     */
    implicitGrantSettings?: ImplicitGrantSettings;
    /**
     * Specifies the URL that is used by Microsoft's authorization service to log out a user using front-channel, back-channel or SAML logout protocols.
     */
    logoutUrl?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies the URLs where user tokens are sent for sign-in, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent.
     */
    redirectUris?: string[];
    /**
     * The redirectUriSettings property
     */
    redirectUriSettings?: RedirectUriSettings[];
}
// tslint:enable
// eslint-enable
