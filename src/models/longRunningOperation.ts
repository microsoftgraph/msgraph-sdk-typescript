// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAttackSimulationOperation } from './attackSimulationOperation';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type AttackSimulationOperation, type RichLongRunningOperation } from './index';
import { LongRunningOperationStatus } from './longRunningOperationStatus';
import { deserializeIntoRichLongRunningOperation } from './richLongRunningOperation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLongRunningOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.attackSimulationOperation":
                    return deserializeIntoAttackSimulationOperation;
                case "#microsoft.graph.richLongRunningOperation":
                    return deserializeIntoRichLongRunningOperation;
            }
        }
    }
    return deserializeIntoLongRunningOperation;
}
export function deserializeIntoLongRunningOperation(longRunningOperation: LongRunningOperation | undefined = {} as LongRunningOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(longRunningOperation),
        "createdDateTime": n => { longRunningOperation.createdDateTime = n.getDateValue(); },
        "lastActionDateTime": n => { longRunningOperation.lastActionDateTime = n.getDateValue(); },
        "resourceLocation": n => { longRunningOperation.resourceLocation = n.getStringValue(); },
        "status": n => { longRunningOperation.status = n.getEnumValue<LongRunningOperationStatus>(LongRunningOperationStatus); },
        "statusDetail": n => { longRunningOperation.statusDetail = n.getStringValue(); },
    }
}
export interface LongRunningOperation extends Entity, Parsable {
    /**
     * The start time of the operation. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date;
    /**
     * The time of the last action in the operation. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastActionDateTime?: Date;
    /**
     * URI of the resource that the operation is performed on.
     */
    resourceLocation?: string;
    /**
     * The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue.
     */
    status?: LongRunningOperationStatus;
    /**
     * Details about the status of the operation.
     */
    statusDetail?: string;
}
export function serializeLongRunningOperation(writer: SerializationWriter, longRunningOperation: LongRunningOperation | undefined = {} as LongRunningOperation) : void {
    serializeEntity(writer, longRunningOperation)
    writer.writeDateValue("createdDateTime", longRunningOperation.createdDateTime);
    writer.writeDateValue("lastActionDateTime", longRunningOperation.lastActionDateTime);
    writer.writeStringValue("resourceLocation", longRunningOperation.resourceLocation);
    writer.writeEnumValue<LongRunningOperationStatus>("status", longRunningOperation.status);
    writer.writeStringValue("statusDetail", longRunningOperation.statusDetail);
}
// tslint:enable
// eslint-enable
