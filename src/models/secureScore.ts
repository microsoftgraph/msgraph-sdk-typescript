// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAverageComparativeScoreFromDiscriminatorValue, serializeAverageComparativeScore, type AverageComparativeScore } from './averageComparativeScore';
import { createControlScoreFromDiscriminatorValue, serializeControlScore, type ControlScore } from './controlScore';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createSecurityVendorInformationFromDiscriminatorValue, serializeSecurityVendorInformation, type SecurityVendorInformation } from './securityVendorInformation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSecureScoreFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSecureScore;
}
export function deserializeIntoSecureScore(secureScore: SecureScore | undefined = {} as SecureScore) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(secureScore),
        "activeUserCount": n => { secureScore.activeUserCount = n.getNumberValue(); },
        "averageComparativeScores": n => { secureScore.averageComparativeScores = n.getCollectionOfObjectValues<AverageComparativeScore>(createAverageComparativeScoreFromDiscriminatorValue); },
        "azureTenantId": n => { secureScore.azureTenantId = n.getStringValue(); },
        "controlScores": n => { secureScore.controlScores = n.getCollectionOfObjectValues<ControlScore>(createControlScoreFromDiscriminatorValue); },
        "createdDateTime": n => { secureScore.createdDateTime = n.getDateValue(); },
        "currentScore": n => { secureScore.currentScore = n.getNumberValue(); },
        "enabledServices": n => { secureScore.enabledServices = n.getCollectionOfPrimitiveValues<string>(); },
        "licensedUserCount": n => { secureScore.licensedUserCount = n.getNumberValue(); },
        "maxScore": n => { secureScore.maxScore = n.getNumberValue(); },
        "vendorInformation": n => { secureScore.vendorInformation = n.getObjectValue<SecurityVendorInformation>(createSecurityVendorInformationFromDiscriminatorValue); },
    }
}
export interface SecureScore extends Entity, Parsable {
    /**
     * Active user count of the given tenant.
     */
    activeUserCount?: number;
    /**
     * Average score by different scopes (for example, average by industry, average by seating) and control category (Identity, Data, Device, Apps, Infrastructure) within the scope.
     */
    averageComparativeScores?: AverageComparativeScore[];
    /**
     * GUID string for tenant ID.
     */
    azureTenantId?: string;
    /**
     * Contains tenant scores for a set of controls.
     */
    controlScores?: ControlScore[];
    /**
     * The date when the entity is created.
     */
    createdDateTime?: Date;
    /**
     * Tenant current attained score on specified date.
     */
    currentScore?: number;
    /**
     * Microsoft-provided services for the tenant (for example, Exchange online, Skype, Sharepoint).
     */
    enabledServices?: string[];
    /**
     * Licensed user count of the given tenant.
     */
    licensedUserCount?: number;
    /**
     * Tenant maximum possible score on specified date.
     */
    maxScore?: number;
    /**
     * Complex type containing details about the security product/service vendor, provider, and subprovider (for example, vendor=Microsoft; provider=SecureScore). Required.
     */
    vendorInformation?: SecurityVendorInformation;
}
export function serializeSecureScore(writer: SerializationWriter, secureScore: SecureScore | undefined = {} as SecureScore) : void {
        serializeEntity(writer, secureScore)
        writer.writeNumberValue("activeUserCount", secureScore.activeUserCount);
        writer.writeCollectionOfObjectValues<AverageComparativeScore>("averageComparativeScores", secureScore.averageComparativeScores, serializeAverageComparativeScore);
        writer.writeStringValue("azureTenantId", secureScore.azureTenantId);
        writer.writeCollectionOfObjectValues<ControlScore>("controlScores", secureScore.controlScores, serializeControlScore);
        writer.writeDateValue("createdDateTime", secureScore.createdDateTime);
        writer.writeNumberValue("currentScore", secureScore.currentScore);
        writer.writeCollectionOfPrimitiveValues<string>("enabledServices", secureScore.enabledServices);
        writer.writeNumberValue("licensedUserCount", secureScore.licensedUserCount);
        writer.writeNumberValue("maxScore", secureScore.maxScore);
        writer.writeObjectValue<SecurityVendorInformation>("vendorInformation", secureScore.vendorInformation, serializeSecurityVendorInformation);
}
// tslint:enable
// eslint-enable
