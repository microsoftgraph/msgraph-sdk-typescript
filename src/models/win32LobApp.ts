// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoMobileLobApp, serializeMobileLobApp, type MobileLobApp } from './mobileLobApp';
import { createWin32LobAppInstallExperienceFromDiscriminatorValue, serializeWin32LobAppInstallExperience, type Win32LobAppInstallExperience } from './win32LobAppInstallExperience';
import { createWin32LobAppMsiInformationFromDiscriminatorValue, serializeWin32LobAppMsiInformation, type Win32LobAppMsiInformation } from './win32LobAppMsiInformation';
import { createWin32LobAppReturnCodeFromDiscriminatorValue, serializeWin32LobAppReturnCode, type Win32LobAppReturnCode } from './win32LobAppReturnCode';
import { createWin32LobAppRuleFromDiscriminatorValue, serializeWin32LobAppRule, type Win32LobAppRule } from './win32LobAppRule';
import { WindowsArchitecture } from './windowsArchitecture';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWin32LobAppFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWin32LobApp;
}
export function deserializeIntoWin32LobApp(win32LobApp: Win32LobApp | undefined = {} as Win32LobApp) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMobileLobApp(win32LobApp),
        "applicableArchitectures": n => { win32LobApp.applicableArchitectures = n.getCollectionOfEnumValues<WindowsArchitecture>(WindowsArchitecture); },
        "installCommandLine": n => { win32LobApp.installCommandLine = n.getStringValue(); },
        "installExperience": n => { win32LobApp.installExperience = n.getObjectValue<Win32LobAppInstallExperience>(createWin32LobAppInstallExperienceFromDiscriminatorValue); },
        "minimumCpuSpeedInMHz": n => { win32LobApp.minimumCpuSpeedInMHz = n.getNumberValue(); },
        "minimumFreeDiskSpaceInMB": n => { win32LobApp.minimumFreeDiskSpaceInMB = n.getNumberValue(); },
        "minimumMemoryInMB": n => { win32LobApp.minimumMemoryInMB = n.getNumberValue(); },
        "minimumNumberOfProcessors": n => { win32LobApp.minimumNumberOfProcessors = n.getNumberValue(); },
        "minimumSupportedWindowsRelease": n => { win32LobApp.minimumSupportedWindowsRelease = n.getStringValue(); },
        "msiInformation": n => { win32LobApp.msiInformation = n.getObjectValue<Win32LobAppMsiInformation>(createWin32LobAppMsiInformationFromDiscriminatorValue); },
        "returnCodes": n => { win32LobApp.returnCodes = n.getCollectionOfObjectValues<Win32LobAppReturnCode>(createWin32LobAppReturnCodeFromDiscriminatorValue); },
        "rules": n => { win32LobApp.rules = n.getCollectionOfObjectValues<Win32LobAppRule>(createWin32LobAppRuleFromDiscriminatorValue); },
        "setupFilePath": n => { win32LobApp.setupFilePath = n.getStringValue(); },
        "uninstallCommandLine": n => { win32LobApp.uninstallCommandLine = n.getStringValue(); },
    }
}
export function serializeWin32LobApp(writer: SerializationWriter, win32LobApp: Win32LobApp | undefined = {} as Win32LobApp) : void {
    serializeMobileLobApp(writer, win32LobApp)
    writer.writeEnumValue<WindowsArchitecture[]>("applicableArchitectures", win32LobApp.applicableArchitectures);
    writer.writeStringValue("installCommandLine", win32LobApp.installCommandLine);
    writer.writeObjectValue<Win32LobAppInstallExperience>("installExperience", win32LobApp.installExperience, serializeWin32LobAppInstallExperience);
    writer.writeNumberValue("minimumCpuSpeedInMHz", win32LobApp.minimumCpuSpeedInMHz);
    writer.writeNumberValue("minimumFreeDiskSpaceInMB", win32LobApp.minimumFreeDiskSpaceInMB);
    writer.writeNumberValue("minimumMemoryInMB", win32LobApp.minimumMemoryInMB);
    writer.writeNumberValue("minimumNumberOfProcessors", win32LobApp.minimumNumberOfProcessors);
    writer.writeStringValue("minimumSupportedWindowsRelease", win32LobApp.minimumSupportedWindowsRelease);
    writer.writeObjectValue<Win32LobAppMsiInformation>("msiInformation", win32LobApp.msiInformation, serializeWin32LobAppMsiInformation);
    writer.writeCollectionOfObjectValues<Win32LobAppReturnCode>("returnCodes", win32LobApp.returnCodes, serializeWin32LobAppReturnCode);
    writer.writeCollectionOfObjectValues<Win32LobAppRule>("rules", win32LobApp.rules, serializeWin32LobAppRule);
    writer.writeStringValue("setupFilePath", win32LobApp.setupFilePath);
    writer.writeStringValue("uninstallCommandLine", win32LobApp.uninstallCommandLine);
}
export interface Win32LobApp extends MobileLobApp, Parsable {
    /**
     * Contains properties for Windows architecture.
     */
    applicableArchitectures?: WindowsArchitecture[];
    /**
     * The command line to install this app
     */
    installCommandLine?: string;
    /**
     * The install experience for this app.
     */
    installExperience?: Win32LobAppInstallExperience;
    /**
     * The value for the minimum CPU speed which is required to install this app.
     */
    minimumCpuSpeedInMHz?: number;
    /**
     * The value for the minimum free disk space which is required to install this app.
     */
    minimumFreeDiskSpaceInMB?: number;
    /**
     * The value for the minimum physical memory which is required to install this app.
     */
    minimumMemoryInMB?: number;
    /**
     * The value for the minimum number of processors which is required to install this app.
     */
    minimumNumberOfProcessors?: number;
    /**
     * The value for the minimum supported windows release.
     */
    minimumSupportedWindowsRelease?: string;
    /**
     * The MSI details if this Win32 app is an MSI app.
     */
    msiInformation?: Win32LobAppMsiInformation;
    /**
     * The return codes for post installation behavior.
     */
    returnCodes?: Win32LobAppReturnCode[];
    /**
     * The detection and requirement rules for this app.
     */
    rules?: Win32LobAppRule[];
    /**
     * The relative path of the setup file in the encrypted Win32LobApp package.
     */
    setupFilePath?: string;
    /**
     * The command line to uninstall this app
     */
    uninstallCommandLine?: string;
}
// tslint:enable
// eslint-enable
