// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createSubjectSetFromDiscriminatorValue, serializeSubjectSet, type SubjectSet } from './subjectSet';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedApprovalStageFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedApprovalStage;
}
export function deserializeIntoUnifiedApprovalStage(unifiedApprovalStage: UnifiedApprovalStage | undefined = {} as UnifiedApprovalStage) : Record<string, (node: ParseNode) => void> {
    return {
        "approvalStageTimeOutInDays": n => { unifiedApprovalStage.approvalStageTimeOutInDays = n.getNumberValue(); },
        "escalationApprovers": n => { unifiedApprovalStage.escalationApprovers = n.getCollectionOfObjectValues<SubjectSet>(createSubjectSetFromDiscriminatorValue); },
        "escalationTimeInMinutes": n => { unifiedApprovalStage.escalationTimeInMinutes = n.getNumberValue(); },
        "isApproverJustificationRequired": n => { unifiedApprovalStage.isApproverJustificationRequired = n.getBooleanValue(); },
        "isEscalationEnabled": n => { unifiedApprovalStage.isEscalationEnabled = n.getBooleanValue(); },
        "@odata.type": n => { unifiedApprovalStage.odataType = n.getStringValue(); },
        "primaryApprovers": n => { unifiedApprovalStage.primaryApprovers = n.getCollectionOfObjectValues<SubjectSet>(createSubjectSetFromDiscriminatorValue); },
    }
}
export function serializeUnifiedApprovalStage(writer: SerializationWriter, unifiedApprovalStage: UnifiedApprovalStage | undefined = {} as UnifiedApprovalStage) : void {
        writer.writeNumberValue("approvalStageTimeOutInDays", unifiedApprovalStage.approvalStageTimeOutInDays);
        writer.writeCollectionOfObjectValues<SubjectSet>("escalationApprovers", unifiedApprovalStage.escalationApprovers, serializeSubjectSet);
        writer.writeNumberValue("escalationTimeInMinutes", unifiedApprovalStage.escalationTimeInMinutes);
        writer.writeBooleanValue("isApproverJustificationRequired", unifiedApprovalStage.isApproverJustificationRequired);
        writer.writeBooleanValue("isEscalationEnabled", unifiedApprovalStage.isEscalationEnabled);
        writer.writeStringValue("@odata.type", unifiedApprovalStage.odataType);
        writer.writeCollectionOfObjectValues<SubjectSet>("primaryApprovers", unifiedApprovalStage.primaryApprovers, serializeSubjectSet);
        writer.writeAdditionalData(unifiedApprovalStage.additionalData);
}
export interface UnifiedApprovalStage extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The number of days that a request can be pending a response before it is automatically denied.
     */
    approvalStageTimeOutInDays?: number;
    /**
     * The escalation approvers for this stage when the primary approvers don't respond.
     */
    escalationApprovers?: SubjectSet[];
    /**
     * The time a request can be pending a response from a primary approver before it can be escalated to the escalation approvers.
     */
    escalationTimeInMinutes?: number;
    /**
     * Indicates whether the approver must provide justification for their reponse.
     */
    isApproverJustificationRequired?: boolean;
    /**
     * Indicates whether escalation if enabled.
     */
    isEscalationEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The primary approvers of this stage.
     */
    primaryApprovers?: SubjectSet[];
}
// tslint:enable
// eslint-enable
