// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDaylightTimeZoneOffsetFromDiscriminatorValue, serializeDaylightTimeZoneOffset, type DaylightTimeZoneOffset } from './daylightTimeZoneOffset';
import { createStandardTimeZoneOffsetFromDiscriminatorValue, serializeStandardTimeZoneOffset, type StandardTimeZoneOffset } from './standardTimeZoneOffset';
import { deserializeIntoTimeZoneBase, serializeTimeZoneBase, type TimeZoneBase } from './timeZoneBase';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCustomTimeZoneFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCustomTimeZone;
}
export interface CustomTimeZone extends Parsable, TimeZoneBase {
    /**
     * The time offset of the time zone from Coordinated Universal Time (UTC). This value is in minutes.Â Time zones that are ahead of UTC have a positive offset; time zones that are behind UTC have a negative offset.
     */
    bias?: number;
    /**
     * Specifies when the time zone switches from standard time to daylight saving time.
     */
    daylightOffset?: DaylightTimeZoneOffset;
    /**
     * Specifies when the time zone switches from daylight saving time to standard time.
     */
    standardOffset?: StandardTimeZoneOffset;
}
export function deserializeIntoCustomTimeZone(customTimeZone: CustomTimeZone | undefined = {} as CustomTimeZone) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoTimeZoneBase(customTimeZone),
        "bias": n => { customTimeZone.bias = n.getNumberValue(); },
        "daylightOffset": n => { customTimeZone.daylightOffset = n.getObjectValue<DaylightTimeZoneOffset>(createDaylightTimeZoneOffsetFromDiscriminatorValue); },
        "standardOffset": n => { customTimeZone.standardOffset = n.getObjectValue<StandardTimeZoneOffset>(createStandardTimeZoneOffsetFromDiscriminatorValue); },
    }
}
export function serializeCustomTimeZone(writer: SerializationWriter, customTimeZone: CustomTimeZone | undefined = {} as CustomTimeZone) : void {
    serializeTimeZoneBase(writer, customTimeZone)
    writer.writeNumberValue("bias", customTimeZone.bias);
    writer.writeObjectValue<DaylightTimeZoneOffset>("daylightOffset", customTimeZone.daylightOffset, serializeDaylightTimeZoneOffset);
    writer.writeObjectValue<StandardTimeZoneOffset>("standardOffset", customTimeZone.standardOffset, serializeStandardTimeZoneOffset);
}
// tslint:enable
// eslint-enable
