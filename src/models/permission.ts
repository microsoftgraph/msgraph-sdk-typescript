// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { createItemReferenceFromDiscriminatorValue, serializeItemReference, type ItemReference } from './itemReference';
import { createSharePointIdentitySetFromDiscriminatorValue, serializeSharePointIdentitySet, type SharePointIdentitySet } from './sharePointIdentitySet';
import { createSharingInvitationFromDiscriminatorValue, serializeSharingInvitation, type SharingInvitation } from './sharingInvitation';
import { createSharingLinkFromDiscriminatorValue, serializeSharingLink, type SharingLink } from './sharingLink';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPermissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPermission;
}
export function deserializeIntoPermission(permission: Permission | undefined = {} as Permission) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(permission),
        "expirationDateTime": n => { permission.expirationDateTime = n.getDateValue(); },
        "grantedTo": n => { permission.grantedTo = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "grantedToIdentities": n => { permission.grantedToIdentities = n.getCollectionOfObjectValues<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "grantedToIdentitiesV2": n => { permission.grantedToIdentitiesV2 = n.getCollectionOfObjectValues<SharePointIdentitySet>(createSharePointIdentitySetFromDiscriminatorValue); },
        "grantedToV2": n => { permission.grantedToV2 = n.getObjectValue<SharePointIdentitySet>(createSharePointIdentitySetFromDiscriminatorValue); },
        "hasPassword": n => { permission.hasPassword = n.getBooleanValue(); },
        "inheritedFrom": n => { permission.inheritedFrom = n.getObjectValue<ItemReference>(createItemReferenceFromDiscriminatorValue); },
        "invitation": n => { permission.invitation = n.getObjectValue<SharingInvitation>(createSharingInvitationFromDiscriminatorValue); },
        "link": n => { permission.link = n.getObjectValue<SharingLink>(createSharingLinkFromDiscriminatorValue); },
        "roles": n => { permission.roles = n.getCollectionOfPrimitiveValues<string>(); },
        "shareId": n => { permission.shareId = n.getStringValue(); },
    }
}
export interface Permission extends Entity, Parsable {
    /**
     * A format of yyyy-MM-ddTHH:mm:ssZ of DateTimeOffset indicates the expiration time of the permission. DateTime.MinValue indicates there's no expiration set for this permission. Optional.
     */
    expirationDateTime?: Date;
    /**
     * The grantedTo property
     */
    grantedTo?: IdentitySet;
    /**
     * The grantedToIdentities property
     */
    grantedToIdentities?: IdentitySet[];
    /**
     * For link type permissions, the details of the users to whom permission was granted. Read-only.
     */
    grantedToIdentitiesV2?: SharePointIdentitySet[];
    /**
     * For user type permissions, the details of the users and applications for this permission. Read-only.
     */
    grantedToV2?: SharePointIdentitySet;
    /**
     * Indicates whether the password is set for this permission. This property only appears in the response. Optional. Read-only. For OneDrive Personal only..
     */
    hasPassword?: boolean;
    /**
     * Provides a reference to the ancestor of the current permission, if it's inherited from an ancestor. Read-only.
     */
    inheritedFrom?: ItemReference;
    /**
     * Details of any associated sharing invitation for this permission. Read-only.
     */
    invitation?: SharingInvitation;
    /**
     * Provides the link details of the current permission, if it's a link type permission. Read-only.
     */
    link?: SharingLink;
    /**
     * The type of permission, for example, read. See below for the full list of roles. Read-only.
     */
    roles?: string[];
    /**
     * A unique token that can be used to access this shared item via the shares API. Read-only.
     */
    shareId?: string;
}
export function serializePermission(writer: SerializationWriter, permission: Permission | undefined = {} as Permission) : void {
        serializeEntity(writer, permission)
        writer.writeDateValue("expirationDateTime", permission.expirationDateTime);
        writer.writeObjectValue<IdentitySet>("grantedTo", permission.grantedTo, serializeIdentitySet);
        writer.writeCollectionOfObjectValues<IdentitySet>("grantedToIdentities", permission.grantedToIdentities, serializeIdentitySet);
        writer.writeCollectionOfObjectValues<SharePointIdentitySet>("grantedToIdentitiesV2", permission.grantedToIdentitiesV2, serializeSharePointIdentitySet);
        writer.writeObjectValue<SharePointIdentitySet>("grantedToV2", permission.grantedToV2, serializeSharePointIdentitySet);
        writer.writeBooleanValue("hasPassword", permission.hasPassword);
        writer.writeObjectValue<ItemReference>("inheritedFrom", permission.inheritedFrom, serializeItemReference);
        writer.writeObjectValue<SharingInvitation>("invitation", permission.invitation, serializeSharingInvitation);
        writer.writeObjectValue<SharingLink>("link", permission.link, serializeSharingLink);
        writer.writeCollectionOfPrimitiveValues<string>("roles", permission.roles);
        writer.writeStringValue("shareId", permission.shareId);
}
// tslint:enable
// eslint-enable
