import { createTrainingFromDiscriminatorValue, serializeTraining, type Training } from './training';
import { TrainingAssignedTo } from './trainingAssignedTo';
import { deserializeIntoTrainingSetting, serializeTrainingSetting, type TrainingSetting } from './trainingSetting';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createMicrosoftTrainingAssignmentMappingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMicrosoftTrainingAssignmentMapping;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoMicrosoftTrainingAssignmentMapping(microsoftTrainingAssignmentMapping: MicrosoftTrainingAssignmentMapping | undefined = {} as MicrosoftTrainingAssignmentMapping) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoTrainingSetting(microsoftTrainingAssignmentMapping),
        "assignedTo": n => { microsoftTrainingAssignmentMapping.assignedTo = n.getCollectionOfEnumValues<TrainingAssignedTo>(TrainingAssignedTo); },
        "training": n => { microsoftTrainingAssignmentMapping.training = n.getObjectValue<Training>(createTrainingFromDiscriminatorValue); },
    }
}
export interface MicrosoftTrainingAssignmentMapping extends Parsable, TrainingSetting {
    /**
     * The assignedTo property
     */
    assignedTo?: TrainingAssignedTo[];
    /**
     * The training property
     */
    training?: Training;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeMicrosoftTrainingAssignmentMapping(writer: SerializationWriter, microsoftTrainingAssignmentMapping: MicrosoftTrainingAssignmentMapping | undefined = {} as MicrosoftTrainingAssignmentMapping) : void {
        serializeTrainingSetting(writer, microsoftTrainingAssignmentMapping)
        if(microsoftTrainingAssignmentMapping.assignedTo)
        writer.writeEnumValue<TrainingAssignedTo>("assignedTo", ...microsoftTrainingAssignmentMapping.assignedTo);
        writer.writeObjectValue<Training>("training", microsoftTrainingAssignmentMapping.training, );
}
