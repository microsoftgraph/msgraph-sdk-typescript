// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DeviceManagementPartnerAppType } from './deviceManagementPartnerAppType';
import { createDeviceManagementPartnerAssignmentFromDiscriminatorValue, serializeDeviceManagementPartnerAssignment, type DeviceManagementPartnerAssignment } from './deviceManagementPartnerAssignment';
import { DeviceManagementPartnerTenantState } from './deviceManagementPartnerTenantState';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceManagementPartnerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceManagementPartner;
}
export function deserializeIntoDeviceManagementPartner(deviceManagementPartner: DeviceManagementPartner | undefined = {} as DeviceManagementPartner) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceManagementPartner),
        "displayName": n => { deviceManagementPartner.displayName = n.getStringValue(); },
        "groupsRequiringPartnerEnrollment": n => { deviceManagementPartner.groupsRequiringPartnerEnrollment = n.getCollectionOfObjectValues<DeviceManagementPartnerAssignment>(createDeviceManagementPartnerAssignmentFromDiscriminatorValue); },
        "isConfigured": n => { deviceManagementPartner.isConfigured = n.getBooleanValue(); },
        "lastHeartbeatDateTime": n => { deviceManagementPartner.lastHeartbeatDateTime = n.getDateValue(); },
        "partnerAppType": n => { deviceManagementPartner.partnerAppType = n.getEnumValue<DeviceManagementPartnerAppType>(DeviceManagementPartnerAppType); },
        "partnerState": n => { deviceManagementPartner.partnerState = n.getEnumValue<DeviceManagementPartnerTenantState>(DeviceManagementPartnerTenantState); },
        "singleTenantAppId": n => { deviceManagementPartner.singleTenantAppId = n.getStringValue(); },
        "whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime": n => { deviceManagementPartner.whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime = n.getDateValue(); },
        "whenPartnerDevicesWillBeRemovedDateTime": n => { deviceManagementPartner.whenPartnerDevicesWillBeRemovedDateTime = n.getDateValue(); },
    }
}
export interface DeviceManagementPartner extends Entity, Parsable {
    /**
     * Partner display name
     */
    displayName?: string;
    /**
     * User groups that specifies whether enrollment is through partner.
     */
    groupsRequiringPartnerEnrollment?: DeviceManagementPartnerAssignment[];
    /**
     * Whether device management partner is configured or not
     */
    isConfigured?: boolean;
    /**
     * Timestamp of last heartbeat after admin enabled option Connect to Device management Partner
     */
    lastHeartbeatDateTime?: Date;
    /**
     * Partner App Type.
     */
    partnerAppType?: DeviceManagementPartnerAppType;
    /**
     * Partner state of this tenant.
     */
    partnerState?: DeviceManagementPartnerTenantState;
    /**
     * Partner Single tenant App id
     */
    singleTenantAppId?: string;
    /**
     * DateTime in UTC when PartnerDevices will be marked as NonCompliant
     */
    whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime?: Date;
    /**
     * DateTime in UTC when PartnerDevices will be removed
     */
    whenPartnerDevicesWillBeRemovedDateTime?: Date;
}
export function serializeDeviceManagementPartner(writer: SerializationWriter, deviceManagementPartner: DeviceManagementPartner | undefined = {} as DeviceManagementPartner) : void {
    serializeEntity(writer, deviceManagementPartner)
    writer.writeStringValue("displayName", deviceManagementPartner.displayName);
    writer.writeCollectionOfObjectValues<DeviceManagementPartnerAssignment>("groupsRequiringPartnerEnrollment", deviceManagementPartner.groupsRequiringPartnerEnrollment, serializeDeviceManagementPartnerAssignment);
    writer.writeBooleanValue("isConfigured", deviceManagementPartner.isConfigured);
    writer.writeDateValue("lastHeartbeatDateTime", deviceManagementPartner.lastHeartbeatDateTime);
    writer.writeEnumValue<DeviceManagementPartnerAppType>("partnerAppType", deviceManagementPartner.partnerAppType);
    writer.writeEnumValue<DeviceManagementPartnerTenantState>("partnerState", deviceManagementPartner.partnerState);
    writer.writeStringValue("singleTenantAppId", deviceManagementPartner.singleTenantAppId);
    writer.writeDateValue("whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime", deviceManagementPartner.whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime);
    writer.writeDateValue("whenPartnerDevicesWillBeRemovedDateTime", deviceManagementPartner.whenPartnerDevicesWillBeRemovedDateTime);
}
// tslint:enable
// eslint-enable
