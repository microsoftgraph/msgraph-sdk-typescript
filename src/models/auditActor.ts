// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuditActor extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name of the Application.
     */
    applicationDisplayName?: string;
    /**
     * AAD Application Id.
     */
    applicationId?: string;
    /**
     * Actor Type.
     */
    auditActorType?: string;
    /**
     * IPAddress.
     */
    ipAddress?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Service Principal Name (SPN).
     */
    servicePrincipalName?: string;
    /**
     * User Id.
     */
    userId?: string;
    /**
     * List of user permissions when the audit was performed.
     */
    userPermissions?: string[];
    /**
     * User Principal Name (UPN).
     */
    userPrincipalName?: string;
}
export function createAuditActorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuditActor;
}
export function deserializeIntoAuditActor(auditActor: AuditActor | undefined = {} as AuditActor) : Record<string, (node: ParseNode) => void> {
    return {
        "applicationDisplayName": n => { auditActor.applicationDisplayName = n.getStringValue(); },
        "applicationId": n => { auditActor.applicationId = n.getStringValue(); },
        "auditActorType": n => { auditActor.auditActorType = n.getStringValue(); },
        "ipAddress": n => { auditActor.ipAddress = n.getStringValue(); },
        "@odata.type": n => { auditActor.odataType = n.getStringValue(); },
        "servicePrincipalName": n => { auditActor.servicePrincipalName = n.getStringValue(); },
        "userId": n => { auditActor.userId = n.getStringValue(); },
        "userPermissions": n => { auditActor.userPermissions = n.getCollectionOfPrimitiveValues<string>(); },
        "userPrincipalName": n => { auditActor.userPrincipalName = n.getStringValue(); },
    }
}
export function serializeAuditActor(writer: SerializationWriter, auditActor: AuditActor | undefined = {} as AuditActor) : void {
        writer.writeStringValue("applicationDisplayName", auditActor.applicationDisplayName);
        writer.writeStringValue("applicationId", auditActor.applicationId);
        writer.writeStringValue("auditActorType", auditActor.auditActorType);
        writer.writeStringValue("ipAddress", auditActor.ipAddress);
        writer.writeStringValue("@odata.type", auditActor.odataType);
        writer.writeStringValue("servicePrincipalName", auditActor.servicePrincipalName);
        writer.writeStringValue("userId", auditActor.userId);
        writer.writeCollectionOfPrimitiveValues<string>("userPermissions", auditActor.userPermissions);
        writer.writeStringValue("userPrincipalName", auditActor.userPrincipalName);
        writer.writeAdditionalData(auditActor.additionalData);
}
// tslint:enable
// eslint-enable
