// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createApprovalSettingsFromDiscriminatorValue, serializeApprovalSettings, type ApprovalSettings } from './approvalSettings';
import { deserializeIntoUnifiedRoleManagementPolicyRule, serializeUnifiedRoleManagementPolicyRule, type UnifiedRoleManagementPolicyRule } from './unifiedRoleManagementPolicyRule';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleManagementPolicyApprovalRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRoleManagementPolicyApprovalRule;
}
export function deserializeIntoUnifiedRoleManagementPolicyApprovalRule(unifiedRoleManagementPolicyApprovalRule: UnifiedRoleManagementPolicyApprovalRule | undefined = {} as UnifiedRoleManagementPolicyApprovalRule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoUnifiedRoleManagementPolicyRule(unifiedRoleManagementPolicyApprovalRule),
        "setting": n => { unifiedRoleManagementPolicyApprovalRule.setting = n.getObjectValue<ApprovalSettings>(createApprovalSettingsFromDiscriminatorValue); },
    }
}
export function serializeUnifiedRoleManagementPolicyApprovalRule(writer: SerializationWriter, unifiedRoleManagementPolicyApprovalRule: UnifiedRoleManagementPolicyApprovalRule | undefined = {} as UnifiedRoleManagementPolicyApprovalRule) : void {
        serializeUnifiedRoleManagementPolicyRule(writer, unifiedRoleManagementPolicyApprovalRule)
        writer.writeObjectValue<ApprovalSettings>("setting", unifiedRoleManagementPolicyApprovalRule.setting, serializeApprovalSettings);
}
export interface UnifiedRoleManagementPolicyApprovalRule extends Parsable, UnifiedRoleManagementPolicyRule {
    /**
     * The settings for approval of the role assignment.
     */
    setting?: ApprovalSettings;
}
// tslint:enable
// eslint-enable
