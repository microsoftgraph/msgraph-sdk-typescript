// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAuthenticationStrengthPolicyFromDiscriminatorValue, serializeAuthenticationStrengthPolicy, type AuthenticationStrengthPolicy } from './authenticationStrengthPolicy';
import { ConditionalAccessGrantControl } from './conditionalAccessGrantControl';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessGrantControls extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The authenticationStrength property
     */
    authenticationStrength?: AuthenticationStrengthPolicy;
    /**
     * List of values of built-in controls required by the policy. Possible values: block, mfa, compliantDevice, domainJoinedDevice, approvedApplication, compliantApplication, passwordChange, unknownFutureValue.
     */
    builtInControls?: ConditionalAccessGrantControl[];
    /**
     * List of custom controls IDs required by the policy. For more information, see Custom controls.
     */
    customAuthenticationFactors?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Defines the relationship of the grant controls. Possible values: AND, OR.
     */
    operator?: string;
    /**
     * List of terms of use IDs required by the policy.
     */
    termsOfUse?: string[];
}
export function createConditionalAccessGrantControlsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessGrantControls;
}
export function deserializeIntoConditionalAccessGrantControls(conditionalAccessGrantControls: ConditionalAccessGrantControls | undefined = {} as ConditionalAccessGrantControls) : Record<string, (node: ParseNode) => void> {
    return {
        "authenticationStrength": n => { conditionalAccessGrantControls.authenticationStrength = n.getObjectValue<AuthenticationStrengthPolicy>(createAuthenticationStrengthPolicyFromDiscriminatorValue); },
        "builtInControls": n => { conditionalAccessGrantControls.builtInControls = n.getCollectionOfEnumValues<ConditionalAccessGrantControl>(ConditionalAccessGrantControl); },
        "customAuthenticationFactors": n => { conditionalAccessGrantControls.customAuthenticationFactors = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { conditionalAccessGrantControls.odataType = n.getStringValue(); },
        "operator": n => { conditionalAccessGrantControls.operator = n.getStringValue(); },
        "termsOfUse": n => { conditionalAccessGrantControls.termsOfUse = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export function serializeConditionalAccessGrantControls(writer: SerializationWriter, conditionalAccessGrantControls: ConditionalAccessGrantControls | undefined = {} as ConditionalAccessGrantControls) : void {
    writer.writeObjectValue<AuthenticationStrengthPolicy>("authenticationStrength", conditionalAccessGrantControls.authenticationStrength, serializeAuthenticationStrengthPolicy);
    if(conditionalAccessGrantControls.builtInControls)
    writer.writeEnumValue<ConditionalAccessGrantControl>("builtInControls", ...conditionalAccessGrantControls.builtInControls);
    writer.writeCollectionOfPrimitiveValues<string>("customAuthenticationFactors", conditionalAccessGrantControls.customAuthenticationFactors);
    writer.writeStringValue("@odata.type", conditionalAccessGrantControls.odataType);
    writer.writeStringValue("operator", conditionalAccessGrantControls.operator);
    writer.writeCollectionOfPrimitiveValues<string>("termsOfUse", conditionalAccessGrantControls.termsOfUse);
    writer.writeAdditionalData(conditionalAccessGrantControls.additionalData);
}
// tslint:enable
// eslint-enable
