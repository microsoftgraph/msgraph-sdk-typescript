// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from './group';
import { PrivilegedAccessGroupMemberType } from './privilegedAccessGroupMemberType';
import { PrivilegedAccessGroupRelationships } from './privilegedAccessGroupRelationships';
import { deserializeIntoPrivilegedAccessScheduleInstance, serializePrivilegedAccessScheduleInstance, type PrivilegedAccessScheduleInstance } from './privilegedAccessScheduleInstance';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrivilegedAccessGroupEligibilityScheduleInstanceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrivilegedAccessGroupEligibilityScheduleInstance;
}
export function deserializeIntoPrivilegedAccessGroupEligibilityScheduleInstance(privilegedAccessGroupEligibilityScheduleInstance: PrivilegedAccessGroupEligibilityScheduleInstance | undefined = {} as PrivilegedAccessGroupEligibilityScheduleInstance) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPrivilegedAccessScheduleInstance(privilegedAccessGroupEligibilityScheduleInstance),
        "accessId": n => { privilegedAccessGroupEligibilityScheduleInstance.accessId = n.getEnumValue<PrivilegedAccessGroupRelationships>(PrivilegedAccessGroupRelationships); },
        "eligibilityScheduleId": n => { privilegedAccessGroupEligibilityScheduleInstance.eligibilityScheduleId = n.getStringValue(); },
        "group": n => { privilegedAccessGroupEligibilityScheduleInstance.group = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "groupId": n => { privilegedAccessGroupEligibilityScheduleInstance.groupId = n.getStringValue(); },
        "memberType": n => { privilegedAccessGroupEligibilityScheduleInstance.memberType = n.getEnumValue<PrivilegedAccessGroupMemberType>(PrivilegedAccessGroupMemberType); },
        "principal": n => { privilegedAccessGroupEligibilityScheduleInstance.principal = n.getObjectValue<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "principalId": n => { privilegedAccessGroupEligibilityScheduleInstance.principalId = n.getStringValue(); },
    }
}
export interface PrivilegedAccessGroupEligibilityScheduleInstance extends Parsable, PrivilegedAccessScheduleInstance {
    /**
     * The identifier of the membership or ownership eligibility relationship to the group. Required. The possible values are: owner, member. Supports $filter (eq).
     */
    accessId?: PrivilegedAccessGroupRelationships;
    /**
     * The identifier of the privilegedAccessGroupEligibilitySchedule from which this instance was created. Required. Supports $filter (eq, ne).
     */
    eligibilityScheduleId?: string;
    /**
     * References the group that is the scope of the membership or ownership eligibility through PIM for groups. Supports $expand.
     */
    group?: Group;
    /**
     * The identifier of the group representing the scope of the membership or ownership eligibility through PIM for groups. Required. Supports $filter (eq).
     */
    groupId?: string;
    /**
     * Indicates whether the assignment is derived from a group assignment. It can further imply whether the calling principal can manage the assignment schedule. Required. The possible values are: direct, group, unknownFutureValue. Supports $filter (eq).
     */
    memberType?: PrivilegedAccessGroupMemberType;
    /**
     * References the principal that's in the scope of the membership or ownership eligibility request through the group that's governed by PIM. Supports $expand.
     */
    principal?: DirectoryObject;
    /**
     * The identifier of the principal whose membership or ownership eligibility to the group is managed through PIM for groups. Required. Supports $filter (eq).
     */
    principalId?: string;
}
export function serializePrivilegedAccessGroupEligibilityScheduleInstance(writer: SerializationWriter, privilegedAccessGroupEligibilityScheduleInstance: PrivilegedAccessGroupEligibilityScheduleInstance | undefined = {} as PrivilegedAccessGroupEligibilityScheduleInstance) : void {
        serializePrivilegedAccessScheduleInstance(writer, privilegedAccessGroupEligibilityScheduleInstance)
        writer.writeEnumValue<PrivilegedAccessGroupRelationships>("accessId", privilegedAccessGroupEligibilityScheduleInstance.accessId);
        writer.writeStringValue("eligibilityScheduleId", privilegedAccessGroupEligibilityScheduleInstance.eligibilityScheduleId);
        writer.writeObjectValue<Group>("group", privilegedAccessGroupEligibilityScheduleInstance.group, serializeGroup);
        writer.writeStringValue("groupId", privilegedAccessGroupEligibilityScheduleInstance.groupId);
        writer.writeEnumValue<PrivilegedAccessGroupMemberType>("memberType", privilegedAccessGroupEligibilityScheduleInstance.memberType);
        writer.writeObjectValue<DirectoryObject>("principal", privilegedAccessGroupEligibilityScheduleInstance.principal, serializeDirectoryObject);
        writer.writeStringValue("principalId", privilegedAccessGroupEligibilityScheduleInstance.principalId);
}
// tslint:enable
// eslint-enable
