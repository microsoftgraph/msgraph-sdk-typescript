// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDeviceAndAppManagementRoleAssignment } from './deviceAndAppManagementRoleAssignment';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type DeviceAndAppManagementRoleAssignment } from './index';
import { createRoleDefinitionFromDiscriminatorValue, serializeRoleDefinition, type RoleDefinition } from './roleDefinition';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRoleAssignmentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.deviceAndAppManagementRoleAssignment":
                    return deserializeIntoDeviceAndAppManagementRoleAssignment;
            }
        }
    }
    return deserializeIntoRoleAssignment;
}
export function deserializeIntoRoleAssignment(roleAssignment: RoleAssignment | undefined = {} as RoleAssignment) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(roleAssignment),
        "description": n => { roleAssignment.description = n.getStringValue(); },
        "displayName": n => { roleAssignment.displayName = n.getStringValue(); },
        "resourceScopes": n => { roleAssignment.resourceScopes = n.getCollectionOfPrimitiveValues<string>(); },
        "roleDefinition": n => { roleAssignment.roleDefinition = n.getObjectValue<RoleDefinition>(createRoleDefinitionFromDiscriminatorValue); },
    }
}
export interface RoleAssignment extends Entity, Parsable {
    /**
     * Description of the Role Assignment.
     */
    description?: string;
    /**
     * The display or friendly name of the role Assignment.
     */
    displayName?: string;
    /**
     * List of ids of role scope member security groups.  These are IDs from Azure Active Directory.
     */
    resourceScopes?: string[];
    /**
     * Role definition this assignment is part of.
     */
    roleDefinition?: RoleDefinition;
}
export function serializeRoleAssignment(writer: SerializationWriter, roleAssignment: RoleAssignment | undefined = {} as RoleAssignment) : void {
        serializeEntity(writer, roleAssignment)
        writer.writeStringValue("description", roleAssignment.description);
        writer.writeStringValue("displayName", roleAssignment.displayName);
        writer.writeCollectionOfPrimitiveValues<string>("resourceScopes", roleAssignment.resourceScopes);
        writer.writeObjectValue<RoleDefinition>("roleDefinition", roleAssignment.roleDefinition, );
}
// tslint:enable
// eslint-enable
