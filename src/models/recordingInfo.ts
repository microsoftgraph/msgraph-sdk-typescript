// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { RecordingStatus } from './recordingStatus';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRecordingInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRecordingInfo;
}
export function deserializeIntoRecordingInfo(recordingInfo: RecordingInfo | undefined = {} as RecordingInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "initiator": n => { recordingInfo.initiator = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "@odata.type": n => { recordingInfo.odataType = n.getStringValue(); },
        "recordingStatus": n => { recordingInfo.recordingStatus = n.getEnumValue<RecordingStatus>(RecordingStatus); },
    }
}
export interface RecordingInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The identities of the recording initiator.
     */
    initiator?: IdentitySet;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The recordingStatus property
     */
    recordingStatus?: RecordingStatus;
}
export function serializeRecordingInfo(writer: SerializationWriter, recordingInfo: RecordingInfo | undefined = {} as RecordingInfo) : void {
    writer.writeObjectValue<IdentitySet>("initiator", recordingInfo.initiator, serializeIdentitySet);
    writer.writeStringValue("@odata.type", recordingInfo.odataType);
    writer.writeEnumValue<RecordingStatus>("recordingStatus", recordingInfo.recordingStatus);
    writer.writeAdditionalData(recordingInfo.additionalData);
}
// tslint:enable
// eslint-enable
