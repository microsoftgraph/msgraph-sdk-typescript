// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCrossTenantUserSyncInboundFromDiscriminatorValue, serializeCrossTenantUserSyncInbound, type CrossTenantUserSyncInbound } from './crossTenantUserSyncInbound';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCrossTenantIdentitySyncPolicyPartnerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCrossTenantIdentitySyncPolicyPartner;
}
export interface CrossTenantIdentitySyncPolicyPartner extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Display name for the cross-tenant user synchronization policy. Use the name of the partner Microsoft Entra tenant to easily identify the policy. Optional.
     */
    displayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Tenant identifier for the partner Microsoft Entra organization. Read-only.
     */
    tenantId?: string;
    /**
     * Defines whether users can be synchronized from the partner tenant. Key.
     */
    userSyncInbound?: CrossTenantUserSyncInbound;
}
export function deserializeIntoCrossTenantIdentitySyncPolicyPartner(crossTenantIdentitySyncPolicyPartner: CrossTenantIdentitySyncPolicyPartner | undefined = {} as CrossTenantIdentitySyncPolicyPartner) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { crossTenantIdentitySyncPolicyPartner.displayName = n.getStringValue(); },
        "@odata.type": n => { crossTenantIdentitySyncPolicyPartner.odataType = n.getStringValue(); },
        "tenantId": n => { crossTenantIdentitySyncPolicyPartner.tenantId = n.getStringValue(); },
        "userSyncInbound": n => { crossTenantIdentitySyncPolicyPartner.userSyncInbound = n.getObjectValue<CrossTenantUserSyncInbound>(createCrossTenantUserSyncInboundFromDiscriminatorValue); },
    }
}
export function serializeCrossTenantIdentitySyncPolicyPartner(writer: SerializationWriter, crossTenantIdentitySyncPolicyPartner: CrossTenantIdentitySyncPolicyPartner | undefined = {} as CrossTenantIdentitySyncPolicyPartner) : void {
    writer.writeStringValue("displayName", crossTenantIdentitySyncPolicyPartner.displayName);
    writer.writeStringValue("@odata.type", crossTenantIdentitySyncPolicyPartner.odataType);
    writer.writeStringValue("tenantId", crossTenantIdentitySyncPolicyPartner.tenantId);
    writer.writeObjectValue<CrossTenantUserSyncInbound>("userSyncInbound", crossTenantIdentitySyncPolicyPartner.userSyncInbound, serializeCrossTenantUserSyncInbound);
    writer.writeAdditionalData(crossTenantIdentitySyncPolicyPartner.additionalData);
}
// tslint:enable
// eslint-enable
