// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export interface AssignedLicense extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A collection of the unique identifiers for plans that have been disabled.
     */
    disabledPlans?: Guid[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The unique identifier for the SKU.
     */
    skuId?: Guid;
}
export function createAssignedLicenseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAssignedLicense;
}
export function deserializeIntoAssignedLicense(assignedLicense: AssignedLicense | undefined = {} as AssignedLicense) : Record<string, (node: ParseNode) => void> {
    return {
        "disabledPlans": n => { assignedLicense.disabledPlans = n.getCollectionOfPrimitiveValues<Guid>(); },
        "@odata.type": n => { assignedLicense.odataType = n.getStringValue(); },
        "skuId": n => { assignedLicense.skuId = n.getGuidValue(); },
    }
}
export function serializeAssignedLicense(writer: SerializationWriter, assignedLicense: AssignedLicense | undefined = {} as AssignedLicense) : void {
    writer.writeCollectionOfPrimitiveValues<Guid>("disabledPlans", assignedLicense.disabledPlans);
    writer.writeStringValue("@odata.type", assignedLicense.odataType);
    writer.writeGuidValue("skuId", assignedLicense.skuId);
    writer.writeAdditionalData(assignedLicense.additionalData);
}
// tslint:enable
// eslint-enable
