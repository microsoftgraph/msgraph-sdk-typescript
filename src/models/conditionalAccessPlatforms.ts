// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ConditionalAccessDevicePlatform } from './conditionalAccessDevicePlatform';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessPlatforms extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Possible values are: android, iOS, windows, windowsPhone, macOS, linux, all, unknownFutureValue.
     */
    excludePlatforms?: ConditionalAccessDevicePlatform[];
    /**
     * Possible values are: android, iOS, windows, windowsPhone, macOS, linux, all, unknownFutureValue.
     */
    includePlatforms?: ConditionalAccessDevicePlatform[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createConditionalAccessPlatformsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessPlatforms;
}
export function deserializeIntoConditionalAccessPlatforms(conditionalAccessPlatforms: ConditionalAccessPlatforms | undefined = {} as ConditionalAccessPlatforms) : Record<string, (node: ParseNode) => void> {
    return {
        "excludePlatforms": n => { conditionalAccessPlatforms.excludePlatforms = n.getCollectionOfEnumValues<ConditionalAccessDevicePlatform>(ConditionalAccessDevicePlatform); },
        "includePlatforms": n => { conditionalAccessPlatforms.includePlatforms = n.getCollectionOfEnumValues<ConditionalAccessDevicePlatform>(ConditionalAccessDevicePlatform); },
        "@odata.type": n => { conditionalAccessPlatforms.odataType = n.getStringValue(); },
    }
}
export function serializeConditionalAccessPlatforms(writer: SerializationWriter, conditionalAccessPlatforms: ConditionalAccessPlatforms | undefined = {} as ConditionalAccessPlatforms) : void {
        if(conditionalAccessPlatforms.excludePlatforms)
        writer.writeEnumValue<ConditionalAccessDevicePlatform>("excludePlatforms", ...conditionalAccessPlatforms.excludePlatforms);
        if(conditionalAccessPlatforms.includePlatforms)
        writer.writeEnumValue<ConditionalAccessDevicePlatform>("includePlatforms", ...conditionalAccessPlatforms.includePlatforms);
        writer.writeStringValue("@odata.type", conditionalAccessPlatforms.odataType);
        writer.writeAdditionalData(conditionalAccessPlatforms.additionalData);
}
// tslint:enable
// eslint-enable
