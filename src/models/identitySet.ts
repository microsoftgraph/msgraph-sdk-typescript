// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoChatMessageFromIdentitySet } from './chatMessageFromIdentitySet';
import { deserializeIntoChatMessageMentionedIdentitySet } from './chatMessageMentionedIdentitySet';
import { deserializeIntoChatMessageReactionIdentitySet } from './chatMessageReactionIdentitySet';
import { deserializeIntoCommunicationsIdentitySet } from './communicationsIdentitySet';
import { createIdentityFromDiscriminatorValue, serializeIdentity, type Identity } from './identity';
import { type ChatMessageFromIdentitySet, type ChatMessageMentionedIdentitySet, type ChatMessageReactionIdentitySet, type CommunicationsIdentitySet, type SharePointIdentitySet } from './index';
import { deserializeIntoSharePointIdentitySet } from './sharePointIdentitySet';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIdentitySetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.chatMessageFromIdentitySet":
                    return deserializeIntoChatMessageFromIdentitySet;
                case "#microsoft.graph.chatMessageMentionedIdentitySet":
                    return deserializeIntoChatMessageMentionedIdentitySet;
                case "#microsoft.graph.chatMessageReactionIdentitySet":
                    return deserializeIntoChatMessageReactionIdentitySet;
                case "#microsoft.graph.communicationsIdentitySet":
                    return deserializeIntoCommunicationsIdentitySet;
                case "#microsoft.graph.sharePointIdentitySet":
                    return deserializeIntoSharePointIdentitySet;
            }
        }
    }
    return deserializeIntoIdentitySet;
}
export function deserializeIntoIdentitySet(identitySet: IdentitySet | undefined = {} as IdentitySet) : Record<string, (node: ParseNode) => void> {
    return {
        "application": n => { identitySet.application = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "device": n => { identitySet.device = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "@odata.type": n => { identitySet.odataType = n.getStringValue(); },
        "user": n => { identitySet.user = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
    }
}
export interface IdentitySet extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Optional. The application associated with this action.
     */
    application?: Identity;
    /**
     * Optional. The device associated with this action.
     */
    device?: Identity;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Optional. The user associated with this action.
     */
    user?: Identity;
}
export function serializeIdentitySet(writer: SerializationWriter, identitySet: IdentitySet | undefined = {} as IdentitySet) : void {
        writer.writeObjectValue<Identity>("application", identitySet.application, serializeIdentity);
        writer.writeObjectValue<Identity>("device", identitySet.device, serializeIdentity);
        writer.writeStringValue("@odata.type", identitySet.odataType);
        writer.writeObjectValue<Identity>("user", identitySet.user, serializeIdentity);
        writer.writeAdditionalData(identitySet.additionalData);
}
// tslint:enable
// eslint-enable
