// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVulnerabilityStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoVulnerabilityState;
}
export function deserializeIntoVulnerabilityState(vulnerabilityState: VulnerabilityState | undefined = {} as VulnerabilityState) : Record<string, (node: ParseNode) => void> {
    return {
        "cve": n => { vulnerabilityState.cve = n.getStringValue(); },
        "@odata.type": n => { vulnerabilityState.odataType = n.getStringValue(); },
        "severity": n => { vulnerabilityState.severity = n.getStringValue(); },
        "wasRunning": n => { vulnerabilityState.wasRunning = n.getBooleanValue(); },
    }
}
export function serializeVulnerabilityState(writer: SerializationWriter, vulnerabilityState: VulnerabilityState | undefined = {} as VulnerabilityState) : void {
        writer.writeStringValue("cve", vulnerabilityState.cve);
        writer.writeStringValue("@odata.type", vulnerabilityState.odataType);
        writer.writeStringValue("severity", vulnerabilityState.severity);
        writer.writeBooleanValue("wasRunning", vulnerabilityState.wasRunning);
        writer.writeAdditionalData(vulnerabilityState.additionalData);
}
export interface VulnerabilityState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Common Vulnerabilities and Exposures (CVE) for the vulnerability.
     */
    cve?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
     */
    severity?: string;
    /**
     * Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
     */
    wasRunning?: boolean;
}
// tslint:enable
// eslint-enable
