import {AdditionalDataHolder, Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export class VulnerabilityState implements AdditionalDataHolder, Parsable {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.  */
    private _additionalData: Record<string, unknown>;
    /** Common Vulnerabilities and Exposures (CVE) for the vulnerability.  */
    private _cve?: string | undefined;
    /** Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.  */
    private _severity?: string | undefined;
    /** Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.  */
    private _wasRunning?: boolean | undefined;
    /**
     * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @returns a Record<string, unknown>
     */
    public get additionalData() {
        return this._additionalData;
    };
    /**
     * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @param value Value to set for the AdditionalData property.
     */
    public set additionalData(value: Record<string, unknown>) {
        this._additionalData = value;
    };
    /**
     * Instantiates a new vulnerabilityState and sets the default values.
     */
    public constructor() {
        this._additionalData = {};
    };
    /**
     * Gets the cve property value. Common Vulnerabilities and Exposures (CVE) for the vulnerability.
     * @returns a string
     */
    public get cve() {
        return this._cve;
    };
    /**
     * Sets the cve property value. Common Vulnerabilities and Exposures (CVE) for the vulnerability.
     * @param value Value to set for the cve property.
     */
    public set cve(value: string | undefined) {
        this._cve = value;
    };
    /**
     * The deserialization information for the current model
     * @returns a Record<string, (node: ParseNode) => void>
     */
    public getFieldDeserializers() : Record<string, (node: ParseNode) => void> {
        return {
            "cve": n => { this.cve = n.getStringValue(); },
            "severity": n => { this.severity = n.getStringValue(); },
            "wasRunning": n => { this.wasRunning = n.getBooleanValue(); },
        };
    };
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    public serialize(writer: SerializationWriter) : void {
        if(!writer) throw new Error("writer cannot be undefined");
        writer.writeStringValue("cve", this.cve);
        writer.writeStringValue("severity", this.severity);
        writer.writeBooleanValue("wasRunning", this.wasRunning);
        writer.writeAdditionalData(this.additionalData);
    };
    /**
     * Gets the severity property value. Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
     * @returns a string
     */
    public get severity() {
        return this._severity;
    };
    /**
     * Sets the severity property value. Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability.
     * @param value Value to set for the severity property.
     */
    public set severity(value: string | undefined) {
        this._severity = value;
    };
    /**
     * Gets the wasRunning property value. Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
     * @returns a boolean
     */
    public get wasRunning() {
        return this._wasRunning;
    };
    /**
     * Sets the wasRunning property value. Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk.
     * @param value Value to set for the wasRunning property.
     */
    public set wasRunning(value: boolean | undefined) {
        this._wasRunning = value;
    };
}
