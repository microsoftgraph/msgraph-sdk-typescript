// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCommunicationsUserIdentityFromDiscriminatorValue, serializeCommunicationsUserIdentity, type CommunicationsUserIdentity } from './communicationsUserIdentity';
import { MeetingAudience } from './meetingAudience';
import { deserializeIntoVirtualEvent, serializeVirtualEvent, type VirtualEvent } from './virtualEvent';
import { createVirtualEventRegistrationFromDiscriminatorValue, serializeVirtualEventRegistration, type VirtualEventRegistration } from './virtualEventRegistration';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVirtualEventWebinarFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoVirtualEventWebinar;
}
export function deserializeIntoVirtualEventWebinar(virtualEventWebinar: VirtualEventWebinar | undefined = {} as VirtualEventWebinar) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoVirtualEvent(virtualEventWebinar),
        "audience": n => { virtualEventWebinar.audience = n.getEnumValue<MeetingAudience>(MeetingAudience); },
        "coOrganizers": n => { virtualEventWebinar.coOrganizers = n.getCollectionOfObjectValues<CommunicationsUserIdentity>(createCommunicationsUserIdentityFromDiscriminatorValue); },
        "registrations": n => { virtualEventWebinar.registrations = n.getCollectionOfObjectValues<VirtualEventRegistration>(createVirtualEventRegistrationFromDiscriminatorValue); },
    }
}
export function serializeVirtualEventWebinar(writer: SerializationWriter, virtualEventWebinar: VirtualEventWebinar | undefined = {} as VirtualEventWebinar) : void {
        serializeVirtualEvent(writer, virtualEventWebinar)
        writer.writeEnumValue<MeetingAudience>("audience", virtualEventWebinar.audience);
        writer.writeCollectionOfObjectValues<CommunicationsUserIdentity>("coOrganizers", virtualEventWebinar.coOrganizers, serializeCommunicationsUserIdentity);
        writer.writeCollectionOfObjectValues<VirtualEventRegistration>("registrations", virtualEventWebinar.registrations, serializeVirtualEventRegistration);
}
export interface VirtualEventWebinar extends Parsable, VirtualEvent {
    /**
     * The audience property
     */
    audience?: MeetingAudience;
    /**
     * The coOrganizers property
     */
    coOrganizers?: CommunicationsUserIdentity[];
    /**
     * The registrations property
     */
    registrations?: VirtualEventRegistration[];
}
// tslint:enable
// eslint-enable
