// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAndroidManagedAppRegistration } from './androidManagedAppRegistration';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type AndroidManagedAppRegistration, type IosManagedAppRegistration } from './index';
import { deserializeIntoIosManagedAppRegistration } from './iosManagedAppRegistration';
import { ManagedAppFlaggedReason } from './managedAppFlaggedReason';
import { createManagedAppOperationFromDiscriminatorValue, serializeManagedAppOperation, type ManagedAppOperation } from './managedAppOperation';
import { createManagedAppPolicyFromDiscriminatorValue, serializeManagedAppPolicy, type ManagedAppPolicy } from './managedAppPolicy';
import { createMobileAppIdentifierFromDiscriminatorValue, serializeMobileAppIdentifier, type MobileAppIdentifier } from './mobileAppIdentifier';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createManagedAppRegistrationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.androidManagedAppRegistration":
                    return deserializeIntoAndroidManagedAppRegistration;
                case "#microsoft.graph.iosManagedAppRegistration":
                    return deserializeIntoIosManagedAppRegistration;
            }
        }
    }
    return deserializeIntoManagedAppRegistration;
}
export function deserializeIntoManagedAppRegistration(managedAppRegistration: ManagedAppRegistration | undefined = {} as ManagedAppRegistration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(managedAppRegistration),
        "appIdentifier": n => { managedAppRegistration.appIdentifier = n.getObjectValue<MobileAppIdentifier>(createMobileAppIdentifierFromDiscriminatorValue); },
        "applicationVersion": n => { managedAppRegistration.applicationVersion = n.getStringValue(); },
        "appliedPolicies": n => { managedAppRegistration.appliedPolicies = n.getCollectionOfObjectValues<ManagedAppPolicy>(createManagedAppPolicyFromDiscriminatorValue); },
        "createdDateTime": n => { managedAppRegistration.createdDateTime = n.getDateValue(); },
        "deviceName": n => { managedAppRegistration.deviceName = n.getStringValue(); },
        "deviceTag": n => { managedAppRegistration.deviceTag = n.getStringValue(); },
        "deviceType": n => { managedAppRegistration.deviceType = n.getStringValue(); },
        "flaggedReasons": n => { managedAppRegistration.flaggedReasons = n.getCollectionOfEnumValues<ManagedAppFlaggedReason>(ManagedAppFlaggedReason); },
        "intendedPolicies": n => { managedAppRegistration.intendedPolicies = n.getCollectionOfObjectValues<ManagedAppPolicy>(createManagedAppPolicyFromDiscriminatorValue); },
        "lastSyncDateTime": n => { managedAppRegistration.lastSyncDateTime = n.getDateValue(); },
        "managementSdkVersion": n => { managedAppRegistration.managementSdkVersion = n.getStringValue(); },
        "operations": n => { managedAppRegistration.operations = n.getCollectionOfObjectValues<ManagedAppOperation>(createManagedAppOperationFromDiscriminatorValue); },
        "platformVersion": n => { managedAppRegistration.platformVersion = n.getStringValue(); },
        "userId": n => { managedAppRegistration.userId = n.getStringValue(); },
        "version": n => { managedAppRegistration.version = n.getStringValue(); },
    }
}
export interface ManagedAppRegistration extends Entity, Parsable {
    /**
     * The app package Identifier
     */
    appIdentifier?: MobileAppIdentifier;
    /**
     * App version
     */
    applicationVersion?: string;
    /**
     * Zero or more policys already applied on the registered app when it last synchronized with managment service.
     */
    appliedPolicies?: ManagedAppPolicy[];
    /**
     * Date and time of creation
     */
    createdDateTime?: Date;
    /**
     * Host device name
     */
    deviceName?: string;
    /**
     * App management SDK generated tag, which helps relate apps hosted on the same device. Not guaranteed to relate apps in all conditions.
     */
    deviceTag?: string;
    /**
     * Host device type
     */
    deviceType?: string;
    /**
     * Zero or more reasons an app registration is flagged. E.g. app running on rooted device
     */
    flaggedReasons?: ManagedAppFlaggedReason[];
    /**
     * Zero or more policies admin intended for the app as of now.
     */
    intendedPolicies?: ManagedAppPolicy[];
    /**
     * Date and time of last the app synced with management service.
     */
    lastSyncDateTime?: Date;
    /**
     * App management SDK version
     */
    managementSdkVersion?: string;
    /**
     * Zero or more long running operations triggered on the app registration.
     */
    operations?: ManagedAppOperation[];
    /**
     * Operating System version
     */
    platformVersion?: string;
    /**
     * The user Id to who this app registration belongs.
     */
    userId?: string;
    /**
     * Version of the entity.
     */
    version?: string;
}
export function serializeManagedAppRegistration(writer: SerializationWriter, managedAppRegistration: ManagedAppRegistration | undefined = {} as ManagedAppRegistration) : void {
        serializeEntity(writer, managedAppRegistration)
        writer.writeObjectValue<MobileAppIdentifier>("appIdentifier", managedAppRegistration.appIdentifier, );
        writer.writeStringValue("applicationVersion", managedAppRegistration.applicationVersion);
        writer.writeCollectionOfObjectValues<ManagedAppPolicy>("appliedPolicies", managedAppRegistration.appliedPolicies, );
        writer.writeDateValue("createdDateTime", managedAppRegistration.createdDateTime);
        writer.writeStringValue("deviceName", managedAppRegistration.deviceName);
        writer.writeStringValue("deviceTag", managedAppRegistration.deviceTag);
        writer.writeStringValue("deviceType", managedAppRegistration.deviceType);
        if(managedAppRegistration.flaggedReasons)
        writer.writeEnumValue<ManagedAppFlaggedReason>("flaggedReasons", ...managedAppRegistration.flaggedReasons);
        writer.writeCollectionOfObjectValues<ManagedAppPolicy>("intendedPolicies", managedAppRegistration.intendedPolicies, );
        writer.writeDateValue("lastSyncDateTime", managedAppRegistration.lastSyncDateTime);
        writer.writeStringValue("managementSdkVersion", managedAppRegistration.managementSdkVersion);
        writer.writeCollectionOfObjectValues<ManagedAppOperation>("operations", managedAppRegistration.operations, );
        writer.writeStringValue("platformVersion", managedAppRegistration.platformVersion);
        writer.writeStringValue("userId", managedAppRegistration.userId);
        writer.writeStringValue("version", managedAppRegistration.version);
}
// tslint:enable
// eslint-enable
