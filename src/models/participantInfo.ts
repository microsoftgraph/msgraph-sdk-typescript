// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { EndpointType } from './endpointType';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createParticipantInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoParticipantInfo;
}
export function deserializeIntoParticipantInfo(participantInfo: ParticipantInfo | undefined = {} as ParticipantInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "countryCode": n => { participantInfo.countryCode = n.getStringValue(); },
        "endpointType": n => { participantInfo.endpointType = n.getEnumValue<EndpointType>(EndpointType); },
        "identity": n => { participantInfo.identity = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "languageId": n => { participantInfo.languageId = n.getStringValue(); },
        "@odata.type": n => { participantInfo.odataType = n.getStringValue(); },
        "participantId": n => { participantInfo.participantId = n.getStringValue(); },
        "region": n => { participantInfo.region = n.getStringValue(); },
    }
}
export interface ParticipantInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The ISO 3166-1 Alpha-2 country code of the participant's best estimated physical location at the start of the call. Read-only.
     */
    countryCode?: string;
    /**
     * The type of endpoint the participant is using. Possible values are: default, skypeForBusiness, or skypeForBusinessVoipPhone. Read-only.
     */
    endpointType?: EndpointType;
    /**
     * The identity property
     */
    identity?: IdentitySet;
    /**
     * The language culture string. Read-only.
     */
    languageId?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The participant ID of the participant. Read-only.
     */
    participantId?: string;
    /**
     * The home region of the participant. This can be a country, a continent, or a larger geographic region. This doesn't change based on the participant's current physical location. Read-only.
     */
    region?: string;
}
export function serializeParticipantInfo(writer: SerializationWriter, participantInfo: ParticipantInfo | undefined = {} as ParticipantInfo) : void {
        writer.writeStringValue("countryCode", participantInfo.countryCode);
        writer.writeEnumValue<EndpointType>("endpointType", participantInfo.endpointType);
        writer.writeObjectValue<IdentitySet>("identity", participantInfo.identity, );
        writer.writeStringValue("languageId", participantInfo.languageId);
        writer.writeStringValue("@odata.type", participantInfo.odataType);
        writer.writeStringValue("participantId", participantInfo.participantId);
        writer.writeStringValue("region", participantInfo.region);
        writer.writeAdditionalData(participantInfo.additionalData);
}
// tslint:enable
// eslint-enable
