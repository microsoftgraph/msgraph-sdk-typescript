// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createResultInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoResultInfo;
}
export function deserializeIntoResultInfo(resultInfo: ResultInfo | undefined = {} as ResultInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { resultInfo.code = n.getNumberValue(); },
        "message": n => { resultInfo.message = n.getStringValue(); },
        "@odata.type": n => { resultInfo.odataType = n.getStringValue(); },
        "subcode": n => { resultInfo.subcode = n.getNumberValue(); },
    }
}
export interface ResultInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The result code.
     */
    code?: number;
    /**
     * The message.
     */
    message?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The result subcode.
     */
    subcode?: number;
}
export function serializeResultInfo(writer: SerializationWriter, resultInfo: ResultInfo | undefined = {} as ResultInfo) : void {
    writer.writeNumberValue("code", resultInfo.code);
    writer.writeStringValue("message", resultInfo.message);
    writer.writeStringValue("@odata.type", resultInfo.odataType);
    writer.writeNumberValue("subcode", resultInfo.subcode);
    writer.writeAdditionalData(resultInfo.additionalData);
}
// tslint:enable
// eslint-enable
