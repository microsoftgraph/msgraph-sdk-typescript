// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConditionalAccessFilterFromDiscriminatorValue, serializeConditionalAccessFilter, type ConditionalAccessFilter } from './conditionalAccessFilter';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessApplications extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The applicationFilter property
     */
    applicationFilter?: ConditionalAccessFilter;
    /**
     * Can be one of the following:  The list of client IDs (appId) explicitly excluded from the policy. Office365 - For the list of apps included in Office365, see Conditional Access target apps: Office 365
     */
    excludeApplications?: string[];
    /**
     * Can be one of the following:  The list of client IDs (appId) the policy applies to, unless explicitly excluded (in excludeApplications)  All  Office365 - For the list of apps included in Office365, see Conditional Access target apps: Office 365
     */
    includeApplications?: string[];
    /**
     * The includeAuthenticationContextClassReferences property
     */
    includeAuthenticationContextClassReferences?: string[];
    /**
     * User actions to include. Supported values are urn:user:registersecurityinfo and urn:user:registerdevice
     */
    includeUserActions?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createConditionalAccessApplicationsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessApplications;
}
export function deserializeIntoConditionalAccessApplications(conditionalAccessApplications: ConditionalAccessApplications | undefined = {} as ConditionalAccessApplications) : Record<string, (node: ParseNode) => void> {
    return {
        "applicationFilter": n => { conditionalAccessApplications.applicationFilter = n.getObjectValue<ConditionalAccessFilter>(createConditionalAccessFilterFromDiscriminatorValue); },
        "excludeApplications": n => { conditionalAccessApplications.excludeApplications = n.getCollectionOfPrimitiveValues<string>(); },
        "includeApplications": n => { conditionalAccessApplications.includeApplications = n.getCollectionOfPrimitiveValues<string>(); },
        "includeAuthenticationContextClassReferences": n => { conditionalAccessApplications.includeAuthenticationContextClassReferences = n.getCollectionOfPrimitiveValues<string>(); },
        "includeUserActions": n => { conditionalAccessApplications.includeUserActions = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { conditionalAccessApplications.odataType = n.getStringValue(); },
    }
}
export function serializeConditionalAccessApplications(writer: SerializationWriter, conditionalAccessApplications: ConditionalAccessApplications | undefined = {} as ConditionalAccessApplications) : void {
        writer.writeObjectValue<ConditionalAccessFilter>("applicationFilter", conditionalAccessApplications.applicationFilter, serializeConditionalAccessFilter);
        writer.writeCollectionOfPrimitiveValues<string>("excludeApplications", conditionalAccessApplications.excludeApplications);
        writer.writeCollectionOfPrimitiveValues<string>("includeApplications", conditionalAccessApplications.includeApplications);
        writer.writeCollectionOfPrimitiveValues<string>("includeAuthenticationContextClassReferences", conditionalAccessApplications.includeAuthenticationContextClassReferences);
        writer.writeCollectionOfPrimitiveValues<string>("includeUserActions", conditionalAccessApplications.includeUserActions);
        writer.writeStringValue("@odata.type", conditionalAccessApplications.odataType);
        writer.writeAdditionalData(conditionalAccessApplications.additionalData);
}
// tslint:enable
// eslint-enable
