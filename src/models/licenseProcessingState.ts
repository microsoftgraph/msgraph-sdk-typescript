// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLicenseProcessingStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLicenseProcessingState;
}
export function deserializeIntoLicenseProcessingState(licenseProcessingState: LicenseProcessingState | undefined = {} as LicenseProcessingState) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { licenseProcessingState.odataType = n.getStringValue(); },
        "state": n => { licenseProcessingState.state = n.getStringValue(); },
    }
}
export interface LicenseProcessingState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The state property
     */
    state?: string;
}
export function serializeLicenseProcessingState(writer: SerializationWriter, licenseProcessingState: LicenseProcessingState | undefined = {} as LicenseProcessingState) : void {
    writer.writeStringValue("@odata.type", licenseProcessingState.odataType);
    writer.writeStringValue("state", licenseProcessingState.state);
    writer.writeAdditionalData(licenseProcessingState.additionalData);
}
// tslint:enable
// eslint-enable
