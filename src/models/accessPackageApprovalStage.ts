// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createSubjectSetFromDiscriminatorValue, serializeSubjectSet, type SubjectSet } from './subjectSet';
import { type AdditionalDataHolder, type Duration, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageApprovalStage extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The number of days that a request can be pending a response before it is automatically denied.
     */
    durationBeforeAutomaticDenial?: Duration;
    /**
     * If escalation is required, the time a request can be pending a response from a primary approver.
     */
    durationBeforeEscalation?: Duration;
    /**
     * If escalation is enabled and the primary approvers do not respond before the escalation time, the escalationApprovers are the users who will be asked to approve requests.
     */
    escalationApprovers?: SubjectSet[];
    /**
     * The subjects, typically users, who are the fallback escalation approvers.
     */
    fallbackEscalationApprovers?: SubjectSet[];
    /**
     * The subjects, typically users, who are the fallback primary approvers.
     */
    fallbackPrimaryApprovers?: SubjectSet[];
    /**
     * Indicates whether the approver is required to provide a justification for approving a request.
     */
    isApproverJustificationRequired?: boolean;
    /**
     * If true, then one or more escalationApprovers are configured in this approval stage.
     */
    isEscalationEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The subjects, typically users, who will be asked to approve requests. A collection of singleUser, groupMembers, requestorManager, internalSponsors or externalSponsors.
     */
    primaryApprovers?: SubjectSet[];
}
export function createAccessPackageApprovalStageFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessPackageApprovalStage;
}
export function deserializeIntoAccessPackageApprovalStage(accessPackageApprovalStage: AccessPackageApprovalStage | undefined = {} as AccessPackageApprovalStage) : Record<string, (node: ParseNode) => void> {
    return {
        "durationBeforeAutomaticDenial": n => { accessPackageApprovalStage.durationBeforeAutomaticDenial = n.getDurationValue(); },
        "durationBeforeEscalation": n => { accessPackageApprovalStage.durationBeforeEscalation = n.getDurationValue(); },
        "escalationApprovers": n => { accessPackageApprovalStage.escalationApprovers = n.getCollectionOfObjectValues<SubjectSet>(createSubjectSetFromDiscriminatorValue); },
        "fallbackEscalationApprovers": n => { accessPackageApprovalStage.fallbackEscalationApprovers = n.getCollectionOfObjectValues<SubjectSet>(createSubjectSetFromDiscriminatorValue); },
        "fallbackPrimaryApprovers": n => { accessPackageApprovalStage.fallbackPrimaryApprovers = n.getCollectionOfObjectValues<SubjectSet>(createSubjectSetFromDiscriminatorValue); },
        "isApproverJustificationRequired": n => { accessPackageApprovalStage.isApproverJustificationRequired = n.getBooleanValue(); },
        "isEscalationEnabled": n => { accessPackageApprovalStage.isEscalationEnabled = n.getBooleanValue(); },
        "@odata.type": n => { accessPackageApprovalStage.odataType = n.getStringValue(); },
        "primaryApprovers": n => { accessPackageApprovalStage.primaryApprovers = n.getCollectionOfObjectValues<SubjectSet>(createSubjectSetFromDiscriminatorValue); },
    }
}
export function serializeAccessPackageApprovalStage(writer: SerializationWriter, accessPackageApprovalStage: AccessPackageApprovalStage | undefined = {} as AccessPackageApprovalStage) : void {
        writer.writeDurationValue("durationBeforeAutomaticDenial", accessPackageApprovalStage.durationBeforeAutomaticDenial);
        writer.writeDurationValue("durationBeforeEscalation", accessPackageApprovalStage.durationBeforeEscalation);
        writer.writeCollectionOfObjectValues<SubjectSet>("escalationApprovers", accessPackageApprovalStage.escalationApprovers, serializeSubjectSet);
        writer.writeCollectionOfObjectValues<SubjectSet>("fallbackEscalationApprovers", accessPackageApprovalStage.fallbackEscalationApprovers, serializeSubjectSet);
        writer.writeCollectionOfObjectValues<SubjectSet>("fallbackPrimaryApprovers", accessPackageApprovalStage.fallbackPrimaryApprovers, serializeSubjectSet);
        writer.writeBooleanValue("isApproverJustificationRequired", accessPackageApprovalStage.isApproverJustificationRequired);
        writer.writeBooleanValue("isEscalationEnabled", accessPackageApprovalStage.isEscalationEnabled);
        writer.writeStringValue("@odata.type", accessPackageApprovalStage.odataType);
        writer.writeCollectionOfObjectValues<SubjectSet>("primaryApprovers", accessPackageApprovalStage.primaryApprovers, serializeSubjectSet);
        writer.writeAdditionalData(accessPackageApprovalStage.additionalData);
}
// tslint:enable
// eslint-enable
