import { deserializeIntoAccessPackageQuestion, serializeAccessPackageQuestion, type AccessPackageQuestion } from './accessPackageQuestion';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageTextInputQuestion extends AccessPackageQuestion, Parsable {
    /**
     * Indicates whether the answer will be in single or multiple line format.
     */
    isSingleLineQuestion?: boolean;
    /**
     * The regular expression pattern that any answer to this question must match.
     */
    regexPattern?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createAccessPackageTextInputQuestionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessPackageTextInputQuestion;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoAccessPackageTextInputQuestion(accessPackageTextInputQuestion: AccessPackageTextInputQuestion | undefined = {} as AccessPackageTextInputQuestion) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAccessPackageQuestion(accessPackageTextInputQuestion),
        "isSingleLineQuestion": n => { accessPackageTextInputQuestion.isSingleLineQuestion = n.getBooleanValue(); },
        "regexPattern": n => { accessPackageTextInputQuestion.regexPattern = n.getStringValue(); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeAccessPackageTextInputQuestion(writer: SerializationWriter, accessPackageTextInputQuestion: AccessPackageTextInputQuestion | undefined = {} as AccessPackageTextInputQuestion) : void {
        serializeAccessPackageQuestion(writer, accessPackageTextInputQuestion)
        writer.writeBooleanValue("isSingleLineQuestion", accessPackageTextInputQuestion.isSingleLineQuestion);
        writer.writeStringValue("regexPattern", accessPackageTextInputQuestion.regexPattern);
}
