// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type OmaSettingBase64, type OmaSettingBoolean, type OmaSettingDateTime, type OmaSettingFloatingPoint, type OmaSettingInteger, type OmaSettingString, type OmaSettingStringXml } from './index';
import { deserializeIntoOmaSettingBase64 } from './omaSettingBase64';
import { deserializeIntoOmaSettingBoolean } from './omaSettingBoolean';
import { deserializeIntoOmaSettingDateTime } from './omaSettingDateTime';
import { deserializeIntoOmaSettingFloatingPoint } from './omaSettingFloatingPoint';
import { deserializeIntoOmaSettingInteger } from './omaSettingInteger';
import { deserializeIntoOmaSettingString } from './omaSettingString';
import { deserializeIntoOmaSettingStringXml } from './omaSettingStringXml';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOmaSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.omaSettingBase64":
                    return deserializeIntoOmaSettingBase64;
                case "#microsoft.graph.omaSettingBoolean":
                    return deserializeIntoOmaSettingBoolean;
                case "#microsoft.graph.omaSettingDateTime":
                    return deserializeIntoOmaSettingDateTime;
                case "#microsoft.graph.omaSettingFloatingPoint":
                    return deserializeIntoOmaSettingFloatingPoint;
                case "#microsoft.graph.omaSettingInteger":
                    return deserializeIntoOmaSettingInteger;
                case "#microsoft.graph.omaSettingString":
                    return deserializeIntoOmaSettingString;
                case "#microsoft.graph.omaSettingStringXml":
                    return deserializeIntoOmaSettingStringXml;
            }
        }
    }
    return deserializeIntoOmaSetting;
}
export function deserializeIntoOmaSetting(omaSetting: OmaSetting | undefined = {} as OmaSetting) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { omaSetting.description = n.getStringValue(); },
        "displayName": n => { omaSetting.displayName = n.getStringValue(); },
        "@odata.type": n => { omaSetting.odataType = n.getStringValue(); },
        "omaUri": n => { omaSetting.omaUri = n.getStringValue(); },
    }
}
export interface OmaSetting extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Description.
     */
    description?: string;
    /**
     * Display Name.
     */
    displayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * OMA.
     */
    omaUri?: string;
}
export function serializeOmaSetting(writer: SerializationWriter, omaSetting: OmaSetting | undefined = {} as OmaSetting) : void {
    writer.writeStringValue("description", omaSetting.description);
    writer.writeStringValue("displayName", omaSetting.displayName);
    writer.writeStringValue("@odata.type", omaSetting.odataType);
    writer.writeStringValue("omaUri", omaSetting.omaUri);
    writer.writeAdditionalData(omaSetting.additionalData);
}
// tslint:enable
// eslint-enable
