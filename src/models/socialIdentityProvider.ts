// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoIdentityProviderBase, serializeIdentityProviderBase, type IdentityProviderBase } from './identityProviderBase';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSocialIdentityProviderFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSocialIdentityProvider;
}
export function deserializeIntoSocialIdentityProvider(socialIdentityProvider: SocialIdentityProvider | undefined = {} as SocialIdentityProvider) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentityProviderBase(socialIdentityProvider),
        "clientId": n => { socialIdentityProvider.clientId = n.getStringValue(); },
        "clientSecret": n => { socialIdentityProvider.clientSecret = n.getStringValue(); },
        "identityProviderType": n => { socialIdentityProvider.identityProviderType = n.getStringValue(); },
    }
}
export function serializeSocialIdentityProvider(writer: SerializationWriter, socialIdentityProvider: SocialIdentityProvider | undefined = {} as SocialIdentityProvider) : void {
    serializeIdentityProviderBase(writer, socialIdentityProvider)
    writer.writeStringValue("clientId", socialIdentityProvider.clientId);
    writer.writeStringValue("clientSecret", socialIdentityProvider.clientSecret);
    writer.writeStringValue("identityProviderType", socialIdentityProvider.identityProviderType);
}
export interface SocialIdentityProvider extends IdentityProviderBase, Parsable {
    /**
     * The identifier for the client application obtained when registering the application with the identity provider. Required.
     */
    clientId?: string;
    /**
     * The client secret for the application that is obtained when the application is registered with the identity provider. This is write-only. A read operation returns . Required.
     */
    clientSecret?: string;
    /**
     * For a B2B scenario, possible values: Google, Facebook. For a B2C scenario, possible values: Microsoft, Google, Amazon, LinkedIn, Facebook, GitHub, Twitter, Weibo, QQ, WeChat. Required.
     */
    identityProviderType?: string;
}
// tslint:enable
// eslint-enable
