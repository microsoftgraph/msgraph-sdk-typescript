// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMediaInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMediaInfo;
}
export function deserializeIntoMediaInfo(mediaInfo: MediaInfo | undefined = {} as MediaInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { mediaInfo.odataType = n.getStringValue(); },
        "resourceId": n => { mediaInfo.resourceId = n.getStringValue(); },
        "uri": n => { mediaInfo.uri = n.getStringValue(); },
    }
}
export interface MediaInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Optional. Used to uniquely identity the resource. If passed in, the prompt uri is against this resourceId as a key.
     */
    resourceId?: string;
    /**
     * Path to the prompt that will be played. Currently supports only Wave file (.wav) format, single-channel, 16-bit samples with a 16,000 (16 KHz) sampling rate.
     */
    uri?: string;
}
export function serializeMediaInfo(writer: SerializationWriter, mediaInfo: MediaInfo | undefined = {} as MediaInfo) : void {
    writer.writeStringValue("@odata.type", mediaInfo.odataType);
    writer.writeStringValue("resourceId", mediaInfo.resourceId);
    writer.writeStringValue("uri", mediaInfo.uri);
    writer.writeAdditionalData(mediaInfo.additionalData);
}
// tslint:enable
// eslint-enable
