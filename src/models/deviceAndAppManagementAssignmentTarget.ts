// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAllDevicesAssignmentTarget } from './allDevicesAssignmentTarget';
import { deserializeIntoAllLicensedUsersAssignmentTarget } from './allLicensedUsersAssignmentTarget';
import { deserializeIntoConfigurationManagerCollectionAssignmentTarget } from './configurationManagerCollectionAssignmentTarget';
import { deserializeIntoExclusionGroupAssignmentTarget } from './exclusionGroupAssignmentTarget';
import { deserializeIntoGroupAssignmentTarget } from './groupAssignmentTarget';
import { type AllDevicesAssignmentTarget, type AllLicensedUsersAssignmentTarget, type ConfigurationManagerCollectionAssignmentTarget, type ExclusionGroupAssignmentTarget, type GroupAssignmentTarget } from './index';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceAndAppManagementAssignmentTargetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.allDevicesAssignmentTarget":
                    return deserializeIntoAllDevicesAssignmentTarget;
                case "#microsoft.graph.allLicensedUsersAssignmentTarget":
                    return deserializeIntoAllLicensedUsersAssignmentTarget;
                case "#microsoft.graph.configurationManagerCollectionAssignmentTarget":
                    return deserializeIntoConfigurationManagerCollectionAssignmentTarget;
                case "#microsoft.graph.exclusionGroupAssignmentTarget":
                    return deserializeIntoExclusionGroupAssignmentTarget;
                case "#microsoft.graph.groupAssignmentTarget":
                    return deserializeIntoGroupAssignmentTarget;
            }
        }
    }
    return deserializeIntoDeviceAndAppManagementAssignmentTarget;
}
export function deserializeIntoDeviceAndAppManagementAssignmentTarget(deviceAndAppManagementAssignmentTarget: DeviceAndAppManagementAssignmentTarget | undefined = {} as DeviceAndAppManagementAssignmentTarget) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { deviceAndAppManagementAssignmentTarget.odataType = n.getStringValue(); },
    }
}
export interface DeviceAndAppManagementAssignmentTarget extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeDeviceAndAppManagementAssignmentTarget(writer: SerializationWriter, deviceAndAppManagementAssignmentTarget: DeviceAndAppManagementAssignmentTarget | undefined = {} as DeviceAndAppManagementAssignmentTarget) : void {
        writer.writeStringValue("@odata.type", deviceAndAppManagementAssignmentTarget.odataType);
        writer.writeAdditionalData(deviceAndAppManagementAssignmentTarget.additionalData);
}
// tslint:enable
// eslint-enable
