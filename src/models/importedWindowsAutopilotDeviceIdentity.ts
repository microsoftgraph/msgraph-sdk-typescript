// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createImportedWindowsAutopilotDeviceIdentityStateFromDiscriminatorValue, serializeImportedWindowsAutopilotDeviceIdentityState, type ImportedWindowsAutopilotDeviceIdentityState } from './importedWindowsAutopilotDeviceIdentityState';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createImportedWindowsAutopilotDeviceIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoImportedWindowsAutopilotDeviceIdentity;
}
export function deserializeIntoImportedWindowsAutopilotDeviceIdentity(importedWindowsAutopilotDeviceIdentity: ImportedWindowsAutopilotDeviceIdentity | undefined = {} as ImportedWindowsAutopilotDeviceIdentity) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(importedWindowsAutopilotDeviceIdentity),
        "assignedUserPrincipalName": n => { importedWindowsAutopilotDeviceIdentity.assignedUserPrincipalName = n.getStringValue(); },
        "groupTag": n => { importedWindowsAutopilotDeviceIdentity.groupTag = n.getStringValue(); },
        "hardwareIdentifier": n => { importedWindowsAutopilotDeviceIdentity.hardwareIdentifier = n.getStringValue(); },
        "importId": n => { importedWindowsAutopilotDeviceIdentity.importId = n.getStringValue(); },
        "productKey": n => { importedWindowsAutopilotDeviceIdentity.productKey = n.getStringValue(); },
        "serialNumber": n => { importedWindowsAutopilotDeviceIdentity.serialNumber = n.getStringValue(); },
        "state": n => { importedWindowsAutopilotDeviceIdentity.state = n.getObjectValue<ImportedWindowsAutopilotDeviceIdentityState>(createImportedWindowsAutopilotDeviceIdentityStateFromDiscriminatorValue); },
    }
}
export interface ImportedWindowsAutopilotDeviceIdentity extends Entity, Parsable {
    /**
     * UPN of the user the device will be assigned
     */
    assignedUserPrincipalName?: string;
    /**
     * Group Tag of the Windows autopilot device.
     */
    groupTag?: string;
    /**
     * Hardware Blob of the Windows autopilot device.
     */
    hardwareIdentifier?: string;
    /**
     * The Import Id of the Windows autopilot device.
     */
    importId?: string;
    /**
     * Product Key of the Windows autopilot device.
     */
    productKey?: string;
    /**
     * Serial number of the Windows autopilot device.
     */
    serialNumber?: string;
    /**
     * Current state of the imported device.
     */
    state?: ImportedWindowsAutopilotDeviceIdentityState;
}
export function serializeImportedWindowsAutopilotDeviceIdentity(writer: SerializationWriter, importedWindowsAutopilotDeviceIdentity: ImportedWindowsAutopilotDeviceIdentity | undefined = {} as ImportedWindowsAutopilotDeviceIdentity) : void {
    serializeEntity(writer, importedWindowsAutopilotDeviceIdentity)
    writer.writeStringValue("assignedUserPrincipalName", importedWindowsAutopilotDeviceIdentity.assignedUserPrincipalName);
    writer.writeStringValue("groupTag", importedWindowsAutopilotDeviceIdentity.groupTag);
    writer.writeStringValue("hardwareIdentifier", importedWindowsAutopilotDeviceIdentity.hardwareIdentifier);
    writer.writeStringValue("importId", importedWindowsAutopilotDeviceIdentity.importId);
    writer.writeStringValue("productKey", importedWindowsAutopilotDeviceIdentity.productKey);
    writer.writeStringValue("serialNumber", importedWindowsAutopilotDeviceIdentity.serialNumber);
    writer.writeObjectValue<ImportedWindowsAutopilotDeviceIdentityState>("state", importedWindowsAutopilotDeviceIdentity.state, serializeImportedWindowsAutopilotDeviceIdentityState);
}
// tslint:enable
// eslint-enable
