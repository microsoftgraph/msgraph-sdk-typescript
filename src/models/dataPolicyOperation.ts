// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DataPolicyOperationStatus } from './dataPolicyOperationStatus';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDataPolicyOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDataPolicyOperation;
}
export interface DataPolicyOperation extends Entity, Parsable {
    /**
     * Represents when the request for this data policy operation was completed, in UTC time, using the ISO 8601 format. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Null until the operation completes.
     */
    completedDateTime?: Date;
    /**
     * Specifies the progress of an operation.
     */
    progress?: number;
    /**
     * Possible values are: notStarted, running, complete, failed, unknownFutureValue.
     */
    status?: DataPolicyOperationStatus;
    /**
     * The URL location to where data is being exported for export requests.
     */
    storageLocation?: string;
    /**
     * Represents when the request for this data operation was submitted, in UTC time, using the ISO 8601 format. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    submittedDateTime?: Date;
    /**
     * The id for the user on whom the operation is performed.
     */
    userId?: string;
}
export function deserializeIntoDataPolicyOperation(dataPolicyOperation: DataPolicyOperation | undefined = {} as DataPolicyOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(dataPolicyOperation),
        "completedDateTime": n => { dataPolicyOperation.completedDateTime = n.getDateValue(); },
        "progress": n => { dataPolicyOperation.progress = n.getNumberValue(); },
        "status": n => { dataPolicyOperation.status = n.getEnumValue<DataPolicyOperationStatus>(DataPolicyOperationStatus); },
        "storageLocation": n => { dataPolicyOperation.storageLocation = n.getStringValue(); },
        "submittedDateTime": n => { dataPolicyOperation.submittedDateTime = n.getDateValue(); },
        "userId": n => { dataPolicyOperation.userId = n.getStringValue(); },
    }
}
export function serializeDataPolicyOperation(writer: SerializationWriter, dataPolicyOperation: DataPolicyOperation | undefined = {} as DataPolicyOperation) : void {
    serializeEntity(writer, dataPolicyOperation)
    writer.writeDateValue("completedDateTime", dataPolicyOperation.completedDateTime);
    writer.writeNumberValue("progress", dataPolicyOperation.progress);
    writer.writeEnumValue<DataPolicyOperationStatus>("status", dataPolicyOperation.status);
    writer.writeStringValue("storageLocation", dataPolicyOperation.storageLocation);
    writer.writeDateValue("submittedDateTime", dataPolicyOperation.submittedDateTime);
    writer.writeStringValue("userId", dataPolicyOperation.userId);
}
// tslint:enable
// eslint-enable
