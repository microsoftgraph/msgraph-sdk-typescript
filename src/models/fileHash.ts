// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { FileHashType } from './fileHashType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFileHashFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFileHash;
}
export function deserializeIntoFileHash(fileHash: FileHash | undefined = {} as FileHash) : Record<string, (node: ParseNode) => void> {
    return {
        "hashType": n => { fileHash.hashType = n.getEnumValue<FileHashType>(FileHashType); },
        "hashValue": n => { fileHash.hashValue = n.getStringValue(); },
        "@odata.type": n => { fileHash.odataType = n.getStringValue(); },
    }
}
export interface FileHash extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * File hash type. Possible values are: unknown, sha1, sha256, md5, authenticodeHash256, lsHash, ctph, peSha1, peSha256.
     */
    hashType?: FileHashType;
    /**
     * Value of the file hash.
     */
    hashValue?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeFileHash(writer: SerializationWriter, fileHash: FileHash | undefined = {} as FileHash) : void {
        writer.writeEnumValue<FileHashType>("hashType", fileHash.hashType);
        writer.writeStringValue("hashValue", fileHash.hashValue);
        writer.writeStringValue("@odata.type", fileHash.odataType);
        writer.writeAdditionalData(fileHash.additionalData);
}
// tslint:enable
// eslint-enable
