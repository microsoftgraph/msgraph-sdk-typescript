// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPrinterFromDiscriminatorValue, serializePrinter, type Printer } from './printer';
import { deserializeIntoPrintOperation, serializePrintOperation, type PrintOperation } from './printOperation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrinterCreateOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrinterCreateOperation;
}
export function deserializeIntoPrinterCreateOperation(printerCreateOperation: PrinterCreateOperation | undefined = {} as PrinterCreateOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPrintOperation(printerCreateOperation),
        "certificate": n => { printerCreateOperation.certificate = n.getStringValue(); },
        "printer": n => { printerCreateOperation.printer = n.getObjectValue<Printer>(createPrinterFromDiscriminatorValue); },
    }
}
export interface PrinterCreateOperation extends Parsable, PrintOperation {
    /**
     * The signed certificate created during the registration process. Read-only.
     */
    certificate?: string;
    /**
     * The created printer entity. Read-only.
     */
    printer?: Printer;
}
export function serializePrinterCreateOperation(writer: SerializationWriter, printerCreateOperation: PrinterCreateOperation | undefined = {} as PrinterCreateOperation) : void {
        serializePrintOperation(writer, printerCreateOperation)
        writer.writeStringValue("certificate", printerCreateOperation.certificate);
        writer.writeObjectValue<Printer>("printer", printerCreateOperation.printer, serializePrinter);
}
// tslint:enable
// eslint-enable
