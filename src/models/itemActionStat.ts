// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createItemActionStatFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoItemActionStat;
}
export function deserializeIntoItemActionStat(itemActionStat: ItemActionStat | undefined = {} as ItemActionStat) : Record<string, (node: ParseNode) => void> {
    return {
        "actionCount": n => { itemActionStat.actionCount = n.getNumberValue(); },
        "actorCount": n => { itemActionStat.actorCount = n.getNumberValue(); },
        "@odata.type": n => { itemActionStat.odataType = n.getStringValue(); },
    }
}
export interface ItemActionStat extends AdditionalDataHolder, Parsable {
    /**
     * The number of times the action took place. Read-only.
     */
    actionCount?: number;
    /**
     * The number of distinct actors that performed the action. Read-only.
     */
    actorCount?: number;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeItemActionStat(writer: SerializationWriter, itemActionStat: ItemActionStat | undefined = {} as ItemActionStat) : void {
    writer.writeNumberValue("actionCount", itemActionStat.actionCount);
    writer.writeNumberValue("actorCount", itemActionStat.actorCount);
    writer.writeStringValue("@odata.type", itemActionStat.odataType);
    writer.writeAdditionalData(itemActionStat.additionalData);
}
// tslint:enable
// eslint-enable
