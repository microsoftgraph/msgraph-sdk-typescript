// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type UnifiedRoleManagementPolicyApprovalRule, type UnifiedRoleManagementPolicyAuthenticationContextRule, type UnifiedRoleManagementPolicyEnablementRule, type UnifiedRoleManagementPolicyExpirationRule, type UnifiedRoleManagementPolicyNotificationRule } from './index';
import { deserializeIntoUnifiedRoleManagementPolicyApprovalRule } from './unifiedRoleManagementPolicyApprovalRule';
import { deserializeIntoUnifiedRoleManagementPolicyAuthenticationContextRule } from './unifiedRoleManagementPolicyAuthenticationContextRule';
import { deserializeIntoUnifiedRoleManagementPolicyEnablementRule } from './unifiedRoleManagementPolicyEnablementRule';
import { deserializeIntoUnifiedRoleManagementPolicyExpirationRule } from './unifiedRoleManagementPolicyExpirationRule';
import { deserializeIntoUnifiedRoleManagementPolicyNotificationRule } from './unifiedRoleManagementPolicyNotificationRule';
import { createUnifiedRoleManagementPolicyRuleTargetFromDiscriminatorValue, serializeUnifiedRoleManagementPolicyRuleTarget, type UnifiedRoleManagementPolicyRuleTarget } from './unifiedRoleManagementPolicyRuleTarget';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleManagementPolicyRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.unifiedRoleManagementPolicyApprovalRule":
                    return deserializeIntoUnifiedRoleManagementPolicyApprovalRule;
                case "#microsoft.graph.unifiedRoleManagementPolicyAuthenticationContextRule":
                    return deserializeIntoUnifiedRoleManagementPolicyAuthenticationContextRule;
                case "#microsoft.graph.unifiedRoleManagementPolicyEnablementRule":
                    return deserializeIntoUnifiedRoleManagementPolicyEnablementRule;
                case "#microsoft.graph.unifiedRoleManagementPolicyExpirationRule":
                    return deserializeIntoUnifiedRoleManagementPolicyExpirationRule;
                case "#microsoft.graph.unifiedRoleManagementPolicyNotificationRule":
                    return deserializeIntoUnifiedRoleManagementPolicyNotificationRule;
            }
        }
    }
    return deserializeIntoUnifiedRoleManagementPolicyRule;
}
export function deserializeIntoUnifiedRoleManagementPolicyRule(unifiedRoleManagementPolicyRule: UnifiedRoleManagementPolicyRule | undefined = {} as UnifiedRoleManagementPolicyRule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(unifiedRoleManagementPolicyRule),
        "target": n => { unifiedRoleManagementPolicyRule.target = n.getObjectValue<UnifiedRoleManagementPolicyRuleTarget>(createUnifiedRoleManagementPolicyRuleTargetFromDiscriminatorValue); },
    }
}
export function serializeUnifiedRoleManagementPolicyRule(writer: SerializationWriter, unifiedRoleManagementPolicyRule: UnifiedRoleManagementPolicyRule | undefined = {} as UnifiedRoleManagementPolicyRule) : void {
        serializeEntity(writer, unifiedRoleManagementPolicyRule)
        writer.writeObjectValue<UnifiedRoleManagementPolicyRuleTarget>("target", unifiedRoleManagementPolicyRule.target, );
}
export interface UnifiedRoleManagementPolicyRule extends Entity, Parsable {
    /**
     * Defines details of scope that's targeted by role management policy rule. The details can include the principal type, the role assignment type, and actions affecting a role. Supports $filter (eq, ne).
     */
    target?: UnifiedRoleManagementPolicyRuleTarget;
}
// tslint:enable
// eslint-enable
