// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AuthenticationMethodTargetType } from './authenticationMethodTargetType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthenticationMethodsRegistrationCampaignIncludeTarget extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The object identifier of a Microsoft Entra user or group.
     */
    id?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The authentication method that the user is prompted to register. The value must be microsoftAuthenticator.
     */
    targetedAuthenticationMethod?: string;
    /**
     * The targetType property
     */
    targetType?: AuthenticationMethodTargetType;
}
export function createAuthenticationMethodsRegistrationCampaignIncludeTargetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuthenticationMethodsRegistrationCampaignIncludeTarget;
}
export function deserializeIntoAuthenticationMethodsRegistrationCampaignIncludeTarget(authenticationMethodsRegistrationCampaignIncludeTarget: AuthenticationMethodsRegistrationCampaignIncludeTarget | undefined = {} as AuthenticationMethodsRegistrationCampaignIncludeTarget) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { authenticationMethodsRegistrationCampaignIncludeTarget.id = n.getStringValue(); },
        "@odata.type": n => { authenticationMethodsRegistrationCampaignIncludeTarget.odataType = n.getStringValue(); },
        "targetedAuthenticationMethod": n => { authenticationMethodsRegistrationCampaignIncludeTarget.targetedAuthenticationMethod = n.getStringValue(); },
        "targetType": n => { authenticationMethodsRegistrationCampaignIncludeTarget.targetType = n.getEnumValue<AuthenticationMethodTargetType>(AuthenticationMethodTargetType); },
    }
}
export function serializeAuthenticationMethodsRegistrationCampaignIncludeTarget(writer: SerializationWriter, authenticationMethodsRegistrationCampaignIncludeTarget: AuthenticationMethodsRegistrationCampaignIncludeTarget | undefined = {} as AuthenticationMethodsRegistrationCampaignIncludeTarget) : void {
    writer.writeStringValue("id", authenticationMethodsRegistrationCampaignIncludeTarget.id);
    writer.writeStringValue("@odata.type", authenticationMethodsRegistrationCampaignIncludeTarget.odataType);
    writer.writeStringValue("targetedAuthenticationMethod", authenticationMethodsRegistrationCampaignIncludeTarget.targetedAuthenticationMethod);
    writer.writeEnumValue<AuthenticationMethodTargetType>("targetType", authenticationMethodsRegistrationCampaignIncludeTarget.targetType);
    writer.writeAdditionalData(authenticationMethodsRegistrationCampaignIncludeTarget.additionalData);
}
// tslint:enable
// eslint-enable
