// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCommunicationsIdentitySetFromDiscriminatorValue, serializeCommunicationsIdentitySet, type CommunicationsIdentitySet } from './communicationsIdentitySet';
import { createDateTimeTimeZoneFromDiscriminatorValue, serializeDateTimeTimeZone, type DateTimeTimeZone } from './dateTimeTimeZone';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type VirtualEventWebinar } from './index';
import { createItemBodyFromDiscriminatorValue, serializeItemBody, type ItemBody } from './itemBody';
import { createVirtualEventSessionFromDiscriminatorValue, serializeVirtualEventSession, type VirtualEventSession } from './virtualEventSession';
import { VirtualEventStatus } from './virtualEventStatus';
import { deserializeIntoVirtualEventWebinar } from './virtualEventWebinar';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVirtualEventFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.virtualEventWebinar":
                    return deserializeIntoVirtualEventWebinar;
            }
        }
    }
    return deserializeIntoVirtualEvent;
}
export function deserializeIntoVirtualEvent(virtualEvent: VirtualEvent | undefined = {} as VirtualEvent) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(virtualEvent),
        "createdBy": n => { virtualEvent.createdBy = n.getObjectValue<CommunicationsIdentitySet>(createCommunicationsIdentitySetFromDiscriminatorValue); },
        "description": n => { virtualEvent.description = n.getObjectValue<ItemBody>(createItemBodyFromDiscriminatorValue); },
        "displayName": n => { virtualEvent.displayName = n.getStringValue(); },
        "endDateTime": n => { virtualEvent.endDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "sessions": n => { virtualEvent.sessions = n.getCollectionOfObjectValues<VirtualEventSession>(createVirtualEventSessionFromDiscriminatorValue); },
        "startDateTime": n => { virtualEvent.startDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "status": n => { virtualEvent.status = n.getEnumValue<VirtualEventStatus>(VirtualEventStatus); },
    }
}
export function serializeVirtualEvent(writer: SerializationWriter, virtualEvent: VirtualEvent | undefined = {} as VirtualEvent) : void {
    serializeEntity(writer, virtualEvent)
    writer.writeObjectValue<CommunicationsIdentitySet>("createdBy", virtualEvent.createdBy, serializeCommunicationsIdentitySet);
    writer.writeObjectValue<ItemBody>("description", virtualEvent.description, serializeItemBody);
    writer.writeStringValue("displayName", virtualEvent.displayName);
    writer.writeObjectValue<DateTimeTimeZone>("endDateTime", virtualEvent.endDateTime, serializeDateTimeTimeZone);
    writer.writeCollectionOfObjectValues<VirtualEventSession>("sessions", virtualEvent.sessions, serializeVirtualEventSession);
    writer.writeObjectValue<DateTimeTimeZone>("startDateTime", virtualEvent.startDateTime, serializeDateTimeTimeZone);
    writer.writeEnumValue<VirtualEventStatus>("status", virtualEvent.status);
}
export interface VirtualEvent extends Entity, Parsable {
    /**
     * The createdBy property
     */
    createdBy?: CommunicationsIdentitySet;
    /**
     * The description property
     */
    description?: ItemBody;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The endDateTime property
     */
    endDateTime?: DateTimeTimeZone;
    /**
     * The sessions property
     */
    sessions?: VirtualEventSession[];
    /**
     * The startDateTime property
     */
    startDateTime?: DateTimeTimeZone;
    /**
     * The status property
     */
    status?: VirtualEventStatus;
}
// tslint:enable
// eslint-enable
