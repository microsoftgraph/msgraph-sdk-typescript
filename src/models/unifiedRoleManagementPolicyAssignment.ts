// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createUnifiedRoleManagementPolicyFromDiscriminatorValue, serializeUnifiedRoleManagementPolicy, type UnifiedRoleManagementPolicy } from './unifiedRoleManagementPolicy';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleManagementPolicyAssignmentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRoleManagementPolicyAssignment;
}
export function deserializeIntoUnifiedRoleManagementPolicyAssignment(unifiedRoleManagementPolicyAssignment: UnifiedRoleManagementPolicyAssignment | undefined = {} as UnifiedRoleManagementPolicyAssignment) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(unifiedRoleManagementPolicyAssignment),
        "policy": n => { unifiedRoleManagementPolicyAssignment.policy = n.getObjectValue<UnifiedRoleManagementPolicy>(createUnifiedRoleManagementPolicyFromDiscriminatorValue); },
        "policyId": n => { unifiedRoleManagementPolicyAssignment.policyId = n.getStringValue(); },
        "roleDefinitionId": n => { unifiedRoleManagementPolicyAssignment.roleDefinitionId = n.getStringValue(); },
        "scopeId": n => { unifiedRoleManagementPolicyAssignment.scopeId = n.getStringValue(); },
        "scopeType": n => { unifiedRoleManagementPolicyAssignment.scopeType = n.getStringValue(); },
    }
}
export function serializeUnifiedRoleManagementPolicyAssignment(writer: SerializationWriter, unifiedRoleManagementPolicyAssignment: UnifiedRoleManagementPolicyAssignment | undefined = {} as UnifiedRoleManagementPolicyAssignment) : void {
        serializeEntity(writer, unifiedRoleManagementPolicyAssignment)
        writer.writeObjectValue<UnifiedRoleManagementPolicy>("policy", unifiedRoleManagementPolicyAssignment.policy, serializeUnifiedRoleManagementPolicy);
        writer.writeStringValue("policyId", unifiedRoleManagementPolicyAssignment.policyId);
        writer.writeStringValue("roleDefinitionId", unifiedRoleManagementPolicyAssignment.roleDefinitionId);
        writer.writeStringValue("scopeId", unifiedRoleManagementPolicyAssignment.scopeId);
        writer.writeStringValue("scopeType", unifiedRoleManagementPolicyAssignment.scopeType);
}
export interface UnifiedRoleManagementPolicyAssignment extends Entity, Parsable {
    /**
     * The policy that's associated with a policy assignment. Supports $expand and a nested $expand of the rules and effectiveRules relationships for the policy.
     */
    policy?: UnifiedRoleManagementPolicy;
    /**
     * The id of the policy. Inherited from entity.
     */
    policyId?: string;
    /**
     * For Microsoft Entra roles policy, it's the identifier of the role definition object where the policy applies. For PIM for groups membership and ownership, it's either member or owner. Supports $filter (eq).
     */
    roleDefinitionId?: string;
    /**
     * The identifier of the scope where the policy is assigned.  Can be / for the tenant or a group ID. Required.
     */
    scopeId?: string;
    /**
     * The type of the scope where the policy is assigned. One of Directory, DirectoryRole, Group. Required.
     */
    scopeType?: string;
}
// tslint:enable
// eslint-enable
