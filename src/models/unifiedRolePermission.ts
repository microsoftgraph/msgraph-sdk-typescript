// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRolePermissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRolePermission;
}
export function deserializeIntoUnifiedRolePermission(unifiedRolePermission: UnifiedRolePermission | undefined = {} as UnifiedRolePermission) : Record<string, (node: ParseNode) => void> {
    return {
        "allowedResourceActions": n => { unifiedRolePermission.allowedResourceActions = n.getCollectionOfPrimitiveValues<string>(); },
        "condition": n => { unifiedRolePermission.condition = n.getStringValue(); },
        "excludedResourceActions": n => { unifiedRolePermission.excludedResourceActions = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { unifiedRolePermission.odataType = n.getStringValue(); },
    }
}
export function serializeUnifiedRolePermission(writer: SerializationWriter, unifiedRolePermission: UnifiedRolePermission | undefined = {} as UnifiedRolePermission) : void {
    writer.writeCollectionOfPrimitiveValues<string>("allowedResourceActions", unifiedRolePermission.allowedResourceActions);
    writer.writeStringValue("condition", unifiedRolePermission.condition);
    writer.writeCollectionOfPrimitiveValues<string>("excludedResourceActions", unifiedRolePermission.excludedResourceActions);
    writer.writeStringValue("@odata.type", unifiedRolePermission.odataType);
    writer.writeAdditionalData(unifiedRolePermission.additionalData);
}
export interface UnifiedRolePermission extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Set of tasks that can be performed on a resource. Required.
     */
    allowedResourceActions?: string[];
    /**
     * Optional constraints that must be met for the permission to be effective. Not supported for custom roles.
     */
    condition?: string;
    /**
     * Set of tasks that may not be performed on a resource. Not yet supported.
     */
    excludedResourceActions?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:enable
// eslint-enable
