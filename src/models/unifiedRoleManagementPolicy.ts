// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentityFromDiscriminatorValue, serializeIdentity, type Identity } from './identity';
import { createUnifiedRoleManagementPolicyRuleFromDiscriminatorValue, serializeUnifiedRoleManagementPolicyRule, type UnifiedRoleManagementPolicyRule } from './unifiedRoleManagementPolicyRule';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleManagementPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRoleManagementPolicy;
}
export function deserializeIntoUnifiedRoleManagementPolicy(unifiedRoleManagementPolicy: UnifiedRoleManagementPolicy | undefined = {} as UnifiedRoleManagementPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(unifiedRoleManagementPolicy),
        "description": n => { unifiedRoleManagementPolicy.description = n.getStringValue(); },
        "displayName": n => { unifiedRoleManagementPolicy.displayName = n.getStringValue(); },
        "effectiveRules": n => { unifiedRoleManagementPolicy.effectiveRules = n.getCollectionOfObjectValues<UnifiedRoleManagementPolicyRule>(createUnifiedRoleManagementPolicyRuleFromDiscriminatorValue); },
        "isOrganizationDefault": n => { unifiedRoleManagementPolicy.isOrganizationDefault = n.getBooleanValue(); },
        "lastModifiedBy": n => { unifiedRoleManagementPolicy.lastModifiedBy = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { unifiedRoleManagementPolicy.lastModifiedDateTime = n.getDateValue(); },
        "rules": n => { unifiedRoleManagementPolicy.rules = n.getCollectionOfObjectValues<UnifiedRoleManagementPolicyRule>(createUnifiedRoleManagementPolicyRuleFromDiscriminatorValue); },
        "scopeId": n => { unifiedRoleManagementPolicy.scopeId = n.getStringValue(); },
        "scopeType": n => { unifiedRoleManagementPolicy.scopeType = n.getStringValue(); },
    }
}
export function serializeUnifiedRoleManagementPolicy(writer: SerializationWriter, unifiedRoleManagementPolicy: UnifiedRoleManagementPolicy | undefined = {} as UnifiedRoleManagementPolicy) : void {
        serializeEntity(writer, unifiedRoleManagementPolicy)
        writer.writeStringValue("description", unifiedRoleManagementPolicy.description);
        writer.writeStringValue("displayName", unifiedRoleManagementPolicy.displayName);
        writer.writeCollectionOfObjectValues<UnifiedRoleManagementPolicyRule>("effectiveRules", unifiedRoleManagementPolicy.effectiveRules, serializeUnifiedRoleManagementPolicyRule);
        writer.writeBooleanValue("isOrganizationDefault", unifiedRoleManagementPolicy.isOrganizationDefault);
        writer.writeObjectValue<Identity>("lastModifiedBy", unifiedRoleManagementPolicy.lastModifiedBy, serializeIdentity);
        writer.writeDateValue("lastModifiedDateTime", unifiedRoleManagementPolicy.lastModifiedDateTime);
        writer.writeCollectionOfObjectValues<UnifiedRoleManagementPolicyRule>("rules", unifiedRoleManagementPolicy.rules, serializeUnifiedRoleManagementPolicyRule);
        writer.writeStringValue("scopeId", unifiedRoleManagementPolicy.scopeId);
        writer.writeStringValue("scopeType", unifiedRoleManagementPolicy.scopeType);
}
export interface UnifiedRoleManagementPolicy extends Entity, Parsable {
    /**
     * Description for the policy.
     */
    description?: string;
    /**
     * Display name for the policy.
     */
    displayName?: string;
    /**
     * The list of effective rules like approval rules and expiration rules evaluated based on inherited referenced rules. For example, if there is a tenant-wide policy to enforce enabling an approval rule, the effective rule will be to enable approval even if the policy has a rule to disable approval. Supports $expand.
     */
    effectiveRules?: UnifiedRoleManagementPolicyRule[];
    /**
     * This can only be set to true for a single tenant-wide policy which will apply to all scopes and roles. Set the scopeId to / and scopeType to Directory. Supports $filter (eq, ne).
     */
    isOrganizationDefault?: boolean;
    /**
     * The identity who last modified the role setting.
     */
    lastModifiedBy?: Identity;
    /**
     * The time when the role setting was last modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * The collection of rules like approval rules and expiration rules. Supports $expand.
     */
    rules?: UnifiedRoleManagementPolicyRule[];
    /**
     * The identifier of the scope where the policy is created. Can be / for the tenant or a group ID. Required.
     */
    scopeId?: string;
    /**
     * The type of the scope where the policy is created. One of Directory, DirectoryRole, Group. Required.
     */
    scopeType?: string;
}
// tslint:enable
// eslint-enable
