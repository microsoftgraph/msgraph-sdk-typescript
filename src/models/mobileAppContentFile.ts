// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { MobileAppContentFileUploadState } from './mobileAppContentFileUploadState';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMobileAppContentFileFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMobileAppContentFile;
}
export function deserializeIntoMobileAppContentFile(mobileAppContentFile: MobileAppContentFile | undefined = {} as MobileAppContentFile) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(mobileAppContentFile),
        "azureStorageUri": n => { mobileAppContentFile.azureStorageUri = n.getStringValue(); },
        "azureStorageUriExpirationDateTime": n => { mobileAppContentFile.azureStorageUriExpirationDateTime = n.getDateValue(); },
        "createdDateTime": n => { mobileAppContentFile.createdDateTime = n.getDateValue(); },
        "isCommitted": n => { mobileAppContentFile.isCommitted = n.getBooleanValue(); },
        "manifest": n => { mobileAppContentFile.manifest = n.getStringValue(); },
        "name": n => { mobileAppContentFile.name = n.getStringValue(); },
        "size": n => { mobileAppContentFile.size = n.getNumberValue(); },
        "sizeEncrypted": n => { mobileAppContentFile.sizeEncrypted = n.getNumberValue(); },
        "uploadState": n => { mobileAppContentFile.uploadState = n.getEnumValue<MobileAppContentFileUploadState>(MobileAppContentFileUploadState); },
    }
}
export interface MobileAppContentFile extends Entity, Parsable {
    /**
     * The Azure Storage URI.
     */
    azureStorageUri?: string;
    /**
     * The time the Azure storage Uri expires.
     */
    azureStorageUriExpirationDateTime?: Date;
    /**
     * The time the file was created.
     */
    createdDateTime?: Date;
    /**
     * A value indicating whether the file is committed.
     */
    isCommitted?: boolean;
    /**
     * The manifest information.
     */
    manifest?: string;
    /**
     * the file name.
     */
    name?: string;
    /**
     * The size of the file prior to encryption.
     */
    size?: number;
    /**
     * The size of the file after encryption.
     */
    sizeEncrypted?: number;
    /**
     * Contains properties for upload request states.
     */
    uploadState?: MobileAppContentFileUploadState;
}
export function serializeMobileAppContentFile(writer: SerializationWriter, mobileAppContentFile: MobileAppContentFile | undefined = {} as MobileAppContentFile) : void {
        serializeEntity(writer, mobileAppContentFile)
        writer.writeStringValue("azureStorageUri", mobileAppContentFile.azureStorageUri);
        writer.writeDateValue("azureStorageUriExpirationDateTime", mobileAppContentFile.azureStorageUriExpirationDateTime);
        writer.writeDateValue("createdDateTime", mobileAppContentFile.createdDateTime);
        writer.writeBooleanValue("isCommitted", mobileAppContentFile.isCommitted);
        writer.writeStringValue("manifest", mobileAppContentFile.manifest);
        writer.writeStringValue("name", mobileAppContentFile.name);
        writer.writeNumberValue("size", mobileAppContentFile.size);
        writer.writeNumberValue("sizeEncrypted", mobileAppContentFile.sizeEncrypted);
        writer.writeEnumValue<MobileAppContentFileUploadState>("uploadState", mobileAppContentFile.uploadState);
}
// tslint:enable
// eslint-enable
