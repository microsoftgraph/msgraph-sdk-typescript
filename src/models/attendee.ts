// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAttendeeBase, serializeAttendeeBase, type AttendeeBase } from './attendeeBase';
import { createResponseStatusFromDiscriminatorValue, serializeResponseStatus, type ResponseStatus } from './responseStatus';
import { createTimeSlotFromDiscriminatorValue, serializeTimeSlot, type TimeSlot } from './timeSlot';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Attendee extends AttendeeBase, Parsable {
    /**
     * An alternate date/time proposed by the attendee for a meeting request to start and end. If the attendee hasn't proposed another time, then this property isn't included in a response of a GET event.
     */
    proposedNewTime?: TimeSlot;
    /**
     * The attendee's response (none, accepted, declined, etc.) for the event and date-time that the response was sent.
     */
    status?: ResponseStatus;
}
export function createAttendeeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttendee;
}
export function deserializeIntoAttendee(attendee: Attendee | undefined = {} as Attendee) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAttendeeBase(attendee),
        "proposedNewTime": n => { attendee.proposedNewTime = n.getObjectValue<TimeSlot>(createTimeSlotFromDiscriminatorValue); },
        "status": n => { attendee.status = n.getObjectValue<ResponseStatus>(createResponseStatusFromDiscriminatorValue); },
    }
}
export function serializeAttendee(writer: SerializationWriter, attendee: Attendee | undefined = {} as Attendee) : void {
        serializeAttendeeBase(writer, attendee)
        writer.writeObjectValue<TimeSlot>("proposedNewTime", attendee.proposedNewTime, );
        writer.writeObjectValue<ResponseStatus>("status", attendee.status, );
}
// tslint:enable
// eslint-enable
