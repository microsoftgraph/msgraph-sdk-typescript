// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDomainStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDomainState;
}
export function deserializeIntoDomainState(domainState: DomainState | undefined = {} as DomainState) : Record<string, (node: ParseNode) => void> {
    return {
        "lastActionDateTime": n => { domainState.lastActionDateTime = n.getDateValue(); },
        "@odata.type": n => { domainState.odataType = n.getStringValue(); },
        "operation": n => { domainState.operation = n.getStringValue(); },
        "status": n => { domainState.status = n.getStringValue(); },
    }
}
export interface DomainState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Timestamp for when the last activity occurred. The value is updated when an operation is scheduled, the asynchronous task starts, and when the operation completes.
     */
    lastActionDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Type of asynchronous operation. The values can be ForceDelete or Verification
     */
    operation?: string;
    /**
     * Current status of the operation.  Scheduled - Operation has been scheduled but has not started.  InProgress - Task has started and is in progress.  Failed - Operation has failed.
     */
    status?: string;
}
export function serializeDomainState(writer: SerializationWriter, domainState: DomainState | undefined = {} as DomainState) : void {
        writer.writeDateValue("lastActionDateTime", domainState.lastActionDateTime);
        writer.writeStringValue("@odata.type", domainState.odataType);
        writer.writeStringValue("operation", domainState.operation);
        writer.writeStringValue("status", domainState.status);
        writer.writeAdditionalData(domainState.additionalData);
}
// tslint:enable
// eslint-enable
