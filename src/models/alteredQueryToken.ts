// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AlteredQueryToken extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Defines the length of a changed segment.
     */
    length?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Defines the offset of a changed segment.
     */
    offset?: number;
    /**
     * Represents the corrected segment string.
     */
    suggestion?: string;
}
export function createAlteredQueryTokenFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAlteredQueryToken;
}
export function deserializeIntoAlteredQueryToken(alteredQueryToken: AlteredQueryToken | undefined = {} as AlteredQueryToken) : Record<string, (node: ParseNode) => void> {
    return {
        "length": n => { alteredQueryToken.length = n.getNumberValue(); },
        "@odata.type": n => { alteredQueryToken.odataType = n.getStringValue(); },
        "offset": n => { alteredQueryToken.offset = n.getNumberValue(); },
        "suggestion": n => { alteredQueryToken.suggestion = n.getStringValue(); },
    }
}
export function serializeAlteredQueryToken(writer: SerializationWriter, alteredQueryToken: AlteredQueryToken | undefined = {} as AlteredQueryToken) : void {
        writer.writeNumberValue("length", alteredQueryToken.length);
        writer.writeStringValue("@odata.type", alteredQueryToken.odataType);
        writer.writeNumberValue("offset", alteredQueryToken.offset);
        writer.writeStringValue("suggestion", alteredQueryToken.suggestion);
        writer.writeAdditionalData(alteredQueryToken.additionalData);
}
// tslint:enable
// eslint-enable
