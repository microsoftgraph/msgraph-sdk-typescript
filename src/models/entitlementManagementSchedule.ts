// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createExpirationPatternFromDiscriminatorValue, serializeExpirationPattern, type ExpirationPattern } from './expirationPattern';
import { createPatternedRecurrenceFromDiscriminatorValue, serializePatternedRecurrence, type PatternedRecurrence } from './patternedRecurrence';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEntitlementManagementScheduleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEntitlementManagementSchedule;
}
export function deserializeIntoEntitlementManagementSchedule(entitlementManagementSchedule: EntitlementManagementSchedule | undefined = {} as EntitlementManagementSchedule) : Record<string, (node: ParseNode) => void> {
    return {
        "expiration": n => { entitlementManagementSchedule.expiration = n.getObjectValue<ExpirationPattern>(createExpirationPatternFromDiscriminatorValue); },
        "@odata.type": n => { entitlementManagementSchedule.odataType = n.getStringValue(); },
        "recurrence": n => { entitlementManagementSchedule.recurrence = n.getObjectValue<PatternedRecurrence>(createPatternedRecurrenceFromDiscriminatorValue); },
        "startDateTime": n => { entitlementManagementSchedule.startDateTime = n.getDateValue(); },
    }
}
export interface EntitlementManagementSchedule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * When the access should expire.
     */
    expiration?: ExpirationPattern;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * For recurring access reviews.  Not used in access requests.
     */
    recurrence?: PatternedRecurrence;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    startDateTime?: Date;
}
export function serializeEntitlementManagementSchedule(writer: SerializationWriter, entitlementManagementSchedule: EntitlementManagementSchedule | undefined = {} as EntitlementManagementSchedule) : void {
    writer.writeObjectValue<ExpirationPattern>("expiration", entitlementManagementSchedule.expiration, serializeExpirationPattern);
    writer.writeStringValue("@odata.type", entitlementManagementSchedule.odataType);
    writer.writeObjectValue<PatternedRecurrence>("recurrence", entitlementManagementSchedule.recurrence, serializePatternedRecurrence);
    writer.writeDateValue("startDateTime", entitlementManagementSchedule.startDateTime);
    writer.writeAdditionalData(entitlementManagementSchedule.additionalData);
}
// tslint:enable
// eslint-enable
