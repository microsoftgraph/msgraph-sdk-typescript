// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIncompleteDataFromDiscriminatorValue, serializeIncompleteData, type IncompleteData } from './incompleteData';
import { createItemActionStatFromDiscriminatorValue, serializeItemActionStat, type ItemActionStat } from './itemActionStat';
import { createItemActivityFromDiscriminatorValue, serializeItemActivity, type ItemActivity } from './itemActivity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createItemActivityStatFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoItemActivityStat;
}
export function deserializeIntoItemActivityStat(itemActivityStat: ItemActivityStat | undefined = {} as ItemActivityStat) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(itemActivityStat),
        "access": n => { itemActivityStat.access = n.getObjectValue<ItemActionStat>(createItemActionStatFromDiscriminatorValue); },
        "activities": n => { itemActivityStat.activities = n.getCollectionOfObjectValues<ItemActivity>(createItemActivityFromDiscriminatorValue); },
        "create": n => { itemActivityStat.create = n.getObjectValue<ItemActionStat>(createItemActionStatFromDiscriminatorValue); },
        "delete": n => { itemActivityStat.delete = n.getObjectValue<ItemActionStat>(createItemActionStatFromDiscriminatorValue); },
        "edit": n => { itemActivityStat.edit = n.getObjectValue<ItemActionStat>(createItemActionStatFromDiscriminatorValue); },
        "endDateTime": n => { itemActivityStat.endDateTime = n.getDateValue(); },
        "incompleteData": n => { itemActivityStat.incompleteData = n.getObjectValue<IncompleteData>(createIncompleteDataFromDiscriminatorValue); },
        "isTrending": n => { itemActivityStat.isTrending = n.getBooleanValue(); },
        "move": n => { itemActivityStat.move = n.getObjectValue<ItemActionStat>(createItemActionStatFromDiscriminatorValue); },
        "startDateTime": n => { itemActivityStat.startDateTime = n.getDateValue(); },
    }
}
export interface ItemActivityStat extends Entity, Parsable {
    /**
     * Statistics about the access actions in this interval. Read-only.
     */
    access?: ItemActionStat;
    /**
     * Exposes the itemActivities represented in this itemActivityStat resource.
     */
    activities?: ItemActivity[];
    /**
     * Statistics about the create actions in this interval. Read-only.
     */
    create?: ItemActionStat;
    /**
     * Statistics about the delete actions in this interval. Read-only.
     */
    delete?: ItemActionStat;
    /**
     * Statistics about the edit actions in this interval. Read-only.
     */
    edit?: ItemActionStat;
    /**
     * When the interval ends. Read-only.
     */
    endDateTime?: Date;
    /**
     * Indicates that the statistics in this interval are based on incomplete data. Read-only.
     */
    incompleteData?: IncompleteData;
    /**
     * Indicates whether the item is 'trending.' Read-only.
     */
    isTrending?: boolean;
    /**
     * Statistics about the move actions in this interval. Read-only.
     */
    move?: ItemActionStat;
    /**
     * When the interval starts. Read-only.
     */
    startDateTime?: Date;
}
export function serializeItemActivityStat(writer: SerializationWriter, itemActivityStat: ItemActivityStat | undefined = {} as ItemActivityStat) : void {
    serializeEntity(writer, itemActivityStat)
    writer.writeObjectValue<ItemActionStat>("access", itemActivityStat.access, serializeItemActionStat);
    writer.writeCollectionOfObjectValues<ItemActivity>("activities", itemActivityStat.activities, serializeItemActivity);
    writer.writeObjectValue<ItemActionStat>("create", itemActivityStat.create, serializeItemActionStat);
    writer.writeObjectValue<ItemActionStat>("delete", itemActivityStat.delete, serializeItemActionStat);
    writer.writeObjectValue<ItemActionStat>("edit", itemActivityStat.edit, serializeItemActionStat);
    writer.writeDateValue("endDateTime", itemActivityStat.endDateTime);
    writer.writeObjectValue<IncompleteData>("incompleteData", itemActivityStat.incompleteData, serializeIncompleteData);
    writer.writeBooleanValue("isTrending", itemActivityStat.isTrending);
    writer.writeObjectValue<ItemActionStat>("move", itemActivityStat.move, serializeItemActionStat);
    writer.writeDateValue("startDateTime", itemActivityStat.startDateTime);
}
// tslint:enable
// eslint-enable
