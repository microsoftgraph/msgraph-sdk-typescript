// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createApplePushNotificationCertificateFromDiscriminatorValue, serializeApplePushNotificationCertificate, type ApplePushNotificationCertificate } from './applePushNotificationCertificate';
import { createAuditEventFromDiscriminatorValue, serializeAuditEvent, type AuditEvent } from './auditEvent';
import { createComplianceManagementPartnerFromDiscriminatorValue, serializeComplianceManagementPartner, type ComplianceManagementPartner } from './complianceManagementPartner';
import { createDetectedAppFromDiscriminatorValue, serializeDetectedApp, type DetectedApp } from './detectedApp';
import { createDeviceAndAppManagementRoleAssignmentFromDiscriminatorValue, serializeDeviceAndAppManagementRoleAssignment, type DeviceAndAppManagementRoleAssignment } from './deviceAndAppManagementRoleAssignment';
import { createDeviceCategoryFromDiscriminatorValue, serializeDeviceCategory, type DeviceCategory } from './deviceCategory';
import { createDeviceCompliancePolicyFromDiscriminatorValue, serializeDeviceCompliancePolicy, type DeviceCompliancePolicy } from './deviceCompliancePolicy';
import { createDeviceCompliancePolicyDeviceStateSummaryFromDiscriminatorValue, serializeDeviceCompliancePolicyDeviceStateSummary, type DeviceCompliancePolicyDeviceStateSummary } from './deviceCompliancePolicyDeviceStateSummary';
import { createDeviceCompliancePolicySettingStateSummaryFromDiscriminatorValue, serializeDeviceCompliancePolicySettingStateSummary, type DeviceCompliancePolicySettingStateSummary } from './deviceCompliancePolicySettingStateSummary';
import { createDeviceConfigurationFromDiscriminatorValue, serializeDeviceConfiguration, type DeviceConfiguration } from './deviceConfiguration';
import { createDeviceConfigurationDeviceStateSummaryFromDiscriminatorValue, serializeDeviceConfigurationDeviceStateSummary, type DeviceConfigurationDeviceStateSummary } from './deviceConfigurationDeviceStateSummary';
import { createDeviceEnrollmentConfigurationFromDiscriminatorValue, serializeDeviceEnrollmentConfiguration, type DeviceEnrollmentConfiguration } from './deviceEnrollmentConfiguration';
import { createDeviceManagementExchangeConnectorFromDiscriminatorValue, serializeDeviceManagementExchangeConnector, type DeviceManagementExchangeConnector } from './deviceManagementExchangeConnector';
import { createDeviceManagementPartnerFromDiscriminatorValue, serializeDeviceManagementPartner, type DeviceManagementPartner } from './deviceManagementPartner';
import { createDeviceManagementReportsFromDiscriminatorValue, serializeDeviceManagementReports, type DeviceManagementReports } from './deviceManagementReports';
import { createDeviceManagementSettingsFromDiscriminatorValue, serializeDeviceManagementSettings, type DeviceManagementSettings } from './deviceManagementSettings';
import { DeviceManagementSubscriptionState } from './deviceManagementSubscriptionState';
import { createDeviceManagementTroubleshootingEventFromDiscriminatorValue, serializeDeviceManagementTroubleshootingEvent, type DeviceManagementTroubleshootingEvent } from './deviceManagementTroubleshootingEvent';
import { createDeviceProtectionOverviewFromDiscriminatorValue, serializeDeviceProtectionOverview, type DeviceProtectionOverview } from './deviceProtectionOverview';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createImportedWindowsAutopilotDeviceIdentityFromDiscriminatorValue, serializeImportedWindowsAutopilotDeviceIdentity, type ImportedWindowsAutopilotDeviceIdentity } from './importedWindowsAutopilotDeviceIdentity';
import { createIntuneBrandFromDiscriminatorValue, serializeIntuneBrand, type IntuneBrand } from './intuneBrand';
import { createIosUpdateDeviceStatusFromDiscriminatorValue, serializeIosUpdateDeviceStatus, type IosUpdateDeviceStatus } from './iosUpdateDeviceStatus';
import { createManagedDeviceFromDiscriminatorValue, serializeManagedDevice, type ManagedDevice } from './managedDevice';
import { createManagedDeviceOverviewFromDiscriminatorValue, serializeManagedDeviceOverview, type ManagedDeviceOverview } from './managedDeviceOverview';
import { createMobileAppTroubleshootingEventFromDiscriminatorValue, serializeMobileAppTroubleshootingEvent, type MobileAppTroubleshootingEvent } from './mobileAppTroubleshootingEvent';
import { createMobileThreatDefenseConnectorFromDiscriminatorValue, serializeMobileThreatDefenseConnector, type MobileThreatDefenseConnector } from './mobileThreatDefenseConnector';
import { createNotificationMessageTemplateFromDiscriminatorValue, serializeNotificationMessageTemplate, type NotificationMessageTemplate } from './notificationMessageTemplate';
import { createOnPremisesConditionalAccessSettingsFromDiscriminatorValue, serializeOnPremisesConditionalAccessSettings, type OnPremisesConditionalAccessSettings } from './onPremisesConditionalAccessSettings';
import { createRemoteAssistancePartnerFromDiscriminatorValue, serializeRemoteAssistancePartner, type RemoteAssistancePartner } from './remoteAssistancePartner';
import { createResourceOperationFromDiscriminatorValue, serializeResourceOperation, type ResourceOperation } from './resourceOperation';
import { createRoleDefinitionFromDiscriminatorValue, serializeRoleDefinition, type RoleDefinition } from './roleDefinition';
import { createSoftwareUpdateStatusSummaryFromDiscriminatorValue, serializeSoftwareUpdateStatusSummary, type SoftwareUpdateStatusSummary } from './softwareUpdateStatusSummary';
import { createTelecomExpenseManagementPartnerFromDiscriminatorValue, serializeTelecomExpenseManagementPartner, type TelecomExpenseManagementPartner } from './telecomExpenseManagementPartner';
import { createTermsAndConditionsFromDiscriminatorValue, serializeTermsAndConditions, type TermsAndConditions } from './termsAndConditions';
import { createUserExperienceAnalyticsAppHealthApplicationPerformanceFromDiscriminatorValue, serializeUserExperienceAnalyticsAppHealthApplicationPerformance, type UserExperienceAnalyticsAppHealthApplicationPerformance } from './userExperienceAnalyticsAppHealthApplicationPerformance';
import { createUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetailsFromDiscriminatorValue, serializeUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails, type UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails } from './userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails';
import { createUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceIdFromDiscriminatorValue, serializeUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId, type UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId } from './userExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId';
import { createUserExperienceAnalyticsAppHealthAppPerformanceByOSVersionFromDiscriminatorValue, serializeUserExperienceAnalyticsAppHealthAppPerformanceByOSVersion, type UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion } from './userExperienceAnalyticsAppHealthAppPerformanceByOSVersion';
import { createUserExperienceAnalyticsAppHealthDeviceModelPerformanceFromDiscriminatorValue, serializeUserExperienceAnalyticsAppHealthDeviceModelPerformance, type UserExperienceAnalyticsAppHealthDeviceModelPerformance } from './userExperienceAnalyticsAppHealthDeviceModelPerformance';
import { createUserExperienceAnalyticsAppHealthDevicePerformanceFromDiscriminatorValue, serializeUserExperienceAnalyticsAppHealthDevicePerformance, type UserExperienceAnalyticsAppHealthDevicePerformance } from './userExperienceAnalyticsAppHealthDevicePerformance';
import { createUserExperienceAnalyticsAppHealthDevicePerformanceDetailsFromDiscriminatorValue, serializeUserExperienceAnalyticsAppHealthDevicePerformanceDetails, type UserExperienceAnalyticsAppHealthDevicePerformanceDetails } from './userExperienceAnalyticsAppHealthDevicePerformanceDetails';
import { createUserExperienceAnalyticsAppHealthOSVersionPerformanceFromDiscriminatorValue, serializeUserExperienceAnalyticsAppHealthOSVersionPerformance, type UserExperienceAnalyticsAppHealthOSVersionPerformance } from './userExperienceAnalyticsAppHealthOSVersionPerformance';
import { createUserExperienceAnalyticsBaselineFromDiscriminatorValue, serializeUserExperienceAnalyticsBaseline, type UserExperienceAnalyticsBaseline } from './userExperienceAnalyticsBaseline';
import { createUserExperienceAnalyticsCategoryFromDiscriminatorValue, serializeUserExperienceAnalyticsCategory, type UserExperienceAnalyticsCategory } from './userExperienceAnalyticsCategory';
import { createUserExperienceAnalyticsDevicePerformanceFromDiscriminatorValue, serializeUserExperienceAnalyticsDevicePerformance, type UserExperienceAnalyticsDevicePerformance } from './userExperienceAnalyticsDevicePerformance';
import { createUserExperienceAnalyticsDeviceScoresFromDiscriminatorValue, serializeUserExperienceAnalyticsDeviceScores, type UserExperienceAnalyticsDeviceScores } from './userExperienceAnalyticsDeviceScores';
import { createUserExperienceAnalyticsDeviceStartupHistoryFromDiscriminatorValue, serializeUserExperienceAnalyticsDeviceStartupHistory, type UserExperienceAnalyticsDeviceStartupHistory } from './userExperienceAnalyticsDeviceStartupHistory';
import { createUserExperienceAnalyticsDeviceStartupProcessFromDiscriminatorValue, serializeUserExperienceAnalyticsDeviceStartupProcess, type UserExperienceAnalyticsDeviceStartupProcess } from './userExperienceAnalyticsDeviceStartupProcess';
import { createUserExperienceAnalyticsDeviceStartupProcessPerformanceFromDiscriminatorValue, serializeUserExperienceAnalyticsDeviceStartupProcessPerformance, type UserExperienceAnalyticsDeviceStartupProcessPerformance } from './userExperienceAnalyticsDeviceStartupProcessPerformance';
import { createUserExperienceAnalyticsMetricHistoryFromDiscriminatorValue, serializeUserExperienceAnalyticsMetricHistory, type UserExperienceAnalyticsMetricHistory } from './userExperienceAnalyticsMetricHistory';
import { createUserExperienceAnalyticsModelScoresFromDiscriminatorValue, serializeUserExperienceAnalyticsModelScores, type UserExperienceAnalyticsModelScores } from './userExperienceAnalyticsModelScores';
import { createUserExperienceAnalyticsOverviewFromDiscriminatorValue, serializeUserExperienceAnalyticsOverview, type UserExperienceAnalyticsOverview } from './userExperienceAnalyticsOverview';
import { createUserExperienceAnalyticsScoreHistoryFromDiscriminatorValue, serializeUserExperienceAnalyticsScoreHistory, type UserExperienceAnalyticsScoreHistory } from './userExperienceAnalyticsScoreHistory';
import { createUserExperienceAnalyticsSettingsFromDiscriminatorValue, serializeUserExperienceAnalyticsSettings, type UserExperienceAnalyticsSettings } from './userExperienceAnalyticsSettings';
import { createUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricFromDiscriminatorValue, serializeUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric, type UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric } from './userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric';
import { createUserExperienceAnalyticsWorkFromAnywhereMetricFromDiscriminatorValue, serializeUserExperienceAnalyticsWorkFromAnywhereMetric, type UserExperienceAnalyticsWorkFromAnywhereMetric } from './userExperienceAnalyticsWorkFromAnywhereMetric';
import { createUserExperienceAnalyticsWorkFromAnywhereModelPerformanceFromDiscriminatorValue, serializeUserExperienceAnalyticsWorkFromAnywhereModelPerformance, type UserExperienceAnalyticsWorkFromAnywhereModelPerformance } from './userExperienceAnalyticsWorkFromAnywhereModelPerformance';
import { createWindowsAutopilotDeviceIdentityFromDiscriminatorValue, serializeWindowsAutopilotDeviceIdentity, type WindowsAutopilotDeviceIdentity } from './windowsAutopilotDeviceIdentity';
import { createWindowsInformationProtectionAppLearningSummaryFromDiscriminatorValue, serializeWindowsInformationProtectionAppLearningSummary, type WindowsInformationProtectionAppLearningSummary } from './windowsInformationProtectionAppLearningSummary';
import { createWindowsInformationProtectionNetworkLearningSummaryFromDiscriminatorValue, serializeWindowsInformationProtectionNetworkLearningSummary, type WindowsInformationProtectionNetworkLearningSummary } from './windowsInformationProtectionNetworkLearningSummary';
import { createWindowsMalwareInformationFromDiscriminatorValue, serializeWindowsMalwareInformation, type WindowsMalwareInformation } from './windowsMalwareInformation';
import { createWindowsMalwareOverviewFromDiscriminatorValue, serializeWindowsMalwareOverview, type WindowsMalwareOverview } from './windowsMalwareOverview';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export function createDeviceManagementFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceManagement;
}
export function deserializeIntoDeviceManagement(deviceManagement: DeviceManagement | undefined = {} as DeviceManagement) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceManagement),
        "applePushNotificationCertificate": n => { deviceManagement.applePushNotificationCertificate = n.getObjectValue<ApplePushNotificationCertificate>(createApplePushNotificationCertificateFromDiscriminatorValue); },
        "auditEvents": n => { deviceManagement.auditEvents = n.getCollectionOfObjectValues<AuditEvent>(createAuditEventFromDiscriminatorValue); },
        "complianceManagementPartners": n => { deviceManagement.complianceManagementPartners = n.getCollectionOfObjectValues<ComplianceManagementPartner>(createComplianceManagementPartnerFromDiscriminatorValue); },
        "conditionalAccessSettings": n => { deviceManagement.conditionalAccessSettings = n.getObjectValue<OnPremisesConditionalAccessSettings>(createOnPremisesConditionalAccessSettingsFromDiscriminatorValue); },
        "detectedApps": n => { deviceManagement.detectedApps = n.getCollectionOfObjectValues<DetectedApp>(createDetectedAppFromDiscriminatorValue); },
        "deviceCategories": n => { deviceManagement.deviceCategories = n.getCollectionOfObjectValues<DeviceCategory>(createDeviceCategoryFromDiscriminatorValue); },
        "deviceCompliancePolicies": n => { deviceManagement.deviceCompliancePolicies = n.getCollectionOfObjectValues<DeviceCompliancePolicy>(createDeviceCompliancePolicyFromDiscriminatorValue); },
        "deviceCompliancePolicyDeviceStateSummary": n => { deviceManagement.deviceCompliancePolicyDeviceStateSummary = n.getObjectValue<DeviceCompliancePolicyDeviceStateSummary>(createDeviceCompliancePolicyDeviceStateSummaryFromDiscriminatorValue); },
        "deviceCompliancePolicySettingStateSummaries": n => { deviceManagement.deviceCompliancePolicySettingStateSummaries = n.getCollectionOfObjectValues<DeviceCompliancePolicySettingStateSummary>(createDeviceCompliancePolicySettingStateSummaryFromDiscriminatorValue); },
        "deviceConfigurationDeviceStateSummaries": n => { deviceManagement.deviceConfigurationDeviceStateSummaries = n.getObjectValue<DeviceConfigurationDeviceStateSummary>(createDeviceConfigurationDeviceStateSummaryFromDiscriminatorValue); },
        "deviceConfigurations": n => { deviceManagement.deviceConfigurations = n.getCollectionOfObjectValues<DeviceConfiguration>(createDeviceConfigurationFromDiscriminatorValue); },
        "deviceEnrollmentConfigurations": n => { deviceManagement.deviceEnrollmentConfigurations = n.getCollectionOfObjectValues<DeviceEnrollmentConfiguration>(createDeviceEnrollmentConfigurationFromDiscriminatorValue); },
        "deviceManagementPartners": n => { deviceManagement.deviceManagementPartners = n.getCollectionOfObjectValues<DeviceManagementPartner>(createDeviceManagementPartnerFromDiscriminatorValue); },
        "deviceProtectionOverview": n => { deviceManagement.deviceProtectionOverview = n.getObjectValue<DeviceProtectionOverview>(createDeviceProtectionOverviewFromDiscriminatorValue); },
        "exchangeConnectors": n => { deviceManagement.exchangeConnectors = n.getCollectionOfObjectValues<DeviceManagementExchangeConnector>(createDeviceManagementExchangeConnectorFromDiscriminatorValue); },
        "importedWindowsAutopilotDeviceIdentities": n => { deviceManagement.importedWindowsAutopilotDeviceIdentities = n.getCollectionOfObjectValues<ImportedWindowsAutopilotDeviceIdentity>(createImportedWindowsAutopilotDeviceIdentityFromDiscriminatorValue); },
        "intuneAccountId": n => { deviceManagement.intuneAccountId = n.getGuidValue(); },
        "intuneBrand": n => { deviceManagement.intuneBrand = n.getObjectValue<IntuneBrand>(createIntuneBrandFromDiscriminatorValue); },
        "iosUpdateStatuses": n => { deviceManagement.iosUpdateStatuses = n.getCollectionOfObjectValues<IosUpdateDeviceStatus>(createIosUpdateDeviceStatusFromDiscriminatorValue); },
        "managedDeviceOverview": n => { deviceManagement.managedDeviceOverview = n.getObjectValue<ManagedDeviceOverview>(createManagedDeviceOverviewFromDiscriminatorValue); },
        "managedDevices": n => { deviceManagement.managedDevices = n.getCollectionOfObjectValues<ManagedDevice>(createManagedDeviceFromDiscriminatorValue); },
        "mobileAppTroubleshootingEvents": n => { deviceManagement.mobileAppTroubleshootingEvents = n.getCollectionOfObjectValues<MobileAppTroubleshootingEvent>(createMobileAppTroubleshootingEventFromDiscriminatorValue); },
        "mobileThreatDefenseConnectors": n => { deviceManagement.mobileThreatDefenseConnectors = n.getCollectionOfObjectValues<MobileThreatDefenseConnector>(createMobileThreatDefenseConnectorFromDiscriminatorValue); },
        "notificationMessageTemplates": n => { deviceManagement.notificationMessageTemplates = n.getCollectionOfObjectValues<NotificationMessageTemplate>(createNotificationMessageTemplateFromDiscriminatorValue); },
        "remoteAssistancePartners": n => { deviceManagement.remoteAssistancePartners = n.getCollectionOfObjectValues<RemoteAssistancePartner>(createRemoteAssistancePartnerFromDiscriminatorValue); },
        "reports": n => { deviceManagement.reports = n.getObjectValue<DeviceManagementReports>(createDeviceManagementReportsFromDiscriminatorValue); },
        "resourceOperations": n => { deviceManagement.resourceOperations = n.getCollectionOfObjectValues<ResourceOperation>(createResourceOperationFromDiscriminatorValue); },
        "roleAssignments": n => { deviceManagement.roleAssignments = n.getCollectionOfObjectValues<DeviceAndAppManagementRoleAssignment>(createDeviceAndAppManagementRoleAssignmentFromDiscriminatorValue); },
        "roleDefinitions": n => { deviceManagement.roleDefinitions = n.getCollectionOfObjectValues<RoleDefinition>(createRoleDefinitionFromDiscriminatorValue); },
        "settings": n => { deviceManagement.settings = n.getObjectValue<DeviceManagementSettings>(createDeviceManagementSettingsFromDiscriminatorValue); },
        "softwareUpdateStatusSummary": n => { deviceManagement.softwareUpdateStatusSummary = n.getObjectValue<SoftwareUpdateStatusSummary>(createSoftwareUpdateStatusSummaryFromDiscriminatorValue); },
        "subscriptionState": n => { deviceManagement.subscriptionState = n.getEnumValue<DeviceManagementSubscriptionState>(DeviceManagementSubscriptionState); },
        "telecomExpenseManagementPartners": n => { deviceManagement.telecomExpenseManagementPartners = n.getCollectionOfObjectValues<TelecomExpenseManagementPartner>(createTelecomExpenseManagementPartnerFromDiscriminatorValue); },
        "termsAndConditions": n => { deviceManagement.termsAndConditions = n.getCollectionOfObjectValues<TermsAndConditions>(createTermsAndConditionsFromDiscriminatorValue); },
        "troubleshootingEvents": n => { deviceManagement.troubleshootingEvents = n.getCollectionOfObjectValues<DeviceManagementTroubleshootingEvent>(createDeviceManagementTroubleshootingEventFromDiscriminatorValue); },
        "userExperienceAnalyticsAppHealthApplicationPerformance": n => { deviceManagement.userExperienceAnalyticsAppHealthApplicationPerformance = n.getCollectionOfObjectValues<UserExperienceAnalyticsAppHealthApplicationPerformance>(createUserExperienceAnalyticsAppHealthApplicationPerformanceFromDiscriminatorValue); },
        "userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails": n => { deviceManagement.userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails = n.getCollectionOfObjectValues<UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails>(createUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetailsFromDiscriminatorValue); },
        "userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId": n => { deviceManagement.userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId = n.getCollectionOfObjectValues<UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId>(createUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceIdFromDiscriminatorValue); },
        "userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion": n => { deviceManagement.userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion = n.getCollectionOfObjectValues<UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion>(createUserExperienceAnalyticsAppHealthAppPerformanceByOSVersionFromDiscriminatorValue); },
        "userExperienceAnalyticsAppHealthDeviceModelPerformance": n => { deviceManagement.userExperienceAnalyticsAppHealthDeviceModelPerformance = n.getCollectionOfObjectValues<UserExperienceAnalyticsAppHealthDeviceModelPerformance>(createUserExperienceAnalyticsAppHealthDeviceModelPerformanceFromDiscriminatorValue); },
        "userExperienceAnalyticsAppHealthDevicePerformance": n => { deviceManagement.userExperienceAnalyticsAppHealthDevicePerformance = n.getCollectionOfObjectValues<UserExperienceAnalyticsAppHealthDevicePerformance>(createUserExperienceAnalyticsAppHealthDevicePerformanceFromDiscriminatorValue); },
        "userExperienceAnalyticsAppHealthDevicePerformanceDetails": n => { deviceManagement.userExperienceAnalyticsAppHealthDevicePerformanceDetails = n.getCollectionOfObjectValues<UserExperienceAnalyticsAppHealthDevicePerformanceDetails>(createUserExperienceAnalyticsAppHealthDevicePerformanceDetailsFromDiscriminatorValue); },
        "userExperienceAnalyticsAppHealthOSVersionPerformance": n => { deviceManagement.userExperienceAnalyticsAppHealthOSVersionPerformance = n.getCollectionOfObjectValues<UserExperienceAnalyticsAppHealthOSVersionPerformance>(createUserExperienceAnalyticsAppHealthOSVersionPerformanceFromDiscriminatorValue); },
        "userExperienceAnalyticsAppHealthOverview": n => { deviceManagement.userExperienceAnalyticsAppHealthOverview = n.getObjectValue<UserExperienceAnalyticsCategory>(createUserExperienceAnalyticsCategoryFromDiscriminatorValue); },
        "userExperienceAnalyticsBaselines": n => { deviceManagement.userExperienceAnalyticsBaselines = n.getCollectionOfObjectValues<UserExperienceAnalyticsBaseline>(createUserExperienceAnalyticsBaselineFromDiscriminatorValue); },
        "userExperienceAnalyticsCategories": n => { deviceManagement.userExperienceAnalyticsCategories = n.getCollectionOfObjectValues<UserExperienceAnalyticsCategory>(createUserExperienceAnalyticsCategoryFromDiscriminatorValue); },
        "userExperienceAnalyticsDevicePerformance": n => { deviceManagement.userExperienceAnalyticsDevicePerformance = n.getCollectionOfObjectValues<UserExperienceAnalyticsDevicePerformance>(createUserExperienceAnalyticsDevicePerformanceFromDiscriminatorValue); },
        "userExperienceAnalyticsDeviceScores": n => { deviceManagement.userExperienceAnalyticsDeviceScores = n.getCollectionOfObjectValues<UserExperienceAnalyticsDeviceScores>(createUserExperienceAnalyticsDeviceScoresFromDiscriminatorValue); },
        "userExperienceAnalyticsDeviceStartupHistory": n => { deviceManagement.userExperienceAnalyticsDeviceStartupHistory = n.getCollectionOfObjectValues<UserExperienceAnalyticsDeviceStartupHistory>(createUserExperienceAnalyticsDeviceStartupHistoryFromDiscriminatorValue); },
        "userExperienceAnalyticsDeviceStartupProcesses": n => { deviceManagement.userExperienceAnalyticsDeviceStartupProcesses = n.getCollectionOfObjectValues<UserExperienceAnalyticsDeviceStartupProcess>(createUserExperienceAnalyticsDeviceStartupProcessFromDiscriminatorValue); },
        "userExperienceAnalyticsDeviceStartupProcessPerformance": n => { deviceManagement.userExperienceAnalyticsDeviceStartupProcessPerformance = n.getCollectionOfObjectValues<UserExperienceAnalyticsDeviceStartupProcessPerformance>(createUserExperienceAnalyticsDeviceStartupProcessPerformanceFromDiscriminatorValue); },
        "userExperienceAnalyticsMetricHistory": n => { deviceManagement.userExperienceAnalyticsMetricHistory = n.getCollectionOfObjectValues<UserExperienceAnalyticsMetricHistory>(createUserExperienceAnalyticsMetricHistoryFromDiscriminatorValue); },
        "userExperienceAnalyticsModelScores": n => { deviceManagement.userExperienceAnalyticsModelScores = n.getCollectionOfObjectValues<UserExperienceAnalyticsModelScores>(createUserExperienceAnalyticsModelScoresFromDiscriminatorValue); },
        "userExperienceAnalyticsOverview": n => { deviceManagement.userExperienceAnalyticsOverview = n.getObjectValue<UserExperienceAnalyticsOverview>(createUserExperienceAnalyticsOverviewFromDiscriminatorValue); },
        "userExperienceAnalyticsScoreHistory": n => { deviceManagement.userExperienceAnalyticsScoreHistory = n.getCollectionOfObjectValues<UserExperienceAnalyticsScoreHistory>(createUserExperienceAnalyticsScoreHistoryFromDiscriminatorValue); },
        "userExperienceAnalyticsSettings": n => { deviceManagement.userExperienceAnalyticsSettings = n.getObjectValue<UserExperienceAnalyticsSettings>(createUserExperienceAnalyticsSettingsFromDiscriminatorValue); },
        "userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric": n => { deviceManagement.userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric = n.getObjectValue<UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric>(createUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricFromDiscriminatorValue); },
        "userExperienceAnalyticsWorkFromAnywhereMetrics": n => { deviceManagement.userExperienceAnalyticsWorkFromAnywhereMetrics = n.getCollectionOfObjectValues<UserExperienceAnalyticsWorkFromAnywhereMetric>(createUserExperienceAnalyticsWorkFromAnywhereMetricFromDiscriminatorValue); },
        "userExperienceAnalyticsWorkFromAnywhereModelPerformance": n => { deviceManagement.userExperienceAnalyticsWorkFromAnywhereModelPerformance = n.getCollectionOfObjectValues<UserExperienceAnalyticsWorkFromAnywhereModelPerformance>(createUserExperienceAnalyticsWorkFromAnywhereModelPerformanceFromDiscriminatorValue); },
        "windowsAutopilotDeviceIdentities": n => { deviceManagement.windowsAutopilotDeviceIdentities = n.getCollectionOfObjectValues<WindowsAutopilotDeviceIdentity>(createWindowsAutopilotDeviceIdentityFromDiscriminatorValue); },
        "windowsInformationProtectionAppLearningSummaries": n => { deviceManagement.windowsInformationProtectionAppLearningSummaries = n.getCollectionOfObjectValues<WindowsInformationProtectionAppLearningSummary>(createWindowsInformationProtectionAppLearningSummaryFromDiscriminatorValue); },
        "windowsInformationProtectionNetworkLearningSummaries": n => { deviceManagement.windowsInformationProtectionNetworkLearningSummaries = n.getCollectionOfObjectValues<WindowsInformationProtectionNetworkLearningSummary>(createWindowsInformationProtectionNetworkLearningSummaryFromDiscriminatorValue); },
        "windowsMalwareInformation": n => { deviceManagement.windowsMalwareInformation = n.getCollectionOfObjectValues<WindowsMalwareInformation>(createWindowsMalwareInformationFromDiscriminatorValue); },
        "windowsMalwareOverview": n => { deviceManagement.windowsMalwareOverview = n.getObjectValue<WindowsMalwareOverview>(createWindowsMalwareOverviewFromDiscriminatorValue); },
    }
}
export interface DeviceManagement extends Entity, Parsable {
    /**
     * Apple push notification certificate.
     */
    applePushNotificationCertificate?: ApplePushNotificationCertificate;
    /**
     * The Audit Events
     */
    auditEvents?: AuditEvent[];
    /**
     * The list of Compliance Management Partners configured by the tenant.
     */
    complianceManagementPartners?: ComplianceManagementPartner[];
    /**
     * The Exchange on premises conditional access settings. On premises conditional access will require devices to be both enrolled and compliant for mail access
     */
    conditionalAccessSettings?: OnPremisesConditionalAccessSettings;
    /**
     * The list of detected apps associated with a device.
     */
    detectedApps?: DetectedApp[];
    /**
     * The list of device categories with the tenant.
     */
    deviceCategories?: DeviceCategory[];
    /**
     * The device compliance policies.
     */
    deviceCompliancePolicies?: DeviceCompliancePolicy[];
    /**
     * The device compliance state summary for this account.
     */
    deviceCompliancePolicyDeviceStateSummary?: DeviceCompliancePolicyDeviceStateSummary;
    /**
     * The summary states of compliance policy settings for this account.
     */
    deviceCompliancePolicySettingStateSummaries?: DeviceCompliancePolicySettingStateSummary[];
    /**
     * The device configuration device state summary for this account.
     */
    deviceConfigurationDeviceStateSummaries?: DeviceConfigurationDeviceStateSummary;
    /**
     * The device configurations.
     */
    deviceConfigurations?: DeviceConfiguration[];
    /**
     * The list of device enrollment configurations
     */
    deviceEnrollmentConfigurations?: DeviceEnrollmentConfiguration[];
    /**
     * The list of Device Management Partners configured by the tenant.
     */
    deviceManagementPartners?: DeviceManagementPartner[];
    /**
     * Device protection overview.
     */
    deviceProtectionOverview?: DeviceProtectionOverview;
    /**
     * The list of Exchange Connectors configured by the tenant.
     */
    exchangeConnectors?: DeviceManagementExchangeConnector[];
    /**
     * Collection of imported Windows autopilot devices.
     */
    importedWindowsAutopilotDeviceIdentities?: ImportedWindowsAutopilotDeviceIdentity[];
    /**
     * Intune Account Id for given tenant
     */
    intuneAccountId?: Guid;
    /**
     * intuneBrand contains data which is used in customizing the appearance of the Company Portal applications as well as the end user web portal.
     */
    intuneBrand?: IntuneBrand;
    /**
     * The IOS software update installation statuses for this account.
     */
    iosUpdateStatuses?: IosUpdateDeviceStatus[];
    /**
     * Device overview
     */
    managedDeviceOverview?: ManagedDeviceOverview;
    /**
     * The list of managed devices.
     */
    managedDevices?: ManagedDevice[];
    /**
     * The collection property of MobileAppTroubleshootingEvent.
     */
    mobileAppTroubleshootingEvents?: MobileAppTroubleshootingEvent[];
    /**
     * The list of Mobile threat Defense connectors configured by the tenant.
     */
    mobileThreatDefenseConnectors?: MobileThreatDefenseConnector[];
    /**
     * The Notification Message Templates.
     */
    notificationMessageTemplates?: NotificationMessageTemplate[];
    /**
     * The remote assist partners.
     */
    remoteAssistancePartners?: RemoteAssistancePartner[];
    /**
     * Reports singleton
     */
    reports?: DeviceManagementReports;
    /**
     * The Resource Operations.
     */
    resourceOperations?: ResourceOperation[];
    /**
     * The Role Assignments.
     */
    roleAssignments?: DeviceAndAppManagementRoleAssignment[];
    /**
     * The Role Definitions.
     */
    roleDefinitions?: RoleDefinition[];
    /**
     * Account level settings.
     */
    settings?: DeviceManagementSettings;
    /**
     * The software update status summary.
     */
    softwareUpdateStatusSummary?: SoftwareUpdateStatusSummary;
    /**
     * Tenant mobile device management subscription state.
     */
    subscriptionState?: DeviceManagementSubscriptionState;
    /**
     * The telecom expense management partners.
     */
    telecomExpenseManagementPartners?: TelecomExpenseManagementPartner[];
    /**
     * The terms and conditions associated with device management of the company.
     */
    termsAndConditions?: TermsAndConditions[];
    /**
     * The list of troubleshooting events for the tenant.
     */
    troubleshootingEvents?: DeviceManagementTroubleshootingEvent[];
    /**
     * User experience analytics appHealth Application Performance
     */
    userExperienceAnalyticsAppHealthApplicationPerformance?: UserExperienceAnalyticsAppHealthApplicationPerformance[];
    /**
     * User experience analytics appHealth Application Performance by App Version details
     */
    userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails?: UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails[];
    /**
     * User experience analytics appHealth Application Performance by App Version Device Id
     */
    userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId?: UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId[];
    /**
     * User experience analytics appHealth Application Performance by OS Version
     */
    userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion?: UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion[];
    /**
     * User experience analytics appHealth Model Performance
     */
    userExperienceAnalyticsAppHealthDeviceModelPerformance?: UserExperienceAnalyticsAppHealthDeviceModelPerformance[];
    /**
     * User experience analytics appHealth Device Performance
     */
    userExperienceAnalyticsAppHealthDevicePerformance?: UserExperienceAnalyticsAppHealthDevicePerformance[];
    /**
     * User experience analytics device performance details
     */
    userExperienceAnalyticsAppHealthDevicePerformanceDetails?: UserExperienceAnalyticsAppHealthDevicePerformanceDetails[];
    /**
     * User experience analytics appHealth OS version Performance
     */
    userExperienceAnalyticsAppHealthOSVersionPerformance?: UserExperienceAnalyticsAppHealthOSVersionPerformance[];
    /**
     * User experience analytics appHealth overview
     */
    userExperienceAnalyticsAppHealthOverview?: UserExperienceAnalyticsCategory;
    /**
     * User experience analytics baselines
     */
    userExperienceAnalyticsBaselines?: UserExperienceAnalyticsBaseline[];
    /**
     * User experience analytics categories
     */
    userExperienceAnalyticsCategories?: UserExperienceAnalyticsCategory[];
    /**
     * User experience analytics device performance
     */
    userExperienceAnalyticsDevicePerformance?: UserExperienceAnalyticsDevicePerformance[];
    /**
     * User experience analytics device scores
     */
    userExperienceAnalyticsDeviceScores?: UserExperienceAnalyticsDeviceScores[];
    /**
     * User experience analytics device Startup History
     */
    userExperienceAnalyticsDeviceStartupHistory?: UserExperienceAnalyticsDeviceStartupHistory[];
    /**
     * User experience analytics device Startup Processes
     */
    userExperienceAnalyticsDeviceStartupProcesses?: UserExperienceAnalyticsDeviceStartupProcess[];
    /**
     * User experience analytics device Startup Process Performance
     */
    userExperienceAnalyticsDeviceStartupProcessPerformance?: UserExperienceAnalyticsDeviceStartupProcessPerformance[];
    /**
     * User experience analytics metric history
     */
    userExperienceAnalyticsMetricHistory?: UserExperienceAnalyticsMetricHistory[];
    /**
     * User experience analytics model scores
     */
    userExperienceAnalyticsModelScores?: UserExperienceAnalyticsModelScores[];
    /**
     * User experience analytics overview
     */
    userExperienceAnalyticsOverview?: UserExperienceAnalyticsOverview;
    /**
     * User experience analytics device Startup Score History
     */
    userExperienceAnalyticsScoreHistory?: UserExperienceAnalyticsScoreHistory[];
    /**
     * User experience analytics device settings
     */
    userExperienceAnalyticsSettings?: UserExperienceAnalyticsSettings;
    /**
     * User experience analytics work from anywhere hardware readiness metrics.
     */
    userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric?: UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric;
    /**
     * User experience analytics work from anywhere metrics.
     */
    userExperienceAnalyticsWorkFromAnywhereMetrics?: UserExperienceAnalyticsWorkFromAnywhereMetric[];
    /**
     * The user experience analytics work from anywhere model performance
     */
    userExperienceAnalyticsWorkFromAnywhereModelPerformance?: UserExperienceAnalyticsWorkFromAnywhereModelPerformance[];
    /**
     * The Windows autopilot device identities contained collection.
     */
    windowsAutopilotDeviceIdentities?: WindowsAutopilotDeviceIdentity[];
    /**
     * The windows information protection app learning summaries.
     */
    windowsInformationProtectionAppLearningSummaries?: WindowsInformationProtectionAppLearningSummary[];
    /**
     * The windows information protection network learning summaries.
     */
    windowsInformationProtectionNetworkLearningSummaries?: WindowsInformationProtectionNetworkLearningSummary[];
    /**
     * The list of affected malware in the tenant.
     */
    windowsMalwareInformation?: WindowsMalwareInformation[];
    /**
     * Malware overview for windows devices.
     */
    windowsMalwareOverview?: WindowsMalwareOverview;
}
export function serializeDeviceManagement(writer: SerializationWriter, deviceManagement: DeviceManagement | undefined = {} as DeviceManagement) : void {
    serializeEntity(writer, deviceManagement)
    writer.writeObjectValue<ApplePushNotificationCertificate>("applePushNotificationCertificate", deviceManagement.applePushNotificationCertificate, serializeApplePushNotificationCertificate);
    writer.writeCollectionOfObjectValues<AuditEvent>("auditEvents", deviceManagement.auditEvents, serializeAuditEvent);
    writer.writeCollectionOfObjectValues<ComplianceManagementPartner>("complianceManagementPartners", deviceManagement.complianceManagementPartners, serializeComplianceManagementPartner);
    writer.writeObjectValue<OnPremisesConditionalAccessSettings>("conditionalAccessSettings", deviceManagement.conditionalAccessSettings, serializeOnPremisesConditionalAccessSettings);
    writer.writeCollectionOfObjectValues<DetectedApp>("detectedApps", deviceManagement.detectedApps, serializeDetectedApp);
    writer.writeCollectionOfObjectValues<DeviceCategory>("deviceCategories", deviceManagement.deviceCategories, serializeDeviceCategory);
    writer.writeCollectionOfObjectValues<DeviceCompliancePolicy>("deviceCompliancePolicies", deviceManagement.deviceCompliancePolicies, serializeDeviceCompliancePolicy);
    writer.writeObjectValue<DeviceCompliancePolicyDeviceStateSummary>("deviceCompliancePolicyDeviceStateSummary", deviceManagement.deviceCompliancePolicyDeviceStateSummary, serializeDeviceCompliancePolicyDeviceStateSummary);
    writer.writeCollectionOfObjectValues<DeviceCompliancePolicySettingStateSummary>("deviceCompliancePolicySettingStateSummaries", deviceManagement.deviceCompliancePolicySettingStateSummaries, serializeDeviceCompliancePolicySettingStateSummary);
    writer.writeObjectValue<DeviceConfigurationDeviceStateSummary>("deviceConfigurationDeviceStateSummaries", deviceManagement.deviceConfigurationDeviceStateSummaries, serializeDeviceConfigurationDeviceStateSummary);
    writer.writeCollectionOfObjectValues<DeviceConfiguration>("deviceConfigurations", deviceManagement.deviceConfigurations, serializeDeviceConfiguration);
    writer.writeCollectionOfObjectValues<DeviceEnrollmentConfiguration>("deviceEnrollmentConfigurations", deviceManagement.deviceEnrollmentConfigurations, serializeDeviceEnrollmentConfiguration);
    writer.writeCollectionOfObjectValues<DeviceManagementPartner>("deviceManagementPartners", deviceManagement.deviceManagementPartners, serializeDeviceManagementPartner);
    writer.writeObjectValue<DeviceProtectionOverview>("deviceProtectionOverview", deviceManagement.deviceProtectionOverview, serializeDeviceProtectionOverview);
    writer.writeCollectionOfObjectValues<DeviceManagementExchangeConnector>("exchangeConnectors", deviceManagement.exchangeConnectors, serializeDeviceManagementExchangeConnector);
    writer.writeCollectionOfObjectValues<ImportedWindowsAutopilotDeviceIdentity>("importedWindowsAutopilotDeviceIdentities", deviceManagement.importedWindowsAutopilotDeviceIdentities, serializeImportedWindowsAutopilotDeviceIdentity);
    writer.writeGuidValue("intuneAccountId", deviceManagement.intuneAccountId);
    writer.writeObjectValue<IntuneBrand>("intuneBrand", deviceManagement.intuneBrand, serializeIntuneBrand);
    writer.writeCollectionOfObjectValues<IosUpdateDeviceStatus>("iosUpdateStatuses", deviceManagement.iosUpdateStatuses, serializeIosUpdateDeviceStatus);
    writer.writeObjectValue<ManagedDeviceOverview>("managedDeviceOverview", deviceManagement.managedDeviceOverview, serializeManagedDeviceOverview);
    writer.writeCollectionOfObjectValues<ManagedDevice>("managedDevices", deviceManagement.managedDevices, serializeManagedDevice);
    writer.writeCollectionOfObjectValues<MobileAppTroubleshootingEvent>("mobileAppTroubleshootingEvents", deviceManagement.mobileAppTroubleshootingEvents, serializeMobileAppTroubleshootingEvent);
    writer.writeCollectionOfObjectValues<MobileThreatDefenseConnector>("mobileThreatDefenseConnectors", deviceManagement.mobileThreatDefenseConnectors, serializeMobileThreatDefenseConnector);
    writer.writeCollectionOfObjectValues<NotificationMessageTemplate>("notificationMessageTemplates", deviceManagement.notificationMessageTemplates, serializeNotificationMessageTemplate);
    writer.writeCollectionOfObjectValues<RemoteAssistancePartner>("remoteAssistancePartners", deviceManagement.remoteAssistancePartners, serializeRemoteAssistancePartner);
    writer.writeObjectValue<DeviceManagementReports>("reports", deviceManagement.reports, serializeDeviceManagementReports);
    writer.writeCollectionOfObjectValues<ResourceOperation>("resourceOperations", deviceManagement.resourceOperations, serializeResourceOperation);
    writer.writeCollectionOfObjectValues<DeviceAndAppManagementRoleAssignment>("roleAssignments", deviceManagement.roleAssignments, serializeDeviceAndAppManagementRoleAssignment);
    writer.writeCollectionOfObjectValues<RoleDefinition>("roleDefinitions", deviceManagement.roleDefinitions, serializeRoleDefinition);
    writer.writeObjectValue<DeviceManagementSettings>("settings", deviceManagement.settings, serializeDeviceManagementSettings);
    writer.writeObjectValue<SoftwareUpdateStatusSummary>("softwareUpdateStatusSummary", deviceManagement.softwareUpdateStatusSummary, serializeSoftwareUpdateStatusSummary);
    writer.writeEnumValue<DeviceManagementSubscriptionState>("subscriptionState", deviceManagement.subscriptionState);
    writer.writeCollectionOfObjectValues<TelecomExpenseManagementPartner>("telecomExpenseManagementPartners", deviceManagement.telecomExpenseManagementPartners, serializeTelecomExpenseManagementPartner);
    writer.writeCollectionOfObjectValues<TermsAndConditions>("termsAndConditions", deviceManagement.termsAndConditions, serializeTermsAndConditions);
    writer.writeCollectionOfObjectValues<DeviceManagementTroubleshootingEvent>("troubleshootingEvents", deviceManagement.troubleshootingEvents, serializeDeviceManagementTroubleshootingEvent);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsAppHealthApplicationPerformance>("userExperienceAnalyticsAppHealthApplicationPerformance", deviceManagement.userExperienceAnalyticsAppHealthApplicationPerformance, serializeUserExperienceAnalyticsAppHealthApplicationPerformance);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails>("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails", deviceManagement.userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails, serializeUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId>("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId", deviceManagement.userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId, serializeUserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion>("userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion", deviceManagement.userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion, serializeUserExperienceAnalyticsAppHealthAppPerformanceByOSVersion);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsAppHealthDeviceModelPerformance>("userExperienceAnalyticsAppHealthDeviceModelPerformance", deviceManagement.userExperienceAnalyticsAppHealthDeviceModelPerformance, serializeUserExperienceAnalyticsAppHealthDeviceModelPerformance);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsAppHealthDevicePerformance>("userExperienceAnalyticsAppHealthDevicePerformance", deviceManagement.userExperienceAnalyticsAppHealthDevicePerformance, serializeUserExperienceAnalyticsAppHealthDevicePerformance);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsAppHealthDevicePerformanceDetails>("userExperienceAnalyticsAppHealthDevicePerformanceDetails", deviceManagement.userExperienceAnalyticsAppHealthDevicePerformanceDetails, serializeUserExperienceAnalyticsAppHealthDevicePerformanceDetails);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsAppHealthOSVersionPerformance>("userExperienceAnalyticsAppHealthOSVersionPerformance", deviceManagement.userExperienceAnalyticsAppHealthOSVersionPerformance, serializeUserExperienceAnalyticsAppHealthOSVersionPerformance);
    writer.writeObjectValue<UserExperienceAnalyticsCategory>("userExperienceAnalyticsAppHealthOverview", deviceManagement.userExperienceAnalyticsAppHealthOverview, serializeUserExperienceAnalyticsCategory);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsBaseline>("userExperienceAnalyticsBaselines", deviceManagement.userExperienceAnalyticsBaselines, serializeUserExperienceAnalyticsBaseline);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsCategory>("userExperienceAnalyticsCategories", deviceManagement.userExperienceAnalyticsCategories, serializeUserExperienceAnalyticsCategory);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsDevicePerformance>("userExperienceAnalyticsDevicePerformance", deviceManagement.userExperienceAnalyticsDevicePerformance, serializeUserExperienceAnalyticsDevicePerformance);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsDeviceScores>("userExperienceAnalyticsDeviceScores", deviceManagement.userExperienceAnalyticsDeviceScores, serializeUserExperienceAnalyticsDeviceScores);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsDeviceStartupHistory>("userExperienceAnalyticsDeviceStartupHistory", deviceManagement.userExperienceAnalyticsDeviceStartupHistory, serializeUserExperienceAnalyticsDeviceStartupHistory);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsDeviceStartupProcess>("userExperienceAnalyticsDeviceStartupProcesses", deviceManagement.userExperienceAnalyticsDeviceStartupProcesses, serializeUserExperienceAnalyticsDeviceStartupProcess);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsDeviceStartupProcessPerformance>("userExperienceAnalyticsDeviceStartupProcessPerformance", deviceManagement.userExperienceAnalyticsDeviceStartupProcessPerformance, serializeUserExperienceAnalyticsDeviceStartupProcessPerformance);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsMetricHistory>("userExperienceAnalyticsMetricHistory", deviceManagement.userExperienceAnalyticsMetricHistory, serializeUserExperienceAnalyticsMetricHistory);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsModelScores>("userExperienceAnalyticsModelScores", deviceManagement.userExperienceAnalyticsModelScores, serializeUserExperienceAnalyticsModelScores);
    writer.writeObjectValue<UserExperienceAnalyticsOverview>("userExperienceAnalyticsOverview", deviceManagement.userExperienceAnalyticsOverview, serializeUserExperienceAnalyticsOverview);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsScoreHistory>("userExperienceAnalyticsScoreHistory", deviceManagement.userExperienceAnalyticsScoreHistory, serializeUserExperienceAnalyticsScoreHistory);
    writer.writeObjectValue<UserExperienceAnalyticsSettings>("userExperienceAnalyticsSettings", deviceManagement.userExperienceAnalyticsSettings, serializeUserExperienceAnalyticsSettings);
    writer.writeObjectValue<UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric>("userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric", deviceManagement.userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric, serializeUserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsWorkFromAnywhereMetric>("userExperienceAnalyticsWorkFromAnywhereMetrics", deviceManagement.userExperienceAnalyticsWorkFromAnywhereMetrics, serializeUserExperienceAnalyticsWorkFromAnywhereMetric);
    writer.writeCollectionOfObjectValues<UserExperienceAnalyticsWorkFromAnywhereModelPerformance>("userExperienceAnalyticsWorkFromAnywhereModelPerformance", deviceManagement.userExperienceAnalyticsWorkFromAnywhereModelPerformance, serializeUserExperienceAnalyticsWorkFromAnywhereModelPerformance);
    writer.writeCollectionOfObjectValues<WindowsAutopilotDeviceIdentity>("windowsAutopilotDeviceIdentities", deviceManagement.windowsAutopilotDeviceIdentities, serializeWindowsAutopilotDeviceIdentity);
    writer.writeCollectionOfObjectValues<WindowsInformationProtectionAppLearningSummary>("windowsInformationProtectionAppLearningSummaries", deviceManagement.windowsInformationProtectionAppLearningSummaries, serializeWindowsInformationProtectionAppLearningSummary);
    writer.writeCollectionOfObjectValues<WindowsInformationProtectionNetworkLearningSummary>("windowsInformationProtectionNetworkLearningSummaries", deviceManagement.windowsInformationProtectionNetworkLearningSummaries, serializeWindowsInformationProtectionNetworkLearningSummary);
    writer.writeCollectionOfObjectValues<WindowsMalwareInformation>("windowsMalwareInformation", deviceManagement.windowsMalwareInformation, serializeWindowsMalwareInformation);
    writer.writeObjectValue<WindowsMalwareOverview>("windowsMalwareOverview", deviceManagement.windowsMalwareOverview, serializeWindowsMalwareOverview);
}
// tslint:enable
// eslint-enable
