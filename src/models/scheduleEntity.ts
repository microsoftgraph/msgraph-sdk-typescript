// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type OpenShiftItem, type ShiftItem, type TimeOffItem } from './index';
import { deserializeIntoOpenShiftItem } from './openShiftItem';
import { ScheduleEntityTheme } from './scheduleEntityTheme';
import { deserializeIntoShiftItem } from './shiftItem';
import { deserializeIntoTimeOffItem } from './timeOffItem';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createScheduleEntityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.openShiftItem":
                    return deserializeIntoOpenShiftItem;
                case "#microsoft.graph.shiftItem":
                    return deserializeIntoShiftItem;
                case "#microsoft.graph.timeOffItem":
                    return deserializeIntoTimeOffItem;
            }
        }
    }
    return deserializeIntoScheduleEntity;
}
export function deserializeIntoScheduleEntity(scheduleEntity: ScheduleEntity | undefined = {} as ScheduleEntity) : Record<string, (node: ParseNode) => void> {
    return {
        "endDateTime": n => { scheduleEntity.endDateTime = n.getDateValue(); },
        "@odata.type": n => { scheduleEntity.odataType = n.getStringValue(); },
        "startDateTime": n => { scheduleEntity.startDateTime = n.getDateValue(); },
        "theme": n => { scheduleEntity.theme = n.getEnumValue<ScheduleEntityTheme>(ScheduleEntityTheme); },
    }
}
export interface ScheduleEntity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The endDateTime property
     */
    endDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The startDateTime property
     */
    startDateTime?: Date;
    /**
     * The theme property
     */
    theme?: ScheduleEntityTheme;
}
export function serializeScheduleEntity(writer: SerializationWriter, scheduleEntity: ScheduleEntity | undefined = {} as ScheduleEntity) : void {
        writer.writeDateValue("endDateTime", scheduleEntity.endDateTime);
        writer.writeStringValue("@odata.type", scheduleEntity.odataType);
        writer.writeDateValue("startDateTime", scheduleEntity.startDateTime);
        writer.writeEnumValue<ScheduleEntityTheme>("theme", scheduleEntity.theme);
        writer.writeAdditionalData(scheduleEntity.additionalData);
}
// tslint:enable
// eslint-enable
