// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AlertFeedback } from './alertFeedback';
import { AlertStatus } from './alertStatus';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AlertHistoryState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The appId property
     */
    appId?: string;
    /**
     * The assignedTo property
     */
    assignedTo?: string;
    /**
     * The comments property
     */
    comments?: string[];
    /**
     * The feedback property
     */
    feedback?: AlertFeedback;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The status property
     */
    status?: AlertStatus;
    /**
     * The updatedDateTime property
     */
    updatedDateTime?: Date;
    /**
     * The user property
     */
    user?: string;
}
export function createAlertHistoryStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAlertHistoryState;
}
export function deserializeIntoAlertHistoryState(alertHistoryState: AlertHistoryState | undefined = {} as AlertHistoryState) : Record<string, (node: ParseNode) => void> {
    return {
        "appId": n => { alertHistoryState.appId = n.getStringValue(); },
        "assignedTo": n => { alertHistoryState.assignedTo = n.getStringValue(); },
        "comments": n => { alertHistoryState.comments = n.getCollectionOfPrimitiveValues<string>(); },
        "feedback": n => { alertHistoryState.feedback = n.getEnumValue<AlertFeedback>(AlertFeedback); },
        "@odata.type": n => { alertHistoryState.odataType = n.getStringValue(); },
        "status": n => { alertHistoryState.status = n.getEnumValue<AlertStatus>(AlertStatus); },
        "updatedDateTime": n => { alertHistoryState.updatedDateTime = n.getDateValue(); },
        "user": n => { alertHistoryState.user = n.getStringValue(); },
    }
}
export function serializeAlertHistoryState(writer: SerializationWriter, alertHistoryState: AlertHistoryState | undefined = {} as AlertHistoryState) : void {
        writer.writeStringValue("appId", alertHistoryState.appId);
        writer.writeStringValue("assignedTo", alertHistoryState.assignedTo);
        writer.writeCollectionOfPrimitiveValues<string>("comments", alertHistoryState.comments);
        writer.writeEnumValue<AlertFeedback>("feedback", alertHistoryState.feedback);
        writer.writeStringValue("@odata.type", alertHistoryState.odataType);
        writer.writeEnumValue<AlertStatus>("status", alertHistoryState.status);
        writer.writeDateValue("updatedDateTime", alertHistoryState.updatedDateTime);
        writer.writeStringValue("user", alertHistoryState.user);
        writer.writeAdditionalData(alertHistoryState.additionalData);
}
// tslint:enable
// eslint-enable
