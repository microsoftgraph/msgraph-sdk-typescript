// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCrossTenantAccessPolicyB2BSettingFromDiscriminatorValue, serializeCrossTenantAccessPolicyB2BSetting, type CrossTenantAccessPolicyB2BSetting } from './crossTenantAccessPolicyB2BSetting';
import { createCrossTenantAccessPolicyInboundTrustFromDiscriminatorValue, serializeCrossTenantAccessPolicyInboundTrust, type CrossTenantAccessPolicyInboundTrust } from './crossTenantAccessPolicyInboundTrust';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createInboundOutboundPolicyConfigurationFromDiscriminatorValue, serializeInboundOutboundPolicyConfiguration, type InboundOutboundPolicyConfiguration } from './inboundOutboundPolicyConfiguration';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCrossTenantAccessPolicyConfigurationDefaultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCrossTenantAccessPolicyConfigurationDefault;
}
export interface CrossTenantAccessPolicyConfigurationDefault extends Entity, Parsable {
    /**
     * Determines the default configuration for automatic user consent settings. The inboundAllowed and outboundAllowed properties are always false and cannot be updated in the default configuration. Read-only.
     */
    automaticUserConsentSettings?: InboundOutboundPolicyConfiguration;
    /**
     * Defines your default configuration for users from other organizations accessing your resources via Microsoft Entra B2B collaboration.
     */
    b2bCollaborationInbound?: CrossTenantAccessPolicyB2BSetting;
    /**
     * Defines your default configuration for users in your organization going outbound to access resources in another organization via Microsoft Entra B2B collaboration.
     */
    b2bCollaborationOutbound?: CrossTenantAccessPolicyB2BSetting;
    /**
     * Defines your default configuration for users from other organizations accessing your resources via Microsoft Entra B2B direct connect.
     */
    b2bDirectConnectInbound?: CrossTenantAccessPolicyB2BSetting;
    /**
     * Defines your default configuration for users in your organization going outbound to access resources in another organization via Microsoft Entra B2B direct connect.
     */
    b2bDirectConnectOutbound?: CrossTenantAccessPolicyB2BSetting;
    /**
     * Determines the default configuration for trusting other Conditional Access claims from external Microsoft Entra organizations.
     */
    inboundTrust?: CrossTenantAccessPolicyInboundTrust;
    /**
     * If true, the default configuration is set to the system default configuration. If false, the default settings have been customized.
     */
    isServiceDefault?: boolean;
}
export function deserializeIntoCrossTenantAccessPolicyConfigurationDefault(crossTenantAccessPolicyConfigurationDefault: CrossTenantAccessPolicyConfigurationDefault | undefined = {} as CrossTenantAccessPolicyConfigurationDefault) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(crossTenantAccessPolicyConfigurationDefault),
        "automaticUserConsentSettings": n => { crossTenantAccessPolicyConfigurationDefault.automaticUserConsentSettings = n.getObjectValue<InboundOutboundPolicyConfiguration>(createInboundOutboundPolicyConfigurationFromDiscriminatorValue); },
        "b2bCollaborationInbound": n => { crossTenantAccessPolicyConfigurationDefault.b2bCollaborationInbound = n.getObjectValue<CrossTenantAccessPolicyB2BSetting>(createCrossTenantAccessPolicyB2BSettingFromDiscriminatorValue); },
        "b2bCollaborationOutbound": n => { crossTenantAccessPolicyConfigurationDefault.b2bCollaborationOutbound = n.getObjectValue<CrossTenantAccessPolicyB2BSetting>(createCrossTenantAccessPolicyB2BSettingFromDiscriminatorValue); },
        "b2bDirectConnectInbound": n => { crossTenantAccessPolicyConfigurationDefault.b2bDirectConnectInbound = n.getObjectValue<CrossTenantAccessPolicyB2BSetting>(createCrossTenantAccessPolicyB2BSettingFromDiscriminatorValue); },
        "b2bDirectConnectOutbound": n => { crossTenantAccessPolicyConfigurationDefault.b2bDirectConnectOutbound = n.getObjectValue<CrossTenantAccessPolicyB2BSetting>(createCrossTenantAccessPolicyB2BSettingFromDiscriminatorValue); },
        "inboundTrust": n => { crossTenantAccessPolicyConfigurationDefault.inboundTrust = n.getObjectValue<CrossTenantAccessPolicyInboundTrust>(createCrossTenantAccessPolicyInboundTrustFromDiscriminatorValue); },
        "isServiceDefault": n => { crossTenantAccessPolicyConfigurationDefault.isServiceDefault = n.getBooleanValue(); },
    }
}
export function serializeCrossTenantAccessPolicyConfigurationDefault(writer: SerializationWriter, crossTenantAccessPolicyConfigurationDefault: CrossTenantAccessPolicyConfigurationDefault | undefined = {} as CrossTenantAccessPolicyConfigurationDefault) : void {
        serializeEntity(writer, crossTenantAccessPolicyConfigurationDefault)
        writer.writeObjectValue<InboundOutboundPolicyConfiguration>("automaticUserConsentSettings", crossTenantAccessPolicyConfigurationDefault.automaticUserConsentSettings, serializeInboundOutboundPolicyConfiguration);
        writer.writeObjectValue<CrossTenantAccessPolicyB2BSetting>("b2bCollaborationInbound", crossTenantAccessPolicyConfigurationDefault.b2bCollaborationInbound, serializeCrossTenantAccessPolicyB2BSetting);
        writer.writeObjectValue<CrossTenantAccessPolicyB2BSetting>("b2bCollaborationOutbound", crossTenantAccessPolicyConfigurationDefault.b2bCollaborationOutbound, serializeCrossTenantAccessPolicyB2BSetting);
        writer.writeObjectValue<CrossTenantAccessPolicyB2BSetting>("b2bDirectConnectInbound", crossTenantAccessPolicyConfigurationDefault.b2bDirectConnectInbound, serializeCrossTenantAccessPolicyB2BSetting);
        writer.writeObjectValue<CrossTenantAccessPolicyB2BSetting>("b2bDirectConnectOutbound", crossTenantAccessPolicyConfigurationDefault.b2bDirectConnectOutbound, serializeCrossTenantAccessPolicyB2BSetting);
        writer.writeObjectValue<CrossTenantAccessPolicyInboundTrust>("inboundTrust", crossTenantAccessPolicyConfigurationDefault.inboundTrust, serializeCrossTenantAccessPolicyInboundTrust);
        writer.writeBooleanValue("isServiceDefault", crossTenantAccessPolicyConfigurationDefault.isServiceDefault);
}
// tslint:enable
// eslint-enable
