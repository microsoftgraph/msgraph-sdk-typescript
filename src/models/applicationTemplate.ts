// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ApplicationTemplate extends Entity, Parsable {
    /**
     * The list of categories for the application. Supported values can be: Collaboration, Business Management, Consumer, Content management, CRM, Data services, Developer services, E-commerce, Education, ERP, Finance, Health, Human resources, IT infrastructure, Mail, Management, Marketing, Media, Productivity, Project management, Telecommunications, Tools, Travel, and Web design & hosting.
     */
    categories?: string[];
    /**
     * A description of the application.
     */
    description?: string;
    /**
     * The name of the application.
     */
    displayName?: string;
    /**
     * The home page URL of the application.
     */
    homePageUrl?: string;
    /**
     * The URL to get the logo for this application.
     */
    logoUrl?: string;
    /**
     * The name of the publisher for this application.
     */
    publisher?: string;
    /**
     * The list of provisioning modes supported by this application. The only valid value is sync.
     */
    supportedProvisioningTypes?: string[];
    /**
     * The list of single sign-on modes supported by this application. The supported values are oidc, password, saml, and notSupported.
     */
    supportedSingleSignOnModes?: string[];
}
export function createApplicationTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoApplicationTemplate;
}
export function deserializeIntoApplicationTemplate(applicationTemplate: ApplicationTemplate | undefined = {} as ApplicationTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(applicationTemplate),
        "categories": n => { applicationTemplate.categories = n.getCollectionOfPrimitiveValues<string>(); },
        "description": n => { applicationTemplate.description = n.getStringValue(); },
        "displayName": n => { applicationTemplate.displayName = n.getStringValue(); },
        "homePageUrl": n => { applicationTemplate.homePageUrl = n.getStringValue(); },
        "logoUrl": n => { applicationTemplate.logoUrl = n.getStringValue(); },
        "publisher": n => { applicationTemplate.publisher = n.getStringValue(); },
        "supportedProvisioningTypes": n => { applicationTemplate.supportedProvisioningTypes = n.getCollectionOfPrimitiveValues<string>(); },
        "supportedSingleSignOnModes": n => { applicationTemplate.supportedSingleSignOnModes = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export function serializeApplicationTemplate(writer: SerializationWriter, applicationTemplate: ApplicationTemplate | undefined = {} as ApplicationTemplate) : void {
        serializeEntity(writer, applicationTemplate)
        writer.writeCollectionOfPrimitiveValues<string>("categories", applicationTemplate.categories);
        writer.writeStringValue("description", applicationTemplate.description);
        writer.writeStringValue("displayName", applicationTemplate.displayName);
        writer.writeStringValue("homePageUrl", applicationTemplate.homePageUrl);
        writer.writeStringValue("logoUrl", applicationTemplate.logoUrl);
        writer.writeStringValue("publisher", applicationTemplate.publisher);
        writer.writeCollectionOfPrimitiveValues<string>("supportedProvisioningTypes", applicationTemplate.supportedProvisioningTypes);
        writer.writeCollectionOfPrimitiveValues<string>("supportedSingleSignOnModes", applicationTemplate.supportedSingleSignOnModes);
}
// tslint:enable
// eslint-enable
