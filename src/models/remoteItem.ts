// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createFileFromDiscriminatorValue, serializeFile, type File } from './file';
import { createFileSystemInfoFromDiscriminatorValue, serializeFileSystemInfo, type FileSystemInfo } from './fileSystemInfo';
import { createFolderFromDiscriminatorValue, serializeFolder, type Folder } from './folder';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { createImageFromDiscriminatorValue, serializeImage, type Image } from './image';
import { createItemReferenceFromDiscriminatorValue, serializeItemReference, type ItemReference } from './itemReference';
import { createPackageEscapedFromDiscriminatorValue, serializePackageEscaped, type PackageEscaped } from './packageEscaped';
import { createSharedFromDiscriminatorValue, serializeShared, type Shared } from './shared';
import { createSharepointIdsFromDiscriminatorValue, serializeSharepointIds, type SharepointIds } from './sharepointIds';
import { createSpecialFolderFromDiscriminatorValue, serializeSpecialFolder, type SpecialFolder } from './specialFolder';
import { createVideoFromDiscriminatorValue, serializeVideo, type Video } from './video';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRemoteItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRemoteItem;
}
export function deserializeIntoRemoteItem(remoteItem: RemoteItem | undefined = {} as RemoteItem) : Record<string, (node: ParseNode) => void> {
    return {
        "createdBy": n => { remoteItem.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { remoteItem.createdDateTime = n.getDateValue(); },
        "file": n => { remoteItem.file = n.getObjectValue<File>(createFileFromDiscriminatorValue); },
        "fileSystemInfo": n => { remoteItem.fileSystemInfo = n.getObjectValue<FileSystemInfo>(createFileSystemInfoFromDiscriminatorValue); },
        "folder": n => { remoteItem.folder = n.getObjectValue<Folder>(createFolderFromDiscriminatorValue); },
        "id": n => { remoteItem.id = n.getStringValue(); },
        "image": n => { remoteItem.image = n.getObjectValue<Image>(createImageFromDiscriminatorValue); },
        "lastModifiedBy": n => { remoteItem.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { remoteItem.lastModifiedDateTime = n.getDateValue(); },
        "name": n => { remoteItem.name = n.getStringValue(); },
        "@odata.type": n => { remoteItem.odataType = n.getStringValue(); },
        "package": n => { remoteItem.packageEscaped = n.getObjectValue<PackageEscaped>(createPackageEscapedFromDiscriminatorValue); },
        "parentReference": n => { remoteItem.parentReference = n.getObjectValue<ItemReference>(createItemReferenceFromDiscriminatorValue); },
        "shared": n => { remoteItem.shared = n.getObjectValue<Shared>(createSharedFromDiscriminatorValue); },
        "sharepointIds": n => { remoteItem.sharepointIds = n.getObjectValue<SharepointIds>(createSharepointIdsFromDiscriminatorValue); },
        "size": n => { remoteItem.size = n.getNumberValue(); },
        "specialFolder": n => { remoteItem.specialFolder = n.getObjectValue<SpecialFolder>(createSpecialFolderFromDiscriminatorValue); },
        "video": n => { remoteItem.video = n.getObjectValue<Video>(createVideoFromDiscriminatorValue); },
        "webDavUrl": n => { remoteItem.webDavUrl = n.getStringValue(); },
        "webUrl": n => { remoteItem.webUrl = n.getStringValue(); },
    }
}
export interface RemoteItem extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Identity of the user, device, and application which created the item. Read-only.
     */
    createdBy?: IdentitySet;
    /**
     * Date and time of item creation. Read-only.
     */
    createdDateTime?: Date;
    /**
     * Indicates that the remote item is a file. Read-only.
     */
    file?: File;
    /**
     * Information about the remote item from the local file system. Read-only.
     */
    fileSystemInfo?: FileSystemInfo;
    /**
     * Indicates that the remote item is a folder. Read-only.
     */
    folder?: Folder;
    /**
     * Unique identifier for the remote item in its drive. Read-only.
     */
    id?: string;
    /**
     * Image metadata, if the item is an image. Read-only.
     */
    image?: Image;
    /**
     * Identity of the user, device, and application which last modified the item. Read-only.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * Date and time the item was last modified. Read-only.
     */
    lastModifiedDateTime?: Date;
    /**
     * Optional. Filename of the remote item. Read-only.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.
     */
    packageEscaped?: PackageEscaped;
    /**
     * Properties of the parent of the remote item. Read-only.
     */
    parentReference?: ItemReference;
    /**
     * Indicates that the item has been shared with others and provides information about the shared state of the item. Read-only.
     */
    shared?: Shared;
    /**
     * Provides interop between items in OneDrive for Business and SharePoint with the full set of item identifiers. Read-only.
     */
    sharepointIds?: SharepointIds;
    /**
     * Size of the remote item. Read-only.
     */
    size?: number;
    /**
     * If the current item is also available as a special folder, this facet is returned. Read-only.
     */
    specialFolder?: SpecialFolder;
    /**
     * Video metadata, if the item is a video. Read-only.
     */
    video?: Video;
    /**
     * DAV compatible URL for the item.
     */
    webDavUrl?: string;
    /**
     * URL that displays the resource in the browser. Read-only.
     */
    webUrl?: string;
}
export function serializeRemoteItem(writer: SerializationWriter, remoteItem: RemoteItem | undefined = {} as RemoteItem) : void {
    writer.writeObjectValue<IdentitySet>("createdBy", remoteItem.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", remoteItem.createdDateTime);
    writer.writeObjectValue<File>("file", remoteItem.file, serializeFile);
    writer.writeObjectValue<FileSystemInfo>("fileSystemInfo", remoteItem.fileSystemInfo, serializeFileSystemInfo);
    writer.writeObjectValue<Folder>("folder", remoteItem.folder, serializeFolder);
    writer.writeStringValue("id", remoteItem.id);
    writer.writeObjectValue<Image>("image", remoteItem.image, serializeImage);
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", remoteItem.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", remoteItem.lastModifiedDateTime);
    writer.writeStringValue("name", remoteItem.name);
    writer.writeStringValue("@odata.type", remoteItem.odataType);
    writer.writeObjectValue<PackageEscaped>("package", remoteItem.packageEscaped, serializePackageEscaped);
    writer.writeObjectValue<ItemReference>("parentReference", remoteItem.parentReference, serializeItemReference);
    writer.writeObjectValue<Shared>("shared", remoteItem.shared, serializeShared);
    writer.writeObjectValue<SharepointIds>("sharepointIds", remoteItem.sharepointIds, serializeSharepointIds);
    writer.writeNumberValue("size", remoteItem.size);
    writer.writeObjectValue<SpecialFolder>("specialFolder", remoteItem.specialFolder, serializeSpecialFolder);
    writer.writeObjectValue<Video>("video", remoteItem.video, serializeVideo);
    writer.writeStringValue("webDavUrl", remoteItem.webDavUrl);
    writer.writeStringValue("webUrl", remoteItem.webUrl);
    writer.writeAdditionalData(remoteItem.additionalData);
}
// tslint:enable
// eslint-enable
