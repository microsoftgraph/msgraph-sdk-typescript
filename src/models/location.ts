// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type LocationConstraintItem } from './index';
import { deserializeIntoLocationConstraintItem } from './locationConstraintItem';
import { LocationType } from './locationType';
import { LocationUniqueIdType } from './locationUniqueIdType';
import { createOutlookGeoCoordinatesFromDiscriminatorValue, serializeOutlookGeoCoordinates, type OutlookGeoCoordinates } from './outlookGeoCoordinates';
import { createPhysicalAddressFromDiscriminatorValue, serializePhysicalAddress, type PhysicalAddress } from './physicalAddress';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLocationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.locationConstraintItem":
                    return deserializeIntoLocationConstraintItem;
            }
        }
    }
    return deserializeIntoLocation;
}
export function deserializeIntoLocation(location: Location | undefined = {} as Location) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { location.address = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "coordinates": n => { location.coordinates = n.getObjectValue<OutlookGeoCoordinates>(createOutlookGeoCoordinatesFromDiscriminatorValue); },
        "displayName": n => { location.displayName = n.getStringValue(); },
        "locationEmailAddress": n => { location.locationEmailAddress = n.getStringValue(); },
        "locationType": n => { location.locationType = n.getEnumValue<LocationType>(LocationType); },
        "locationUri": n => { location.locationUri = n.getStringValue(); },
        "@odata.type": n => { location.odataType = n.getStringValue(); },
        "uniqueId": n => { location.uniqueId = n.getStringValue(); },
        "uniqueIdType": n => { location.uniqueIdType = n.getEnumValue<LocationUniqueIdType>(LocationUniqueIdType); },
    }
}
export interface Location extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The street address of the location.
     */
    address?: PhysicalAddress;
    /**
     * The geographic coordinates and elevation of the location.
     */
    coordinates?: OutlookGeoCoordinates;
    /**
     * The name associated with the location.
     */
    displayName?: string;
    /**
     * Optional email address of the location.
     */
    locationEmailAddress?: string;
    /**
     * The type of location. The possible values are: default, conferenceRoom, homeAddress, businessAddress,geoCoordinates, streetAddress, hotel, restaurant, localBusiness, postalAddress. Read-only.
     */
    locationType?: LocationType;
    /**
     * Optional URI representing the location.
     */
    locationUri?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * For internal use only.
     */
    uniqueId?: string;
    /**
     * For internal use only.
     */
    uniqueIdType?: LocationUniqueIdType;
}
export function serializeLocation(writer: SerializationWriter, location: Location | undefined = {} as Location) : void {
        writer.writeObjectValue<PhysicalAddress>("address", location.address, serializePhysicalAddress);
        writer.writeObjectValue<OutlookGeoCoordinates>("coordinates", location.coordinates, serializeOutlookGeoCoordinates);
        writer.writeStringValue("displayName", location.displayName);
        writer.writeStringValue("locationEmailAddress", location.locationEmailAddress);
        writer.writeEnumValue<LocationType>("locationType", location.locationType);
        writer.writeStringValue("locationUri", location.locationUri);
        writer.writeStringValue("@odata.type", location.odataType);
        writer.writeStringValue("uniqueId", location.uniqueId);
        writer.writeEnumValue<LocationUniqueIdType>("uniqueIdType", location.uniqueIdType);
        writer.writeAdditionalData(location.additionalData);
}
// tslint:enable
// eslint-enable
