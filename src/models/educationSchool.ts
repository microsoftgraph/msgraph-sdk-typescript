// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAdministrativeUnitFromDiscriminatorValue, serializeAdministrativeUnit, type AdministrativeUnit } from './administrativeUnit';
import { createEducationClassFromDiscriminatorValue, serializeEducationClass, type EducationClass } from './educationClass';
import { deserializeIntoEducationOrganization, serializeEducationOrganization, type EducationOrganization } from './educationOrganization';
import { createEducationUserFromDiscriminatorValue, serializeEducationUser, type EducationUser } from './educationUser';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { createPhysicalAddressFromDiscriminatorValue, serializePhysicalAddress, type PhysicalAddress } from './physicalAddress';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEducationSchoolFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEducationSchool;
}
export function deserializeIntoEducationSchool(educationSchool: EducationSchool | undefined = {} as EducationSchool) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEducationOrganization(educationSchool),
        "address": n => { educationSchool.address = n.getObjectValue<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "administrativeUnit": n => { educationSchool.administrativeUnit = n.getObjectValue<AdministrativeUnit>(createAdministrativeUnitFromDiscriminatorValue); },
        "classes": n => { educationSchool.classes = n.getCollectionOfObjectValues<EducationClass>(createEducationClassFromDiscriminatorValue); },
        "createdBy": n => { educationSchool.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "externalId": n => { educationSchool.externalId = n.getStringValue(); },
        "externalPrincipalId": n => { educationSchool.externalPrincipalId = n.getStringValue(); },
        "fax": n => { educationSchool.fax = n.getStringValue(); },
        "highestGrade": n => { educationSchool.highestGrade = n.getStringValue(); },
        "lowestGrade": n => { educationSchool.lowestGrade = n.getStringValue(); },
        "phone": n => { educationSchool.phone = n.getStringValue(); },
        "principalEmail": n => { educationSchool.principalEmail = n.getStringValue(); },
        "principalName": n => { educationSchool.principalName = n.getStringValue(); },
        "schoolNumber": n => { educationSchool.schoolNumber = n.getStringValue(); },
        "users": n => { educationSchool.users = n.getCollectionOfObjectValues<EducationUser>(createEducationUserFromDiscriminatorValue); },
    }
}
export interface EducationSchool extends EducationOrganization, Parsable {
    /**
     * Address of the school.
     */
    address?: PhysicalAddress;
    /**
     * The underlying administrativeUnit for this school.
     */
    administrativeUnit?: AdministrativeUnit;
    /**
     * Classes taught at the school. Nullable.
     */
    classes?: EducationClass[];
    /**
     * Entity who created the school.
     */
    createdBy?: IdentitySet;
    /**
     * ID of school in syncing system.
     */
    externalId?: string;
    /**
     * ID of principal in syncing system.
     */
    externalPrincipalId?: string;
    /**
     * The fax property
     */
    fax?: string;
    /**
     * Highest grade taught.
     */
    highestGrade?: string;
    /**
     * Lowest grade taught.
     */
    lowestGrade?: string;
    /**
     * Phone number of school.
     */
    phone?: string;
    /**
     * Email address of the principal.
     */
    principalEmail?: string;
    /**
     * Name of the principal.
     */
    principalName?: string;
    /**
     * School Number.
     */
    schoolNumber?: string;
    /**
     * Users in the school. Nullable.
     */
    users?: EducationUser[];
}
export function serializeEducationSchool(writer: SerializationWriter, educationSchool: EducationSchool | undefined = {} as EducationSchool) : void {
    serializeEducationOrganization(writer, educationSchool)
    writer.writeObjectValue<PhysicalAddress>("address", educationSchool.address, serializePhysicalAddress);
    writer.writeObjectValue<AdministrativeUnit>("administrativeUnit", educationSchool.administrativeUnit, serializeAdministrativeUnit);
    writer.writeCollectionOfObjectValues<EducationClass>("classes", educationSchool.classes, serializeEducationClass);
    writer.writeObjectValue<IdentitySet>("createdBy", educationSchool.createdBy, serializeIdentitySet);
    writer.writeStringValue("externalId", educationSchool.externalId);
    writer.writeStringValue("externalPrincipalId", educationSchool.externalPrincipalId);
    writer.writeStringValue("fax", educationSchool.fax);
    writer.writeStringValue("highestGrade", educationSchool.highestGrade);
    writer.writeStringValue("lowestGrade", educationSchool.lowestGrade);
    writer.writeStringValue("phone", educationSchool.phone);
    writer.writeStringValue("principalEmail", educationSchool.principalEmail);
    writer.writeStringValue("principalName", educationSchool.principalName);
    writer.writeStringValue("schoolNumber", educationSchool.schoolNumber);
    writer.writeCollectionOfObjectValues<EducationUser>("users", educationSchool.users, serializeEducationUser);
}
// tslint:enable
// eslint-enable
