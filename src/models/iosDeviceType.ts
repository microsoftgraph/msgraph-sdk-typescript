// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIosDeviceTypeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIosDeviceType;
}
export function deserializeIntoIosDeviceType(iosDeviceType: IosDeviceType | undefined = {} as IosDeviceType) : Record<string, (node: ParseNode) => void> {
    return {
        "iPad": n => { iosDeviceType.iPad = n.getBooleanValue(); },
        "iPhoneAndIPod": n => { iosDeviceType.iPhoneAndIPod = n.getBooleanValue(); },
        "@odata.type": n => { iosDeviceType.odataType = n.getStringValue(); },
    }
}
export interface IosDeviceType extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Whether the app should run on iPads.
     */
    iPad?: boolean;
    /**
     * Whether the app should run on iPhones and iPods.
     */
    iPhoneAndIPod?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeIosDeviceType(writer: SerializationWriter, iosDeviceType: IosDeviceType | undefined = {} as IosDeviceType) : void {
    writer.writeBooleanValue("iPad", iosDeviceType.iPad);
    writer.writeBooleanValue("iPhoneAndIPod", iosDeviceType.iPhoneAndIPod);
    writer.writeStringValue("@odata.type", iosDeviceType.odataType);
    writer.writeAdditionalData(iosDeviceType.additionalData);
}
// tslint:enable
// eslint-enable
