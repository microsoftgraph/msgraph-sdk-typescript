import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createCrossTenantAccessPolicyInboundTrustFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCrossTenantAccessPolicyInboundTrust;
}
export interface CrossTenantAccessPolicyInboundTrust extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies whether compliant devices from external Azure AD organizations are trusted.
     */
    isCompliantDeviceAccepted?: boolean;
    /**
     * Specifies whether hybrid Azure AD joined devices from external Azure AD organizations are trusted.
     */
    isHybridAzureADJoinedDeviceAccepted?: boolean;
    /**
     * Specifies whether MFA from external Azure AD organizations is trusted.
     */
    isMfaAccepted?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoCrossTenantAccessPolicyInboundTrust(crossTenantAccessPolicyInboundTrust: CrossTenantAccessPolicyInboundTrust | undefined = {} as CrossTenantAccessPolicyInboundTrust) : Record<string, (node: ParseNode) => void> {
    return {
        "isCompliantDeviceAccepted": n => { crossTenantAccessPolicyInboundTrust.isCompliantDeviceAccepted = n.getBooleanValue(); },
        "isHybridAzureADJoinedDeviceAccepted": n => { crossTenantAccessPolicyInboundTrust.isHybridAzureADJoinedDeviceAccepted = n.getBooleanValue(); },
        "isMfaAccepted": n => { crossTenantAccessPolicyInboundTrust.isMfaAccepted = n.getBooleanValue(); },
        "@odata.type": n => { crossTenantAccessPolicyInboundTrust.odataType = n.getStringValue(); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeCrossTenantAccessPolicyInboundTrust(writer: SerializationWriter, crossTenantAccessPolicyInboundTrust: CrossTenantAccessPolicyInboundTrust | undefined = {} as CrossTenantAccessPolicyInboundTrust) : void {
        writer.writeBooleanValue("isCompliantDeviceAccepted", crossTenantAccessPolicyInboundTrust.isCompliantDeviceAccepted);
        writer.writeBooleanValue("isHybridAzureADJoinedDeviceAccepted", crossTenantAccessPolicyInboundTrust.isHybridAzureADJoinedDeviceAccepted);
        writer.writeBooleanValue("isMfaAccepted", crossTenantAccessPolicyInboundTrust.isMfaAccepted);
        writer.writeStringValue("@odata.type", crossTenantAccessPolicyInboundTrust.odataType);
        writer.writeAdditionalData(crossTenantAccessPolicyInboundTrust.additionalData);
}
