// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createJoinMeetingIdSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoJoinMeetingIdSettings;
}
export function deserializeIntoJoinMeetingIdSettings(joinMeetingIdSettings: JoinMeetingIdSettings | undefined = {} as JoinMeetingIdSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "isPasscodeRequired": n => { joinMeetingIdSettings.isPasscodeRequired = n.getBooleanValue(); },
        "joinMeetingId": n => { joinMeetingIdSettings.joinMeetingId = n.getStringValue(); },
        "@odata.type": n => { joinMeetingIdSettings.odataType = n.getStringValue(); },
        "passcode": n => { joinMeetingIdSettings.passcode = n.getStringValue(); },
    }
}
export interface JoinMeetingIdSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates whether a passcode is required to join a meeting when using joinMeetingId. Optional.
     */
    isPasscodeRequired?: boolean;
    /**
     * The meeting ID to be used to join a meeting. Optional. Read-only.
     */
    joinMeetingId?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The passcode to join a meeting.  Optional. Read-only.
     */
    passcode?: string;
}
export function serializeJoinMeetingIdSettings(writer: SerializationWriter, joinMeetingIdSettings: JoinMeetingIdSettings | undefined = {} as JoinMeetingIdSettings) : void {
        writer.writeBooleanValue("isPasscodeRequired", joinMeetingIdSettings.isPasscodeRequired);
        writer.writeStringValue("joinMeetingId", joinMeetingIdSettings.joinMeetingId);
        writer.writeStringValue("@odata.type", joinMeetingIdSettings.odataType);
        writer.writeStringValue("passcode", joinMeetingIdSettings.passcode);
        writer.writeAdditionalData(joinMeetingIdSettings.additionalData);
}
// tslint:enable
// eslint-enable
