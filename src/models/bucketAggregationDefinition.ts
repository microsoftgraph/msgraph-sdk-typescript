// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createBucketAggregationRangeFromDiscriminatorValue, serializeBucketAggregationRange, type BucketAggregationRange } from './bucketAggregationRange';
import { BucketAggregationSortProperty } from './bucketAggregationSortProperty';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BucketAggregationDefinition extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * True to specify the sort order as descending. The default is false, with the sort order as ascending. Optional.
     */
    isDescending?: boolean;
    /**
     * The minimum number of items that should be present in the aggregation to be returned in a bucket. Optional.
     */
    minimumCount?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A filter to define a matching criteria. The key should start with the specified prefix to be returned in the response. Optional.
     */
    prefixFilter?: string;
    /**
     * Specifies the manual ranges to compute the aggregations. This is only valid for nonstring refiners of date or numeric type. Optional.
     */
    ranges?: BucketAggregationRange[];
    /**
     * The sortBy property
     */
    sortBy?: BucketAggregationSortProperty;
}
export function createBucketAggregationDefinitionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBucketAggregationDefinition;
}
export function deserializeIntoBucketAggregationDefinition(bucketAggregationDefinition: BucketAggregationDefinition | undefined = {} as BucketAggregationDefinition) : Record<string, (node: ParseNode) => void> {
    return {
        "isDescending": n => { bucketAggregationDefinition.isDescending = n.getBooleanValue(); },
        "minimumCount": n => { bucketAggregationDefinition.minimumCount = n.getNumberValue(); },
        "@odata.type": n => { bucketAggregationDefinition.odataType = n.getStringValue(); },
        "prefixFilter": n => { bucketAggregationDefinition.prefixFilter = n.getStringValue(); },
        "ranges": n => { bucketAggregationDefinition.ranges = n.getCollectionOfObjectValues<BucketAggregationRange>(createBucketAggregationRangeFromDiscriminatorValue); },
        "sortBy": n => { bucketAggregationDefinition.sortBy = n.getEnumValue<BucketAggregationSortProperty>(BucketAggregationSortProperty); },
    }
}
export function serializeBucketAggregationDefinition(writer: SerializationWriter, bucketAggregationDefinition: BucketAggregationDefinition | undefined = {} as BucketAggregationDefinition) : void {
        writer.writeBooleanValue("isDescending", bucketAggregationDefinition.isDescending);
        writer.writeNumberValue("minimumCount", bucketAggregationDefinition.minimumCount);
        writer.writeStringValue("@odata.type", bucketAggregationDefinition.odataType);
        writer.writeStringValue("prefixFilter", bucketAggregationDefinition.prefixFilter);
        writer.writeCollectionOfObjectValues<BucketAggregationRange>("ranges", bucketAggregationDefinition.ranges, );
        writer.writeEnumValue<BucketAggregationSortProperty>("sortBy", bucketAggregationDefinition.sortBy);
        writer.writeAdditionalData(bucketAggregationDefinition.additionalData);
}
// tslint:enable
// eslint-enable
