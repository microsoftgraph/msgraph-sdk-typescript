// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AutomaticRepliesStatus } from './automaticRepliesStatus';
import { createDateTimeTimeZoneFromDiscriminatorValue, serializeDateTimeTimeZone, type DateTimeTimeZone } from './dateTimeTimeZone';
import { ExternalAudienceScope } from './externalAudienceScope';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AutomaticRepliesSetting extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The set of audience external to the signed-in user's organization who will receive the ExternalReplyMessage, if Status is AlwaysEnabled or Scheduled. The possible values are: none, contactsOnly, all.
     */
    externalAudience?: ExternalAudienceScope;
    /**
     * The automatic reply to send to the specified external audience, if Status is AlwaysEnabled or Scheduled.
     */
    externalReplyMessage?: string;
    /**
     * The automatic reply to send to the audience internal to the signed-in user's organization, if Status is AlwaysEnabled or Scheduled.
     */
    internalReplyMessage?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The date and time that automatic replies are set to end, if Status is set to Scheduled.
     */
    scheduledEndDateTime?: DateTimeTimeZone;
    /**
     * The date and time that automatic replies are set to begin, if Status is set to Scheduled.
     */
    scheduledStartDateTime?: DateTimeTimeZone;
    /**
     * Configurations status for automatic replies. The possible values are: disabled, alwaysEnabled, scheduled.
     */
    status?: AutomaticRepliesStatus;
}
export function createAutomaticRepliesSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAutomaticRepliesSetting;
}
export function deserializeIntoAutomaticRepliesSetting(automaticRepliesSetting: AutomaticRepliesSetting | undefined = {} as AutomaticRepliesSetting) : Record<string, (node: ParseNode) => void> {
    return {
        "externalAudience": n => { automaticRepliesSetting.externalAudience = n.getEnumValue<ExternalAudienceScope>(ExternalAudienceScope); },
        "externalReplyMessage": n => { automaticRepliesSetting.externalReplyMessage = n.getStringValue(); },
        "internalReplyMessage": n => { automaticRepliesSetting.internalReplyMessage = n.getStringValue(); },
        "@odata.type": n => { automaticRepliesSetting.odataType = n.getStringValue(); },
        "scheduledEndDateTime": n => { automaticRepliesSetting.scheduledEndDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "scheduledStartDateTime": n => { automaticRepliesSetting.scheduledStartDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "status": n => { automaticRepliesSetting.status = n.getEnumValue<AutomaticRepliesStatus>(AutomaticRepliesStatus); },
    }
}
export function serializeAutomaticRepliesSetting(writer: SerializationWriter, automaticRepliesSetting: AutomaticRepliesSetting | undefined = {} as AutomaticRepliesSetting) : void {
        writer.writeEnumValue<ExternalAudienceScope>("externalAudience", automaticRepliesSetting.externalAudience);
        writer.writeStringValue("externalReplyMessage", automaticRepliesSetting.externalReplyMessage);
        writer.writeStringValue("internalReplyMessage", automaticRepliesSetting.internalReplyMessage);
        writer.writeStringValue("@odata.type", automaticRepliesSetting.odataType);
        writer.writeObjectValue<DateTimeTimeZone>("scheduledEndDateTime", automaticRepliesSetting.scheduledEndDateTime, );
        writer.writeObjectValue<DateTimeTimeZone>("scheduledStartDateTime", automaticRepliesSetting.scheduledStartDateTime, );
        writer.writeEnumValue<AutomaticRepliesStatus>("status", automaticRepliesSetting.status);
        writer.writeAdditionalData(automaticRepliesSetting.additionalData);
}
// tslint:enable
// eslint-enable
