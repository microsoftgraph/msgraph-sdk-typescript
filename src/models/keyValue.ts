// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createKeyValueFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoKeyValue;
}
export function deserializeIntoKeyValue(keyValue: KeyValue | undefined = {} as KeyValue) : Record<string, (node: ParseNode) => void> {
    return {
        "key": n => { keyValue.key = n.getStringValue(); },
        "@odata.type": n => { keyValue.odataType = n.getStringValue(); },
        "value": n => { keyValue.value = n.getStringValue(); },
    }
}
export interface KeyValue extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Key for the key-value pair.
     */
    key?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Value for the key-value pair.
     */
    value?: string;
}
export function serializeKeyValue(writer: SerializationWriter, keyValue: KeyValue | undefined = {} as KeyValue) : void {
    writer.writeStringValue("key", keyValue.key);
    writer.writeStringValue("@odata.type", keyValue.odataType);
    writer.writeStringValue("value", keyValue.value);
    writer.writeAdditionalData(keyValue.additionalData);
}
// tslint:enable
// eslint-enable
