// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDeviceInstallStateFromDiscriminatorValue, serializeDeviceInstallState, type DeviceInstallState } from './deviceInstallState';
import { createEBookInstallSummaryFromDiscriminatorValue, serializeEBookInstallSummary, type EBookInstallSummary } from './eBookInstallSummary';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type IosVppEBook } from './index';
import { deserializeIntoIosVppEBook } from './iosVppEBook';
import { createManagedEBookAssignmentFromDiscriminatorValue, serializeManagedEBookAssignment, type ManagedEBookAssignment } from './managedEBookAssignment';
import { createMimeContentFromDiscriminatorValue, serializeMimeContent, type MimeContent } from './mimeContent';
import { createUserInstallStateSummaryFromDiscriminatorValue, serializeUserInstallStateSummary, type UserInstallStateSummary } from './userInstallStateSummary';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createManagedEBookFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.iosVppEBook":
                    return deserializeIntoIosVppEBook;
            }
        }
    }
    return deserializeIntoManagedEBook;
}
export function deserializeIntoManagedEBook(managedEBook: ManagedEBook | undefined = {} as ManagedEBook) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(managedEBook),
        "assignments": n => { managedEBook.assignments = n.getCollectionOfObjectValues<ManagedEBookAssignment>(createManagedEBookAssignmentFromDiscriminatorValue); },
        "createdDateTime": n => { managedEBook.createdDateTime = n.getDateValue(); },
        "description": n => { managedEBook.description = n.getStringValue(); },
        "deviceStates": n => { managedEBook.deviceStates = n.getCollectionOfObjectValues<DeviceInstallState>(createDeviceInstallStateFromDiscriminatorValue); },
        "displayName": n => { managedEBook.displayName = n.getStringValue(); },
        "informationUrl": n => { managedEBook.informationUrl = n.getStringValue(); },
        "installSummary": n => { managedEBook.installSummary = n.getObjectValue<EBookInstallSummary>(createEBookInstallSummaryFromDiscriminatorValue); },
        "largeCover": n => { managedEBook.largeCover = n.getObjectValue<MimeContent>(createMimeContentFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { managedEBook.lastModifiedDateTime = n.getDateValue(); },
        "privacyInformationUrl": n => { managedEBook.privacyInformationUrl = n.getStringValue(); },
        "publishedDateTime": n => { managedEBook.publishedDateTime = n.getDateValue(); },
        "publisher": n => { managedEBook.publisher = n.getStringValue(); },
        "userStateSummary": n => { managedEBook.userStateSummary = n.getCollectionOfObjectValues<UserInstallStateSummary>(createUserInstallStateSummaryFromDiscriminatorValue); },
    }
}
export interface ManagedEBook extends Entity, Parsable {
    /**
     * The list of assignments for this eBook.
     */
    assignments?: ManagedEBookAssignment[];
    /**
     * The date and time when the eBook file was created.
     */
    createdDateTime?: Date;
    /**
     * Description.
     */
    description?: string;
    /**
     * The list of installation states for this eBook.
     */
    deviceStates?: DeviceInstallState[];
    /**
     * Name of the eBook.
     */
    displayName?: string;
    /**
     * The more information Url.
     */
    informationUrl?: string;
    /**
     * Mobile App Install Summary.
     */
    installSummary?: EBookInstallSummary;
    /**
     * Book cover.
     */
    largeCover?: MimeContent;
    /**
     * The date and time when the eBook was last modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * The privacy statement Url.
     */
    privacyInformationUrl?: string;
    /**
     * The date and time when the eBook was published.
     */
    publishedDateTime?: Date;
    /**
     * Publisher.
     */
    publisher?: string;
    /**
     * The list of installation states for this eBook.
     */
    userStateSummary?: UserInstallStateSummary[];
}
export function serializeManagedEBook(writer: SerializationWriter, managedEBook: ManagedEBook | undefined = {} as ManagedEBook) : void {
        serializeEntity(writer, managedEBook)
        writer.writeCollectionOfObjectValues<ManagedEBookAssignment>("assignments", managedEBook.assignments, serializeManagedEBookAssignment);
        writer.writeDateValue("createdDateTime", managedEBook.createdDateTime);
        writer.writeStringValue("description", managedEBook.description);
        writer.writeCollectionOfObjectValues<DeviceInstallState>("deviceStates", managedEBook.deviceStates, serializeDeviceInstallState);
        writer.writeStringValue("displayName", managedEBook.displayName);
        writer.writeStringValue("informationUrl", managedEBook.informationUrl);
        writer.writeObjectValue<EBookInstallSummary>("installSummary", managedEBook.installSummary, serializeEBookInstallSummary);
        writer.writeObjectValue<MimeContent>("largeCover", managedEBook.largeCover, serializeMimeContent);
        writer.writeDateValue("lastModifiedDateTime", managedEBook.lastModifiedDateTime);
        writer.writeStringValue("privacyInformationUrl", managedEBook.privacyInformationUrl);
        writer.writeDateValue("publishedDateTime", managedEBook.publishedDateTime);
        writer.writeStringValue("publisher", managedEBook.publisher);
        writer.writeCollectionOfObjectValues<UserInstallStateSummary>("userStateSummary", managedEBook.userStateSummary, serializeUserInstallStateSummary);
}
// tslint:enable
// eslint-enable
