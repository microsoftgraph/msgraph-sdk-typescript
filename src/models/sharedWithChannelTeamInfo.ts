// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConversationMemberFromDiscriminatorValue, serializeConversationMember, type ConversationMember } from './conversationMember';
import { deserializeIntoTeamInfo, serializeTeamInfo, type TeamInfo } from './teamInfo';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSharedWithChannelTeamInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSharedWithChannelTeamInfo;
}
export function deserializeIntoSharedWithChannelTeamInfo(sharedWithChannelTeamInfo: SharedWithChannelTeamInfo | undefined = {} as SharedWithChannelTeamInfo) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoTeamInfo(sharedWithChannelTeamInfo),
        "allowedMembers": n => { sharedWithChannelTeamInfo.allowedMembers = n.getCollectionOfObjectValues<ConversationMember>(createConversationMemberFromDiscriminatorValue); },
        "isHostTeam": n => { sharedWithChannelTeamInfo.isHostTeam = n.getBooleanValue(); },
    }
}
export function serializeSharedWithChannelTeamInfo(writer: SerializationWriter, sharedWithChannelTeamInfo: SharedWithChannelTeamInfo | undefined = {} as SharedWithChannelTeamInfo) : void {
    serializeTeamInfo(writer, sharedWithChannelTeamInfo)
    writer.writeCollectionOfObjectValues<ConversationMember>("allowedMembers", sharedWithChannelTeamInfo.allowedMembers, serializeConversationMember);
    writer.writeBooleanValue("isHostTeam", sharedWithChannelTeamInfo.isHostTeam);
}
export interface SharedWithChannelTeamInfo extends Parsable, TeamInfo {
    /**
     * A collection of team members who have access to the shared channel.
     */
    allowedMembers?: ConversationMember[];
    /**
     * Indicates whether the team is the host of the channel.
     */
    isHostTeam?: boolean;
}
// tslint:enable
// eslint-enable
