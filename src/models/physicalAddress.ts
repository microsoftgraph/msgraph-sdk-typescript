// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPhysicalAddressFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPhysicalAddress;
}
export function deserializeIntoPhysicalAddress(physicalAddress: PhysicalAddress | undefined = {} as PhysicalAddress) : Record<string, (node: ParseNode) => void> {
    return {
        "city": n => { physicalAddress.city = n.getStringValue(); },
        "countryOrRegion": n => { physicalAddress.countryOrRegion = n.getStringValue(); },
        "@odata.type": n => { physicalAddress.odataType = n.getStringValue(); },
        "postalCode": n => { physicalAddress.postalCode = n.getStringValue(); },
        "state": n => { physicalAddress.state = n.getStringValue(); },
        "street": n => { physicalAddress.street = n.getStringValue(); },
    }
}
export interface PhysicalAddress extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The city.
     */
    city?: string;
    /**
     * The country or region. It's a free-format string value, for example, 'United States'.
     */
    countryOrRegion?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The postal code.
     */
    postalCode?: string;
    /**
     * The state.
     */
    state?: string;
    /**
     * The street.
     */
    street?: string;
}
export function serializePhysicalAddress(writer: SerializationWriter, physicalAddress: PhysicalAddress | undefined = {} as PhysicalAddress) : void {
        writer.writeStringValue("city", physicalAddress.city);
        writer.writeStringValue("countryOrRegion", physicalAddress.countryOrRegion);
        writer.writeStringValue("@odata.type", physicalAddress.odataType);
        writer.writeStringValue("postalCode", physicalAddress.postalCode);
        writer.writeStringValue("state", physicalAddress.state);
        writer.writeStringValue("street", physicalAddress.street);
        writer.writeAdditionalData(physicalAddress.additionalData);
}
// tslint:enable
// eslint-enable
