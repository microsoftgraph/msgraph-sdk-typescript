// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEmailIdentityFromDiscriminatorValue, serializeEmailIdentity, type EmailIdentity } from './emailIdentity';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { SimulationContentSource } from './simulationContentSource';
import { TrainingAvailabilityStatus } from './trainingAvailabilityStatus';
import { createTrainingLanguageDetailFromDiscriminatorValue, serializeTrainingLanguageDetail, type TrainingLanguageDetail } from './trainingLanguageDetail';
import { TrainingType } from './trainingType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTrainingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTraining;
}
export function deserializeIntoTraining(training: Training | undefined = {} as Training) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(training),
        "availabilityStatus": n => { training.availabilityStatus = n.getEnumValue<TrainingAvailabilityStatus>(TrainingAvailabilityStatus); },
        "createdBy": n => { training.createdBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "createdDateTime": n => { training.createdDateTime = n.getDateValue(); },
        "description": n => { training.description = n.getStringValue(); },
        "displayName": n => { training.displayName = n.getStringValue(); },
        "durationInMinutes": n => { training.durationInMinutes = n.getNumberValue(); },
        "hasEvaluation": n => { training.hasEvaluation = n.getBooleanValue(); },
        "languageDetails": n => { training.languageDetails = n.getCollectionOfObjectValues<TrainingLanguageDetail>(createTrainingLanguageDetailFromDiscriminatorValue); },
        "lastModifiedBy": n => { training.lastModifiedBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { training.lastModifiedDateTime = n.getDateValue(); },
        "source": n => { training.source = n.getEnumValue<SimulationContentSource>(SimulationContentSource); },
        "supportedLocales": n => { training.supportedLocales = n.getCollectionOfPrimitiveValues<string>(); },
        "tags": n => { training.tags = n.getCollectionOfPrimitiveValues<string>(); },
        "type": n => { training.type = n.getEnumValue<TrainingType>(TrainingType); },
    }
}
export function serializeTraining(writer: SerializationWriter, training: Training | undefined = {} as Training) : void {
        serializeEntity(writer, training)
        writer.writeEnumValue<TrainingAvailabilityStatus>("availabilityStatus", training.availabilityStatus);
        writer.writeObjectValue<EmailIdentity>("createdBy", training.createdBy, );
        writer.writeDateValue("createdDateTime", training.createdDateTime);
        writer.writeStringValue("description", training.description);
        writer.writeStringValue("displayName", training.displayName);
        writer.writeNumberValue("durationInMinutes", training.durationInMinutes);
        writer.writeBooleanValue("hasEvaluation", training.hasEvaluation);
        writer.writeCollectionOfObjectValues<TrainingLanguageDetail>("languageDetails", training.languageDetails, );
        writer.writeObjectValue<EmailIdentity>("lastModifiedBy", training.lastModifiedBy, );
        writer.writeDateValue("lastModifiedDateTime", training.lastModifiedDateTime);
        writer.writeEnumValue<SimulationContentSource>("source", training.source);
        writer.writeCollectionOfPrimitiveValues<string>("supportedLocales", training.supportedLocales);
        writer.writeCollectionOfPrimitiveValues<string>("tags", training.tags);
        writer.writeEnumValue<TrainingType>("type", training.type);
}
export interface Training extends Entity, Parsable {
    /**
     * The availabilityStatus property
     */
    availabilityStatus?: TrainingAvailabilityStatus;
    /**
     * The createdBy property
     */
    createdBy?: EmailIdentity;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The description property
     */
    description?: string;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The durationInMinutes property
     */
    durationInMinutes?: number;
    /**
     * The hasEvaluation property
     */
    hasEvaluation?: boolean;
    /**
     * The languageDetails property
     */
    languageDetails?: TrainingLanguageDetail[];
    /**
     * The lastModifiedBy property
     */
    lastModifiedBy?: EmailIdentity;
    /**
     * The lastModifiedDateTime property
     */
    lastModifiedDateTime?: Date;
    /**
     * The source property
     */
    source?: SimulationContentSource;
    /**
     * The supportedLocales property
     */
    supportedLocales?: string[];
    /**
     * The tags property
     */
    tags?: string[];
    /**
     * The type property
     */
    type?: TrainingType;
}
// tslint:enable
// eslint-enable
