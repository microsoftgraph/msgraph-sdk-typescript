// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DiskType } from './diskType';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { UserExperienceAnalyticsHealthState } from './userExperienceAnalyticsHealthState';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserExperienceAnalyticsDevicePerformanceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserExperienceAnalyticsDevicePerformance;
}
export function deserializeIntoUserExperienceAnalyticsDevicePerformance(userExperienceAnalyticsDevicePerformance: UserExperienceAnalyticsDevicePerformance | undefined = {} as UserExperienceAnalyticsDevicePerformance) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(userExperienceAnalyticsDevicePerformance),
        "averageBlueScreens": n => { userExperienceAnalyticsDevicePerformance.averageBlueScreens = n.getNumberValue(); },
        "averageRestarts": n => { userExperienceAnalyticsDevicePerformance.averageRestarts = n.getNumberValue(); },
        "blueScreenCount": n => { userExperienceAnalyticsDevicePerformance.blueScreenCount = n.getNumberValue(); },
        "bootScore": n => { userExperienceAnalyticsDevicePerformance.bootScore = n.getNumberValue(); },
        "coreBootTimeInMs": n => { userExperienceAnalyticsDevicePerformance.coreBootTimeInMs = n.getNumberValue(); },
        "coreLoginTimeInMs": n => { userExperienceAnalyticsDevicePerformance.coreLoginTimeInMs = n.getNumberValue(); },
        "deviceCount": n => { userExperienceAnalyticsDevicePerformance.deviceCount = n.getNumberValue(); },
        "deviceName": n => { userExperienceAnalyticsDevicePerformance.deviceName = n.getStringValue(); },
        "diskType": n => { userExperienceAnalyticsDevicePerformance.diskType = n.getEnumValue<DiskType>(DiskType); },
        "groupPolicyBootTimeInMs": n => { userExperienceAnalyticsDevicePerformance.groupPolicyBootTimeInMs = n.getNumberValue(); },
        "groupPolicyLoginTimeInMs": n => { userExperienceAnalyticsDevicePerformance.groupPolicyLoginTimeInMs = n.getNumberValue(); },
        "healthStatus": n => { userExperienceAnalyticsDevicePerformance.healthStatus = n.getEnumValue<UserExperienceAnalyticsHealthState>(UserExperienceAnalyticsHealthState); },
        "loginScore": n => { userExperienceAnalyticsDevicePerformance.loginScore = n.getNumberValue(); },
        "manufacturer": n => { userExperienceAnalyticsDevicePerformance.manufacturer = n.getStringValue(); },
        "model": n => { userExperienceAnalyticsDevicePerformance.model = n.getStringValue(); },
        "modelStartupPerformanceScore": n => { userExperienceAnalyticsDevicePerformance.modelStartupPerformanceScore = n.getNumberValue(); },
        "operatingSystemVersion": n => { userExperienceAnalyticsDevicePerformance.operatingSystemVersion = n.getStringValue(); },
        "responsiveDesktopTimeInMs": n => { userExperienceAnalyticsDevicePerformance.responsiveDesktopTimeInMs = n.getNumberValue(); },
        "restartCount": n => { userExperienceAnalyticsDevicePerformance.restartCount = n.getNumberValue(); },
        "startupPerformanceScore": n => { userExperienceAnalyticsDevicePerformance.startupPerformanceScore = n.getNumberValue(); },
    }
}
export function serializeUserExperienceAnalyticsDevicePerformance(writer: SerializationWriter, userExperienceAnalyticsDevicePerformance: UserExperienceAnalyticsDevicePerformance | undefined = {} as UserExperienceAnalyticsDevicePerformance) : void {
        serializeEntity(writer, userExperienceAnalyticsDevicePerformance)
        writer.writeNumberValue("averageBlueScreens", userExperienceAnalyticsDevicePerformance.averageBlueScreens);
        writer.writeNumberValue("averageRestarts", userExperienceAnalyticsDevicePerformance.averageRestarts);
        writer.writeNumberValue("blueScreenCount", userExperienceAnalyticsDevicePerformance.blueScreenCount);
        writer.writeNumberValue("bootScore", userExperienceAnalyticsDevicePerformance.bootScore);
        writer.writeNumberValue("coreBootTimeInMs", userExperienceAnalyticsDevicePerformance.coreBootTimeInMs);
        writer.writeNumberValue("coreLoginTimeInMs", userExperienceAnalyticsDevicePerformance.coreLoginTimeInMs);
        writer.writeNumberValue("deviceCount", userExperienceAnalyticsDevicePerformance.deviceCount);
        writer.writeStringValue("deviceName", userExperienceAnalyticsDevicePerformance.deviceName);
        writer.writeEnumValue<DiskType>("diskType", userExperienceAnalyticsDevicePerformance.diskType);
        writer.writeNumberValue("groupPolicyBootTimeInMs", userExperienceAnalyticsDevicePerformance.groupPolicyBootTimeInMs);
        writer.writeNumberValue("groupPolicyLoginTimeInMs", userExperienceAnalyticsDevicePerformance.groupPolicyLoginTimeInMs);
        writer.writeEnumValue<UserExperienceAnalyticsHealthState>("healthStatus", userExperienceAnalyticsDevicePerformance.healthStatus);
        writer.writeNumberValue("loginScore", userExperienceAnalyticsDevicePerformance.loginScore);
        writer.writeStringValue("manufacturer", userExperienceAnalyticsDevicePerformance.manufacturer);
        writer.writeStringValue("model", userExperienceAnalyticsDevicePerformance.model);
        writer.writeNumberValue("modelStartupPerformanceScore", userExperienceAnalyticsDevicePerformance.modelStartupPerformanceScore);
        writer.writeStringValue("operatingSystemVersion", userExperienceAnalyticsDevicePerformance.operatingSystemVersion);
        writer.writeNumberValue("responsiveDesktopTimeInMs", userExperienceAnalyticsDevicePerformance.responsiveDesktopTimeInMs);
        writer.writeNumberValue("restartCount", userExperienceAnalyticsDevicePerformance.restartCount);
        writer.writeNumberValue("startupPerformanceScore", userExperienceAnalyticsDevicePerformance.startupPerformanceScore);
}
export interface UserExperienceAnalyticsDevicePerformance extends Entity, Parsable {
    /**
     * Average (mean) number of Blue Screens per device in the last 30 days. Valid values 0 to 9999999
     */
    averageBlueScreens?: number;
    /**
     * Average (mean) number of Restarts per device in the last 30 days. Valid values 0 to 9999999
     */
    averageRestarts?: number;
    /**
     * Number of Blue Screens in the last 30 days. Valid values 0 to 9999999
     */
    blueScreenCount?: number;
    /**
     * The user experience analytics device boot score.
     */
    bootScore?: number;
    /**
     * The user experience analytics device core boot time in milliseconds.
     */
    coreBootTimeInMs?: number;
    /**
     * The user experience analytics device core login time in milliseconds.
     */
    coreLoginTimeInMs?: number;
    /**
     * User experience analytics summarized device count.
     */
    deviceCount?: number;
    /**
     * The user experience analytics device name.
     */
    deviceName?: string;
    /**
     * The diskType property
     */
    diskType?: DiskType;
    /**
     * The user experience analytics device group policy boot time in milliseconds.
     */
    groupPolicyBootTimeInMs?: number;
    /**
     * The user experience analytics device group policy login time in milliseconds.
     */
    groupPolicyLoginTimeInMs?: number;
    /**
     * The healthStatus property
     */
    healthStatus?: UserExperienceAnalyticsHealthState;
    /**
     * The user experience analytics device login score.
     */
    loginScore?: number;
    /**
     * The user experience analytics device manufacturer.
     */
    manufacturer?: string;
    /**
     * The user experience analytics device model.
     */
    model?: string;
    /**
     * The user experience analytics model level startup performance score. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
     */
    modelStartupPerformanceScore?: number;
    /**
     * The user experience analytics device Operating System version.
     */
    operatingSystemVersion?: string;
    /**
     * The user experience analytics responsive desktop time in milliseconds.
     */
    responsiveDesktopTimeInMs?: number;
    /**
     * Number of Restarts in the last 30 days. Valid values 0 to 9999999
     */
    restartCount?: number;
    /**
     * The user experience analytics device startup performance score. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
     */
    startupPerformanceScore?: number;
}
// tslint:enable
// eslint-enable
