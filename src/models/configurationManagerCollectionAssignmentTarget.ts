import { deserializeIntoDeviceAndAppManagementAssignmentTarget, serializeDeviceAndAppManagementAssignmentTarget, type DeviceAndAppManagementAssignmentTarget } from './deviceAndAppManagementAssignmentTarget';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConfigurationManagerCollectionAssignmentTarget extends DeviceAndAppManagementAssignmentTarget, Parsable {
    /**
     * The collection Id that is the target of the assignment.
     */
    collectionId?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createConfigurationManagerCollectionAssignmentTargetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConfigurationManagerCollectionAssignmentTarget;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoConfigurationManagerCollectionAssignmentTarget(configurationManagerCollectionAssignmentTarget: ConfigurationManagerCollectionAssignmentTarget | undefined = {} as ConfigurationManagerCollectionAssignmentTarget) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceAndAppManagementAssignmentTarget(configurationManagerCollectionAssignmentTarget),
        "collectionId": n => { configurationManagerCollectionAssignmentTarget.collectionId = n.getStringValue(); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeConfigurationManagerCollectionAssignmentTarget(writer: SerializationWriter, configurationManagerCollectionAssignmentTarget: ConfigurationManagerCollectionAssignmentTarget | undefined = {} as ConfigurationManagerCollectionAssignmentTarget) : void {
        serializeDeviceAndAppManagementAssignmentTarget(writer, configurationManagerCollectionAssignmentTarget)
        writer.writeStringValue("collectionId", configurationManagerCollectionAssignmentTarget.collectionId);
}
