// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { LayoutTemplateType } from './layoutTemplateType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLoginPageLayoutConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLoginPageLayoutConfiguration;
}
export function deserializeIntoLoginPageLayoutConfiguration(loginPageLayoutConfiguration: LoginPageLayoutConfiguration | undefined = {} as LoginPageLayoutConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        "isFooterShown": n => { loginPageLayoutConfiguration.isFooterShown = n.getBooleanValue(); },
        "isHeaderShown": n => { loginPageLayoutConfiguration.isHeaderShown = n.getBooleanValue(); },
        "layoutTemplateType": n => { loginPageLayoutConfiguration.layoutTemplateType = n.getEnumValue<LayoutTemplateType>(LayoutTemplateType); },
        "@odata.type": n => { loginPageLayoutConfiguration.odataType = n.getStringValue(); },
    }
}
export interface LoginPageLayoutConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Option to show the footer on the sign-in page.
     */
    isFooterShown?: boolean;
    /**
     * Option to show the header on the sign-in page.
     */
    isHeaderShown?: boolean;
    /**
     * Represents the layout template to be displayed on the login page for a tenant. The possible values are  default - Represents the default Microsoft layout with a centered lightbox.  verticalSplit - Represents a layout with a background on the left side and a full-height lightbox to the right.  unknownFutureValue - Evolvable enumeration sentinel value. Don't use.
     */
    layoutTemplateType?: LayoutTemplateType;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeLoginPageLayoutConfiguration(writer: SerializationWriter, loginPageLayoutConfiguration: LoginPageLayoutConfiguration | undefined = {} as LoginPageLayoutConfiguration) : void {
        writer.writeBooleanValue("isFooterShown", loginPageLayoutConfiguration.isFooterShown);
        writer.writeBooleanValue("isHeaderShown", loginPageLayoutConfiguration.isHeaderShown);
        writer.writeEnumValue<LayoutTemplateType>("layoutTemplateType", loginPageLayoutConfiguration.layoutTemplateType);
        writer.writeStringValue("@odata.type", loginPageLayoutConfiguration.odataType);
        writer.writeAdditionalData(loginPageLayoutConfiguration.additionalData);
}
// tslint:enable
// eslint-enable
