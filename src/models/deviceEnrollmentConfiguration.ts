// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDeviceEnrollmentLimitConfiguration } from './deviceEnrollmentLimitConfiguration';
import { deserializeIntoDeviceEnrollmentPlatformRestrictionsConfiguration } from './deviceEnrollmentPlatformRestrictionsConfiguration';
import { deserializeIntoDeviceEnrollmentWindowsHelloForBusinessConfiguration } from './deviceEnrollmentWindowsHelloForBusinessConfiguration';
import { createEnrollmentConfigurationAssignmentFromDiscriminatorValue, serializeEnrollmentConfigurationAssignment, type EnrollmentConfigurationAssignment } from './enrollmentConfigurationAssignment';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type DeviceEnrollmentLimitConfiguration, type DeviceEnrollmentPlatformRestrictionsConfiguration, type DeviceEnrollmentWindowsHelloForBusinessConfiguration } from './index';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceEnrollmentConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.deviceEnrollmentLimitConfiguration":
                    return deserializeIntoDeviceEnrollmentLimitConfiguration;
                case "#microsoft.graph.deviceEnrollmentPlatformRestrictionsConfiguration":
                    return deserializeIntoDeviceEnrollmentPlatformRestrictionsConfiguration;
                case "#microsoft.graph.deviceEnrollmentWindowsHelloForBusinessConfiguration":
                    return deserializeIntoDeviceEnrollmentWindowsHelloForBusinessConfiguration;
            }
        }
    }
    return deserializeIntoDeviceEnrollmentConfiguration;
}
export function deserializeIntoDeviceEnrollmentConfiguration(deviceEnrollmentConfiguration: DeviceEnrollmentConfiguration | undefined = {} as DeviceEnrollmentConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceEnrollmentConfiguration),
        "assignments": n => { deviceEnrollmentConfiguration.assignments = n.getCollectionOfObjectValues<EnrollmentConfigurationAssignment>(createEnrollmentConfigurationAssignmentFromDiscriminatorValue); },
        "createdDateTime": n => { deviceEnrollmentConfiguration.createdDateTime = n.getDateValue(); },
        "description": n => { deviceEnrollmentConfiguration.description = n.getStringValue(); },
        "displayName": n => { deviceEnrollmentConfiguration.displayName = n.getStringValue(); },
        "lastModifiedDateTime": n => { deviceEnrollmentConfiguration.lastModifiedDateTime = n.getDateValue(); },
        "priority": n => { deviceEnrollmentConfiguration.priority = n.getNumberValue(); },
        "version": n => { deviceEnrollmentConfiguration.version = n.getNumberValue(); },
    }
}
export interface DeviceEnrollmentConfiguration extends Entity, Parsable {
    /**
     * The list of group assignments for the device configuration profile
     */
    assignments?: EnrollmentConfigurationAssignment[];
    /**
     * Created date time in UTC of the device enrollment configuration
     */
    createdDateTime?: Date;
    /**
     * The description of the device enrollment configuration
     */
    description?: string;
    /**
     * The display name of the device enrollment configuration
     */
    displayName?: string;
    /**
     * Last modified date time in UTC of the device enrollment configuration
     */
    lastModifiedDateTime?: Date;
    /**
     * Priority is used when a user exists in multiple groups that are assigned enrollment configuration. Users are subject only to the configuration with the lowest priority value.
     */
    priority?: number;
    /**
     * The version of the device enrollment configuration
     */
    version?: number;
}
export function serializeDeviceEnrollmentConfiguration(writer: SerializationWriter, deviceEnrollmentConfiguration: DeviceEnrollmentConfiguration | undefined = {} as DeviceEnrollmentConfiguration) : void {
        serializeEntity(writer, deviceEnrollmentConfiguration)
        writer.writeCollectionOfObjectValues<EnrollmentConfigurationAssignment>("assignments", deviceEnrollmentConfiguration.assignments, serializeEnrollmentConfigurationAssignment);
        writer.writeDateValue("createdDateTime", deviceEnrollmentConfiguration.createdDateTime);
        writer.writeStringValue("description", deviceEnrollmentConfiguration.description);
        writer.writeStringValue("displayName", deviceEnrollmentConfiguration.displayName);
        writer.writeDateValue("lastModifiedDateTime", deviceEnrollmentConfiguration.lastModifiedDateTime);
        writer.writeNumberValue("priority", deviceEnrollmentConfiguration.priority);
        writer.writeNumberValue("version", deviceEnrollmentConfiguration.version);
}
// tslint:enable
// eslint-enable
