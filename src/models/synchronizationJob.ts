// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createKeyValuePairFromDiscriminatorValue, serializeKeyValuePair, type KeyValuePair } from './keyValuePair';
import { createSynchronizationScheduleFromDiscriminatorValue, serializeSynchronizationSchedule, type SynchronizationSchedule } from './synchronizationSchedule';
import { createSynchronizationSchemaFromDiscriminatorValue, serializeSynchronizationSchema, type SynchronizationSchema } from './synchronizationSchema';
import { createSynchronizationStatusFromDiscriminatorValue, serializeSynchronizationStatus, type SynchronizationStatus } from './synchronizationStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSynchronizationJobFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSynchronizationJob;
}
export function deserializeIntoSynchronizationJob(synchronizationJob: SynchronizationJob | undefined = {} as SynchronizationJob) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(synchronizationJob),
        "schedule": n => { synchronizationJob.schedule = n.getObjectValue<SynchronizationSchedule>(createSynchronizationScheduleFromDiscriminatorValue); },
        "schema": n => { synchronizationJob.schema = n.getObjectValue<SynchronizationSchema>(createSynchronizationSchemaFromDiscriminatorValue); },
        "status": n => { synchronizationJob.status = n.getObjectValue<SynchronizationStatus>(createSynchronizationStatusFromDiscriminatorValue); },
        "synchronizationJobSettings": n => { synchronizationJob.synchronizationJobSettings = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "templateId": n => { synchronizationJob.templateId = n.getStringValue(); },
    }
}
export function serializeSynchronizationJob(writer: SerializationWriter, synchronizationJob: SynchronizationJob | undefined = {} as SynchronizationJob) : void {
        serializeEntity(writer, synchronizationJob)
        writer.writeObjectValue<SynchronizationSchedule>("schedule", synchronizationJob.schedule, serializeSynchronizationSchedule);
        writer.writeObjectValue<SynchronizationSchema>("schema", synchronizationJob.schema, serializeSynchronizationSchema);
        writer.writeObjectValue<SynchronizationStatus>("status", synchronizationJob.status, serializeSynchronizationStatus);
        writer.writeCollectionOfObjectValues<KeyValuePair>("synchronizationJobSettings", synchronizationJob.synchronizationJobSettings, serializeKeyValuePair);
        writer.writeStringValue("templateId", synchronizationJob.templateId);
}
export interface SynchronizationJob extends Entity, Parsable {
    /**
     * Schedule used to run the job. Read-only.
     */
    schedule?: SynchronizationSchedule;
    /**
     * The synchronization schema configured for the job.
     */
    schema?: SynchronizationSchema;
    /**
     * Status of the job, which includes when the job was last run, current job state, and errors.
     */
    status?: SynchronizationStatus;
    /**
     * Settings associated with the job. Some settings are inherited from the template.
     */
    synchronizationJobSettings?: KeyValuePair[];
    /**
     * Identifier of the synchronization template this job is based on.
     */
    templateId?: string;
}
// tslint:enable
// eslint-enable
