// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createSubjectRightsRequestFromDiscriminatorValue, serializeSubjectRightsRequest, type SubjectRightsRequest } from './subjectRightsRequest';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrivacyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrivacy;
}
export function deserializeIntoPrivacy(privacy: Privacy | undefined = {} as Privacy) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { privacy.odataType = n.getStringValue(); },
        "subjectRightsRequests": n => { privacy.subjectRightsRequests = n.getCollectionOfObjectValues<SubjectRightsRequest>(createSubjectRightsRequestFromDiscriminatorValue); },
    }
}
export interface Privacy extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The subjectRightsRequests property
     */
    subjectRightsRequests?: SubjectRightsRequest[];
}
export function serializePrivacy(writer: SerializationWriter, privacy: Privacy | undefined = {} as Privacy) : void {
        writer.writeStringValue("@odata.type", privacy.odataType);
        writer.writeCollectionOfObjectValues<SubjectRightsRequest>("subjectRightsRequests", privacy.subjectRightsRequests, );
        writer.writeAdditionalData(privacy.additionalData);
}
// tslint:enable
// eslint-enable
