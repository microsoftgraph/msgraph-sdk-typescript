// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConditionalAccessConditionSetFromDiscriminatorValue, serializeConditionalAccessConditionSet, type ConditionalAccessConditionSet } from './conditionalAccessConditionSet';
import { createConditionalAccessGrantControlsFromDiscriminatorValue, serializeConditionalAccessGrantControls, type ConditionalAccessGrantControls } from './conditionalAccessGrantControls';
import { ConditionalAccessPolicyState } from './conditionalAccessPolicyState';
import { createConditionalAccessSessionControlsFromDiscriminatorValue, serializeConditionalAccessSessionControls, type ConditionalAccessSessionControls } from './conditionalAccessSessionControls';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessPolicy extends Entity, Parsable {
    /**
     * The conditions property
     */
    conditions?: ConditionalAccessConditionSet;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Readonly.
     */
    createdDateTime?: Date;
    /**
     * The description property
     */
    description?: string;
    /**
     * Specifies a display name for the conditionalAccessPolicy object.
     */
    displayName?: string;
    /**
     * Specifies the grant controls that must be fulfilled to pass the policy.
     */
    grantControls?: ConditionalAccessGrantControls;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Readonly.
     */
    modifiedDateTime?: Date;
    /**
     * Specifies the session controls that are enforced after sign-in.
     */
    sessionControls?: ConditionalAccessSessionControls;
    /**
     * The state property
     */
    state?: ConditionalAccessPolicyState;
    /**
     * The templateId property
     */
    templateId?: string;
}
export function createConditionalAccessPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessPolicy;
}
export function deserializeIntoConditionalAccessPolicy(conditionalAccessPolicy: ConditionalAccessPolicy | undefined = {} as ConditionalAccessPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(conditionalAccessPolicy),
        "conditions": n => { conditionalAccessPolicy.conditions = n.getObjectValue<ConditionalAccessConditionSet>(createConditionalAccessConditionSetFromDiscriminatorValue); },
        "createdDateTime": n => { conditionalAccessPolicy.createdDateTime = n.getDateValue(); },
        "description": n => { conditionalAccessPolicy.description = n.getStringValue(); },
        "displayName": n => { conditionalAccessPolicy.displayName = n.getStringValue(); },
        "grantControls": n => { conditionalAccessPolicy.grantControls = n.getObjectValue<ConditionalAccessGrantControls>(createConditionalAccessGrantControlsFromDiscriminatorValue); },
        "modifiedDateTime": n => { conditionalAccessPolicy.modifiedDateTime = n.getDateValue(); },
        "sessionControls": n => { conditionalAccessPolicy.sessionControls = n.getObjectValue<ConditionalAccessSessionControls>(createConditionalAccessSessionControlsFromDiscriminatorValue); },
        "state": n => { conditionalAccessPolicy.state = n.getEnumValue<ConditionalAccessPolicyState>(ConditionalAccessPolicyState); },
        "templateId": n => { conditionalAccessPolicy.templateId = n.getStringValue(); },
    }
}
export function serializeConditionalAccessPolicy(writer: SerializationWriter, conditionalAccessPolicy: ConditionalAccessPolicy | undefined = {} as ConditionalAccessPolicy) : void {
        serializeEntity(writer, conditionalAccessPolicy)
        writer.writeObjectValue<ConditionalAccessConditionSet>("conditions", conditionalAccessPolicy.conditions, serializeConditionalAccessConditionSet);
        writer.writeDateValue("createdDateTime", conditionalAccessPolicy.createdDateTime);
        writer.writeStringValue("description", conditionalAccessPolicy.description);
        writer.writeStringValue("displayName", conditionalAccessPolicy.displayName);
        writer.writeObjectValue<ConditionalAccessGrantControls>("grantControls", conditionalAccessPolicy.grantControls, serializeConditionalAccessGrantControls);
        writer.writeDateValue("modifiedDateTime", conditionalAccessPolicy.modifiedDateTime);
        writer.writeObjectValue<ConditionalAccessSessionControls>("sessionControls", conditionalAccessPolicy.sessionControls, serializeConditionalAccessSessionControls);
        writer.writeEnumValue<ConditionalAccessPolicyState>("state", conditionalAccessPolicy.state);
        writer.writeStringValue("templateId", conditionalAccessPolicy.templateId);
}
// tslint:enable
// eslint-enable
