// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CertificateAuthority extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Required. The base64 encoded string representing the public certificate.
     */
    certificate?: string;
    /**
     * The URL of the certificate revocation list.
     */
    certificateRevocationListUrl?: string;
    /**
     * The URL contains the list of all revoked certificates since the last time a full certificate revocaton list was created.
     */
    deltaCertificateRevocationListUrl?: string;
    /**
     * Required. true if the trusted certificate is a root authority, false if the trusted certificate is an intermediate authority.
     */
    isRootAuthority?: boolean;
    /**
     * The issuer of the certificate, calculated from the certificate value. Read-only.
     */
    issuer?: string;
    /**
     * The subject key identifier of the certificate, calculated from the certificate value. Read-only.
     */
    issuerSki?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createCertificateAuthorityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCertificateAuthority;
}
export function deserializeIntoCertificateAuthority(certificateAuthority: CertificateAuthority | undefined = {} as CertificateAuthority) : Record<string, (node: ParseNode) => void> {
    return {
        "certificate": n => { certificateAuthority.certificate = n.getStringValue(); },
        "certificateRevocationListUrl": n => { certificateAuthority.certificateRevocationListUrl = n.getStringValue(); },
        "deltaCertificateRevocationListUrl": n => { certificateAuthority.deltaCertificateRevocationListUrl = n.getStringValue(); },
        "isRootAuthority": n => { certificateAuthority.isRootAuthority = n.getBooleanValue(); },
        "issuer": n => { certificateAuthority.issuer = n.getStringValue(); },
        "issuerSki": n => { certificateAuthority.issuerSki = n.getStringValue(); },
        "@odata.type": n => { certificateAuthority.odataType = n.getStringValue(); },
    }
}
export function serializeCertificateAuthority(writer: SerializationWriter, certificateAuthority: CertificateAuthority | undefined = {} as CertificateAuthority) : void {
    writer.writeStringValue("certificate", certificateAuthority.certificate);
    writer.writeStringValue("certificateRevocationListUrl", certificateAuthority.certificateRevocationListUrl);
    writer.writeStringValue("deltaCertificateRevocationListUrl", certificateAuthority.deltaCertificateRevocationListUrl);
    writer.writeBooleanValue("isRootAuthority", certificateAuthority.isRootAuthority);
    writer.writeStringValue("issuer", certificateAuthority.issuer);
    writer.writeStringValue("issuerSki", certificateAuthority.issuerSki);
    writer.writeStringValue("@odata.type", certificateAuthority.odataType);
    writer.writeAdditionalData(certificateAuthority.additionalData);
}
// tslint:enable
// eslint-enable
