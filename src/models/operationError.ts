// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOperationErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOperationError;
}
export function deserializeIntoOperationError(operationError: OperationError | undefined = {} as OperationError) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { operationError.code = n.getStringValue(); },
        "message": n => { operationError.message = n.getStringValue(); },
        "@odata.type": n => { operationError.odataType = n.getStringValue(); },
    }
}
export interface OperationError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Operation error code.
     */
    code?: string;
    /**
     * Operation error message.
     */
    message?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeOperationError(writer: SerializationWriter, operationError: OperationError | undefined = {} as OperationError) : void {
    writer.writeStringValue("code", operationError.code);
    writer.writeStringValue("message", operationError.message);
    writer.writeStringValue("@odata.type", operationError.odataType);
    writer.writeAdditionalData(operationError.additionalData);
}
// tslint:enable
// eslint-enable
