// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDaylightTimeZoneOffset } from './daylightTimeZoneOffset';
import { DayOfWeek } from './dayOfWeek';
import { type DaylightTimeZoneOffset } from './index';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter, type TimeOnly } from '@microsoft/kiota-abstractions';

export function createStandardTimeZoneOffsetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.daylightTimeZoneOffset":
                    return deserializeIntoDaylightTimeZoneOffset;
            }
        }
    }
    return deserializeIntoStandardTimeZoneOffset;
}
export function deserializeIntoStandardTimeZoneOffset(standardTimeZoneOffset: StandardTimeZoneOffset | undefined = {} as StandardTimeZoneOffset) : Record<string, (node: ParseNode) => void> {
    return {
        "dayOccurrence": n => { standardTimeZoneOffset.dayOccurrence = n.getNumberValue(); },
        "dayOfWeek": n => { standardTimeZoneOffset.dayOfWeek = n.getEnumValue<DayOfWeek>(DayOfWeek); },
        "month": n => { standardTimeZoneOffset.month = n.getNumberValue(); },
        "@odata.type": n => { standardTimeZoneOffset.odataType = n.getStringValue(); },
        "time": n => { standardTimeZoneOffset.time = n.getTimeOnlyValue(); },
        "year": n => { standardTimeZoneOffset.year = n.getNumberValue(); },
    }
}
export function serializeStandardTimeZoneOffset(writer: SerializationWriter, standardTimeZoneOffset: StandardTimeZoneOffset | undefined = {} as StandardTimeZoneOffset) : void {
    writer.writeNumberValue("dayOccurrence", standardTimeZoneOffset.dayOccurrence);
    writer.writeEnumValue<DayOfWeek>("dayOfWeek", standardTimeZoneOffset.dayOfWeek);
    writer.writeNumberValue("month", standardTimeZoneOffset.month);
    writer.writeStringValue("@odata.type", standardTimeZoneOffset.odataType);
    writer.writeTimeOnlyValue("time", standardTimeZoneOffset.time);
    writer.writeNumberValue("year", standardTimeZoneOffset.year);
    writer.writeAdditionalData(standardTimeZoneOffset.additionalData);
}
export interface StandardTimeZoneOffset extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents the nth occurrence of the day of week that the transition from daylight saving time to standard time occurs.
     */
    dayOccurrence?: number;
    /**
     * Represents the day of the week when the transition from daylight saving time to standard time.
     */
    dayOfWeek?: DayOfWeek;
    /**
     * Represents the month of the year when the transition from daylight saving time to standard time occurs.
     */
    month?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Represents the time of day when the transition from daylight saving time to standard time occurs.
     */
    time?: TimeOnly;
    /**
     * Represents how frequently in terms of years the change from daylight saving time to standard time occurs. For example, a value of 0 means every year.
     */
    year?: number;
}
// tslint:enable
// eslint-enable
