// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAndroidManagedAppProtection } from './androidManagedAppProtection';
import { deserializeIntoDefaultManagedAppProtection } from './defaultManagedAppProtection';
import { type AndroidManagedAppProtection, type DefaultManagedAppProtection, type IosManagedAppProtection, type TargetedManagedAppProtection } from './index';
import { deserializeIntoIosManagedAppProtection } from './iosManagedAppProtection';
import { ManagedAppClipboardSharingLevel } from './managedAppClipboardSharingLevel';
import { ManagedAppDataStorageLocation } from './managedAppDataStorageLocation';
import { ManagedAppDataTransferLevel } from './managedAppDataTransferLevel';
import { ManagedAppPinCharacterSet } from './managedAppPinCharacterSet';
import { deserializeIntoManagedAppPolicy, serializeManagedAppPolicy, type ManagedAppPolicy } from './managedAppPolicy';
import { ManagedBrowserType } from './managedBrowserType';
import { deserializeIntoTargetedManagedAppProtection } from './targetedManagedAppProtection';
import { type Duration, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createManagedAppProtectionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.androidManagedAppProtection":
                    return deserializeIntoAndroidManagedAppProtection;
                case "#microsoft.graph.defaultManagedAppProtection":
                    return deserializeIntoDefaultManagedAppProtection;
                case "#microsoft.graph.iosManagedAppProtection":
                    return deserializeIntoIosManagedAppProtection;
                case "#microsoft.graph.targetedManagedAppProtection":
                    return deserializeIntoTargetedManagedAppProtection;
            }
        }
    }
    return deserializeIntoManagedAppProtection;
}
export function deserializeIntoManagedAppProtection(managedAppProtection: ManagedAppProtection | undefined = {} as ManagedAppProtection) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoManagedAppPolicy(managedAppProtection),
        "allowedDataStorageLocations": n => { managedAppProtection.allowedDataStorageLocations = n.getCollectionOfEnumValues<ManagedAppDataStorageLocation>(ManagedAppDataStorageLocation); },
        "allowedInboundDataTransferSources": n => { managedAppProtection.allowedInboundDataTransferSources = n.getEnumValue<ManagedAppDataTransferLevel>(ManagedAppDataTransferLevel); },
        "allowedOutboundClipboardSharingLevel": n => { managedAppProtection.allowedOutboundClipboardSharingLevel = n.getEnumValue<ManagedAppClipboardSharingLevel>(ManagedAppClipboardSharingLevel); },
        "allowedOutboundDataTransferDestinations": n => { managedAppProtection.allowedOutboundDataTransferDestinations = n.getEnumValue<ManagedAppDataTransferLevel>(ManagedAppDataTransferLevel); },
        "contactSyncBlocked": n => { managedAppProtection.contactSyncBlocked = n.getBooleanValue(); },
        "dataBackupBlocked": n => { managedAppProtection.dataBackupBlocked = n.getBooleanValue(); },
        "deviceComplianceRequired": n => { managedAppProtection.deviceComplianceRequired = n.getBooleanValue(); },
        "disableAppPinIfDevicePinIsSet": n => { managedAppProtection.disableAppPinIfDevicePinIsSet = n.getBooleanValue(); },
        "fingerprintBlocked": n => { managedAppProtection.fingerprintBlocked = n.getBooleanValue(); },
        "managedBrowser": n => { managedAppProtection.managedBrowser = n.getCollectionOfEnumValues<ManagedBrowserType>(ManagedBrowserType); },
        "managedBrowserToOpenLinksRequired": n => { managedAppProtection.managedBrowserToOpenLinksRequired = n.getBooleanValue(); },
        "maximumPinRetries": n => { managedAppProtection.maximumPinRetries = n.getNumberValue(); },
        "minimumPinLength": n => { managedAppProtection.minimumPinLength = n.getNumberValue(); },
        "minimumRequiredAppVersion": n => { managedAppProtection.minimumRequiredAppVersion = n.getStringValue(); },
        "minimumRequiredOsVersion": n => { managedAppProtection.minimumRequiredOsVersion = n.getStringValue(); },
        "minimumWarningAppVersion": n => { managedAppProtection.minimumWarningAppVersion = n.getStringValue(); },
        "minimumWarningOsVersion": n => { managedAppProtection.minimumWarningOsVersion = n.getStringValue(); },
        "organizationalCredentialsRequired": n => { managedAppProtection.organizationalCredentialsRequired = n.getBooleanValue(); },
        "periodBeforePinReset": n => { managedAppProtection.periodBeforePinReset = n.getDurationValue(); },
        "periodOfflineBeforeAccessCheck": n => { managedAppProtection.periodOfflineBeforeAccessCheck = n.getDurationValue(); },
        "periodOfflineBeforeWipeIsEnforced": n => { managedAppProtection.periodOfflineBeforeWipeIsEnforced = n.getDurationValue(); },
        "periodOnlineBeforeAccessCheck": n => { managedAppProtection.periodOnlineBeforeAccessCheck = n.getDurationValue(); },
        "pinCharacterSet": n => { managedAppProtection.pinCharacterSet = n.getEnumValue<ManagedAppPinCharacterSet>(ManagedAppPinCharacterSet); },
        "pinRequired": n => { managedAppProtection.pinRequired = n.getBooleanValue(); },
        "printBlocked": n => { managedAppProtection.printBlocked = n.getBooleanValue(); },
        "saveAsBlocked": n => { managedAppProtection.saveAsBlocked = n.getBooleanValue(); },
        "simplePinBlocked": n => { managedAppProtection.simplePinBlocked = n.getBooleanValue(); },
    }
}
export interface ManagedAppProtection extends ManagedAppPolicy, Parsable {
    /**
     * Data storage locations where a user may store managed data.
     */
    allowedDataStorageLocations?: ManagedAppDataStorageLocation[];
    /**
     * Data can be transferred from/to these classes of apps
     */
    allowedInboundDataTransferSources?: ManagedAppDataTransferLevel;
    /**
     * Represents the level to which the device's clipboard may be shared between apps
     */
    allowedOutboundClipboardSharingLevel?: ManagedAppClipboardSharingLevel;
    /**
     * Data can be transferred from/to these classes of apps
     */
    allowedOutboundDataTransferDestinations?: ManagedAppDataTransferLevel;
    /**
     * Indicates whether contacts can be synced to the user's device.
     */
    contactSyncBlocked?: boolean;
    /**
     * Indicates whether the backup of a managed app's data is blocked.
     */
    dataBackupBlocked?: boolean;
    /**
     * Indicates whether device compliance is required.
     */
    deviceComplianceRequired?: boolean;
    /**
     * Indicates whether use of the app pin is required if the device pin is set.
     */
    disableAppPinIfDevicePinIsSet?: boolean;
    /**
     * Indicates whether use of the fingerprint reader is allowed in place of a pin if PinRequired is set to True.
     */
    fingerprintBlocked?: boolean;
    /**
     * Type of managed browser
     */
    managedBrowser?: ManagedBrowserType[];
    /**
     * Indicates whether internet links should be opened in the managed browser app, or any custom browser specified by CustomBrowserProtocol (for iOS) or CustomBrowserPackageId/CustomBrowserDisplayName (for Android)
     */
    managedBrowserToOpenLinksRequired?: boolean;
    /**
     * Maximum number of incorrect pin retry attempts before the managed app is either blocked or wiped.
     */
    maximumPinRetries?: number;
    /**
     * Minimum pin length required for an app-level pin if PinRequired is set to True
     */
    minimumPinLength?: number;
    /**
     * Versions less than the specified version will block the managed app from accessing company data.
     */
    minimumRequiredAppVersion?: string;
    /**
     * Versions less than the specified version will block the managed app from accessing company data.
     */
    minimumRequiredOsVersion?: string;
    /**
     * Versions less than the specified version will result in warning message on the managed app.
     */
    minimumWarningAppVersion?: string;
    /**
     * Versions less than the specified version will result in warning message on the managed app from accessing company data.
     */
    minimumWarningOsVersion?: string;
    /**
     * Indicates whether organizational credentials are required for app use.
     */
    organizationalCredentialsRequired?: boolean;
    /**
     * TimePeriod before the all-level pin must be reset if PinRequired is set to True.
     */
    periodBeforePinReset?: Duration;
    /**
     * The period after which access is checked when the device is not connected to the internet.
     */
    periodOfflineBeforeAccessCheck?: Duration;
    /**
     * The amount of time an app is allowed to remain disconnected from the internet before all managed data it is wiped.
     */
    periodOfflineBeforeWipeIsEnforced?: Duration;
    /**
     * The period after which access is checked when the device is connected to the internet.
     */
    periodOnlineBeforeAccessCheck?: Duration;
    /**
     * Character set which is to be used for a user's app PIN
     */
    pinCharacterSet?: ManagedAppPinCharacterSet;
    /**
     * Indicates whether an app-level pin is required.
     */
    pinRequired?: boolean;
    /**
     * Indicates whether printing is allowed from managed apps.
     */
    printBlocked?: boolean;
    /**
     * Indicates whether users may use the 'Save As' menu item to save a copy of protected files.
     */
    saveAsBlocked?: boolean;
    /**
     * Indicates whether simplePin is blocked.
     */
    simplePinBlocked?: boolean;
}
export function serializeManagedAppProtection(writer: SerializationWriter, managedAppProtection: ManagedAppProtection | undefined = {} as ManagedAppProtection) : void {
        serializeManagedAppPolicy(writer, managedAppProtection)
        if(managedAppProtection.allowedDataStorageLocations)
        writer.writeEnumValue<ManagedAppDataStorageLocation>("allowedDataStorageLocations", ...managedAppProtection.allowedDataStorageLocations);
        writer.writeEnumValue<ManagedAppDataTransferLevel>("allowedInboundDataTransferSources", managedAppProtection.allowedInboundDataTransferSources);
        writer.writeEnumValue<ManagedAppClipboardSharingLevel>("allowedOutboundClipboardSharingLevel", managedAppProtection.allowedOutboundClipboardSharingLevel);
        writer.writeEnumValue<ManagedAppDataTransferLevel>("allowedOutboundDataTransferDestinations", managedAppProtection.allowedOutboundDataTransferDestinations);
        writer.writeBooleanValue("contactSyncBlocked", managedAppProtection.contactSyncBlocked);
        writer.writeBooleanValue("dataBackupBlocked", managedAppProtection.dataBackupBlocked);
        writer.writeBooleanValue("deviceComplianceRequired", managedAppProtection.deviceComplianceRequired);
        writer.writeBooleanValue("disableAppPinIfDevicePinIsSet", managedAppProtection.disableAppPinIfDevicePinIsSet);
        writer.writeBooleanValue("fingerprintBlocked", managedAppProtection.fingerprintBlocked);
        writer.writeEnumValue<ManagedBrowserType[]>("managedBrowser", managedAppProtection.managedBrowser);
        writer.writeBooleanValue("managedBrowserToOpenLinksRequired", managedAppProtection.managedBrowserToOpenLinksRequired);
        writer.writeNumberValue("maximumPinRetries", managedAppProtection.maximumPinRetries);
        writer.writeNumberValue("minimumPinLength", managedAppProtection.minimumPinLength);
        writer.writeStringValue("minimumRequiredAppVersion", managedAppProtection.minimumRequiredAppVersion);
        writer.writeStringValue("minimumRequiredOsVersion", managedAppProtection.minimumRequiredOsVersion);
        writer.writeStringValue("minimumWarningAppVersion", managedAppProtection.minimumWarningAppVersion);
        writer.writeStringValue("minimumWarningOsVersion", managedAppProtection.minimumWarningOsVersion);
        writer.writeBooleanValue("organizationalCredentialsRequired", managedAppProtection.organizationalCredentialsRequired);
        writer.writeDurationValue("periodBeforePinReset", managedAppProtection.periodBeforePinReset);
        writer.writeDurationValue("periodOfflineBeforeAccessCheck", managedAppProtection.periodOfflineBeforeAccessCheck);
        writer.writeDurationValue("periodOfflineBeforeWipeIsEnforced", managedAppProtection.periodOfflineBeforeWipeIsEnforced);
        writer.writeDurationValue("periodOnlineBeforeAccessCheck", managedAppProtection.periodOnlineBeforeAccessCheck);
        writer.writeEnumValue<ManagedAppPinCharacterSet>("pinCharacterSet", managedAppProtection.pinCharacterSet);
        writer.writeBooleanValue("pinRequired", managedAppProtection.pinRequired);
        writer.writeBooleanValue("printBlocked", managedAppProtection.printBlocked);
        writer.writeBooleanValue("saveAsBlocked", managedAppProtection.saveAsBlocked);
        writer.writeBooleanValue("simplePinBlocked", managedAppProtection.simplePinBlocked);
}
// tslint:enable
// eslint-enable
