import { type IntegerRange } from './integerRange';
import { PrintColorMode } from './printColorMode';
import { PrintDuplexMode } from './printDuplexMode';
import { type PrinterCapabilities } from './printerCapabilities';
import { PrinterFeedOrientation } from './printerFeedOrientation';
import { PrintFinishing } from './printFinishing';
import { PrintMultipageLayout } from './printMultipageLayout';
import { PrintOrientation } from './printOrientation';
import { PrintQuality } from './printQuality';
import { PrintScaling } from './printScaling';
import { serializeIntegerRange } from './serializeIntegerRange';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function serializePrinterCapabilities(writer: SerializationWriter, printerCapabilities: PrinterCapabilities | undefined = {} as PrinterCapabilities) : void {
        writer.writeCollectionOfPrimitiveValues<number>("bottomMargins", printerCapabilities.bottomMargins);
        writer.writeBooleanValue("collation", printerCapabilities.collation);
        writer.writeCollectionOfObjectValues<PrintColorMode>("colorModes", printerCapabilities.colorModes, object);
        writer.writeCollectionOfPrimitiveValues<string>("contentTypes", printerCapabilities.contentTypes);
        writer.writeObjectValue<IntegerRange>("copiesPerJob", printerCapabilities.copiesPerJob, serializeIntegerRange);
        writer.writeCollectionOfPrimitiveValues<number>("dpis", printerCapabilities.dpis);
        writer.writeCollectionOfObjectValues<PrintDuplexMode>("duplexModes", printerCapabilities.duplexModes, object);
        writer.writeCollectionOfObjectValues<PrinterFeedOrientation>("feedOrientations", printerCapabilities.feedOrientations, object);
        writer.writeCollectionOfObjectValues<PrintFinishing>("finishings", printerCapabilities.finishings, object);
        writer.writeCollectionOfPrimitiveValues<string>("inputBins", printerCapabilities.inputBins);
        writer.writeBooleanValue("isColorPrintingSupported", printerCapabilities.isColorPrintingSupported);
        writer.writeBooleanValue("isPageRangeSupported", printerCapabilities.isPageRangeSupported);
        writer.writeCollectionOfPrimitiveValues<number>("leftMargins", printerCapabilities.leftMargins);
        writer.writeCollectionOfPrimitiveValues<string>("mediaColors", printerCapabilities.mediaColors);
        writer.writeCollectionOfPrimitiveValues<string>("mediaSizes", printerCapabilities.mediaSizes);
        writer.writeCollectionOfPrimitiveValues<string>("mediaTypes", printerCapabilities.mediaTypes);
        writer.writeCollectionOfObjectValues<PrintMultipageLayout>("multipageLayouts", printerCapabilities.multipageLayouts, object);
        writer.writeStringValue("@odata.type", printerCapabilities.odataType);
        writer.writeCollectionOfObjectValues<PrintOrientation>("orientations", printerCapabilities.orientations, object);
        writer.writeCollectionOfPrimitiveValues<string>("outputBins", printerCapabilities.outputBins);
        writer.writeCollectionOfPrimitiveValues<number>("pagesPerSheet", printerCapabilities.pagesPerSheet);
        writer.writeCollectionOfObjectValues<PrintQuality>("qualities", printerCapabilities.qualities, object);
        writer.writeCollectionOfPrimitiveValues<number>("rightMargins", printerCapabilities.rightMargins);
        writer.writeCollectionOfObjectValues<PrintScaling>("scalings", printerCapabilities.scalings, object);
        writer.writeBooleanValue("supportsFitPdfToPage", printerCapabilities.supportsFitPdfToPage);
        writer.writeCollectionOfPrimitiveValues<number>("topMargins", printerCapabilities.topMargins);
        writer.writeAdditionalData(printerCapabilities.additionalData);
}
