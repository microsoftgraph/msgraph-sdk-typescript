// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoIdentity, serializeIdentity, type Identity } from './identity';
import { TeamworkUserIdentityType } from './teamworkUserIdentityType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTeamworkUserIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTeamworkUserIdentity;
}
export function deserializeIntoTeamworkUserIdentity(teamworkUserIdentity: TeamworkUserIdentity | undefined = {} as TeamworkUserIdentity) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentity(teamworkUserIdentity),
        "userIdentityType": n => { teamworkUserIdentity.userIdentityType = n.getEnumValue<TeamworkUserIdentityType>(TeamworkUserIdentityType); },
    }
}
export function serializeTeamworkUserIdentity(writer: SerializationWriter, teamworkUserIdentity: TeamworkUserIdentity | undefined = {} as TeamworkUserIdentity) : void {
    serializeIdentity(writer, teamworkUserIdentity)
    writer.writeEnumValue<TeamworkUserIdentityType>("userIdentityType", teamworkUserIdentity.userIdentityType);
}
export interface TeamworkUserIdentity extends Identity, Parsable {
    /**
     * Type of user. Possible values are: aadUser, onPremiseAadUser, anonymousGuest, federatedUser, personalMicrosoftAccountUser, skypeUser, phoneUser, unknownFutureValue and emailUser.
     */
    userIdentityType?: TeamworkUserIdentityType;
}
// tslint:enable
// eslint-enable
