// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCertificateAuthorityFromDiscriminatorValue, serializeCertificateAuthority, type CertificateAuthority } from './certificateAuthority';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CertificateBasedAuthConfiguration extends Entity, Parsable {
    /**
     * Collection of certificate authorities which creates a trusted certificate chain.
     */
    certificateAuthorities?: CertificateAuthority[];
}
export function createCertificateBasedAuthConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCertificateBasedAuthConfiguration;
}
export function deserializeIntoCertificateBasedAuthConfiguration(certificateBasedAuthConfiguration: CertificateBasedAuthConfiguration | undefined = {} as CertificateBasedAuthConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(certificateBasedAuthConfiguration),
        "certificateAuthorities": n => { certificateBasedAuthConfiguration.certificateAuthorities = n.getCollectionOfObjectValues<CertificateAuthority>(createCertificateAuthorityFromDiscriminatorValue); },
    }
}
export function serializeCertificateBasedAuthConfiguration(writer: SerializationWriter, certificateBasedAuthConfiguration: CertificateBasedAuthConfiguration | undefined = {} as CertificateBasedAuthConfiguration) : void {
        serializeEntity(writer, certificateBasedAuthConfiguration)
        writer.writeCollectionOfObjectValues<CertificateAuthority>("certificateAuthorities", certificateBasedAuthConfiguration.certificateAuthorities, );
}
// tslint:enable
// eslint-enable
