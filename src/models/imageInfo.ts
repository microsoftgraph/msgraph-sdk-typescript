// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createImageInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoImageInfo;
}
export function deserializeIntoImageInfo(imageInfo: ImageInfo | undefined = {} as ImageInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "addImageQuery": n => { imageInfo.addImageQuery = n.getBooleanValue(); },
        "alternateText": n => { imageInfo.alternateText = n.getStringValue(); },
        "alternativeText": n => { imageInfo.alternativeText = n.getStringValue(); },
        "iconUrl": n => { imageInfo.iconUrl = n.getStringValue(); },
        "@odata.type": n => { imageInfo.odataType = n.getStringValue(); },
    }
}
export interface ImageInfo extends AdditionalDataHolder, Parsable {
    /**
     * Optional; parameter used to indicate the server is able to render image dynamically in response to parameterization. For example â€“ a high contrast image
     */
    addImageQuery?: boolean;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Optional; alt-text accessible content for the image
     */
    alternateText?: string;
    /**
     * The alternativeText property
     */
    alternativeText?: string;
    /**
     * Optional; URI that points to an icon which represents the application used to generate the activity
     */
    iconUrl?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeImageInfo(writer: SerializationWriter, imageInfo: ImageInfo | undefined = {} as ImageInfo) : void {
        writer.writeBooleanValue("addImageQuery", imageInfo.addImageQuery);
        writer.writeStringValue("alternateText", imageInfo.alternateText);
        writer.writeStringValue("alternativeText", imageInfo.alternativeText);
        writer.writeStringValue("iconUrl", imageInfo.iconUrl);
        writer.writeStringValue("@odata.type", imageInfo.odataType);
        writer.writeAdditionalData(imageInfo.additionalData);
}
// tslint:enable
// eslint-enable
