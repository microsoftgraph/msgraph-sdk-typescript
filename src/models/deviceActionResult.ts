// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ActionState } from './actionState';
import { deserializeIntoDeleteUserFromSharedAppleDeviceActionResult } from './deleteUserFromSharedAppleDeviceActionResult';
import { type DeleteUserFromSharedAppleDeviceActionResult, type LocateDeviceActionResult, type RemoteLockActionResult, type ResetPasscodeActionResult, type RotateBitLockerKeysDeviceActionResult, type WindowsDefenderScanActionResult } from './index';
import { deserializeIntoLocateDeviceActionResult } from './locateDeviceActionResult';
import { deserializeIntoRemoteLockActionResult } from './remoteLockActionResult';
import { deserializeIntoResetPasscodeActionResult } from './resetPasscodeActionResult';
import { deserializeIntoRotateBitLockerKeysDeviceActionResult } from './rotateBitLockerKeysDeviceActionResult';
import { deserializeIntoWindowsDefenderScanActionResult } from './windowsDefenderScanActionResult';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceActionResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.deleteUserFromSharedAppleDeviceActionResult":
                    return deserializeIntoDeleteUserFromSharedAppleDeviceActionResult;
                case "#microsoft.graph.locateDeviceActionResult":
                    return deserializeIntoLocateDeviceActionResult;
                case "#microsoft.graph.remoteLockActionResult":
                    return deserializeIntoRemoteLockActionResult;
                case "#microsoft.graph.resetPasscodeActionResult":
                    return deserializeIntoResetPasscodeActionResult;
                case "#microsoft.graph.rotateBitLockerKeysDeviceActionResult":
                    return deserializeIntoRotateBitLockerKeysDeviceActionResult;
                case "#microsoft.graph.windowsDefenderScanActionResult":
                    return deserializeIntoWindowsDefenderScanActionResult;
            }
        }
    }
    return deserializeIntoDeviceActionResult;
}
export function deserializeIntoDeviceActionResult(deviceActionResult: DeviceActionResult | undefined = {} as DeviceActionResult) : Record<string, (node: ParseNode) => void> {
    return {
        "actionName": n => { deviceActionResult.actionName = n.getStringValue(); },
        "actionState": n => { deviceActionResult.actionState = n.getEnumValue<ActionState>(ActionState); },
        "lastUpdatedDateTime": n => { deviceActionResult.lastUpdatedDateTime = n.getDateValue(); },
        "@odata.type": n => { deviceActionResult.odataType = n.getStringValue(); },
        "startDateTime": n => { deviceActionResult.startDateTime = n.getDateValue(); },
    }
}
export interface DeviceActionResult extends AdditionalDataHolder, Parsable {
    /**
     * Action name
     */
    actionName?: string;
    /**
     * State of the action on the device
     */
    actionState?: ActionState;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Time the action state was last updated
     */
    lastUpdatedDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Time the action was initiated
     */
    startDateTime?: Date;
}
export function serializeDeviceActionResult(writer: SerializationWriter, deviceActionResult: DeviceActionResult | undefined = {} as DeviceActionResult) : void {
        writer.writeStringValue("actionName", deviceActionResult.actionName);
        writer.writeEnumValue<ActionState>("actionState", deviceActionResult.actionState);
        writer.writeDateValue("lastUpdatedDateTime", deviceActionResult.lastUpdatedDateTime);
        writer.writeStringValue("@odata.type", deviceActionResult.odataType);
        writer.writeDateValue("startDateTime", deviceActionResult.startDateTime);
        writer.writeAdditionalData(deviceActionResult.additionalData);
}
// tslint:enable
// eslint-enable
