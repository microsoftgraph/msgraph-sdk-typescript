// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDrive } from './drive';
import { deserializeIntoDriveItem } from './driveItem';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Drive, type DriveItem, type List, type ListItem, type SharedDriveItem, type Site } from './index';
import { createItemReferenceFromDiscriminatorValue, serializeItemReference, type ItemReference } from './itemReference';
import { deserializeIntoList } from './list';
import { deserializeIntoListItem } from './listItem';
import { deserializeIntoSharedDriveItem } from './sharedDriveItem';
import { deserializeIntoSite } from './site';
import { createUserFromDiscriminatorValue, serializeUser, type User } from './user';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BaseItem extends Entity, Parsable {
    /**
     * Identity of the user, device, or application that created the item. Read-only.
     */
    createdBy?: IdentitySet;
    /**
     * Identity of the user who created the item. Read-only.
     */
    createdByUser?: User;
    /**
     * Date and time of item creation. Read-only.
     */
    createdDateTime?: Date;
    /**
     * Provides a user-visible description of the item. Optional.
     */
    description?: string;
    /**
     * ETag for the item. Read-only.
     */
    eTag?: string;
    /**
     * Identity of the user, device, and application that last modified the item. Read-only.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * Identity of the user who last modified the item. Read-only.
     */
    lastModifiedByUser?: User;
    /**
     * Date and time the item was last modified. Read-only.
     */
    lastModifiedDateTime?: Date;
    /**
     * The name of the item. Read-write.
     */
    name?: string;
    /**
     * Parent information, if the item has a parent. Read-write.
     */
    parentReference?: ItemReference;
    /**
     * URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only.
     */
    webUrl?: string;
}
export function createBaseItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.drive":
                    return deserializeIntoDrive;
                case "#microsoft.graph.driveItem":
                    return deserializeIntoDriveItem;
                case "#microsoft.graph.list":
                    return deserializeIntoList;
                case "#microsoft.graph.listItem":
                    return deserializeIntoListItem;
                case "#microsoft.graph.sharedDriveItem":
                    return deserializeIntoSharedDriveItem;
                case "#microsoft.graph.site":
                    return deserializeIntoSite;
            }
        }
    }
    return deserializeIntoBaseItem;
}
export function deserializeIntoBaseItem(baseItem: BaseItem | undefined = {} as BaseItem) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(baseItem),
        "createdBy": n => { baseItem.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdByUser": n => { baseItem.createdByUser = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "createdDateTime": n => { baseItem.createdDateTime = n.getDateValue(); },
        "description": n => { baseItem.description = n.getStringValue(); },
        "eTag": n => { baseItem.eTag = n.getStringValue(); },
        "lastModifiedBy": n => { baseItem.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedByUser": n => { baseItem.lastModifiedByUser = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { baseItem.lastModifiedDateTime = n.getDateValue(); },
        "name": n => { baseItem.name = n.getStringValue(); },
        "parentReference": n => { baseItem.parentReference = n.getObjectValue<ItemReference>(createItemReferenceFromDiscriminatorValue); },
        "webUrl": n => { baseItem.webUrl = n.getStringValue(); },
    }
}
export function serializeBaseItem(writer: SerializationWriter, baseItem: BaseItem | undefined = {} as BaseItem) : void {
    serializeEntity(writer, baseItem)
    writer.writeObjectValue<IdentitySet>("createdBy", baseItem.createdBy, serializeIdentitySet);
    writer.writeObjectValue<User>("createdByUser", baseItem.createdByUser, serializeUser);
    writer.writeDateValue("createdDateTime", baseItem.createdDateTime);
    writer.writeStringValue("description", baseItem.description);
    writer.writeStringValue("eTag", baseItem.eTag);
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", baseItem.lastModifiedBy, serializeIdentitySet);
    writer.writeObjectValue<User>("lastModifiedByUser", baseItem.lastModifiedByUser, serializeUser);
    writer.writeDateValue("lastModifiedDateTime", baseItem.lastModifiedDateTime);
    writer.writeStringValue("name", baseItem.name);
    writer.writeObjectValue<ItemReference>("parentReference", baseItem.parentReference, serializeItemReference);
    writer.writeStringValue("webUrl", baseItem.webUrl);
}
// tslint:enable
// eslint-enable
