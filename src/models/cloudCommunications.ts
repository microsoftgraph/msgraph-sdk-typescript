// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCallFromDiscriminatorValue, serializeCall, type Call } from './call';
import { createCallRecordFromDiscriminatorValue, serializeCallRecord, type CallRecord } from './callRecords/callRecord';
import { createOnlineMeetingFromDiscriminatorValue, serializeOnlineMeeting, type OnlineMeeting } from './onlineMeeting';
import { createPresenceFromDiscriminatorValue, serializePresence, type Presence } from './presence';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CloudCommunications extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The callRecords property
     */
    callRecords?: CallRecord[];
    /**
     * The calls property
     */
    calls?: Call[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The onlineMeetings property
     */
    onlineMeetings?: OnlineMeeting[];
    /**
     * The presences property
     */
    presences?: Presence[];
}
export function createCloudCommunicationsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCloudCommunications;
}
export function deserializeIntoCloudCommunications(cloudCommunications: CloudCommunications | undefined = {} as CloudCommunications) : Record<string, (node: ParseNode) => void> {
    return {
        "callRecords": n => { cloudCommunications.callRecords = n.getCollectionOfObjectValues<CallRecord>(createCallRecordFromDiscriminatorValue); },
        "calls": n => { cloudCommunications.calls = n.getCollectionOfObjectValues<Call>(createCallFromDiscriminatorValue); },
        "@odata.type": n => { cloudCommunications.odataType = n.getStringValue(); },
        "onlineMeetings": n => { cloudCommunications.onlineMeetings = n.getCollectionOfObjectValues<OnlineMeeting>(createOnlineMeetingFromDiscriminatorValue); },
        "presences": n => { cloudCommunications.presences = n.getCollectionOfObjectValues<Presence>(createPresenceFromDiscriminatorValue); },
    }
}
export function serializeCloudCommunications(writer: SerializationWriter, cloudCommunications: CloudCommunications | undefined = {} as CloudCommunications) : void {
    writer.writeCollectionOfObjectValues<CallRecord>("callRecords", cloudCommunications.callRecords, serializeCallRecord);
    writer.writeCollectionOfObjectValues<Call>("calls", cloudCommunications.calls, serializeCall);
    writer.writeStringValue("@odata.type", cloudCommunications.odataType);
    writer.writeCollectionOfObjectValues<OnlineMeeting>("onlineMeetings", cloudCommunications.onlineMeetings, serializeOnlineMeeting);
    writer.writeCollectionOfObjectValues<Presence>("presences", cloudCommunications.presences, serializePresence);
    writer.writeAdditionalData(cloudCommunications.additionalData);
}
// tslint:enable
// eslint-enable
