// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ChoiceColumn extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * If true, allows custom values that aren't in the configured choices.
     */
    allowTextEntry?: boolean;
    /**
     * The list of values available for this column.
     */
    choices?: string[];
    /**
     * How the choices are to be presented in the UX. Must be one of checkBoxes, dropDownMenu, or radioButtons
     */
    displayAs?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createChoiceColumnFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoChoiceColumn;
}
export function deserializeIntoChoiceColumn(choiceColumn: ChoiceColumn | undefined = {} as ChoiceColumn) : Record<string, (node: ParseNode) => void> {
    return {
        "allowTextEntry": n => { choiceColumn.allowTextEntry = n.getBooleanValue(); },
        "choices": n => { choiceColumn.choices = n.getCollectionOfPrimitiveValues<string>(); },
        "displayAs": n => { choiceColumn.displayAs = n.getStringValue(); },
        "@odata.type": n => { choiceColumn.odataType = n.getStringValue(); },
    }
}
export function serializeChoiceColumn(writer: SerializationWriter, choiceColumn: ChoiceColumn | undefined = {} as ChoiceColumn) : void {
    writer.writeBooleanValue("allowTextEntry", choiceColumn.allowTextEntry);
    writer.writeCollectionOfPrimitiveValues<string>("choices", choiceColumn.choices);
    writer.writeStringValue("displayAs", choiceColumn.displayAs);
    writer.writeStringValue("@odata.type", choiceColumn.odataType);
    writer.writeAdditionalData(choiceColumn.additionalData);
}
// tslint:enable
// eslint-enable
