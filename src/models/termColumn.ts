// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createSetFromDiscriminatorValue, serializeSet, type Set } from './termStore/set';
import { createTermFromDiscriminatorValue, serializeTerm, type Term } from './termStore/term';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTermColumnFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTermColumn;
}
export function deserializeIntoTermColumn(termColumn: TermColumn | undefined = {} as TermColumn) : Record<string, (node: ParseNode) => void> {
    return {
        "allowMultipleValues": n => { termColumn.allowMultipleValues = n.getBooleanValue(); },
        "@odata.type": n => { termColumn.odataType = n.getStringValue(); },
        "parentTerm": n => { termColumn.parentTerm = n.getObjectValue<Term>(createTermFromDiscriminatorValue); },
        "showFullyQualifiedName": n => { termColumn.showFullyQualifiedName = n.getBooleanValue(); },
        "termSet": n => { termColumn.termSet = n.getObjectValue<Set>(createSetFromDiscriminatorValue); },
    }
}
export function serializeTermColumn(writer: SerializationWriter, termColumn: TermColumn | undefined = {} as TermColumn) : void {
    writer.writeBooleanValue("allowMultipleValues", termColumn.allowMultipleValues);
    writer.writeStringValue("@odata.type", termColumn.odataType);
    writer.writeObjectValue<Term>("parentTerm", termColumn.parentTerm, serializeTerm);
    writer.writeBooleanValue("showFullyQualifiedName", termColumn.showFullyQualifiedName);
    writer.writeObjectValue<Set>("termSet", termColumn.termSet, serializeSet);
    writer.writeAdditionalData(termColumn.additionalData);
}
export interface TermColumn extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies whether the column allows more than one value.
     */
    allowMultipleValues?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The parentTerm property
     */
    parentTerm?: Term;
    /**
     * Specifies whether to display the entire term path or only the term label.
     */
    showFullyQualifiedName?: boolean;
    /**
     * The termSet property
     */
    termSet?: Set;
}
// tslint:enable
// eslint-enable
