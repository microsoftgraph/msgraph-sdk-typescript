// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createBookingBusinessFromDiscriminatorValue, serializeBookingBusiness, type BookingBusiness } from './bookingBusiness';
import { createBookingCurrencyFromDiscriminatorValue, serializeBookingCurrency, type BookingCurrency } from './bookingCurrency';
import { createVirtualEventsRootFromDiscriminatorValue, serializeVirtualEventsRoot, type VirtualEventsRoot } from './virtualEventsRoot';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSolutionsRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSolutionsRoot;
}
export function deserializeIntoSolutionsRoot(solutionsRoot: SolutionsRoot | undefined = {} as SolutionsRoot) : Record<string, (node: ParseNode) => void> {
    return {
        "bookingBusinesses": n => { solutionsRoot.bookingBusinesses = n.getCollectionOfObjectValues<BookingBusiness>(createBookingBusinessFromDiscriminatorValue); },
        "bookingCurrencies": n => { solutionsRoot.bookingCurrencies = n.getCollectionOfObjectValues<BookingCurrency>(createBookingCurrencyFromDiscriminatorValue); },
        "@odata.type": n => { solutionsRoot.odataType = n.getStringValue(); },
        "virtualEvents": n => { solutionsRoot.virtualEvents = n.getObjectValue<VirtualEventsRoot>(createVirtualEventsRootFromDiscriminatorValue); },
    }
}
export function serializeSolutionsRoot(writer: SerializationWriter, solutionsRoot: SolutionsRoot | undefined = {} as SolutionsRoot) : void {
        writer.writeCollectionOfObjectValues<BookingBusiness>("bookingBusinesses", solutionsRoot.bookingBusinesses, serializeBookingBusiness);
        writer.writeCollectionOfObjectValues<BookingCurrency>("bookingCurrencies", solutionsRoot.bookingCurrencies, serializeBookingCurrency);
        writer.writeStringValue("@odata.type", solutionsRoot.odataType);
        writer.writeObjectValue<VirtualEventsRoot>("virtualEvents", solutionsRoot.virtualEvents, serializeVirtualEventsRoot);
        writer.writeAdditionalData(solutionsRoot.additionalData);
}
export interface SolutionsRoot extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The bookingBusinesses property
     */
    bookingBusinesses?: BookingBusiness[];
    /**
     * The bookingCurrencies property
     */
    bookingCurrencies?: BookingCurrency[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The virtualEvents property
     */
    virtualEvents?: VirtualEventsRoot;
}
// tslint:enable
// eslint-enable
