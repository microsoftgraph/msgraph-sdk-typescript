// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ChannelIdentity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The identity of the channel in which the message was posted.
     */
    channelId?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The identity of the team in which the message was posted.
     */
    teamId?: string;
}
export function createChannelIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoChannelIdentity;
}
export function deserializeIntoChannelIdentity(channelIdentity: ChannelIdentity | undefined = {} as ChannelIdentity) : Record<string, (node: ParseNode) => void> {
    return {
        "channelId": n => { channelIdentity.channelId = n.getStringValue(); },
        "@odata.type": n => { channelIdentity.odataType = n.getStringValue(); },
        "teamId": n => { channelIdentity.teamId = n.getStringValue(); },
    }
}
export function serializeChannelIdentity(writer: SerializationWriter, channelIdentity: ChannelIdentity | undefined = {} as ChannelIdentity) : void {
    writer.writeStringValue("channelId", channelIdentity.channelId);
    writer.writeStringValue("@odata.type", channelIdentity.odataType);
    writer.writeStringValue("teamId", channelIdentity.teamId);
    writer.writeAdditionalData(channelIdentity.additionalData);
}
// tslint:enable
// eslint-enable
