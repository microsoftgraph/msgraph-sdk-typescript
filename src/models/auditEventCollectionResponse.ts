// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAuditEventFromDiscriminatorValue, serializeAuditEvent, type AuditEvent } from './auditEvent';
import { deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, type BaseCollectionPaginationCountResponse } from './baseCollectionPaginationCountResponse';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuditEventCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: AuditEvent[];
}
export function createAuditEventCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuditEventCollectionResponse;
}
export function deserializeIntoAuditEventCollectionResponse(auditEventCollectionResponse: AuditEventCollectionResponse | undefined = {} as AuditEventCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(auditEventCollectionResponse),
        "value": n => { auditEventCollectionResponse.value = n.getCollectionOfObjectValues<AuditEvent>(createAuditEventFromDiscriminatorValue); },
    }
}
export function serializeAuditEventCollectionResponse(writer: SerializationWriter, auditEventCollectionResponse: AuditEventCollectionResponse | undefined = {} as AuditEventCollectionResponse) : void {
        serializeBaseCollectionPaginationCountResponse(writer, auditEventCollectionResponse)
        writer.writeCollectionOfObjectValues<AuditEvent>("value", auditEventCollectionResponse.value, serializeAuditEvent);
}
// tslint:enable
// eslint-enable
