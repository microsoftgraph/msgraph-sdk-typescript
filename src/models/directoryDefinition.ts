// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DirectoryDefinitionDiscoverabilities } from './directoryDefinitionDiscoverabilities';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createObjectDefinitionFromDiscriminatorValue, serializeObjectDefinition, type ObjectDefinition } from './objectDefinition';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDirectoryDefinitionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDirectoryDefinition;
}
export function deserializeIntoDirectoryDefinition(directoryDefinition: DirectoryDefinition | undefined = {} as DirectoryDefinition) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(directoryDefinition),
        "discoverabilities": n => { directoryDefinition.discoverabilities = n.getCollectionOfEnumValues<DirectoryDefinitionDiscoverabilities>(DirectoryDefinitionDiscoverabilities); },
        "discoveryDateTime": n => { directoryDefinition.discoveryDateTime = n.getDateValue(); },
        "name": n => { directoryDefinition.name = n.getStringValue(); },
        "objects": n => { directoryDefinition.objects = n.getCollectionOfObjectValues<ObjectDefinition>(createObjectDefinitionFromDiscriminatorValue); },
        "readOnly": n => { directoryDefinition.readOnly = n.getBooleanValue(); },
        "version": n => { directoryDefinition.version = n.getStringValue(); },
    }
}
export interface DirectoryDefinition extends Entity, Parsable {
    /**
     * The discoverabilities property
     */
    discoverabilities?: DirectoryDefinitionDiscoverabilities[];
    /**
     * Represents the discovery date and time using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    discoveryDateTime?: Date;
    /**
     * Name of the directory. Must be unique within the synchronization schema. Not nullable.
     */
    name?: string;
    /**
     * Collection of objects supported by the directory.
     */
    objects?: ObjectDefinition[];
    /**
     * Whether this object is read-only.
     */
    readOnly?: boolean;
    /**
     * Read only value that indicates version discovered. null if discovery hasn't yet occurred.
     */
    version?: string;
}
export function serializeDirectoryDefinition(writer: SerializationWriter, directoryDefinition: DirectoryDefinition | undefined = {} as DirectoryDefinition) : void {
    serializeEntity(writer, directoryDefinition)
    writer.writeEnumValue<DirectoryDefinitionDiscoverabilities[]>("discoverabilities", directoryDefinition.discoverabilities);
    writer.writeDateValue("discoveryDateTime", directoryDefinition.discoveryDateTime);
    writer.writeStringValue("name", directoryDefinition.name);
    writer.writeCollectionOfObjectValues<ObjectDefinition>("objects", directoryDefinition.objects, serializeObjectDefinition);
    writer.writeBooleanValue("readOnly", directoryDefinition.readOnly);
    writer.writeStringValue("version", directoryDefinition.version);
}
// tslint:enable
// eslint-enable
