// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createKeyValuePairFromDiscriminatorValue, serializeKeyValuePair, type KeyValuePair } from './keyValuePair';
import { ManagedAppDataEncryptionType } from './managedAppDataEncryptionType';
import { createManagedAppPolicyDeploymentSummaryFromDiscriminatorValue, serializeManagedAppPolicyDeploymentSummary, type ManagedAppPolicyDeploymentSummary } from './managedAppPolicyDeploymentSummary';
import { deserializeIntoManagedAppProtection, serializeManagedAppProtection, type ManagedAppProtection } from './managedAppProtection';
import { createManagedMobileAppFromDiscriminatorValue, serializeManagedMobileApp, type ManagedMobileApp } from './managedMobileApp';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDefaultManagedAppProtectionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDefaultManagedAppProtection;
}
export interface DefaultManagedAppProtection extends ManagedAppProtection, Parsable {
    /**
     * Represents the level to which app data is encrypted for managed apps
     */
    appDataEncryptionType?: ManagedAppDataEncryptionType;
    /**
     * List of apps to which the policy is deployed.
     */
    apps?: ManagedMobileApp[];
    /**
     * A set of string key and string value pairs to be sent to the affected users, unalterned by this service
     */
    customSettings?: KeyValuePair[];
    /**
     * Count of apps to which the current policy is deployed.
     */
    deployedAppCount?: number;
    /**
     * Navigation property to deployment summary of the configuration.
     */
    deploymentSummary?: ManagedAppPolicyDeploymentSummary;
    /**
     * When this setting is enabled, app level encryption is disabled if device level encryption is enabled. (Android only)
     */
    disableAppEncryptionIfDeviceEncryptionIsEnabled?: boolean;
    /**
     * Indicates whether managed-app data should be encrypted. (Android only)
     */
    encryptAppData?: boolean;
    /**
     * Indicates whether use of the FaceID is allowed in place of a pin if PinRequired is set to True. (iOS Only)
     */
    faceIdBlocked?: boolean;
    /**
     * Define the oldest required Android security patch level a user can have to gain secure access to the app. (Android only)
     */
    minimumRequiredPatchVersion?: string;
    /**
     * Versions less than the specified version will block the managed app from accessing company data. (iOS Only)
     */
    minimumRequiredSdkVersion?: string;
    /**
     * Define the oldest recommended Android security patch level a user can have for secure access to the app. (Android only)
     */
    minimumWarningPatchVersion?: string;
    /**
     * Indicates whether screen capture is blocked. (Android only)
     */
    screenCaptureBlocked?: boolean;
}
export function deserializeIntoDefaultManagedAppProtection(defaultManagedAppProtection: DefaultManagedAppProtection | undefined = {} as DefaultManagedAppProtection) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoManagedAppProtection(defaultManagedAppProtection),
        "appDataEncryptionType": n => { defaultManagedAppProtection.appDataEncryptionType = n.getEnumValue<ManagedAppDataEncryptionType>(ManagedAppDataEncryptionType); },
        "apps": n => { defaultManagedAppProtection.apps = n.getCollectionOfObjectValues<ManagedMobileApp>(createManagedMobileAppFromDiscriminatorValue); },
        "customSettings": n => { defaultManagedAppProtection.customSettings = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "deployedAppCount": n => { defaultManagedAppProtection.deployedAppCount = n.getNumberValue(); },
        "deploymentSummary": n => { defaultManagedAppProtection.deploymentSummary = n.getObjectValue<ManagedAppPolicyDeploymentSummary>(createManagedAppPolicyDeploymentSummaryFromDiscriminatorValue); },
        "disableAppEncryptionIfDeviceEncryptionIsEnabled": n => { defaultManagedAppProtection.disableAppEncryptionIfDeviceEncryptionIsEnabled = n.getBooleanValue(); },
        "encryptAppData": n => { defaultManagedAppProtection.encryptAppData = n.getBooleanValue(); },
        "faceIdBlocked": n => { defaultManagedAppProtection.faceIdBlocked = n.getBooleanValue(); },
        "minimumRequiredPatchVersion": n => { defaultManagedAppProtection.minimumRequiredPatchVersion = n.getStringValue(); },
        "minimumRequiredSdkVersion": n => { defaultManagedAppProtection.minimumRequiredSdkVersion = n.getStringValue(); },
        "minimumWarningPatchVersion": n => { defaultManagedAppProtection.minimumWarningPatchVersion = n.getStringValue(); },
        "screenCaptureBlocked": n => { defaultManagedAppProtection.screenCaptureBlocked = n.getBooleanValue(); },
    }
}
export function serializeDefaultManagedAppProtection(writer: SerializationWriter, defaultManagedAppProtection: DefaultManagedAppProtection | undefined = {} as DefaultManagedAppProtection) : void {
        serializeManagedAppProtection(writer, defaultManagedAppProtection)
        writer.writeEnumValue<ManagedAppDataEncryptionType>("appDataEncryptionType", defaultManagedAppProtection.appDataEncryptionType);
        writer.writeCollectionOfObjectValues<ManagedMobileApp>("apps", defaultManagedAppProtection.apps, serializeManagedMobileApp);
        writer.writeCollectionOfObjectValues<KeyValuePair>("customSettings", defaultManagedAppProtection.customSettings, serializeKeyValuePair);
        writer.writeNumberValue("deployedAppCount", defaultManagedAppProtection.deployedAppCount);
        writer.writeObjectValue<ManagedAppPolicyDeploymentSummary>("deploymentSummary", defaultManagedAppProtection.deploymentSummary, serializeManagedAppPolicyDeploymentSummary);
        writer.writeBooleanValue("disableAppEncryptionIfDeviceEncryptionIsEnabled", defaultManagedAppProtection.disableAppEncryptionIfDeviceEncryptionIsEnabled);
        writer.writeBooleanValue("encryptAppData", defaultManagedAppProtection.encryptAppData);
        writer.writeBooleanValue("faceIdBlocked", defaultManagedAppProtection.faceIdBlocked);
        writer.writeStringValue("minimumRequiredPatchVersion", defaultManagedAppProtection.minimumRequiredPatchVersion);
        writer.writeStringValue("minimumRequiredSdkVersion", defaultManagedAppProtection.minimumRequiredSdkVersion);
        writer.writeStringValue("minimumWarningPatchVersion", defaultManagedAppProtection.minimumWarningPatchVersion);
        writer.writeBooleanValue("screenCaptureBlocked", defaultManagedAppProtection.screenCaptureBlocked);
}
// tslint:enable
// eslint-enable
