// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createWorkbookChartAreaFormatFromDiscriminatorValue, serializeWorkbookChartAreaFormat, type WorkbookChartAreaFormat } from './workbookChartAreaFormat';
import { createWorkbookChartAxesFromDiscriminatorValue, serializeWorkbookChartAxes, type WorkbookChartAxes } from './workbookChartAxes';
import { createWorkbookChartDataLabelsFromDiscriminatorValue, serializeWorkbookChartDataLabels, type WorkbookChartDataLabels } from './workbookChartDataLabels';
import { createWorkbookChartLegendFromDiscriminatorValue, serializeWorkbookChartLegend, type WorkbookChartLegend } from './workbookChartLegend';
import { createWorkbookChartSeriesFromDiscriminatorValue, serializeWorkbookChartSeries, type WorkbookChartSeries } from './workbookChartSeries';
import { createWorkbookChartTitleFromDiscriminatorValue, serializeWorkbookChartTitle, type WorkbookChartTitle } from './workbookChartTitle';
import { createWorkbookWorksheetFromDiscriminatorValue, serializeWorkbookWorksheet, type WorkbookWorksheet } from './workbookWorksheet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookChartFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookChart;
}
export function deserializeIntoWorkbookChart(workbookChart: WorkbookChart | undefined = {} as WorkbookChart) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChart),
        "axes": n => { workbookChart.axes = n.getObjectValue<WorkbookChartAxes>(createWorkbookChartAxesFromDiscriminatorValue); },
        "dataLabels": n => { workbookChart.dataLabels = n.getObjectValue<WorkbookChartDataLabels>(createWorkbookChartDataLabelsFromDiscriminatorValue); },
        "format": n => { workbookChart.format = n.getObjectValue<WorkbookChartAreaFormat>(createWorkbookChartAreaFormatFromDiscriminatorValue); },
        "height": n => { workbookChart.height = n.getNumberValue(); },
        "left": n => { workbookChart.left = n.getNumberValue(); },
        "legend": n => { workbookChart.legend = n.getObjectValue<WorkbookChartLegend>(createWorkbookChartLegendFromDiscriminatorValue); },
        "name": n => { workbookChart.name = n.getStringValue(); },
        "series": n => { workbookChart.series = n.getCollectionOfObjectValues<WorkbookChartSeries>(createWorkbookChartSeriesFromDiscriminatorValue); },
        "title": n => { workbookChart.title = n.getObjectValue<WorkbookChartTitle>(createWorkbookChartTitleFromDiscriminatorValue); },
        "top": n => { workbookChart.top = n.getNumberValue(); },
        "width": n => { workbookChart.width = n.getNumberValue(); },
        "worksheet": n => { workbookChart.worksheet = n.getObjectValue<WorkbookWorksheet>(createWorkbookWorksheetFromDiscriminatorValue); },
    }
}
export function serializeWorkbookChart(writer: SerializationWriter, workbookChart: WorkbookChart | undefined = {} as WorkbookChart) : void {
        serializeEntity(writer, workbookChart)
        writer.writeObjectValue<WorkbookChartAxes>("axes", workbookChart.axes, );
        writer.writeObjectValue<WorkbookChartDataLabels>("dataLabels", workbookChart.dataLabels, );
        writer.writeObjectValue<WorkbookChartAreaFormat>("format", workbookChart.format, );
        writer.writeNumberValue("height", workbookChart.height);
        writer.writeNumberValue("left", workbookChart.left);
        writer.writeObjectValue<WorkbookChartLegend>("legend", workbookChart.legend, );
        writer.writeStringValue("name", workbookChart.name);
        writer.writeCollectionOfObjectValues<WorkbookChartSeries>("series", workbookChart.series, );
        writer.writeObjectValue<WorkbookChartTitle>("title", workbookChart.title, );
        writer.writeNumberValue("top", workbookChart.top);
        writer.writeNumberValue("width", workbookChart.width);
        writer.writeObjectValue<WorkbookWorksheet>("worksheet", workbookChart.worksheet, );
}
export interface WorkbookChart extends Entity, Parsable {
    /**
     * Represents chart axes. Read-only.
     */
    axes?: WorkbookChartAxes;
    /**
     * Represents the datalabels on the chart. Read-only.
     */
    dataLabels?: WorkbookChartDataLabels;
    /**
     * Encapsulates the format properties for the chart area. Read-only.
     */
    format?: WorkbookChartAreaFormat;
    /**
     * Represents the height, in points, of the chart object.
     */
    height?: number;
    /**
     * The distance, in points, from the left side of the chart to the worksheet origin.
     */
    left?: number;
    /**
     * Represents the legend for the chart. Read-only.
     */
    legend?: WorkbookChartLegend;
    /**
     * Represents the name of a chart object.
     */
    name?: string;
    /**
     * Represents either a single series or collection of series in the chart. Read-only.
     */
    series?: WorkbookChartSeries[];
    /**
     * Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.
     */
    title?: WorkbookChartTitle;
    /**
     * Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).
     */
    top?: number;
    /**
     * Represents the width, in points, of the chart object.
     */
    width?: number;
    /**
     * The worksheet containing the current chart. Read-only.
     */
    worksheet?: WorkbookWorksheet;
}
// tslint:enable
// eslint-enable
