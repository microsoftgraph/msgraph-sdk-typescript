// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEducationItemBodyFromDiscriminatorValue, serializeEducationItemBody, type EducationItemBody } from './educationItemBody';
import { createRubricCriterionFromDiscriminatorValue, serializeRubricCriterion, type RubricCriterion } from './rubricCriterion';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRubricQualityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRubricQuality;
}
export function deserializeIntoRubricQuality(rubricQuality: RubricQuality | undefined = {} as RubricQuality) : Record<string, (node: ParseNode) => void> {
    return {
        "criteria": n => { rubricQuality.criteria = n.getCollectionOfObjectValues<RubricCriterion>(createRubricCriterionFromDiscriminatorValue); },
        "description": n => { rubricQuality.description = n.getObjectValue<EducationItemBody>(createEducationItemBodyFromDiscriminatorValue); },
        "displayName": n => { rubricQuality.displayName = n.getStringValue(); },
        "@odata.type": n => { rubricQuality.odataType = n.getStringValue(); },
        "qualityId": n => { rubricQuality.qualityId = n.getStringValue(); },
        "weight": n => { rubricQuality.weight = n.getNumberValue(); },
    }
}
export interface RubricQuality extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The collection of criteria for this rubric quality.
     */
    criteria?: RubricCriterion[];
    /**
     * The description of this rubric quality.
     */
    description?: EducationItemBody;
    /**
     * The name of this rubric quality.
     */
    displayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The ID of this resource.
     */
    qualityId?: string;
    /**
     * If present, a numerical weight for this quality.  Weights must add up to 100.
     */
    weight?: number;
}
export function serializeRubricQuality(writer: SerializationWriter, rubricQuality: RubricQuality | undefined = {} as RubricQuality) : void {
        writer.writeCollectionOfObjectValues<RubricCriterion>("criteria", rubricQuality.criteria, );
        writer.writeObjectValue<EducationItemBody>("description", rubricQuality.description, );
        writer.writeStringValue("displayName", rubricQuality.displayName);
        writer.writeStringValue("@odata.type", rubricQuality.odataType);
        writer.writeStringValue("qualityId", rubricQuality.qualityId);
        writer.writeNumberValue("weight", rubricQuality.weight);
        writer.writeAdditionalData(rubricQuality.additionalData);
}
// tslint:enable
// eslint-enable
