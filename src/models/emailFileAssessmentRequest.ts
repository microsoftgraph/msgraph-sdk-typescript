// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { MailDestinationRoutingReason } from './mailDestinationRoutingReason';
import { deserializeIntoThreatAssessmentRequest, serializeThreatAssessmentRequest, type ThreatAssessmentRequest } from './threatAssessmentRequest';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEmailFileAssessmentRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEmailFileAssessmentRequest;
}
export function deserializeIntoEmailFileAssessmentRequest(emailFileAssessmentRequest: EmailFileAssessmentRequest | undefined = {} as EmailFileAssessmentRequest) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoThreatAssessmentRequest(emailFileAssessmentRequest),
        "contentData": n => { emailFileAssessmentRequest.contentData = n.getStringValue(); },
        "destinationRoutingReason": n => { emailFileAssessmentRequest.destinationRoutingReason = n.getEnumValue<MailDestinationRoutingReason>(MailDestinationRoutingReason); },
        "recipientEmail": n => { emailFileAssessmentRequest.recipientEmail = n.getStringValue(); },
    }
}
export interface EmailFileAssessmentRequest extends Parsable, ThreatAssessmentRequest {
    /**
     * Base64 encoded .eml email file content. The file content can't fetch back because it isn't stored.
     */
    contentData?: string;
    /**
     * The reason for mail routed to its destination. Possible values are: none, mailFlowRule, safeSender, blockedSender, advancedSpamFiltering, domainAllowList, domainBlockList, notInAddressBook, firstTimeSender, autoPurgeToInbox, autoPurgeToJunk, autoPurgeToDeleted, outbound, notJunk, junk.
     */
    destinationRoutingReason?: MailDestinationRoutingReason;
    /**
     * The mail recipient whose policies are used to assess the mail.
     */
    recipientEmail?: string;
}
export function serializeEmailFileAssessmentRequest(writer: SerializationWriter, emailFileAssessmentRequest: EmailFileAssessmentRequest | undefined = {} as EmailFileAssessmentRequest) : void {
        serializeThreatAssessmentRequest(writer, emailFileAssessmentRequest)
        writer.writeStringValue("contentData", emailFileAssessmentRequest.contentData);
        writer.writeEnumValue<MailDestinationRoutingReason>("destinationRoutingReason", emailFileAssessmentRequest.destinationRoutingReason);
        writer.writeStringValue("recipientEmail", emailFileAssessmentRequest.recipientEmail);
}
// tslint:enable
// eslint-enable
