// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConditionalAccessFilterFromDiscriminatorValue, serializeConditionalAccessFilter, type ConditionalAccessFilter } from './conditionalAccessFilter';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessDevices extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Filter that defines the dynamic-device-syntax rule to include/exclude devices. A filter can use device properties (such as extension attributes) to include/exclude them.
     */
    deviceFilter?: ConditionalAccessFilter;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createConditionalAccessDevicesFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessDevices;
}
export function deserializeIntoConditionalAccessDevices(conditionalAccessDevices: ConditionalAccessDevices | undefined = {} as ConditionalAccessDevices) : Record<string, (node: ParseNode) => void> {
    return {
        "deviceFilter": n => { conditionalAccessDevices.deviceFilter = n.getObjectValue<ConditionalAccessFilter>(createConditionalAccessFilterFromDiscriminatorValue); },
        "@odata.type": n => { conditionalAccessDevices.odataType = n.getStringValue(); },
    }
}
export function serializeConditionalAccessDevices(writer: SerializationWriter, conditionalAccessDevices: ConditionalAccessDevices | undefined = {} as ConditionalAccessDevices) : void {
        writer.writeObjectValue<ConditionalAccessFilter>("deviceFilter", conditionalAccessDevices.deviceFilter, );
        writer.writeStringValue("@odata.type", conditionalAccessDevices.odataType);
        writer.writeAdditionalData(conditionalAccessDevices.additionalData);
}
// tslint:enable
// eslint-enable
