// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createUnifiedRbacResourceNamespaceFromDiscriminatorValue, serializeUnifiedRbacResourceNamespace, type UnifiedRbacResourceNamespace } from './unifiedRbacResourceNamespace';
import { createUnifiedRoleAssignmentFromDiscriminatorValue, serializeUnifiedRoleAssignment, type UnifiedRoleAssignment } from './unifiedRoleAssignment';
import { createUnifiedRoleAssignmentScheduleFromDiscriminatorValue, serializeUnifiedRoleAssignmentSchedule, type UnifiedRoleAssignmentSchedule } from './unifiedRoleAssignmentSchedule';
import { createUnifiedRoleAssignmentScheduleInstanceFromDiscriminatorValue, serializeUnifiedRoleAssignmentScheduleInstance, type UnifiedRoleAssignmentScheduleInstance } from './unifiedRoleAssignmentScheduleInstance';
import { createUnifiedRoleAssignmentScheduleRequestFromDiscriminatorValue, serializeUnifiedRoleAssignmentScheduleRequest, type UnifiedRoleAssignmentScheduleRequest } from './unifiedRoleAssignmentScheduleRequest';
import { createUnifiedRoleDefinitionFromDiscriminatorValue, serializeUnifiedRoleDefinition, type UnifiedRoleDefinition } from './unifiedRoleDefinition';
import { createUnifiedRoleEligibilityScheduleFromDiscriminatorValue, serializeUnifiedRoleEligibilitySchedule, type UnifiedRoleEligibilitySchedule } from './unifiedRoleEligibilitySchedule';
import { createUnifiedRoleEligibilityScheduleInstanceFromDiscriminatorValue, serializeUnifiedRoleEligibilityScheduleInstance, type UnifiedRoleEligibilityScheduleInstance } from './unifiedRoleEligibilityScheduleInstance';
import { createUnifiedRoleEligibilityScheduleRequestFromDiscriminatorValue, serializeUnifiedRoleEligibilityScheduleRequest, type UnifiedRoleEligibilityScheduleRequest } from './unifiedRoleEligibilityScheduleRequest';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRbacApplicationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRbacApplication;
}
export function deserializeIntoRbacApplication(rbacApplication: RbacApplication | undefined = {} as RbacApplication) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(rbacApplication),
        "resourceNamespaces": n => { rbacApplication.resourceNamespaces = n.getCollectionOfObjectValues<UnifiedRbacResourceNamespace>(createUnifiedRbacResourceNamespaceFromDiscriminatorValue); },
        "roleAssignments": n => { rbacApplication.roleAssignments = n.getCollectionOfObjectValues<UnifiedRoleAssignment>(createUnifiedRoleAssignmentFromDiscriminatorValue); },
        "roleAssignmentScheduleInstances": n => { rbacApplication.roleAssignmentScheduleInstances = n.getCollectionOfObjectValues<UnifiedRoleAssignmentScheduleInstance>(createUnifiedRoleAssignmentScheduleInstanceFromDiscriminatorValue); },
        "roleAssignmentScheduleRequests": n => { rbacApplication.roleAssignmentScheduleRequests = n.getCollectionOfObjectValues<UnifiedRoleAssignmentScheduleRequest>(createUnifiedRoleAssignmentScheduleRequestFromDiscriminatorValue); },
        "roleAssignmentSchedules": n => { rbacApplication.roleAssignmentSchedules = n.getCollectionOfObjectValues<UnifiedRoleAssignmentSchedule>(createUnifiedRoleAssignmentScheduleFromDiscriminatorValue); },
        "roleDefinitions": n => { rbacApplication.roleDefinitions = n.getCollectionOfObjectValues<UnifiedRoleDefinition>(createUnifiedRoleDefinitionFromDiscriminatorValue); },
        "roleEligibilityScheduleInstances": n => { rbacApplication.roleEligibilityScheduleInstances = n.getCollectionOfObjectValues<UnifiedRoleEligibilityScheduleInstance>(createUnifiedRoleEligibilityScheduleInstanceFromDiscriminatorValue); },
        "roleEligibilityScheduleRequests": n => { rbacApplication.roleEligibilityScheduleRequests = n.getCollectionOfObjectValues<UnifiedRoleEligibilityScheduleRequest>(createUnifiedRoleEligibilityScheduleRequestFromDiscriminatorValue); },
        "roleEligibilitySchedules": n => { rbacApplication.roleEligibilitySchedules = n.getCollectionOfObjectValues<UnifiedRoleEligibilitySchedule>(createUnifiedRoleEligibilityScheduleFromDiscriminatorValue); },
    }
}
export interface RbacApplication extends Entity, Parsable {
    /**
     * The resourceNamespaces property
     */
    resourceNamespaces?: UnifiedRbacResourceNamespace[];
    /**
     * Resource to grant access to users or groups.
     */
    roleAssignments?: UnifiedRoleAssignment[];
    /**
     * Instances for active role assignments.
     */
    roleAssignmentScheduleInstances?: UnifiedRoleAssignmentScheduleInstance[];
    /**
     * Requests for active role assignments to principals through PIM.
     */
    roleAssignmentScheduleRequests?: UnifiedRoleAssignmentScheduleRequest[];
    /**
     * Schedules for active role assignment operations.
     */
    roleAssignmentSchedules?: UnifiedRoleAssignmentSchedule[];
    /**
     * Resource representing the roles allowed by RBAC providers and the permissions assigned to the roles.
     */
    roleDefinitions?: UnifiedRoleDefinition[];
    /**
     * Instances for role eligibility requests.
     */
    roleEligibilityScheduleInstances?: UnifiedRoleEligibilityScheduleInstance[];
    /**
     * Requests for role eligibilities for principals through PIM.
     */
    roleEligibilityScheduleRequests?: UnifiedRoleEligibilityScheduleRequest[];
    /**
     * Schedules for role eligibility operations.
     */
    roleEligibilitySchedules?: UnifiedRoleEligibilitySchedule[];
}
export function serializeRbacApplication(writer: SerializationWriter, rbacApplication: RbacApplication | undefined = {} as RbacApplication) : void {
        serializeEntity(writer, rbacApplication)
        writer.writeCollectionOfObjectValues<UnifiedRbacResourceNamespace>("resourceNamespaces", rbacApplication.resourceNamespaces, serializeUnifiedRbacResourceNamespace);
        writer.writeCollectionOfObjectValues<UnifiedRoleAssignment>("roleAssignments", rbacApplication.roleAssignments, serializeUnifiedRoleAssignment);
        writer.writeCollectionOfObjectValues<UnifiedRoleAssignmentScheduleInstance>("roleAssignmentScheduleInstances", rbacApplication.roleAssignmentScheduleInstances, serializeUnifiedRoleAssignmentScheduleInstance);
        writer.writeCollectionOfObjectValues<UnifiedRoleAssignmentScheduleRequest>("roleAssignmentScheduleRequests", rbacApplication.roleAssignmentScheduleRequests, serializeUnifiedRoleAssignmentScheduleRequest);
        writer.writeCollectionOfObjectValues<UnifiedRoleAssignmentSchedule>("roleAssignmentSchedules", rbacApplication.roleAssignmentSchedules, serializeUnifiedRoleAssignmentSchedule);
        writer.writeCollectionOfObjectValues<UnifiedRoleDefinition>("roleDefinitions", rbacApplication.roleDefinitions, serializeUnifiedRoleDefinition);
        writer.writeCollectionOfObjectValues<UnifiedRoleEligibilityScheduleInstance>("roleEligibilityScheduleInstances", rbacApplication.roleEligibilityScheduleInstances, serializeUnifiedRoleEligibilityScheduleInstance);
        writer.writeCollectionOfObjectValues<UnifiedRoleEligibilityScheduleRequest>("roleEligibilityScheduleRequests", rbacApplication.roleEligibilityScheduleRequests, serializeUnifiedRoleEligibilityScheduleRequest);
        writer.writeCollectionOfObjectValues<UnifiedRoleEligibilitySchedule>("roleEligibilitySchedules", rbacApplication.roleEligibilitySchedules, serializeUnifiedRoleEligibilitySchedule);
}
// tslint:enable
// eslint-enable
