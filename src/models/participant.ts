// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createMediaStreamFromDiscriminatorValue, serializeMediaStream, type MediaStream } from './mediaStream';
import { createOnlineMeetingRestrictedFromDiscriminatorValue, serializeOnlineMeetingRestricted, type OnlineMeetingRestricted } from './onlineMeetingRestricted';
import { createParticipantInfoFromDiscriminatorValue, serializeParticipantInfo, type ParticipantInfo } from './participantInfo';
import { createRecordingInfoFromDiscriminatorValue, serializeRecordingInfo, type RecordingInfo } from './recordingInfo';
import { createRemovedStateFromDiscriminatorValue, serializeRemovedState, type RemovedState } from './removedState';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createParticipantFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoParticipant;
}
export function deserializeIntoParticipant(participant: Participant | undefined = {} as Participant) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(participant),
        "info": n => { participant.info = n.getObjectValue<ParticipantInfo>(createParticipantInfoFromDiscriminatorValue); },
        "isInLobby": n => { participant.isInLobby = n.getBooleanValue(); },
        "isMuted": n => { participant.isMuted = n.getBooleanValue(); },
        "mediaStreams": n => { participant.mediaStreams = n.getCollectionOfObjectValues<MediaStream>(createMediaStreamFromDiscriminatorValue); },
        "metadata": n => { participant.metadata = n.getStringValue(); },
        "recordingInfo": n => { participant.recordingInfo = n.getObjectValue<RecordingInfo>(createRecordingInfoFromDiscriminatorValue); },
        "removedState": n => { participant.removedState = n.getObjectValue<RemovedState>(createRemovedStateFromDiscriminatorValue); },
        "restrictedExperience": n => { participant.restrictedExperience = n.getObjectValue<OnlineMeetingRestricted>(createOnlineMeetingRestrictedFromDiscriminatorValue); },
        "rosterSequenceNumber": n => { participant.rosterSequenceNumber = n.getNumberValue(); },
    }
}
export interface Participant extends Entity, Parsable {
    /**
     * The info property
     */
    info?: ParticipantInfo;
    /**
     * true if the participant is in lobby.
     */
    isInLobby?: boolean;
    /**
     * true if the participant is muted (client or server muted).
     */
    isMuted?: boolean;
    /**
     * The list of media streams.
     */
    mediaStreams?: MediaStream[];
    /**
     * A blob of data provided by the participant in the roster.
     */
    metadata?: string;
    /**
     * Information about whether the participant has recording capability.
     */
    recordingInfo?: RecordingInfo;
    /**
     * The removedState property
     */
    removedState?: RemovedState;
    /**
     * Indicates the reason or reasons media content from this participant is restricted.
     */
    restrictedExperience?: OnlineMeetingRestricted;
    /**
     * The rosterSequenceNumber property
     */
    rosterSequenceNumber?: number;
}
export function serializeParticipant(writer: SerializationWriter, participant: Participant | undefined = {} as Participant) : void {
    serializeEntity(writer, participant)
    writer.writeObjectValue<ParticipantInfo>("info", participant.info, serializeParticipantInfo);
    writer.writeBooleanValue("isInLobby", participant.isInLobby);
    writer.writeBooleanValue("isMuted", participant.isMuted);
    writer.writeCollectionOfObjectValues<MediaStream>("mediaStreams", participant.mediaStreams, serializeMediaStream);
    writer.writeStringValue("metadata", participant.metadata);
    writer.writeObjectValue<RecordingInfo>("recordingInfo", participant.recordingInfo, serializeRecordingInfo);
    writer.writeObjectValue<RemovedState>("removedState", participant.removedState, serializeRemovedState);
    writer.writeObjectValue<OnlineMeetingRestricted>("restrictedExperience", participant.restrictedExperience, serializeOnlineMeetingRestricted);
    writer.writeNumberValue("rosterSequenceNumber", participant.rosterSequenceNumber);
}
// tslint:enable
// eslint-enable
