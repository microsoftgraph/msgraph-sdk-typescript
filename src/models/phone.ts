// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { PhoneType } from './phoneType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPhoneFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPhone;
}
export function deserializeIntoPhone(phone: Phone | undefined = {} as Phone) : Record<string, (node: ParseNode) => void> {
    return {
        "language": n => { phone.language = n.getStringValue(); },
        "number": n => { phone.number = n.getStringValue(); },
        "@odata.type": n => { phone.odataType = n.getStringValue(); },
        "region": n => { phone.region = n.getStringValue(); },
        "type": n => { phone.type = n.getEnumValue<PhoneType>(PhoneType); },
    }
}
export interface Phone extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The language property
     */
    language?: string;
    /**
     * The phone number.
     */
    number?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The region property
     */
    region?: string;
    /**
     * The type of phone number. The possible values are: home, business, mobile, other, assistant, homeFax, businessFax, otherFax, pager, radio.
     */
    type?: PhoneType;
}
export function serializePhone(writer: SerializationWriter, phone: Phone | undefined = {} as Phone) : void {
    writer.writeStringValue("language", phone.language);
    writer.writeStringValue("number", phone.number);
    writer.writeStringValue("@odata.type", phone.odataType);
    writer.writeStringValue("region", phone.region);
    writer.writeEnumValue<PhoneType>("type", phone.type);
    writer.writeAdditionalData(phone.additionalData);
}
// tslint:enable
// eslint-enable
