// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type TaskFileAttachment } from './index';
import { deserializeIntoTaskFileAttachment } from './taskFileAttachment';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttachmentBase extends Entity, Parsable {
    /**
     * The MIME type.
     */
    contentType?: string;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastModifiedDateTime?: Date;
    /**
     * The display name of the attachment. This doesn't need to be the actual file name.
     */
    name?: string;
    /**
     * The length of the attachment in bytes.
     */
    size?: number;
}
export function createAttachmentBaseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.taskFileAttachment":
                    return deserializeIntoTaskFileAttachment;
            }
        }
    }
    return deserializeIntoAttachmentBase;
}
export function deserializeIntoAttachmentBase(attachmentBase: AttachmentBase | undefined = {} as AttachmentBase) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(attachmentBase),
        "contentType": n => { attachmentBase.contentType = n.getStringValue(); },
        "lastModifiedDateTime": n => { attachmentBase.lastModifiedDateTime = n.getDateValue(); },
        "name": n => { attachmentBase.name = n.getStringValue(); },
        "size": n => { attachmentBase.size = n.getNumberValue(); },
    }
}
export function serializeAttachmentBase(writer: SerializationWriter, attachmentBase: AttachmentBase | undefined = {} as AttachmentBase) : void {
        serializeEntity(writer, attachmentBase)
        writer.writeStringValue("contentType", attachmentBase.contentType);
        writer.writeDateValue("lastModifiedDateTime", attachmentBase.lastModifiedDateTime);
        writer.writeStringValue("name", attachmentBase.name);
        writer.writeNumberValue("size", attachmentBase.size);
}
// tslint:enable
// eslint-enable
