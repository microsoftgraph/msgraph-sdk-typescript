// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DetectedAppPlatformType } from './detectedAppPlatformType';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createManagedDeviceFromDiscriminatorValue, serializeManagedDevice, type ManagedDevice } from './managedDevice';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDetectedAppFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDetectedApp;
}
export function deserializeIntoDetectedApp(detectedApp: DetectedApp | undefined = {} as DetectedApp) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(detectedApp),
        "deviceCount": n => { detectedApp.deviceCount = n.getNumberValue(); },
        "displayName": n => { detectedApp.displayName = n.getStringValue(); },
        "managedDevices": n => { detectedApp.managedDevices = n.getCollectionOfObjectValues<ManagedDevice>(createManagedDeviceFromDiscriminatorValue); },
        "platform": n => { detectedApp.platform = n.getEnumValue<DetectedAppPlatformType>(DetectedAppPlatformType); },
        "publisher": n => { detectedApp.publisher = n.getStringValue(); },
        "sizeInByte": n => { detectedApp.sizeInByte = n.getNumberValue(); },
        "version": n => { detectedApp.version = n.getStringValue(); },
    }
}
export interface DetectedApp extends Entity, Parsable {
    /**
     * The number of devices that have installed this application
     */
    deviceCount?: number;
    /**
     * Name of the discovered application. Read-only
     */
    displayName?: string;
    /**
     * The devices that have the discovered application installed
     */
    managedDevices?: ManagedDevice[];
    /**
     * Indicates the operating system / platform of the discovered application.  Some possible values are Windows, iOS, macOS. The default value is unknown (0).
     */
    platform?: DetectedAppPlatformType;
    /**
     * Indicates the publisher of the discovered application. For example: 'Microsoft'.  The default value is an empty string.
     */
    publisher?: string;
    /**
     * Discovered application size in bytes. Read-only
     */
    sizeInByte?: number;
    /**
     * Version of the discovered application. Read-only
     */
    version?: string;
}
export function serializeDetectedApp(writer: SerializationWriter, detectedApp: DetectedApp | undefined = {} as DetectedApp) : void {
    serializeEntity(writer, detectedApp)
    writer.writeNumberValue("deviceCount", detectedApp.deviceCount);
    writer.writeStringValue("displayName", detectedApp.displayName);
    writer.writeCollectionOfObjectValues<ManagedDevice>("managedDevices", detectedApp.managedDevices, serializeManagedDevice);
    writer.writeEnumValue<DetectedAppPlatformType>("platform", detectedApp.platform);
    writer.writeStringValue("publisher", detectedApp.publisher);
    writer.writeNumberValue("sizeInByte", detectedApp.sizeInByte);
    writer.writeStringValue("version", detectedApp.version);
}
// tslint:enable
// eslint-enable
