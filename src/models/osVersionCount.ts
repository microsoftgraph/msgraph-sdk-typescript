// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOsVersionCountFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOsVersionCount;
}
export function deserializeIntoOsVersionCount(osVersionCount: OsVersionCount | undefined = {} as OsVersionCount) : Record<string, (node: ParseNode) => void> {
    return {
        "deviceCount": n => { osVersionCount.deviceCount = n.getNumberValue(); },
        "lastUpdateDateTime": n => { osVersionCount.lastUpdateDateTime = n.getDateValue(); },
        "@odata.type": n => { osVersionCount.odataType = n.getStringValue(); },
        "osVersion": n => { osVersionCount.osVersion = n.getStringValue(); },
    }
}
export interface OsVersionCount extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Count of devices with malware for the OS version
     */
    deviceCount?: number;
    /**
     * The Timestamp of the last update for the device count in UTC
     */
    lastUpdateDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * OS version
     */
    osVersion?: string;
}
export function serializeOsVersionCount(writer: SerializationWriter, osVersionCount: OsVersionCount | undefined = {} as OsVersionCount) : void {
    writer.writeNumberValue("deviceCount", osVersionCount.deviceCount);
    writer.writeDateValue("lastUpdateDateTime", osVersionCount.lastUpdateDateTime);
    writer.writeStringValue("@odata.type", osVersionCount.odataType);
    writer.writeStringValue("osVersion", osVersionCount.osVersion);
    writer.writeAdditionalData(osVersionCount.additionalData);
}
// tslint:enable
// eslint-enable
