// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from './group';
import { createPrivilegedAccessGroupEligibilityScheduleFromDiscriminatorValue, serializePrivilegedAccessGroupEligibilitySchedule, type PrivilegedAccessGroupEligibilitySchedule } from './privilegedAccessGroupEligibilitySchedule';
import { PrivilegedAccessGroupRelationships } from './privilegedAccessGroupRelationships';
import { deserializeIntoPrivilegedAccessScheduleRequest, serializePrivilegedAccessScheduleRequest, type PrivilegedAccessScheduleRequest } from './privilegedAccessScheduleRequest';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrivilegedAccessGroupAssignmentScheduleRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrivilegedAccessGroupAssignmentScheduleRequest;
}
export function deserializeIntoPrivilegedAccessGroupAssignmentScheduleRequest(privilegedAccessGroupAssignmentScheduleRequest: PrivilegedAccessGroupAssignmentScheduleRequest | undefined = {} as PrivilegedAccessGroupAssignmentScheduleRequest) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPrivilegedAccessScheduleRequest(privilegedAccessGroupAssignmentScheduleRequest),
        "accessId": n => { privilegedAccessGroupAssignmentScheduleRequest.accessId = n.getEnumValue<PrivilegedAccessGroupRelationships>(PrivilegedAccessGroupRelationships); },
        "activatedUsing": n => { privilegedAccessGroupAssignmentScheduleRequest.activatedUsing = n.getObjectValue<PrivilegedAccessGroupEligibilitySchedule>(createPrivilegedAccessGroupEligibilityScheduleFromDiscriminatorValue); },
        "group": n => { privilegedAccessGroupAssignmentScheduleRequest.group = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "groupId": n => { privilegedAccessGroupAssignmentScheduleRequest.groupId = n.getStringValue(); },
        "principal": n => { privilegedAccessGroupAssignmentScheduleRequest.principal = n.getObjectValue<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "principalId": n => { privilegedAccessGroupAssignmentScheduleRequest.principalId = n.getStringValue(); },
        "targetSchedule": n => { privilegedAccessGroupAssignmentScheduleRequest.targetSchedule = n.getObjectValue<PrivilegedAccessGroupEligibilitySchedule>(createPrivilegedAccessGroupEligibilityScheduleFromDiscriminatorValue); },
        "targetScheduleId": n => { privilegedAccessGroupAssignmentScheduleRequest.targetScheduleId = n.getStringValue(); },
    }
}
export interface PrivilegedAccessGroupAssignmentScheduleRequest extends Parsable, PrivilegedAccessScheduleRequest {
    /**
     * The accessId property
     */
    accessId?: PrivilegedAccessGroupRelationships;
    /**
     * The activatedUsing property
     */
    activatedUsing?: PrivilegedAccessGroupEligibilitySchedule;
    /**
     * The group property
     */
    group?: Group;
    /**
     * The groupId property
     */
    groupId?: string;
    /**
     * The principal property
     */
    principal?: DirectoryObject;
    /**
     * The principalId property
     */
    principalId?: string;
    /**
     * The targetSchedule property
     */
    targetSchedule?: PrivilegedAccessGroupEligibilitySchedule;
    /**
     * The targetScheduleId property
     */
    targetScheduleId?: string;
}
export function serializePrivilegedAccessGroupAssignmentScheduleRequest(writer: SerializationWriter, privilegedAccessGroupAssignmentScheduleRequest: PrivilegedAccessGroupAssignmentScheduleRequest | undefined = {} as PrivilegedAccessGroupAssignmentScheduleRequest) : void {
        serializePrivilegedAccessScheduleRequest(writer, privilegedAccessGroupAssignmentScheduleRequest)
        writer.writeEnumValue<PrivilegedAccessGroupRelationships>("accessId", privilegedAccessGroupAssignmentScheduleRequest.accessId);
        writer.writeObjectValue<PrivilegedAccessGroupEligibilitySchedule>("activatedUsing", privilegedAccessGroupAssignmentScheduleRequest.activatedUsing, );
        writer.writeObjectValue<Group>("group", privilegedAccessGroupAssignmentScheduleRequest.group, );
        writer.writeStringValue("groupId", privilegedAccessGroupAssignmentScheduleRequest.groupId);
        writer.writeObjectValue<DirectoryObject>("principal", privilegedAccessGroupAssignmentScheduleRequest.principal, );
        writer.writeStringValue("principalId", privilegedAccessGroupAssignmentScheduleRequest.principalId);
        writer.writeObjectValue<PrivilegedAccessGroupEligibilitySchedule>("targetSchedule", privilegedAccessGroupAssignmentScheduleRequest.targetSchedule, );
        writer.writeStringValue("targetScheduleId", privilegedAccessGroupAssignmentScheduleRequest.targetScheduleId);
}
// tslint:enable
// eslint-enable
