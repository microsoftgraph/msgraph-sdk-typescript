// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AudioConferencing extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The conference id of the online meeting.
     */
    conferenceId?: string;
    /**
     * A URL to the externally-accessible web page that contains dial-in information.
     */
    dialinUrl?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The tollFreeNumber property
     */
    tollFreeNumber?: string;
    /**
     * List of toll-free numbers that are displayed in the meeting invite.
     */
    tollFreeNumbers?: string[];
    /**
     * The tollNumber property
     */
    tollNumber?: string;
    /**
     * List of toll numbers that are displayed in the meeting invite.
     */
    tollNumbers?: string[];
}
export function createAudioConferencingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAudioConferencing;
}
export function deserializeIntoAudioConferencing(audioConferencing: AudioConferencing | undefined = {} as AudioConferencing) : Record<string, (node: ParseNode) => void> {
    return {
        "conferenceId": n => { audioConferencing.conferenceId = n.getStringValue(); },
        "dialinUrl": n => { audioConferencing.dialinUrl = n.getStringValue(); },
        "@odata.type": n => { audioConferencing.odataType = n.getStringValue(); },
        "tollFreeNumber": n => { audioConferencing.tollFreeNumber = n.getStringValue(); },
        "tollFreeNumbers": n => { audioConferencing.tollFreeNumbers = n.getCollectionOfPrimitiveValues<string>(); },
        "tollNumber": n => { audioConferencing.tollNumber = n.getStringValue(); },
        "tollNumbers": n => { audioConferencing.tollNumbers = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export function serializeAudioConferencing(writer: SerializationWriter, audioConferencing: AudioConferencing | undefined = {} as AudioConferencing) : void {
    writer.writeStringValue("conferenceId", audioConferencing.conferenceId);
    writer.writeStringValue("dialinUrl", audioConferencing.dialinUrl);
    writer.writeStringValue("@odata.type", audioConferencing.odataType);
    writer.writeStringValue("tollFreeNumber", audioConferencing.tollFreeNumber);
    writer.writeCollectionOfPrimitiveValues<string>("tollFreeNumbers", audioConferencing.tollFreeNumbers);
    writer.writeStringValue("tollNumber", audioConferencing.tollNumber);
    writer.writeCollectionOfPrimitiveValues<string>("tollNumbers", audioConferencing.tollNumbers);
    writer.writeAdditionalData(audioConferencing.additionalData);
}
// tslint:enable
// eslint-enable
