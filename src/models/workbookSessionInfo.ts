// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookSessionInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookSessionInfo;
}
export function deserializeIntoWorkbookSessionInfo(workbookSessionInfo: WorkbookSessionInfo | undefined = {} as WorkbookSessionInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { workbookSessionInfo.id = n.getStringValue(); },
        "@odata.type": n => { workbookSessionInfo.odataType = n.getStringValue(); },
        "persistChanges": n => { workbookSessionInfo.persistChanges = n.getBooleanValue(); },
    }
}
export function serializeWorkbookSessionInfo(writer: SerializationWriter, workbookSessionInfo: WorkbookSessionInfo | undefined = {} as WorkbookSessionInfo) : void {
    writer.writeStringValue("id", workbookSessionInfo.id);
    writer.writeStringValue("@odata.type", workbookSessionInfo.odataType);
    writer.writeBooleanValue("persistChanges", workbookSessionInfo.persistChanges);
    writer.writeAdditionalData(workbookSessionInfo.additionalData);
}
export interface WorkbookSessionInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * ID of the workbook session.
     */
    id?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * true for persistent session. false for non-persistent session (view mode)
     */
    persistChanges?: boolean;
}
// tslint:enable
// eslint-enable
