// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ChatInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The unique identifier of a message in a Microsoft Teams channel.
     */
    messageId?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The ID of the reply message.
     */
    replyChainMessageId?: string;
    /**
     * The unique identifier for a thread in Microsoft Teams.
     */
    threadId?: string;
}
export function createChatInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoChatInfo;
}
export function deserializeIntoChatInfo(chatInfo: ChatInfo | undefined = {} as ChatInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "messageId": n => { chatInfo.messageId = n.getStringValue(); },
        "@odata.type": n => { chatInfo.odataType = n.getStringValue(); },
        "replyChainMessageId": n => { chatInfo.replyChainMessageId = n.getStringValue(); },
        "threadId": n => { chatInfo.threadId = n.getStringValue(); },
    }
}
export function serializeChatInfo(writer: SerializationWriter, chatInfo: ChatInfo | undefined = {} as ChatInfo) : void {
    writer.writeStringValue("messageId", chatInfo.messageId);
    writer.writeStringValue("@odata.type", chatInfo.odataType);
    writer.writeStringValue("replyChainMessageId", chatInfo.replyChainMessageId);
    writer.writeStringValue("threadId", chatInfo.threadId);
    writer.writeAdditionalData(chatInfo.additionalData);
}
// tslint:enable
// eslint-enable
