// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPatternedRecurrenceFromDiscriminatorValue, serializePatternedRecurrence, type PatternedRecurrence } from './patternedRecurrence';
import { createTimeRangeFromDiscriminatorValue, serializeTimeRange, type TimeRange } from './timeRange';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createShiftAvailabilityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoShiftAvailability;
}
export function deserializeIntoShiftAvailability(shiftAvailability: ShiftAvailability | undefined = {} as ShiftAvailability) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { shiftAvailability.odataType = n.getStringValue(); },
        "recurrence": n => { shiftAvailability.recurrence = n.getObjectValue<PatternedRecurrence>(createPatternedRecurrenceFromDiscriminatorValue); },
        "timeSlots": n => { shiftAvailability.timeSlots = n.getCollectionOfObjectValues<TimeRange>(createTimeRangeFromDiscriminatorValue); },
        "timeZone": n => { shiftAvailability.timeZone = n.getStringValue(); },
    }
}
export function serializeShiftAvailability(writer: SerializationWriter, shiftAvailability: ShiftAvailability | undefined = {} as ShiftAvailability) : void {
        writer.writeStringValue("@odata.type", shiftAvailability.odataType);
        writer.writeObjectValue<PatternedRecurrence>("recurrence", shiftAvailability.recurrence, serializePatternedRecurrence);
        writer.writeCollectionOfObjectValues<TimeRange>("timeSlots", shiftAvailability.timeSlots, serializeTimeRange);
        writer.writeStringValue("timeZone", shiftAvailability.timeZone);
        writer.writeAdditionalData(shiftAvailability.additionalData);
}
export interface ShiftAvailability extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies the pattern for recurrence
     */
    recurrence?: PatternedRecurrence;
    /**
     * The time slot(s) preferred by the user.
     */
    timeSlots?: TimeRange[];
    /**
     * Specifies the time zone for the indicated time.
     */
    timeZone?: string;
}
// tslint:enable
// eslint-enable
