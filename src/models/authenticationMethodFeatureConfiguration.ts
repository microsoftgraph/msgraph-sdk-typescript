// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AdvancedConfigState } from './advancedConfigState';
import { createFeatureTargetFromDiscriminatorValue, serializeFeatureTarget, type FeatureTarget } from './featureTarget';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthenticationMethodFeatureConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A single entity that is excluded from this feature.
     */
    excludeTarget?: FeatureTarget;
    /**
     * A single entity that is included in this feature.
     */
    includeTarget?: FeatureTarget;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Enable or disable the feature. Possible values are: default, enabled, disabled, unknownFutureValue. The default value is used when the configuration hasn't been explicitly set and uses the default behavior of Microsoft Entra ID for the setting. The default value is disabled.
     */
    state?: AdvancedConfigState;
}
export function createAuthenticationMethodFeatureConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuthenticationMethodFeatureConfiguration;
}
export function deserializeIntoAuthenticationMethodFeatureConfiguration(authenticationMethodFeatureConfiguration: AuthenticationMethodFeatureConfiguration | undefined = {} as AuthenticationMethodFeatureConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        "excludeTarget": n => { authenticationMethodFeatureConfiguration.excludeTarget = n.getObjectValue<FeatureTarget>(createFeatureTargetFromDiscriminatorValue); },
        "includeTarget": n => { authenticationMethodFeatureConfiguration.includeTarget = n.getObjectValue<FeatureTarget>(createFeatureTargetFromDiscriminatorValue); },
        "@odata.type": n => { authenticationMethodFeatureConfiguration.odataType = n.getStringValue(); },
        "state": n => { authenticationMethodFeatureConfiguration.state = n.getEnumValue<AdvancedConfigState>(AdvancedConfigState); },
    }
}
export function serializeAuthenticationMethodFeatureConfiguration(writer: SerializationWriter, authenticationMethodFeatureConfiguration: AuthenticationMethodFeatureConfiguration | undefined = {} as AuthenticationMethodFeatureConfiguration) : void {
        writer.writeObjectValue<FeatureTarget>("excludeTarget", authenticationMethodFeatureConfiguration.excludeTarget, serializeFeatureTarget);
        writer.writeObjectValue<FeatureTarget>("includeTarget", authenticationMethodFeatureConfiguration.includeTarget, serializeFeatureTarget);
        writer.writeStringValue("@odata.type", authenticationMethodFeatureConfiguration.odataType);
        writer.writeEnumValue<AdvancedConfigState>("state", authenticationMethodFeatureConfiguration.state);
        writer.writeAdditionalData(authenticationMethodFeatureConfiguration.additionalData);
}
// tslint:enable
// eslint-enable
