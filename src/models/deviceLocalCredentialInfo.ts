// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDeviceLocalCredentialFromDiscriminatorValue, serializeDeviceLocalCredential, type DeviceLocalCredential } from './deviceLocalCredential';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceLocalCredentialInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceLocalCredentialInfo;
}
export function deserializeIntoDeviceLocalCredentialInfo(deviceLocalCredentialInfo: DeviceLocalCredentialInfo | undefined = {} as DeviceLocalCredentialInfo) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceLocalCredentialInfo),
        "credentials": n => { deviceLocalCredentialInfo.credentials = n.getCollectionOfObjectValues<DeviceLocalCredential>(createDeviceLocalCredentialFromDiscriminatorValue); },
        "deviceName": n => { deviceLocalCredentialInfo.deviceName = n.getStringValue(); },
        "lastBackupDateTime": n => { deviceLocalCredentialInfo.lastBackupDateTime = n.getDateValue(); },
        "refreshDateTime": n => { deviceLocalCredentialInfo.refreshDateTime = n.getDateValue(); },
    }
}
export interface DeviceLocalCredentialInfo extends Entity, Parsable {
    /**
     * The credentials of the device's local administrator account backed up to Azure Active Directory.
     */
    credentials?: DeviceLocalCredential[];
    /**
     * Display name of the device that the local credentials are associated with.
     */
    deviceName?: string;
    /**
     * When the local administrator account credential was backed up to Azure Active Directory.
     */
    lastBackupDateTime?: Date;
    /**
     * When the local administrator account credential will be refreshed and backed up to Azure Active Directory.
     */
    refreshDateTime?: Date;
}
export function serializeDeviceLocalCredentialInfo(writer: SerializationWriter, deviceLocalCredentialInfo: DeviceLocalCredentialInfo | undefined = {} as DeviceLocalCredentialInfo) : void {
    serializeEntity(writer, deviceLocalCredentialInfo)
    writer.writeCollectionOfObjectValues<DeviceLocalCredential>("credentials", deviceLocalCredentialInfo.credentials, serializeDeviceLocalCredential);
    writer.writeStringValue("deviceName", deviceLocalCredentialInfo.deviceName);
    writer.writeDateValue("lastBackupDateTime", deviceLocalCredentialInfo.lastBackupDateTime);
    writer.writeDateValue("refreshDateTime", deviceLocalCredentialInfo.refreshDateTime);
}
// tslint:enable
// eslint-enable
