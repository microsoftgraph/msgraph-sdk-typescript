// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttendanceRecordFromDiscriminatorValue, serializeAttendanceRecord, type AttendanceRecord } from './attendanceRecord';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMeetingAttendanceReportFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMeetingAttendanceReport;
}
export function deserializeIntoMeetingAttendanceReport(meetingAttendanceReport: MeetingAttendanceReport | undefined = {} as MeetingAttendanceReport) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(meetingAttendanceReport),
        "attendanceRecords": n => { meetingAttendanceReport.attendanceRecords = n.getCollectionOfObjectValues<AttendanceRecord>(createAttendanceRecordFromDiscriminatorValue); },
        "meetingEndDateTime": n => { meetingAttendanceReport.meetingEndDateTime = n.getDateValue(); },
        "meetingStartDateTime": n => { meetingAttendanceReport.meetingStartDateTime = n.getDateValue(); },
        "totalParticipantCount": n => { meetingAttendanceReport.totalParticipantCount = n.getNumberValue(); },
    }
}
export interface MeetingAttendanceReport extends Entity, Parsable {
    /**
     * List of attendance records of an attendance report. Read-only.
     */
    attendanceRecords?: AttendanceRecord[];
    /**
     * UTC time when the meeting ended. Read-only.
     */
    meetingEndDateTime?: Date;
    /**
     * UTC time when the meeting started. Read-only.
     */
    meetingStartDateTime?: Date;
    /**
     * Total number of participants. Read-only.
     */
    totalParticipantCount?: number;
}
export function serializeMeetingAttendanceReport(writer: SerializationWriter, meetingAttendanceReport: MeetingAttendanceReport | undefined = {} as MeetingAttendanceReport) : void {
        serializeEntity(writer, meetingAttendanceReport)
        writer.writeCollectionOfObjectValues<AttendanceRecord>("attendanceRecords", meetingAttendanceReport.attendanceRecords, );
        writer.writeDateValue("meetingEndDateTime", meetingAttendanceReport.meetingEndDateTime);
        writer.writeDateValue("meetingStartDateTime", meetingAttendanceReport.meetingStartDateTime);
        writer.writeNumberValue("totalParticipantCount", meetingAttendanceReport.totalParticipantCount);
}
// tslint:enable
// eslint-enable
