// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDomainDnsRecord, serializeDomainDnsRecord, type DomainDnsRecord } from './domainDnsRecord';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDomainDnsSrvRecordFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDomainDnsSrvRecord;
}
export function deserializeIntoDomainDnsSrvRecord(domainDnsSrvRecord: DomainDnsSrvRecord | undefined = {} as DomainDnsSrvRecord) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDomainDnsRecord(domainDnsSrvRecord),
        "nameTarget": n => { domainDnsSrvRecord.nameTarget = n.getStringValue(); },
        "port": n => { domainDnsSrvRecord.port = n.getNumberValue(); },
        "priority": n => { domainDnsSrvRecord.priority = n.getNumberValue(); },
        "protocol": n => { domainDnsSrvRecord.protocol = n.getStringValue(); },
        "service": n => { domainDnsSrvRecord.service = n.getStringValue(); },
        "weight": n => { domainDnsSrvRecord.weight = n.getNumberValue(); },
    }
}
export interface DomainDnsSrvRecord extends DomainDnsRecord, Parsable {
    /**
     * Value to use when configuring the Target property of the SRV record at the DNS host.
     */
    nameTarget?: string;
    /**
     * Value to use when configuring the port property of the SRV record at the DNS host.
     */
    port?: number;
    /**
     * Value to use when configuring the priority property of the SRV record at the DNS host.
     */
    priority?: number;
    /**
     * Value to use when configuring the protocol property of the SRV record at the DNS host.
     */
    protocol?: string;
    /**
     * Value to use when configuring the service property of the SRV record at the DNS host.
     */
    service?: string;
    /**
     * Value to use when configuring the weight property of the SRV record at the DNS host.
     */
    weight?: number;
}
export function serializeDomainDnsSrvRecord(writer: SerializationWriter, domainDnsSrvRecord: DomainDnsSrvRecord | undefined = {} as DomainDnsSrvRecord) : void {
    serializeDomainDnsRecord(writer, domainDnsSrvRecord)
    writer.writeStringValue("nameTarget", domainDnsSrvRecord.nameTarget);
    writer.writeNumberValue("port", domainDnsSrvRecord.port);
    writer.writeNumberValue("priority", domainDnsSrvRecord.priority);
    writer.writeStringValue("protocol", domainDnsSrvRecord.protocol);
    writer.writeStringValue("service", domainDnsSrvRecord.service);
    writer.writeNumberValue("weight", domainDnsSrvRecord.weight);
}
// tslint:enable
// eslint-enable
