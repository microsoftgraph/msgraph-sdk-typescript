import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CallTranscript extends Entity, Parsable {
    /**
     * The content property
     */
    content?: string;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The meetingId property
     */
    meetingId?: string;
    /**
     * The meetingOrganizer property
     */
    meetingOrganizer?: IdentitySet;
    /**
     * The metadataContent property
     */
    metadataContent?: string;
    /**
     * The transcriptContentUrl property
     */
    transcriptContentUrl?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createCallTranscriptFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCallTranscript;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoCallTranscript(callTranscript: CallTranscript | undefined = {} as CallTranscript) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(callTranscript),
        "content": n => { callTranscript.content = n.getStringValue(); },
        "createdDateTime": n => { callTranscript.createdDateTime = n.getDateValue(); },
        "meetingId": n => { callTranscript.meetingId = n.getStringValue(); },
        "meetingOrganizer": n => { callTranscript.meetingOrganizer = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "metadataContent": n => { callTranscript.metadataContent = n.getStringValue(); },
        "transcriptContentUrl": n => { callTranscript.transcriptContentUrl = n.getStringValue(); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeCallTranscript(writer: SerializationWriter, callTranscript: CallTranscript | undefined = {} as CallTranscript) : void {
        serializeEntity(writer, callTranscript)
        writer.writeStringValue("content", callTranscript.content);
        writer.writeDateValue("createdDateTime", callTranscript.createdDateTime);
        writer.writeStringValue("meetingId", callTranscript.meetingId);
        writer.writeObjectValue<IdentitySet>("meetingOrganizer", callTranscript.meetingOrganizer, );
        writer.writeStringValue("metadataContent", callTranscript.metadataContent);
        writer.writeStringValue("transcriptContentUrl", callTranscript.transcriptContentUrl);
}
