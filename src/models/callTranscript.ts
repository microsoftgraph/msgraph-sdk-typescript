// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CallTranscript extends Entity, Parsable {
    /**
     * The content of the transcript. Read-only.
     */
    content?: string;
    /**
     * Date and time at which the transcript was created. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    createdDateTime?: Date;
    /**
     * The unique identifier of the online meeting related to this transcript. Read-only.
     */
    meetingId?: string;
    /**
     * The identity information of the organizer of the onlineMeeting related to this transcript. Read-only.
     */
    meetingOrganizer?: IdentitySet;
    /**
     * The time-aligned metadata of the utterances in the transcript. Read-only.
     */
    metadataContent?: string;
    /**
     * The URL that can be used to access the content of the transcript. Read-only.
     */
    transcriptContentUrl?: string;
}
export function createCallTranscriptFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCallTranscript;
}
export function deserializeIntoCallTranscript(callTranscript: CallTranscript | undefined = {} as CallTranscript) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(callTranscript),
        "content": n => { callTranscript.content = n.getStringValue(); },
        "createdDateTime": n => { callTranscript.createdDateTime = n.getDateValue(); },
        "meetingId": n => { callTranscript.meetingId = n.getStringValue(); },
        "meetingOrganizer": n => { callTranscript.meetingOrganizer = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "metadataContent": n => { callTranscript.metadataContent = n.getStringValue(); },
        "transcriptContentUrl": n => { callTranscript.transcriptContentUrl = n.getStringValue(); },
    }
}
export function serializeCallTranscript(writer: SerializationWriter, callTranscript: CallTranscript | undefined = {} as CallTranscript) : void {
    serializeEntity(writer, callTranscript)
    writer.writeStringValue("content", callTranscript.content);
    writer.writeDateValue("createdDateTime", callTranscript.createdDateTime);
    writer.writeStringValue("meetingId", callTranscript.meetingId);
    writer.writeObjectValue<IdentitySet>("meetingOrganizer", callTranscript.meetingOrganizer, serializeIdentitySet);
    writer.writeStringValue("metadataContent", callTranscript.metadataContent);
    writer.writeStringValue("transcriptContentUrl", callTranscript.transcriptContentUrl);
}
// tslint:enable
// eslint-enable
