import { createSearchBucketFromDiscriminatorValue, serializeSearchBucket, type SearchBucket } from './searchBucket';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createSearchAggregationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSearchAggregation;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoSearchAggregation(searchAggregation: SearchAggregation | undefined = {} as SearchAggregation) : Record<string, (node: ParseNode) => void> {
    return {
        "buckets": n => { searchAggregation.buckets = n.getCollectionOfObjectValues<SearchBucket>(createSearchBucketFromDiscriminatorValue); },
        "field": n => { searchAggregation.field = n.getStringValue(); },
        "@odata.type": n => { searchAggregation.odataType = n.getStringValue(); },
    }
}
export interface SearchAggregation extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The buckets property
     */
    buckets?: SearchBucket[];
    /**
     * The field property
     */
    field?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeSearchAggregation(writer: SerializationWriter, searchAggregation: SearchAggregation | undefined = {} as SearchAggregation) : void {
        writer.writeCollectionOfObjectValues<SearchBucket>("buckets", searchAggregation.buckets, );
        writer.writeStringValue("field", searchAggregation.field);
        writer.writeStringValue("@odata.type", searchAggregation.odataType);
        writer.writeAdditionalData(searchAggregation.additionalData);
}
