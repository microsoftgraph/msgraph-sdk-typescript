// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { TeamworkActivityTopicSource } from './teamworkActivityTopicSource';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTeamworkActivityTopicFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTeamworkActivityTopic;
}
export function deserializeIntoTeamworkActivityTopic(teamworkActivityTopic: TeamworkActivityTopic | undefined = {} as TeamworkActivityTopic) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { teamworkActivityTopic.odataType = n.getStringValue(); },
        "source": n => { teamworkActivityTopic.source = n.getEnumValue<TeamworkActivityTopicSource>(TeamworkActivityTopicSource); },
        "value": n => { teamworkActivityTopic.value = n.getStringValue(); },
        "webUrl": n => { teamworkActivityTopic.webUrl = n.getStringValue(); },
    }
}
export function serializeTeamworkActivityTopic(writer: SerializationWriter, teamworkActivityTopic: TeamworkActivityTopic | undefined = {} as TeamworkActivityTopic) : void {
    writer.writeStringValue("@odata.type", teamworkActivityTopic.odataType);
    writer.writeEnumValue<TeamworkActivityTopicSource>("source", teamworkActivityTopic.source);
    writer.writeStringValue("value", teamworkActivityTopic.value);
    writer.writeStringValue("webUrl", teamworkActivityTopic.webUrl);
    writer.writeAdditionalData(teamworkActivityTopic.additionalData);
}
export interface TeamworkActivityTopic extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Type of source. Possible values are: entityUrl, text. For supported Microsoft Graph URLs, use entityUrl. For custom text, use text.
     */
    source?: TeamworkActivityTopicSource;
    /**
     * The topic value. If the value of the source property is entityUrl, this must be a Microsoft Graph URL. If the value is text, this must be a plain text value.
     */
    value?: string;
    /**
     * The link the user clicks when they select the notification. Optional when source is entityUrl; required when source is text.
     */
    webUrl?: string;
}
// tslint:enable
// eslint-enable
