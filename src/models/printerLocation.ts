// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrinterLocationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrinterLocation;
}
export function deserializeIntoPrinterLocation(printerLocation: PrinterLocation | undefined = {} as PrinterLocation) : Record<string, (node: ParseNode) => void> {
    return {
        "altitudeInMeters": n => { printerLocation.altitudeInMeters = n.getNumberValue(); },
        "building": n => { printerLocation.building = n.getStringValue(); },
        "city": n => { printerLocation.city = n.getStringValue(); },
        "countryOrRegion": n => { printerLocation.countryOrRegion = n.getStringValue(); },
        "floor": n => { printerLocation.floor = n.getStringValue(); },
        "floorDescription": n => { printerLocation.floorDescription = n.getStringValue(); },
        "latitude": n => { printerLocation.latitude = n.getNumberValue(); },
        "longitude": n => { printerLocation.longitude = n.getNumberValue(); },
        "@odata.type": n => { printerLocation.odataType = n.getStringValue(); },
        "organization": n => { printerLocation.organization = n.getCollectionOfPrimitiveValues<string>(); },
        "postalCode": n => { printerLocation.postalCode = n.getStringValue(); },
        "roomDescription": n => { printerLocation.roomDescription = n.getStringValue(); },
        "roomName": n => { printerLocation.roomName = n.getStringValue(); },
        "site": n => { printerLocation.site = n.getStringValue(); },
        "stateOrProvince": n => { printerLocation.stateOrProvince = n.getStringValue(); },
        "streetAddress": n => { printerLocation.streetAddress = n.getStringValue(); },
        "subdivision": n => { printerLocation.subdivision = n.getCollectionOfPrimitiveValues<string>(); },
        "subunit": n => { printerLocation.subunit = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface PrinterLocation extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The altitude, in meters, that the printer is located at.
     */
    altitudeInMeters?: number;
    /**
     * The building that the printer is located in.
     */
    building?: string;
    /**
     * The city that the printer is located in.
     */
    city?: string;
    /**
     * The country or region that the printer is located in.
     */
    countryOrRegion?: string;
    /**
     * The floor that the printer is located on. Only numerical values are supported right now.
     */
    floor?: string;
    /**
     * The description of the floor that the printer is located on.
     */
    floorDescription?: string;
    /**
     * The latitude that the printer is located at.
     */
    latitude?: number;
    /**
     * The longitude that the printer is located at.
     */
    longitude?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The organizational hierarchy that the printer belongs to. The elements should be in hierarchical order.
     */
    organization?: string[];
    /**
     * The postal code that the printer is located in.
     */
    postalCode?: string;
    /**
     * The description of the room that the printer is located in.
     */
    roomDescription?: string;
    /**
     * The room that the printer is located in. Only numerical values are supported right now.
     */
    roomName?: string;
    /**
     * The site that the printer is located in.
     */
    site?: string;
    /**
     * The state or province that the printer is located in.
     */
    stateOrProvince?: string;
    /**
     * The street address where the printer is located.
     */
    streetAddress?: string;
    /**
     * The subdivision that the printer is located in. The elements should be in hierarchical order.
     */
    subdivision?: string[];
    /**
     * The subunit property
     */
    subunit?: string[];
}
export function serializePrinterLocation(writer: SerializationWriter, printerLocation: PrinterLocation | undefined = {} as PrinterLocation) : void {
        writer.writeNumberValue("altitudeInMeters", printerLocation.altitudeInMeters);
        writer.writeStringValue("building", printerLocation.building);
        writer.writeStringValue("city", printerLocation.city);
        writer.writeStringValue("countryOrRegion", printerLocation.countryOrRegion);
        writer.writeStringValue("floor", printerLocation.floor);
        writer.writeStringValue("floorDescription", printerLocation.floorDescription);
        writer.writeNumberValue("latitude", printerLocation.latitude);
        writer.writeNumberValue("longitude", printerLocation.longitude);
        writer.writeStringValue("@odata.type", printerLocation.odataType);
        writer.writeCollectionOfPrimitiveValues<string>("organization", printerLocation.organization);
        writer.writeStringValue("postalCode", printerLocation.postalCode);
        writer.writeStringValue("roomDescription", printerLocation.roomDescription);
        writer.writeStringValue("roomName", printerLocation.roomName);
        writer.writeStringValue("site", printerLocation.site);
        writer.writeStringValue("stateOrProvince", printerLocation.stateOrProvince);
        writer.writeStringValue("streetAddress", printerLocation.streetAddress);
        writer.writeCollectionOfPrimitiveValues<string>("subdivision", printerLocation.subdivision);
        writer.writeCollectionOfPrimitiveValues<string>("subunit", printerLocation.subunit);
        writer.writeAdditionalData(printerLocation.additionalData);
}
// tslint:enable
// eslint-enable
