// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createUserExperienceAnalyticsWorkFromAnywhereDeviceFromDiscriminatorValue, serializeUserExperienceAnalyticsWorkFromAnywhereDevice, type UserExperienceAnalyticsWorkFromAnywhereDevice } from './userExperienceAnalyticsWorkFromAnywhereDevice';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserExperienceAnalyticsWorkFromAnywhereMetricFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserExperienceAnalyticsWorkFromAnywhereMetric;
}
export function deserializeIntoUserExperienceAnalyticsWorkFromAnywhereMetric(userExperienceAnalyticsWorkFromAnywhereMetric: UserExperienceAnalyticsWorkFromAnywhereMetric | undefined = {} as UserExperienceAnalyticsWorkFromAnywhereMetric) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(userExperienceAnalyticsWorkFromAnywhereMetric),
        "metricDevices": n => { userExperienceAnalyticsWorkFromAnywhereMetric.metricDevices = n.getCollectionOfObjectValues<UserExperienceAnalyticsWorkFromAnywhereDevice>(createUserExperienceAnalyticsWorkFromAnywhereDeviceFromDiscriminatorValue); },
    }
}
export function serializeUserExperienceAnalyticsWorkFromAnywhereMetric(writer: SerializationWriter, userExperienceAnalyticsWorkFromAnywhereMetric: UserExperienceAnalyticsWorkFromAnywhereMetric | undefined = {} as UserExperienceAnalyticsWorkFromAnywhereMetric) : void {
        serializeEntity(writer, userExperienceAnalyticsWorkFromAnywhereMetric)
        writer.writeCollectionOfObjectValues<UserExperienceAnalyticsWorkFromAnywhereDevice>("metricDevices", userExperienceAnalyticsWorkFromAnywhereMetric.metricDevices, );
}
export interface UserExperienceAnalyticsWorkFromAnywhereMetric extends Entity, Parsable {
    /**
     * The work from anywhere metric devices. Read-only.
     */
    metricDevices?: UserExperienceAnalyticsWorkFromAnywhereDevice[];
}
// tslint:enable
// eslint-enable
