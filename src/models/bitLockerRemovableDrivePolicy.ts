// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { BitLockerEncryptionMethod } from './bitLockerEncryptionMethod';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BitLockerRemovableDrivePolicy extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * This policy setting determines whether BitLocker protection is required for removable data drives to be writable on a computer.
     */
    blockCrossOrganizationWriteAccess?: boolean;
    /**
     * Select the encryption method for removable  drives. Possible values are: aesCbc128, aesCbc256, xtsAes128, xtsAes256.
     */
    encryptionMethod?: BitLockerEncryptionMethod;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Indicates whether to block write access to devices configured in another organization.  If requireEncryptionForWriteAccess is false, this value does not affect.
     */
    requireEncryptionForWriteAccess?: boolean;
}
export function createBitLockerRemovableDrivePolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBitLockerRemovableDrivePolicy;
}
export function deserializeIntoBitLockerRemovableDrivePolicy(bitLockerRemovableDrivePolicy: BitLockerRemovableDrivePolicy | undefined = {} as BitLockerRemovableDrivePolicy) : Record<string, (node: ParseNode) => void> {
    return {
        "blockCrossOrganizationWriteAccess": n => { bitLockerRemovableDrivePolicy.blockCrossOrganizationWriteAccess = n.getBooleanValue(); },
        "encryptionMethod": n => { bitLockerRemovableDrivePolicy.encryptionMethod = n.getEnumValue<BitLockerEncryptionMethod>(BitLockerEncryptionMethod); },
        "@odata.type": n => { bitLockerRemovableDrivePolicy.odataType = n.getStringValue(); },
        "requireEncryptionForWriteAccess": n => { bitLockerRemovableDrivePolicy.requireEncryptionForWriteAccess = n.getBooleanValue(); },
    }
}
export function serializeBitLockerRemovableDrivePolicy(writer: SerializationWriter, bitLockerRemovableDrivePolicy: BitLockerRemovableDrivePolicy | undefined = {} as BitLockerRemovableDrivePolicy) : void {
    writer.writeBooleanValue("blockCrossOrganizationWriteAccess", bitLockerRemovableDrivePolicy.blockCrossOrganizationWriteAccess);
    writer.writeEnumValue<BitLockerEncryptionMethod>("encryptionMethod", bitLockerRemovableDrivePolicy.encryptionMethod);
    writer.writeStringValue("@odata.type", bitLockerRemovableDrivePolicy.odataType);
    writer.writeBooleanValue("requireEncryptionForWriteAccess", bitLockerRemovableDrivePolicy.requireEncryptionForWriteAccess);
    writer.writeAdditionalData(bitLockerRemovableDrivePolicy.additionalData);
}
// tslint:enable
// eslint-enable
