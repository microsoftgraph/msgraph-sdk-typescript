import {MalwareState} from './malwareState';
import {AdditionalDataHolder, Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export class MalwareStateImpl implements AdditionalDataHolder, MalwareState, Parsable {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    public additionalData: Record<string, unknown>;
    /** Provider-generated malware category (for example, trojan, ransomware, etc.). */
    public category?: string | undefined;
    /** Provider-generated malware family (for example, 'wannacry', 'notpetya', etc.). */
    public family?: string | undefined;
    /** Provider-generated malware variant name (for example, Trojan:Win32/Powessere.H). */
    public name?: string | undefined;
    /** Provider-determined severity of this malware. */
    public severity?: string | undefined;
    /** Indicates whether the detected file (malware/vulnerability) was running at the time of detection or was detected at rest on the disk. */
    public wasRunning?: boolean | undefined;
    /**
     * Instantiates a new malwareState and sets the default values.
     * @param malwareStateParameterValue 
     */
    public constructor(malwareStateParameterValue?: MalwareState | undefined) {
        this.additionalData = malwareStateParameterValue?.additionalData ? malwareStateParameterValue?.additionalData! : {}
        this.category = malwareStateParameterValue?.category ;
        this.family = malwareStateParameterValue?.family ;
        this.name = malwareStateParameterValue?.name ;
        this.severity = malwareStateParameterValue?.severity ;
        this.wasRunning = malwareStateParameterValue?.wasRunning ;
    };
    /**
     * The deserialization information for the current model
     * @returns a Record<string, (node: ParseNode) => void>
     */
    public getFieldDeserializers() : Record<string, (node: ParseNode) => void> {
        return {
            "category": n => { this.category = n.getStringValue(); },
            "family": n => { this.family = n.getStringValue(); },
            "name": n => { this.name = n.getStringValue(); },
            "severity": n => { this.severity = n.getStringValue(); },
            "wasRunning": n => { this.wasRunning = n.getBooleanValue(); },
        };
    };
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    public serialize(writer: SerializationWriter) : void {
        if(!writer) throw new Error("writer cannot be undefined");
        if(this.category){
        writer.writeStringValue("category", this.category);
        }
        if(this.family){
        writer.writeStringValue("family", this.family);
        }
        if(this.name){
        writer.writeStringValue("name", this.name);
        }
        if(this.severity){
        writer.writeStringValue("severity", this.severity);
        }
        if(this.wasRunning){
        writer.writeBooleanValue("wasRunning", this.wasRunning);
        }
        writer.writeAdditionalData(this.additionalData);
    };
}
