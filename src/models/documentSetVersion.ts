// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDocumentSetVersionItemFromDiscriminatorValue, serializeDocumentSetVersionItem, type DocumentSetVersionItem } from './documentSetVersionItem';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { deserializeIntoListItemVersion, serializeListItemVersion, type ListItemVersion } from './listItemVersion';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDocumentSetVersionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDocumentSetVersion;
}
export function deserializeIntoDocumentSetVersion(documentSetVersion: DocumentSetVersion | undefined = {} as DocumentSetVersion) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoListItemVersion(documentSetVersion),
        "comment": n => { documentSetVersion.comment = n.getStringValue(); },
        "createdBy": n => { documentSetVersion.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { documentSetVersion.createdDateTime = n.getDateValue(); },
        "items": n => { documentSetVersion.items = n.getCollectionOfObjectValues<DocumentSetVersionItem>(createDocumentSetVersionItemFromDiscriminatorValue); },
        "shouldCaptureMinorVersion": n => { documentSetVersion.shouldCaptureMinorVersion = n.getBooleanValue(); },
    }
}
export interface DocumentSetVersion extends ListItemVersion, Parsable {
    /**
     * Comment about the captured version.
     */
    comment?: string;
    /**
     * User who captured the version.
     */
    createdBy?: IdentitySet;
    /**
     * Date and time when this version was created.
     */
    createdDateTime?: Date;
    /**
     * Items within the document set that are captured as part of this version.
     */
    items?: DocumentSetVersionItem[];
    /**
     * If true, minor versions of items are also captured; otherwise, only major versions will be captured. Default value is false.
     */
    shouldCaptureMinorVersion?: boolean;
}
export function serializeDocumentSetVersion(writer: SerializationWriter, documentSetVersion: DocumentSetVersion | undefined = {} as DocumentSetVersion) : void {
    serializeListItemVersion(writer, documentSetVersion)
    writer.writeStringValue("comment", documentSetVersion.comment);
    writer.writeObjectValue<IdentitySet>("createdBy", documentSetVersion.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", documentSetVersion.createdDateTime);
    writer.writeCollectionOfObjectValues<DocumentSetVersionItem>("items", documentSetVersion.items, serializeDocumentSetVersionItem);
    writer.writeBooleanValue("shouldCaptureMinorVersion", documentSetVersion.shouldCaptureMinorVersion);
}
// tslint:enable
// eslint-enable
