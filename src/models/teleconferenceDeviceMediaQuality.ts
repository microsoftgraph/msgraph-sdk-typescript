// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type TeleconferenceDeviceAudioQuality, type TeleconferenceDeviceScreenSharingQuality, type TeleconferenceDeviceVideoQuality } from './index';
import { deserializeIntoTeleconferenceDeviceAudioQuality } from './teleconferenceDeviceAudioQuality';
import { deserializeIntoTeleconferenceDeviceScreenSharingQuality } from './teleconferenceDeviceScreenSharingQuality';
import { deserializeIntoTeleconferenceDeviceVideoQuality } from './teleconferenceDeviceVideoQuality';
import { type AdditionalDataHolder, type Duration, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTeleconferenceDeviceMediaQualityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.teleconferenceDeviceAudioQuality":
                    return deserializeIntoTeleconferenceDeviceAudioQuality;
                case "#microsoft.graph.teleconferenceDeviceScreenSharingQuality":
                    return deserializeIntoTeleconferenceDeviceScreenSharingQuality;
                case "#microsoft.graph.teleconferenceDeviceVideoQuality":
                    return deserializeIntoTeleconferenceDeviceVideoQuality;
            }
        }
    }
    return deserializeIntoTeleconferenceDeviceMediaQuality;
}
export function deserializeIntoTeleconferenceDeviceMediaQuality(teleconferenceDeviceMediaQuality: TeleconferenceDeviceMediaQuality | undefined = {} as TeleconferenceDeviceMediaQuality) : Record<string, (node: ParseNode) => void> {
    return {
        "averageInboundJitter": n => { teleconferenceDeviceMediaQuality.averageInboundJitter = n.getDurationValue(); },
        "averageInboundPacketLossRateInPercentage": n => { teleconferenceDeviceMediaQuality.averageInboundPacketLossRateInPercentage = n.getNumberValue(); },
        "averageInboundRoundTripDelay": n => { teleconferenceDeviceMediaQuality.averageInboundRoundTripDelay = n.getDurationValue(); },
        "averageOutboundJitter": n => { teleconferenceDeviceMediaQuality.averageOutboundJitter = n.getDurationValue(); },
        "averageOutboundPacketLossRateInPercentage": n => { teleconferenceDeviceMediaQuality.averageOutboundPacketLossRateInPercentage = n.getNumberValue(); },
        "averageOutboundRoundTripDelay": n => { teleconferenceDeviceMediaQuality.averageOutboundRoundTripDelay = n.getDurationValue(); },
        "channelIndex": n => { teleconferenceDeviceMediaQuality.channelIndex = n.getNumberValue(); },
        "inboundPackets": n => { teleconferenceDeviceMediaQuality.inboundPackets = n.getNumberValue(); },
        "localIPAddress": n => { teleconferenceDeviceMediaQuality.localIPAddress = n.getStringValue(); },
        "localPort": n => { teleconferenceDeviceMediaQuality.localPort = n.getNumberValue(); },
        "maximumInboundJitter": n => { teleconferenceDeviceMediaQuality.maximumInboundJitter = n.getDurationValue(); },
        "maximumInboundPacketLossRateInPercentage": n => { teleconferenceDeviceMediaQuality.maximumInboundPacketLossRateInPercentage = n.getNumberValue(); },
        "maximumInboundRoundTripDelay": n => { teleconferenceDeviceMediaQuality.maximumInboundRoundTripDelay = n.getDurationValue(); },
        "maximumOutboundJitter": n => { teleconferenceDeviceMediaQuality.maximumOutboundJitter = n.getDurationValue(); },
        "maximumOutboundPacketLossRateInPercentage": n => { teleconferenceDeviceMediaQuality.maximumOutboundPacketLossRateInPercentage = n.getNumberValue(); },
        "maximumOutboundRoundTripDelay": n => { teleconferenceDeviceMediaQuality.maximumOutboundRoundTripDelay = n.getDurationValue(); },
        "mediaDuration": n => { teleconferenceDeviceMediaQuality.mediaDuration = n.getDurationValue(); },
        "networkLinkSpeedInBytes": n => { teleconferenceDeviceMediaQuality.networkLinkSpeedInBytes = n.getNumberValue(); },
        "@odata.type": n => { teleconferenceDeviceMediaQuality.odataType = n.getStringValue(); },
        "outboundPackets": n => { teleconferenceDeviceMediaQuality.outboundPackets = n.getNumberValue(); },
        "remoteIPAddress": n => { teleconferenceDeviceMediaQuality.remoteIPAddress = n.getStringValue(); },
        "remotePort": n => { teleconferenceDeviceMediaQuality.remotePort = n.getNumberValue(); },
    }
}
export function serializeTeleconferenceDeviceMediaQuality(writer: SerializationWriter, teleconferenceDeviceMediaQuality: TeleconferenceDeviceMediaQuality | undefined = {} as TeleconferenceDeviceMediaQuality) : void {
    writer.writeDurationValue("averageInboundJitter", teleconferenceDeviceMediaQuality.averageInboundJitter);
    writer.writeNumberValue("averageInboundPacketLossRateInPercentage", teleconferenceDeviceMediaQuality.averageInboundPacketLossRateInPercentage);
    writer.writeDurationValue("averageInboundRoundTripDelay", teleconferenceDeviceMediaQuality.averageInboundRoundTripDelay);
    writer.writeDurationValue("averageOutboundJitter", teleconferenceDeviceMediaQuality.averageOutboundJitter);
    writer.writeNumberValue("averageOutboundPacketLossRateInPercentage", teleconferenceDeviceMediaQuality.averageOutboundPacketLossRateInPercentage);
    writer.writeDurationValue("averageOutboundRoundTripDelay", teleconferenceDeviceMediaQuality.averageOutboundRoundTripDelay);
    writer.writeNumberValue("channelIndex", teleconferenceDeviceMediaQuality.channelIndex);
    writer.writeNumberValue("inboundPackets", teleconferenceDeviceMediaQuality.inboundPackets);
    writer.writeStringValue("localIPAddress", teleconferenceDeviceMediaQuality.localIPAddress);
    writer.writeNumberValue("localPort", teleconferenceDeviceMediaQuality.localPort);
    writer.writeDurationValue("maximumInboundJitter", teleconferenceDeviceMediaQuality.maximumInboundJitter);
    writer.writeNumberValue("maximumInboundPacketLossRateInPercentage", teleconferenceDeviceMediaQuality.maximumInboundPacketLossRateInPercentage);
    writer.writeDurationValue("maximumInboundRoundTripDelay", teleconferenceDeviceMediaQuality.maximumInboundRoundTripDelay);
    writer.writeDurationValue("maximumOutboundJitter", teleconferenceDeviceMediaQuality.maximumOutboundJitter);
    writer.writeNumberValue("maximumOutboundPacketLossRateInPercentage", teleconferenceDeviceMediaQuality.maximumOutboundPacketLossRateInPercentage);
    writer.writeDurationValue("maximumOutboundRoundTripDelay", teleconferenceDeviceMediaQuality.maximumOutboundRoundTripDelay);
    writer.writeDurationValue("mediaDuration", teleconferenceDeviceMediaQuality.mediaDuration);
    writer.writeNumberValue("networkLinkSpeedInBytes", teleconferenceDeviceMediaQuality.networkLinkSpeedInBytes);
    writer.writeStringValue("@odata.type", teleconferenceDeviceMediaQuality.odataType);
    writer.writeNumberValue("outboundPackets", teleconferenceDeviceMediaQuality.outboundPackets);
    writer.writeStringValue("remoteIPAddress", teleconferenceDeviceMediaQuality.remoteIPAddress);
    writer.writeNumberValue("remotePort", teleconferenceDeviceMediaQuality.remotePort);
    writer.writeAdditionalData(teleconferenceDeviceMediaQuality.additionalData);
}
export interface TeleconferenceDeviceMediaQuality extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The average inbound stream network jitter.
     */
    averageInboundJitter?: Duration;
    /**
     * The average inbound stream packet loss rate in percentage (0-100). For example, 0.01 means 0.01%.
     */
    averageInboundPacketLossRateInPercentage?: number;
    /**
     * The average inbound stream network round trip delay.
     */
    averageInboundRoundTripDelay?: Duration;
    /**
     * The average outbound stream network jitter.
     */
    averageOutboundJitter?: Duration;
    /**
     * The average outbound stream packet loss rate in percentage (0-100). For example, 0.01 means 0.01%.
     */
    averageOutboundPacketLossRateInPercentage?: number;
    /**
     * The average outbound stream network round trip delay.
     */
    averageOutboundRoundTripDelay?: Duration;
    /**
     * The channel index of media. Indexing begins with 1.  If a media session contains 3 video modalities, channel indexes will be 1, 2, and 3.
     */
    channelIndex?: number;
    /**
     * The total number of the inbound packets.
     */
    inboundPackets?: number;
    /**
     * the local IP address for the media session.
     */
    localIPAddress?: string;
    /**
     * The local media port.
     */
    localPort?: number;
    /**
     * The maximum inbound stream network jitter.
     */
    maximumInboundJitter?: Duration;
    /**
     * The maximum inbound stream packet loss rate in percentage (0-100). For example, 0.01 means 0.01%.
     */
    maximumInboundPacketLossRateInPercentage?: number;
    /**
     * The maximum inbound stream network round trip delay.
     */
    maximumInboundRoundTripDelay?: Duration;
    /**
     * The maximum outbound stream network jitter.
     */
    maximumOutboundJitter?: Duration;
    /**
     * The maximum outbound stream packet loss rate in percentage (0-100). For example, 0.01 means 0.01%.
     */
    maximumOutboundPacketLossRateInPercentage?: number;
    /**
     * The maximum outbound stream network round trip delay.
     */
    maximumOutboundRoundTripDelay?: Duration;
    /**
     * The total modality duration. If the media enabled and disabled multiple times, MediaDuration will the summation of all of the durations.
     */
    mediaDuration?: Duration;
    /**
     * The network link speed in bytes
     */
    networkLinkSpeedInBytes?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The total number of the outbound packets.
     */
    outboundPackets?: number;
    /**
     * The remote IP address for the media session.
     */
    remoteIPAddress?: string;
    /**
     * The remote media port.
     */
    remotePort?: number;
}
// tslint:enable
// eslint-enable
