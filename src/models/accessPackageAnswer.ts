// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAccessPackageAnswerString } from './accessPackageAnswerString';
import { createAccessPackageQuestionFromDiscriminatorValue, serializeAccessPackageQuestion, type AccessPackageQuestion } from './accessPackageQuestion';
import { type AccessPackageAnswerString } from './index';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageAnswer extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The answeredQuestion property
     */
    answeredQuestion?: AccessPackageQuestion;
    /**
     * The localized display value shown to the requestor and approvers.
     */
    displayValue?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createAccessPackageAnswerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.accessPackageAnswerString":
                    return deserializeIntoAccessPackageAnswerString;
            }
        }
    }
    return deserializeIntoAccessPackageAnswer;
}
export function deserializeIntoAccessPackageAnswer(accessPackageAnswer: AccessPackageAnswer | undefined = {} as AccessPackageAnswer) : Record<string, (node: ParseNode) => void> {
    return {
        "answeredQuestion": n => { accessPackageAnswer.answeredQuestion = n.getObjectValue<AccessPackageQuestion>(createAccessPackageQuestionFromDiscriminatorValue); },
        "displayValue": n => { accessPackageAnswer.displayValue = n.getStringValue(); },
        "@odata.type": n => { accessPackageAnswer.odataType = n.getStringValue(); },
    }
}
export function serializeAccessPackageAnswer(writer: SerializationWriter, accessPackageAnswer: AccessPackageAnswer | undefined = {} as AccessPackageAnswer) : void {
        writer.writeObjectValue<AccessPackageQuestion>("answeredQuestion", accessPackageAnswer.answeredQuestion, );
        writer.writeStringValue("displayValue", accessPackageAnswer.displayValue);
        writer.writeStringValue("@odata.type", accessPackageAnswer.odataType);
        writer.writeAdditionalData(accessPackageAnswer.additionalData);
}
// tslint:enable
// eslint-enable
