// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createApprovalFromDiscriminatorValue, serializeApproval, type Approval } from './approval';
import { deserializeIntoRequest, serializeRequest, type Request } from './request';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserConsentRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserConsentRequest;
}
export function deserializeIntoUserConsentRequest(userConsentRequest: UserConsentRequest | undefined = {} as UserConsentRequest) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRequest(userConsentRequest),
        "approval": n => { userConsentRequest.approval = n.getObjectValue<Approval>(createApprovalFromDiscriminatorValue); },
        "reason": n => { userConsentRequest.reason = n.getStringValue(); },
    }
}
export function serializeUserConsentRequest(writer: SerializationWriter, userConsentRequest: UserConsentRequest | undefined = {} as UserConsentRequest) : void {
        serializeRequest(writer, userConsentRequest)
        writer.writeObjectValue<Approval>("approval", userConsentRequest.approval, );
        writer.writeStringValue("reason", userConsentRequest.reason);
}
export interface UserConsentRequest extends Parsable, Request {
    /**
     * Approval decisions associated with a request.
     */
    approval?: Approval;
    /**
     * The user's justification for requiring access to the app. Supports $filter (eq only) and $orderby.
     */
    reason?: string;
}
// tslint:enable
// eslint-enable
