// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFileEncryptionInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFileEncryptionInfo;
}
export function deserializeIntoFileEncryptionInfo(fileEncryptionInfo: FileEncryptionInfo | undefined = {} as FileEncryptionInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "encryptionKey": n => { fileEncryptionInfo.encryptionKey = n.getStringValue(); },
        "fileDigest": n => { fileEncryptionInfo.fileDigest = n.getStringValue(); },
        "fileDigestAlgorithm": n => { fileEncryptionInfo.fileDigestAlgorithm = n.getStringValue(); },
        "initializationVector": n => { fileEncryptionInfo.initializationVector = n.getStringValue(); },
        "mac": n => { fileEncryptionInfo.mac = n.getStringValue(); },
        "macKey": n => { fileEncryptionInfo.macKey = n.getStringValue(); },
        "@odata.type": n => { fileEncryptionInfo.odataType = n.getStringValue(); },
        "profileIdentifier": n => { fileEncryptionInfo.profileIdentifier = n.getStringValue(); },
    }
}
export interface FileEncryptionInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The key used to encrypt the file content.
     */
    encryptionKey?: string;
    /**
     * The file digest prior to encryption. ProfileVersion1 requires a non-null FileDigest.
     */
    fileDigest?: string;
    /**
     * The file digest algorithm. ProfileVersion1 currently only supports SHA256 for the FileDigestAlgorithm.
     */
    fileDigestAlgorithm?: string;
    /**
     * The initialization vector (IV) used for the encryption algorithm. Must be 16 bytes.
     */
    initializationVector?: string;
    /**
     * The hash of the concatenation of the IV and encrypted file content. Must be 32 bytes.
     */
    mac?: string;
    /**
     * The key used to compute the message authentication code of the concatenation of the IV and encrypted file content. Must be 32 bytes.
     */
    macKey?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The profile identifier. Maps to the strategy used to encrypt the file. Currently, only ProfileVersion1 is supported.
     */
    profileIdentifier?: string;
}
export function serializeFileEncryptionInfo(writer: SerializationWriter, fileEncryptionInfo: FileEncryptionInfo | undefined = {} as FileEncryptionInfo) : void {
    writer.writeStringValue("encryptionKey", fileEncryptionInfo.encryptionKey);
    writer.writeStringValue("fileDigest", fileEncryptionInfo.fileDigest);
    writer.writeStringValue("fileDigestAlgorithm", fileEncryptionInfo.fileDigestAlgorithm);
    writer.writeStringValue("initializationVector", fileEncryptionInfo.initializationVector);
    writer.writeStringValue("mac", fileEncryptionInfo.mac);
    writer.writeStringValue("macKey", fileEncryptionInfo.macKey);
    writer.writeStringValue("@odata.type", fileEncryptionInfo.odataType);
    writer.writeStringValue("profileIdentifier", fileEncryptionInfo.profileIdentifier);
    writer.writeAdditionalData(fileEncryptionInfo.additionalData);
}
// tslint:enable
// eslint-enable
