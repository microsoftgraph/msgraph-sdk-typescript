// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AndroidRequiredPasswordType } from './androidRequiredPasswordType';
import { deserializeIntoDeviceCompliancePolicy, serializeDeviceCompliancePolicy, type DeviceCompliancePolicy } from './deviceCompliancePolicy';
import { DeviceThreatProtectionLevel } from './deviceThreatProtectionLevel';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AndroidCompliancePolicy extends DeviceCompliancePolicy, Parsable {
    /**
     * Require that devices have enabled device threat protection.
     */
    deviceThreatProtectionEnabled?: boolean;
    /**
     * Device threat protection levels for the Device Threat Protection API.
     */
    deviceThreatProtectionRequiredSecurityLevel?: DeviceThreatProtectionLevel;
    /**
     * Minimum Android security patch level.
     */
    minAndroidSecurityPatchLevel?: string;
    /**
     * Maximum Android version.
     */
    osMaximumVersion?: string;
    /**
     * Minimum Android version.
     */
    osMinimumVersion?: string;
    /**
     * Number of days before the password expires. Valid values 1 to 365
     */
    passwordExpirationDays?: number;
    /**
     * Minimum password length. Valid values 4 to 16
     */
    passwordMinimumLength?: number;
    /**
     * Minutes of inactivity before a password is required.
     */
    passwordMinutesOfInactivityBeforeLock?: number;
    /**
     * Number of previous passwords to block. Valid values 1 to 24
     */
    passwordPreviousPasswordBlockCount?: number;
    /**
     * Require a password to unlock device.
     */
    passwordRequired?: boolean;
    /**
     * Android required password type.
     */
    passwordRequiredType?: AndroidRequiredPasswordType;
    /**
     * Devices must not be jailbroken or rooted.
     */
    securityBlockJailbrokenDevices?: boolean;
    /**
     * Disable USB debugging on Android devices.
     */
    securityDisableUsbDebugging?: boolean;
    /**
     * Require that devices disallow installation of apps from unknown sources.
     */
    securityPreventInstallAppsFromUnknownSources?: boolean;
    /**
     * Require the device to pass the Company Portal client app runtime integrity check.
     */
    securityRequireCompanyPortalAppIntegrity?: boolean;
    /**
     * Require Google Play Services to be installed and enabled on the device.
     */
    securityRequireGooglePlayServices?: boolean;
    /**
     * Require the device to pass the SafetyNet basic integrity check.
     */
    securityRequireSafetyNetAttestationBasicIntegrity?: boolean;
    /**
     * Require the device to pass the SafetyNet certified device check.
     */
    securityRequireSafetyNetAttestationCertifiedDevice?: boolean;
    /**
     * Require the device to have up to date security providers. The device will require Google Play Services to be enabled and up to date.
     */
    securityRequireUpToDateSecurityProviders?: boolean;
    /**
     * Require the Android Verify apps feature is turned on.
     */
    securityRequireVerifyApps?: boolean;
    /**
     * Require encryption on Android devices.
     */
    storageRequireEncryption?: boolean;
}
export function createAndroidCompliancePolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAndroidCompliancePolicy;
}
export function deserializeIntoAndroidCompliancePolicy(androidCompliancePolicy: AndroidCompliancePolicy | undefined = {} as AndroidCompliancePolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceCompliancePolicy(androidCompliancePolicy),
        "deviceThreatProtectionEnabled": n => { androidCompliancePolicy.deviceThreatProtectionEnabled = n.getBooleanValue(); },
        "deviceThreatProtectionRequiredSecurityLevel": n => { androidCompliancePolicy.deviceThreatProtectionRequiredSecurityLevel = n.getEnumValue<DeviceThreatProtectionLevel>(DeviceThreatProtectionLevel); },
        "minAndroidSecurityPatchLevel": n => { androidCompliancePolicy.minAndroidSecurityPatchLevel = n.getStringValue(); },
        "osMaximumVersion": n => { androidCompliancePolicy.osMaximumVersion = n.getStringValue(); },
        "osMinimumVersion": n => { androidCompliancePolicy.osMinimumVersion = n.getStringValue(); },
        "passwordExpirationDays": n => { androidCompliancePolicy.passwordExpirationDays = n.getNumberValue(); },
        "passwordMinimumLength": n => { androidCompliancePolicy.passwordMinimumLength = n.getNumberValue(); },
        "passwordMinutesOfInactivityBeforeLock": n => { androidCompliancePolicy.passwordMinutesOfInactivityBeforeLock = n.getNumberValue(); },
        "passwordPreviousPasswordBlockCount": n => { androidCompliancePolicy.passwordPreviousPasswordBlockCount = n.getNumberValue(); },
        "passwordRequired": n => { androidCompliancePolicy.passwordRequired = n.getBooleanValue(); },
        "passwordRequiredType": n => { androidCompliancePolicy.passwordRequiredType = n.getEnumValue<AndroidRequiredPasswordType>(AndroidRequiredPasswordType); },
        "securityBlockJailbrokenDevices": n => { androidCompliancePolicy.securityBlockJailbrokenDevices = n.getBooleanValue(); },
        "securityDisableUsbDebugging": n => { androidCompliancePolicy.securityDisableUsbDebugging = n.getBooleanValue(); },
        "securityPreventInstallAppsFromUnknownSources": n => { androidCompliancePolicy.securityPreventInstallAppsFromUnknownSources = n.getBooleanValue(); },
        "securityRequireCompanyPortalAppIntegrity": n => { androidCompliancePolicy.securityRequireCompanyPortalAppIntegrity = n.getBooleanValue(); },
        "securityRequireGooglePlayServices": n => { androidCompliancePolicy.securityRequireGooglePlayServices = n.getBooleanValue(); },
        "securityRequireSafetyNetAttestationBasicIntegrity": n => { androidCompliancePolicy.securityRequireSafetyNetAttestationBasicIntegrity = n.getBooleanValue(); },
        "securityRequireSafetyNetAttestationCertifiedDevice": n => { androidCompliancePolicy.securityRequireSafetyNetAttestationCertifiedDevice = n.getBooleanValue(); },
        "securityRequireUpToDateSecurityProviders": n => { androidCompliancePolicy.securityRequireUpToDateSecurityProviders = n.getBooleanValue(); },
        "securityRequireVerifyApps": n => { androidCompliancePolicy.securityRequireVerifyApps = n.getBooleanValue(); },
        "storageRequireEncryption": n => { androidCompliancePolicy.storageRequireEncryption = n.getBooleanValue(); },
    }
}
export function serializeAndroidCompliancePolicy(writer: SerializationWriter, androidCompliancePolicy: AndroidCompliancePolicy | undefined = {} as AndroidCompliancePolicy) : void {
        serializeDeviceCompliancePolicy(writer, androidCompliancePolicy)
        writer.writeBooleanValue("deviceThreatProtectionEnabled", androidCompliancePolicy.deviceThreatProtectionEnabled);
        writer.writeEnumValue<DeviceThreatProtectionLevel>("deviceThreatProtectionRequiredSecurityLevel", androidCompliancePolicy.deviceThreatProtectionRequiredSecurityLevel);
        writer.writeStringValue("minAndroidSecurityPatchLevel", androidCompliancePolicy.minAndroidSecurityPatchLevel);
        writer.writeStringValue("osMaximumVersion", androidCompliancePolicy.osMaximumVersion);
        writer.writeStringValue("osMinimumVersion", androidCompliancePolicy.osMinimumVersion);
        writer.writeNumberValue("passwordExpirationDays", androidCompliancePolicy.passwordExpirationDays);
        writer.writeNumberValue("passwordMinimumLength", androidCompliancePolicy.passwordMinimumLength);
        writer.writeNumberValue("passwordMinutesOfInactivityBeforeLock", androidCompliancePolicy.passwordMinutesOfInactivityBeforeLock);
        writer.writeNumberValue("passwordPreviousPasswordBlockCount", androidCompliancePolicy.passwordPreviousPasswordBlockCount);
        writer.writeBooleanValue("passwordRequired", androidCompliancePolicy.passwordRequired);
        writer.writeEnumValue<AndroidRequiredPasswordType>("passwordRequiredType", androidCompliancePolicy.passwordRequiredType);
        writer.writeBooleanValue("securityBlockJailbrokenDevices", androidCompliancePolicy.securityBlockJailbrokenDevices);
        writer.writeBooleanValue("securityDisableUsbDebugging", androidCompliancePolicy.securityDisableUsbDebugging);
        writer.writeBooleanValue("securityPreventInstallAppsFromUnknownSources", androidCompliancePolicy.securityPreventInstallAppsFromUnknownSources);
        writer.writeBooleanValue("securityRequireCompanyPortalAppIntegrity", androidCompliancePolicy.securityRequireCompanyPortalAppIntegrity);
        writer.writeBooleanValue("securityRequireGooglePlayServices", androidCompliancePolicy.securityRequireGooglePlayServices);
        writer.writeBooleanValue("securityRequireSafetyNetAttestationBasicIntegrity", androidCompliancePolicy.securityRequireSafetyNetAttestationBasicIntegrity);
        writer.writeBooleanValue("securityRequireSafetyNetAttestationCertifiedDevice", androidCompliancePolicy.securityRequireSafetyNetAttestationCertifiedDevice);
        writer.writeBooleanValue("securityRequireUpToDateSecurityProviders", androidCompliancePolicy.securityRequireUpToDateSecurityProviders);
        writer.writeBooleanValue("securityRequireVerifyApps", androidCompliancePolicy.securityRequireVerifyApps);
        writer.writeBooleanValue("storageRequireEncryption", androidCompliancePolicy.storageRequireEncryption);
}
// tslint:enable
// eslint-enable
