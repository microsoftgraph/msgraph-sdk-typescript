// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAuthenticationCombinationConfigurationFromDiscriminatorValue, serializeAuthenticationCombinationConfiguration, type AuthenticationCombinationConfiguration } from './authenticationCombinationConfiguration';
import { AuthenticationMethodModes } from './authenticationMethodModes';
import { AuthenticationStrengthPolicyType } from './authenticationStrengthPolicyType';
import { AuthenticationStrengthRequirements } from './authenticationStrengthRequirements';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthenticationStrengthPolicy extends Entity, Parsable {
    /**
     * A collection of authentication method modes that are required be used to satify this authentication strength.
     */
    allowedCombinations?: AuthenticationMethodModes[];
    /**
     * Settings that may be used to require specific types or instances of an authentication method to be used when authenticating with a specified combination of authentication methods.
     */
    combinationConfigurations?: AuthenticationCombinationConfiguration[];
    /**
     * The datetime when this policy was created.
     */
    createdDateTime?: Date;
    /**
     * The human-readable description of this policy.
     */
    description?: string;
    /**
     * The human-readable display name of this policy. Supports $filter (eq, ne, not , and in).
     */
    displayName?: string;
    /**
     * The datetime when this policy was last modified.
     */
    modifiedDateTime?: Date;
    /**
     * The policyType property
     */
    policyType?: AuthenticationStrengthPolicyType;
    /**
     * The requirementsSatisfied property
     */
    requirementsSatisfied?: AuthenticationStrengthRequirements[];
}
export function createAuthenticationStrengthPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuthenticationStrengthPolicy;
}
export function deserializeIntoAuthenticationStrengthPolicy(authenticationStrengthPolicy: AuthenticationStrengthPolicy | undefined = {} as AuthenticationStrengthPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(authenticationStrengthPolicy),
        "allowedCombinations": n => { authenticationStrengthPolicy.allowedCombinations = n.getCollectionOfEnumValues<AuthenticationMethodModes>(AuthenticationMethodModes); },
        "combinationConfigurations": n => { authenticationStrengthPolicy.combinationConfigurations = n.getCollectionOfObjectValues<AuthenticationCombinationConfiguration>(createAuthenticationCombinationConfigurationFromDiscriminatorValue); },
        "createdDateTime": n => { authenticationStrengthPolicy.createdDateTime = n.getDateValue(); },
        "description": n => { authenticationStrengthPolicy.description = n.getStringValue(); },
        "displayName": n => { authenticationStrengthPolicy.displayName = n.getStringValue(); },
        "modifiedDateTime": n => { authenticationStrengthPolicy.modifiedDateTime = n.getDateValue(); },
        "policyType": n => { authenticationStrengthPolicy.policyType = n.getEnumValue<AuthenticationStrengthPolicyType>(AuthenticationStrengthPolicyType); },
        "requirementsSatisfied": n => { authenticationStrengthPolicy.requirementsSatisfied = n.getCollectionOfEnumValues<AuthenticationStrengthRequirements>(AuthenticationStrengthRequirements); },
    }
}
export function serializeAuthenticationStrengthPolicy(writer: SerializationWriter, authenticationStrengthPolicy: AuthenticationStrengthPolicy | undefined = {} as AuthenticationStrengthPolicy) : void {
    serializeEntity(writer, authenticationStrengthPolicy)
    if(authenticationStrengthPolicy.allowedCombinations)
    writer.writeEnumValue<AuthenticationMethodModes>("allowedCombinations", ...authenticationStrengthPolicy.allowedCombinations);
    writer.writeCollectionOfObjectValues<AuthenticationCombinationConfiguration>("combinationConfigurations", authenticationStrengthPolicy.combinationConfigurations, serializeAuthenticationCombinationConfiguration);
    writer.writeDateValue("createdDateTime", authenticationStrengthPolicy.createdDateTime);
    writer.writeStringValue("description", authenticationStrengthPolicy.description);
    writer.writeStringValue("displayName", authenticationStrengthPolicy.displayName);
    writer.writeDateValue("modifiedDateTime", authenticationStrengthPolicy.modifiedDateTime);
    writer.writeEnumValue<AuthenticationStrengthPolicyType>("policyType", authenticationStrengthPolicy.policyType);
    writer.writeEnumValue<AuthenticationStrengthRequirements[]>("requirementsSatisfied", authenticationStrengthPolicy.requirementsSatisfied);
}
// tslint:enable
// eslint-enable
