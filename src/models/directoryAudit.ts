// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAuditActivityInitiatorFromDiscriminatorValue, serializeAuditActivityInitiator, type AuditActivityInitiator } from './auditActivityInitiator';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createKeyValueFromDiscriminatorValue, serializeKeyValue, type KeyValue } from './keyValue';
import { OperationResult } from './operationResult';
import { createTargetResourceFromDiscriminatorValue, serializeTargetResource, type TargetResource } from './targetResource';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDirectoryAuditFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDirectoryAudit;
}
export function deserializeIntoDirectoryAudit(directoryAudit: DirectoryAudit | undefined = {} as DirectoryAudit) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(directoryAudit),
        "activityDateTime": n => { directoryAudit.activityDateTime = n.getDateValue(); },
        "activityDisplayName": n => { directoryAudit.activityDisplayName = n.getStringValue(); },
        "additionalDetails": n => { directoryAudit.additionalDetails = n.getCollectionOfObjectValues<KeyValue>(createKeyValueFromDiscriminatorValue); },
        "category": n => { directoryAudit.category = n.getStringValue(); },
        "correlationId": n => { directoryAudit.correlationId = n.getStringValue(); },
        "initiatedBy": n => { directoryAudit.initiatedBy = n.getObjectValue<AuditActivityInitiator>(createAuditActivityInitiatorFromDiscriminatorValue); },
        "loggedByService": n => { directoryAudit.loggedByService = n.getStringValue(); },
        "operationType": n => { directoryAudit.operationType = n.getStringValue(); },
        "result": n => { directoryAudit.result = n.getEnumValue<OperationResult>(OperationResult); },
        "resultReason": n => { directoryAudit.resultReason = n.getStringValue(); },
        "targetResources": n => { directoryAudit.targetResources = n.getCollectionOfObjectValues<TargetResource>(createTargetResourceFromDiscriminatorValue); },
    }
}
export interface DirectoryAudit extends Entity, Parsable {
    /**
     * Indicates the date and time the activity was performed. The Timestamp type is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ge, le) and $orderby.
     */
    activityDateTime?: Date;
    /**
     * Indicates the activity name or the operation name (examples: 'Create User' and 'Add member to group'). For a list of activities logged, refer to Microsoft Entra audit log categories and activities. Supports $filter (eq, startswith).
     */
    activityDisplayName?: string;
    /**
     * Indicates additional details on the activity.
     */
    additionalDetails?: KeyValue[];
    /**
     * Indicates which resource category that's targeted by the activity. For example: UserManagement, GroupManagement, ApplicationManagement, RoleManagement. For a list of categories for activities logged, refer to Microsoft Entra audit log categories and activities.
     */
    category?: string;
    /**
     * Indicates a unique ID that helps correlate activities that span across various services. Can be used to trace logs across services. Supports $filter (eq).
     */
    correlationId?: string;
    /**
     * The initiatedBy property
     */
    initiatedBy?: AuditActivityInitiator;
    /**
     * Indicates information on which service initiated the activity (For example: Self-service Password Management, Core Directory, B2C, Invited Users, Microsoft Identity Manager, Privileged Identity Management. Supports $filter (eq).
     */
    loggedByService?: string;
    /**
     * Indicates the type of operation that was performed. The possible values include but are not limited to the following: Add, Assign, Update, Unassign, and Delete.
     */
    operationType?: string;
    /**
     * Indicates the result of the activity. Possible values are: success, failure, timeout, unknownFutureValue.
     */
    result?: OperationResult;
    /**
     * Indicates the reason for failure if the result is failure or timeout.
     */
    resultReason?: string;
    /**
     * Indicates information on which resource was changed due to the activity. Target Resource Type can be User, Device, Directory, App, Role, Group, Policy or Other. Supports $filter (eq) for id and displayName; and $filter (startswith) for displayName.
     */
    targetResources?: TargetResource[];
}
export function serializeDirectoryAudit(writer: SerializationWriter, directoryAudit: DirectoryAudit | undefined = {} as DirectoryAudit) : void {
    serializeEntity(writer, directoryAudit)
    writer.writeDateValue("activityDateTime", directoryAudit.activityDateTime);
    writer.writeStringValue("activityDisplayName", directoryAudit.activityDisplayName);
    writer.writeCollectionOfObjectValues<KeyValue>("additionalDetails", directoryAudit.additionalDetails, serializeKeyValue);
    writer.writeStringValue("category", directoryAudit.category);
    writer.writeStringValue("correlationId", directoryAudit.correlationId);
    writer.writeObjectValue<AuditActivityInitiator>("initiatedBy", directoryAudit.initiatedBy, serializeAuditActivityInitiator);
    writer.writeStringValue("loggedByService", directoryAudit.loggedByService);
    writer.writeStringValue("operationType", directoryAudit.operationType);
    writer.writeEnumValue<OperationResult>("result", directoryAudit.result);
    writer.writeStringValue("resultReason", directoryAudit.resultReason);
    writer.writeCollectionOfObjectValues<TargetResource>("targetResources", directoryAudit.targetResources, serializeTargetResource);
}
// tslint:enable
// eslint-enable
