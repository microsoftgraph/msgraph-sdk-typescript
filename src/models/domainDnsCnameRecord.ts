// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDomainDnsRecord, serializeDomainDnsRecord, type DomainDnsRecord } from './domainDnsRecord';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDomainDnsCnameRecordFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDomainDnsCnameRecord;
}
export function deserializeIntoDomainDnsCnameRecord(domainDnsCnameRecord: DomainDnsCnameRecord | undefined = {} as DomainDnsCnameRecord) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDomainDnsRecord(domainDnsCnameRecord),
        "canonicalName": n => { domainDnsCnameRecord.canonicalName = n.getStringValue(); },
    }
}
export interface DomainDnsCnameRecord extends DomainDnsRecord, Parsable {
    /**
     * The canonical name of the CNAME record. Used to configure the CNAME record at the DNS host.
     */
    canonicalName?: string;
}
export function serializeDomainDnsCnameRecord(writer: SerializationWriter, domainDnsCnameRecord: DomainDnsCnameRecord | undefined = {} as DomainDnsCnameRecord) : void {
        serializeDomainDnsRecord(writer, domainDnsCnameRecord)
        writer.writeStringValue("canonicalName", domainDnsCnameRecord.canonicalName);
}
// tslint:enable
// eslint-enable
