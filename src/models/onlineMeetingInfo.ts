// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPhoneFromDiscriminatorValue, serializePhone, type Phone } from './phone';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOnlineMeetingInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOnlineMeetingInfo;
}
export function deserializeIntoOnlineMeetingInfo(onlineMeetingInfo: OnlineMeetingInfo | undefined = {} as OnlineMeetingInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "conferenceId": n => { onlineMeetingInfo.conferenceId = n.getStringValue(); },
        "joinUrl": n => { onlineMeetingInfo.joinUrl = n.getStringValue(); },
        "@odata.type": n => { onlineMeetingInfo.odataType = n.getStringValue(); },
        "phones": n => { onlineMeetingInfo.phones = n.getCollectionOfObjectValues<Phone>(createPhoneFromDiscriminatorValue); },
        "quickDial": n => { onlineMeetingInfo.quickDial = n.getStringValue(); },
        "tollFreeNumbers": n => { onlineMeetingInfo.tollFreeNumbers = n.getCollectionOfPrimitiveValues<string>(); },
        "tollNumber": n => { onlineMeetingInfo.tollNumber = n.getStringValue(); },
    }
}
export interface OnlineMeetingInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The ID of the conference.
     */
    conferenceId?: string;
    /**
     * The external link that launches the online meeting. This is a URL that clients launch into a browser and will redirect the user to join the meeting.
     */
    joinUrl?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * All of the phone numbers associated with this conference.
     */
    phones?: Phone[];
    /**
     * The preformatted quick dial for this call.
     */
    quickDial?: string;
    /**
     * The toll free numbers that can be used to join the conference.
     */
    tollFreeNumbers?: string[];
    /**
     * The toll number that can be used to join the conference.
     */
    tollNumber?: string;
}
export function serializeOnlineMeetingInfo(writer: SerializationWriter, onlineMeetingInfo: OnlineMeetingInfo | undefined = {} as OnlineMeetingInfo) : void {
    writer.writeStringValue("conferenceId", onlineMeetingInfo.conferenceId);
    writer.writeStringValue("joinUrl", onlineMeetingInfo.joinUrl);
    writer.writeStringValue("@odata.type", onlineMeetingInfo.odataType);
    writer.writeCollectionOfObjectValues<Phone>("phones", onlineMeetingInfo.phones, serializePhone);
    writer.writeStringValue("quickDial", onlineMeetingInfo.quickDial);
    writer.writeCollectionOfPrimitiveValues<string>("tollFreeNumbers", onlineMeetingInfo.tollFreeNumbers);
    writer.writeStringValue("tollNumber", onlineMeetingInfo.tollNumber);
    writer.writeAdditionalData(onlineMeetingInfo.additionalData);
}
// tslint:enable
// eslint-enable
