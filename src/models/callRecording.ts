// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CallRecording extends Entity, Parsable {
    /**
     * The content property
     */
    content?: string;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The meetingId property
     */
    meetingId?: string;
    /**
     * The meetingOrganizer property
     */
    meetingOrganizer?: IdentitySet;
    /**
     * The recordingContentUrl property
     */
    recordingContentUrl?: string;
}
export function createCallRecordingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCallRecording;
}
export function deserializeIntoCallRecording(callRecording: CallRecording | undefined = {} as CallRecording) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(callRecording),
        "content": n => { callRecording.content = n.getStringValue(); },
        "createdDateTime": n => { callRecording.createdDateTime = n.getDateValue(); },
        "meetingId": n => { callRecording.meetingId = n.getStringValue(); },
        "meetingOrganizer": n => { callRecording.meetingOrganizer = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "recordingContentUrl": n => { callRecording.recordingContentUrl = n.getStringValue(); },
    }
}
export function serializeCallRecording(writer: SerializationWriter, callRecording: CallRecording | undefined = {} as CallRecording) : void {
        serializeEntity(writer, callRecording)
        writer.writeStringValue("content", callRecording.content);
        writer.writeDateValue("createdDateTime", callRecording.createdDateTime);
        writer.writeStringValue("meetingId", callRecording.meetingId);
        writer.writeObjectValue<IdentitySet>("meetingOrganizer", callRecording.meetingOrganizer, serializeIdentitySet);
        writer.writeStringValue("recordingContentUrl", callRecording.recordingContentUrl);
}
// tslint:enable
// eslint-enable
