// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CallRecording extends Entity, Parsable {
    /**
     * The content of the recording. Read-only.
     */
    content?: string;
    /**
     * Date and time at which the recording was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    createdDateTime?: Date;
    /**
     * The unique identifier of the onlineMeeting related to this recording. Read-only.
     */
    meetingId?: string;
    /**
     * The identity information of the organizer of the onlineMeeting related to this recording. Read-only.
     */
    meetingOrganizer?: IdentitySet;
    /**
     * The URL that can be used to access the content of the recording. Read-only.
     */
    recordingContentUrl?: string;
}
export function createCallRecordingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCallRecording;
}
export function deserializeIntoCallRecording(callRecording: CallRecording | undefined = {} as CallRecording) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(callRecording),
        "content": n => { callRecording.content = n.getStringValue(); },
        "createdDateTime": n => { callRecording.createdDateTime = n.getDateValue(); },
        "meetingId": n => { callRecording.meetingId = n.getStringValue(); },
        "meetingOrganizer": n => { callRecording.meetingOrganizer = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "recordingContentUrl": n => { callRecording.recordingContentUrl = n.getStringValue(); },
    }
}
export function serializeCallRecording(writer: SerializationWriter, callRecording: CallRecording | undefined = {} as CallRecording) : void {
    serializeEntity(writer, callRecording)
    writer.writeStringValue("content", callRecording.content);
    writer.writeDateValue("createdDateTime", callRecording.createdDateTime);
    writer.writeStringValue("meetingId", callRecording.meetingId);
    writer.writeObjectValue<IdentitySet>("meetingOrganizer", callRecording.meetingOrganizer, serializeIdentitySet);
    writer.writeStringValue("recordingContentUrl", callRecording.recordingContentUrl);
}
// tslint:enable
// eslint-enable
