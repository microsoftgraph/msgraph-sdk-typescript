// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVirtualEventRegistrationQuestionAnswerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoVirtualEventRegistrationQuestionAnswer;
}
export function deserializeIntoVirtualEventRegistrationQuestionAnswer(virtualEventRegistrationQuestionAnswer: VirtualEventRegistrationQuestionAnswer | undefined = {} as VirtualEventRegistrationQuestionAnswer) : Record<string, (node: ParseNode) => void> {
    return {
        "booleanValue": n => { virtualEventRegistrationQuestionAnswer.booleanValue = n.getBooleanValue(); },
        "displayName": n => { virtualEventRegistrationQuestionAnswer.displayName = n.getStringValue(); },
        "multiChoiceValues": n => { virtualEventRegistrationQuestionAnswer.multiChoiceValues = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { virtualEventRegistrationQuestionAnswer.odataType = n.getStringValue(); },
        "questionId": n => { virtualEventRegistrationQuestionAnswer.questionId = n.getStringValue(); },
        "value": n => { virtualEventRegistrationQuestionAnswer.value = n.getStringValue(); },
    }
}
export function serializeVirtualEventRegistrationQuestionAnswer(writer: SerializationWriter, virtualEventRegistrationQuestionAnswer: VirtualEventRegistrationQuestionAnswer | undefined = {} as VirtualEventRegistrationQuestionAnswer) : void {
        writer.writeBooleanValue("booleanValue", virtualEventRegistrationQuestionAnswer.booleanValue);
        writer.writeStringValue("displayName", virtualEventRegistrationQuestionAnswer.displayName);
        writer.writeCollectionOfPrimitiveValues<string>("multiChoiceValues", virtualEventRegistrationQuestionAnswer.multiChoiceValues);
        writer.writeStringValue("@odata.type", virtualEventRegistrationQuestionAnswer.odataType);
        writer.writeStringValue("questionId", virtualEventRegistrationQuestionAnswer.questionId);
        writer.writeStringValue("value", virtualEventRegistrationQuestionAnswer.value);
        writer.writeAdditionalData(virtualEventRegistrationQuestionAnswer.additionalData);
}
export interface VirtualEventRegistrationQuestionAnswer extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The booleanValue property
     */
    booleanValue?: boolean;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The multiChoiceValues property
     */
    multiChoiceValues?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The questionId property
     */
    questionId?: string;
    /**
     * The value property
     */
    value?: string;
}
// tslint:enable
// eslint-enable
