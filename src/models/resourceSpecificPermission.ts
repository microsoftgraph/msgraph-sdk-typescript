// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export function createResourceSpecificPermissionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoResourceSpecificPermission;
}
export function deserializeIntoResourceSpecificPermission(resourceSpecificPermission: ResourceSpecificPermission | undefined = {} as ResourceSpecificPermission) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { resourceSpecificPermission.description = n.getStringValue(); },
        "displayName": n => { resourceSpecificPermission.displayName = n.getStringValue(); },
        "id": n => { resourceSpecificPermission.id = n.getGuidValue(); },
        "isEnabled": n => { resourceSpecificPermission.isEnabled = n.getBooleanValue(); },
        "@odata.type": n => { resourceSpecificPermission.odataType = n.getStringValue(); },
        "value": n => { resourceSpecificPermission.value = n.getStringValue(); },
    }
}
export interface ResourceSpecificPermission extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Describes the level of access that the resource-specific permission represents.
     */
    description?: string;
    /**
     * The display name for the resource-specific permission.
     */
    displayName?: string;
    /**
     * The unique identifier for the resource-specific application permission.
     */
    id?: Guid;
    /**
     * Indicates whether the permission is enabled.
     */
    isEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The value of the permission.
     */
    value?: string;
}
export function serializeResourceSpecificPermission(writer: SerializationWriter, resourceSpecificPermission: ResourceSpecificPermission | undefined = {} as ResourceSpecificPermission) : void {
        writer.writeStringValue("description", resourceSpecificPermission.description);
        writer.writeStringValue("displayName", resourceSpecificPermission.displayName);
        writer.writeGuidValue("id", resourceSpecificPermission.id);
        writer.writeBooleanValue("isEnabled", resourceSpecificPermission.isEnabled);
        writer.writeStringValue("@odata.type", resourceSpecificPermission.odataType);
        writer.writeStringValue("value", resourceSpecificPermission.value);
        writer.writeAdditionalData(resourceSpecificPermission.additionalData);
}
// tslint:enable
// eslint-enable
