// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createInsightIdentityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoInsightIdentity;
}
export function deserializeIntoInsightIdentity(insightIdentity: InsightIdentity | undefined = {} as InsightIdentity) : Record<string, (node: ParseNode) => void> {
    return {
        "address": n => { insightIdentity.address = n.getStringValue(); },
        "displayName": n => { insightIdentity.displayName = n.getStringValue(); },
        "id": n => { insightIdentity.id = n.getStringValue(); },
        "@odata.type": n => { insightIdentity.odataType = n.getStringValue(); },
    }
}
export interface InsightIdentity extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email address of the user who shared the item.
     */
    address?: string;
    /**
     * The display name of the user who shared the item.
     */
    displayName?: string;
    /**
     * The ID of the user who shared the item.
     */
    id?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeInsightIdentity(writer: SerializationWriter, insightIdentity: InsightIdentity | undefined = {} as InsightIdentity) : void {
        writer.writeStringValue("address", insightIdentity.address);
        writer.writeStringValue("displayName", insightIdentity.displayName);
        writer.writeStringValue("id", insightIdentity.id);
        writer.writeStringValue("@odata.type", insightIdentity.odataType);
        writer.writeAdditionalData(insightIdentity.additionalData);
}
// tslint:enable
// eslint-enable
