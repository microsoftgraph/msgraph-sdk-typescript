// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createPresenceStatusMessageFromDiscriminatorValue, serializePresenceStatusMessage, type PresenceStatusMessage } from './presenceStatusMessage';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPresenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPresence;
}
export function deserializeIntoPresence(presence: Presence | undefined = {} as Presence) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(presence),
        "activity": n => { presence.activity = n.getStringValue(); },
        "availability": n => { presence.availability = n.getStringValue(); },
        "statusMessage": n => { presence.statusMessage = n.getObjectValue<PresenceStatusMessage>(createPresenceStatusMessageFromDiscriminatorValue); },
    }
}
export interface Presence extends Entity, Parsable {
    /**
     * The supplemental information to a user's availability. Possible values are Available, Away, BeRightBack, Busy, DoNotDisturb, InACall, InAConferenceCall, Inactive, InAMeeting, Offline, OffWork, OutOfOffice, PresenceUnknown, Presenting, UrgentInterruptionsOnly.
     */
    activity?: string;
    /**
     * The base presence information for a user. Possible values are Available, AvailableIdle,  Away, BeRightBack, Busy, BusyIdle, DoNotDisturb, Offline, PresenceUnknown
     */
    availability?: string;
    /**
     * The presence status message of a user.
     */
    statusMessage?: PresenceStatusMessage;
}
export function serializePresence(writer: SerializationWriter, presence: Presence | undefined = {} as Presence) : void {
    serializeEntity(writer, presence)
    writer.writeStringValue("activity", presence.activity);
    writer.writeStringValue("availability", presence.availability);
    writer.writeObjectValue<PresenceStatusMessage>("statusMessage", presence.statusMessage, serializePresenceStatusMessage);
}
// tslint:enable
// eslint-enable
