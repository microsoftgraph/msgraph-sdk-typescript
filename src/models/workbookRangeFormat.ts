// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createWorkbookFormatProtectionFromDiscriminatorValue, serializeWorkbookFormatProtection, type WorkbookFormatProtection } from './workbookFormatProtection';
import { createWorkbookRangeBorderFromDiscriminatorValue, serializeWorkbookRangeBorder, type WorkbookRangeBorder } from './workbookRangeBorder';
import { createWorkbookRangeFillFromDiscriminatorValue, serializeWorkbookRangeFill, type WorkbookRangeFill } from './workbookRangeFill';
import { createWorkbookRangeFontFromDiscriminatorValue, serializeWorkbookRangeFont, type WorkbookRangeFont } from './workbookRangeFont';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookRangeFormatFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookRangeFormat;
}
export function deserializeIntoWorkbookRangeFormat(workbookRangeFormat: WorkbookRangeFormat | undefined = {} as WorkbookRangeFormat) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookRangeFormat),
        "borders": n => { workbookRangeFormat.borders = n.getCollectionOfObjectValues<WorkbookRangeBorder>(createWorkbookRangeBorderFromDiscriminatorValue); },
        "columnWidth": n => { workbookRangeFormat.columnWidth = n.getNumberValue(); },
        "fill": n => { workbookRangeFormat.fill = n.getObjectValue<WorkbookRangeFill>(createWorkbookRangeFillFromDiscriminatorValue); },
        "font": n => { workbookRangeFormat.font = n.getObjectValue<WorkbookRangeFont>(createWorkbookRangeFontFromDiscriminatorValue); },
        "horizontalAlignment": n => { workbookRangeFormat.horizontalAlignment = n.getStringValue(); },
        "protection": n => { workbookRangeFormat.protection = n.getObjectValue<WorkbookFormatProtection>(createWorkbookFormatProtectionFromDiscriminatorValue); },
        "rowHeight": n => { workbookRangeFormat.rowHeight = n.getNumberValue(); },
        "verticalAlignment": n => { workbookRangeFormat.verticalAlignment = n.getStringValue(); },
        "wrapText": n => { workbookRangeFormat.wrapText = n.getBooleanValue(); },
    }
}
export function serializeWorkbookRangeFormat(writer: SerializationWriter, workbookRangeFormat: WorkbookRangeFormat | undefined = {} as WorkbookRangeFormat) : void {
        serializeEntity(writer, workbookRangeFormat)
        writer.writeCollectionOfObjectValues<WorkbookRangeBorder>("borders", workbookRangeFormat.borders, serializeWorkbookRangeBorder);
        writer.writeNumberValue("columnWidth", workbookRangeFormat.columnWidth);
        writer.writeObjectValue<WorkbookRangeFill>("fill", workbookRangeFormat.fill, serializeWorkbookRangeFill);
        writer.writeObjectValue<WorkbookRangeFont>("font", workbookRangeFormat.font, serializeWorkbookRangeFont);
        writer.writeStringValue("horizontalAlignment", workbookRangeFormat.horizontalAlignment);
        writer.writeObjectValue<WorkbookFormatProtection>("protection", workbookRangeFormat.protection, serializeWorkbookFormatProtection);
        writer.writeNumberValue("rowHeight", workbookRangeFormat.rowHeight);
        writer.writeStringValue("verticalAlignment", workbookRangeFormat.verticalAlignment);
        writer.writeBooleanValue("wrapText", workbookRangeFormat.wrapText);
}
export interface WorkbookRangeFormat extends Entity, Parsable {
    /**
     * Collection of border objects that apply to the overall range selected Read-only.
     */
    borders?: WorkbookRangeBorder[];
    /**
     * Gets or sets the width of all columns within the range. If the column widths aren't uniform, null will be returned.
     */
    columnWidth?: number;
    /**
     * Returns the fill object defined on the overall range. Read-only.
     */
    fill?: WorkbookRangeFill;
    /**
     * Returns the font object defined on the overall range selected Read-only.
     */
    font?: WorkbookRangeFont;
    /**
     * Represents the horizontal alignment for the specified object. The possible values are: General, Left, Center, Right, Fill, Justify, CenterAcrossSelection, Distributed.
     */
    horizontalAlignment?: string;
    /**
     * Returns the format protection object for a range. Read-only.
     */
    protection?: WorkbookFormatProtection;
    /**
     * Gets or sets the height of all rows in the range. If the row heights aren't uniform null will be returned.
     */
    rowHeight?: number;
    /**
     * Represents the vertical alignment for the specified object. The possible values are: Top, Center, Bottom, Justify, Distributed.
     */
    verticalAlignment?: string;
    /**
     * Indicates if Excel wraps the text in the object. A null value indicates that the entire range doesn't have uniform wrap setting
     */
    wrapText?: boolean;
}
// tslint:enable
// eslint-enable
