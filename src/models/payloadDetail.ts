// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEmailPayloadDetail } from './emailPayloadDetail';
import { type EmailPayloadDetail } from './index';
import { createPayloadCoachmarkFromDiscriminatorValue, serializePayloadCoachmark, type PayloadCoachmark } from './payloadCoachmark';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPayloadDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.emailPayloadDetail":
                    return deserializeIntoEmailPayloadDetail;
            }
        }
    }
    return deserializeIntoPayloadDetail;
}
export function deserializeIntoPayloadDetail(payloadDetail: PayloadDetail | undefined = {} as PayloadDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "coachmarks": n => { payloadDetail.coachmarks = n.getCollectionOfObjectValues<PayloadCoachmark>(createPayloadCoachmarkFromDiscriminatorValue); },
        "content": n => { payloadDetail.content = n.getStringValue(); },
        "@odata.type": n => { payloadDetail.odataType = n.getStringValue(); },
        "phishingUrl": n => { payloadDetail.phishingUrl = n.getStringValue(); },
    }
}
export interface PayloadDetail extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Payload coachmark details.
     */
    coachmarks?: PayloadCoachmark[];
    /**
     * Payload content details.
     */
    content?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The phishing URL used to target a user.
     */
    phishingUrl?: string;
}
export function serializePayloadDetail(writer: SerializationWriter, payloadDetail: PayloadDetail | undefined = {} as PayloadDetail) : void {
        writer.writeCollectionOfObjectValues<PayloadCoachmark>("coachmarks", payloadDetail.coachmarks, serializePayloadCoachmark);
        writer.writeStringValue("content", payloadDetail.content);
        writer.writeStringValue("@odata.type", payloadDetail.odataType);
        writer.writeStringValue("phishingUrl", payloadDetail.phishingUrl);
        writer.writeAdditionalData(payloadDetail.additionalData);
}
// tslint:enable
// eslint-enable
