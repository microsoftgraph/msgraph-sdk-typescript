// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAuthenticationMethodTarget, serializeAuthenticationMethodTarget, type AuthenticationMethodTarget } from './authenticationMethodTarget';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSmsAuthenticationMethodTargetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSmsAuthenticationMethodTarget;
}
export function deserializeIntoSmsAuthenticationMethodTarget(smsAuthenticationMethodTarget: SmsAuthenticationMethodTarget | undefined = {} as SmsAuthenticationMethodTarget) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuthenticationMethodTarget(smsAuthenticationMethodTarget),
        "isUsableForSignIn": n => { smsAuthenticationMethodTarget.isUsableForSignIn = n.getBooleanValue(); },
    }
}
export function serializeSmsAuthenticationMethodTarget(writer: SerializationWriter, smsAuthenticationMethodTarget: SmsAuthenticationMethodTarget | undefined = {} as SmsAuthenticationMethodTarget) : void {
        serializeAuthenticationMethodTarget(writer, smsAuthenticationMethodTarget)
        writer.writeBooleanValue("isUsableForSignIn", smsAuthenticationMethodTarget.isUsableForSignIn);
}
export interface SmsAuthenticationMethodTarget extends AuthenticationMethodTarget, Parsable {
    /**
     * Determines if users can use this authentication method to sign in to Microsoft Entra ID. true if users can use this method for primary authentication, otherwise false.
     */
    isUsableForSignIn?: boolean;
}
// tslint:enable
// eslint-enable
