// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { LobbyBypassScope } from './lobbyBypassScope';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLobbyBypassSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLobbyBypassSettings;
}
export function deserializeIntoLobbyBypassSettings(lobbyBypassSettings: LobbyBypassSettings | undefined = {} as LobbyBypassSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "isDialInBypassEnabled": n => { lobbyBypassSettings.isDialInBypassEnabled = n.getBooleanValue(); },
        "@odata.type": n => { lobbyBypassSettings.odataType = n.getStringValue(); },
        "scope": n => { lobbyBypassSettings.scope = n.getEnumValue<LobbyBypassScope>(LobbyBypassScope); },
    }
}
export interface LobbyBypassSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies whether or not to always let dial-in callers bypass the lobby. Optional.
     */
    isDialInBypassEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies the type of participants that are automatically admitted into a meeting, bypassing the lobby. Optional.
     */
    scope?: LobbyBypassScope;
}
export function serializeLobbyBypassSettings(writer: SerializationWriter, lobbyBypassSettings: LobbyBypassSettings | undefined = {} as LobbyBypassSettings) : void {
        writer.writeBooleanValue("isDialInBypassEnabled", lobbyBypassSettings.isDialInBypassEnabled);
        writer.writeStringValue("@odata.type", lobbyBypassSettings.odataType);
        writer.writeEnumValue<LobbyBypassScope>("scope", lobbyBypassSettings.scope);
        writer.writeAdditionalData(lobbyBypassSettings.additionalData);
}
// tslint:enable
// eslint-enable
