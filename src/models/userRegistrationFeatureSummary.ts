// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { IncludedUserRoles } from './includedUserRoles';
import { IncludedUserTypes } from './includedUserTypes';
import { createUserRegistrationFeatureCountFromDiscriminatorValue, serializeUserRegistrationFeatureCount, type UserRegistrationFeatureCount } from './userRegistrationFeatureCount';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserRegistrationFeatureSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserRegistrationFeatureSummary;
}
export function deserializeIntoUserRegistrationFeatureSummary(userRegistrationFeatureSummary: UserRegistrationFeatureSummary | undefined = {} as UserRegistrationFeatureSummary) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { userRegistrationFeatureSummary.odataType = n.getStringValue(); },
        "totalUserCount": n => { userRegistrationFeatureSummary.totalUserCount = n.getNumberValue(); },
        "userRegistrationFeatureCounts": n => { userRegistrationFeatureSummary.userRegistrationFeatureCounts = n.getCollectionOfObjectValues<UserRegistrationFeatureCount>(createUserRegistrationFeatureCountFromDiscriminatorValue); },
        "userRoles": n => { userRegistrationFeatureSummary.userRoles = n.getEnumValue<IncludedUserRoles>(IncludedUserRoles); },
        "userTypes": n => { userRegistrationFeatureSummary.userTypes = n.getEnumValue<IncludedUserTypes>(IncludedUserTypes); },
    }
}
export function serializeUserRegistrationFeatureSummary(writer: SerializationWriter, userRegistrationFeatureSummary: UserRegistrationFeatureSummary | undefined = {} as UserRegistrationFeatureSummary) : void {
        writer.writeStringValue("@odata.type", userRegistrationFeatureSummary.odataType);
        writer.writeNumberValue("totalUserCount", userRegistrationFeatureSummary.totalUserCount);
        writer.writeCollectionOfObjectValues<UserRegistrationFeatureCount>("userRegistrationFeatureCounts", userRegistrationFeatureSummary.userRegistrationFeatureCounts, serializeUserRegistrationFeatureCount);
        writer.writeEnumValue<IncludedUserRoles>("userRoles", userRegistrationFeatureSummary.userRoles);
        writer.writeEnumValue<IncludedUserTypes>("userTypes", userRegistrationFeatureSummary.userTypes);
        writer.writeAdditionalData(userRegistrationFeatureSummary.additionalData);
}
export interface UserRegistrationFeatureSummary extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Total number of users accounts, excluding those that are blocked.
     */
    totalUserCount?: number;
    /**
     * Number of users registered or capable for multi-factor authentication, self-service password reset, and passwordless authentication.
     */
    userRegistrationFeatureCounts?: UserRegistrationFeatureCount[];
    /**
     * The role type of the user. Possible values are: all, privilegedAdmin, admin, user, unknownFutureValue.
     */
    userRoles?: IncludedUserRoles;
    /**
     * User type. Possible values are: all, member, guest, unknownFutureValue.
     */
    userTypes?: IncludedUserTypes;
}
// tslint:enable
// eslint-enable
