import { type AgreementAcceptance } from './agreementAcceptance';
import { type AppRoleAssignment } from './appRoleAssignment';
import { type AssignedLicense } from './assignedLicense';
import { type AssignedPlan } from './assignedPlan';
import { type Authentication } from './authentication';
import { type AuthorizationInfo } from './authorizationInfo';
import { type Calendar } from './calendar';
import { type CalendarGroup } from './calendarGroup';
import { type Chat } from './chat';
import { type Contact } from './contact';
import { type ContactFolder } from './contactFolder';
import { type CustomSecurityAttributeValue } from './customSecurityAttributeValue';
import { type DeviceManagementTroubleshootingEvent } from './deviceManagementTroubleshootingEvent';
import { type DirectoryObject } from './directoryObject';
import { type Drive } from './drive';
import { type EmployeeExperienceUser } from './employeeExperienceUser';
import { type EmployeeOrgData } from './employeeOrgData';
import { type Event } from './event';
import { type Extension } from './extension';
import { type InferenceClassification } from './inferenceClassification';
import { type LicenseAssignmentState } from './licenseAssignmentState';
import { type LicenseDetails } from './licenseDetails';
import { type MailboxSettings } from './mailboxSettings';
import { type MailFolder } from './mailFolder';
import { type ManagedAppRegistration } from './managedAppRegistration';
import { type ManagedDevice } from './managedDevice';
import { type Message } from './message';
import { type OAuth2PermissionGrant } from './oAuth2PermissionGrant';
import { type ObjectIdentity } from './objectIdentity';
import { type OfficeGraphInsights } from './officeGraphInsights';
import { type Onenote } from './onenote';
import { type OnlineMeeting } from './onlineMeeting';
import { type OnPremisesExtensionAttributes } from './onPremisesExtensionAttributes';
import { type OnPremisesProvisioningError } from './onPremisesProvisioningError';
import { type OutlookUser } from './outlookUser';
import { type PasswordProfile } from './passwordProfile';
import { type Person } from './person';
import { type PlannerUser } from './plannerUser';
import { type Presence } from './presence';
import { type ProfilePhoto } from './profilePhoto';
import { type ProvisionedPlan } from './provisionedPlan';
import { type ScopedRoleMembership } from './scopedRoleMembership';
import { serializeAgreementAcceptance } from './serializeAgreementAcceptance';
import { serializeAppRoleAssignment } from './serializeAppRoleAssignment';
import { serializeAssignedLicense } from './serializeAssignedLicense';
import { serializeAssignedPlan } from './serializeAssignedPlan';
import { serializeAuthentication } from './serializeAuthentication';
import { serializeAuthorizationInfo } from './serializeAuthorizationInfo';
import { serializeCalendar } from './serializeCalendar';
import { serializeCalendarGroup } from './serializeCalendarGroup';
import { serializeChat } from './serializeChat';
import { serializeContact } from './serializeContact';
import { serializeContactFolder } from './serializeContactFolder';
import { serializeCustomSecurityAttributeValue } from './serializeCustomSecurityAttributeValue';
import { serializeDeviceManagementTroubleshootingEvent } from './serializeDeviceManagementTroubleshootingEvent';
import { serializeDirectoryObject } from './serializeDirectoryObject';
import { serializeDrive } from './serializeDrive';
import { serializeEmployeeExperienceUser } from './serializeEmployeeExperienceUser';
import { serializeEmployeeOrgData } from './serializeEmployeeOrgData';
import { serializeEvent } from './serializeEvent';
import { serializeExtension } from './serializeExtension';
import { serializeInferenceClassification } from './serializeInferenceClassification';
import { serializeLicenseAssignmentState } from './serializeLicenseAssignmentState';
import { serializeLicenseDetails } from './serializeLicenseDetails';
import { serializeMailboxSettings } from './serializeMailboxSettings';
import { serializeMailFolder } from './serializeMailFolder';
import { serializeManagedAppRegistration } from './serializeManagedAppRegistration';
import { serializeManagedDevice } from './serializeManagedDevice';
import { serializeMessage } from './serializeMessage';
import { serializeOAuth2PermissionGrant } from './serializeOAuth2PermissionGrant';
import { serializeObjectIdentity } from './serializeObjectIdentity';
import { serializeOfficeGraphInsights } from './serializeOfficeGraphInsights';
import { serializeOnenote } from './serializeOnenote';
import { serializeOnlineMeeting } from './serializeOnlineMeeting';
import { serializeOnPremisesExtensionAttributes } from './serializeOnPremisesExtensionAttributes';
import { serializeOnPremisesProvisioningError } from './serializeOnPremisesProvisioningError';
import { serializeOutlookUser } from './serializeOutlookUser';
import { serializePasswordProfile } from './serializePasswordProfile';
import { serializePerson } from './serializePerson';
import { serializePlannerUser } from './serializePlannerUser';
import { serializePresence } from './serializePresence';
import { serializeProfilePhoto } from './serializeProfilePhoto';
import { serializeProvisionedPlan } from './serializeProvisionedPlan';
import { serializeScopedRoleMembership } from './serializeScopedRoleMembership';
import { serializeServiceProvisioningError } from './serializeServiceProvisioningError';
import { serializeSignInActivity } from './serializeSignInActivity';
import { serializeSite } from './serializeSite';
import { serializeTeam } from './serializeTeam';
import { serializeTodo } from './serializeTodo';
import { serializeUserActivity } from './serializeUserActivity';
import { serializeUserPrint } from './serializeUserPrint';
import { serializeUserSettings } from './serializeUserSettings';
import { serializeUserTeamwork } from './serializeUserTeamwork';
import { type ServiceProvisioningError } from './serviceProvisioningError';
import { type SignInActivity } from './signInActivity';
import { type Site } from './site';
import { type Team } from './team';
import { type Todo } from './todo';
import { type User } from './user';
import { type UserActivity } from './userActivity';
import { type UserPrint } from './userPrint';
import { type UserSettings } from './userSettings';
import { type UserTeamwork } from './userTeamwork';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function serializeUser(writer: SerializationWriter, user: User | undefined = {} as User) : void {
        serializeDirectoryObject(writer, user)
        writer.writeStringValue("aboutMe", user.aboutMe);
        writer.writeBooleanValue("accountEnabled", user.accountEnabled);
        writer.writeCollectionOfObjectValues<UserActivity>("activities", user.activities, serializeUserActivity);
        writer.writeStringValue("ageGroup", user.ageGroup);
        writer.writeCollectionOfObjectValues<AgreementAcceptance>("agreementAcceptances", user.agreementAcceptances, serializeAgreementAcceptance);
        writer.writeCollectionOfObjectValues<AppRoleAssignment>("appRoleAssignments", user.appRoleAssignments, serializeAppRoleAssignment);
        writer.writeCollectionOfObjectValues<AssignedLicense>("assignedLicenses", user.assignedLicenses, serializeAssignedLicense);
        writer.writeCollectionOfObjectValues<AssignedPlan>("assignedPlans", user.assignedPlans, serializeAssignedPlan);
        writer.writeObjectValue<Authentication>("authentication", user.authentication, serializeAuthentication);
        writer.writeObjectValue<AuthorizationInfo>("authorizationInfo", user.authorizationInfo, serializeAuthorizationInfo);
        writer.writeDateValue("birthday", user.birthday);
        writer.writeCollectionOfPrimitiveValues<string>("businessPhones", user.businessPhones);
        writer.writeObjectValue<Calendar>("calendar", user.calendar, serializeCalendar);
        writer.writeCollectionOfObjectValues<CalendarGroup>("calendarGroups", user.calendarGroups, serializeCalendarGroup);
        writer.writeCollectionOfObjectValues<Calendar>("calendars", user.calendars, serializeCalendar);
        writer.writeCollectionOfObjectValues<Event>("calendarView", user.calendarView, serializeEvent);
        writer.writeCollectionOfObjectValues<Chat>("chats", user.chats, serializeChat);
        writer.writeStringValue("city", user.city);
        writer.writeStringValue("companyName", user.companyName);
        writer.writeStringValue("consentProvidedForMinor", user.consentProvidedForMinor);
        writer.writeCollectionOfObjectValues<ContactFolder>("contactFolders", user.contactFolders, serializeContactFolder);
        writer.writeCollectionOfObjectValues<Contact>("contacts", user.contacts, serializeContact);
        writer.writeStringValue("country", user.country);
        writer.writeDateValue("createdDateTime", user.createdDateTime);
        writer.writeCollectionOfObjectValues<DirectoryObject>("createdObjects", user.createdObjects, serializeDirectoryObject);
        writer.writeStringValue("creationType", user.creationType);
        writer.writeObjectValue<CustomSecurityAttributeValue>("customSecurityAttributes", user.customSecurityAttributes, serializeCustomSecurityAttributeValue);
        writer.writeStringValue("department", user.department);
        writer.writeNumberValue("deviceEnrollmentLimit", user.deviceEnrollmentLimit);
        writer.writeCollectionOfObjectValues<DeviceManagementTroubleshootingEvent>("deviceManagementTroubleshootingEvents", user.deviceManagementTroubleshootingEvents, serializeDeviceManagementTroubleshootingEvent);
        writer.writeCollectionOfObjectValues<DirectoryObject>("directReports", user.directReports, serializeDirectoryObject);
        writer.writeStringValue("displayName", user.displayName);
        writer.writeObjectValue<Drive>("drive", user.drive, serializeDrive);
        writer.writeCollectionOfObjectValues<Drive>("drives", user.drives, serializeDrive);
        writer.writeObjectValue<EmployeeExperienceUser>("employeeExperience", user.employeeExperience, serializeEmployeeExperienceUser);
        writer.writeDateValue("employeeHireDate", user.employeeHireDate);
        writer.writeStringValue("employeeId", user.employeeId);
        writer.writeDateValue("employeeLeaveDateTime", user.employeeLeaveDateTime);
        writer.writeObjectValue<EmployeeOrgData>("employeeOrgData", user.employeeOrgData, serializeEmployeeOrgData);
        writer.writeStringValue("employeeType", user.employeeType);
        writer.writeCollectionOfObjectValues<Event>("events", user.events, serializeEvent);
        writer.writeCollectionOfObjectValues<Extension>("extensions", user.extensions, serializeExtension);
        writer.writeStringValue("externalUserState", user.externalUserState);
        writer.writeDateValue("externalUserStateChangeDateTime", user.externalUserStateChangeDateTime);
        writer.writeStringValue("faxNumber", user.faxNumber);
        writer.writeCollectionOfObjectValues<Site>("followedSites", user.followedSites, serializeSite);
        writer.writeStringValue("givenName", user.givenName);
        writer.writeDateValue("hireDate", user.hireDate);
        writer.writeCollectionOfObjectValues<ObjectIdentity>("identities", user.identities, serializeObjectIdentity);
        writer.writeCollectionOfPrimitiveValues<string>("imAddresses", user.imAddresses);
        writer.writeObjectValue<InferenceClassification>("inferenceClassification", user.inferenceClassification, serializeInferenceClassification);
        writer.writeObjectValue<OfficeGraphInsights>("insights", user.insights, serializeOfficeGraphInsights);
        writer.writeCollectionOfPrimitiveValues<string>("interests", user.interests);
        writer.writeBooleanValue("isResourceAccount", user.isResourceAccount);
        writer.writeStringValue("jobTitle", user.jobTitle);
        writer.writeCollectionOfObjectValues<Team>("joinedTeams", user.joinedTeams, serializeTeam);
        writer.writeDateValue("lastPasswordChangeDateTime", user.lastPasswordChangeDateTime);
        writer.writeStringValue("legalAgeGroupClassification", user.legalAgeGroupClassification);
        writer.writeCollectionOfObjectValues<LicenseAssignmentState>("licenseAssignmentStates", user.licenseAssignmentStates, serializeLicenseAssignmentState);
        writer.writeCollectionOfObjectValues<LicenseDetails>("licenseDetails", user.licenseDetails, serializeLicenseDetails);
        writer.writeStringValue("mail", user.mail);
        writer.writeObjectValue<MailboxSettings>("mailboxSettings", user.mailboxSettings, serializeMailboxSettings);
        writer.writeCollectionOfObjectValues<MailFolder>("mailFolders", user.mailFolders, serializeMailFolder);
        writer.writeStringValue("mailNickname", user.mailNickname);
        writer.writeCollectionOfObjectValues<ManagedAppRegistration>("managedAppRegistrations", user.managedAppRegistrations, serializeManagedAppRegistration);
        writer.writeCollectionOfObjectValues<ManagedDevice>("managedDevices", user.managedDevices, serializeManagedDevice);
        writer.writeObjectValue<DirectoryObject>("manager", user.manager, serializeDirectoryObject);
        writer.writeCollectionOfObjectValues<DirectoryObject>("memberOf", user.memberOf, serializeDirectoryObject);
        writer.writeCollectionOfObjectValues<Message>("messages", user.messages, serializeMessage);
        writer.writeStringValue("mobilePhone", user.mobilePhone);
        writer.writeStringValue("mySite", user.mySite);
        writer.writeCollectionOfObjectValues<OAuth2PermissionGrant>("oauth2PermissionGrants", user.oauth2PermissionGrants, serializeOAuth2PermissionGrant);
        writer.writeStringValue("officeLocation", user.officeLocation);
        writer.writeObjectValue<Onenote>("onenote", user.onenote, serializeOnenote);
        writer.writeCollectionOfObjectValues<OnlineMeeting>("onlineMeetings", user.onlineMeetings, serializeOnlineMeeting);
        writer.writeStringValue("onPremisesDistinguishedName", user.onPremisesDistinguishedName);
        writer.writeStringValue("onPremisesDomainName", user.onPremisesDomainName);
        writer.writeObjectValue<OnPremisesExtensionAttributes>("onPremisesExtensionAttributes", user.onPremisesExtensionAttributes, serializeOnPremisesExtensionAttributes);
        writer.writeStringValue("onPremisesImmutableId", user.onPremisesImmutableId);
        writer.writeDateValue("onPremisesLastSyncDateTime", user.onPremisesLastSyncDateTime);
        writer.writeCollectionOfObjectValues<OnPremisesProvisioningError>("onPremisesProvisioningErrors", user.onPremisesProvisioningErrors, serializeOnPremisesProvisioningError);
        writer.writeStringValue("onPremisesSamAccountName", user.onPremisesSamAccountName);
        writer.writeStringValue("onPremisesSecurityIdentifier", user.onPremisesSecurityIdentifier);
        writer.writeBooleanValue("onPremisesSyncEnabled", user.onPremisesSyncEnabled);
        writer.writeStringValue("onPremisesUserPrincipalName", user.onPremisesUserPrincipalName);
        writer.writeCollectionOfPrimitiveValues<string>("otherMails", user.otherMails);
        writer.writeObjectValue<OutlookUser>("outlook", user.outlook, serializeOutlookUser);
        writer.writeCollectionOfObjectValues<DirectoryObject>("ownedDevices", user.ownedDevices, serializeDirectoryObject);
        writer.writeCollectionOfObjectValues<DirectoryObject>("ownedObjects", user.ownedObjects, serializeDirectoryObject);
        writer.writeStringValue("passwordPolicies", user.passwordPolicies);
        writer.writeObjectValue<PasswordProfile>("passwordProfile", user.passwordProfile, serializePasswordProfile);
        writer.writeCollectionOfPrimitiveValues<string>("pastProjects", user.pastProjects);
        writer.writeCollectionOfObjectValues<Person>("people", user.people, serializePerson);
        writer.writeObjectValue<ProfilePhoto>("photo", user.photo, serializeProfilePhoto);
        writer.writeCollectionOfObjectValues<ProfilePhoto>("photos", user.photos, serializeProfilePhoto);
        writer.writeObjectValue<PlannerUser>("planner", user.planner, serializePlannerUser);
        writer.writeStringValue("postalCode", user.postalCode);
        writer.writeStringValue("preferredDataLocation", user.preferredDataLocation);
        writer.writeStringValue("preferredLanguage", user.preferredLanguage);
        writer.writeStringValue("preferredName", user.preferredName);
        writer.writeObjectValue<Presence>("presence", user.presence, serializePresence);
        writer.writeObjectValue<UserPrint>("print", user.print, serializeUserPrint);
        writer.writeCollectionOfObjectValues<ProvisionedPlan>("provisionedPlans", user.provisionedPlans, serializeProvisionedPlan);
        writer.writeCollectionOfPrimitiveValues<string>("proxyAddresses", user.proxyAddresses);
        writer.writeCollectionOfObjectValues<DirectoryObject>("registeredDevices", user.registeredDevices, serializeDirectoryObject);
        writer.writeCollectionOfPrimitiveValues<string>("responsibilities", user.responsibilities);
        writer.writeCollectionOfPrimitiveValues<string>("schools", user.schools);
        writer.writeCollectionOfObjectValues<ScopedRoleMembership>("scopedRoleMemberOf", user.scopedRoleMemberOf, serializeScopedRoleMembership);
        writer.writeStringValue("securityIdentifier", user.securityIdentifier);
        writer.writeCollectionOfObjectValues<ServiceProvisioningError>("serviceProvisioningErrors", user.serviceProvisioningErrors, serializeServiceProvisioningError);
        writer.writeObjectValue<UserSettings>("settings", user.settings, serializeUserSettings);
        writer.writeBooleanValue("showInAddressList", user.showInAddressList);
        writer.writeObjectValue<SignInActivity>("signInActivity", user.signInActivity, serializeSignInActivity);
        writer.writeDateValue("signInSessionsValidFromDateTime", user.signInSessionsValidFromDateTime);
        writer.writeCollectionOfPrimitiveValues<string>("skills", user.skills);
        writer.writeStringValue("state", user.state);
        writer.writeStringValue("streetAddress", user.streetAddress);
        writer.writeStringValue("surname", user.surname);
        writer.writeObjectValue<UserTeamwork>("teamwork", user.teamwork, serializeUserTeamwork);
        writer.writeObjectValue<Todo>("todo", user.todo, serializeTodo);
        writer.writeCollectionOfObjectValues<DirectoryObject>("transitiveMemberOf", user.transitiveMemberOf, serializeDirectoryObject);
        writer.writeStringValue("usageLocation", user.usageLocation);
        writer.writeStringValue("userPrincipalName", user.userPrincipalName);
        writer.writeStringValue("userType", user.userType);
}
