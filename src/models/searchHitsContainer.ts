// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createSearchAggregationFromDiscriminatorValue, serializeSearchAggregation, type SearchAggregation } from './searchAggregation';
import { createSearchHitFromDiscriminatorValue, serializeSearchHit, type SearchHit } from './searchHit';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSearchHitsContainerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSearchHitsContainer;
}
export function deserializeIntoSearchHitsContainer(searchHitsContainer: SearchHitsContainer | undefined = {} as SearchHitsContainer) : Record<string, (node: ParseNode) => void> {
    return {
        "aggregations": n => { searchHitsContainer.aggregations = n.getCollectionOfObjectValues<SearchAggregation>(createSearchAggregationFromDiscriminatorValue); },
        "hits": n => { searchHitsContainer.hits = n.getCollectionOfObjectValues<SearchHit>(createSearchHitFromDiscriminatorValue); },
        "moreResultsAvailable": n => { searchHitsContainer.moreResultsAvailable = n.getBooleanValue(); },
        "@odata.type": n => { searchHitsContainer.odataType = n.getStringValue(); },
        "total": n => { searchHitsContainer.total = n.getNumberValue(); },
    }
}
export interface SearchHitsContainer extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The aggregations property
     */
    aggregations?: SearchAggregation[];
    /**
     * A collection of the search results.
     */
    hits?: SearchHit[];
    /**
     * Provides information if more results are available. Based on this information, you can adjust the from and size properties of the searchRequest accordingly.
     */
    moreResultsAvailable?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The total number of results. Note this isn't the number of results on the page, but the total number of results satisfying the query.
     */
    total?: number;
}
export function serializeSearchHitsContainer(writer: SerializationWriter, searchHitsContainer: SearchHitsContainer | undefined = {} as SearchHitsContainer) : void {
        writer.writeCollectionOfObjectValues<SearchAggregation>("aggregations", searchHitsContainer.aggregations, serializeSearchAggregation);
        writer.writeCollectionOfObjectValues<SearchHit>("hits", searchHitsContainer.hits, serializeSearchHit);
        writer.writeBooleanValue("moreResultsAvailable", searchHitsContainer.moreResultsAvailable);
        writer.writeStringValue("@odata.type", searchHitsContainer.odataType);
        writer.writeNumberValue("total", searchHitsContainer.total);
        writer.writeAdditionalData(searchHitsContainer.additionalData);
}
// tslint:enable
// eslint-enable
