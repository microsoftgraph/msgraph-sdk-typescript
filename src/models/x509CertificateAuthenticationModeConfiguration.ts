// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { X509CertificateAuthenticationMode } from './x509CertificateAuthenticationMode';
import { createX509CertificateRuleFromDiscriminatorValue, serializeX509CertificateRule, type X509CertificateRule } from './x509CertificateRule';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createX509CertificateAuthenticationModeConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoX509CertificateAuthenticationModeConfiguration;
}
export function deserializeIntoX509CertificateAuthenticationModeConfiguration(x509CertificateAuthenticationModeConfiguration: X509CertificateAuthenticationModeConfiguration | undefined = {} as X509CertificateAuthenticationModeConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { x509CertificateAuthenticationModeConfiguration.odataType = n.getStringValue(); },
        "rules": n => { x509CertificateAuthenticationModeConfiguration.rules = n.getCollectionOfObjectValues<X509CertificateRule>(createX509CertificateRuleFromDiscriminatorValue); },
        "x509CertificateAuthenticationDefaultMode": n => { x509CertificateAuthenticationModeConfiguration.x509CertificateAuthenticationDefaultMode = n.getEnumValue<X509CertificateAuthenticationMode>(X509CertificateAuthenticationMode); },
    }
}
export function serializeX509CertificateAuthenticationModeConfiguration(writer: SerializationWriter, x509CertificateAuthenticationModeConfiguration: X509CertificateAuthenticationModeConfiguration | undefined = {} as X509CertificateAuthenticationModeConfiguration) : void {
        writer.writeStringValue("@odata.type", x509CertificateAuthenticationModeConfiguration.odataType);
        writer.writeCollectionOfObjectValues<X509CertificateRule>("rules", x509CertificateAuthenticationModeConfiguration.rules, serializeX509CertificateRule);
        writer.writeEnumValue<X509CertificateAuthenticationMode>("x509CertificateAuthenticationDefaultMode", x509CertificateAuthenticationModeConfiguration.x509CertificateAuthenticationDefaultMode);
        writer.writeAdditionalData(x509CertificateAuthenticationModeConfiguration.additionalData);
}
export interface X509CertificateAuthenticationModeConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Rules are configured in addition to the authentication mode to bind a specific x509CertificateRuleType to an x509CertificateAuthenticationMode. For example, bind the policyOID with identifier 1.32.132.343 to x509CertificateMultiFactor authentication mode.
     */
    rules?: X509CertificateRule[];
    /**
     * The type of strong authentication mode. The possible values are: x509CertificateSingleFactor, x509CertificateMultiFactor, unknownFutureValue.
     */
    x509CertificateAuthenticationDefaultMode?: X509CertificateAuthenticationMode;
}
// tslint:enable
// eslint-enable
