// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Notebook, type OnenoteSection, type SectionGroup } from './index';
import { deserializeIntoNotebook } from './notebook';
import { deserializeIntoOnenoteEntitySchemaObjectModel, serializeOnenoteEntitySchemaObjectModel, type OnenoteEntitySchemaObjectModel } from './onenoteEntitySchemaObjectModel';
import { deserializeIntoOnenoteSection } from './onenoteSection';
import { deserializeIntoSectionGroup } from './sectionGroup';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOnenoteEntityHierarchyModelFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.notebook":
                    return deserializeIntoNotebook;
                case "#microsoft.graph.onenoteSection":
                    return deserializeIntoOnenoteSection;
                case "#microsoft.graph.sectionGroup":
                    return deserializeIntoSectionGroup;
            }
        }
    }
    return deserializeIntoOnenoteEntityHierarchyModel;
}
export function deserializeIntoOnenoteEntityHierarchyModel(onenoteEntityHierarchyModel: OnenoteEntityHierarchyModel | undefined = {} as OnenoteEntityHierarchyModel) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOnenoteEntitySchemaObjectModel(onenoteEntityHierarchyModel),
        "createdBy": n => { onenoteEntityHierarchyModel.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "displayName": n => { onenoteEntityHierarchyModel.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { onenoteEntityHierarchyModel.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { onenoteEntityHierarchyModel.lastModifiedDateTime = n.getDateValue(); },
    }
}
export interface OnenoteEntityHierarchyModel extends OnenoteEntitySchemaObjectModel, Parsable {
    /**
     * Identity of the user, device, and application that created the item. Read-only.
     */
    createdBy?: IdentitySet;
    /**
     * The name of the notebook.
     */
    displayName?: string;
    /**
     * Identity of the user, device, and application that created the item. Read-only.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    lastModifiedDateTime?: Date;
}
export function serializeOnenoteEntityHierarchyModel(writer: SerializationWriter, onenoteEntityHierarchyModel: OnenoteEntityHierarchyModel | undefined = {} as OnenoteEntityHierarchyModel) : void {
    serializeOnenoteEntitySchemaObjectModel(writer, onenoteEntityHierarchyModel)
    writer.writeObjectValue<IdentitySet>("createdBy", onenoteEntityHierarchyModel.createdBy, serializeIdentitySet);
    writer.writeStringValue("displayName", onenoteEntityHierarchyModel.displayName);
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", onenoteEntityHierarchyModel.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", onenoteEntityHierarchyModel.lastModifiedDateTime);
}
// tslint:enable
// eslint-enable
