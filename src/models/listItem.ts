// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoBaseItem, serializeBaseItem, type BaseItem } from './baseItem';
import { createContentTypeInfoFromDiscriminatorValue, serializeContentTypeInfo, type ContentTypeInfo } from './contentTypeInfo';
import { createDocumentSetVersionFromDiscriminatorValue, serializeDocumentSetVersion, type DocumentSetVersion } from './documentSetVersion';
import { createDriveItemFromDiscriminatorValue, serializeDriveItem, type DriveItem } from './driveItem';
import { createFieldValueSetFromDiscriminatorValue, serializeFieldValueSet, type FieldValueSet } from './fieldValueSet';
import { createItemAnalyticsFromDiscriminatorValue, serializeItemAnalytics, type ItemAnalytics } from './itemAnalytics';
import { createListItemVersionFromDiscriminatorValue, serializeListItemVersion, type ListItemVersion } from './listItemVersion';
import { createSharepointIdsFromDiscriminatorValue, serializeSharepointIds, type SharepointIds } from './sharepointIds';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createListItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoListItem;
}
export function deserializeIntoListItem(listItem: ListItem | undefined = {} as ListItem) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseItem(listItem),
        "analytics": n => { listItem.analytics = n.getObjectValue<ItemAnalytics>(createItemAnalyticsFromDiscriminatorValue); },
        "contentType": n => { listItem.contentType = n.getObjectValue<ContentTypeInfo>(createContentTypeInfoFromDiscriminatorValue); },
        "documentSetVersions": n => { listItem.documentSetVersions = n.getCollectionOfObjectValues<DocumentSetVersion>(createDocumentSetVersionFromDiscriminatorValue); },
        "driveItem": n => { listItem.driveItem = n.getObjectValue<DriveItem>(createDriveItemFromDiscriminatorValue); },
        "fields": n => { listItem.fields = n.getObjectValue<FieldValueSet>(createFieldValueSetFromDiscriminatorValue); },
        "sharepointIds": n => { listItem.sharepointIds = n.getObjectValue<SharepointIds>(createSharepointIdsFromDiscriminatorValue); },
        "versions": n => { listItem.versions = n.getCollectionOfObjectValues<ListItemVersion>(createListItemVersionFromDiscriminatorValue); },
    }
}
export interface ListItem extends BaseItem, Parsable {
    /**
     * Analytics about the view activities that took place on this item.
     */
    analytics?: ItemAnalytics;
    /**
     * The content type of this list item
     */
    contentType?: ContentTypeInfo;
    /**
     * Version information for a document set version created by a user.
     */
    documentSetVersions?: DocumentSetVersion[];
    /**
     * For document libraries, the driveItem relationship exposes the listItem as a [driveItem][]
     */
    driveItem?: DriveItem;
    /**
     * The values of the columns set on this list item.
     */
    fields?: FieldValueSet;
    /**
     * Returns identifiers useful for SharePoint REST compatibility. Read-only.
     */
    sharepointIds?: SharepointIds;
    /**
     * The list of previous versions of the list item.
     */
    versions?: ListItemVersion[];
}
export function serializeListItem(writer: SerializationWriter, listItem: ListItem | undefined = {} as ListItem) : void {
    serializeBaseItem(writer, listItem)
    writer.writeObjectValue<ItemAnalytics>("analytics", listItem.analytics, serializeItemAnalytics);
    writer.writeObjectValue<ContentTypeInfo>("contentType", listItem.contentType, serializeContentTypeInfo);
    writer.writeCollectionOfObjectValues<DocumentSetVersion>("documentSetVersions", listItem.documentSetVersions, serializeDocumentSetVersion);
    writer.writeObjectValue<DriveItem>("driveItem", listItem.driveItem, serializeDriveItem);
    writer.writeObjectValue<FieldValueSet>("fields", listItem.fields, serializeFieldValueSet);
    writer.writeObjectValue<SharepointIds>("sharepointIds", listItem.sharepointIds, serializeSharepointIds);
    writer.writeCollectionOfObjectValues<ListItemVersion>("versions", listItem.versions, serializeListItemVersion);
}
// tslint:enable
// eslint-enable
