// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createKeyValuePairFromDiscriminatorValue, serializeKeyValuePair, type KeyValuePair } from './keyValuePair';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSubjectRightsRequestDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSubjectRightsRequestDetail;
}
export function deserializeIntoSubjectRightsRequestDetail(subjectRightsRequestDetail: SubjectRightsRequestDetail | undefined = {} as SubjectRightsRequestDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "excludedItemCount": n => { subjectRightsRequestDetail.excludedItemCount = n.getNumberValue(); },
        "insightCounts": n => { subjectRightsRequestDetail.insightCounts = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "itemCount": n => { subjectRightsRequestDetail.itemCount = n.getNumberValue(); },
        "itemNeedReview": n => { subjectRightsRequestDetail.itemNeedReview = n.getNumberValue(); },
        "@odata.type": n => { subjectRightsRequestDetail.odataType = n.getStringValue(); },
        "productItemCounts": n => { subjectRightsRequestDetail.productItemCounts = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "signedOffItemCount": n => { subjectRightsRequestDetail.signedOffItemCount = n.getNumberValue(); },
        "totalItemSize": n => { subjectRightsRequestDetail.totalItemSize = n.getNumberValue(); },
    }
}
export function serializeSubjectRightsRequestDetail(writer: SerializationWriter, subjectRightsRequestDetail: SubjectRightsRequestDetail | undefined = {} as SubjectRightsRequestDetail) : void {
    writer.writeNumberValue("excludedItemCount", subjectRightsRequestDetail.excludedItemCount);
    writer.writeCollectionOfObjectValues<KeyValuePair>("insightCounts", subjectRightsRequestDetail.insightCounts, serializeKeyValuePair);
    writer.writeNumberValue("itemCount", subjectRightsRequestDetail.itemCount);
    writer.writeNumberValue("itemNeedReview", subjectRightsRequestDetail.itemNeedReview);
    writer.writeStringValue("@odata.type", subjectRightsRequestDetail.odataType);
    writer.writeCollectionOfObjectValues<KeyValuePair>("productItemCounts", subjectRightsRequestDetail.productItemCounts, serializeKeyValuePair);
    writer.writeNumberValue("signedOffItemCount", subjectRightsRequestDetail.signedOffItemCount);
    writer.writeNumberValue("totalItemSize", subjectRightsRequestDetail.totalItemSize);
    writer.writeAdditionalData(subjectRightsRequestDetail.additionalData);
}
export interface SubjectRightsRequestDetail extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Count of items that are excluded from the request.
     */
    excludedItemCount?: number;
    /**
     * Count of items per insight.
     */
    insightCounts?: KeyValuePair[];
    /**
     * Count of items found.
     */
    itemCount?: number;
    /**
     * Count of item that need review.
     */
    itemNeedReview?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Count of items per product, such as Exchange, SharePoint, OneDrive, and Teams.
     */
    productItemCounts?: KeyValuePair[];
    /**
     * Count of items signed off by the administrator.
     */
    signedOffItemCount?: number;
    /**
     * Total item size in bytes.
     */
    totalItemSize?: number;
}
// tslint:enable
// eslint-enable
