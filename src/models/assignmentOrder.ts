import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AssignmentOrder extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A list of identityUserFlowAttribute object identifiers that determine the order in which attributes should be collected within a user flow.
     */
    order?: string[];
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createAssignmentOrderFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAssignmentOrder;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoAssignmentOrder(assignmentOrder: AssignmentOrder | undefined = {} as AssignmentOrder) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { assignmentOrder.odataType = n.getStringValue(); },
        "order": n => { assignmentOrder.order = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeAssignmentOrder(writer: SerializationWriter, assignmentOrder: AssignmentOrder | undefined = {} as AssignmentOrder) : void {
        writer.writeStringValue("@odata.type", assignmentOrder.odataType);
        writer.writeCollectionOfPrimitiveValues<string>("order", assignmentOrder.order);
        writer.writeAdditionalData(assignmentOrder.additionalData);
}
