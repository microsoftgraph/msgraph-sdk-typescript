// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoIdentitySource, serializeIdentitySource, type IdentitySource } from './identitySource';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDomainIdentitySourceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDomainIdentitySource;
}
export function deserializeIntoDomainIdentitySource(domainIdentitySource: DomainIdentitySource | undefined = {} as DomainIdentitySource) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySource(domainIdentitySource),
        "displayName": n => { domainIdentitySource.displayName = n.getStringValue(); },
        "domainName": n => { domainIdentitySource.domainName = n.getStringValue(); },
    }
}
export interface DomainIdentitySource extends IdentitySource, Parsable {
    /**
     * The name of the identity source, typically also the domain name. Read only.
     */
    displayName?: string;
    /**
     * The domain name. Read only.
     */
    domainName?: string;
}
export function serializeDomainIdentitySource(writer: SerializationWriter, domainIdentitySource: DomainIdentitySource | undefined = {} as DomainIdentitySource) : void {
        serializeIdentitySource(writer, domainIdentitySource)
        writer.writeStringValue("displayName", domainIdentitySource.displayName);
        writer.writeStringValue("domainName", domainIdentitySource.domainName);
}
// tslint:enable
// eslint-enable
