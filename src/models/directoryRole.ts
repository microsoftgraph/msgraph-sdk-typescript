// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDirectoryObjectFromDiscriminatorValue, deserializeIntoDirectoryObject, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { createScopedRoleMembershipFromDiscriminatorValue, serializeScopedRoleMembership, type ScopedRoleMembership } from './scopedRoleMembership';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDirectoryRoleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDirectoryRole;
}
export function deserializeIntoDirectoryRole(directoryRole: DirectoryRole | undefined = {} as DirectoryRole) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDirectoryObject(directoryRole),
        "description": n => { directoryRole.description = n.getStringValue(); },
        "displayName": n => { directoryRole.displayName = n.getStringValue(); },
        "members": n => { directoryRole.members = n.getCollectionOfObjectValues<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "roleTemplateId": n => { directoryRole.roleTemplateId = n.getStringValue(); },
        "scopedMembers": n => { directoryRole.scopedMembers = n.getCollectionOfObjectValues<ScopedRoleMembership>(createScopedRoleMembershipFromDiscriminatorValue); },
    }
}
export interface DirectoryRole extends DirectoryObject, Parsable {
    /**
     * The description for the directory role. Read-only. Supports $filter (eq), $search, $select.
     */
    description?: string;
    /**
     * The display name for the directory role. Read-only. Supports $filter (eq), $search, $select.
     */
    displayName?: string;
    /**
     * Users that are members of this directory role. HTTP Methods: GET, POST, DELETE. Read-only. Nullable. Supports $expand.
     */
    members?: DirectoryObject[];
    /**
     * The id of the directoryRoleTemplate that this role is based on. The property must be specified when activating a directory role in a tenant with a POST operation. After the directory role has been activated, the property is read only. Supports $filter (eq), $select.
     */
    roleTemplateId?: string;
    /**
     * Members of this directory role that are scoped to administrative units. Read-only. Nullable.
     */
    scopedMembers?: ScopedRoleMembership[];
}
export function serializeDirectoryRole(writer: SerializationWriter, directoryRole: DirectoryRole | undefined = {} as DirectoryRole) : void {
    serializeDirectoryObject(writer, directoryRole)
    writer.writeStringValue("description", directoryRole.description);
    writer.writeStringValue("displayName", directoryRole.displayName);
    writer.writeCollectionOfObjectValues<DirectoryObject>("members", directoryRole.members, serializeDirectoryObject);
    writer.writeStringValue("roleTemplateId", directoryRole.roleTemplateId);
    writer.writeCollectionOfObjectValues<ScopedRoleMembership>("scopedMembers", directoryRole.scopedMembers, serializeScopedRoleMembership);
}
// tslint:enable
// eslint-enable
