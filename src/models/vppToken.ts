// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { VppTokenAccountType } from './vppTokenAccountType';
import { VppTokenState } from './vppTokenState';
import { VppTokenSyncStatus } from './vppTokenSyncStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVppTokenFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoVppToken;
}
export function deserializeIntoVppToken(vppToken: VppToken | undefined = {} as VppToken) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(vppToken),
        "appleId": n => { vppToken.appleId = n.getStringValue(); },
        "automaticallyUpdateApps": n => { vppToken.automaticallyUpdateApps = n.getBooleanValue(); },
        "countryOrRegion": n => { vppToken.countryOrRegion = n.getStringValue(); },
        "expirationDateTime": n => { vppToken.expirationDateTime = n.getDateValue(); },
        "lastModifiedDateTime": n => { vppToken.lastModifiedDateTime = n.getDateValue(); },
        "lastSyncDateTime": n => { vppToken.lastSyncDateTime = n.getDateValue(); },
        "lastSyncStatus": n => { vppToken.lastSyncStatus = n.getEnumValue<VppTokenSyncStatus>(VppTokenSyncStatus); },
        "organizationName": n => { vppToken.organizationName = n.getStringValue(); },
        "state": n => { vppToken.state = n.getEnumValue<VppTokenState>(VppTokenState); },
        "token": n => { vppToken.token = n.getStringValue(); },
        "vppTokenAccountType": n => { vppToken.vppTokenAccountType = n.getEnumValue<VppTokenAccountType>(VppTokenAccountType); },
    }
}
export function serializeVppToken(writer: SerializationWriter, vppToken: VppToken | undefined = {} as VppToken) : void {
        serializeEntity(writer, vppToken)
        writer.writeStringValue("appleId", vppToken.appleId);
        writer.writeBooleanValue("automaticallyUpdateApps", vppToken.automaticallyUpdateApps);
        writer.writeStringValue("countryOrRegion", vppToken.countryOrRegion);
        writer.writeDateValue("expirationDateTime", vppToken.expirationDateTime);
        writer.writeDateValue("lastModifiedDateTime", vppToken.lastModifiedDateTime);
        writer.writeDateValue("lastSyncDateTime", vppToken.lastSyncDateTime);
        writer.writeEnumValue<VppTokenSyncStatus>("lastSyncStatus", vppToken.lastSyncStatus);
        writer.writeStringValue("organizationName", vppToken.organizationName);
        writer.writeEnumValue<VppTokenState>("state", vppToken.state);
        writer.writeStringValue("token", vppToken.token);
        writer.writeEnumValue<VppTokenAccountType>("vppTokenAccountType", vppToken.vppTokenAccountType);
}
export interface VppToken extends Entity, Parsable {
    /**
     * The apple Id associated with the given Apple Volume Purchase Program Token.
     */
    appleId?: string;
    /**
     * Whether or not apps for the VPP token will be automatically updated.
     */
    automaticallyUpdateApps?: boolean;
    /**
     * Whether or not apps for the VPP token will be automatically updated.
     */
    countryOrRegion?: string;
    /**
     * The expiration date time of the Apple Volume Purchase Program Token.
     */
    expirationDateTime?: Date;
    /**
     * Last modification date time associated with the Apple Volume Purchase Program Token.
     */
    lastModifiedDateTime?: Date;
    /**
     * The last time when an application sync was done with the Apple volume purchase program service using the the Apple Volume Purchase Program Token.
     */
    lastSyncDateTime?: Date;
    /**
     * Possible sync statuses associated with an Apple Volume Purchase Program token.
     */
    lastSyncStatus?: VppTokenSyncStatus;
    /**
     * The organization associated with the Apple Volume Purchase Program Token
     */
    organizationName?: string;
    /**
     * Possible states associated with an Apple Volume Purchase Program token.
     */
    state?: VppTokenState;
    /**
     * The Apple Volume Purchase Program Token string downloaded from the Apple Volume Purchase Program.
     */
    token?: string;
    /**
     * Possible types of an Apple Volume Purchase Program token.
     */
    vppTokenAccountType?: VppTokenAccountType;
}
// tslint:enable
// eslint-enable
