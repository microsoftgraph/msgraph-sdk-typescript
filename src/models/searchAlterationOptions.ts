// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSearchAlterationOptionsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSearchAlterationOptions;
}
export function deserializeIntoSearchAlterationOptions(searchAlterationOptions: SearchAlterationOptions | undefined = {} as SearchAlterationOptions) : Record<string, (node: ParseNode) => void> {
    return {
        "enableModification": n => { searchAlterationOptions.enableModification = n.getBooleanValue(); },
        "enableSuggestion": n => { searchAlterationOptions.enableSuggestion = n.getBooleanValue(); },
        "@odata.type": n => { searchAlterationOptions.odataType = n.getStringValue(); },
    }
}
export interface SearchAlterationOptions extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates whether spelling modifications are enabled. If enabled, the user gets the search results for the corrected query if there were no results for the original query with typos. The response will also include the spelling modification information in the queryAlterationResponse property. Optional.
     */
    enableModification?: boolean;
    /**
     * Indicates whether spelling suggestions are enabled. If enabled, the user gets the search results for the original search query and suggestions for spelling correction in the queryAlterationResponse property of the response for the typos in the query. Optional.
     */
    enableSuggestion?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeSearchAlterationOptions(writer: SerializationWriter, searchAlterationOptions: SearchAlterationOptions | undefined = {} as SearchAlterationOptions) : void {
        writer.writeBooleanValue("enableModification", searchAlterationOptions.enableModification);
        writer.writeBooleanValue("enableSuggestion", searchAlterationOptions.enableSuggestion);
        writer.writeStringValue("@odata.type", searchAlterationOptions.odataType);
        writer.writeAdditionalData(searchAlterationOptions.additionalData);
}
// tslint:enable
// eslint-enable
