// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAgreementFromDiscriminatorValue, serializeAgreement, type Agreement } from './agreement';
import { createAgreementAcceptanceFromDiscriminatorValue, serializeAgreementAcceptance, type AgreementAcceptance } from './agreementAcceptance';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTermsOfUseContainerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTermsOfUseContainer;
}
export function deserializeIntoTermsOfUseContainer(termsOfUseContainer: TermsOfUseContainer | undefined = {} as TermsOfUseContainer) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(termsOfUseContainer),
        "agreementAcceptances": n => { termsOfUseContainer.agreementAcceptances = n.getCollectionOfObjectValues<AgreementAcceptance>(createAgreementAcceptanceFromDiscriminatorValue); },
        "agreements": n => { termsOfUseContainer.agreements = n.getCollectionOfObjectValues<Agreement>(createAgreementFromDiscriminatorValue); },
    }
}
export function serializeTermsOfUseContainer(writer: SerializationWriter, termsOfUseContainer: TermsOfUseContainer | undefined = {} as TermsOfUseContainer) : void {
    serializeEntity(writer, termsOfUseContainer)
    writer.writeCollectionOfObjectValues<AgreementAcceptance>("agreementAcceptances", termsOfUseContainer.agreementAcceptances, serializeAgreementAcceptance);
    writer.writeCollectionOfObjectValues<Agreement>("agreements", termsOfUseContainer.agreements, serializeAgreement);
}
export interface TermsOfUseContainer extends Entity, Parsable {
    /**
     * Represents the current status of a user's response to a company's customizable terms of use agreement.
     */
    agreementAcceptances?: AgreementAcceptance[];
    /**
     * Represents a tenant's customizable terms of use agreement that's created and managed with Microsoft Entra ID Governance.
     */
    agreements?: Agreement[];
}
// tslint:enable
// eslint-enable
