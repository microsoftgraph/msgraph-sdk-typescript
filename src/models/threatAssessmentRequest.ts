// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEmailFileAssessmentRequest } from './emailFileAssessmentRequest';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { deserializeIntoFileAssessmentRequest } from './fileAssessmentRequest';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type EmailFileAssessmentRequest, type FileAssessmentRequest, type MailAssessmentRequest, type UrlAssessmentRequest } from './index';
import { deserializeIntoMailAssessmentRequest } from './mailAssessmentRequest';
import { ThreatAssessmentContentType } from './threatAssessmentContentType';
import { ThreatAssessmentRequestSource } from './threatAssessmentRequestSource';
import { createThreatAssessmentResultFromDiscriminatorValue, serializeThreatAssessmentResult, type ThreatAssessmentResult } from './threatAssessmentResult';
import { ThreatAssessmentStatus } from './threatAssessmentStatus';
import { ThreatCategory } from './threatCategory';
import { ThreatExpectedAssessment } from './threatExpectedAssessment';
import { deserializeIntoUrlAssessmentRequest } from './urlAssessmentRequest';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createThreatAssessmentRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.emailFileAssessmentRequest":
                    return deserializeIntoEmailFileAssessmentRequest;
                case "#microsoft.graph.fileAssessmentRequest":
                    return deserializeIntoFileAssessmentRequest;
                case "#microsoft.graph.mailAssessmentRequest":
                    return deserializeIntoMailAssessmentRequest;
                case "#microsoft.graph.urlAssessmentRequest":
                    return deserializeIntoUrlAssessmentRequest;
            }
        }
    }
    return deserializeIntoThreatAssessmentRequest;
}
export function deserializeIntoThreatAssessmentRequest(threatAssessmentRequest: ThreatAssessmentRequest | undefined = {} as ThreatAssessmentRequest) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(threatAssessmentRequest),
        "category": n => { threatAssessmentRequest.category = n.getEnumValue<ThreatCategory>(ThreatCategory); },
        "contentType": n => { threatAssessmentRequest.contentType = n.getEnumValue<ThreatAssessmentContentType>(ThreatAssessmentContentType); },
        "createdBy": n => { threatAssessmentRequest.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { threatAssessmentRequest.createdDateTime = n.getDateValue(); },
        "expectedAssessment": n => { threatAssessmentRequest.expectedAssessment = n.getEnumValue<ThreatExpectedAssessment>(ThreatExpectedAssessment); },
        "requestSource": n => { threatAssessmentRequest.requestSource = n.getEnumValue<ThreatAssessmentRequestSource>(ThreatAssessmentRequestSource); },
        "results": n => { threatAssessmentRequest.results = n.getCollectionOfObjectValues<ThreatAssessmentResult>(createThreatAssessmentResultFromDiscriminatorValue); },
        "status": n => { threatAssessmentRequest.status = n.getEnumValue<ThreatAssessmentStatus>(ThreatAssessmentStatus); },
    }
}
export function serializeThreatAssessmentRequest(writer: SerializationWriter, threatAssessmentRequest: ThreatAssessmentRequest | undefined = {} as ThreatAssessmentRequest) : void {
        serializeEntity(writer, threatAssessmentRequest)
        writer.writeEnumValue<ThreatCategory>("category", threatAssessmentRequest.category);
        writer.writeEnumValue<ThreatAssessmentContentType>("contentType", threatAssessmentRequest.contentType);
        writer.writeObjectValue<IdentitySet>("createdBy", threatAssessmentRequest.createdBy, );
        writer.writeDateValue("createdDateTime", threatAssessmentRequest.createdDateTime);
        writer.writeEnumValue<ThreatExpectedAssessment>("expectedAssessment", threatAssessmentRequest.expectedAssessment);
        writer.writeEnumValue<ThreatAssessmentRequestSource>("requestSource", threatAssessmentRequest.requestSource);
        writer.writeCollectionOfObjectValues<ThreatAssessmentResult>("results", threatAssessmentRequest.results, );
        writer.writeEnumValue<ThreatAssessmentStatus>("status", threatAssessmentRequest.status);
}
export interface ThreatAssessmentRequest extends Entity, Parsable {
    /**
     * The category property
     */
    category?: ThreatCategory;
    /**
     * The content type of threat assessment. Possible values are: mail, url, file.
     */
    contentType?: ThreatAssessmentContentType;
    /**
     * The threat assessment request creator.
     */
    createdBy?: IdentitySet;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date;
    /**
     * The expectedAssessment property
     */
    expectedAssessment?: ThreatExpectedAssessment;
    /**
     * The source of the threat assessment request. Possible values are: administrator.
     */
    requestSource?: ThreatAssessmentRequestSource;
    /**
     * A collection of threat assessment results. Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.
     */
    results?: ThreatAssessmentResult[];
    /**
     * The assessment process status. Possible values are: pending, completed.
     */
    status?: ThreatAssessmentStatus;
}
// tslint:enable
// eslint-enable
