// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { MediaDirection } from './mediaDirection';
import { Modality } from './modality';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMediaStreamFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMediaStream;
}
export function deserializeIntoMediaStream(mediaStream: MediaStream | undefined = {} as MediaStream) : Record<string, (node: ParseNode) => void> {
    return {
        "direction": n => { mediaStream.direction = n.getEnumValue<MediaDirection>(MediaDirection); },
        "label": n => { mediaStream.label = n.getStringValue(); },
        "mediaType": n => { mediaStream.mediaType = n.getEnumValue<Modality>(Modality); },
        "@odata.type": n => { mediaStream.odataType = n.getStringValue(); },
        "serverMuted": n => { mediaStream.serverMuted = n.getBooleanValue(); },
        "sourceId": n => { mediaStream.sourceId = n.getStringValue(); },
    }
}
export interface MediaStream extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The direction property
     */
    direction?: MediaDirection;
    /**
     * The media stream label.
     */
    label?: string;
    /**
     * The mediaType property
     */
    mediaType?: Modality;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * If the media is muted by the server.
     */
    serverMuted?: boolean;
    /**
     * The source ID.
     */
    sourceId?: string;
}
export function serializeMediaStream(writer: SerializationWriter, mediaStream: MediaStream | undefined = {} as MediaStream) : void {
        writer.writeEnumValue<MediaDirection>("direction", mediaStream.direction);
        writer.writeStringValue("label", mediaStream.label);
        writer.writeEnumValue<Modality>("mediaType", mediaStream.mediaType);
        writer.writeStringValue("@odata.type", mediaStream.odataType);
        writer.writeBooleanValue("serverMuted", mediaStream.serverMuted);
        writer.writeStringValue("sourceId", mediaStream.sourceId);
        writer.writeAdditionalData(mediaStream.additionalData);
}
// tslint:enable
// eslint-enable
