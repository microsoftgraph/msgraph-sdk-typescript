// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createModifiedPropertyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoModifiedProperty;
}
export function deserializeIntoModifiedProperty(modifiedProperty: ModifiedProperty | undefined = {} as ModifiedProperty) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { modifiedProperty.displayName = n.getStringValue(); },
        "newValue": n => { modifiedProperty.newValue = n.getStringValue(); },
        "@odata.type": n => { modifiedProperty.odataType = n.getStringValue(); },
        "oldValue": n => { modifiedProperty.oldValue = n.getStringValue(); },
    }
}
export interface ModifiedProperty extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates the property name of the target attribute that was changed.
     */
    displayName?: string;
    /**
     * Indicates the updated value for the propery.
     */
    newValue?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Indicates the previous value (before the update) for the property.
     */
    oldValue?: string;
}
export function serializeModifiedProperty(writer: SerializationWriter, modifiedProperty: ModifiedProperty | undefined = {} as ModifiedProperty) : void {
    writer.writeStringValue("displayName", modifiedProperty.displayName);
    writer.writeStringValue("newValue", modifiedProperty.newValue);
    writer.writeStringValue("@odata.type", modifiedProperty.odataType);
    writer.writeStringValue("oldValue", modifiedProperty.oldValue);
    writer.writeAdditionalData(modifiedProperty.additionalData);
}
// tslint:enable
// eslint-enable
