// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCurrencyColumnFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCurrencyColumn;
}
export interface CurrencyColumn extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies the locale from which to infer the currency symbol.
     */
    locale?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function deserializeIntoCurrencyColumn(currencyColumn: CurrencyColumn | undefined = {} as CurrencyColumn) : Record<string, (node: ParseNode) => void> {
    return {
        "locale": n => { currencyColumn.locale = n.getStringValue(); },
        "@odata.type": n => { currencyColumn.odataType = n.getStringValue(); },
    }
}
export function serializeCurrencyColumn(writer: SerializationWriter, currencyColumn: CurrencyColumn | undefined = {} as CurrencyColumn) : void {
    writer.writeStringValue("locale", currencyColumn.locale);
    writer.writeStringValue("@odata.type", currencyColumn.odataType);
    writer.writeAdditionalData(currencyColumn.additionalData);
}
// tslint:enable
// eslint-enable
