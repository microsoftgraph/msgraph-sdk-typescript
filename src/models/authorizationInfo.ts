// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthorizationInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The certificateUserIds property
     */
    certificateUserIds?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createAuthorizationInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuthorizationInfo;
}
export function deserializeIntoAuthorizationInfo(authorizationInfo: AuthorizationInfo | undefined = {} as AuthorizationInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "certificateUserIds": n => { authorizationInfo.certificateUserIds = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { authorizationInfo.odataType = n.getStringValue(); },
    }
}
export function serializeAuthorizationInfo(writer: SerializationWriter, authorizationInfo: AuthorizationInfo | undefined = {} as AuthorizationInfo) : void {
        writer.writeCollectionOfPrimitiveValues<string>("certificateUserIds", authorizationInfo.certificateUserIds);
        writer.writeStringValue("@odata.type", authorizationInfo.odataType);
        writer.writeAdditionalData(authorizationInfo.additionalData);
}
// tslint:enable
// eslint-enable
