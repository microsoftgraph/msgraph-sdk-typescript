// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDefaultColumnValueFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDefaultColumnValue;
}
export interface DefaultColumnValue extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The formula used to compute the default value for the column.
     */
    formula?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The direct value to use as the default value for the column.
     */
    value?: string;
}
export function deserializeIntoDefaultColumnValue(defaultColumnValue: DefaultColumnValue | undefined = {} as DefaultColumnValue) : Record<string, (node: ParseNode) => void> {
    return {
        "formula": n => { defaultColumnValue.formula = n.getStringValue(); },
        "@odata.type": n => { defaultColumnValue.odataType = n.getStringValue(); },
        "value": n => { defaultColumnValue.value = n.getStringValue(); },
    }
}
export function serializeDefaultColumnValue(writer: SerializationWriter, defaultColumnValue: DefaultColumnValue | undefined = {} as DefaultColumnValue) : void {
        writer.writeStringValue("formula", defaultColumnValue.formula);
        writer.writeStringValue("@odata.type", defaultColumnValue.odataType);
        writer.writeStringValue("value", defaultColumnValue.value);
        writer.writeAdditionalData(defaultColumnValue.additionalData);
}
// tslint:enable
// eslint-enable
