// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEmailIdentityFromDiscriminatorValue, serializeEmailIdentity, type EmailIdentity } from './emailIdentity';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { PayloadBrand } from './payloadBrand';
import { PayloadComplexity } from './payloadComplexity';
import { PayloadDeliveryPlatform } from './payloadDeliveryPlatform';
import { createPayloadDetailFromDiscriminatorValue, serializePayloadDetail, type PayloadDetail } from './payloadDetail';
import { PayloadIndustry } from './payloadIndustry';
import { PayloadTheme } from './payloadTheme';
import { SimulationAttackTechnique } from './simulationAttackTechnique';
import { SimulationAttackType } from './simulationAttackType';
import { SimulationContentSource } from './simulationContentSource';
import { SimulationContentStatus } from './simulationContentStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPayloadFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPayload;
}
export function deserializeIntoPayload(payload: Payload | undefined = {} as Payload) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(payload),
        "brand": n => { payload.brand = n.getEnumValue<PayloadBrand>(PayloadBrand); },
        "complexity": n => { payload.complexity = n.getEnumValue<PayloadComplexity>(PayloadComplexity); },
        "createdBy": n => { payload.createdBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "createdDateTime": n => { payload.createdDateTime = n.getDateValue(); },
        "description": n => { payload.description = n.getStringValue(); },
        "detail": n => { payload.detail = n.getObjectValue<PayloadDetail>(createPayloadDetailFromDiscriminatorValue); },
        "displayName": n => { payload.displayName = n.getStringValue(); },
        "industry": n => { payload.industry = n.getEnumValue<PayloadIndustry>(PayloadIndustry); },
        "isAutomated": n => { payload.isAutomated = n.getBooleanValue(); },
        "isControversial": n => { payload.isControversial = n.getBooleanValue(); },
        "isCurrentEvent": n => { payload.isCurrentEvent = n.getBooleanValue(); },
        "language": n => { payload.language = n.getStringValue(); },
        "lastModifiedBy": n => { payload.lastModifiedBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { payload.lastModifiedDateTime = n.getDateValue(); },
        "payloadTags": n => { payload.payloadTags = n.getCollectionOfPrimitiveValues<string>(); },
        "platform": n => { payload.platform = n.getEnumValue<PayloadDeliveryPlatform>(PayloadDeliveryPlatform); },
        "predictedCompromiseRate": n => { payload.predictedCompromiseRate = n.getNumberValue(); },
        "simulationAttackType": n => { payload.simulationAttackType = n.getEnumValue<SimulationAttackType>(SimulationAttackType); },
        "source": n => { payload.source = n.getEnumValue<SimulationContentSource>(SimulationContentSource); },
        "status": n => { payload.status = n.getEnumValue<SimulationContentStatus>(SimulationContentStatus); },
        "technique": n => { payload.technique = n.getEnumValue<SimulationAttackTechnique>(SimulationAttackTechnique); },
        "theme": n => { payload.theme = n.getEnumValue<PayloadTheme>(PayloadTheme); },
    }
}
export interface Payload extends Entity, Parsable {
    /**
     * The brand property
     */
    brand?: PayloadBrand;
    /**
     * The complexity property
     */
    complexity?: PayloadComplexity;
    /**
     * The createdBy property
     */
    createdBy?: EmailIdentity;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The description property
     */
    description?: string;
    /**
     * The detail property
     */
    detail?: PayloadDetail;
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The industry property
     */
    industry?: PayloadIndustry;
    /**
     * The isAutomated property
     */
    isAutomated?: boolean;
    /**
     * The isControversial property
     */
    isControversial?: boolean;
    /**
     * The isCurrentEvent property
     */
    isCurrentEvent?: boolean;
    /**
     * The language property
     */
    language?: string;
    /**
     * The lastModifiedBy property
     */
    lastModifiedBy?: EmailIdentity;
    /**
     * The lastModifiedDateTime property
     */
    lastModifiedDateTime?: Date;
    /**
     * The payloadTags property
     */
    payloadTags?: string[];
    /**
     * The platform property
     */
    platform?: PayloadDeliveryPlatform;
    /**
     * The predictedCompromiseRate property
     */
    predictedCompromiseRate?: number;
    /**
     * The simulationAttackType property
     */
    simulationAttackType?: SimulationAttackType;
    /**
     * The source property
     */
    source?: SimulationContentSource;
    /**
     * The status property
     */
    status?: SimulationContentStatus;
    /**
     * The technique property
     */
    technique?: SimulationAttackTechnique;
    /**
     * The theme property
     */
    theme?: PayloadTheme;
}
export function serializePayload(writer: SerializationWriter, payload: Payload | undefined = {} as Payload) : void {
        serializeEntity(writer, payload)
        writer.writeEnumValue<PayloadBrand>("brand", payload.brand);
        writer.writeEnumValue<PayloadComplexity>("complexity", payload.complexity);
        writer.writeObjectValue<EmailIdentity>("createdBy", payload.createdBy, );
        writer.writeDateValue("createdDateTime", payload.createdDateTime);
        writer.writeStringValue("description", payload.description);
        writer.writeObjectValue<PayloadDetail>("detail", payload.detail, );
        writer.writeStringValue("displayName", payload.displayName);
        writer.writeEnumValue<PayloadIndustry>("industry", payload.industry);
        writer.writeBooleanValue("isAutomated", payload.isAutomated);
        writer.writeBooleanValue("isControversial", payload.isControversial);
        writer.writeBooleanValue("isCurrentEvent", payload.isCurrentEvent);
        writer.writeStringValue("language", payload.language);
        writer.writeObjectValue<EmailIdentity>("lastModifiedBy", payload.lastModifiedBy, );
        writer.writeDateValue("lastModifiedDateTime", payload.lastModifiedDateTime);
        writer.writeCollectionOfPrimitiveValues<string>("payloadTags", payload.payloadTags);
        writer.writeEnumValue<PayloadDeliveryPlatform>("platform", payload.platform);
        writer.writeNumberValue("predictedCompromiseRate", payload.predictedCompromiseRate);
        writer.writeEnumValue<SimulationAttackType>("simulationAttackType", payload.simulationAttackType);
        writer.writeEnumValue<SimulationContentSource>("source", payload.source);
        writer.writeEnumValue<SimulationContentStatus>("status", payload.status);
        writer.writeEnumValue<SimulationAttackTechnique>("technique", payload.technique);
        writer.writeEnumValue<PayloadTheme>("theme", payload.theme);
}
// tslint:enable
// eslint-enable
