// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter, type TimeOnly } from '@microsoft/kiota-abstractions';

export interface BookingWorkTimeSlot extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The time of the day when work stops. For example, 17:00:00.0000000.
     */
    endTime?: TimeOnly;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The time of the day when work starts. For example, 08:00:00.0000000.
     */
    startTime?: TimeOnly;
}
export function createBookingWorkTimeSlotFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBookingWorkTimeSlot;
}
export function deserializeIntoBookingWorkTimeSlot(bookingWorkTimeSlot: BookingWorkTimeSlot | undefined = {} as BookingWorkTimeSlot) : Record<string, (node: ParseNode) => void> {
    return {
        "endTime": n => { bookingWorkTimeSlot.endTime = n.getTimeOnlyValue(); },
        "@odata.type": n => { bookingWorkTimeSlot.odataType = n.getStringValue(); },
        "startTime": n => { bookingWorkTimeSlot.startTime = n.getTimeOnlyValue(); },
    }
}
export function serializeBookingWorkTimeSlot(writer: SerializationWriter, bookingWorkTimeSlot: BookingWorkTimeSlot | undefined = {} as BookingWorkTimeSlot) : void {
        writer.writeTimeOnlyValue("endTime", bookingWorkTimeSlot.endTime);
        writer.writeStringValue("@odata.type", bookingWorkTimeSlot.odataType);
        writer.writeTimeOnlyValue("startTime", bookingWorkTimeSlot.startTime);
        writer.writeAdditionalData(bookingWorkTimeSlot.additionalData);
}
// tslint:enable
// eslint-enable
