// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createRiskDetectionFromDiscriminatorValue, serializeRiskDetection, type RiskDetection } from './riskDetection';
import { createRiskyServicePrincipalFromDiscriminatorValue, serializeRiskyServicePrincipal, type RiskyServicePrincipal } from './riskyServicePrincipal';
import { createRiskyUserFromDiscriminatorValue, serializeRiskyUser, type RiskyUser } from './riskyUser';
import { createServicePrincipalRiskDetectionFromDiscriminatorValue, serializeServicePrincipalRiskDetection, type ServicePrincipalRiskDetection } from './servicePrincipalRiskDetection';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIdentityProtectionRootFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIdentityProtectionRoot;
}
export function deserializeIntoIdentityProtectionRoot(identityProtectionRoot: IdentityProtectionRoot | undefined = {} as IdentityProtectionRoot) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { identityProtectionRoot.odataType = n.getStringValue(); },
        "riskDetections": n => { identityProtectionRoot.riskDetections = n.getCollectionOfObjectValues<RiskDetection>(createRiskDetectionFromDiscriminatorValue); },
        "riskyServicePrincipals": n => { identityProtectionRoot.riskyServicePrincipals = n.getCollectionOfObjectValues<RiskyServicePrincipal>(createRiskyServicePrincipalFromDiscriminatorValue); },
        "riskyUsers": n => { identityProtectionRoot.riskyUsers = n.getCollectionOfObjectValues<RiskyUser>(createRiskyUserFromDiscriminatorValue); },
        "servicePrincipalRiskDetections": n => { identityProtectionRoot.servicePrincipalRiskDetections = n.getCollectionOfObjectValues<ServicePrincipalRiskDetection>(createServicePrincipalRiskDetectionFromDiscriminatorValue); },
    }
}
export interface IdentityProtectionRoot extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Risk detection in Microsoft Entra ID Protection and the associated information about the detection.
     */
    riskDetections?: RiskDetection[];
    /**
     * Microsoft Entra service principals that are at risk.
     */
    riskyServicePrincipals?: RiskyServicePrincipal[];
    /**
     * Users that are flagged as at-risk by Microsoft Entra ID Protection.
     */
    riskyUsers?: RiskyUser[];
    /**
     * Represents information about detected at-risk service principals in a Microsoft Entra tenant.
     */
    servicePrincipalRiskDetections?: ServicePrincipalRiskDetection[];
}
export function serializeIdentityProtectionRoot(writer: SerializationWriter, identityProtectionRoot: IdentityProtectionRoot | undefined = {} as IdentityProtectionRoot) : void {
    writer.writeStringValue("@odata.type", identityProtectionRoot.odataType);
    writer.writeCollectionOfObjectValues<RiskDetection>("riskDetections", identityProtectionRoot.riskDetections, serializeRiskDetection);
    writer.writeCollectionOfObjectValues<RiskyServicePrincipal>("riskyServicePrincipals", identityProtectionRoot.riskyServicePrincipals, serializeRiskyServicePrincipal);
    writer.writeCollectionOfObjectValues<RiskyUser>("riskyUsers", identityProtectionRoot.riskyUsers, serializeRiskyUser);
    writer.writeCollectionOfObjectValues<ServicePrincipalRiskDetection>("servicePrincipalRiskDetections", identityProtectionRoot.servicePrincipalRiskDetections, serializeServicePrincipalRiskDetection);
    writer.writeAdditionalData(identityProtectionRoot.additionalData);
}
// tslint:enable
// eslint-enable
