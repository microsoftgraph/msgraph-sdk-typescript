// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLocaleInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLocaleInfo;
}
export function deserializeIntoLocaleInfo(localeInfo: LocaleInfo | undefined = {} as LocaleInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { localeInfo.displayName = n.getStringValue(); },
        "locale": n => { localeInfo.locale = n.getStringValue(); },
        "@odata.type": n => { localeInfo.odataType = n.getStringValue(); },
    }
}
export interface LocaleInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A name representing the user's locale in natural language, for example, 'English (United States)'.
     */
    displayName?: string;
    /**
     * A locale representation for the user, which includes the user's preferred language and country/region. For example, 'en-us'. The language component follows 2-letter codes as defined in ISO 639-1, and the country component follows 2-letter codes as defined in ISO 3166-1 alpha-2.
     */
    locale?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeLocaleInfo(writer: SerializationWriter, localeInfo: LocaleInfo | undefined = {} as LocaleInfo) : void {
        writer.writeStringValue("displayName", localeInfo.displayName);
        writer.writeStringValue("locale", localeInfo.locale);
        writer.writeStringValue("@odata.type", localeInfo.odataType);
        writer.writeAdditionalData(localeInfo.additionalData);
}
// tslint:enable
// eslint-enable
