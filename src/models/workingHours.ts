// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DayOfWeek } from './dayOfWeek';
import { createTimeZoneBaseFromDiscriminatorValue, serializeTimeZoneBase, type TimeZoneBase } from './timeZoneBase';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter, type TimeOnly } from '@microsoft/kiota-abstractions';

export function createWorkingHoursFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkingHours;
}
export function deserializeIntoWorkingHours(workingHours: WorkingHours | undefined = {} as WorkingHours) : Record<string, (node: ParseNode) => void> {
    return {
        "daysOfWeek": n => { workingHours.daysOfWeek = n.getCollectionOfEnumValues<DayOfWeek>(DayOfWeek); },
        "endTime": n => { workingHours.endTime = n.getTimeOnlyValue(); },
        "@odata.type": n => { workingHours.odataType = n.getStringValue(); },
        "startTime": n => { workingHours.startTime = n.getTimeOnlyValue(); },
        "timeZone": n => { workingHours.timeZone = n.getObjectValue<TimeZoneBase>(createTimeZoneBaseFromDiscriminatorValue); },
    }
}
export function serializeWorkingHours(writer: SerializationWriter, workingHours: WorkingHours | undefined = {} as WorkingHours) : void {
        if(workingHours.daysOfWeek)
        writer.writeEnumValue<DayOfWeek>("daysOfWeek", ...workingHours.daysOfWeek);
        writer.writeTimeOnlyValue("endTime", workingHours.endTime);
        writer.writeStringValue("@odata.type", workingHours.odataType);
        writer.writeTimeOnlyValue("startTime", workingHours.startTime);
        writer.writeObjectValue<TimeZoneBase>("timeZone", workingHours.timeZone, serializeTimeZoneBase);
        writer.writeAdditionalData(workingHours.additionalData);
}
export interface WorkingHours extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The days of the week on which the user works.
     */
    daysOfWeek?: DayOfWeek[];
    /**
     * The time of the day that the user stops working.
     */
    endTime?: TimeOnly;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The time of the day that the user starts working.
     */
    startTime?: TimeOnly;
    /**
     * The time zone to which the working hours apply.
     */
    timeZone?: TimeZoneBase;
}
// tslint:enable
// eslint-enable
