// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ComplianceStatus } from './complianceStatus';
import { createDeviceCompliancePolicySettingStateFromDiscriminatorValue, serializeDeviceCompliancePolicySettingState, type DeviceCompliancePolicySettingState } from './deviceCompliancePolicySettingState';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { PolicyPlatformType } from './policyPlatformType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceCompliancePolicyStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceCompliancePolicyState;
}
export function deserializeIntoDeviceCompliancePolicyState(deviceCompliancePolicyState: DeviceCompliancePolicyState | undefined = {} as DeviceCompliancePolicyState) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceCompliancePolicyState),
        "displayName": n => { deviceCompliancePolicyState.displayName = n.getStringValue(); },
        "platformType": n => { deviceCompliancePolicyState.platformType = n.getEnumValue<PolicyPlatformType>(PolicyPlatformType); },
        "settingCount": n => { deviceCompliancePolicyState.settingCount = n.getNumberValue(); },
        "settingStates": n => { deviceCompliancePolicyState.settingStates = n.getCollectionOfObjectValues<DeviceCompliancePolicySettingState>(createDeviceCompliancePolicySettingStateFromDiscriminatorValue); },
        "state": n => { deviceCompliancePolicyState.state = n.getEnumValue<ComplianceStatus>(ComplianceStatus); },
        "version": n => { deviceCompliancePolicyState.version = n.getNumberValue(); },
    }
}
export interface DeviceCompliancePolicyState extends Entity, Parsable {
    /**
     * The name of the policy for this policyBase
     */
    displayName?: string;
    /**
     * Supported platform types for policies.
     */
    platformType?: PolicyPlatformType;
    /**
     * Count of how many setting a policy holds
     */
    settingCount?: number;
    /**
     * The settingStates property
     */
    settingStates?: DeviceCompliancePolicySettingState[];
    /**
     * The state property
     */
    state?: ComplianceStatus;
    /**
     * The version of the policy
     */
    version?: number;
}
export function serializeDeviceCompliancePolicyState(writer: SerializationWriter, deviceCompliancePolicyState: DeviceCompliancePolicyState | undefined = {} as DeviceCompliancePolicyState) : void {
    serializeEntity(writer, deviceCompliancePolicyState)
    writer.writeStringValue("displayName", deviceCompliancePolicyState.displayName);
    writer.writeEnumValue<PolicyPlatformType>("platformType", deviceCompliancePolicyState.platformType);
    writer.writeNumberValue("settingCount", deviceCompliancePolicyState.settingCount);
    writer.writeCollectionOfObjectValues<DeviceCompliancePolicySettingState>("settingStates", deviceCompliancePolicyState.settingStates, serializeDeviceCompliancePolicySettingState);
    writer.writeEnumValue<ComplianceStatus>("state", deviceCompliancePolicyState.state);
    writer.writeNumberValue("version", deviceCompliancePolicyState.version);
}
// tslint:enable
// eslint-enable
