// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceDetail;
}
export function deserializeIntoDeviceDetail(deviceDetail: DeviceDetail | undefined = {} as DeviceDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "browser": n => { deviceDetail.browser = n.getStringValue(); },
        "deviceId": n => { deviceDetail.deviceId = n.getStringValue(); },
        "displayName": n => { deviceDetail.displayName = n.getStringValue(); },
        "isCompliant": n => { deviceDetail.isCompliant = n.getBooleanValue(); },
        "isManaged": n => { deviceDetail.isManaged = n.getBooleanValue(); },
        "@odata.type": n => { deviceDetail.odataType = n.getStringValue(); },
        "operatingSystem": n => { deviceDetail.operatingSystem = n.getStringValue(); },
        "trustType": n => { deviceDetail.trustType = n.getStringValue(); },
    }
}
export interface DeviceDetail extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates the browser information of the used for signing in.
     */
    browser?: string;
    /**
     * Refers to the UniqueID of the device used for signing in.
     */
    deviceId?: string;
    /**
     * Refers to the name of the device used for signing in.
     */
    displayName?: string;
    /**
     * Indicates whether the device is compliant.
     */
    isCompliant?: boolean;
    /**
     * Indicates whether the device is managed.
     */
    isManaged?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Indicates the operating system name and version used for signing in.
     */
    operatingSystem?: string;
    /**
     * Provides information about whether the signed-in device is Workplace Joined, AzureAD Joined, Domain Joined.
     */
    trustType?: string;
}
export function serializeDeviceDetail(writer: SerializationWriter, deviceDetail: DeviceDetail | undefined = {} as DeviceDetail) : void {
        writer.writeStringValue("browser", deviceDetail.browser);
        writer.writeStringValue("deviceId", deviceDetail.deviceId);
        writer.writeStringValue("displayName", deviceDetail.displayName);
        writer.writeBooleanValue("isCompliant", deviceDetail.isCompliant);
        writer.writeBooleanValue("isManaged", deviceDetail.isManaged);
        writer.writeStringValue("@odata.type", deviceDetail.odataType);
        writer.writeStringValue("operatingSystem", deviceDetail.operatingSystem);
        writer.writeStringValue("trustType", deviceDetail.trustType);
        writer.writeAdditionalData(deviceDetail.additionalData);
}
// tslint:enable
// eslint-enable
