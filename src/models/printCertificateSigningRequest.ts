// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrintCertificateSigningRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrintCertificateSigningRequest;
}
export function deserializeIntoPrintCertificateSigningRequest(printCertificateSigningRequest: PrintCertificateSigningRequest | undefined = {} as PrintCertificateSigningRequest) : Record<string, (node: ParseNode) => void> {
    return {
        "content": n => { printCertificateSigningRequest.content = n.getStringValue(); },
        "@odata.type": n => { printCertificateSigningRequest.odataType = n.getStringValue(); },
        "transportKey": n => { printCertificateSigningRequest.transportKey = n.getStringValue(); },
    }
}
export interface PrintCertificateSigningRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A base64-encoded pkcs10 certificate request. Read-only.
     */
    content?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The base64-encoded public portion of an asymmetric key that is generated by the client. Read-only.
     */
    transportKey?: string;
}
export function serializePrintCertificateSigningRequest(writer: SerializationWriter, printCertificateSigningRequest: PrintCertificateSigningRequest | undefined = {} as PrintCertificateSigningRequest) : void {
    writer.writeStringValue("content", printCertificateSigningRequest.content);
    writer.writeStringValue("@odata.type", printCertificateSigningRequest.odataType);
    writer.writeStringValue("transportKey", printCertificateSigningRequest.transportKey);
    writer.writeAdditionalData(printCertificateSigningRequest.additionalData);
}
// tslint:enable
// eslint-enable
