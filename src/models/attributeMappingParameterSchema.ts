// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AttributeType } from './attributeType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttributeMappingParameterSchema extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The given parameter can be provided multiple times (for example, multiple input strings in the Concatenate(string,string,...) function).
     */
    allowMultipleOccurrences?: boolean;
    /**
     * Parameter name.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * true if the parameter is required; otherwise false.
     */
    required?: boolean;
    /**
     * The type property
     */
    type?: AttributeType;
}
export function createAttributeMappingParameterSchemaFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttributeMappingParameterSchema;
}
export function deserializeIntoAttributeMappingParameterSchema(attributeMappingParameterSchema: AttributeMappingParameterSchema | undefined = {} as AttributeMappingParameterSchema) : Record<string, (node: ParseNode) => void> {
    return {
        "allowMultipleOccurrences": n => { attributeMappingParameterSchema.allowMultipleOccurrences = n.getBooleanValue(); },
        "name": n => { attributeMappingParameterSchema.name = n.getStringValue(); },
        "@odata.type": n => { attributeMappingParameterSchema.odataType = n.getStringValue(); },
        "required": n => { attributeMappingParameterSchema.required = n.getBooleanValue(); },
        "type": n => { attributeMappingParameterSchema.type = n.getEnumValue<AttributeType>(AttributeType); },
    }
}
export function serializeAttributeMappingParameterSchema(writer: SerializationWriter, attributeMappingParameterSchema: AttributeMappingParameterSchema | undefined = {} as AttributeMappingParameterSchema) : void {
        writer.writeBooleanValue("allowMultipleOccurrences", attributeMappingParameterSchema.allowMultipleOccurrences);
        writer.writeStringValue("name", attributeMappingParameterSchema.name);
        writer.writeStringValue("@odata.type", attributeMappingParameterSchema.odataType);
        writer.writeBooleanValue("required", attributeMappingParameterSchema.required);
        writer.writeEnumValue<AttributeType>("type", attributeMappingParameterSchema.type);
        writer.writeAdditionalData(attributeMappingParameterSchema.additionalData);
}
// tslint:enable
// eslint-enable
