// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from './json';
import { createWorkbookFilterFromDiscriminatorValue, serializeWorkbookFilter, type WorkbookFilter } from './workbookFilter';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookTableColumnFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookTableColumn;
}
export function deserializeIntoWorkbookTableColumn(workbookTableColumn: WorkbookTableColumn | undefined = {} as WorkbookTableColumn) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookTableColumn),
        "filter": n => { workbookTableColumn.filter = n.getObjectValue<WorkbookFilter>(createWorkbookFilterFromDiscriminatorValue); },
        "index": n => { workbookTableColumn.index = n.getNumberValue(); },
        "name": n => { workbookTableColumn.name = n.getStringValue(); },
        "values": n => { workbookTableColumn.values = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeWorkbookTableColumn(writer: SerializationWriter, workbookTableColumn: WorkbookTableColumn | undefined = {} as WorkbookTableColumn) : void {
        serializeEntity(writer, workbookTableColumn)
        writer.writeObjectValue<WorkbookFilter>("filter", workbookTableColumn.filter, serializeWorkbookFilter);
        writer.writeNumberValue("index", workbookTableColumn.index);
        writer.writeStringValue("name", workbookTableColumn.name);
        writer.writeObjectValue<Json>("values", workbookTableColumn.values, serializeJson);
}
export interface WorkbookTableColumn extends Entity, Parsable {
    /**
     * Retrieve the filter applied to the column. Read-only.
     */
    filter?: WorkbookFilter;
    /**
     * Returns the index number of the column within the columns collection of the table. Zero-indexed. Read-only.
     */
    index?: number;
    /**
     * Returns the name of the table column.
     */
    name?: string;
    /**
     * Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
     */
    values?: Json;
}
// tslint:enable
// eslint-enable
