// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AuthenticationMethodModes } from './authenticationMethodModes';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUpdateAllowedCombinationsResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUpdateAllowedCombinationsResult;
}
export function deserializeIntoUpdateAllowedCombinationsResult(updateAllowedCombinationsResult: UpdateAllowedCombinationsResult | undefined = {} as UpdateAllowedCombinationsResult) : Record<string, (node: ParseNode) => void> {
    return {
        "additionalInformation": n => { updateAllowedCombinationsResult.additionalInformation = n.getStringValue(); },
        "conditionalAccessReferences": n => { updateAllowedCombinationsResult.conditionalAccessReferences = n.getCollectionOfPrimitiveValues<string>(); },
        "currentCombinations": n => { updateAllowedCombinationsResult.currentCombinations = n.getCollectionOfEnumValues<AuthenticationMethodModes>(AuthenticationMethodModes); },
        "@odata.type": n => { updateAllowedCombinationsResult.odataType = n.getStringValue(); },
        "previousCombinations": n => { updateAllowedCombinationsResult.previousCombinations = n.getCollectionOfEnumValues<AuthenticationMethodModes>(AuthenticationMethodModes); },
    }
}
export function serializeUpdateAllowedCombinationsResult(writer: SerializationWriter, updateAllowedCombinationsResult: UpdateAllowedCombinationsResult | undefined = {} as UpdateAllowedCombinationsResult) : void {
        writer.writeStringValue("additionalInformation", updateAllowedCombinationsResult.additionalInformation);
        writer.writeCollectionOfPrimitiveValues<string>("conditionalAccessReferences", updateAllowedCombinationsResult.conditionalAccessReferences);
        if(updateAllowedCombinationsResult.currentCombinations)
        writer.writeEnumValue<AuthenticationMethodModes>("currentCombinations", ...updateAllowedCombinationsResult.currentCombinations);
        writer.writeStringValue("@odata.type", updateAllowedCombinationsResult.odataType);
        if(updateAllowedCombinationsResult.previousCombinations)
        writer.writeEnumValue<AuthenticationMethodModes>("previousCombinations", ...updateAllowedCombinationsResult.previousCombinations);
        writer.writeAdditionalData(updateAllowedCombinationsResult.additionalData);
}
export interface UpdateAllowedCombinationsResult extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Information about why the updateAllowedCombinations action was successful or failed.
     */
    additionalInformation?: string;
    /**
     * References to existing Conditional Access policies that use this authentication strength.
     */
    conditionalAccessReferences?: string[];
    /**
     * The list of current authentication method combinations allowed by the authentication strength.
     */
    currentCombinations?: AuthenticationMethodModes[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The list of former authentication method combinations allowed by the authentication strength before they were updated through the updateAllowedCombinations action.
     */
    previousCombinations?: AuthenticationMethodModes[];
}
// tslint:enable
// eslint-enable
