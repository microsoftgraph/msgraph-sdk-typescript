// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type OfferShiftRequest, type OpenShift, type OpenShiftChangeRequest, type ScheduleChangeRequest, type SchedulingGroup, type Shift, type ShiftPreferences, type SwapShiftsChangeRequest, type TimeOff, type TimeOffReason, type TimeOffRequest, type WorkforceIntegration } from './index';
import { deserializeIntoOfferShiftRequest } from './offerShiftRequest';
import { deserializeIntoOpenShift } from './openShift';
import { deserializeIntoOpenShiftChangeRequest } from './openShiftChangeRequest';
import { deserializeIntoScheduleChangeRequest } from './scheduleChangeRequest';
import { deserializeIntoSchedulingGroup } from './schedulingGroup';
import { deserializeIntoShift } from './shift';
import { deserializeIntoShiftPreferences } from './shiftPreferences';
import { deserializeIntoSwapShiftsChangeRequest } from './swapShiftsChangeRequest';
import { deserializeIntoTimeOff } from './timeOff';
import { deserializeIntoTimeOffReason } from './timeOffReason';
import { deserializeIntoTimeOffRequest } from './timeOffRequest';
import { deserializeIntoWorkforceIntegration } from './workforceIntegration';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ChangeTrackedEntity extends Entity, Parsable {
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    createdDateTime?: Date;
    /**
     * Identity of the person who last modified the entity.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    lastModifiedDateTime?: Date;
}
export function createChangeTrackedEntityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.offerShiftRequest":
                    return deserializeIntoOfferShiftRequest;
                case "#microsoft.graph.openShift":
                    return deserializeIntoOpenShift;
                case "#microsoft.graph.openShiftChangeRequest":
                    return deserializeIntoOpenShiftChangeRequest;
                case "#microsoft.graph.scheduleChangeRequest":
                    return deserializeIntoScheduleChangeRequest;
                case "#microsoft.graph.schedulingGroup":
                    return deserializeIntoSchedulingGroup;
                case "#microsoft.graph.shift":
                    return deserializeIntoShift;
                case "#microsoft.graph.shiftPreferences":
                    return deserializeIntoShiftPreferences;
                case "#microsoft.graph.swapShiftsChangeRequest":
                    return deserializeIntoSwapShiftsChangeRequest;
                case "#microsoft.graph.timeOff":
                    return deserializeIntoTimeOff;
                case "#microsoft.graph.timeOffReason":
                    return deserializeIntoTimeOffReason;
                case "#microsoft.graph.timeOffRequest":
                    return deserializeIntoTimeOffRequest;
                case "#microsoft.graph.workforceIntegration":
                    return deserializeIntoWorkforceIntegration;
            }
        }
    }
    return deserializeIntoChangeTrackedEntity;
}
export function deserializeIntoChangeTrackedEntity(changeTrackedEntity: ChangeTrackedEntity | undefined = {} as ChangeTrackedEntity) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(changeTrackedEntity),
        "createdDateTime": n => { changeTrackedEntity.createdDateTime = n.getDateValue(); },
        "lastModifiedBy": n => { changeTrackedEntity.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { changeTrackedEntity.lastModifiedDateTime = n.getDateValue(); },
    }
}
export function serializeChangeTrackedEntity(writer: SerializationWriter, changeTrackedEntity: ChangeTrackedEntity | undefined = {} as ChangeTrackedEntity) : void {
        serializeEntity(writer, changeTrackedEntity)
}
// tslint:enable
// eslint-enable
