// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AllowedValue extends Entity, Parsable {
    /**
     * Indicates whether the predefined value is active or deactivated. If set to false, this predefined value can't be assigned to any other supported directory objects.
     */
    isActive?: boolean;
}
export function createAllowedValueFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAllowedValue;
}
export function deserializeIntoAllowedValue(allowedValue: AllowedValue | undefined = {} as AllowedValue) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(allowedValue),
        "isActive": n => { allowedValue.isActive = n.getBooleanValue(); },
    }
}
export function serializeAllowedValue(writer: SerializationWriter, allowedValue: AllowedValue | undefined = {} as AllowedValue) : void {
    serializeEntity(writer, allowedValue)
    writer.writeBooleanValue("isActive", allowedValue.isActive);
}
// tslint:enable
// eslint-enable
