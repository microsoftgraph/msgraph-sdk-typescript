// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createImplicitGrantSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoImplicitGrantSettings;
}
export function deserializeIntoImplicitGrantSettings(implicitGrantSettings: ImplicitGrantSettings | undefined = {} as ImplicitGrantSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "enableAccessTokenIssuance": n => { implicitGrantSettings.enableAccessTokenIssuance = n.getBooleanValue(); },
        "enableIdTokenIssuance": n => { implicitGrantSettings.enableIdTokenIssuance = n.getBooleanValue(); },
        "@odata.type": n => { implicitGrantSettings.odataType = n.getStringValue(); },
    }
}
export interface ImplicitGrantSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies whether this web application can request an access token using the OAuth 2.0 implicit flow.
     */
    enableAccessTokenIssuance?: boolean;
    /**
     * Specifies whether this web application can request an ID token using the OAuth 2.0 implicit flow.
     */
    enableIdTokenIssuance?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeImplicitGrantSettings(writer: SerializationWriter, implicitGrantSettings: ImplicitGrantSettings | undefined = {} as ImplicitGrantSettings) : void {
        writer.writeBooleanValue("enableAccessTokenIssuance", implicitGrantSettings.enableAccessTokenIssuance);
        writer.writeBooleanValue("enableIdTokenIssuance", implicitGrantSettings.enableIdTokenIssuance);
        writer.writeStringValue("@odata.type", implicitGrantSettings.odataType);
        writer.writeAdditionalData(implicitGrantSettings.additionalData);
}
// tslint:enable
// eslint-enable
