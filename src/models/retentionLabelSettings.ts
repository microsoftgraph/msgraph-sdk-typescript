// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { BehaviorDuringRetentionPeriod } from './security/behaviorDuringRetentionPeriod';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRetentionLabelSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRetentionLabelSettings;
}
export function deserializeIntoRetentionLabelSettings(retentionLabelSettings: RetentionLabelSettings | undefined = {} as RetentionLabelSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "behaviorDuringRetentionPeriod": n => { retentionLabelSettings.behaviorDuringRetentionPeriod = n.getEnumValue<BehaviorDuringRetentionPeriod>(BehaviorDuringRetentionPeriod); },
        "isContentUpdateAllowed": n => { retentionLabelSettings.isContentUpdateAllowed = n.getBooleanValue(); },
        "isDeleteAllowed": n => { retentionLabelSettings.isDeleteAllowed = n.getBooleanValue(); },
        "isLabelUpdateAllowed": n => { retentionLabelSettings.isLabelUpdateAllowed = n.getBooleanValue(); },
        "isMetadataUpdateAllowed": n => { retentionLabelSettings.isMetadataUpdateAllowed = n.getBooleanValue(); },
        "isRecordLocked": n => { retentionLabelSettings.isRecordLocked = n.getBooleanValue(); },
        "@odata.type": n => { retentionLabelSettings.odataType = n.getStringValue(); },
    }
}
export interface RetentionLabelSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Describes the item behavior during retention period. Possible values are: doNotRetain, retain, retainAsRecord, retainAsRegulatoryRecord, unknownFutureValue. Read-only.
     */
    behaviorDuringRetentionPeriod?: BehaviorDuringRetentionPeriod;
    /**
     * Specifies whether updates to document content are allowed. Read-only.
     */
    isContentUpdateAllowed?: boolean;
    /**
     * Specifies whether the document deletion is allowed. Read-only.
     */
    isDeleteAllowed?: boolean;
    /**
     * Specifies whether you're allowed to change the retention label on the document. Read-only.
     */
    isLabelUpdateAllowed?: boolean;
    /**
     * Specifies whether updates to the item metadata (for example, the Title field) are blocked. Read-only.
     */
    isMetadataUpdateAllowed?: boolean;
    /**
     * Specifies whether the item is locked. Read-write.
     */
    isRecordLocked?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeRetentionLabelSettings(writer: SerializationWriter, retentionLabelSettings: RetentionLabelSettings | undefined = {} as RetentionLabelSettings) : void {
    writer.writeEnumValue<BehaviorDuringRetentionPeriod>("behaviorDuringRetentionPeriod", retentionLabelSettings.behaviorDuringRetentionPeriod);
    writer.writeBooleanValue("isContentUpdateAllowed", retentionLabelSettings.isContentUpdateAllowed);
    writer.writeBooleanValue("isDeleteAllowed", retentionLabelSettings.isDeleteAllowed);
    writer.writeBooleanValue("isLabelUpdateAllowed", retentionLabelSettings.isLabelUpdateAllowed);
    writer.writeBooleanValue("isMetadataUpdateAllowed", retentionLabelSettings.isMetadataUpdateAllowed);
    writer.writeBooleanValue("isRecordLocked", retentionLabelSettings.isRecordLocked);
    writer.writeStringValue("@odata.type", retentionLabelSettings.odataType);
    writer.writeAdditionalData(retentionLabelSettings.additionalData);
}
// tslint:enable
// eslint-enable
