// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { X509CertificateAuthenticationMode } from './x509CertificateAuthenticationMode';
import { X509CertificateRuleType } from './x509CertificateRuleType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createX509CertificateRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoX509CertificateRule;
}
export function deserializeIntoX509CertificateRule(x509CertificateRule: X509CertificateRule | undefined = {} as X509CertificateRule) : Record<string, (node: ParseNode) => void> {
    return {
        "identifier": n => { x509CertificateRule.identifier = n.getStringValue(); },
        "@odata.type": n => { x509CertificateRule.odataType = n.getStringValue(); },
        "x509CertificateAuthenticationMode": n => { x509CertificateRule.x509CertificateAuthenticationMode = n.getEnumValue<X509CertificateAuthenticationMode>(X509CertificateAuthenticationMode); },
        "x509CertificateRuleType": n => { x509CertificateRule.x509CertificateRuleType = n.getEnumValue<X509CertificateRuleType>(X509CertificateRuleType); },
    }
}
export function serializeX509CertificateRule(writer: SerializationWriter, x509CertificateRule: X509CertificateRule | undefined = {} as X509CertificateRule) : void {
    writer.writeStringValue("identifier", x509CertificateRule.identifier);
    writer.writeStringValue("@odata.type", x509CertificateRule.odataType);
    writer.writeEnumValue<X509CertificateAuthenticationMode>("x509CertificateAuthenticationMode", x509CertificateRule.x509CertificateAuthenticationMode);
    writer.writeEnumValue<X509CertificateRuleType>("x509CertificateRuleType", x509CertificateRule.x509CertificateRuleType);
    writer.writeAdditionalData(x509CertificateRule.additionalData);
}
export interface X509CertificateRule extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The identifier of the X.509 certificate. Required.
     */
    identifier?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The type of strong authentication mode. The possible values are: x509CertificateSingleFactor, x509CertificateMultiFactor, unknownFutureValue. Required.
     */
    x509CertificateAuthenticationMode?: X509CertificateAuthenticationMode;
    /**
     * The type of the X.509 certificate mode configuration rule. The possible values are: issuerSubject, policyOID, unknownFutureValue. Required.
     */
    x509CertificateRuleType?: X509CertificateRuleType;
}
// tslint:enable
// eslint-enable
