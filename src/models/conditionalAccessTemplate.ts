// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConditionalAccessPolicyDetailFromDiscriminatorValue, serializeConditionalAccessPolicyDetail, type ConditionalAccessPolicyDetail } from './conditionalAccessPolicyDetail';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { TemplateScenarios } from './templateScenarios';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessTemplate extends Entity, Parsable {
    /**
     * The user-friendly name of the template.
     */
    description?: string;
    /**
     * The details property
     */
    details?: ConditionalAccessPolicyDetail;
    /**
     * The user-friendly name of the template.
     */
    name?: string;
    /**
     * The scenarios property
     */
    scenarios?: TemplateScenarios[];
}
export function createConditionalAccessTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessTemplate;
}
export function deserializeIntoConditionalAccessTemplate(conditionalAccessTemplate: ConditionalAccessTemplate | undefined = {} as ConditionalAccessTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(conditionalAccessTemplate),
        "description": n => { conditionalAccessTemplate.description = n.getStringValue(); },
        "details": n => { conditionalAccessTemplate.details = n.getObjectValue<ConditionalAccessPolicyDetail>(createConditionalAccessPolicyDetailFromDiscriminatorValue); },
        "name": n => { conditionalAccessTemplate.name = n.getStringValue(); },
        "scenarios": n => { conditionalAccessTemplate.scenarios = n.getCollectionOfEnumValues<TemplateScenarios>(TemplateScenarios); },
    }
}
export function serializeConditionalAccessTemplate(writer: SerializationWriter, conditionalAccessTemplate: ConditionalAccessTemplate | undefined = {} as ConditionalAccessTemplate) : void {
    serializeEntity(writer, conditionalAccessTemplate)
    writer.writeStringValue("description", conditionalAccessTemplate.description);
    writer.writeObjectValue<ConditionalAccessPolicyDetail>("details", conditionalAccessTemplate.details, serializeConditionalAccessPolicyDetail);
    writer.writeStringValue("name", conditionalAccessTemplate.name);
    writer.writeEnumValue<TemplateScenarios[]>("scenarios", conditionalAccessTemplate.scenarios);
}
// tslint:enable
// eslint-enable
