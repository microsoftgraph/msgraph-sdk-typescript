// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoBookingCustomerBase, serializeBookingCustomerBase, type BookingCustomerBase } from './bookingCustomerBase';
import { createPhoneFromDiscriminatorValue, serializePhone, type Phone } from './phone';
import { createPhysicalAddressFromDiscriminatorValue, serializePhysicalAddress, type PhysicalAddress } from './physicalAddress';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BookingCustomer extends BookingCustomerBase, Parsable {
    /**
     * Addresses associated with the customer. The attribute type of physicalAddress is not supported in v1.0. Internally we map the addresses to the type others.
     */
    addresses?: PhysicalAddress[];
    /**
     * The name of the customer.
     */
    displayName?: string;
    /**
     * The SMTP address of the customer.
     */
    emailAddress?: string;
    /**
     * Phone numbers associated with the customer, including home, business and mobile numbers.
     */
    phones?: Phone[];
}
export function createBookingCustomerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBookingCustomer;
}
export function deserializeIntoBookingCustomer(bookingCustomer: BookingCustomer | undefined = {} as BookingCustomer) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBookingCustomerBase(bookingCustomer),
        "addresses": n => { bookingCustomer.addresses = n.getCollectionOfObjectValues<PhysicalAddress>(createPhysicalAddressFromDiscriminatorValue); },
        "displayName": n => { bookingCustomer.displayName = n.getStringValue(); },
        "emailAddress": n => { bookingCustomer.emailAddress = n.getStringValue(); },
        "phones": n => { bookingCustomer.phones = n.getCollectionOfObjectValues<Phone>(createPhoneFromDiscriminatorValue); },
    }
}
export function serializeBookingCustomer(writer: SerializationWriter, bookingCustomer: BookingCustomer | undefined = {} as BookingCustomer) : void {
    serializeBookingCustomerBase(writer, bookingCustomer)
    writer.writeCollectionOfObjectValues<PhysicalAddress>("addresses", bookingCustomer.addresses, serializePhysicalAddress);
    writer.writeStringValue("displayName", bookingCustomer.displayName);
    writer.writeStringValue("emailAddress", bookingCustomer.emailAddress);
    writer.writeCollectionOfObjectValues<Phone>("phones", bookingCustomer.phones, serializePhone);
}
// tslint:enable
// eslint-enable
