// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type ServiceProvisioningXmlError } from './index';
import { deserializeIntoServiceProvisioningXmlError } from './serviceProvisioningXmlError';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createServiceProvisioningErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.serviceProvisioningXmlError":
                    return deserializeIntoServiceProvisioningXmlError;
            }
        }
    }
    return deserializeIntoServiceProvisioningError;
}
export function deserializeIntoServiceProvisioningError(serviceProvisioningError: ServiceProvisioningError | undefined = {} as ServiceProvisioningError) : Record<string, (node: ParseNode) => void> {
    return {
        "createdDateTime": n => { serviceProvisioningError.createdDateTime = n.getDateValue(); },
        "isResolved": n => { serviceProvisioningError.isResolved = n.getBooleanValue(); },
        "@odata.type": n => { serviceProvisioningError.odataType = n.getStringValue(); },
        "serviceInstance": n => { serviceProvisioningError.serviceInstance = n.getStringValue(); },
    }
}
export function serializeServiceProvisioningError(writer: SerializationWriter, serviceProvisioningError: ServiceProvisioningError | undefined = {} as ServiceProvisioningError) : void {
    writer.writeDateValue("createdDateTime", serviceProvisioningError.createdDateTime);
    writer.writeBooleanValue("isResolved", serviceProvisioningError.isResolved);
    writer.writeStringValue("@odata.type", serviceProvisioningError.odataType);
    writer.writeStringValue("serviceInstance", serviceProvisioningError.serviceInstance);
    writer.writeAdditionalData(serviceProvisioningError.additionalData);
}
export interface ServiceProvisioningError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The isResolved property
     */
    isResolved?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The serviceInstance property
     */
    serviceInstance?: string;
}
// tslint:enable
// eslint-enable
