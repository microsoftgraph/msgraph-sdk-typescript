// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createBroadcastMeetingSettingsFromDiscriminatorValue, serializeBroadcastMeetingSettings, type BroadcastMeetingSettings } from './broadcastMeetingSettings';
import { createCallRecordingFromDiscriminatorValue, serializeCallRecording, type CallRecording } from './callRecording';
import { createCallTranscriptFromDiscriminatorValue, serializeCallTranscript, type CallTranscript } from './callTranscript';
import { createMeetingParticipantsFromDiscriminatorValue, serializeMeetingParticipants, type MeetingParticipants } from './meetingParticipants';
import { deserializeIntoOnlineMeetingBase, serializeOnlineMeetingBase, type OnlineMeetingBase } from './onlineMeetingBase';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOnlineMeetingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOnlineMeeting;
}
export function deserializeIntoOnlineMeeting(onlineMeeting: OnlineMeeting | undefined = {} as OnlineMeeting) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOnlineMeetingBase(onlineMeeting),
        "attendeeReport": n => { onlineMeeting.attendeeReport = n.getStringValue(); },
        "broadcastSettings": n => { onlineMeeting.broadcastSettings = n.getObjectValue<BroadcastMeetingSettings>(createBroadcastMeetingSettingsFromDiscriminatorValue); },
        "creationDateTime": n => { onlineMeeting.creationDateTime = n.getDateValue(); },
        "endDateTime": n => { onlineMeeting.endDateTime = n.getDateValue(); },
        "externalId": n => { onlineMeeting.externalId = n.getStringValue(); },
        "isBroadcast": n => { onlineMeeting.isBroadcast = n.getBooleanValue(); },
        "participants": n => { onlineMeeting.participants = n.getObjectValue<MeetingParticipants>(createMeetingParticipantsFromDiscriminatorValue); },
        "recordings": n => { onlineMeeting.recordings = n.getCollectionOfObjectValues<CallRecording>(createCallRecordingFromDiscriminatorValue); },
        "startDateTime": n => { onlineMeeting.startDateTime = n.getDateValue(); },
        "transcripts": n => { onlineMeeting.transcripts = n.getCollectionOfObjectValues<CallTranscript>(createCallTranscriptFromDiscriminatorValue); },
    }
}
export interface OnlineMeeting extends OnlineMeetingBase, Parsable {
    /**
     * The attendeeReport property
     */
    attendeeReport?: string;
    /**
     * The broadcastSettings property
     */
    broadcastSettings?: BroadcastMeetingSettings;
    /**
     * The meeting creation time in UTC. Read-only.
     */
    creationDateTime?: Date;
    /**
     * The meeting end time in UTC.
     */
    endDateTime?: Date;
    /**
     * The externalId property
     */
    externalId?: string;
    /**
     * The isBroadcast property
     */
    isBroadcast?: boolean;
    /**
     * The participants associated with the online meeting.  This includes the organizer and the attendees.
     */
    participants?: MeetingParticipants;
    /**
     * The recordings of an online meeting. Read-only.
     */
    recordings?: CallRecording[];
    /**
     * The meeting start time in UTC.
     */
    startDateTime?: Date;
    /**
     * The transcripts of an online meeting. Read-only.
     */
    transcripts?: CallTranscript[];
}
export function serializeOnlineMeeting(writer: SerializationWriter, onlineMeeting: OnlineMeeting | undefined = {} as OnlineMeeting) : void {
    serializeOnlineMeetingBase(writer, onlineMeeting)
    writer.writeStringValue("attendeeReport", onlineMeeting.attendeeReport);
    writer.writeObjectValue<BroadcastMeetingSettings>("broadcastSettings", onlineMeeting.broadcastSettings, serializeBroadcastMeetingSettings);
    writer.writeDateValue("creationDateTime", onlineMeeting.creationDateTime);
    writer.writeDateValue("endDateTime", onlineMeeting.endDateTime);
    writer.writeStringValue("externalId", onlineMeeting.externalId);
    writer.writeBooleanValue("isBroadcast", onlineMeeting.isBroadcast);
    writer.writeObjectValue<MeetingParticipants>("participants", onlineMeeting.participants, serializeMeetingParticipants);
    writer.writeCollectionOfObjectValues<CallRecording>("recordings", onlineMeeting.recordings, serializeCallRecording);
    writer.writeDateValue("startDateTime", onlineMeeting.startDateTime);
    writer.writeCollectionOfObjectValues<CallTranscript>("transcripts", onlineMeeting.transcripts, serializeCallTranscript);
}
// tslint:enable
// eslint-enable
