// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEmailIdentityFromDiscriminatorValue, serializeEmailIdentity, type EmailIdentity } from './emailIdentity';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { SimulationContentSource } from './simulationContentSource';
import { SimulationContentStatus } from './simulationContentStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLoginPageFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLoginPage;
}
export function deserializeIntoLoginPage(loginPage: LoginPage | undefined = {} as LoginPage) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(loginPage),
        "content": n => { loginPage.content = n.getStringValue(); },
        "createdBy": n => { loginPage.createdBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "createdDateTime": n => { loginPage.createdDateTime = n.getDateValue(); },
        "description": n => { loginPage.description = n.getStringValue(); },
        "displayName": n => { loginPage.displayName = n.getStringValue(); },
        "language": n => { loginPage.language = n.getStringValue(); },
        "lastModifiedBy": n => { loginPage.lastModifiedBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { loginPage.lastModifiedDateTime = n.getDateValue(); },
        "source": n => { loginPage.source = n.getEnumValue<SimulationContentSource>(SimulationContentSource); },
        "status": n => { loginPage.status = n.getEnumValue<SimulationContentStatus>(SimulationContentStatus); },
    }
}
export interface LoginPage extends Entity, Parsable {
    /**
     * The HTML content of the login page.
     */
    content?: string;
    /**
     * Identity of the user who created the login page.
     */
    createdBy?: EmailIdentity;
    /**
     * Date and time when the login page was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date;
    /**
     * Description about the login page.
     */
    description?: string;
    /**
     * Display name of the login page.
     */
    displayName?: string;
    /**
     * The content language of the login page.
     */
    language?: string;
    /**
     * Identity of the user who last modified the login page.
     */
    lastModifiedBy?: EmailIdentity;
    /**
     * Date and time when the login page was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastModifiedDateTime?: Date;
    /**
     * The source of the content. Possible values are: unknown, global, tenant, unknownFutureValue.
     */
    source?: SimulationContentSource;
    /**
     * The login page status. Possible values are: unknown, draft, ready, archive, delete, unknownFutureValue.
     */
    status?: SimulationContentStatus;
}
export function serializeLoginPage(writer: SerializationWriter, loginPage: LoginPage | undefined = {} as LoginPage) : void {
        serializeEntity(writer, loginPage)
        writer.writeStringValue("content", loginPage.content);
        writer.writeObjectValue<EmailIdentity>("createdBy", loginPage.createdBy, serializeEmailIdentity);
        writer.writeDateValue("createdDateTime", loginPage.createdDateTime);
        writer.writeStringValue("description", loginPage.description);
        writer.writeStringValue("displayName", loginPage.displayName);
        writer.writeStringValue("language", loginPage.language);
        writer.writeObjectValue<EmailIdentity>("lastModifiedBy", loginPage.lastModifiedBy, serializeEmailIdentity);
        writer.writeDateValue("lastModifiedDateTime", loginPage.lastModifiedDateTime);
        writer.writeEnumValue<SimulationContentSource>("source", loginPage.source);
        writer.writeEnumValue<SimulationContentStatus>("status", loginPage.status);
}
// tslint:enable
// eslint-enable
