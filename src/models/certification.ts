// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Certification extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * URL that shows certification details for the application.
     */
    certificationDetailsUrl?: string;
    /**
     * The timestamp when the current certification for the application expires.
     */
    certificationExpirationDateTime?: Date;
    /**
     * Indicates whether the application is certified by Microsoft.
     */
    isCertifiedByMicrosoft?: boolean;
    /**
     * Indicates whether the application has been self-attested by the application developer or the publisher.
     */
    isPublisherAttested?: boolean;
    /**
     * The timestamp when the certification for the application was most recently added or updated.
     */
    lastCertificationDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createCertificationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCertification;
}
export function deserializeIntoCertification(certification: Certification | undefined = {} as Certification) : Record<string, (node: ParseNode) => void> {
    return {
        "certificationDetailsUrl": n => { certification.certificationDetailsUrl = n.getStringValue(); },
        "certificationExpirationDateTime": n => { certification.certificationExpirationDateTime = n.getDateValue(); },
        "isCertifiedByMicrosoft": n => { certification.isCertifiedByMicrosoft = n.getBooleanValue(); },
        "isPublisherAttested": n => { certification.isPublisherAttested = n.getBooleanValue(); },
        "lastCertificationDateTime": n => { certification.lastCertificationDateTime = n.getDateValue(); },
        "@odata.type": n => { certification.odataType = n.getStringValue(); },
    }
}
export function serializeCertification(writer: SerializationWriter, certification: Certification | undefined = {} as Certification) : void {
    writer.writeDateValue("certificationExpirationDateTime", certification.certificationExpirationDateTime);
    writer.writeBooleanValue("isPublisherAttested", certification.isPublisherAttested);
    writer.writeDateValue("lastCertificationDateTime", certification.lastCertificationDateTime);
    writer.writeStringValue("@odata.type", certification.odataType);
    writer.writeAdditionalData(certification.additionalData);
}
// tslint:enable
// eslint-enable
