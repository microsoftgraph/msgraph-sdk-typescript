// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoLocation, serializeLocation, type Location } from './location';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLocationConstraintItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLocationConstraintItem;
}
export function deserializeIntoLocationConstraintItem(locationConstraintItem: LocationConstraintItem | undefined = {} as LocationConstraintItem) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoLocation(locationConstraintItem),
        "resolveAvailability": n => { locationConstraintItem.resolveAvailability = n.getBooleanValue(); },
    }
}
export interface LocationConstraintItem extends Location, Parsable {
    /**
     * If set to true and the specified resource is busy, findMeetingTimes looks for another resource that is free. If set to false and the specified resource is busy, findMeetingTimes returns the resource best ranked in the user's cache without checking if it's free. Default is true.
     */
    resolveAvailability?: boolean;
}
export function serializeLocationConstraintItem(writer: SerializationWriter, locationConstraintItem: LocationConstraintItem | undefined = {} as LocationConstraintItem) : void {
    serializeLocation(writer, locationConstraintItem)
    writer.writeBooleanValue("resolveAvailability", locationConstraintItem.resolveAvailability);
}
// tslint:enable
// eslint-enable
