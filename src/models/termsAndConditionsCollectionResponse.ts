// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, type BaseCollectionPaginationCountResponse } from './baseCollectionPaginationCountResponse';
import { createTermsAndConditionsFromDiscriminatorValue, serializeTermsAndConditions, type TermsAndConditions } from './termsAndConditions';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTermsAndConditionsCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTermsAndConditionsCollectionResponse;
}
export function deserializeIntoTermsAndConditionsCollectionResponse(termsAndConditionsCollectionResponse: TermsAndConditionsCollectionResponse | undefined = {} as TermsAndConditionsCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(termsAndConditionsCollectionResponse),
        "value": n => { termsAndConditionsCollectionResponse.value = n.getCollectionOfObjectValues<TermsAndConditions>(createTermsAndConditionsFromDiscriminatorValue); },
    }
}
export function serializeTermsAndConditionsCollectionResponse(writer: SerializationWriter, termsAndConditionsCollectionResponse: TermsAndConditionsCollectionResponse | undefined = {} as TermsAndConditionsCollectionResponse) : void {
        serializeBaseCollectionPaginationCountResponse(writer, termsAndConditionsCollectionResponse)
        writer.writeCollectionOfObjectValues<TermsAndConditions>("value", termsAndConditionsCollectionResponse.value, serializeTermsAndConditions);
}
export interface TermsAndConditionsCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: TermsAndConditions[];
}
// tslint:enable
// eslint-enable
