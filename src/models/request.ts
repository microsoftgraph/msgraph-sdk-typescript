// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type PrivilegedAccessGroupAssignmentScheduleRequest, type PrivilegedAccessGroupEligibilityScheduleRequest, type PrivilegedAccessScheduleRequest, type UnifiedRoleAssignmentScheduleRequest, type UnifiedRoleEligibilityScheduleRequest, type UserConsentRequest } from './index';
import { deserializeIntoPrivilegedAccessGroupAssignmentScheduleRequest } from './privilegedAccessGroupAssignmentScheduleRequest';
import { deserializeIntoPrivilegedAccessGroupEligibilityScheduleRequest } from './privilegedAccessGroupEligibilityScheduleRequest';
import { deserializeIntoPrivilegedAccessScheduleRequest } from './privilegedAccessScheduleRequest';
import { deserializeIntoUnifiedRoleAssignmentScheduleRequest } from './unifiedRoleAssignmentScheduleRequest';
import { deserializeIntoUnifiedRoleEligibilityScheduleRequest } from './unifiedRoleEligibilityScheduleRequest';
import { deserializeIntoUserConsentRequest } from './userConsentRequest';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.privilegedAccessGroupAssignmentScheduleRequest":
                    return deserializeIntoPrivilegedAccessGroupAssignmentScheduleRequest;
                case "#microsoft.graph.privilegedAccessGroupEligibilityScheduleRequest":
                    return deserializeIntoPrivilegedAccessGroupEligibilityScheduleRequest;
                case "#microsoft.graph.privilegedAccessScheduleRequest":
                    return deserializeIntoPrivilegedAccessScheduleRequest;
                case "#microsoft.graph.unifiedRoleAssignmentScheduleRequest":
                    return deserializeIntoUnifiedRoleAssignmentScheduleRequest;
                case "#microsoft.graph.unifiedRoleEligibilityScheduleRequest":
                    return deserializeIntoUnifiedRoleEligibilityScheduleRequest;
                case "#microsoft.graph.userConsentRequest":
                    return deserializeIntoUserConsentRequest;
            }
        }
    }
    return deserializeIntoRequest;
}
export function deserializeIntoRequest(request: Request | undefined = {} as Request) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(request),
        "approvalId": n => { request.approvalId = n.getStringValue(); },
        "completedDateTime": n => { request.completedDateTime = n.getDateValue(); },
        "createdBy": n => { request.createdBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "createdDateTime": n => { request.createdDateTime = n.getDateValue(); },
        "customData": n => { request.customData = n.getStringValue(); },
        "status": n => { request.status = n.getStringValue(); },
    }
}
export interface Request extends Entity, Parsable {
    /**
     * The identifier of the approval of the request.
     */
    approvalId?: string;
    /**
     * The request completion date time.
     */
    completedDateTime?: Date;
    /**
     * The principal that created the request.
     */
    createdBy?: IdentitySet;
    /**
     * The request creation date time.
     */
    createdDateTime?: Date;
    /**
     * Free text field to define any custom data for the request. Not used.
     */
    customData?: string;
    /**
     * The status of the request. Not nullable. The possible values are: Canceled, Denied, Failed, Granted, PendingAdminDecision, PendingApproval, PendingProvisioning, PendingScheduleCreation, Provisioned, Revoked, and ScheduleCreated. Not nullable.
     */
    status?: string;
}
export function serializeRequest(writer: SerializationWriter, request: Request | undefined = {} as Request) : void {
    serializeEntity(writer, request)
    writer.writeStringValue("approvalId", request.approvalId);
    writer.writeDateValue("completedDateTime", request.completedDateTime);
    writer.writeObjectValue<IdentitySet>("createdBy", request.createdBy, serializeIdentitySet);
    writer.writeDateValue("createdDateTime", request.createdDateTime);
    writer.writeStringValue("customData", request.customData);
    writer.writeStringValue("status", request.status);
}
// tslint:enable
// eslint-enable
