// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createObjectDefinitionFromDiscriminatorValue, serializeObjectDefinition, type ObjectDefinition } from './objectDefinition';
import { createStringKeyObjectValuePairFromDiscriminatorValue, serializeStringKeyObjectValuePair, type StringKeyObjectValuePair } from './stringKeyObjectValuePair';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createExpressionInputObjectFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoExpressionInputObject;
}
export function deserializeIntoExpressionInputObject(expressionInputObject: ExpressionInputObject | undefined = {} as ExpressionInputObject) : Record<string, (node: ParseNode) => void> {
    return {
        "definition": n => { expressionInputObject.definition = n.getObjectValue<ObjectDefinition>(createObjectDefinitionFromDiscriminatorValue); },
        "@odata.type": n => { expressionInputObject.odataType = n.getStringValue(); },
        "properties": n => { expressionInputObject.properties = n.getCollectionOfObjectValues<StringKeyObjectValuePair>(createStringKeyObjectValuePairFromDiscriminatorValue); },
    }
}
export interface ExpressionInputObject extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Definition of the test object.
     */
    definition?: ObjectDefinition;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Property values of the test object.
     */
    properties?: StringKeyObjectValuePair[];
}
export function serializeExpressionInputObject(writer: SerializationWriter, expressionInputObject: ExpressionInputObject | undefined = {} as ExpressionInputObject) : void {
        writer.writeObjectValue<ObjectDefinition>("definition", expressionInputObject.definition, serializeObjectDefinition);
        writer.writeStringValue("@odata.type", expressionInputObject.odataType);
        writer.writeCollectionOfObjectValues<StringKeyObjectValuePair>("properties", expressionInputObject.properties, serializeStringKeyObjectValuePair);
        writer.writeAdditionalData(expressionInputObject.additionalData);
}
// tslint:enable
// eslint-enable
