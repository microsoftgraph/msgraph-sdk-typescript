// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type OnenoteOperation } from './index';
import { deserializeIntoOnenoteOperation } from './onenoteOperation';
import { OperationStatus } from './operationStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.onenoteOperation":
                    return deserializeIntoOnenoteOperation;
            }
        }
    }
    return deserializeIntoOperation;
}
export function deserializeIntoOperation(operation: Operation | undefined = {} as Operation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(operation),
        "createdDateTime": n => { operation.createdDateTime = n.getDateValue(); },
        "lastActionDateTime": n => { operation.lastActionDateTime = n.getDateValue(); },
        "status": n => { operation.status = n.getEnumValue<OperationStatus>(OperationStatus); },
    }
}
export interface Operation extends Entity, Parsable {
    /**
     * The start time of the operation.
     */
    createdDateTime?: Date;
    /**
     * The time of the last action of the operation.
     */
    lastActionDateTime?: Date;
    /**
     * The current status of the operation: notStarted, running, completed, failed
     */
    status?: OperationStatus;
}
export function serializeOperation(writer: SerializationWriter, operation: Operation | undefined = {} as Operation) : void {
    serializeEntity(writer, operation)
    writer.writeDateValue("createdDateTime", operation.createdDateTime);
    writer.writeDateValue("lastActionDateTime", operation.lastActionDateTime);
    writer.writeEnumValue<OperationStatus>("status", operation.status);
}
// tslint:enable
// eslint-enable
