// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { createDomainDnsRecordFromDiscriminatorValue, serializeDomainDnsRecord, type DomainDnsRecord } from './domainDnsRecord';
import { createDomainStateFromDiscriminatorValue, serializeDomainState, type DomainState } from './domainState';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createInternalDomainFederationFromDiscriminatorValue, serializeInternalDomainFederation, type InternalDomainFederation } from './internalDomainFederation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDomainFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDomain;
}
export function deserializeIntoDomain(domain: Domain | undefined = {} as Domain) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(domain),
        "authenticationType": n => { domain.authenticationType = n.getStringValue(); },
        "availabilityStatus": n => { domain.availabilityStatus = n.getStringValue(); },
        "domainNameReferences": n => { domain.domainNameReferences = n.getCollectionOfObjectValues<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "federationConfiguration": n => { domain.federationConfiguration = n.getCollectionOfObjectValues<InternalDomainFederation>(createInternalDomainFederationFromDiscriminatorValue); },
        "isAdminManaged": n => { domain.isAdminManaged = n.getBooleanValue(); },
        "isDefault": n => { domain.isDefault = n.getBooleanValue(); },
        "isInitial": n => { domain.isInitial = n.getBooleanValue(); },
        "isRoot": n => { domain.isRoot = n.getBooleanValue(); },
        "isVerified": n => { domain.isVerified = n.getBooleanValue(); },
        "manufacturer": n => { domain.manufacturer = n.getStringValue(); },
        "model": n => { domain.model = n.getStringValue(); },
        "passwordNotificationWindowInDays": n => { domain.passwordNotificationWindowInDays = n.getNumberValue(); },
        "passwordValidityPeriodInDays": n => { domain.passwordValidityPeriodInDays = n.getNumberValue(); },
        "serviceConfigurationRecords": n => { domain.serviceConfigurationRecords = n.getCollectionOfObjectValues<DomainDnsRecord>(createDomainDnsRecordFromDiscriminatorValue); },
        "state": n => { domain.state = n.getObjectValue<DomainState>(createDomainStateFromDiscriminatorValue); },
        "supportedServices": n => { domain.supportedServices = n.getCollectionOfPrimitiveValues<string>(); },
        "verificationDnsRecords": n => { domain.verificationDnsRecords = n.getCollectionOfObjectValues<DomainDnsRecord>(createDomainDnsRecordFromDiscriminatorValue); },
    }
}
export interface Domain extends Entity, Parsable {
    /**
     * Indicates the configured authentication type for the domain. The value is either Managed or Federated. Managed indicates a cloud managed domain where Microsoft Entra ID performs user authentication. Federated indicates authentication is federated with an identity provider such as the tenant's on-premises Active Directory via Active Directory Federation Services. Not nullable.
     */
    authenticationType?: string;
    /**
     * This property is always null except when the verify action is used. When the verify action is used, a domain entity is returned in the response. The availabilityStatus property of the domain entity in the response is either AvailableImmediately or EmailVerifiedDomainTakeoverScheduled.
     */
    availabilityStatus?: string;
    /**
     * The objects such as users and groups that reference the domain ID. Read-only, Nullable. Supports $expand and $filter by the OData type of objects returned. For example /domains/{domainId}/domainNameReferences/microsoft.graph.user and /domains/{domainId}/domainNameReferences/microsoft.graph.group.
     */
    domainNameReferences?: DirectoryObject[];
    /**
     * Domain settings configured by a customer when federated with Microsoft Entra ID. Supports $expand.
     */
    federationConfiguration?: InternalDomainFederation[];
    /**
     * The value of the property is false if the DNS record management of the domain has been delegated to Microsoft 365. Otherwise, the value is true. Not nullable
     */
    isAdminManaged?: boolean;
    /**
     * true if this is the default domain that is used for user creation. There is only one default domain per company. Not nullable
     */
    isDefault?: boolean;
    /**
     * true if this is the initial domain created by Microsoft Online Services (companyname.onmicrosoft.com). There is only one initial domain per company. Not nullable
     */
    isInitial?: boolean;
    /**
     * true if the domain is a verified root domain. Otherwise, false if the domain is a subdomain or unverified. Not nullable
     */
    isRoot?: boolean;
    /**
     * true if the domain has completed domain ownership verification. Not nullable
     */
    isVerified?: boolean;
    /**
     * The manufacturer property
     */
    manufacturer?: string;
    /**
     * The model property
     */
    model?: string;
    /**
     * Specifies the number of days before a user receives notification that their password will expire. If the property is not set, a default value of 14 days will be used.
     */
    passwordNotificationWindowInDays?: number;
    /**
     * Specifies the length of time that a password is valid before it must be changed. If the property is not set, a default value of 90 days will be used.
     */
    passwordValidityPeriodInDays?: number;
    /**
     * DNS records the customer adds to the DNS zone file of the domain before the domain can be used by Microsoft Online services. Read-only, Nullable. Supports $expand.
     */
    serviceConfigurationRecords?: DomainDnsRecord[];
    /**
     * Status of asynchronous operations scheduled for the domain.
     */
    state?: DomainState;
    /**
     * The capabilities assigned to the domain. Can include 0, 1 or more of following values: Email, Sharepoint, EmailInternalRelayOnly, OfficeCommunicationsOnline, SharePointDefaultDomain, FullRedelegation, SharePointPublic, OrgIdAuthentication, Yammer, Intune. The values which you can add/remove using Graph API include: Email, OfficeCommunicationsOnline, Yammer. Not nullable.
     */
    supportedServices?: string[];
    /**
     * DNS records that the customer adds to the DNS zone file of the domain before the customer can complete domain ownership verification with Microsoft Entra ID. Read-only, Nullable. Supports $expand.
     */
    verificationDnsRecords?: DomainDnsRecord[];
}
export function serializeDomain(writer: SerializationWriter, domain: Domain | undefined = {} as Domain) : void {
    serializeEntity(writer, domain)
    writer.writeStringValue("authenticationType", domain.authenticationType);
    writer.writeStringValue("availabilityStatus", domain.availabilityStatus);
    writer.writeCollectionOfObjectValues<DirectoryObject>("domainNameReferences", domain.domainNameReferences, serializeDirectoryObject);
    writer.writeCollectionOfObjectValues<InternalDomainFederation>("federationConfiguration", domain.federationConfiguration, serializeInternalDomainFederation);
    writer.writeBooleanValue("isAdminManaged", domain.isAdminManaged);
    writer.writeBooleanValue("isDefault", domain.isDefault);
    writer.writeBooleanValue("isInitial", domain.isInitial);
    writer.writeBooleanValue("isRoot", domain.isRoot);
    writer.writeBooleanValue("isVerified", domain.isVerified);
    writer.writeStringValue("manufacturer", domain.manufacturer);
    writer.writeStringValue("model", domain.model);
    writer.writeNumberValue("passwordNotificationWindowInDays", domain.passwordNotificationWindowInDays);
    writer.writeNumberValue("passwordValidityPeriodInDays", domain.passwordValidityPeriodInDays);
    writer.writeCollectionOfObjectValues<DomainDnsRecord>("serviceConfigurationRecords", domain.serviceConfigurationRecords, serializeDomainDnsRecord);
    writer.writeObjectValue<DomainState>("state", domain.state, serializeDomainState);
    writer.writeCollectionOfPrimitiveValues<string>("supportedServices", domain.supportedServices);
    writer.writeCollectionOfObjectValues<DomainDnsRecord>("verificationDnsRecords", domain.verificationDnsRecords, serializeDomainDnsRecord);
}
// tslint:enable
// eslint-enable
