// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConversationThreadFromDiscriminatorValue, serializeConversationThread, type ConversationThread } from './conversationThread';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Conversation extends Entity, Parsable {
    /**
     * Indicates whether any of the posts within this Conversation has at least one attachment. Supports $filter (eq, ne) and $search.
     */
    hasAttachments?: boolean;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
     */
    lastDeliveredDateTime?: Date;
    /**
     * A short summary from the body of the latest post in this conversation. Supports $filter (eq, ne, le, ge).
     */
    preview?: string;
    /**
     * A collection of all the conversation threads in the conversation. A navigation property. Read-only. Nullable.
     */
    threads?: ConversationThread[];
    /**
     * The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated.
     */
    topic?: string;
    /**
     * All the users that sent a message to this Conversation.
     */
    uniqueSenders?: string[];
}
export function createConversationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConversation;
}
export function deserializeIntoConversation(conversation: Conversation | undefined = {} as Conversation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(conversation),
        "hasAttachments": n => { conversation.hasAttachments = n.getBooleanValue(); },
        "lastDeliveredDateTime": n => { conversation.lastDeliveredDateTime = n.getDateValue(); },
        "preview": n => { conversation.preview = n.getStringValue(); },
        "threads": n => { conversation.threads = n.getCollectionOfObjectValues<ConversationThread>(createConversationThreadFromDiscriminatorValue); },
        "topic": n => { conversation.topic = n.getStringValue(); },
        "uniqueSenders": n => { conversation.uniqueSenders = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export function serializeConversation(writer: SerializationWriter, conversation: Conversation | undefined = {} as Conversation) : void {
        serializeEntity(writer, conversation)
        writer.writeBooleanValue("hasAttachments", conversation.hasAttachments);
        writer.writeDateValue("lastDeliveredDateTime", conversation.lastDeliveredDateTime);
        writer.writeStringValue("preview", conversation.preview);
        writer.writeCollectionOfObjectValues<ConversationThread>("threads", conversation.threads, );
        writer.writeStringValue("topic", conversation.topic);
        writer.writeCollectionOfPrimitiveValues<string>("uniqueSenders", conversation.uniqueSenders);
}
// tslint:enable
// eslint-enable
