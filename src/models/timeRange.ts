import { TimeOnly, type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createTimeRangeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTimeRange;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoTimeRange(timeRange: TimeRange | undefined = {} as TimeRange) : Record<string, (node: ParseNode) => void> {
    return {
        "endTime": n => { timeRange.endTime = n.getTimeOnlyValue(); },
        "@odata.type": n => { timeRange.odataType = n.getStringValue(); },
        "startTime": n => { timeRange.startTime = n.getTimeOnlyValue(); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeTimeRange(writer: SerializationWriter, timeRange: TimeRange | undefined = {} as TimeRange) : void {
        writer.writeTimeOnlyValue("endTime", timeRange.endTime);
        writer.writeStringValue("@odata.type", timeRange.odataType);
        writer.writeTimeOnlyValue("startTime", timeRange.startTime);
        writer.writeAdditionalData(timeRange.additionalData);
}
export interface TimeRange extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * End time for the time range.
     */
    endTime?: TimeOnly;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Start time for the time range.
     */
    startTime?: TimeOnly;
}
