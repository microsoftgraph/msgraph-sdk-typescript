// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSettingTemplateValueFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSettingTemplateValue;
}
export function deserializeIntoSettingTemplateValue(settingTemplateValue: SettingTemplateValue | undefined = {} as SettingTemplateValue) : Record<string, (node: ParseNode) => void> {
    return {
        "defaultValue": n => { settingTemplateValue.defaultValue = n.getStringValue(); },
        "description": n => { settingTemplateValue.description = n.getStringValue(); },
        "name": n => { settingTemplateValue.name = n.getStringValue(); },
        "@odata.type": n => { settingTemplateValue.odataType = n.getStringValue(); },
        "type": n => { settingTemplateValue.type = n.getStringValue(); },
    }
}
export function serializeSettingTemplateValue(writer: SerializationWriter, settingTemplateValue: SettingTemplateValue | undefined = {} as SettingTemplateValue) : void {
    writer.writeStringValue("defaultValue", settingTemplateValue.defaultValue);
    writer.writeStringValue("description", settingTemplateValue.description);
    writer.writeStringValue("name", settingTemplateValue.name);
    writer.writeStringValue("@odata.type", settingTemplateValue.odataType);
    writer.writeStringValue("type", settingTemplateValue.type);
    writer.writeAdditionalData(settingTemplateValue.additionalData);
}
export interface SettingTemplateValue extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Default value for the setting.
     */
    defaultValue?: string;
    /**
     * Description of the setting.
     */
    description?: string;
    /**
     * Name of the setting.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Type of the setting.
     */
    type?: string;
}
// tslint:enable
// eslint-enable
