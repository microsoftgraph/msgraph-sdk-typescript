// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ComplianceStatus } from './complianceStatus';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceComplianceSettingStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceComplianceSettingState;
}
export function deserializeIntoDeviceComplianceSettingState(deviceComplianceSettingState: DeviceComplianceSettingState | undefined = {} as DeviceComplianceSettingState) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceComplianceSettingState),
        "complianceGracePeriodExpirationDateTime": n => { deviceComplianceSettingState.complianceGracePeriodExpirationDateTime = n.getDateValue(); },
        "deviceId": n => { deviceComplianceSettingState.deviceId = n.getStringValue(); },
        "deviceModel": n => { deviceComplianceSettingState.deviceModel = n.getStringValue(); },
        "deviceName": n => { deviceComplianceSettingState.deviceName = n.getStringValue(); },
        "setting": n => { deviceComplianceSettingState.setting = n.getStringValue(); },
        "settingName": n => { deviceComplianceSettingState.settingName = n.getStringValue(); },
        "state": n => { deviceComplianceSettingState.state = n.getEnumValue<ComplianceStatus>(ComplianceStatus); },
        "userEmail": n => { deviceComplianceSettingState.userEmail = n.getStringValue(); },
        "userId": n => { deviceComplianceSettingState.userId = n.getStringValue(); },
        "userName": n => { deviceComplianceSettingState.userName = n.getStringValue(); },
        "userPrincipalName": n => { deviceComplianceSettingState.userPrincipalName = n.getStringValue(); },
    }
}
export interface DeviceComplianceSettingState extends Entity, Parsable {
    /**
     * The DateTime when device compliance grace period expires
     */
    complianceGracePeriodExpirationDateTime?: Date;
    /**
     * The Device Id that is being reported
     */
    deviceId?: string;
    /**
     * The device model that is being reported
     */
    deviceModel?: string;
    /**
     * The Device Name that is being reported
     */
    deviceName?: string;
    /**
     * The setting class name and property name.
     */
    setting?: string;
    /**
     * The Setting Name that is being reported
     */
    settingName?: string;
    /**
     * The state property
     */
    state?: ComplianceStatus;
    /**
     * The User email address that is being reported
     */
    userEmail?: string;
    /**
     * The user Id that is being reported
     */
    userId?: string;
    /**
     * The User Name that is being reported
     */
    userName?: string;
    /**
     * The User PrincipalName that is being reported
     */
    userPrincipalName?: string;
}
export function serializeDeviceComplianceSettingState(writer: SerializationWriter, deviceComplianceSettingState: DeviceComplianceSettingState | undefined = {} as DeviceComplianceSettingState) : void {
        serializeEntity(writer, deviceComplianceSettingState)
        writer.writeDateValue("complianceGracePeriodExpirationDateTime", deviceComplianceSettingState.complianceGracePeriodExpirationDateTime);
        writer.writeStringValue("deviceId", deviceComplianceSettingState.deviceId);
        writer.writeStringValue("deviceModel", deviceComplianceSettingState.deviceModel);
        writer.writeStringValue("deviceName", deviceComplianceSettingState.deviceName);
        writer.writeStringValue("setting", deviceComplianceSettingState.setting);
        writer.writeStringValue("settingName", deviceComplianceSettingState.settingName);
        writer.writeEnumValue<ComplianceStatus>("state", deviceComplianceSettingState.state);
        writer.writeStringValue("userEmail", deviceComplianceSettingState.userEmail);
        writer.writeStringValue("userId", deviceComplianceSettingState.userId);
        writer.writeStringValue("userName", deviceComplianceSettingState.userName);
        writer.writeStringValue("userPrincipalName", deviceComplianceSettingState.userPrincipalName);
}
// tslint:enable
// eslint-enable
