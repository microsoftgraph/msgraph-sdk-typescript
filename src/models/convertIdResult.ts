// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createGenericErrorFromDiscriminatorValue, serializeGenericError, type GenericError } from './genericError';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConvertIdResult extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * An error object indicating the reason for the conversion failure. This value isn't present if the conversion succeeded.
     */
    errorDetails?: GenericError;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The identifier that was converted. This value is the original, un-converted identifier.
     */
    sourceId?: string;
    /**
     * The converted identifier. This value isn't present if the conversion failed.
     */
    targetId?: string;
}
export function createConvertIdResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConvertIdResult;
}
export function deserializeIntoConvertIdResult(convertIdResult: ConvertIdResult | undefined = {} as ConvertIdResult) : Record<string, (node: ParseNode) => void> {
    return {
        "errorDetails": n => { convertIdResult.errorDetails = n.getObjectValue<GenericError>(createGenericErrorFromDiscriminatorValue); },
        "@odata.type": n => { convertIdResult.odataType = n.getStringValue(); },
        "sourceId": n => { convertIdResult.sourceId = n.getStringValue(); },
        "targetId": n => { convertIdResult.targetId = n.getStringValue(); },
    }
}
export function serializeConvertIdResult(writer: SerializationWriter, convertIdResult: ConvertIdResult | undefined = {} as ConvertIdResult) : void {
    writer.writeObjectValue<GenericError>("errorDetails", convertIdResult.errorDetails, serializeGenericError);
    writer.writeStringValue("@odata.type", convertIdResult.odataType);
    writer.writeStringValue("sourceId", convertIdResult.sourceId);
    writer.writeStringValue("targetId", convertIdResult.targetId);
    writer.writeAdditionalData(convertIdResult.additionalData);
}
// tslint:enable
// eslint-enable
