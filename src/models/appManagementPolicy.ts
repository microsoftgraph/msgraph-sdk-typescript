// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAppManagementConfigurationFromDiscriminatorValue, serializeAppManagementConfiguration, type AppManagementConfiguration } from './appManagementConfiguration';
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { deserializeIntoPolicyBase, serializePolicyBase, type PolicyBase } from './policyBase';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AppManagementPolicy extends Parsable, PolicyBase {
    /**
     * Collection of applications and service principals to which the policy is applied.
     */
    appliesTo?: DirectoryObject[];
    /**
     * Denotes whether the policy is enabled.
     */
    isEnabled?: boolean;
    /**
     * Restrictions that apply to an application or service principal object.
     */
    restrictions?: AppManagementConfiguration;
}
export function createAppManagementPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAppManagementPolicy;
}
export function deserializeIntoAppManagementPolicy(appManagementPolicy: AppManagementPolicy | undefined = {} as AppManagementPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPolicyBase(appManagementPolicy),
        "appliesTo": n => { appManagementPolicy.appliesTo = n.getCollectionOfObjectValues<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "isEnabled": n => { appManagementPolicy.isEnabled = n.getBooleanValue(); },
        "restrictions": n => { appManagementPolicy.restrictions = n.getObjectValue<AppManagementConfiguration>(createAppManagementConfigurationFromDiscriminatorValue); },
    }
}
export function serializeAppManagementPolicy(writer: SerializationWriter, appManagementPolicy: AppManagementPolicy | undefined = {} as AppManagementPolicy) : void {
        serializePolicyBase(writer, appManagementPolicy)
        writer.writeCollectionOfObjectValues<DirectoryObject>("appliesTo", appManagementPolicy.appliesTo, serializeDirectoryObject);
        writer.writeBooleanValue("isEnabled", appManagementPolicy.isEnabled);
        writer.writeObjectValue<AppManagementConfiguration>("restrictions", appManagementPolicy.restrictions, serializeAppManagementConfiguration);
}
// tslint:enable
// eslint-enable
