// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AllowInvitesFrom } from './allowInvitesFrom';
import { createDefaultUserRolePermissionsFromDiscriminatorValue, serializeDefaultUserRolePermissions, type DefaultUserRolePermissions } from './defaultUserRolePermissions';
import { deserializeIntoPolicyBase, serializePolicyBase, type PolicyBase } from './policyBase';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export interface AuthorizationPolicy extends Parsable, PolicyBase {
    /**
     * Indicates whether users can sign up for email based subscriptions.
     */
    allowedToSignUpEmailBasedSubscriptions?: boolean;
    /**
     * Indicates whether users can use the Self-Serve Password Reset feature on the tenant.
     */
    allowedToUseSSPR?: boolean;
    /**
     * Indicates whether a user can join the tenant by email validation.
     */
    allowEmailVerifiedUsersToJoinOrganization?: boolean;
    /**
     * Indicates who can invite external users to the organization. Possible values are: none, adminsAndGuestInviters, adminsGuestInvitersAndAllMembers, everyone.  everyone is the default setting for all cloud environments except US Government. For more information, see allowInvitesFrom values.
     */
    allowInvitesFrom?: AllowInvitesFrom;
    /**
     * Indicates whether user consent for risky apps is allowed. We recommend keeping allowUserConsentForRiskyApps as false. Default value is false.
     */
    allowUserConsentForRiskyApps?: boolean;
    /**
     * To disable the use of MSOL PowerShell, set this property to true. This also disables user-based access to the legacy service endpoint used by MSOL PowerShell. This doesn't affect Microsoft Entra Connect or Microsoft Graph.
     */
    blockMsolPowerShell?: boolean;
    /**
     * The defaultUserRolePermissions property
     */
    defaultUserRolePermissions?: DefaultUserRolePermissions;
    /**
     * Represents role templateId for the role that should be granted to guest user. Currently following roles are supported:  User (a0b1b346-4d3e-4e8b-98f8-753987be4970), Guest User (10dae51f-b6af-4016-8d66-8c2a99b929b3), and Restricted Guest User (2af84b1e-32c8-42b7-82bc-daa82404023b).
     */
    guestUserRoleId?: Guid;
}
export function createAuthorizationPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuthorizationPolicy;
}
export function deserializeIntoAuthorizationPolicy(authorizationPolicy: AuthorizationPolicy | undefined = {} as AuthorizationPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPolicyBase(authorizationPolicy),
        "allowedToSignUpEmailBasedSubscriptions": n => { authorizationPolicy.allowedToSignUpEmailBasedSubscriptions = n.getBooleanValue(); },
        "allowedToUseSSPR": n => { authorizationPolicy.allowedToUseSSPR = n.getBooleanValue(); },
        "allowEmailVerifiedUsersToJoinOrganization": n => { authorizationPolicy.allowEmailVerifiedUsersToJoinOrganization = n.getBooleanValue(); },
        "allowInvitesFrom": n => { authorizationPolicy.allowInvitesFrom = n.getEnumValue<AllowInvitesFrom>(AllowInvitesFrom); },
        "allowUserConsentForRiskyApps": n => { authorizationPolicy.allowUserConsentForRiskyApps = n.getBooleanValue(); },
        "blockMsolPowerShell": n => { authorizationPolicy.blockMsolPowerShell = n.getBooleanValue(); },
        "defaultUserRolePermissions": n => { authorizationPolicy.defaultUserRolePermissions = n.getObjectValue<DefaultUserRolePermissions>(createDefaultUserRolePermissionsFromDiscriminatorValue); },
        "guestUserRoleId": n => { authorizationPolicy.guestUserRoleId = n.getGuidValue(); },
    }
}
export function serializeAuthorizationPolicy(writer: SerializationWriter, authorizationPolicy: AuthorizationPolicy | undefined = {} as AuthorizationPolicy) : void {
        serializePolicyBase(writer, authorizationPolicy)
        writer.writeBooleanValue("allowedToSignUpEmailBasedSubscriptions", authorizationPolicy.allowedToSignUpEmailBasedSubscriptions);
        writer.writeBooleanValue("allowedToUseSSPR", authorizationPolicy.allowedToUseSSPR);
        writer.writeBooleanValue("allowEmailVerifiedUsersToJoinOrganization", authorizationPolicy.allowEmailVerifiedUsersToJoinOrganization);
        writer.writeEnumValue<AllowInvitesFrom>("allowInvitesFrom", authorizationPolicy.allowInvitesFrom);
        writer.writeBooleanValue("allowUserConsentForRiskyApps", authorizationPolicy.allowUserConsentForRiskyApps);
        writer.writeBooleanValue("blockMsolPowerShell", authorizationPolicy.blockMsolPowerShell);
        writer.writeObjectValue<DefaultUserRolePermissions>("defaultUserRolePermissions", authorizationPolicy.defaultUserRolePermissions, );
        writer.writeGuidValue("guestUserRoleId", authorizationPolicy.guestUserRoleId);
}
// tslint:enable
// eslint-enable
