// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAutomaticRepliesSettingFromDiscriminatorValue, serializeAutomaticRepliesSetting, type AutomaticRepliesSetting } from './automaticRepliesSetting';
import { DelegateMeetingMessageDeliveryOptions } from './delegateMeetingMessageDeliveryOptions';
import { createLocaleInfoFromDiscriminatorValue, serializeLocaleInfo, type LocaleInfo } from './localeInfo';
import { UserPurpose } from './userPurpose';
import { createWorkingHoursFromDiscriminatorValue, serializeWorkingHours, type WorkingHours } from './workingHours';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMailboxSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMailboxSettings;
}
export function deserializeIntoMailboxSettings(mailboxSettings: MailboxSettings | undefined = {} as MailboxSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "archiveFolder": n => { mailboxSettings.archiveFolder = n.getStringValue(); },
        "automaticRepliesSetting": n => { mailboxSettings.automaticRepliesSetting = n.getObjectValue<AutomaticRepliesSetting>(createAutomaticRepliesSettingFromDiscriminatorValue); },
        "dateFormat": n => { mailboxSettings.dateFormat = n.getStringValue(); },
        "delegateMeetingMessageDeliveryOptions": n => { mailboxSettings.delegateMeetingMessageDeliveryOptions = n.getEnumValue<DelegateMeetingMessageDeliveryOptions>(DelegateMeetingMessageDeliveryOptions); },
        "language": n => { mailboxSettings.language = n.getObjectValue<LocaleInfo>(createLocaleInfoFromDiscriminatorValue); },
        "@odata.type": n => { mailboxSettings.odataType = n.getStringValue(); },
        "timeFormat": n => { mailboxSettings.timeFormat = n.getStringValue(); },
        "timeZone": n => { mailboxSettings.timeZone = n.getStringValue(); },
        "userPurpose": n => { mailboxSettings.userPurpose = n.getEnumValue<UserPurpose>(UserPurpose); },
        "workingHours": n => { mailboxSettings.workingHours = n.getObjectValue<WorkingHours>(createWorkingHoursFromDiscriminatorValue); },
    }
}
export interface MailboxSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Folder ID of an archive folder for the user.
     */
    archiveFolder?: string;
    /**
     * Configuration settings to automatically notify the sender of an incoming email with a message from the signed-in user.
     */
    automaticRepliesSetting?: AutomaticRepliesSetting;
    /**
     * The date format for the user's mailbox.
     */
    dateFormat?: string;
    /**
     * If the user has a calendar delegate, this specifies whether the delegate, mailbox owner, or both receive meeting messages and meeting responses. Possible values are: sendToDelegateAndInformationToPrincipal, sendToDelegateAndPrincipal, sendToDelegateOnly.
     */
    delegateMeetingMessageDeliveryOptions?: DelegateMeetingMessageDeliveryOptions;
    /**
     * The locale information for the user, including the preferred language and country/region.
     */
    language?: LocaleInfo;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The time format for the user's mailbox.
     */
    timeFormat?: string;
    /**
     * The default time zone for the user's mailbox.
     */
    timeZone?: string;
    /**
     * The purpose of the mailbox. Differentiates a mailbox for a single user from a shared mailbox and equipment mailbox in Exchange Online. Possible values are: user, linked, shared, room, equipment, others, unknownFutureValue. Read-only.
     */
    userPurpose?: UserPurpose;
    /**
     * The days of the week and hours in a specific time zone that the user works.
     */
    workingHours?: WorkingHours;
}
export function serializeMailboxSettings(writer: SerializationWriter, mailboxSettings: MailboxSettings | undefined = {} as MailboxSettings) : void {
        writer.writeStringValue("archiveFolder", mailboxSettings.archiveFolder);
        writer.writeObjectValue<AutomaticRepliesSetting>("automaticRepliesSetting", mailboxSettings.automaticRepliesSetting, );
        writer.writeStringValue("dateFormat", mailboxSettings.dateFormat);
        writer.writeEnumValue<DelegateMeetingMessageDeliveryOptions>("delegateMeetingMessageDeliveryOptions", mailboxSettings.delegateMeetingMessageDeliveryOptions);
        writer.writeObjectValue<LocaleInfo>("language", mailboxSettings.language, );
        writer.writeStringValue("@odata.type", mailboxSettings.odataType);
        writer.writeStringValue("timeFormat", mailboxSettings.timeFormat);
        writer.writeStringValue("timeZone", mailboxSettings.timeZone);
        writer.writeEnumValue<UserPurpose>("userPurpose", mailboxSettings.userPurpose);
        writer.writeObjectValue<WorkingHours>("workingHours", mailboxSettings.workingHours, );
        writer.writeAdditionalData(mailboxSettings.additionalData);
}
// tslint:enable
// eslint-enable
