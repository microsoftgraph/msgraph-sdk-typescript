// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookRangeFontFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookRangeFont;
}
export function deserializeIntoWorkbookRangeFont(workbookRangeFont: WorkbookRangeFont | undefined = {} as WorkbookRangeFont) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookRangeFont),
        "bold": n => { workbookRangeFont.bold = n.getBooleanValue(); },
        "color": n => { workbookRangeFont.color = n.getStringValue(); },
        "italic": n => { workbookRangeFont.italic = n.getBooleanValue(); },
        "name": n => { workbookRangeFont.name = n.getStringValue(); },
        "size": n => { workbookRangeFont.size = n.getNumberValue(); },
        "underline": n => { workbookRangeFont.underline = n.getStringValue(); },
    }
}
export function serializeWorkbookRangeFont(writer: SerializationWriter, workbookRangeFont: WorkbookRangeFont | undefined = {} as WorkbookRangeFont) : void {
        serializeEntity(writer, workbookRangeFont)
        writer.writeBooleanValue("bold", workbookRangeFont.bold);
        writer.writeStringValue("color", workbookRangeFont.color);
        writer.writeBooleanValue("italic", workbookRangeFont.italic);
        writer.writeStringValue("name", workbookRangeFont.name);
        writer.writeNumberValue("size", workbookRangeFont.size);
        writer.writeStringValue("underline", workbookRangeFont.underline);
}
export interface WorkbookRangeFont extends Entity, Parsable {
    /**
     * Represents the bold status of font.
     */
    bold?: boolean;
    /**
     * HTML color code representation of the text color. for example #FF0000 represents Red.
     */
    color?: string;
    /**
     * Represents the italic status of the font.
     */
    italic?: boolean;
    /**
     * Font name (for example 'Calibri')
     */
    name?: string;
    /**
     * Font size.
     */
    size?: number;
    /**
     * Type of underline applied to the font. The possible values are: None, Single, Double, SingleAccountant, DoubleAccountant.
     */
    underline?: string;
}
// tslint:enable
// eslint-enable
