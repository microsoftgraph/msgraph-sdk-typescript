// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoB2xIdentityUserFlow } from './b2xIdentityUserFlow';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type B2xIdentityUserFlow } from './index';
import { UserFlowType } from './userFlowType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIdentityUserFlowFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.b2xIdentityUserFlow":
                    return deserializeIntoB2xIdentityUserFlow;
            }
        }
    }
    return deserializeIntoIdentityUserFlow;
}
export function deserializeIntoIdentityUserFlow(identityUserFlow: IdentityUserFlow | undefined = {} as IdentityUserFlow) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(identityUserFlow),
        "userFlowType": n => { identityUserFlow.userFlowType = n.getEnumValue<UserFlowType>(UserFlowType); },
        "userFlowTypeVersion": n => { identityUserFlow.userFlowTypeVersion = n.getNumberValue(); },
    }
}
export interface IdentityUserFlow extends Entity, Parsable {
    /**
     * The userFlowType property
     */
    userFlowType?: UserFlowType;
    /**
     * The userFlowTypeVersion property
     */
    userFlowTypeVersion?: number;
}
export function serializeIdentityUserFlow(writer: SerializationWriter, identityUserFlow: IdentityUserFlow | undefined = {} as IdentityUserFlow) : void {
    serializeEntity(writer, identityUserFlow)
    writer.writeEnumValue<UserFlowType>("userFlowType", identityUserFlow.userFlowType);
    writer.writeNumberValue("userFlowTypeVersion", identityUserFlow.userFlowTypeVersion);
}
// tslint:enable
// eslint-enable
