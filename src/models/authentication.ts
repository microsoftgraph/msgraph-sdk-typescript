// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAuthenticationMethodFromDiscriminatorValue, serializeAuthenticationMethod, type AuthenticationMethod } from './authenticationMethod';
import { createEmailAuthenticationMethodFromDiscriminatorValue, serializeEmailAuthenticationMethod, type EmailAuthenticationMethod } from './emailAuthenticationMethod';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createFido2AuthenticationMethodFromDiscriminatorValue, serializeFido2AuthenticationMethod, type Fido2AuthenticationMethod } from './fido2AuthenticationMethod';
import { createLongRunningOperationFromDiscriminatorValue, serializeLongRunningOperation, type LongRunningOperation } from './longRunningOperation';
import { createMicrosoftAuthenticatorAuthenticationMethodFromDiscriminatorValue, serializeMicrosoftAuthenticatorAuthenticationMethod, type MicrosoftAuthenticatorAuthenticationMethod } from './microsoftAuthenticatorAuthenticationMethod';
import { createPasswordAuthenticationMethodFromDiscriminatorValue, serializePasswordAuthenticationMethod, type PasswordAuthenticationMethod } from './passwordAuthenticationMethod';
import { createPhoneAuthenticationMethodFromDiscriminatorValue, serializePhoneAuthenticationMethod, type PhoneAuthenticationMethod } from './phoneAuthenticationMethod';
import { createSoftwareOathAuthenticationMethodFromDiscriminatorValue, serializeSoftwareOathAuthenticationMethod, type SoftwareOathAuthenticationMethod } from './softwareOathAuthenticationMethod';
import { createTemporaryAccessPassAuthenticationMethodFromDiscriminatorValue, serializeTemporaryAccessPassAuthenticationMethod, type TemporaryAccessPassAuthenticationMethod } from './temporaryAccessPassAuthenticationMethod';
import { createWindowsHelloForBusinessAuthenticationMethodFromDiscriminatorValue, serializeWindowsHelloForBusinessAuthenticationMethod, type WindowsHelloForBusinessAuthenticationMethod } from './windowsHelloForBusinessAuthenticationMethod';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Authentication extends Entity, Parsable {
    /**
     * The email address registered to a user for authentication.
     */
    emailMethods?: EmailAuthenticationMethod[];
    /**
     * Represents the FIDO2 security keys registered to a user for authentication.
     */
    fido2Methods?: Fido2AuthenticationMethod[];
    /**
     * Represents all authentication methods registered to a user.
     */
    methods?: AuthenticationMethod[];
    /**
     * The details of the Microsoft Authenticator app registered to a user for authentication.
     */
    microsoftAuthenticatorMethods?: MicrosoftAuthenticatorAuthenticationMethod[];
    /**
     * Represents the status of a long-running operation.
     */
    operations?: LongRunningOperation[];
    /**
     * Represents the password that's registered to a user for authentication. For security, the password itself will never be returned in the object, but action can be taken to reset a password.
     */
    passwordMethods?: PasswordAuthenticationMethod[];
    /**
     * The phone numbers registered to a user for authentication.
     */
    phoneMethods?: PhoneAuthenticationMethod[];
    /**
     * The software OATH TOTP applications registered to a user for authentication.
     */
    softwareOathMethods?: SoftwareOathAuthenticationMethod[];
    /**
     * Represents a Temporary Access Pass registered to a user for authentication through time-limited passcodes.
     */
    temporaryAccessPassMethods?: TemporaryAccessPassAuthenticationMethod[];
    /**
     * Represents the Windows Hello for Business authentication method registered to a user for authentication.
     */
    windowsHelloForBusinessMethods?: WindowsHelloForBusinessAuthenticationMethod[];
}
export function createAuthenticationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuthentication;
}
export function deserializeIntoAuthentication(authentication: Authentication | undefined = {} as Authentication) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(authentication),
        "emailMethods": n => { authentication.emailMethods = n.getCollectionOfObjectValues<EmailAuthenticationMethod>(createEmailAuthenticationMethodFromDiscriminatorValue); },
        "fido2Methods": n => { authentication.fido2Methods = n.getCollectionOfObjectValues<Fido2AuthenticationMethod>(createFido2AuthenticationMethodFromDiscriminatorValue); },
        "methods": n => { authentication.methods = n.getCollectionOfObjectValues<AuthenticationMethod>(createAuthenticationMethodFromDiscriminatorValue); },
        "microsoftAuthenticatorMethods": n => { authentication.microsoftAuthenticatorMethods = n.getCollectionOfObjectValues<MicrosoftAuthenticatorAuthenticationMethod>(createMicrosoftAuthenticatorAuthenticationMethodFromDiscriminatorValue); },
        "operations": n => { authentication.operations = n.getCollectionOfObjectValues<LongRunningOperation>(createLongRunningOperationFromDiscriminatorValue); },
        "passwordMethods": n => { authentication.passwordMethods = n.getCollectionOfObjectValues<PasswordAuthenticationMethod>(createPasswordAuthenticationMethodFromDiscriminatorValue); },
        "phoneMethods": n => { authentication.phoneMethods = n.getCollectionOfObjectValues<PhoneAuthenticationMethod>(createPhoneAuthenticationMethodFromDiscriminatorValue); },
        "softwareOathMethods": n => { authentication.softwareOathMethods = n.getCollectionOfObjectValues<SoftwareOathAuthenticationMethod>(createSoftwareOathAuthenticationMethodFromDiscriminatorValue); },
        "temporaryAccessPassMethods": n => { authentication.temporaryAccessPassMethods = n.getCollectionOfObjectValues<TemporaryAccessPassAuthenticationMethod>(createTemporaryAccessPassAuthenticationMethodFromDiscriminatorValue); },
        "windowsHelloForBusinessMethods": n => { authentication.windowsHelloForBusinessMethods = n.getCollectionOfObjectValues<WindowsHelloForBusinessAuthenticationMethod>(createWindowsHelloForBusinessAuthenticationMethodFromDiscriminatorValue); },
    }
}
export function serializeAuthentication(writer: SerializationWriter, authentication: Authentication | undefined = {} as Authentication) : void {
    serializeEntity(writer, authentication)
    writer.writeCollectionOfObjectValues<EmailAuthenticationMethod>("emailMethods", authentication.emailMethods, serializeEmailAuthenticationMethod);
    writer.writeCollectionOfObjectValues<Fido2AuthenticationMethod>("fido2Methods", authentication.fido2Methods, serializeFido2AuthenticationMethod);
    writer.writeCollectionOfObjectValues<AuthenticationMethod>("methods", authentication.methods, serializeAuthenticationMethod);
    writer.writeCollectionOfObjectValues<MicrosoftAuthenticatorAuthenticationMethod>("microsoftAuthenticatorMethods", authentication.microsoftAuthenticatorMethods, serializeMicrosoftAuthenticatorAuthenticationMethod);
    writer.writeCollectionOfObjectValues<LongRunningOperation>("operations", authentication.operations, serializeLongRunningOperation);
    writer.writeCollectionOfObjectValues<PasswordAuthenticationMethod>("passwordMethods", authentication.passwordMethods, serializePasswordAuthenticationMethod);
    writer.writeCollectionOfObjectValues<PhoneAuthenticationMethod>("phoneMethods", authentication.phoneMethods, serializePhoneAuthenticationMethod);
    writer.writeCollectionOfObjectValues<SoftwareOathAuthenticationMethod>("softwareOathMethods", authentication.softwareOathMethods, serializeSoftwareOathAuthenticationMethod);
    writer.writeCollectionOfObjectValues<TemporaryAccessPassAuthenticationMethod>("temporaryAccessPassMethods", authentication.temporaryAccessPassMethods, serializeTemporaryAccessPassAuthenticationMethod);
    writer.writeCollectionOfObjectValues<WindowsHelloForBusinessAuthenticationMethod>("windowsHelloForBusinessMethods", authentication.windowsHelloForBusinessMethods, serializeWindowsHelloForBusinessAuthenticationMethod);
}
// tslint:enable
// eslint-enable
