// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createRecurrencePatternFromDiscriminatorValue, serializeRecurrencePattern, type RecurrencePattern } from './recurrencePattern';
import { createRecurrenceRangeFromDiscriminatorValue, serializeRecurrenceRange, type RecurrenceRange } from './recurrenceRange';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPatternedRecurrenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPatternedRecurrence;
}
export function deserializeIntoPatternedRecurrence(patternedRecurrence: PatternedRecurrence | undefined = {} as PatternedRecurrence) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { patternedRecurrence.odataType = n.getStringValue(); },
        "pattern": n => { patternedRecurrence.pattern = n.getObjectValue<RecurrencePattern>(createRecurrencePatternFromDiscriminatorValue); },
        "range": n => { patternedRecurrence.range = n.getObjectValue<RecurrenceRange>(createRecurrenceRangeFromDiscriminatorValue); },
    }
}
export interface PatternedRecurrence extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The frequency of an event.  For access reviews: Do not specify this property for a one-time access review.  Only interval, dayOfMonth, and type (weekly, absoluteMonthly) properties of recurrencePattern are supported.
     */
    pattern?: RecurrencePattern;
    /**
     * The duration of an event.
     */
    range?: RecurrenceRange;
}
export function serializePatternedRecurrence(writer: SerializationWriter, patternedRecurrence: PatternedRecurrence | undefined = {} as PatternedRecurrence) : void {
    writer.writeStringValue("@odata.type", patternedRecurrence.odataType);
    writer.writeObjectValue<RecurrencePattern>("pattern", patternedRecurrence.pattern, serializeRecurrencePattern);
    writer.writeObjectValue<RecurrenceRange>("range", patternedRecurrence.range, serializeRecurrenceRange);
    writer.writeAdditionalData(patternedRecurrence.additionalData);
}
// tslint:enable
// eslint-enable
