import {AppRoleAssignment} from './appRoleAssignment';
import {AssignedLabel} from './assignedLabel';
import {AssignedLicense} from './assignedLicense';
import {Calendar} from './calendar';
import {Conversation} from './conversation';
import {ConversationThread} from './conversationThread';
import {DirectoryObject} from './directoryObject';
import {Drive} from './drive';
import {Event} from './event';
import {Extension} from './extension';
import {Group} from './group';
import {GroupLifecyclePolicy} from './groupLifecyclePolicy';
import {GroupSetting} from './groupSetting';
import {LicenseProcessingState} from './licenseProcessingState';
import {Onenote} from './onenote';
import {OnPremisesProvisioningError} from './onPremisesProvisioningError';
import {PlannerGroup} from './plannerGroup';
import {ProfilePhoto} from './profilePhoto';
import {ResourceSpecificPermissionGrant} from './resourceSpecificPermissionGrant';
import {serializeAppRoleAssignment} from './serializeAppRoleAssignment';
import {serializeAssignedLabel} from './serializeAssignedLabel';
import {serializeAssignedLicense} from './serializeAssignedLicense';
import {serializeCalendar} from './serializeCalendar';
import {serializeConversation} from './serializeConversation';
import {serializeConversationThread} from './serializeConversationThread';
import {serializeDirectoryObject} from './serializeDirectoryObject';
import {serializeDrive} from './serializeDrive';
import {serializeEvent} from './serializeEvent';
import {serializeExtension} from './serializeExtension';
import {serializeGroupLifecyclePolicy} from './serializeGroupLifecyclePolicy';
import {serializeGroupSetting} from './serializeGroupSetting';
import {serializeLicenseProcessingState} from './serializeLicenseProcessingState';
import {serializeOnenote} from './serializeOnenote';
import {serializeOnPremisesProvisioningError} from './serializeOnPremisesProvisioningError';
import {serializePlannerGroup} from './serializePlannerGroup';
import {serializeProfilePhoto} from './serializeProfilePhoto';
import {serializeResourceSpecificPermissionGrant} from './serializeResourceSpecificPermissionGrant';
import {serializeSite} from './serializeSite';
import {serializeTeam} from './serializeTeam';
import {Site} from './site';
import {Team} from './team';
import {Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export function serializeGroup(writer: SerializationWriter, group: Group | undefined = {} as Group) : void {
        serializeDirectoryObject(writer, group)
        writer.writeCollectionOfObjectValues<DirectoryObject>("acceptedSenders", group.acceptedSenders, serializeDirectoryObject);
        writer.writeBooleanValue("allowExternalSenders", group.allowExternalSenders);
        writer.writeCollectionOfObjectValues<AppRoleAssignment>("appRoleAssignments", group.appRoleAssignments, serializeAppRoleAssignment);
        writer.writeCollectionOfObjectValues<AssignedLabel>("assignedLabels", group.assignedLabels, serializeAssignedLabel);
        writer.writeCollectionOfObjectValues<AssignedLicense>("assignedLicenses", group.assignedLicenses, serializeAssignedLicense);
        writer.writeBooleanValue("autoSubscribeNewMembers", group.autoSubscribeNewMembers);
        writer.writeObjectValue<Calendar>("calendar", group.calendar, serializeCalendar);
        writer.writeCollectionOfObjectValues<Event>("calendarView", group.calendarView, serializeEvent);
        writer.writeStringValue("classification", group.classification);
        writer.writeCollectionOfObjectValues<Conversation>("conversations", group.conversations, serializeConversation);
        writer.writeDateValue("createdDateTime", group.createdDateTime);
        writer.writeObjectValue<DirectoryObject>("createdOnBehalfOf", group.createdOnBehalfOf, serializeDirectoryObject);
        writer.writeStringValue("description", group.description);
        writer.writeStringValue("displayName", group.displayName);
        writer.writeObjectValue<Drive>("drive", group.drive, serializeDrive);
        writer.writeCollectionOfObjectValues<Drive>("drives", group.drives, serializeDrive);
        writer.writeCollectionOfObjectValues<Event>("events", group.events, serializeEvent);
        writer.writeDateValue("expirationDateTime", group.expirationDateTime);
        writer.writeCollectionOfObjectValues<Extension>("extensions", group.extensions, serializeExtension);
        writer.writeCollectionOfObjectValues<GroupLifecyclePolicy>("groupLifecyclePolicies", group.groupLifecyclePolicies, serializeGroupLifecyclePolicy);
        writer.writeCollectionOfPrimitiveValues<string>("groupTypes", group.groupTypes);
        writer.writeBooleanValue("hasMembersWithLicenseErrors", group.hasMembersWithLicenseErrors);
        writer.writeBooleanValue("hideFromAddressLists", group.hideFromAddressLists);
        writer.writeBooleanValue("hideFromOutlookClients", group.hideFromOutlookClients);
        writer.writeBooleanValue("isArchived", group.isArchived);
        writer.writeBooleanValue("isAssignableToRole", group.isAssignableToRole);
        writer.writeBooleanValue("isSubscribedByMail", group.isSubscribedByMail);
        writer.writeObjectValue<LicenseProcessingState>("licenseProcessingState", group.licenseProcessingState, serializeLicenseProcessingState);
        writer.writeStringValue("mail", group.mail);
        writer.writeBooleanValue("mailEnabled", group.mailEnabled);
        writer.writeStringValue("mailNickname", group.mailNickname);
        writer.writeCollectionOfObjectValues<DirectoryObject>("memberOf", group.memberOf, serializeDirectoryObject);
        writer.writeCollectionOfObjectValues<DirectoryObject>("members", group.members, serializeDirectoryObject);
        writer.writeStringValue("membershipRule", group.membershipRule);
        writer.writeStringValue("membershipRuleProcessingState", group.membershipRuleProcessingState);
        writer.writeCollectionOfObjectValues<DirectoryObject>("membersWithLicenseErrors", group.membersWithLicenseErrors, serializeDirectoryObject);
        writer.writeObjectValue<Onenote>("onenote", group.onenote, serializeOnenote);
        writer.writeStringValue("onPremisesDomainName", group.onPremisesDomainName);
        writer.writeDateValue("onPremisesLastSyncDateTime", group.onPremisesLastSyncDateTime);
        writer.writeStringValue("onPremisesNetBiosName", group.onPremisesNetBiosName);
        writer.writeCollectionOfObjectValues<OnPremisesProvisioningError>("onPremisesProvisioningErrors", group.onPremisesProvisioningErrors, serializeOnPremisesProvisioningError);
        writer.writeStringValue("onPremisesSamAccountName", group.onPremisesSamAccountName);
        writer.writeStringValue("onPremisesSecurityIdentifier", group.onPremisesSecurityIdentifier);
        writer.writeBooleanValue("onPremisesSyncEnabled", group.onPremisesSyncEnabled);
        writer.writeCollectionOfObjectValues<DirectoryObject>("owners", group.owners, serializeDirectoryObject);
        writer.writeCollectionOfObjectValues<ResourceSpecificPermissionGrant>("permissionGrants", group.permissionGrants, serializeResourceSpecificPermissionGrant);
        writer.writeObjectValue<ProfilePhoto>("photo", group.photo, serializeProfilePhoto);
        writer.writeCollectionOfObjectValues<ProfilePhoto>("photos", group.photos, serializeProfilePhoto);
        writer.writeObjectValue<PlannerGroup>("planner", group.planner, serializePlannerGroup);
        writer.writeStringValue("preferredDataLocation", group.preferredDataLocation);
        writer.writeStringValue("preferredLanguage", group.preferredLanguage);
        writer.writeCollectionOfPrimitiveValues<string>("proxyAddresses", group.proxyAddresses);
        writer.writeCollectionOfObjectValues<DirectoryObject>("rejectedSenders", group.rejectedSenders, serializeDirectoryObject);
        writer.writeDateValue("renewedDateTime", group.renewedDateTime);
        writer.writeBooleanValue("securityEnabled", group.securityEnabled);
        writer.writeStringValue("securityIdentifier", group.securityIdentifier);
        writer.writeCollectionOfObjectValues<GroupSetting>("settings", group.settings, serializeGroupSetting);
        writer.writeCollectionOfObjectValues<Site>("sites", group.sites, serializeSite);
        writer.writeObjectValue<Team>("team", group.team, serializeTeam);
        writer.writeStringValue("theme", group.theme);
        writer.writeCollectionOfObjectValues<ConversationThread>("threads", group.threads, serializeConversationThread);
        writer.writeCollectionOfObjectValues<DirectoryObject>("transitiveMemberOf", group.transitiveMemberOf, serializeDirectoryObject);
        writer.writeCollectionOfObjectValues<DirectoryObject>("transitiveMembers", group.transitiveMembers, serializeDirectoryObject);
        writer.writeNumberValue("unseenCount", group.unseenCount);
        writer.writeStringValue("visibility", group.visibility);
}
