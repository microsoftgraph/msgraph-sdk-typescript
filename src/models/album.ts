import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Album extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Unique identifier of the [driveItem][] that is the cover of the album.
     */
    coverImageItemId?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createAlbumFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAlbum;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoAlbum(album: Album | undefined = {} as Album) : Record<string, (node: ParseNode) => void> {
    return {
        "coverImageItemId": n => { album.coverImageItemId = n.getStringValue(); },
        "@odata.type": n => { album.odataType = n.getStringValue(); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeAlbum(writer: SerializationWriter, album: Album | undefined = {} as Album) : void {
        writer.writeStringValue("coverImageItemId", album.coverImageItemId);
        writer.writeStringValue("@odata.type", album.odataType);
        writer.writeAdditionalData(album.additionalData);
}
