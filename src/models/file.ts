// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createHashesFromDiscriminatorValue, serializeHashes, type Hashes } from './hashes';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFileFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFile;
}
export function deserializeIntoFile(file: File | undefined = {} as File) : Record<string, (node: ParseNode) => void> {
    return {
        "hashes": n => { file.hashes = n.getObjectValue<Hashes>(createHashesFromDiscriminatorValue); },
        "mimeType": n => { file.mimeType = n.getStringValue(); },
        "@odata.type": n => { file.odataType = n.getStringValue(); },
        "processingMetadata": n => { file.processingMetadata = n.getBooleanValue(); },
    }
}
export interface File extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Hashes of the file's binary content, if available. Read-only.
     */
    hashes?: Hashes;
    /**
     * The MIME type for the file. This is determined by logic on the server and might not be the value provided when the file was uploaded. Read-only.
     */
    mimeType?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The processingMetadata property
     */
    processingMetadata?: boolean;
}
export function serializeFile(writer: SerializationWriter, file: File | undefined = {} as File) : void {
        writer.writeObjectValue<Hashes>("hashes", file.hashes, );
        writer.writeStringValue("mimeType", file.mimeType);
        writer.writeStringValue("@odata.type", file.odataType);
        writer.writeBooleanValue("processingMetadata", file.processingMetadata);
        writer.writeAdditionalData(file.additionalData);
}
// tslint:enable
// eslint-enable
