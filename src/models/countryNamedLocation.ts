// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { CountryLookupMethodType } from './countryLookupMethodType';
import { deserializeIntoNamedLocation, serializeNamedLocation, type NamedLocation } from './namedLocation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CountryNamedLocation extends NamedLocation, Parsable {
    /**
     * List of countries and/or regions in two-letter format specified by ISO 3166-2. Required.
     */
    countriesAndRegions?: string[];
    /**
     * Determines what method is used to decide which country the user is located in. Possible values are clientIpAddress(default) and authenticatorAppGps. Note: authenticatorAppGps is not yet supported in the Microsoft Cloud for US Government.
     */
    countryLookupMethod?: CountryLookupMethodType;
    /**
     * true if IP addresses that don't map to a country or region should be included in the named location. Optional. Default value is false.
     */
    includeUnknownCountriesAndRegions?: boolean;
}
export function createCountryNamedLocationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCountryNamedLocation;
}
export function deserializeIntoCountryNamedLocation(countryNamedLocation: CountryNamedLocation | undefined = {} as CountryNamedLocation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoNamedLocation(countryNamedLocation),
        "countriesAndRegions": n => { countryNamedLocation.countriesAndRegions = n.getCollectionOfPrimitiveValues<string>(); },
        "countryLookupMethod": n => { countryNamedLocation.countryLookupMethod = n.getEnumValue<CountryLookupMethodType>(CountryLookupMethodType); },
        "includeUnknownCountriesAndRegions": n => { countryNamedLocation.includeUnknownCountriesAndRegions = n.getBooleanValue(); },
    }
}
export function serializeCountryNamedLocation(writer: SerializationWriter, countryNamedLocation: CountryNamedLocation | undefined = {} as CountryNamedLocation) : void {
    serializeNamedLocation(writer, countryNamedLocation)
    writer.writeCollectionOfPrimitiveValues<string>("countriesAndRegions", countryNamedLocation.countriesAndRegions);
    writer.writeEnumValue<CountryLookupMethodType>("countryLookupMethod", countryNamedLocation.countryLookupMethod);
    writer.writeBooleanValue("includeUnknownCountriesAndRegions", countryNamedLocation.includeUnknownCountriesAndRegions);
}
// tslint:enable
// eslint-enable
