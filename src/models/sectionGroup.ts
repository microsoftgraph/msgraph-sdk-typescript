// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createNotebookFromDiscriminatorValue, serializeNotebook, type Notebook } from './notebook';
import { deserializeIntoOnenoteEntityHierarchyModel, serializeOnenoteEntityHierarchyModel, type OnenoteEntityHierarchyModel } from './onenoteEntityHierarchyModel';
import { createOnenoteSectionFromDiscriminatorValue, serializeOnenoteSection, type OnenoteSection } from './onenoteSection';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSectionGroupFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSectionGroup;
}
export function deserializeIntoSectionGroup(sectionGroup: SectionGroup | undefined = {} as SectionGroup) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOnenoteEntityHierarchyModel(sectionGroup),
        "parentNotebook": n => { sectionGroup.parentNotebook = n.getObjectValue<Notebook>(createNotebookFromDiscriminatorValue); },
        "parentSectionGroup": n => { sectionGroup.parentSectionGroup = n.getObjectValue<SectionGroup>(createSectionGroupFromDiscriminatorValue); },
        "sectionGroups": n => { sectionGroup.sectionGroups = n.getCollectionOfObjectValues<SectionGroup>(createSectionGroupFromDiscriminatorValue); },
        "sectionGroupsUrl": n => { sectionGroup.sectionGroupsUrl = n.getStringValue(); },
        "sections": n => { sectionGroup.sections = n.getCollectionOfObjectValues<OnenoteSection>(createOnenoteSectionFromDiscriminatorValue); },
        "sectionsUrl": n => { sectionGroup.sectionsUrl = n.getStringValue(); },
    }
}
export interface SectionGroup extends OnenoteEntityHierarchyModel, Parsable {
    /**
     * The notebook that contains the section group. Read-only.
     */
    parentNotebook?: Notebook;
    /**
     * The section group that contains the section group. Read-only.
     */
    parentSectionGroup?: SectionGroup;
    /**
     * The section groups in the section. Read-only. Nullable.
     */
    sectionGroups?: SectionGroup[];
    /**
     * The URL for the sectionGroups navigation property, which returns all the section groups in the section group. Read-only.
     */
    sectionGroupsUrl?: string;
    /**
     * The sections in the section group. Read-only. Nullable.
     */
    sections?: OnenoteSection[];
    /**
     * The URL for the sections navigation property, which returns all the sections in the section group. Read-only.
     */
    sectionsUrl?: string;
}
export function serializeSectionGroup(writer: SerializationWriter, sectionGroup: SectionGroup | undefined = {} as SectionGroup) : void {
    serializeOnenoteEntityHierarchyModel(writer, sectionGroup)
    writer.writeObjectValue<Notebook>("parentNotebook", sectionGroup.parentNotebook, serializeNotebook);
    writer.writeObjectValue<SectionGroup>("parentSectionGroup", sectionGroup.parentSectionGroup, serializeSectionGroup);
    writer.writeCollectionOfObjectValues<SectionGroup>("sectionGroups", sectionGroup.sectionGroups, serializeSectionGroup);
    writer.writeStringValue("sectionGroupsUrl", sectionGroup.sectionGroupsUrl);
    writer.writeCollectionOfObjectValues<OnenoteSection>("sections", sectionGroup.sections, serializeOnenoteSection);
    writer.writeStringValue("sectionsUrl", sectionGroup.sectionsUrl);
}
// tslint:enable
// eslint-enable
