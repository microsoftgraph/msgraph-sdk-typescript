// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAccessReviewInactiveUsersQueryScope } from './accessReviewInactiveUsersQueryScope';
import { deserializeIntoAccessReviewScope, serializeAccessReviewScope, type AccessReviewScope } from './accessReviewScope';
import { type AccessReviewInactiveUsersQueryScope } from './index';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessReviewQueryScope extends AccessReviewScope, Parsable {
    /**
     * The query representing what will be reviewed in an access review.
     */
    query?: string;
    /**
     * In the scenario where reviewers need to be specified dynamically, this property is used to indicate the relative source of the query. This property is only required if a relative query is specified. For example, ./manager.
     */
    queryRoot?: string;
    /**
     * Indicates the type of query. Types include MicrosoftGraph and ARM.
     */
    queryType?: string;
}
export function createAccessReviewQueryScopeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.accessReviewInactiveUsersQueryScope":
                    return deserializeIntoAccessReviewInactiveUsersQueryScope;
            }
        }
    }
    return deserializeIntoAccessReviewQueryScope;
}
export function deserializeIntoAccessReviewQueryScope(accessReviewQueryScope: AccessReviewQueryScope | undefined = {} as AccessReviewQueryScope) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAccessReviewScope(accessReviewQueryScope),
        "query": n => { accessReviewQueryScope.query = n.getStringValue(); },
        "queryRoot": n => { accessReviewQueryScope.queryRoot = n.getStringValue(); },
        "queryType": n => { accessReviewQueryScope.queryType = n.getStringValue(); },
    }
}
export function serializeAccessReviewQueryScope(writer: SerializationWriter, accessReviewQueryScope: AccessReviewQueryScope | undefined = {} as AccessReviewQueryScope) : void {
        serializeAccessReviewScope(writer, accessReviewQueryScope)
        writer.writeStringValue("query", accessReviewQueryScope.query);
        writer.writeStringValue("queryRoot", accessReviewQueryScope.queryRoot);
        writer.writeStringValue("queryType", accessReviewQueryScope.queryType);
}
// tslint:enable
// eslint-enable
