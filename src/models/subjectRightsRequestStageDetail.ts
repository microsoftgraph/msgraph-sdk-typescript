// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPublicErrorFromDiscriminatorValue, serializePublicError, type PublicError } from './publicError';
import { SubjectRightsRequestStage } from './subjectRightsRequestStage';
import { SubjectRightsRequestStageStatus } from './subjectRightsRequestStageStatus';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSubjectRightsRequestStageDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSubjectRightsRequestStageDetail;
}
export function deserializeIntoSubjectRightsRequestStageDetail(subjectRightsRequestStageDetail: SubjectRightsRequestStageDetail | undefined = {} as SubjectRightsRequestStageDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "error": n => { subjectRightsRequestStageDetail.errorEscaped = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
        "@odata.type": n => { subjectRightsRequestStageDetail.odataType = n.getStringValue(); },
        "stage": n => { subjectRightsRequestStageDetail.stage = n.getEnumValue<SubjectRightsRequestStage>(SubjectRightsRequestStage); },
        "status": n => { subjectRightsRequestStageDetail.status = n.getEnumValue<SubjectRightsRequestStageStatus>(SubjectRightsRequestStageStatus); },
    }
}
export function serializeSubjectRightsRequestStageDetail(writer: SerializationWriter, subjectRightsRequestStageDetail: SubjectRightsRequestStageDetail | undefined = {} as SubjectRightsRequestStageDetail) : void {
        writer.writeObjectValue<PublicError>("error", subjectRightsRequestStageDetail.errorEscaped, serializePublicError);
        writer.writeStringValue("@odata.type", subjectRightsRequestStageDetail.odataType);
        writer.writeEnumValue<SubjectRightsRequestStage>("stage", subjectRightsRequestStageDetail.stage);
        writer.writeEnumValue<SubjectRightsRequestStageStatus>("status", subjectRightsRequestStageDetail.status);
        writer.writeAdditionalData(subjectRightsRequestStageDetail.additionalData);
}
export interface SubjectRightsRequestStageDetail extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Describes the error, if any, for the current stage.
     */
    errorEscaped?: PublicError;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The stage of the subject rights request. Possible values are: contentRetrieval, contentReview, generateReport, contentDeletion, caseResolved, unknownFutureValue, approval. You must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: approval.
     */
    stage?: SubjectRightsRequestStage;
    /**
     * Status of the current stage. Possible values are: notStarted, current, completed, failed, unknownFutureValue.
     */
    status?: SubjectRightsRequestStageStatus;
}
// tslint:enable
// eslint-enable
