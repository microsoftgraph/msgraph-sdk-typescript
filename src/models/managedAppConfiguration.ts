// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type TargetedManagedAppConfiguration } from './index';
import { createKeyValuePairFromDiscriminatorValue, serializeKeyValuePair, type KeyValuePair } from './keyValuePair';
import { deserializeIntoManagedAppPolicy, serializeManagedAppPolicy, type ManagedAppPolicy } from './managedAppPolicy';
import { deserializeIntoTargetedManagedAppConfiguration } from './targetedManagedAppConfiguration';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createManagedAppConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.targetedManagedAppConfiguration":
                    return deserializeIntoTargetedManagedAppConfiguration;
            }
        }
    }
    return deserializeIntoManagedAppConfiguration;
}
export function deserializeIntoManagedAppConfiguration(managedAppConfiguration: ManagedAppConfiguration | undefined = {} as ManagedAppConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoManagedAppPolicy(managedAppConfiguration),
        "customSettings": n => { managedAppConfiguration.customSettings = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
    }
}
export interface ManagedAppConfiguration extends ManagedAppPolicy, Parsable {
    /**
     * A set of string key and string value pairs to be sent to apps for users to whom the configuration is scoped, unalterned by this service
     */
    customSettings?: KeyValuePair[];
}
export function serializeManagedAppConfiguration(writer: SerializationWriter, managedAppConfiguration: ManagedAppConfiguration | undefined = {} as ManagedAppConfiguration) : void {
    serializeManagedAppPolicy(writer, managedAppConfiguration)
    writer.writeCollectionOfObjectValues<KeyValuePair>("customSettings", managedAppConfiguration.customSettings, serializeKeyValuePair);
}
// tslint:enable
// eslint-enable
