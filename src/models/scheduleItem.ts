// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDateTimeTimeZoneFromDiscriminatorValue, serializeDateTimeTimeZone, type DateTimeTimeZone } from './dateTimeTimeZone';
import { FreeBusyStatus } from './freeBusyStatus';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createScheduleItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoScheduleItem;
}
export function deserializeIntoScheduleItem(scheduleItem: ScheduleItem | undefined = {} as ScheduleItem) : Record<string, (node: ParseNode) => void> {
    return {
        "end": n => { scheduleItem.end = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "isPrivate": n => { scheduleItem.isPrivate = n.getBooleanValue(); },
        "location": n => { scheduleItem.location = n.getStringValue(); },
        "@odata.type": n => { scheduleItem.odataType = n.getStringValue(); },
        "start": n => { scheduleItem.start = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "status": n => { scheduleItem.status = n.getEnumValue<FreeBusyStatus>(FreeBusyStatus); },
        "subject": n => { scheduleItem.subject = n.getStringValue(); },
    }
}
export interface ScheduleItem extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The date, time, and time zone that the corresponding event ends.
     */
    end?: DateTimeTimeZone;
    /**
     * The sensitivity of the corresponding event. True if the event is marked private, false otherwise. Optional.
     */
    isPrivate?: boolean;
    /**
     * The location where the corresponding event is held or attended from. Optional.
     */
    location?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The date, time, and time zone that the corresponding event starts.
     */
    start?: DateTimeTimeZone;
    /**
     * The availability status of the user or resource during the corresponding event. The possible values are: free, tentative, busy, oof, workingElsewhere, unknown.
     */
    status?: FreeBusyStatus;
    /**
     * The corresponding event's subject line. Optional.
     */
    subject?: string;
}
export function serializeScheduleItem(writer: SerializationWriter, scheduleItem: ScheduleItem | undefined = {} as ScheduleItem) : void {
    writer.writeObjectValue<DateTimeTimeZone>("end", scheduleItem.end, serializeDateTimeTimeZone);
    writer.writeBooleanValue("isPrivate", scheduleItem.isPrivate);
    writer.writeStringValue("location", scheduleItem.location);
    writer.writeStringValue("@odata.type", scheduleItem.odataType);
    writer.writeObjectValue<DateTimeTimeZone>("start", scheduleItem.start, serializeDateTimeTimeZone);
    writer.writeEnumValue<FreeBusyStatus>("status", scheduleItem.status);
    writer.writeStringValue("subject", scheduleItem.subject);
    writer.writeAdditionalData(scheduleItem.additionalData);
}
// tslint:enable
// eslint-enable
