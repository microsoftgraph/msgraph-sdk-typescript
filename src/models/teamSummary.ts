// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTeamSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTeamSummary;
}
export function deserializeIntoTeamSummary(teamSummary: TeamSummary | undefined = {} as TeamSummary) : Record<string, (node: ParseNode) => void> {
    return {
        "guestsCount": n => { teamSummary.guestsCount = n.getNumberValue(); },
        "membersCount": n => { teamSummary.membersCount = n.getNumberValue(); },
        "@odata.type": n => { teamSummary.odataType = n.getStringValue(); },
        "ownersCount": n => { teamSummary.ownersCount = n.getNumberValue(); },
    }
}
export function serializeTeamSummary(writer: SerializationWriter, teamSummary: TeamSummary | undefined = {} as TeamSummary) : void {
    writer.writeNumberValue("guestsCount", teamSummary.guestsCount);
    writer.writeNumberValue("membersCount", teamSummary.membersCount);
    writer.writeStringValue("@odata.type", teamSummary.odataType);
    writer.writeNumberValue("ownersCount", teamSummary.ownersCount);
    writer.writeAdditionalData(teamSummary.additionalData);
}
export interface TeamSummary extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Count of guests in a team.
     */
    guestsCount?: number;
    /**
     * Count of members in a team.
     */
    membersCount?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Count of owners in a team.
     */
    ownersCount?: number;
}
// tslint:enable
// eslint-enable
