// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { BodyType } from './bodyType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEducationItemBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEducationItemBody;
}
export function deserializeIntoEducationItemBody(educationItemBody: EducationItemBody | undefined = {} as EducationItemBody) : Record<string, (node: ParseNode) => void> {
    return {
        "content": n => { educationItemBody.content = n.getStringValue(); },
        "contentType": n => { educationItemBody.contentType = n.getEnumValue<BodyType>(BodyType); },
        "@odata.type": n => { educationItemBody.odataType = n.getStringValue(); },
    }
}
export interface EducationItemBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The content property
     */
    content?: string;
    /**
     * The contentType property
     */
    contentType?: BodyType;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeEducationItemBody(writer: SerializationWriter, educationItemBody: EducationItemBody | undefined = {} as EducationItemBody) : void {
        writer.writeStringValue("content", educationItemBody.content);
        writer.writeEnumValue<BodyType>("contentType", educationItemBody.contentType);
        writer.writeStringValue("@odata.type", educationItemBody.odataType);
        writer.writeAdditionalData(educationItemBody.additionalData);
}
// tslint:enable
// eslint-enable
