// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { WindowsMalwareExecutionState } from './windowsMalwareExecutionState';
import { WindowsMalwareThreatState } from './windowsMalwareThreatState';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMalwareStateForWindowsDeviceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMalwareStateForWindowsDevice;
}
export function deserializeIntoMalwareStateForWindowsDevice(malwareStateForWindowsDevice: MalwareStateForWindowsDevice | undefined = {} as MalwareStateForWindowsDevice) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(malwareStateForWindowsDevice),
        "detectionCount": n => { malwareStateForWindowsDevice.detectionCount = n.getNumberValue(); },
        "deviceName": n => { malwareStateForWindowsDevice.deviceName = n.getStringValue(); },
        "executionState": n => { malwareStateForWindowsDevice.executionState = n.getEnumValue<WindowsMalwareExecutionState>(WindowsMalwareExecutionState); },
        "initialDetectionDateTime": n => { malwareStateForWindowsDevice.initialDetectionDateTime = n.getDateValue(); },
        "lastStateChangeDateTime": n => { malwareStateForWindowsDevice.lastStateChangeDateTime = n.getDateValue(); },
        "threatState": n => { malwareStateForWindowsDevice.threatState = n.getEnumValue<WindowsMalwareThreatState>(WindowsMalwareThreatState); },
    }
}
export interface MalwareStateForWindowsDevice extends Entity, Parsable {
    /**
     * Indicates the number of times the malware is detected
     */
    detectionCount?: number;
    /**
     * Indicates the name of the device being evaluated for malware state
     */
    deviceName?: string;
    /**
     * Indicates execution status of the malware. Possible values are: unknown, blocked, allowed, running, notRunning. Defaults to unknown. Possible values are: unknown, blocked, allowed, running, notRunning.
     */
    executionState?: WindowsMalwareExecutionState;
    /**
     * Initial detection datetime of the malware
     */
    initialDetectionDateTime?: Date;
    /**
     * The last time this particular threat was changed
     */
    lastStateChangeDateTime?: Date;
    /**
     * Indicates threat status of the malware. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared. defaults to noStatusCleared. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
     */
    threatState?: WindowsMalwareThreatState;
}
export function serializeMalwareStateForWindowsDevice(writer: SerializationWriter, malwareStateForWindowsDevice: MalwareStateForWindowsDevice | undefined = {} as MalwareStateForWindowsDevice) : void {
    serializeEntity(writer, malwareStateForWindowsDevice)
    writer.writeNumberValue("detectionCount", malwareStateForWindowsDevice.detectionCount);
    writer.writeStringValue("deviceName", malwareStateForWindowsDevice.deviceName);
    writer.writeEnumValue<WindowsMalwareExecutionState>("executionState", malwareStateForWindowsDevice.executionState);
    writer.writeDateValue("initialDetectionDateTime", malwareStateForWindowsDevice.initialDetectionDateTime);
    writer.writeDateValue("lastStateChangeDateTime", malwareStateForWindowsDevice.lastStateChangeDateTime);
    writer.writeEnumValue<WindowsMalwareThreatState>("threatState", malwareStateForWindowsDevice.threatState);
}
// tslint:enable
// eslint-enable
