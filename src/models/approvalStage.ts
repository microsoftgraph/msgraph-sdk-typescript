// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentityFromDiscriminatorValue, serializeIdentity, type Identity } from './identity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ApprovalStage extends Entity, Parsable {
    /**
     * Indicates whether the stage is assigned to the calling user to review. Read-only.
     */
    assignedToMe?: boolean;
    /**
     * The label provided by the policy creator to identify an approval stage. Read-only.
     */
    displayName?: string;
    /**
     * The justification associated with the approval stage decision.
     */
    justification?: string;
    /**
     * The identifier of the reviewer. 00000000-0000-0000-0000-000000000000 if the assigned reviewer hasn't reviewed. Read-only.
     */
    reviewedBy?: Identity;
    /**
     * The date and time when a decision was recorded. The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    reviewedDateTime?: Date;
    /**
     * The result of this approval record. Possible values include: NotReviewed, Approved, Denied.
     */
    reviewResult?: string;
    /**
     * The stage status. Possible values: InProgress, Initializing, Completed, Expired. Read-only.
     */
    status?: string;
}
export function createApprovalStageFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoApprovalStage;
}
export function deserializeIntoApprovalStage(approvalStage: ApprovalStage | undefined = {} as ApprovalStage) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(approvalStage),
        "assignedToMe": n => { approvalStage.assignedToMe = n.getBooleanValue(); },
        "displayName": n => { approvalStage.displayName = n.getStringValue(); },
        "justification": n => { approvalStage.justification = n.getStringValue(); },
        "reviewedBy": n => { approvalStage.reviewedBy = n.getObjectValue<Identity>(createIdentityFromDiscriminatorValue); },
        "reviewedDateTime": n => { approvalStage.reviewedDateTime = n.getDateValue(); },
        "reviewResult": n => { approvalStage.reviewResult = n.getStringValue(); },
        "status": n => { approvalStage.status = n.getStringValue(); },
    }
}
export function serializeApprovalStage(writer: SerializationWriter, approvalStage: ApprovalStage | undefined = {} as ApprovalStage) : void {
        serializeEntity(writer, approvalStage)
        writer.writeBooleanValue("assignedToMe", approvalStage.assignedToMe);
        writer.writeStringValue("displayName", approvalStage.displayName);
        writer.writeStringValue("justification", approvalStage.justification);
        writer.writeObjectValue<Identity>("reviewedBy", approvalStage.reviewedBy, serializeIdentity);
        writer.writeDateValue("reviewedDateTime", approvalStage.reviewedDateTime);
        writer.writeStringValue("reviewResult", approvalStage.reviewResult);
        writer.writeStringValue("status", approvalStage.status);
}
// tslint:enable
// eslint-enable
