// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ExpirationPatternType } from './expirationPatternType';
import { type AdditionalDataHolder, type Duration, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createExpirationPatternFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoExpirationPattern;
}
export function deserializeIntoExpirationPattern(expirationPattern: ExpirationPattern | undefined = {} as ExpirationPattern) : Record<string, (node: ParseNode) => void> {
    return {
        "duration": n => { expirationPattern.duration = n.getDurationValue(); },
        "endDateTime": n => { expirationPattern.endDateTime = n.getDateValue(); },
        "@odata.type": n => { expirationPattern.odataType = n.getStringValue(); },
        "type": n => { expirationPattern.type = n.getEnumValue<ExpirationPatternType>(ExpirationPatternType); },
    }
}
export interface ExpirationPattern extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The requestor's desired duration of access represented in ISO 8601 format for durations. For example, PT3H refers to three hours.  If specified in a request, endDateTime should not be present and the type property should be set to afterDuration.
     */
    duration?: Duration;
    /**
     * Timestamp of date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    endDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The requestor's desired expiration pattern type. The possible values are: notSpecified, noExpiration, afterDateTime, afterDuration.
     */
    type?: ExpirationPatternType;
}
export function serializeExpirationPattern(writer: SerializationWriter, expirationPattern: ExpirationPattern | undefined = {} as ExpirationPattern) : void {
    writer.writeDurationValue("duration", expirationPattern.duration);
    writer.writeDateValue("endDateTime", expirationPattern.endDateTime);
    writer.writeStringValue("@odata.type", expirationPattern.odataType);
    writer.writeEnumValue<ExpirationPatternType>("type", expirationPattern.type);
    writer.writeAdditionalData(expirationPattern.additionalData);
}
// tslint:enable
// eslint-enable
