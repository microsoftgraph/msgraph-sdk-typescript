// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoConversationMember, serializeConversationMember, type ConversationMember } from './conversationMember';
import { createUserFromDiscriminatorValue, serializeUser, type User } from './user';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AadUserConversationMember extends ConversationMember, Parsable {
    /**
     * The email address of the user.
     */
    email?: string;
    /**
     * TenantId which the Microsoft Entra user belongs to.
     */
    tenantId?: string;
    /**
     * The user property
     */
    user?: User;
    /**
     * The guid of the user.
     */
    userId?: string;
}
export function createAadUserConversationMemberFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAadUserConversationMember;
}
export function deserializeIntoAadUserConversationMember(aadUserConversationMember: AadUserConversationMember | undefined = {} as AadUserConversationMember) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoConversationMember(aadUserConversationMember),
        "email": n => { aadUserConversationMember.email = n.getStringValue(); },
        "tenantId": n => { aadUserConversationMember.tenantId = n.getStringValue(); },
        "user": n => { aadUserConversationMember.user = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "userId": n => { aadUserConversationMember.userId = n.getStringValue(); },
    }
}
export function serializeAadUserConversationMember(writer: SerializationWriter, aadUserConversationMember: AadUserConversationMember | undefined = {} as AadUserConversationMember) : void {
        serializeConversationMember(writer, aadUserConversationMember)
        writer.writeStringValue("email", aadUserConversationMember.email);
        writer.writeStringValue("tenantId", aadUserConversationMember.tenantId);
        writer.writeObjectValue<User>("user", aadUserConversationMember.user, serializeUser);
        writer.writeStringValue("userId", aadUserConversationMember.userId);
}
// tslint:enable
// eslint-enable
