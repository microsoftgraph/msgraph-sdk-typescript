// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { deserializeIntoIdentityBuiltInUserFlowAttribute } from './identityBuiltInUserFlowAttribute';
import { deserializeIntoIdentityCustomUserFlowAttribute } from './identityCustomUserFlowAttribute';
import { IdentityUserFlowAttributeDataType } from './identityUserFlowAttributeDataType';
import { IdentityUserFlowAttributeType } from './identityUserFlowAttributeType';
import { type IdentityBuiltInUserFlowAttribute, type IdentityCustomUserFlowAttribute } from './index';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIdentityUserFlowAttributeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.identityBuiltInUserFlowAttribute":
                    return deserializeIntoIdentityBuiltInUserFlowAttribute;
                case "#microsoft.graph.identityCustomUserFlowAttribute":
                    return deserializeIntoIdentityCustomUserFlowAttribute;
            }
        }
    }
    return deserializeIntoIdentityUserFlowAttribute;
}
export function deserializeIntoIdentityUserFlowAttribute(identityUserFlowAttribute: IdentityUserFlowAttribute | undefined = {} as IdentityUserFlowAttribute) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(identityUserFlowAttribute),
        "dataType": n => { identityUserFlowAttribute.dataType = n.getEnumValue<IdentityUserFlowAttributeDataType>(IdentityUserFlowAttributeDataType); },
        "description": n => { identityUserFlowAttribute.description = n.getStringValue(); },
        "displayName": n => { identityUserFlowAttribute.displayName = n.getStringValue(); },
        "userFlowAttributeType": n => { identityUserFlowAttribute.userFlowAttributeType = n.getEnumValue<IdentityUserFlowAttributeType>(IdentityUserFlowAttributeType); },
    }
}
export interface IdentityUserFlowAttribute extends Entity, Parsable {
    /**
     * The dataType property
     */
    dataType?: IdentityUserFlowAttributeDataType;
    /**
     * The description of the user flow attribute that's shown to the user at the time of sign-up.
     */
    description?: string;
    /**
     * The display name of the user flow attribute.  Supports $filter (eq, ne).
     */
    displayName?: string;
    /**
     * The userFlowAttributeType property
     */
    userFlowAttributeType?: IdentityUserFlowAttributeType;
}
export function serializeIdentityUserFlowAttribute(writer: SerializationWriter, identityUserFlowAttribute: IdentityUserFlowAttribute | undefined = {} as IdentityUserFlowAttribute) : void {
    serializeEntity(writer, identityUserFlowAttribute)
    writer.writeEnumValue<IdentityUserFlowAttributeDataType>("dataType", identityUserFlowAttribute.dataType);
    writer.writeStringValue("description", identityUserFlowAttribute.description);
    writer.writeStringValue("displayName", identityUserFlowAttribute.displayName);
    writer.writeEnumValue<IdentityUserFlowAttributeType>("userFlowAttributeType", identityUserFlowAttribute.userFlowAttributeType);
}
// tslint:enable
// eslint-enable
