// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createWorkbookChartLegendFormatFromDiscriminatorValue, serializeWorkbookChartLegendFormat, type WorkbookChartLegendFormat } from './workbookChartLegendFormat';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookChartLegendFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookChartLegend;
}
export function deserializeIntoWorkbookChartLegend(workbookChartLegend: WorkbookChartLegend | undefined = {} as WorkbookChartLegend) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartLegend),
        "format": n => { workbookChartLegend.format = n.getObjectValue<WorkbookChartLegendFormat>(createWorkbookChartLegendFormatFromDiscriminatorValue); },
        "overlay": n => { workbookChartLegend.overlay = n.getBooleanValue(); },
        "position": n => { workbookChartLegend.position = n.getStringValue(); },
        "visible": n => { workbookChartLegend.visible = n.getBooleanValue(); },
    }
}
export function serializeWorkbookChartLegend(writer: SerializationWriter, workbookChartLegend: WorkbookChartLegend | undefined = {} as WorkbookChartLegend) : void {
        serializeEntity(writer, workbookChartLegend)
        writer.writeObjectValue<WorkbookChartLegendFormat>("format", workbookChartLegend.format, );
        writer.writeBooleanValue("overlay", workbookChartLegend.overlay);
        writer.writeStringValue("position", workbookChartLegend.position);
        writer.writeBooleanValue("visible", workbookChartLegend.visible);
}
export interface WorkbookChartLegend extends Entity, Parsable {
    /**
     * Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.
     */
    format?: WorkbookChartLegendFormat;
    /**
     * Boolean value for whether the chart legend should overlap with the main body of the chart.
     */
    overlay?: boolean;
    /**
     * Represents the position of the legend on the chart. The possible values are: Top, Bottom, Left, Right, Corner, Custom.
     */
    position?: string;
    /**
     * A boolean value the represents the visibility of a ChartLegend object.
     */
    visible?: boolean;
}
// tslint:enable
// eslint-enable
