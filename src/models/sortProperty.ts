// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSortPropertyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSortProperty;
}
export function deserializeIntoSortProperty(sortProperty: SortProperty | undefined = {} as SortProperty) : Record<string, (node: ParseNode) => void> {
    return {
        "isDescending": n => { sortProperty.isDescending = n.getBooleanValue(); },
        "name": n => { sortProperty.name = n.getStringValue(); },
        "@odata.type": n => { sortProperty.odataType = n.getStringValue(); },
    }
}
export function serializeSortProperty(writer: SerializationWriter, sortProperty: SortProperty | undefined = {} as SortProperty) : void {
    writer.writeBooleanValue("isDescending", sortProperty.isDescending);
    writer.writeStringValue("name", sortProperty.name);
    writer.writeStringValue("@odata.type", sortProperty.odataType);
    writer.writeAdditionalData(sortProperty.additionalData);
}
export interface SortProperty extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * True if the sort order is descending. Default is false, with the sort order as ascending. Optional.
     */
    isDescending?: boolean;
    /**
     * The name of the property to sort on. Required.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:enable
// eslint-enable
