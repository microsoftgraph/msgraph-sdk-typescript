// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEntityFromDiscriminatorValue, deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createResourceReferenceFromDiscriminatorValue, serializeResourceReference, type ResourceReference } from './resourceReference';
import { createResourceVisualizationFromDiscriminatorValue, serializeResourceVisualization, type ResourceVisualization } from './resourceVisualization';
import { createUsageDetailsFromDiscriminatorValue, serializeUsageDetails, type UsageDetails } from './usageDetails';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUsedInsightFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUsedInsight;
}
export function deserializeIntoUsedInsight(usedInsight: UsedInsight | undefined = {} as UsedInsight) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(usedInsight),
        "lastUsed": n => { usedInsight.lastUsed = n.getObjectValue<UsageDetails>(createUsageDetailsFromDiscriminatorValue); },
        "resource": n => { usedInsight.resource = n.getObjectValue<Entity>(createEntityFromDiscriminatorValue); },
        "resourceReference": n => { usedInsight.resourceReference = n.getObjectValue<ResourceReference>(createResourceReferenceFromDiscriminatorValue); },
        "resourceVisualization": n => { usedInsight.resourceVisualization = n.getObjectValue<ResourceVisualization>(createResourceVisualizationFromDiscriminatorValue); },
    }
}
export function serializeUsedInsight(writer: SerializationWriter, usedInsight: UsedInsight | undefined = {} as UsedInsight) : void {
        serializeEntity(writer, usedInsight)
        writer.writeObjectValue<UsageDetails>("lastUsed", usedInsight.lastUsed, serializeUsageDetails);
        writer.writeObjectValue<Entity>("resource", usedInsight.resource, serializeEntity);
}
export interface UsedInsight extends Entity, Parsable {
    /**
     * Information about when the item was last viewed or modified by the user. Read only.
     */
    lastUsed?: UsageDetails;
    /**
     * Used for navigating to the item that was used. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.
     */
    resource?: Entity;
    /**
     * Reference properties of the used document, such as the url and type of the document. Read-only
     */
    resourceReference?: ResourceReference;
    /**
     * Properties that you can use to visualize the document in your experience. Read-only
     */
    resourceVisualization?: ResourceVisualization;
}
// tslint:enable
// eslint-enable
