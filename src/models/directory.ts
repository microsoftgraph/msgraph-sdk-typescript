// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAdministrativeUnitFromDiscriminatorValue, serializeAdministrativeUnit, type AdministrativeUnit } from './administrativeUnit';
import { createAttributeSetFromDiscriminatorValue, serializeAttributeSet, type AttributeSet } from './attributeSet';
import { createCustomSecurityAttributeDefinitionFromDiscriminatorValue, serializeCustomSecurityAttributeDefinition, type CustomSecurityAttributeDefinition } from './customSecurityAttributeDefinition';
import { createDeviceLocalCredentialInfoFromDiscriminatorValue, serializeDeviceLocalCredentialInfo, type DeviceLocalCredentialInfo } from './deviceLocalCredentialInfo';
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentityProviderBaseFromDiscriminatorValue, serializeIdentityProviderBase, type IdentityProviderBase } from './identityProviderBase';
import { createOnPremisesDirectorySynchronizationFromDiscriminatorValue, serializeOnPremisesDirectorySynchronization, type OnPremisesDirectorySynchronization } from './onPremisesDirectorySynchronization';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDirectoryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDirectory;
}
export function deserializeIntoDirectory(directory: Directory | undefined = {} as Directory) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(directory),
        "administrativeUnits": n => { directory.administrativeUnits = n.getCollectionOfObjectValues<AdministrativeUnit>(createAdministrativeUnitFromDiscriminatorValue); },
        "attributeSets": n => { directory.attributeSets = n.getCollectionOfObjectValues<AttributeSet>(createAttributeSetFromDiscriminatorValue); },
        "customSecurityAttributeDefinitions": n => { directory.customSecurityAttributeDefinitions = n.getCollectionOfObjectValues<CustomSecurityAttributeDefinition>(createCustomSecurityAttributeDefinitionFromDiscriminatorValue); },
        "deletedItems": n => { directory.deletedItems = n.getCollectionOfObjectValues<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "deviceLocalCredentials": n => { directory.deviceLocalCredentials = n.getCollectionOfObjectValues<DeviceLocalCredentialInfo>(createDeviceLocalCredentialInfoFromDiscriminatorValue); },
        "federationConfigurations": n => { directory.federationConfigurations = n.getCollectionOfObjectValues<IdentityProviderBase>(createIdentityProviderBaseFromDiscriminatorValue); },
        "onPremisesSynchronization": n => { directory.onPremisesSynchronization = n.getCollectionOfObjectValues<OnPremisesDirectorySynchronization>(createOnPremisesDirectorySynchronizationFromDiscriminatorValue); },
    }
}
export interface Directory extends Entity, Parsable {
    /**
     * Conceptual container for user and group directory objects.
     */
    administrativeUnits?: AdministrativeUnit[];
    /**
     * Group of related custom security attribute definitions.
     */
    attributeSets?: AttributeSet[];
    /**
     * Schema of a custom security attributes (key-value pairs).
     */
    customSecurityAttributeDefinitions?: CustomSecurityAttributeDefinition[];
    /**
     * Recently deleted items. Read-only. Nullable.
     */
    deletedItems?: DirectoryObject[];
    /**
     * The credentials of the device's local administrator account backed up to Microsoft Entra ID.
     */
    deviceLocalCredentials?: DeviceLocalCredentialInfo[];
    /**
     * Configure domain federation with organizations whose identity provider (IdP) supports either the SAML or WS-Fed protocol.
     */
    federationConfigurations?: IdentityProviderBase[];
    /**
     * A container for on-premises directory synchronization functionalities that are available for the organization.
     */
    onPremisesSynchronization?: OnPremisesDirectorySynchronization[];
}
export function serializeDirectory(writer: SerializationWriter, directory: Directory | undefined = {} as Directory) : void {
        serializeEntity(writer, directory)
        writer.writeCollectionOfObjectValues<AdministrativeUnit>("administrativeUnits", directory.administrativeUnits, serializeAdministrativeUnit);
        writer.writeCollectionOfObjectValues<AttributeSet>("attributeSets", directory.attributeSets, serializeAttributeSet);
        writer.writeCollectionOfObjectValues<CustomSecurityAttributeDefinition>("customSecurityAttributeDefinitions", directory.customSecurityAttributeDefinitions, serializeCustomSecurityAttributeDefinition);
        writer.writeCollectionOfObjectValues<DirectoryObject>("deletedItems", directory.deletedItems, serializeDirectoryObject);
        writer.writeCollectionOfObjectValues<DeviceLocalCredentialInfo>("deviceLocalCredentials", directory.deviceLocalCredentials, serializeDeviceLocalCredentialInfo);
        writer.writeCollectionOfObjectValues<IdentityProviderBase>("federationConfigurations", directory.federationConfigurations, serializeIdentityProviderBase);
        writer.writeCollectionOfObjectValues<OnPremisesDirectorySynchronization>("onPremisesSynchronization", directory.onPremisesSynchronization, serializeOnPremisesDirectorySynchronization);
}
// tslint:enable
// eslint-enable
