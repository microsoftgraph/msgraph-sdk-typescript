// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAppliedConditionalAccessPolicyFromDiscriminatorValue, serializeAppliedConditionalAccessPolicy, type AppliedConditionalAccessPolicy } from './appliedConditionalAccessPolicy';
import { ConditionalAccessStatus } from './conditionalAccessStatus';
import { createDeviceDetailFromDiscriminatorValue, serializeDeviceDetail, type DeviceDetail } from './deviceDetail';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { RiskDetail } from './riskDetail';
import { RiskEventType } from './riskEventType';
import { RiskLevel } from './riskLevel';
import { RiskState } from './riskState';
import { createSignInLocationFromDiscriminatorValue, serializeSignInLocation, type SignInLocation } from './signInLocation';
import { createSignInStatusFromDiscriminatorValue, serializeSignInStatus, type SignInStatus } from './signInStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSignInFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSignIn;
}
export function deserializeIntoSignIn(signIn: SignIn | undefined = {} as SignIn) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(signIn),
        "appDisplayName": n => { signIn.appDisplayName = n.getStringValue(); },
        "appId": n => { signIn.appId = n.getStringValue(); },
        "appliedConditionalAccessPolicies": n => { signIn.appliedConditionalAccessPolicies = n.getCollectionOfObjectValues<AppliedConditionalAccessPolicy>(createAppliedConditionalAccessPolicyFromDiscriminatorValue); },
        "clientAppUsed": n => { signIn.clientAppUsed = n.getStringValue(); },
        "conditionalAccessStatus": n => { signIn.conditionalAccessStatus = n.getEnumValue<ConditionalAccessStatus>(ConditionalAccessStatus); },
        "correlationId": n => { signIn.correlationId = n.getStringValue(); },
        "createdDateTime": n => { signIn.createdDateTime = n.getDateValue(); },
        "deviceDetail": n => { signIn.deviceDetail = n.getObjectValue<DeviceDetail>(createDeviceDetailFromDiscriminatorValue); },
        "ipAddress": n => { signIn.ipAddress = n.getStringValue(); },
        "isInteractive": n => { signIn.isInteractive = n.getBooleanValue(); },
        "location": n => { signIn.location = n.getObjectValue<SignInLocation>(createSignInLocationFromDiscriminatorValue); },
        "resourceDisplayName": n => { signIn.resourceDisplayName = n.getStringValue(); },
        "resourceId": n => { signIn.resourceId = n.getStringValue(); },
        "riskDetail": n => { signIn.riskDetail = n.getEnumValue<RiskDetail>(RiskDetail); },
        "riskEventTypes": n => { signIn.riskEventTypes = n.getCollectionOfEnumValues<RiskEventType>(RiskEventType); },
        "riskEventTypes_v2": n => { signIn.riskEventTypes_v2 = n.getCollectionOfPrimitiveValues<string>(); },
        "riskLevelAggregated": n => { signIn.riskLevelAggregated = n.getEnumValue<RiskLevel>(RiskLevel); },
        "riskLevelDuringSignIn": n => { signIn.riskLevelDuringSignIn = n.getEnumValue<RiskLevel>(RiskLevel); },
        "riskState": n => { signIn.riskState = n.getEnumValue<RiskState>(RiskState); },
        "status": n => { signIn.status = n.getObjectValue<SignInStatus>(createSignInStatusFromDiscriminatorValue); },
        "userDisplayName": n => { signIn.userDisplayName = n.getStringValue(); },
        "userId": n => { signIn.userId = n.getStringValue(); },
        "userPrincipalName": n => { signIn.userPrincipalName = n.getStringValue(); },
    }
}
export function serializeSignIn(writer: SerializationWriter, signIn: SignIn | undefined = {} as SignIn) : void {
        serializeEntity(writer, signIn)
        writer.writeStringValue("appDisplayName", signIn.appDisplayName);
        writer.writeStringValue("appId", signIn.appId);
        writer.writeCollectionOfObjectValues<AppliedConditionalAccessPolicy>("appliedConditionalAccessPolicies", signIn.appliedConditionalAccessPolicies, );
        writer.writeStringValue("clientAppUsed", signIn.clientAppUsed);
        writer.writeEnumValue<ConditionalAccessStatus>("conditionalAccessStatus", signIn.conditionalAccessStatus);
        writer.writeStringValue("correlationId", signIn.correlationId);
        writer.writeDateValue("createdDateTime", signIn.createdDateTime);
        writer.writeObjectValue<DeviceDetail>("deviceDetail", signIn.deviceDetail, );
        writer.writeStringValue("ipAddress", signIn.ipAddress);
        writer.writeBooleanValue("isInteractive", signIn.isInteractive);
        writer.writeObjectValue<SignInLocation>("location", signIn.location, );
        writer.writeStringValue("resourceDisplayName", signIn.resourceDisplayName);
        writer.writeStringValue("resourceId", signIn.resourceId);
        writer.writeEnumValue<RiskDetail>("riskDetail", signIn.riskDetail);
        if(signIn.riskEventTypes)
        writer.writeEnumValue<RiskEventType>("riskEventTypes", ...signIn.riskEventTypes);
        writer.writeCollectionOfPrimitiveValues<string>("riskEventTypes_v2", signIn.riskEventTypes_v2);
        writer.writeEnumValue<RiskLevel>("riskLevelAggregated", signIn.riskLevelAggregated);
        writer.writeEnumValue<RiskLevel>("riskLevelDuringSignIn", signIn.riskLevelDuringSignIn);
        writer.writeEnumValue<RiskState>("riskState", signIn.riskState);
        writer.writeObjectValue<SignInStatus>("status", signIn.status, );
        writer.writeStringValue("userDisplayName", signIn.userDisplayName);
        writer.writeStringValue("userId", signIn.userId);
        writer.writeStringValue("userPrincipalName", signIn.userPrincipalName);
}
export interface SignIn extends Entity, Parsable {
    /**
     * App name displayed in the Microsoft Entra admin center.  Supports $filter (eq, startsWith).
     */
    appDisplayName?: string;
    /**
     * Unique GUID representing the app ID in the Microsoft Entra ID.  Supports $filter (eq).
     */
    appId?: string;
    /**
     * Provides a list of conditional access policies that are triggered by the corresponding sign-in activity.
     */
    appliedConditionalAccessPolicies?: AppliedConditionalAccessPolicy[];
    /**
     * Identifies the client used for the sign-in activity. Modern authentication clients include Browser, modern clients. Legacy authentication clients include Exchange ActiveSync, IMAP, MAPI, SMTP, POP, and other clients.  Supports $filter (eq).
     */
    clientAppUsed?: string;
    /**
     * Reports status of an activated conditional access policy. Possible values are: success, failure, notApplied, and unknownFutureValue.  Supports $filter (eq).
     */
    conditionalAccessStatus?: ConditionalAccessStatus;
    /**
     * The request ID sent from the client when the sign-in is initiated; used to troubleshoot sign-in activity.  Supports $filter (eq).
     */
    correlationId?: string;
    /**
     * Date and time (UTC) the sign-in was initiated. Example: midnight on Jan 1, 2014 is reported as 2014-01-01T00:00:00Z.  Supports $orderby, $filter (eq, le, and ge).
     */
    createdDateTime?: Date;
    /**
     * Device information from where the sign-in occurred; includes device ID, operating system, and browser.  Supports $filter (eq, startsWith) on browser and operatingSytem properties.
     */
    deviceDetail?: DeviceDetail;
    /**
     * IP address of the client used to sign in.  Supports $filter (eq, startsWith).
     */
    ipAddress?: string;
    /**
     * Indicates if a sign-in is interactive or not.
     */
    isInteractive?: boolean;
    /**
     * Provides the city, state, and country code where the sign-in originated.  Supports $filter (eq, startsWith) on city, state, and countryOrRegion properties.
     */
    location?: SignInLocation;
    /**
     * Name of the resource the user signed into.  Supports $filter (eq).
     */
    resourceDisplayName?: string;
    /**
     * ID of the resource that the user signed into.  Supports $filter (eq).
     */
    resourceId?: string;
    /**
     * Provides the 'reason' behind a specific state of a risky user, sign-in or a risk event. The possible values are: none, adminGeneratedTemporaryPassword, userPerformedSecuredPasswordChange, userPerformedSecuredPasswordReset, adminConfirmedSigninSafe, aiConfirmedSigninSafe, userPassedMFADrivenByRiskBasedPolicy, adminDismissedAllRiskForUser, adminConfirmedSigninCompromised, unknownFutureValue. The value none means that no action has been performed on the user or sign-in so far.  Supports $filter (eq).Note: Details for this property require a Microsoft Entra ID P2 license. Other licenses return the value hidden.
     */
    riskDetail?: RiskDetail;
    /**
     * Risk event types associated with the sign-in. The possible values are: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures, malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials, investigationsThreatIntelligence,  generic, and unknownFutureValue.  Supports $filter (eq).
     */
    riskEventTypes?: RiskEventType[];
    /**
     * The list of risk event types associated with the sign-in. Possible values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures, malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials, investigationsThreatIntelligence,  generic, or unknownFutureValue.  Supports $filter (eq, startsWith).
     */
    riskEventTypes_v2?: string[];
    /**
     * Aggregated risk level. The possible values are: none, low, medium, high, hidden, and unknownFutureValue. The value hidden means the user or sign-in wasn't enabled for Microsoft Entra ID Protection.  Supports $filter (eq).  Note: Details for this property are only available for Microsoft Entra ID P2 customers. All other customers are returned hidden.
     */
    riskLevelAggregated?: RiskLevel;
    /**
     * Risk level during sign-in. The possible values are: none, low, medium, high, hidden, and unknownFutureValue. The value hidden means the user or sign-in wasn't enabled for Microsoft Entra ID Protection.  Supports $filter (eq).  Note: Details for this property are only available for Microsoft Entra ID P2 customers. All other customers are returned hidden.
     */
    riskLevelDuringSignIn?: RiskLevel;
    /**
     * Reports status of the risky user, sign-in, or a risk event. The possible values are: none, confirmedSafe, remediated, dismissed, atRisk, confirmedCompromised, unknownFutureValue.  Supports $filter (eq).
     */
    riskState?: RiskState;
    /**
     * Sign-in status. Includes the error code and description of the error (if there's a sign-in failure).  Supports $filter (eq) on errorCode property.
     */
    status?: SignInStatus;
    /**
     * Display name of the user that initiated the sign-in.  Supports $filter (eq, startsWith).
     */
    userDisplayName?: string;
    /**
     * ID of the user that initiated the sign-in.  Supports $filter (eq).
     */
    userId?: string;
    /**
     * User principal name of the user that initiated the sign-in.  Supports $filter (eq, startsWith).
     */
    userPrincipalName?: string;
}
// tslint:enable
// eslint-enable
