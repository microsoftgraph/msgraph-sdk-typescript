// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAndroidCompliancePolicy } from './androidCompliancePolicy';
import { deserializeIntoAndroidWorkProfileCompliancePolicy } from './androidWorkProfileCompliancePolicy';
import { createDeviceComplianceDeviceOverviewFromDiscriminatorValue, serializeDeviceComplianceDeviceOverview, type DeviceComplianceDeviceOverview } from './deviceComplianceDeviceOverview';
import { createDeviceComplianceDeviceStatusFromDiscriminatorValue, serializeDeviceComplianceDeviceStatus, type DeviceComplianceDeviceStatus } from './deviceComplianceDeviceStatus';
import { createDeviceCompliancePolicyAssignmentFromDiscriminatorValue, serializeDeviceCompliancePolicyAssignment, type DeviceCompliancePolicyAssignment } from './deviceCompliancePolicyAssignment';
import { createDeviceComplianceScheduledActionForRuleFromDiscriminatorValue, serializeDeviceComplianceScheduledActionForRule, type DeviceComplianceScheduledActionForRule } from './deviceComplianceScheduledActionForRule';
import { createDeviceComplianceUserOverviewFromDiscriminatorValue, serializeDeviceComplianceUserOverview, type DeviceComplianceUserOverview } from './deviceComplianceUserOverview';
import { createDeviceComplianceUserStatusFromDiscriminatorValue, serializeDeviceComplianceUserStatus, type DeviceComplianceUserStatus } from './deviceComplianceUserStatus';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type AndroidCompliancePolicy, type AndroidWorkProfileCompliancePolicy, type IosCompliancePolicy, type MacOSCompliancePolicy, type Windows10CompliancePolicy, type Windows10MobileCompliancePolicy, type Windows81CompliancePolicy, type WindowsPhone81CompliancePolicy } from './index';
import { deserializeIntoIosCompliancePolicy } from './iosCompliancePolicy';
import { deserializeIntoMacOSCompliancePolicy } from './macOSCompliancePolicy';
import { createSettingStateDeviceSummaryFromDiscriminatorValue, serializeSettingStateDeviceSummary, type SettingStateDeviceSummary } from './settingStateDeviceSummary';
import { deserializeIntoWindows10CompliancePolicy } from './windows10CompliancePolicy';
import { deserializeIntoWindows10MobileCompliancePolicy } from './windows10MobileCompliancePolicy';
import { deserializeIntoWindows81CompliancePolicy } from './windows81CompliancePolicy';
import { deserializeIntoWindowsPhone81CompliancePolicy } from './windowsPhone81CompliancePolicy';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceCompliancePolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.androidCompliancePolicy":
                    return deserializeIntoAndroidCompliancePolicy;
                case "#microsoft.graph.androidWorkProfileCompliancePolicy":
                    return deserializeIntoAndroidWorkProfileCompliancePolicy;
                case "#microsoft.graph.iosCompliancePolicy":
                    return deserializeIntoIosCompliancePolicy;
                case "#microsoft.graph.macOSCompliancePolicy":
                    return deserializeIntoMacOSCompliancePolicy;
                case "#microsoft.graph.windows10CompliancePolicy":
                    return deserializeIntoWindows10CompliancePolicy;
                case "#microsoft.graph.windows10MobileCompliancePolicy":
                    return deserializeIntoWindows10MobileCompliancePolicy;
                case "#microsoft.graph.windows81CompliancePolicy":
                    return deserializeIntoWindows81CompliancePolicy;
                case "#microsoft.graph.windowsPhone81CompliancePolicy":
                    return deserializeIntoWindowsPhone81CompliancePolicy;
            }
        }
    }
    return deserializeIntoDeviceCompliancePolicy;
}
export function deserializeIntoDeviceCompliancePolicy(deviceCompliancePolicy: DeviceCompliancePolicy | undefined = {} as DeviceCompliancePolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceCompliancePolicy),
        "assignments": n => { deviceCompliancePolicy.assignments = n.getCollectionOfObjectValues<DeviceCompliancePolicyAssignment>(createDeviceCompliancePolicyAssignmentFromDiscriminatorValue); },
        "createdDateTime": n => { deviceCompliancePolicy.createdDateTime = n.getDateValue(); },
        "description": n => { deviceCompliancePolicy.description = n.getStringValue(); },
        "deviceSettingStateSummaries": n => { deviceCompliancePolicy.deviceSettingStateSummaries = n.getCollectionOfObjectValues<SettingStateDeviceSummary>(createSettingStateDeviceSummaryFromDiscriminatorValue); },
        "deviceStatuses": n => { deviceCompliancePolicy.deviceStatuses = n.getCollectionOfObjectValues<DeviceComplianceDeviceStatus>(createDeviceComplianceDeviceStatusFromDiscriminatorValue); },
        "deviceStatusOverview": n => { deviceCompliancePolicy.deviceStatusOverview = n.getObjectValue<DeviceComplianceDeviceOverview>(createDeviceComplianceDeviceOverviewFromDiscriminatorValue); },
        "displayName": n => { deviceCompliancePolicy.displayName = n.getStringValue(); },
        "lastModifiedDateTime": n => { deviceCompliancePolicy.lastModifiedDateTime = n.getDateValue(); },
        "scheduledActionsForRule": n => { deviceCompliancePolicy.scheduledActionsForRule = n.getCollectionOfObjectValues<DeviceComplianceScheduledActionForRule>(createDeviceComplianceScheduledActionForRuleFromDiscriminatorValue); },
        "userStatuses": n => { deviceCompliancePolicy.userStatuses = n.getCollectionOfObjectValues<DeviceComplianceUserStatus>(createDeviceComplianceUserStatusFromDiscriminatorValue); },
        "userStatusOverview": n => { deviceCompliancePolicy.userStatusOverview = n.getObjectValue<DeviceComplianceUserOverview>(createDeviceComplianceUserOverviewFromDiscriminatorValue); },
        "version": n => { deviceCompliancePolicy.version = n.getNumberValue(); },
    }
}
export interface DeviceCompliancePolicy extends Entity, Parsable {
    /**
     * The collection of assignments for this compliance policy.
     */
    assignments?: DeviceCompliancePolicyAssignment[];
    /**
     * DateTime the object was created.
     */
    createdDateTime?: Date;
    /**
     * Admin provided description of the Device Configuration.
     */
    description?: string;
    /**
     * Compliance Setting State Device Summary
     */
    deviceSettingStateSummaries?: SettingStateDeviceSummary[];
    /**
     * List of DeviceComplianceDeviceStatus.
     */
    deviceStatuses?: DeviceComplianceDeviceStatus[];
    /**
     * Device compliance devices status overview
     */
    deviceStatusOverview?: DeviceComplianceDeviceOverview;
    /**
     * Admin provided name of the device configuration.
     */
    displayName?: string;
    /**
     * DateTime the object was last modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * The list of scheduled action per rule for this compliance policy. This is a required property when creating any individual per-platform compliance policies.
     */
    scheduledActionsForRule?: DeviceComplianceScheduledActionForRule[];
    /**
     * List of DeviceComplianceUserStatus.
     */
    userStatuses?: DeviceComplianceUserStatus[];
    /**
     * Device compliance users status overview
     */
    userStatusOverview?: DeviceComplianceUserOverview;
    /**
     * Version of the device configuration.
     */
    version?: number;
}
export function serializeDeviceCompliancePolicy(writer: SerializationWriter, deviceCompliancePolicy: DeviceCompliancePolicy | undefined = {} as DeviceCompliancePolicy) : void {
        serializeEntity(writer, deviceCompliancePolicy)
        writer.writeCollectionOfObjectValues<DeviceCompliancePolicyAssignment>("assignments", deviceCompliancePolicy.assignments, serializeDeviceCompliancePolicyAssignment);
        writer.writeDateValue("createdDateTime", deviceCompliancePolicy.createdDateTime);
        writer.writeStringValue("description", deviceCompliancePolicy.description);
        writer.writeCollectionOfObjectValues<SettingStateDeviceSummary>("deviceSettingStateSummaries", deviceCompliancePolicy.deviceSettingStateSummaries, serializeSettingStateDeviceSummary);
        writer.writeCollectionOfObjectValues<DeviceComplianceDeviceStatus>("deviceStatuses", deviceCompliancePolicy.deviceStatuses, serializeDeviceComplianceDeviceStatus);
        writer.writeObjectValue<DeviceComplianceDeviceOverview>("deviceStatusOverview", deviceCompliancePolicy.deviceStatusOverview, serializeDeviceComplianceDeviceOverview);
        writer.writeStringValue("displayName", deviceCompliancePolicy.displayName);
        writer.writeDateValue("lastModifiedDateTime", deviceCompliancePolicy.lastModifiedDateTime);
        writer.writeCollectionOfObjectValues<DeviceComplianceScheduledActionForRule>("scheduledActionsForRule", deviceCompliancePolicy.scheduledActionsForRule, serializeDeviceComplianceScheduledActionForRule);
        writer.writeCollectionOfObjectValues<DeviceComplianceUserStatus>("userStatuses", deviceCompliancePolicy.userStatuses, serializeDeviceComplianceUserStatus);
        writer.writeObjectValue<DeviceComplianceUserOverview>("userStatusOverview", deviceCompliancePolicy.userStatusOverview, serializeDeviceComplianceUserOverview);
        writer.writeNumberValue("version", deviceCompliancePolicy.version);
}
// tslint:enable
// eslint-enable
