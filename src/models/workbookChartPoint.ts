// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from './json';
import { createWorkbookChartPointFormatFromDiscriminatorValue, serializeWorkbookChartPointFormat, type WorkbookChartPointFormat } from './workbookChartPointFormat';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookChartPointFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookChartPoint;
}
export function deserializeIntoWorkbookChartPoint(workbookChartPoint: WorkbookChartPoint | undefined = {} as WorkbookChartPoint) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartPoint),
        "format": n => { workbookChartPoint.format = n.getObjectValue<WorkbookChartPointFormat>(createWorkbookChartPointFormatFromDiscriminatorValue); },
        "value": n => { workbookChartPoint.value = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeWorkbookChartPoint(writer: SerializationWriter, workbookChartPoint: WorkbookChartPoint | undefined = {} as WorkbookChartPoint) : void {
        serializeEntity(writer, workbookChartPoint)
        writer.writeObjectValue<WorkbookChartPointFormat>("format", workbookChartPoint.format, serializeWorkbookChartPointFormat);
        writer.writeObjectValue<Json>("value", workbookChartPoint.value, serializeJson);
}
export interface WorkbookChartPoint extends Entity, Parsable {
    /**
     * Encapsulates the format properties chart point. Read-only.
     */
    format?: WorkbookChartPointFormat;
    /**
     * Returns the value of a chart point. Read-only.
     */
    value?: Json;
}
// tslint:enable
// eslint-enable
