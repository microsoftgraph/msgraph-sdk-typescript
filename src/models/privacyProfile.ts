// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrivacyProfileFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrivacyProfile;
}
export function deserializeIntoPrivacyProfile(privacyProfile: PrivacyProfile | undefined = {} as PrivacyProfile) : Record<string, (node: ParseNode) => void> {
    return {
        "contactEmail": n => { privacyProfile.contactEmail = n.getStringValue(); },
        "@odata.type": n => { privacyProfile.odataType = n.getStringValue(); },
        "statementUrl": n => { privacyProfile.statementUrl = n.getStringValue(); },
    }
}
export interface PrivacyProfile extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A valid smtp email address for the privacy statement contact. Not required.
     */
    contactEmail?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A valid URL format that begins with http:// or https://. Maximum length is 255 characters. The URL that directs to the company's privacy statement. Not required.
     */
    statementUrl?: string;
}
export function serializePrivacyProfile(writer: SerializationWriter, privacyProfile: PrivacyProfile | undefined = {} as PrivacyProfile) : void {
        writer.writeStringValue("contactEmail", privacyProfile.contactEmail);
        writer.writeStringValue("@odata.type", privacyProfile.odataType);
        writer.writeStringValue("statementUrl", privacyProfile.statementUrl);
        writer.writeAdditionalData(privacyProfile.additionalData);
}
// tslint:enable
// eslint-enable
