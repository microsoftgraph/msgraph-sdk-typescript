// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAudioFromDiscriminatorValue, serializeAudio, type Audio } from './audio';
import { deserializeIntoBaseItem, serializeBaseItem, type BaseItem } from './baseItem';
import { createBundleFromDiscriminatorValue, serializeBundle, type Bundle } from './bundle';
import { createDeletedFromDiscriminatorValue, serializeDeleted, type Deleted } from './deleted';
import { createDriveItemVersionFromDiscriminatorValue, serializeDriveItemVersion, type DriveItemVersion } from './driveItemVersion';
import { createFileFromDiscriminatorValue, serializeFile, type File } from './file';
import { createFileSystemInfoFromDiscriminatorValue, serializeFileSystemInfo, type FileSystemInfo } from './fileSystemInfo';
import { createFolderFromDiscriminatorValue, serializeFolder, type Folder } from './folder';
import { createGeoCoordinatesFromDiscriminatorValue, serializeGeoCoordinates, type GeoCoordinates } from './geoCoordinates';
import { createImageFromDiscriminatorValue, serializeImage, type Image } from './image';
import { createItemAnalyticsFromDiscriminatorValue, serializeItemAnalytics, type ItemAnalytics } from './itemAnalytics';
import { createListItemFromDiscriminatorValue, serializeListItem, type ListItem } from './listItem';
import { createMalwareFromDiscriminatorValue, serializeMalware, type Malware } from './malware';
import { createPackageEscapedFromDiscriminatorValue, serializePackageEscaped, type PackageEscaped } from './packageEscaped';
import { createPendingOperationsFromDiscriminatorValue, serializePendingOperations, type PendingOperations } from './pendingOperations';
import { createPermissionFromDiscriminatorValue, serializePermission, type Permission } from './permission';
import { createPhotoFromDiscriminatorValue, serializePhoto, type Photo } from './photo';
import { createPublicationFacetFromDiscriminatorValue, serializePublicationFacet, type PublicationFacet } from './publicationFacet';
import { createRemoteItemFromDiscriminatorValue, serializeRemoteItem, type RemoteItem } from './remoteItem';
import { createRootFromDiscriminatorValue, serializeRoot, type Root } from './root';
import { createSearchResultFromDiscriminatorValue, serializeSearchResult, type SearchResult } from './searchResult';
import { createSharedFromDiscriminatorValue, serializeShared, type Shared } from './shared';
import { createSharepointIdsFromDiscriminatorValue, serializeSharepointIds, type SharepointIds } from './sharepointIds';
import { createSpecialFolderFromDiscriminatorValue, serializeSpecialFolder, type SpecialFolder } from './specialFolder';
import { createSubscriptionFromDiscriminatorValue, serializeSubscription, type Subscription } from './subscription';
import { createThumbnailSetFromDiscriminatorValue, serializeThumbnailSet, type ThumbnailSet } from './thumbnailSet';
import { createVideoFromDiscriminatorValue, serializeVideo, type Video } from './video';
import { createWorkbookFromDiscriminatorValue, serializeWorkbook, type Workbook } from './workbook';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDriveItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDriveItem;
}
export function deserializeIntoDriveItem(driveItem: DriveItem | undefined = {} as DriveItem) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseItem(driveItem),
        "analytics": n => { driveItem.analytics = n.getObjectValue<ItemAnalytics>(createItemAnalyticsFromDiscriminatorValue); },
        "audio": n => { driveItem.audio = n.getObjectValue<Audio>(createAudioFromDiscriminatorValue); },
        "bundle": n => { driveItem.bundle = n.getObjectValue<Bundle>(createBundleFromDiscriminatorValue); },
        "children": n => { driveItem.children = n.getCollectionOfObjectValues<DriveItem>(createDriveItemFromDiscriminatorValue); },
        "content": n => { driveItem.content = n.getStringValue(); },
        "cTag": n => { driveItem.cTag = n.getStringValue(); },
        "deleted": n => { driveItem.deleted = n.getObjectValue<Deleted>(createDeletedFromDiscriminatorValue); },
        "file": n => { driveItem.file = n.getObjectValue<File>(createFileFromDiscriminatorValue); },
        "fileSystemInfo": n => { driveItem.fileSystemInfo = n.getObjectValue<FileSystemInfo>(createFileSystemInfoFromDiscriminatorValue); },
        "folder": n => { driveItem.folder = n.getObjectValue<Folder>(createFolderFromDiscriminatorValue); },
        "image": n => { driveItem.image = n.getObjectValue<Image>(createImageFromDiscriminatorValue); },
        "listItem": n => { driveItem.listItem = n.getObjectValue<ListItem>(createListItemFromDiscriminatorValue); },
        "location": n => { driveItem.location = n.getObjectValue<GeoCoordinates>(createGeoCoordinatesFromDiscriminatorValue); },
        "malware": n => { driveItem.malware = n.getObjectValue<Malware>(createMalwareFromDiscriminatorValue); },
        "package": n => { driveItem.packageEscaped = n.getObjectValue<PackageEscaped>(createPackageEscapedFromDiscriminatorValue); },
        "pendingOperations": n => { driveItem.pendingOperations = n.getObjectValue<PendingOperations>(createPendingOperationsFromDiscriminatorValue); },
        "permissions": n => { driveItem.permissions = n.getCollectionOfObjectValues<Permission>(createPermissionFromDiscriminatorValue); },
        "photo": n => { driveItem.photo = n.getObjectValue<Photo>(createPhotoFromDiscriminatorValue); },
        "publication": n => { driveItem.publication = n.getObjectValue<PublicationFacet>(createPublicationFacetFromDiscriminatorValue); },
        "remoteItem": n => { driveItem.remoteItem = n.getObjectValue<RemoteItem>(createRemoteItemFromDiscriminatorValue); },
        "root": n => { driveItem.root = n.getObjectValue<Root>(createRootFromDiscriminatorValue); },
        "searchResult": n => { driveItem.searchResult = n.getObjectValue<SearchResult>(createSearchResultFromDiscriminatorValue); },
        "shared": n => { driveItem.shared = n.getObjectValue<Shared>(createSharedFromDiscriminatorValue); },
        "sharepointIds": n => { driveItem.sharepointIds = n.getObjectValue<SharepointIds>(createSharepointIdsFromDiscriminatorValue); },
        "size": n => { driveItem.size = n.getNumberValue(); },
        "specialFolder": n => { driveItem.specialFolder = n.getObjectValue<SpecialFolder>(createSpecialFolderFromDiscriminatorValue); },
        "subscriptions": n => { driveItem.subscriptions = n.getCollectionOfObjectValues<Subscription>(createSubscriptionFromDiscriminatorValue); },
        "thumbnails": n => { driveItem.thumbnails = n.getCollectionOfObjectValues<ThumbnailSet>(createThumbnailSetFromDiscriminatorValue); },
        "versions": n => { driveItem.versions = n.getCollectionOfObjectValues<DriveItemVersion>(createDriveItemVersionFromDiscriminatorValue); },
        "video": n => { driveItem.video = n.getObjectValue<Video>(createVideoFromDiscriminatorValue); },
        "webDavUrl": n => { driveItem.webDavUrl = n.getStringValue(); },
        "workbook": n => { driveItem.workbook = n.getObjectValue<Workbook>(createWorkbookFromDiscriminatorValue); },
    }
}
export interface DriveItem extends BaseItem, Parsable {
    /**
     * Analytics about the view activities that took place on this item.
     */
    analytics?: ItemAnalytics;
    /**
     * Audio metadata, if the item is an audio file. Read-only. Read-only. Only on OneDrive Personal.
     */
    audio?: Audio;
    /**
     * Bundle metadata, if the item is a bundle. Read-only.
     */
    bundle?: Bundle;
    /**
     * Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable.
     */
    children?: DriveItem[];
    /**
     * The content stream, if the item represents a file.
     */
    content?: string;
    /**
     * An eTag for the content of the item. This eTag is not changed if only the metadata is changed. Note This property is not returned if the item is a folder. Read-only.
     */
    cTag?: string;
    /**
     * Information about the deleted state of the item. Read-only.
     */
    deleted?: Deleted;
    /**
     * File metadata, if the item is a file. Read-only.
     */
    file?: File;
    /**
     * File system information on client. Read-write.
     */
    fileSystemInfo?: FileSystemInfo;
    /**
     * Folder metadata, if the item is a folder. Read-only.
     */
    folder?: Folder;
    /**
     * Image metadata, if the item is an image. Read-only.
     */
    image?: Image;
    /**
     * For drives in SharePoint, the associated document library list item. Read-only. Nullable.
     */
    listItem?: ListItem;
    /**
     * Location metadata, if the item has location data. Read-only.
     */
    location?: GeoCoordinates;
    /**
     * Malware metadata, if the item was detected to contain malware. Read-only.
     */
    malware?: Malware;
    /**
     * If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.
     */
    packageEscaped?: PackageEscaped;
    /**
     * If present, indicates that one or more operations that might affect the state of the driveItem are pending completion. Read-only.
     */
    pendingOperations?: PendingOperations;
    /**
     * The set of permissions for the item. Read-only. Nullable.
     */
    permissions?: Permission[];
    /**
     * Photo metadata, if the item is a photo. Read-only.
     */
    photo?: Photo;
    /**
     * Provides information about the published or checked-out state of an item, in locations that support such actions. This property is not returned by default. Read-only.
     */
    publication?: PublicationFacet;
    /**
     * Remote item data, if the item is shared from a drive other than the one being accessed. Read-only.
     */
    remoteItem?: RemoteItem;
    /**
     * If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive.
     */
    root?: Root;
    /**
     * Search metadata, if the item is from a search result. Read-only.
     */
    searchResult?: SearchResult;
    /**
     * Indicates that the item has been shared with others and provides information about the shared state of the item. Read-only.
     */
    shared?: Shared;
    /**
     * Returns identifiers useful for SharePoint REST compatibility. Read-only.
     */
    sharepointIds?: SharepointIds;
    /**
     * Size of the item in bytes. Read-only.
     */
    size?: number;
    /**
     * If the current item is also available as a special folder, this facet is returned. Read-only.
     */
    specialFolder?: SpecialFolder;
    /**
     * The set of subscriptions on the item. Only supported on the root of a drive.
     */
    subscriptions?: Subscription[];
    /**
     * Collection containing [ThumbnailSet][] objects associated with the item. For more info, see [getting thumbnails][]. Read-only. Nullable.
     */
    thumbnails?: ThumbnailSet[];
    /**
     * The list of previous versions of the item. For more info, see [getting previous versions][]. Read-only. Nullable.
     */
    versions?: DriveItemVersion[];
    /**
     * Video metadata, if the item is a video. Read-only.
     */
    video?: Video;
    /**
     * WebDAV compatible URL for the item.
     */
    webDavUrl?: string;
    /**
     * For files that are Excel spreadsheets, accesses the workbook API to work with the spreadsheet's contents. Nullable.
     */
    workbook?: Workbook;
}
export function serializeDriveItem(writer: SerializationWriter, driveItem: DriveItem | undefined = {} as DriveItem) : void {
        serializeBaseItem(writer, driveItem)
        writer.writeObjectValue<ItemAnalytics>("analytics", driveItem.analytics, );
        writer.writeObjectValue<Audio>("audio", driveItem.audio, );
        writer.writeObjectValue<Bundle>("bundle", driveItem.bundle, );
        writer.writeCollectionOfObjectValues<DriveItem>("children", driveItem.children, );
        writer.writeStringValue("content", driveItem.content);
        writer.writeStringValue("cTag", driveItem.cTag);
        writer.writeObjectValue<Deleted>("deleted", driveItem.deleted, );
        writer.writeObjectValue<File>("file", driveItem.file, );
        writer.writeObjectValue<FileSystemInfo>("fileSystemInfo", driveItem.fileSystemInfo, );
        writer.writeObjectValue<Folder>("folder", driveItem.folder, );
        writer.writeObjectValue<Image>("image", driveItem.image, );
        writer.writeObjectValue<ListItem>("listItem", driveItem.listItem, );
        writer.writeObjectValue<GeoCoordinates>("location", driveItem.location, );
        writer.writeObjectValue<Malware>("malware", driveItem.malware, );
        writer.writeObjectValue<PackageEscaped>("package", driveItem.packageEscaped, );
        writer.writeObjectValue<PendingOperations>("pendingOperations", driveItem.pendingOperations, );
        writer.writeCollectionOfObjectValues<Permission>("permissions", driveItem.permissions, );
        writer.writeObjectValue<Photo>("photo", driveItem.photo, );
        writer.writeObjectValue<PublicationFacet>("publication", driveItem.publication, );
        writer.writeObjectValue<RemoteItem>("remoteItem", driveItem.remoteItem, );
        writer.writeObjectValue<Root>("root", driveItem.root, );
        writer.writeObjectValue<SearchResult>("searchResult", driveItem.searchResult, );
        writer.writeObjectValue<Shared>("shared", driveItem.shared, );
        writer.writeObjectValue<SharepointIds>("sharepointIds", driveItem.sharepointIds, );
        writer.writeNumberValue("size", driveItem.size);
        writer.writeObjectValue<SpecialFolder>("specialFolder", driveItem.specialFolder, );
        writer.writeCollectionOfObjectValues<Subscription>("subscriptions", driveItem.subscriptions, );
        writer.writeCollectionOfObjectValues<ThumbnailSet>("thumbnails", driveItem.thumbnails, );
        writer.writeCollectionOfObjectValues<DriveItemVersion>("versions", driveItem.versions, );
        writer.writeObjectValue<Video>("video", driveItem.video, );
        writer.writeStringValue("webDavUrl", driveItem.webDavUrl);
        writer.writeObjectValue<Workbook>("workbook", driveItem.workbook, );
}
// tslint:enable
// eslint-enable
