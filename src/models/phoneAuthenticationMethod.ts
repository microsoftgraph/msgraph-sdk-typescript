// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAuthenticationMethod, serializeAuthenticationMethod, type AuthenticationMethod } from './authenticationMethod';
import { AuthenticationMethodSignInState } from './authenticationMethodSignInState';
import { AuthenticationPhoneType } from './authenticationPhoneType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPhoneAuthenticationMethodFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPhoneAuthenticationMethod;
}
export function deserializeIntoPhoneAuthenticationMethod(phoneAuthenticationMethod: PhoneAuthenticationMethod | undefined = {} as PhoneAuthenticationMethod) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuthenticationMethod(phoneAuthenticationMethod),
        "phoneNumber": n => { phoneAuthenticationMethod.phoneNumber = n.getStringValue(); },
        "phoneType": n => { phoneAuthenticationMethod.phoneType = n.getEnumValue<AuthenticationPhoneType>(AuthenticationPhoneType); },
        "smsSignInState": n => { phoneAuthenticationMethod.smsSignInState = n.getEnumValue<AuthenticationMethodSignInState>(AuthenticationMethodSignInState); },
    }
}
export interface PhoneAuthenticationMethod extends AuthenticationMethod, Parsable {
    /**
     * The phone number to text or call for authentication. Phone numbers use the format +{country code} {number}x{extension}, with extension optional. For example, +1 5555551234 or +1 5555551234x123 are valid. Numbers are rejected when creating or updating if they don't match the required format.
     */
    phoneNumber?: string;
    /**
     * The type of this phone. Possible values are: mobile, alternateMobile, or office.
     */
    phoneType?: AuthenticationPhoneType;
    /**
     * Whether a phone is ready to be used for SMS sign-in or not. Possible values are: notSupported, notAllowedByPolicy, notEnabled, phoneNumberNotUnique, ready, or notConfigured, unknownFutureValue.
     */
    smsSignInState?: AuthenticationMethodSignInState;
}
export function serializePhoneAuthenticationMethod(writer: SerializationWriter, phoneAuthenticationMethod: PhoneAuthenticationMethod | undefined = {} as PhoneAuthenticationMethod) : void {
    serializeAuthenticationMethod(writer, phoneAuthenticationMethod)
    writer.writeStringValue("phoneNumber", phoneAuthenticationMethod.phoneNumber);
    writer.writeEnumValue<AuthenticationPhoneType>("phoneType", phoneAuthenticationMethod.phoneType);
    writer.writeEnumValue<AuthenticationMethodSignInState>("smsSignInState", phoneAuthenticationMethod.smsSignInState);
}
// tslint:enable
// eslint-enable
