import {ActivityBasedTimeoutPolicy} from './activityBasedTimeoutPolicy';
import {AdminConsentRequestPolicy} from './adminConsentRequestPolicy';
import {AppManagementPolicy} from './appManagementPolicy';
import {AuthenticationFlowsPolicy} from './authenticationFlowsPolicy';
import {AuthenticationMethodsPolicy} from './authenticationMethodsPolicy';
import {AuthenticationStrengthPolicy} from './authenticationStrengthPolicy';
import {AuthorizationPolicy} from './authorizationPolicy';
import {ClaimsMappingPolicy} from './claimsMappingPolicy';
import {ConditionalAccessPolicy} from './conditionalAccessPolicy';
import {CrossTenantAccessPolicy} from './crossTenantAccessPolicy';
import {FeatureRolloutPolicy} from './featureRolloutPolicy';
import {HomeRealmDiscoveryPolicy} from './homeRealmDiscoveryPolicy';
import {IdentitySecurityDefaultsEnforcementPolicy} from './identitySecurityDefaultsEnforcementPolicy';
import {PermissionGrantPolicy} from './permissionGrantPolicy';
import {PolicyRoot} from './policyRoot';
import {serializeActivityBasedTimeoutPolicy} from './serializeActivityBasedTimeoutPolicy';
import {serializeAdminConsentRequestPolicy} from './serializeAdminConsentRequestPolicy';
import {serializeAppManagementPolicy} from './serializeAppManagementPolicy';
import {serializeAuthenticationFlowsPolicy} from './serializeAuthenticationFlowsPolicy';
import {serializeAuthenticationMethodsPolicy} from './serializeAuthenticationMethodsPolicy';
import {serializeAuthenticationStrengthPolicy} from './serializeAuthenticationStrengthPolicy';
import {serializeAuthorizationPolicy} from './serializeAuthorizationPolicy';
import {serializeClaimsMappingPolicy} from './serializeClaimsMappingPolicy';
import {serializeConditionalAccessPolicy} from './serializeConditionalAccessPolicy';
import {serializeCrossTenantAccessPolicy} from './serializeCrossTenantAccessPolicy';
import {serializeEntity} from './serializeEntity';
import {serializeFeatureRolloutPolicy} from './serializeFeatureRolloutPolicy';
import {serializeHomeRealmDiscoveryPolicy} from './serializeHomeRealmDiscoveryPolicy';
import {serializeIdentitySecurityDefaultsEnforcementPolicy} from './serializeIdentitySecurityDefaultsEnforcementPolicy';
import {serializePermissionGrantPolicy} from './serializePermissionGrantPolicy';
import {serializeTenantAppManagementPolicy} from './serializeTenantAppManagementPolicy';
import {serializeTokenIssuancePolicy} from './serializeTokenIssuancePolicy';
import {serializeTokenLifetimePolicy} from './serializeTokenLifetimePolicy';
import {serializeUnifiedRoleManagementPolicy} from './serializeUnifiedRoleManagementPolicy';
import {serializeUnifiedRoleManagementPolicyAssignment} from './serializeUnifiedRoleManagementPolicyAssignment';
import {TenantAppManagementPolicy} from './tenantAppManagementPolicy';
import {TokenIssuancePolicy} from './tokenIssuancePolicy';
import {TokenLifetimePolicy} from './tokenLifetimePolicy';
import {UnifiedRoleManagementPolicy} from './unifiedRoleManagementPolicy';
import {UnifiedRoleManagementPolicyAssignment} from './unifiedRoleManagementPolicyAssignment';
import {Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export function serializePolicyRoot(writer: SerializationWriter, policyRoot: PolicyRoot | undefined = {} as PolicyRoot) : void {
        serializeEntity(writer, policyRoot)
        writer.writeCollectionOfObjectValues<ActivityBasedTimeoutPolicy>("activityBasedTimeoutPolicies", policyRoot.activityBasedTimeoutPolicies, serializeActivityBasedTimeoutPolicy);
        writer.writeObjectValue<AdminConsentRequestPolicy>("adminConsentRequestPolicy", policyRoot.adminConsentRequestPolicy, serializeAdminConsentRequestPolicy);
        writer.writeCollectionOfObjectValues<AppManagementPolicy>("appManagementPolicies", policyRoot.appManagementPolicies, serializeAppManagementPolicy);
        writer.writeObjectValue<AuthenticationFlowsPolicy>("authenticationFlowsPolicy", policyRoot.authenticationFlowsPolicy, serializeAuthenticationFlowsPolicy);
        writer.writeObjectValue<AuthenticationMethodsPolicy>("authenticationMethodsPolicy", policyRoot.authenticationMethodsPolicy, serializeAuthenticationMethodsPolicy);
        writer.writeCollectionOfObjectValues<AuthenticationStrengthPolicy>("authenticationStrengthPolicies", policyRoot.authenticationStrengthPolicies, serializeAuthenticationStrengthPolicy);
        writer.writeObjectValue<AuthorizationPolicy>("authorizationPolicy", policyRoot.authorizationPolicy, serializeAuthorizationPolicy);
        writer.writeCollectionOfObjectValues<ClaimsMappingPolicy>("claimsMappingPolicies", policyRoot.claimsMappingPolicies, serializeClaimsMappingPolicy);
        writer.writeCollectionOfObjectValues<ConditionalAccessPolicy>("conditionalAccessPolicies", policyRoot.conditionalAccessPolicies, serializeConditionalAccessPolicy);
        writer.writeObjectValue<CrossTenantAccessPolicy>("crossTenantAccessPolicy", policyRoot.crossTenantAccessPolicy, serializeCrossTenantAccessPolicy);
        writer.writeObjectValue<TenantAppManagementPolicy>("defaultAppManagementPolicy", policyRoot.defaultAppManagementPolicy, serializeTenantAppManagementPolicy);
        writer.writeCollectionOfObjectValues<FeatureRolloutPolicy>("featureRolloutPolicies", policyRoot.featureRolloutPolicies, serializeFeatureRolloutPolicy);
        writer.writeCollectionOfObjectValues<HomeRealmDiscoveryPolicy>("homeRealmDiscoveryPolicies", policyRoot.homeRealmDiscoveryPolicies, serializeHomeRealmDiscoveryPolicy);
        writer.writeObjectValue<IdentitySecurityDefaultsEnforcementPolicy>("identitySecurityDefaultsEnforcementPolicy", policyRoot.identitySecurityDefaultsEnforcementPolicy, serializeIdentitySecurityDefaultsEnforcementPolicy);
        writer.writeCollectionOfObjectValues<PermissionGrantPolicy>("permissionGrantPolicies", policyRoot.permissionGrantPolicies, serializePermissionGrantPolicy);
        writer.writeCollectionOfObjectValues<UnifiedRoleManagementPolicy>("roleManagementPolicies", policyRoot.roleManagementPolicies, serializeUnifiedRoleManagementPolicy);
        writer.writeCollectionOfObjectValues<UnifiedRoleManagementPolicyAssignment>("roleManagementPolicyAssignments", policyRoot.roleManagementPolicyAssignments, serializeUnifiedRoleManagementPolicyAssignment);
        writer.writeCollectionOfObjectValues<TokenIssuancePolicy>("tokenIssuancePolicies", policyRoot.tokenIssuancePolicies, serializeTokenIssuancePolicy);
        writer.writeCollectionOfObjectValues<TokenLifetimePolicy>("tokenLifetimePolicies", policyRoot.tokenLifetimePolicies, serializeTokenLifetimePolicy);
}
