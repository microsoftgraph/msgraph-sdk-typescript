// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AuthenticationMethodTargetType } from './authenticationMethodTargetType';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type MicrosoftAuthenticatorAuthenticationMethodTarget, type SmsAuthenticationMethodTarget } from './index';
import { deserializeIntoMicrosoftAuthenticatorAuthenticationMethodTarget } from './microsoftAuthenticatorAuthenticationMethodTarget';
import { deserializeIntoSmsAuthenticationMethodTarget } from './smsAuthenticationMethodTarget';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthenticationMethodTarget extends Entity, Parsable {
    /**
     * Determines if the user is enforced to register the authentication method.
     */
    isRegistrationRequired?: boolean;
    /**
     * The targetType property
     */
    targetType?: AuthenticationMethodTargetType;
}
export function createAuthenticationMethodTargetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.microsoftAuthenticatorAuthenticationMethodTarget":
                    return deserializeIntoMicrosoftAuthenticatorAuthenticationMethodTarget;
                case "#microsoft.graph.smsAuthenticationMethodTarget":
                    return deserializeIntoSmsAuthenticationMethodTarget;
            }
        }
    }
    return deserializeIntoAuthenticationMethodTarget;
}
export function deserializeIntoAuthenticationMethodTarget(authenticationMethodTarget: AuthenticationMethodTarget | undefined = {} as AuthenticationMethodTarget) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(authenticationMethodTarget),
        "isRegistrationRequired": n => { authenticationMethodTarget.isRegistrationRequired = n.getBooleanValue(); },
        "targetType": n => { authenticationMethodTarget.targetType = n.getEnumValue<AuthenticationMethodTargetType>(AuthenticationMethodTargetType); },
    }
}
export function serializeAuthenticationMethodTarget(writer: SerializationWriter, authenticationMethodTarget: AuthenticationMethodTarget | undefined = {} as AuthenticationMethodTarget) : void {
    serializeEntity(writer, authenticationMethodTarget)
    writer.writeBooleanValue("isRegistrationRequired", authenticationMethodTarget.isRegistrationRequired);
    writer.writeEnumValue<AuthenticationMethodTargetType>("targetType", authenticationMethodTarget.targetType);
}
// tslint:enable
// eslint-enable
