// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVppLicensingTypeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoVppLicensingType;
}
export function deserializeIntoVppLicensingType(vppLicensingType: VppLicensingType | undefined = {} as VppLicensingType) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { vppLicensingType.odataType = n.getStringValue(); },
        "supportsDeviceLicensing": n => { vppLicensingType.supportsDeviceLicensing = n.getBooleanValue(); },
        "supportsUserLicensing": n => { vppLicensingType.supportsUserLicensing = n.getBooleanValue(); },
    }
}
export function serializeVppLicensingType(writer: SerializationWriter, vppLicensingType: VppLicensingType | undefined = {} as VppLicensingType) : void {
        writer.writeStringValue("@odata.type", vppLicensingType.odataType);
        writer.writeBooleanValue("supportsDeviceLicensing", vppLicensingType.supportsDeviceLicensing);
        writer.writeBooleanValue("supportsUserLicensing", vppLicensingType.supportsUserLicensing);
        writer.writeAdditionalData(vppLicensingType.additionalData);
}
export interface VppLicensingType extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Whether the program supports the device licensing type.
     */
    supportsDeviceLicensing?: boolean;
    /**
     * Whether the program supports the user licensing type.
     */
    supportsUserLicensing?: boolean;
}
// tslint:enable
// eslint-enable
