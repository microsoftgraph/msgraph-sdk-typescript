// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAccessPackageCatalogFromDiscriminatorValue, serializeAccessPackageCatalog, type AccessPackageCatalog } from './accessPackageCatalog';
import { AccessPackageRequestState } from './accessPackageRequestState';
import { AccessPackageRequestType } from './accessPackageRequestType';
import { createAccessPackageResourceFromDiscriminatorValue, serializeAccessPackageResource, type AccessPackageResource } from './accessPackageResource';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageResourceRequest extends Entity, Parsable {
    /**
     * The catalog property
     */
    catalog?: AccessPackageCatalog;
    /**
     * The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    createdDateTime?: Date;
    /**
     * The type of the request. Use adminAdd to add a resource, if the caller is an administrator or resource owner, adminUpdate to update a resource, or adminRemove to remove a resource.
     */
    requestType?: AccessPackageRequestType;
    /**
     * The resource property
     */
    resource?: AccessPackageResource;
    /**
     * The outcome of whether the service was able to add the resource to the catalog.  The value is delivered if the resource was added or removed, and deliveryFailed if it could not be added or removed. Read-only.
     */
    state?: AccessPackageRequestState;
}
export function createAccessPackageResourceRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessPackageResourceRequest;
}
export function deserializeIntoAccessPackageResourceRequest(accessPackageResourceRequest: AccessPackageResourceRequest | undefined = {} as AccessPackageResourceRequest) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(accessPackageResourceRequest),
        "catalog": n => { accessPackageResourceRequest.catalog = n.getObjectValue<AccessPackageCatalog>(createAccessPackageCatalogFromDiscriminatorValue); },
        "createdDateTime": n => { accessPackageResourceRequest.createdDateTime = n.getDateValue(); },
        "requestType": n => { accessPackageResourceRequest.requestType = n.getEnumValue<AccessPackageRequestType>(AccessPackageRequestType); },
        "resource": n => { accessPackageResourceRequest.resource = n.getObjectValue<AccessPackageResource>(createAccessPackageResourceFromDiscriminatorValue); },
        "state": n => { accessPackageResourceRequest.state = n.getEnumValue<AccessPackageRequestState>(AccessPackageRequestState); },
    }
}
export function serializeAccessPackageResourceRequest(writer: SerializationWriter, accessPackageResourceRequest: AccessPackageResourceRequest | undefined = {} as AccessPackageResourceRequest) : void {
        serializeEntity(writer, accessPackageResourceRequest)
        writer.writeObjectValue<AccessPackageCatalog>("catalog", accessPackageResourceRequest.catalog, serializeAccessPackageCatalog);
        writer.writeDateValue("createdDateTime", accessPackageResourceRequest.createdDateTime);
        writer.writeEnumValue<AccessPackageRequestType>("requestType", accessPackageResourceRequest.requestType);
        writer.writeObjectValue<AccessPackageResource>("resource", accessPackageResourceRequest.resource, serializeAccessPackageResource);
        writer.writeEnumValue<AccessPackageRequestState>("state", accessPackageResourceRequest.state);
}
// tslint:enable
// eslint-enable
