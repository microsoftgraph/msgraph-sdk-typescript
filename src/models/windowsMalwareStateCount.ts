// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { WindowsMalwareThreatState } from './windowsMalwareThreatState';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindowsMalwareStateCountFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindowsMalwareStateCount;
}
export function deserializeIntoWindowsMalwareStateCount(windowsMalwareStateCount: WindowsMalwareStateCount | undefined = {} as WindowsMalwareStateCount) : Record<string, (node: ParseNode) => void> {
    return {
        "deviceCount": n => { windowsMalwareStateCount.deviceCount = n.getNumberValue(); },
        "distinctMalwareCount": n => { windowsMalwareStateCount.distinctMalwareCount = n.getNumberValue(); },
        "lastUpdateDateTime": n => { windowsMalwareStateCount.lastUpdateDateTime = n.getDateValue(); },
        "malwareDetectionCount": n => { windowsMalwareStateCount.malwareDetectionCount = n.getNumberValue(); },
        "@odata.type": n => { windowsMalwareStateCount.odataType = n.getStringValue(); },
        "state": n => { windowsMalwareStateCount.state = n.getEnumValue<WindowsMalwareThreatState>(WindowsMalwareThreatState); },
    }
}
export function serializeWindowsMalwareStateCount(writer: SerializationWriter, windowsMalwareStateCount: WindowsMalwareStateCount | undefined = {} as WindowsMalwareStateCount) : void {
    writer.writeNumberValue("deviceCount", windowsMalwareStateCount.deviceCount);
    writer.writeNumberValue("distinctMalwareCount", windowsMalwareStateCount.distinctMalwareCount);
    writer.writeDateValue("lastUpdateDateTime", windowsMalwareStateCount.lastUpdateDateTime);
    writer.writeNumberValue("malwareDetectionCount", windowsMalwareStateCount.malwareDetectionCount);
    writer.writeStringValue("@odata.type", windowsMalwareStateCount.odataType);
    writer.writeEnumValue<WindowsMalwareThreatState>("state", windowsMalwareStateCount.state);
    writer.writeAdditionalData(windowsMalwareStateCount.additionalData);
}
export interface WindowsMalwareStateCount extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Count of devices with malware detections for this malware State
     */
    deviceCount?: number;
    /**
     * Count of distinct malwares for this malware State. Valid values -2147483648 to 2147483647
     */
    distinctMalwareCount?: number;
    /**
     * The Timestamp of the last update for the device count in UTC
     */
    lastUpdateDateTime?: Date;
    /**
     * Count of total malware detections for this malware State. Valid values -2147483648 to 2147483647
     */
    malwareDetectionCount?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Malware threat status
     */
    state?: WindowsMalwareThreatState;
}
// tslint:enable
// eslint-enable
