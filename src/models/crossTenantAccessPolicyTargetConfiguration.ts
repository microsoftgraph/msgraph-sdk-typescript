// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCrossTenantAccessPolicyTargetFromDiscriminatorValue, serializeCrossTenantAccessPolicyTarget, type CrossTenantAccessPolicyTarget } from './crossTenantAccessPolicyTarget';
import { CrossTenantAccessPolicyTargetConfigurationAccessType } from './crossTenantAccessPolicyTargetConfigurationAccessType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCrossTenantAccessPolicyTargetConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCrossTenantAccessPolicyTargetConfiguration;
}
export interface CrossTenantAccessPolicyTargetConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Defines whether access is allowed or blocked. The possible values are: allowed, blocked, unknownFutureValue.
     */
    accessType?: CrossTenantAccessPolicyTargetConfigurationAccessType;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies whether to target users, groups, or applications with this rule.
     */
    targets?: CrossTenantAccessPolicyTarget[];
}
export function deserializeIntoCrossTenantAccessPolicyTargetConfiguration(crossTenantAccessPolicyTargetConfiguration: CrossTenantAccessPolicyTargetConfiguration | undefined = {} as CrossTenantAccessPolicyTargetConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        "accessType": n => { crossTenantAccessPolicyTargetConfiguration.accessType = n.getEnumValue<CrossTenantAccessPolicyTargetConfigurationAccessType>(CrossTenantAccessPolicyTargetConfigurationAccessType); },
        "@odata.type": n => { crossTenantAccessPolicyTargetConfiguration.odataType = n.getStringValue(); },
        "targets": n => { crossTenantAccessPolicyTargetConfiguration.targets = n.getCollectionOfObjectValues<CrossTenantAccessPolicyTarget>(createCrossTenantAccessPolicyTargetFromDiscriminatorValue); },
    }
}
export function serializeCrossTenantAccessPolicyTargetConfiguration(writer: SerializationWriter, crossTenantAccessPolicyTargetConfiguration: CrossTenantAccessPolicyTargetConfiguration | undefined = {} as CrossTenantAccessPolicyTargetConfiguration) : void {
        writer.writeEnumValue<CrossTenantAccessPolicyTargetConfigurationAccessType>("accessType", crossTenantAccessPolicyTargetConfiguration.accessType);
        writer.writeStringValue("@odata.type", crossTenantAccessPolicyTargetConfiguration.odataType);
        writer.writeCollectionOfObjectValues<CrossTenantAccessPolicyTarget>("targets", crossTenantAccessPolicyTargetConfiguration.targets, );
        writer.writeAdditionalData(crossTenantAccessPolicyTargetConfiguration.additionalData);
}
// tslint:enable
// eslint-enable
