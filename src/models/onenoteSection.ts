// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createNotebookFromDiscriminatorValue, serializeNotebook, type Notebook } from './notebook';
import { deserializeIntoOnenoteEntityHierarchyModel, serializeOnenoteEntityHierarchyModel, type OnenoteEntityHierarchyModel } from './onenoteEntityHierarchyModel';
import { createOnenotePageFromDiscriminatorValue, serializeOnenotePage, type OnenotePage } from './onenotePage';
import { createSectionGroupFromDiscriminatorValue, serializeSectionGroup, type SectionGroup } from './sectionGroup';
import { createSectionLinksFromDiscriminatorValue, serializeSectionLinks, type SectionLinks } from './sectionLinks';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOnenoteSectionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOnenoteSection;
}
export function deserializeIntoOnenoteSection(onenoteSection: OnenoteSection | undefined = {} as OnenoteSection) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOnenoteEntityHierarchyModel(onenoteSection),
        "isDefault": n => { onenoteSection.isDefault = n.getBooleanValue(); },
        "links": n => { onenoteSection.links = n.getObjectValue<SectionLinks>(createSectionLinksFromDiscriminatorValue); },
        "pages": n => { onenoteSection.pages = n.getCollectionOfObjectValues<OnenotePage>(createOnenotePageFromDiscriminatorValue); },
        "pagesUrl": n => { onenoteSection.pagesUrl = n.getStringValue(); },
        "parentNotebook": n => { onenoteSection.parentNotebook = n.getObjectValue<Notebook>(createNotebookFromDiscriminatorValue); },
        "parentSectionGroup": n => { onenoteSection.parentSectionGroup = n.getObjectValue<SectionGroup>(createSectionGroupFromDiscriminatorValue); },
    }
}
export interface OnenoteSection extends OnenoteEntityHierarchyModel, Parsable {
    /**
     * Indicates whether this is the user's default section. Read-only.
     */
    isDefault?: boolean;
    /**
     * Links for opening the section. The oneNoteClientURL link opens the section in the OneNote native client if it's installed. The oneNoteWebURL link opens the section in OneNote on the web.
     */
    links?: SectionLinks;
    /**
     * The collection of pages in the section.  Read-only. Nullable.
     */
    pages?: OnenotePage[];
    /**
     * The pages endpoint where you can get details for all the pages in the section. Read-only.
     */
    pagesUrl?: string;
    /**
     * The notebook that contains the section.  Read-only.
     */
    parentNotebook?: Notebook;
    /**
     * The section group that contains the section.  Read-only.
     */
    parentSectionGroup?: SectionGroup;
}
export function serializeOnenoteSection(writer: SerializationWriter, onenoteSection: OnenoteSection | undefined = {} as OnenoteSection) : void {
    serializeOnenoteEntityHierarchyModel(writer, onenoteSection)
    writer.writeBooleanValue("isDefault", onenoteSection.isDefault);
    writer.writeObjectValue<SectionLinks>("links", onenoteSection.links, serializeSectionLinks);
    writer.writeCollectionOfObjectValues<OnenotePage>("pages", onenoteSection.pages, serializeOnenotePage);
    writer.writeStringValue("pagesUrl", onenoteSection.pagesUrl);
    writer.writeObjectValue<Notebook>("parentNotebook", onenoteSection.parentNotebook, serializeNotebook);
    writer.writeObjectValue<SectionGroup>("parentSectionGroup", onenoteSection.parentSectionGroup, serializeSectionGroup);
}
// tslint:enable
// eslint-enable
