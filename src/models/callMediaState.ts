// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { MediaState } from './mediaState';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CallMediaState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The audio media state. Possible values are: active, inactive, unknownFutureValue.
     */
    audio?: MediaState;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createCallMediaStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCallMediaState;
}
export function deserializeIntoCallMediaState(callMediaState: CallMediaState | undefined = {} as CallMediaState) : Record<string, (node: ParseNode) => void> {
    return {
        "audio": n => { callMediaState.audio = n.getEnumValue<MediaState>(MediaState); },
        "@odata.type": n => { callMediaState.odataType = n.getStringValue(); },
    }
}
export function serializeCallMediaState(writer: SerializationWriter, callMediaState: CallMediaState | undefined = {} as CallMediaState) : void {
        writer.writeEnumValue<MediaState>("audio", callMediaState.audio);
        writer.writeStringValue("@odata.type", callMediaState.odataType);
        writer.writeAdditionalData(callMediaState.additionalData);
}
// tslint:enable
// eslint-enable
