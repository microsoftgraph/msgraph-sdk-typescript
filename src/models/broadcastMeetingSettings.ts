// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { BroadcastMeetingAudience } from './broadcastMeetingAudience';
import { createBroadcastMeetingCaptionSettingsFromDiscriminatorValue, serializeBroadcastMeetingCaptionSettings, type BroadcastMeetingCaptionSettings } from './broadcastMeetingCaptionSettings';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BroadcastMeetingSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Defines who can join the Teams live event. Possible values are listed in the following table.
     */
    allowedAudience?: BroadcastMeetingAudience;
    /**
     * Caption settings of a Teams live event.
     */
    captions?: BroadcastMeetingCaptionSettings;
    /**
     * Indicates whether attendee report is enabled for this Teams live event. Default value is false.
     */
    isAttendeeReportEnabled?: boolean;
    /**
     * Indicates whether Q&A is enabled for this Teams live event. Default value is false.
     */
    isQuestionAndAnswerEnabled?: boolean;
    /**
     * Indicates whether recording is enabled for this Teams live event. Default value is false.
     */
    isRecordingEnabled?: boolean;
    /**
     * Indicates whether video on demand is enabled for this Teams live event. Default value is false.
     */
    isVideoOnDemandEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createBroadcastMeetingSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBroadcastMeetingSettings;
}
export function deserializeIntoBroadcastMeetingSettings(broadcastMeetingSettings: BroadcastMeetingSettings | undefined = {} as BroadcastMeetingSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "allowedAudience": n => { broadcastMeetingSettings.allowedAudience = n.getEnumValue<BroadcastMeetingAudience>(BroadcastMeetingAudience); },
        "captions": n => { broadcastMeetingSettings.captions = n.getObjectValue<BroadcastMeetingCaptionSettings>(createBroadcastMeetingCaptionSettingsFromDiscriminatorValue); },
        "isAttendeeReportEnabled": n => { broadcastMeetingSettings.isAttendeeReportEnabled = n.getBooleanValue(); },
        "isQuestionAndAnswerEnabled": n => { broadcastMeetingSettings.isQuestionAndAnswerEnabled = n.getBooleanValue(); },
        "isRecordingEnabled": n => { broadcastMeetingSettings.isRecordingEnabled = n.getBooleanValue(); },
        "isVideoOnDemandEnabled": n => { broadcastMeetingSettings.isVideoOnDemandEnabled = n.getBooleanValue(); },
        "@odata.type": n => { broadcastMeetingSettings.odataType = n.getStringValue(); },
    }
}
export function serializeBroadcastMeetingSettings(writer: SerializationWriter, broadcastMeetingSettings: BroadcastMeetingSettings | undefined = {} as BroadcastMeetingSettings) : void {
    writer.writeEnumValue<BroadcastMeetingAudience>("allowedAudience", broadcastMeetingSettings.allowedAudience);
    writer.writeObjectValue<BroadcastMeetingCaptionSettings>("captions", broadcastMeetingSettings.captions, serializeBroadcastMeetingCaptionSettings);
    writer.writeBooleanValue("isAttendeeReportEnabled", broadcastMeetingSettings.isAttendeeReportEnabled);
    writer.writeBooleanValue("isQuestionAndAnswerEnabled", broadcastMeetingSettings.isQuestionAndAnswerEnabled);
    writer.writeBooleanValue("isRecordingEnabled", broadcastMeetingSettings.isRecordingEnabled);
    writer.writeBooleanValue("isVideoOnDemandEnabled", broadcastMeetingSettings.isVideoOnDemandEnabled);
    writer.writeStringValue("@odata.type", broadcastMeetingSettings.odataType);
    writer.writeAdditionalData(broadcastMeetingSettings.additionalData);
}
// tslint:enable
// eslint-enable
