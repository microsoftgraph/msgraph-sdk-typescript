// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFolderViewFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFolderView;
}
export function deserializeIntoFolderView(folderView: FolderView | undefined = {} as FolderView) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { folderView.odataType = n.getStringValue(); },
        "sortBy": n => { folderView.sortBy = n.getStringValue(); },
        "sortOrder": n => { folderView.sortOrder = n.getStringValue(); },
        "viewType": n => { folderView.viewType = n.getStringValue(); },
    }
}
export interface FolderView extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The method by which the folder should be sorted.
     */
    sortBy?: string;
    /**
     * If true, indicates that items should be sorted in descending order. Otherwise, items should be sorted ascending.
     */
    sortOrder?: string;
    /**
     * The type of view that should be used to represent the folder.
     */
    viewType?: string;
}
export function serializeFolderView(writer: SerializationWriter, folderView: FolderView | undefined = {} as FolderView) : void {
    writer.writeStringValue("@odata.type", folderView.odataType);
    writer.writeStringValue("sortBy", folderView.sortBy);
    writer.writeStringValue("sortOrder", folderView.sortOrder);
    writer.writeStringValue("viewType", folderView.viewType);
    writer.writeAdditionalData(folderView.additionalData);
}
// tslint:enable
// eslint-enable
