// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAccessPackageLocalizedTextFromDiscriminatorValue, serializeAccessPackageLocalizedText, type AccessPackageLocalizedText } from './accessPackageLocalizedText';
import { deserializeIntoAccessPackageMultipleChoiceQuestion } from './accessPackageMultipleChoiceQuestion';
import { deserializeIntoAccessPackageTextInputQuestion } from './accessPackageTextInputQuestion';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type AccessPackageMultipleChoiceQuestion, type AccessPackageTextInputQuestion } from './index';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageQuestion extends Entity, Parsable {
    /**
     * Specifies whether the requestor is allowed to edit answers to questions for an assignment by posting an update to accessPackageAssignmentRequest.
     */
    isAnswerEditable?: boolean;
    /**
     * Whether the requestor is required to supply an answer or not.
     */
    isRequired?: boolean;
    /**
     * The text of the question represented in a format for a specific locale.
     */
    localizations?: AccessPackageLocalizedText[];
    /**
     * Relative position of this question when displaying a list of questions to the requestor.
     */
    sequence?: number;
    /**
     * The text of the question to show to the requestor.
     */
    text?: string;
}
export function createAccessPackageQuestionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.accessPackageMultipleChoiceQuestion":
                    return deserializeIntoAccessPackageMultipleChoiceQuestion;
                case "#microsoft.graph.accessPackageTextInputQuestion":
                    return deserializeIntoAccessPackageTextInputQuestion;
            }
        }
    }
    return deserializeIntoAccessPackageQuestion;
}
export function deserializeIntoAccessPackageQuestion(accessPackageQuestion: AccessPackageQuestion | undefined = {} as AccessPackageQuestion) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(accessPackageQuestion),
        "isAnswerEditable": n => { accessPackageQuestion.isAnswerEditable = n.getBooleanValue(); },
        "isRequired": n => { accessPackageQuestion.isRequired = n.getBooleanValue(); },
        "localizations": n => { accessPackageQuestion.localizations = n.getCollectionOfObjectValues<AccessPackageLocalizedText>(createAccessPackageLocalizedTextFromDiscriminatorValue); },
        "sequence": n => { accessPackageQuestion.sequence = n.getNumberValue(); },
        "text": n => { accessPackageQuestion.text = n.getStringValue(); },
    }
}
export function serializeAccessPackageQuestion(writer: SerializationWriter, accessPackageQuestion: AccessPackageQuestion | undefined = {} as AccessPackageQuestion) : void {
        serializeEntity(writer, accessPackageQuestion)
        writer.writeBooleanValue("isAnswerEditable", accessPackageQuestion.isAnswerEditable);
        writer.writeBooleanValue("isRequired", accessPackageQuestion.isRequired);
        writer.writeCollectionOfObjectValues<AccessPackageLocalizedText>("localizations", accessPackageQuestion.localizations, serializeAccessPackageLocalizedText);
        writer.writeNumberValue("sequence", accessPackageQuestion.sequence);
        writer.writeStringValue("text", accessPackageQuestion.text);
}
// tslint:enable
// eslint-enable
