// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createImageInfoFromDiscriminatorValue, serializeImageInfo, type ImageInfo } from './imageInfo';
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from './json';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVisualInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoVisualInfo;
}
export function deserializeIntoVisualInfo(visualInfo: VisualInfo | undefined = {} as VisualInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "attribution": n => { visualInfo.attribution = n.getObjectValue<ImageInfo>(createImageInfoFromDiscriminatorValue); },
        "backgroundColor": n => { visualInfo.backgroundColor = n.getStringValue(); },
        "content": n => { visualInfo.content = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "description": n => { visualInfo.description = n.getStringValue(); },
        "displayText": n => { visualInfo.displayText = n.getStringValue(); },
        "@odata.type": n => { visualInfo.odataType = n.getStringValue(); },
    }
}
export function serializeVisualInfo(writer: SerializationWriter, visualInfo: VisualInfo | undefined = {} as VisualInfo) : void {
    writer.writeObjectValue<ImageInfo>("attribution", visualInfo.attribution, serializeImageInfo);
    writer.writeStringValue("backgroundColor", visualInfo.backgroundColor);
    writer.writeObjectValue<Json>("content", visualInfo.content, serializeJson);
    writer.writeStringValue("description", visualInfo.description);
    writer.writeStringValue("displayText", visualInfo.displayText);
    writer.writeStringValue("@odata.type", visualInfo.odataType);
    writer.writeAdditionalData(visualInfo.additionalData);
}
export interface VisualInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Optional. JSON object used to represent an icon which represents the application used to generate the activity
     */
    attribution?: ImageInfo;
    /**
     * Optional. Background color used to render the activity in the UI - brand color for the application source of the activity. Must be a valid hex color
     */
    backgroundColor?: string;
    /**
     * Optional. Custom piece of data - JSON object used to provide custom content to render the activity in the Windows Shell UI
     */
    content?: Json;
    /**
     * Optional. Longer text description of the user's unique activity (example: document name, first sentence, and/or metadata)
     */
    description?: string;
    /**
     * Required. Short text description of the user's unique activity (for example, document name in cases where an activity refers to document creation)
     */
    displayText?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:enable
// eslint-enable
