// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { BrowserSharedCookieSourceEnvironment } from './browserSharedCookieSourceEnvironment';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BrowserSharedCookieHistory extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The comment for the shared cookie.
     */
    comment?: string;
    /**
     * The name of the cookie.
     */
    displayName?: string;
    /**
     * Controls whether a cookie is a host-only or domain cookie.
     */
    hostOnly?: boolean;
    /**
     * The URL of the cookie.
     */
    hostOrDomain?: string;
    /**
     * The lastModifiedBy property
     */
    lastModifiedBy?: IdentitySet;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The path of the cookie.
     */
    path?: string;
    /**
     * The date and time when the cookie was last published.
     */
    publishedDateTime?: Date;
    /**
     * Specifies how the cookies are shared between Microsoft Edge and Internet Explorer. The possible values are: microsoftEdge, internetExplorer11, both, unknownFutureValue.
     */
    sourceEnvironment?: BrowserSharedCookieSourceEnvironment;
}
export function createBrowserSharedCookieHistoryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBrowserSharedCookieHistory;
}
export function deserializeIntoBrowserSharedCookieHistory(browserSharedCookieHistory: BrowserSharedCookieHistory | undefined = {} as BrowserSharedCookieHistory) : Record<string, (node: ParseNode) => void> {
    return {
        "comment": n => { browserSharedCookieHistory.comment = n.getStringValue(); },
        "displayName": n => { browserSharedCookieHistory.displayName = n.getStringValue(); },
        "hostOnly": n => { browserSharedCookieHistory.hostOnly = n.getBooleanValue(); },
        "hostOrDomain": n => { browserSharedCookieHistory.hostOrDomain = n.getStringValue(); },
        "lastModifiedBy": n => { browserSharedCookieHistory.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "@odata.type": n => { browserSharedCookieHistory.odataType = n.getStringValue(); },
        "path": n => { browserSharedCookieHistory.path = n.getStringValue(); },
        "publishedDateTime": n => { browserSharedCookieHistory.publishedDateTime = n.getDateValue(); },
        "sourceEnvironment": n => { browserSharedCookieHistory.sourceEnvironment = n.getEnumValue<BrowserSharedCookieSourceEnvironment>(BrowserSharedCookieSourceEnvironment); },
    }
}
export function serializeBrowserSharedCookieHistory(writer: SerializationWriter, browserSharedCookieHistory: BrowserSharedCookieHistory | undefined = {} as BrowserSharedCookieHistory) : void {
        writer.writeStringValue("comment", browserSharedCookieHistory.comment);
        writer.writeStringValue("displayName", browserSharedCookieHistory.displayName);
        writer.writeBooleanValue("hostOnly", browserSharedCookieHistory.hostOnly);
        writer.writeStringValue("hostOrDomain", browserSharedCookieHistory.hostOrDomain);
        writer.writeObjectValue<IdentitySet>("lastModifiedBy", browserSharedCookieHistory.lastModifiedBy, serializeIdentitySet);
        writer.writeStringValue("@odata.type", browserSharedCookieHistory.odataType);
        writer.writeStringValue("path", browserSharedCookieHistory.path);
        writer.writeDateValue("publishedDateTime", browserSharedCookieHistory.publishedDateTime);
        writer.writeEnumValue<BrowserSharedCookieSourceEnvironment>("sourceEnvironment", browserSharedCookieHistory.sourceEnvironment);
        writer.writeAdditionalData(browserSharedCookieHistory.additionalData);
}
// tslint:enable
// eslint-enable
