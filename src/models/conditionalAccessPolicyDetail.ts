// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConditionalAccessConditionSetFromDiscriminatorValue, serializeConditionalAccessConditionSet, type ConditionalAccessConditionSet } from './conditionalAccessConditionSet';
import { createConditionalAccessGrantControlsFromDiscriminatorValue, serializeConditionalAccessGrantControls, type ConditionalAccessGrantControls } from './conditionalAccessGrantControls';
import { createConditionalAccessSessionControlsFromDiscriminatorValue, serializeConditionalAccessSessionControls, type ConditionalAccessSessionControls } from './conditionalAccessSessionControls';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessPolicyDetail extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The conditions property
     */
    conditions?: ConditionalAccessConditionSet;
    /**
     * Represents grant controls that must be fulfilled for the policy.
     */
    grantControls?: ConditionalAccessGrantControls;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Represents a complex type of session controls that is enforced after sign-in.
     */
    sessionControls?: ConditionalAccessSessionControls;
}
export function createConditionalAccessPolicyDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessPolicyDetail;
}
export function deserializeIntoConditionalAccessPolicyDetail(conditionalAccessPolicyDetail: ConditionalAccessPolicyDetail | undefined = {} as ConditionalAccessPolicyDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "conditions": n => { conditionalAccessPolicyDetail.conditions = n.getObjectValue<ConditionalAccessConditionSet>(createConditionalAccessConditionSetFromDiscriminatorValue); },
        "grantControls": n => { conditionalAccessPolicyDetail.grantControls = n.getObjectValue<ConditionalAccessGrantControls>(createConditionalAccessGrantControlsFromDiscriminatorValue); },
        "@odata.type": n => { conditionalAccessPolicyDetail.odataType = n.getStringValue(); },
        "sessionControls": n => { conditionalAccessPolicyDetail.sessionControls = n.getObjectValue<ConditionalAccessSessionControls>(createConditionalAccessSessionControlsFromDiscriminatorValue); },
    }
}
export function serializeConditionalAccessPolicyDetail(writer: SerializationWriter, conditionalAccessPolicyDetail: ConditionalAccessPolicyDetail | undefined = {} as ConditionalAccessPolicyDetail) : void {
    writer.writeObjectValue<ConditionalAccessConditionSet>("conditions", conditionalAccessPolicyDetail.conditions, serializeConditionalAccessConditionSet);
    writer.writeObjectValue<ConditionalAccessGrantControls>("grantControls", conditionalAccessPolicyDetail.grantControls, serializeConditionalAccessGrantControls);
    writer.writeStringValue("@odata.type", conditionalAccessPolicyDetail.odataType);
    writer.writeObjectValue<ConditionalAccessSessionControls>("sessionControls", conditionalAccessPolicyDetail.sessionControls, serializeConditionalAccessSessionControls);
    writer.writeAdditionalData(conditionalAccessPolicyDetail.additionalData);
}
// tslint:enable
// eslint-enable
