// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CollapseProperty extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Defines the collapse group to trim results. The properties in this collection must be sortable/refinable properties. Required.
     */
    fields?: string[];
    /**
     * Defines a maximum limit count for this field. This numeric value must be a positive integer. Required.
     */
    limit?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createCollapsePropertyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCollapseProperty;
}
export function deserializeIntoCollapseProperty(collapseProperty: CollapseProperty | undefined = {} as CollapseProperty) : Record<string, (node: ParseNode) => void> {
    return {
        "fields": n => { collapseProperty.fields = n.getCollectionOfPrimitiveValues<string>(); },
        "limit": n => { collapseProperty.limit = n.getNumberValue(); },
        "@odata.type": n => { collapseProperty.odataType = n.getStringValue(); },
    }
}
export function serializeCollapseProperty(writer: SerializationWriter, collapseProperty: CollapseProperty | undefined = {} as CollapseProperty) : void {
        writer.writeCollectionOfPrimitiveValues<string>("fields", collapseProperty.fields);
        writer.writeNumberValue("limit", collapseProperty.limit);
        writer.writeStringValue("@odata.type", collapseProperty.odataType);
        writer.writeAdditionalData(collapseProperty.additionalData);
}
// tslint:enable
// eslint-enable
