// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createResourceVisualizationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoResourceVisualization;
}
export function deserializeIntoResourceVisualization(resourceVisualization: ResourceVisualization | undefined = {} as ResourceVisualization) : Record<string, (node: ParseNode) => void> {
    return {
        "containerDisplayName": n => { resourceVisualization.containerDisplayName = n.getStringValue(); },
        "containerType": n => { resourceVisualization.containerType = n.getStringValue(); },
        "containerWebUrl": n => { resourceVisualization.containerWebUrl = n.getStringValue(); },
        "mediaType": n => { resourceVisualization.mediaType = n.getStringValue(); },
        "@odata.type": n => { resourceVisualization.odataType = n.getStringValue(); },
        "previewImageUrl": n => { resourceVisualization.previewImageUrl = n.getStringValue(); },
        "previewText": n => { resourceVisualization.previewText = n.getStringValue(); },
        "title": n => { resourceVisualization.title = n.getStringValue(); },
        "type": n => { resourceVisualization.type = n.getStringValue(); },
    }
}
export interface ResourceVisualization extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A string describing where the item is stored. For example, the name of a SharePoint site or the user name identifying the owner of the OneDrive storing the item.
     */
    containerDisplayName?: string;
    /**
     * Can be used for filtering by the type of container in which the file is stored. Such as Site or OneDriveBusiness.
     */
    containerType?: string;
    /**
     * A path leading to the folder in which the item is stored.
     */
    containerWebUrl?: string;
    /**
     * The item's media type. Can be used for filtering for a specific type of file based on supported IANA Media Mime Types. Not all Media Mime Types are supported.
     */
    mediaType?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A URL leading to the preview image for the item.
     */
    previewImageUrl?: string;
    /**
     * A preview text for the item.
     */
    previewText?: string;
    /**
     * The item's title text.
     */
    title?: string;
    /**
     * The item's media type. Can be used for filtering for a specific file based on a specific type. See the section Type property values for supported types.
     */
    type?: string;
}
export function serializeResourceVisualization(writer: SerializationWriter, resourceVisualization: ResourceVisualization | undefined = {} as ResourceVisualization) : void {
    writer.writeStringValue("containerDisplayName", resourceVisualization.containerDisplayName);
    writer.writeStringValue("containerType", resourceVisualization.containerType);
    writer.writeStringValue("containerWebUrl", resourceVisualization.containerWebUrl);
    writer.writeStringValue("mediaType", resourceVisualization.mediaType);
    writer.writeStringValue("@odata.type", resourceVisualization.odataType);
    writer.writeStringValue("previewImageUrl", resourceVisualization.previewImageUrl);
    writer.writeStringValue("previewText", resourceVisualization.previewText);
    writer.writeStringValue("title", resourceVisualization.title);
    writer.writeStringValue("type", resourceVisualization.type);
    writer.writeAdditionalData(resourceVisualization.additionalData);
}
// tslint:enable
// eslint-enable
