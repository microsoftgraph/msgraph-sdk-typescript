// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createColumnDefinitionFromDiscriminatorValue, serializeColumnDefinition, type ColumnDefinition } from './columnDefinition';
import { createContentTypeInfoFromDiscriminatorValue, serializeContentTypeInfo, type ContentTypeInfo } from './contentTypeInfo';
import { createDocumentSetContentFromDiscriminatorValue, serializeDocumentSetContent, type DocumentSetContent } from './documentSetContent';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDocumentSetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDocumentSet;
}
export function deserializeIntoDocumentSet(documentSet: DocumentSet | undefined = {} as DocumentSet) : Record<string, (node: ParseNode) => void> {
    return {
        "allowedContentTypes": n => { documentSet.allowedContentTypes = n.getCollectionOfObjectValues<ContentTypeInfo>(createContentTypeInfoFromDiscriminatorValue); },
        "defaultContents": n => { documentSet.defaultContents = n.getCollectionOfObjectValues<DocumentSetContent>(createDocumentSetContentFromDiscriminatorValue); },
        "@odata.type": n => { documentSet.odataType = n.getStringValue(); },
        "propagateWelcomePageChanges": n => { documentSet.propagateWelcomePageChanges = n.getBooleanValue(); },
        "sharedColumns": n => { documentSet.sharedColumns = n.getCollectionOfObjectValues<ColumnDefinition>(createColumnDefinitionFromDiscriminatorValue); },
        "shouldPrefixNameToFile": n => { documentSet.shouldPrefixNameToFile = n.getBooleanValue(); },
        "welcomePageColumns": n => { documentSet.welcomePageColumns = n.getCollectionOfObjectValues<ColumnDefinition>(createColumnDefinitionFromDiscriminatorValue); },
        "welcomePageUrl": n => { documentSet.welcomePageUrl = n.getStringValue(); },
    }
}
export interface DocumentSet extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Content types allowed in document set.
     */
    allowedContentTypes?: ContentTypeInfo[];
    /**
     * Default contents of document set.
     */
    defaultContents?: DocumentSetContent[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specifies whether to push welcome page changes to inherited content types.
     */
    propagateWelcomePageChanges?: boolean;
    /**
     * The sharedColumns property
     */
    sharedColumns?: ColumnDefinition[];
    /**
     * Indicates whether to add the name of the document set to each file name.
     */
    shouldPrefixNameToFile?: boolean;
    /**
     * The welcomePageColumns property
     */
    welcomePageColumns?: ColumnDefinition[];
    /**
     * Welcome page absolute URL.
     */
    welcomePageUrl?: string;
}
export function serializeDocumentSet(writer: SerializationWriter, documentSet: DocumentSet | undefined = {} as DocumentSet) : void {
    writer.writeCollectionOfObjectValues<ContentTypeInfo>("allowedContentTypes", documentSet.allowedContentTypes, serializeContentTypeInfo);
    writer.writeCollectionOfObjectValues<DocumentSetContent>("defaultContents", documentSet.defaultContents, serializeDocumentSetContent);
    writer.writeStringValue("@odata.type", documentSet.odataType);
    writer.writeBooleanValue("propagateWelcomePageChanges", documentSet.propagateWelcomePageChanges);
    writer.writeCollectionOfObjectValues<ColumnDefinition>("sharedColumns", documentSet.sharedColumns, serializeColumnDefinition);
    writer.writeBooleanValue("shouldPrefixNameToFile", documentSet.shouldPrefixNameToFile);
    writer.writeCollectionOfObjectValues<ColumnDefinition>("welcomePageColumns", documentSet.welcomePageColumns, serializeColumnDefinition);
    writer.writeStringValue("welcomePageUrl", documentSet.welcomePageUrl);
    writer.writeAdditionalData(documentSet.additionalData);
}
// tslint:enable
// eslint-enable
