// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AppliedConditionalAccessPolicyResult } from './appliedConditionalAccessPolicyResult';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AppliedConditionalAccessPolicy extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Refers to the Name of the conditional access policy (example: 'Require MFA for Salesforce').
     */
    displayName?: string;
    /**
     * Refers to the grant controls enforced by the conditional access policy (example: 'Require multifactor authentication').
     */
    enforcedGrantControls?: string[];
    /**
     * Refers to the session controls enforced by the conditional access policy (example: 'Require app enforced controls').
     */
    enforcedSessionControls?: string[];
    /**
     * An identifier of the conditional access policy.
     */
    id?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Indicates the result of the CA policy that was triggered. Possible values are: success, failure, notApplied (Policy isn't applied because policy conditions weren't met),notEnabled (This is due to the policy in disabled state), unknown, unknownFutureValue.
     */
    result?: AppliedConditionalAccessPolicyResult;
}
export function createAppliedConditionalAccessPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAppliedConditionalAccessPolicy;
}
export function deserializeIntoAppliedConditionalAccessPolicy(appliedConditionalAccessPolicy: AppliedConditionalAccessPolicy | undefined = {} as AppliedConditionalAccessPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { appliedConditionalAccessPolicy.displayName = n.getStringValue(); },
        "enforcedGrantControls": n => { appliedConditionalAccessPolicy.enforcedGrantControls = n.getCollectionOfPrimitiveValues<string>(); },
        "enforcedSessionControls": n => { appliedConditionalAccessPolicy.enforcedSessionControls = n.getCollectionOfPrimitiveValues<string>(); },
        "id": n => { appliedConditionalAccessPolicy.id = n.getStringValue(); },
        "@odata.type": n => { appliedConditionalAccessPolicy.odataType = n.getStringValue(); },
        "result": n => { appliedConditionalAccessPolicy.result = n.getEnumValue<AppliedConditionalAccessPolicyResult>(AppliedConditionalAccessPolicyResult); },
    }
}
export function serializeAppliedConditionalAccessPolicy(writer: SerializationWriter, appliedConditionalAccessPolicy: AppliedConditionalAccessPolicy | undefined = {} as AppliedConditionalAccessPolicy) : void {
        writer.writeStringValue("displayName", appliedConditionalAccessPolicy.displayName);
        writer.writeCollectionOfPrimitiveValues<string>("enforcedGrantControls", appliedConditionalAccessPolicy.enforcedGrantControls);
        writer.writeCollectionOfPrimitiveValues<string>("enforcedSessionControls", appliedConditionalAccessPolicy.enforcedSessionControls);
        writer.writeStringValue("id", appliedConditionalAccessPolicy.id);
        writer.writeStringValue("@odata.type", appliedConditionalAccessPolicy.odataType);
        writer.writeEnumValue<AppliedConditionalAccessPolicyResult>("result", appliedConditionalAccessPolicy.result);
        writer.writeAdditionalData(appliedConditionalAccessPolicy.additionalData);
}
// tslint:enable
// eslint-enable
