// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSharepointIdsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSharepointIds;
}
export function deserializeIntoSharepointIds(sharepointIds: SharepointIds | undefined = {} as SharepointIds) : Record<string, (node: ParseNode) => void> {
    return {
        "listId": n => { sharepointIds.listId = n.getStringValue(); },
        "listItemId": n => { sharepointIds.listItemId = n.getStringValue(); },
        "listItemUniqueId": n => { sharepointIds.listItemUniqueId = n.getStringValue(); },
        "@odata.type": n => { sharepointIds.odataType = n.getStringValue(); },
        "siteId": n => { sharepointIds.siteId = n.getStringValue(); },
        "siteUrl": n => { sharepointIds.siteUrl = n.getStringValue(); },
        "tenantId": n => { sharepointIds.tenantId = n.getStringValue(); },
        "webId": n => { sharepointIds.webId = n.getStringValue(); },
    }
}
export function serializeSharepointIds(writer: SerializationWriter, sharepointIds: SharepointIds | undefined = {} as SharepointIds) : void {
        writer.writeStringValue("listId", sharepointIds.listId);
        writer.writeStringValue("listItemId", sharepointIds.listItemId);
        writer.writeStringValue("listItemUniqueId", sharepointIds.listItemUniqueId);
        writer.writeStringValue("@odata.type", sharepointIds.odataType);
        writer.writeStringValue("siteId", sharepointIds.siteId);
        writer.writeStringValue("siteUrl", sharepointIds.siteUrl);
        writer.writeStringValue("tenantId", sharepointIds.tenantId);
        writer.writeStringValue("webId", sharepointIds.webId);
        writer.writeAdditionalData(sharepointIds.additionalData);
}
export interface SharepointIds extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The unique identifier (guid) for the item's list in SharePoint.
     */
    listId?: string;
    /**
     * An integer identifier for the item within the containing list.
     */
    listItemId?: string;
    /**
     * The unique identifier (guid) for the item within OneDrive for Business or a SharePoint site.
     */
    listItemUniqueId?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The unique identifier (guid) for the item's site collection (SPSite).
     */
    siteId?: string;
    /**
     * The SharePoint URL for the site that contains the item.
     */
    siteUrl?: string;
    /**
     * The unique identifier (guid) for the tenancy.
     */
    tenantId?: string;
    /**
     * The unique identifier (guid) for the item's site (SPWeb).
     */
    webId?: string;
}
// tslint:enable
// eslint-enable
