// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoBaseItem, serializeBaseItem, type BaseItem } from './baseItem';
import { createColumnDefinitionFromDiscriminatorValue, serializeColumnDefinition, type ColumnDefinition } from './columnDefinition';
import { createContentTypeFromDiscriminatorValue, serializeContentType, type ContentType } from './contentType';
import { createDriveFromDiscriminatorValue, serializeDrive, type Drive } from './drive';
import { createListInfoFromDiscriminatorValue, serializeListInfo, type ListInfo } from './listInfo';
import { createListItemFromDiscriminatorValue, serializeListItem, type ListItem } from './listItem';
import { createRichLongRunningOperationFromDiscriminatorValue, serializeRichLongRunningOperation, type RichLongRunningOperation } from './richLongRunningOperation';
import { createSharepointIdsFromDiscriminatorValue, serializeSharepointIds, type SharepointIds } from './sharepointIds';
import { createSubscriptionFromDiscriminatorValue, serializeSubscription, type Subscription } from './subscription';
import { createSystemFacetFromDiscriminatorValue, serializeSystemFacet, type SystemFacet } from './systemFacet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createListFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoList;
}
export function deserializeIntoList(list: List | undefined = {} as List) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseItem(list),
        "columns": n => { list.columns = n.getCollectionOfObjectValues<ColumnDefinition>(createColumnDefinitionFromDiscriminatorValue); },
        "contentTypes": n => { list.contentTypes = n.getCollectionOfObjectValues<ContentType>(createContentTypeFromDiscriminatorValue); },
        "displayName": n => { list.displayName = n.getStringValue(); },
        "drive": n => { list.drive = n.getObjectValue<Drive>(createDriveFromDiscriminatorValue); },
        "items": n => { list.items = n.getCollectionOfObjectValues<ListItem>(createListItemFromDiscriminatorValue); },
        "list": n => { list.list = n.getObjectValue<ListInfo>(createListInfoFromDiscriminatorValue); },
        "operations": n => { list.operations = n.getCollectionOfObjectValues<RichLongRunningOperation>(createRichLongRunningOperationFromDiscriminatorValue); },
        "sharepointIds": n => { list.sharepointIds = n.getObjectValue<SharepointIds>(createSharepointIdsFromDiscriminatorValue); },
        "subscriptions": n => { list.subscriptions = n.getCollectionOfObjectValues<Subscription>(createSubscriptionFromDiscriminatorValue); },
        "system": n => { list.system = n.getObjectValue<SystemFacet>(createSystemFacetFromDiscriminatorValue); },
    }
}
export interface List extends BaseItem, Parsable {
    /**
     * The collection of field definitions for this list.
     */
    columns?: ColumnDefinition[];
    /**
     * The collection of content types present in this list.
     */
    contentTypes?: ContentType[];
    /**
     * The displayable title of the list.
     */
    displayName?: string;
    /**
     * Allows access to the list as a drive resource with driveItems. Only present on document libraries.
     */
    drive?: Drive;
    /**
     * All items contained in the list.
     */
    items?: ListItem[];
    /**
     * Contains more details about the list.
     */
    list?: ListInfo;
    /**
     * The collection of long-running operations on the list.
     */
    operations?: RichLongRunningOperation[];
    /**
     * Returns identifiers useful for SharePoint REST compatibility. Read-only.
     */
    sharepointIds?: SharepointIds;
    /**
     * The set of subscriptions on the list.
     */
    subscriptions?: Subscription[];
    /**
     * If present, indicates that the list is system-managed. Read-only.
     */
    system?: SystemFacet;
}
export function serializeList(writer: SerializationWriter, list: List | undefined = {} as List) : void {
        serializeBaseItem(writer, list)
        writer.writeCollectionOfObjectValues<ColumnDefinition>("columns", list.columns, serializeColumnDefinition);
        writer.writeCollectionOfObjectValues<ContentType>("contentTypes", list.contentTypes, serializeContentType);
        writer.writeStringValue("displayName", list.displayName);
        writer.writeObjectValue<Drive>("drive", list.drive, serializeDrive);
        writer.writeCollectionOfObjectValues<ListItem>("items", list.items, serializeListItem);
        writer.writeObjectValue<ListInfo>("list", list.list, serializeListInfo);
        writer.writeCollectionOfObjectValues<RichLongRunningOperation>("operations", list.operations, serializeRichLongRunningOperation);
        writer.writeObjectValue<SharepointIds>("sharepointIds", list.sharepointIds, serializeSharepointIds);
        writer.writeCollectionOfObjectValues<Subscription>("subscriptions", list.subscriptions, serializeSubscription);
        writer.writeObjectValue<SystemFacet>("system", list.system, serializeSystemFacet);
}
// tslint:enable
// eslint-enable
