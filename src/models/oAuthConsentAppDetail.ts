// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { OAuthAppScope } from './oAuthAppScope';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOAuthConsentAppDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOAuthConsentAppDetail;
}
export function deserializeIntoOAuthConsentAppDetail(oAuthConsentAppDetail: OAuthConsentAppDetail | undefined = {} as OAuthConsentAppDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "appScope": n => { oAuthConsentAppDetail.appScope = n.getEnumValue<OAuthAppScope>(OAuthAppScope); },
        "displayLogo": n => { oAuthConsentAppDetail.displayLogo = n.getStringValue(); },
        "displayName": n => { oAuthConsentAppDetail.displayName = n.getStringValue(); },
        "@odata.type": n => { oAuthConsentAppDetail.odataType = n.getStringValue(); },
    }
}
export interface OAuthConsentAppDetail extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * App scope. Possible values are: unknown, readCalendar, readContact, readMail, readAllChat, readAllFile, readAndWriteMail, sendMail, unknownFutureValue.
     */
    appScope?: OAuthAppScope;
    /**
     * App display logo.
     */
    displayLogo?: string;
    /**
     * App name.
     */
    displayName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeOAuthConsentAppDetail(writer: SerializationWriter, oAuthConsentAppDetail: OAuthConsentAppDetail | undefined = {} as OAuthConsentAppDetail) : void {
        writer.writeEnumValue<OAuthAppScope>("appScope", oAuthConsentAppDetail.appScope);
        writer.writeStringValue("displayLogo", oAuthConsentAppDetail.displayLogo);
        writer.writeStringValue("displayName", oAuthConsentAppDetail.displayName);
        writer.writeStringValue("@odata.type", oAuthConsentAppDetail.odataType);
        writer.writeAdditionalData(oAuthConsentAppDetail.additionalData);
}
// tslint:enable
// eslint-enable
