import {VulnerabilityState} from './vulnerabilityState';
import {AdditionalDataHolder, Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export class VulnerabilityStateImpl implements AdditionalDataHolder, Parsable, VulnerabilityState {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    public additionalData: Record<string, unknown>;
    /** Common Vulnerabilities and Exposures (CVE) for the vulnerability. */
    public cve?: string | undefined;
    /** Base Common Vulnerability Scoring System (CVSS) severity score for this vulnerability. */
    public severity?: string | undefined;
    /** Indicates whether the detected vulnerability (file) was running at the time of detection or was the file detected at rest on the disk. */
    public wasRunning?: boolean | undefined;
    /**
     * Instantiates a new vulnerabilityState and sets the default values.
     * @param vulnerabilityStateParameterValue 
     */
    public constructor(vulnerabilityStateParameterValue?: VulnerabilityState | undefined) {
        this.additionalData = vulnerabilityStateParameterValue?.additionalData ? vulnerabilityStateParameterValue?.additionalData! : {}
        this.cve = vulnerabilityStateParameterValue?.cve ;
        this.severity = vulnerabilityStateParameterValue?.severity ;
        this.wasRunning = vulnerabilityStateParameterValue?.wasRunning ;
    };
    /**
     * The deserialization information for the current model
     * @returns a Record<string, (node: ParseNode) => void>
     */
    public getFieldDeserializers() : Record<string, (node: ParseNode) => void> {
        return {
            "cve": n => { this.cve = n.getStringValue(); },
            "severity": n => { this.severity = n.getStringValue(); },
            "wasRunning": n => { this.wasRunning = n.getBooleanValue(); },
        };
    };
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    public serialize(writer: SerializationWriter) : void {
        if(!writer) throw new Error("writer cannot be undefined");
        if(this.cve){
        writer.writeStringValue("cve", this.cve);
        }
        if(this.severity){
        writer.writeStringValue("severity", this.severity);
        }
        if(this.wasRunning){
        writer.writeBooleanValue("wasRunning", this.wasRunning);
        }
        writer.writeAdditionalData(this.additionalData);
    };
}
