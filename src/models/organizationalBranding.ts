// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createOrganizationalBrandingLocalizationFromDiscriminatorValue, serializeOrganizationalBrandingLocalization, type OrganizationalBrandingLocalization } from './organizationalBrandingLocalization';
import { deserializeIntoOrganizationalBrandingProperties, serializeOrganizationalBrandingProperties, type OrganizationalBrandingProperties } from './organizationalBrandingProperties';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOrganizationalBrandingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOrganizationalBranding;
}
export function deserializeIntoOrganizationalBranding(organizationalBranding: OrganizationalBranding | undefined = {} as OrganizationalBranding) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoOrganizationalBrandingProperties(organizationalBranding),
        "localizations": n => { organizationalBranding.localizations = n.getCollectionOfObjectValues<OrganizationalBrandingLocalization>(createOrganizationalBrandingLocalizationFromDiscriminatorValue); },
    }
}
export interface OrganizationalBranding extends OrganizationalBrandingProperties, Parsable {
    /**
     * Add different branding based on a locale.
     */
    localizations?: OrganizationalBrandingLocalization[];
}
export function serializeOrganizationalBranding(writer: SerializationWriter, organizationalBranding: OrganizationalBranding | undefined = {} as OrganizationalBranding) : void {
        serializeOrganizationalBrandingProperties(writer, organizationalBranding)
        writer.writeCollectionOfObjectValues<OrganizationalBrandingLocalization>("localizations", organizationalBranding.localizations, );
}
// tslint:enable
// eslint-enable
