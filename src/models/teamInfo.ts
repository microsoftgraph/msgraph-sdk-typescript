// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAssociatedTeamInfo } from './associatedTeamInfo';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type AssociatedTeamInfo, type SharedWithChannelTeamInfo } from './index';
import { deserializeIntoSharedWithChannelTeamInfo } from './sharedWithChannelTeamInfo';
import { createTeamFromDiscriminatorValue, serializeTeam, type Team } from './team';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTeamInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.associatedTeamInfo":
                    return deserializeIntoAssociatedTeamInfo;
                case "#microsoft.graph.sharedWithChannelTeamInfo":
                    return deserializeIntoSharedWithChannelTeamInfo;
            }
        }
    }
    return deserializeIntoTeamInfo;
}
export function deserializeIntoTeamInfo(teamInfo: TeamInfo | undefined = {} as TeamInfo) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(teamInfo),
        "displayName": n => { teamInfo.displayName = n.getStringValue(); },
        "team": n => { teamInfo.team = n.getObjectValue<Team>(createTeamFromDiscriminatorValue); },
        "tenantId": n => { teamInfo.tenantId = n.getStringValue(); },
    }
}
export function serializeTeamInfo(writer: SerializationWriter, teamInfo: TeamInfo | undefined = {} as TeamInfo) : void {
    serializeEntity(writer, teamInfo)
    writer.writeStringValue("displayName", teamInfo.displayName);
    writer.writeObjectValue<Team>("team", teamInfo.team, serializeTeam);
    writer.writeStringValue("tenantId", teamInfo.tenantId);
}
export interface TeamInfo extends Entity, Parsable {
    /**
     * The name of the team.
     */
    displayName?: string;
    /**
     * The team property
     */
    team?: Team;
    /**
     * The ID of the Microsoft Entra tenant.
     */
    tenantId?: string;
}
// tslint:enable
// eslint-enable
