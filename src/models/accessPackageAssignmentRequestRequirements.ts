// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAccessPackageQuestionFromDiscriminatorValue, serializeAccessPackageQuestion, type AccessPackageQuestion } from './accessPackageQuestion';
import { createEntitlementManagementScheduleFromDiscriminatorValue, serializeEntitlementManagementSchedule, type EntitlementManagementSchedule } from './entitlementManagementSchedule';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageAssignmentRequestRequirements extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates whether the requestor is allowed to set a custom schedule.
     */
    allowCustomAssignmentSchedule?: boolean;
    /**
     * Indicates whether a request to add must be approved by an approver.
     */
    isApprovalRequiredForAdd?: boolean;
    /**
     * Indicates whether a request to update must be approved by an approver.
     */
    isApprovalRequiredForUpdate?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The description of the policy that the user is trying to request access using.
     */
    policyDescription?: string;
    /**
     * The display name of the policy that the user is trying to request access using.
     */
    policyDisplayName?: string;
    /**
     * The identifier of the policy that these requirements are associated with. This identifier can be used when creating a new assignment request.
     */
    policyId?: string;
    /**
     * The questions property
     */
    questions?: AccessPackageQuestion[];
    /**
     * Schedule restrictions enforced, if any.
     */
    schedule?: EntitlementManagementSchedule;
}
export function createAccessPackageAssignmentRequestRequirementsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessPackageAssignmentRequestRequirements;
}
export function deserializeIntoAccessPackageAssignmentRequestRequirements(accessPackageAssignmentRequestRequirements: AccessPackageAssignmentRequestRequirements | undefined = {} as AccessPackageAssignmentRequestRequirements) : Record<string, (node: ParseNode) => void> {
    return {
        "allowCustomAssignmentSchedule": n => { accessPackageAssignmentRequestRequirements.allowCustomAssignmentSchedule = n.getBooleanValue(); },
        "isApprovalRequiredForAdd": n => { accessPackageAssignmentRequestRequirements.isApprovalRequiredForAdd = n.getBooleanValue(); },
        "isApprovalRequiredForUpdate": n => { accessPackageAssignmentRequestRequirements.isApprovalRequiredForUpdate = n.getBooleanValue(); },
        "@odata.type": n => { accessPackageAssignmentRequestRequirements.odataType = n.getStringValue(); },
        "policyDescription": n => { accessPackageAssignmentRequestRequirements.policyDescription = n.getStringValue(); },
        "policyDisplayName": n => { accessPackageAssignmentRequestRequirements.policyDisplayName = n.getStringValue(); },
        "policyId": n => { accessPackageAssignmentRequestRequirements.policyId = n.getStringValue(); },
        "questions": n => { accessPackageAssignmentRequestRequirements.questions = n.getCollectionOfObjectValues<AccessPackageQuestion>(createAccessPackageQuestionFromDiscriminatorValue); },
        "schedule": n => { accessPackageAssignmentRequestRequirements.schedule = n.getObjectValue<EntitlementManagementSchedule>(createEntitlementManagementScheduleFromDiscriminatorValue); },
    }
}
export function serializeAccessPackageAssignmentRequestRequirements(writer: SerializationWriter, accessPackageAssignmentRequestRequirements: AccessPackageAssignmentRequestRequirements | undefined = {} as AccessPackageAssignmentRequestRequirements) : void {
        writer.writeBooleanValue("allowCustomAssignmentSchedule", accessPackageAssignmentRequestRequirements.allowCustomAssignmentSchedule);
        writer.writeBooleanValue("isApprovalRequiredForAdd", accessPackageAssignmentRequestRequirements.isApprovalRequiredForAdd);
        writer.writeBooleanValue("isApprovalRequiredForUpdate", accessPackageAssignmentRequestRequirements.isApprovalRequiredForUpdate);
        writer.writeStringValue("@odata.type", accessPackageAssignmentRequestRequirements.odataType);
        writer.writeStringValue("policyDescription", accessPackageAssignmentRequestRequirements.policyDescription);
        writer.writeStringValue("policyDisplayName", accessPackageAssignmentRequestRequirements.policyDisplayName);
        writer.writeStringValue("policyId", accessPackageAssignmentRequestRequirements.policyId);
        writer.writeCollectionOfObjectValues<AccessPackageQuestion>("questions", accessPackageAssignmentRequestRequirements.questions, );
        writer.writeObjectValue<EntitlementManagementSchedule>("schedule", accessPackageAssignmentRequestRequirements.schedule, );
        writer.writeAdditionalData(accessPackageAssignmentRequestRequirements.additionalData);
}
// tslint:enable
// eslint-enable
