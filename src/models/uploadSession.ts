// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUploadSessionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUploadSession;
}
export function deserializeIntoUploadSession(uploadSession: UploadSession | undefined = {} as UploadSession) : Record<string, (node: ParseNode) => void> {
    return {
        "expirationDateTime": n => { uploadSession.expirationDateTime = n.getDateValue(); },
        "nextExpectedRanges": n => { uploadSession.nextExpectedRanges = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { uploadSession.odataType = n.getStringValue(); },
        "uploadUrl": n => { uploadSession.uploadUrl = n.getStringValue(); },
    }
}
export function serializeUploadSession(writer: SerializationWriter, uploadSession: UploadSession | undefined = {} as UploadSession) : void {
    writer.writeDateValue("expirationDateTime", uploadSession.expirationDateTime);
    writer.writeCollectionOfPrimitiveValues<string>("nextExpectedRanges", uploadSession.nextExpectedRanges);
    writer.writeStringValue("@odata.type", uploadSession.odataType);
    writer.writeStringValue("uploadUrl", uploadSession.uploadUrl);
    writer.writeAdditionalData(uploadSession.additionalData);
}
export interface UploadSession extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The date and time in UTC that the upload session will expire. The complete file must be uploaded before this expiration time is reached.
     */
    expirationDateTime?: Date;
    /**
     * A collection of byte ranges that the server is missing for the file. These ranges are zero indexed and of the format 'start-end' (for example '0-26' to indicate the first 27 bytes of the file). When uploading files as Outlook attachments, instead of a collection of ranges, this property always indicates a single value '{start}', the location in the file where the next upload should begin.
     */
    nextExpectedRanges?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The URL endpoint that accepts PUT requests for byte ranges of the file.
     */
    uploadUrl?: string;
}
// tslint:enable
// eslint-enable
