// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { CourseStatus } from './courseStatus';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type LearningAssignment, type LearningSelfInitiatedCourse } from './index';
import { deserializeIntoLearningAssignment } from './learningAssignment';
import { deserializeIntoLearningSelfInitiatedCourse } from './learningSelfInitiatedCourse';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLearningCourseActivityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.learningAssignment":
                    return deserializeIntoLearningAssignment;
                case "#microsoft.graph.learningSelfInitiatedCourse":
                    return deserializeIntoLearningSelfInitiatedCourse;
            }
        }
    }
    return deserializeIntoLearningCourseActivity;
}
export function deserializeIntoLearningCourseActivity(learningCourseActivity: LearningCourseActivity | undefined = {} as LearningCourseActivity) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(learningCourseActivity),
        "completedDateTime": n => { learningCourseActivity.completedDateTime = n.getDateValue(); },
        "completionPercentage": n => { learningCourseActivity.completionPercentage = n.getNumberValue(); },
        "externalcourseActivityId": n => { learningCourseActivity.externalcourseActivityId = n.getStringValue(); },
        "learnerUserId": n => { learningCourseActivity.learnerUserId = n.getStringValue(); },
        "learningContentId": n => { learningCourseActivity.learningContentId = n.getStringValue(); },
        "learningProviderId": n => { learningCourseActivity.learningProviderId = n.getStringValue(); },
        "status": n => { learningCourseActivity.status = n.getEnumValue<CourseStatus>(CourseStatus); },
    }
}
export interface LearningCourseActivity extends Entity, Parsable {
    /**
     * Date and time when the assignment was completed. Optional.
     */
    completedDateTime?: Date;
    /**
     * The percentage completion value of the course activity. Optional.
     */
    completionPercentage?: number;
    /**
     * A course activity ID generated by the provider. Optional.
     */
    externalcourseActivityId?: string;
    /**
     * The user ID of the learner to whom the activity is assigned. Required.
     */
    learnerUserId?: string;
    /**
     * The ID of the learning content created in Viva Learning. Required.
     */
    learningContentId?: string;
    /**
     * The registration ID of the provider. Required.
     */
    learningProviderId?: string;
    /**
     * The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
     */
    status?: CourseStatus;
}
export function serializeLearningCourseActivity(writer: SerializationWriter, learningCourseActivity: LearningCourseActivity | undefined = {} as LearningCourseActivity) : void {
    serializeEntity(writer, learningCourseActivity)
    writer.writeDateValue("completedDateTime", learningCourseActivity.completedDateTime);
    writer.writeNumberValue("completionPercentage", learningCourseActivity.completionPercentage);
    writer.writeStringValue("externalcourseActivityId", learningCourseActivity.externalcourseActivityId);
    writer.writeStringValue("learnerUserId", learningCourseActivity.learnerUserId);
    writer.writeStringValue("learningContentId", learningCourseActivity.learningContentId);
    writer.writeStringValue("learningProviderId", learningCourseActivity.learningProviderId);
    writer.writeEnumValue<CourseStatus>("status", learningCourseActivity.status);
}
// tslint:enable
// eslint-enable
