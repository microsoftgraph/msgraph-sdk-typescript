// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createJsonFromDiscriminatorValue, serializeJson, type Json } from './json';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookRangeViewFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookRangeView;
}
export function deserializeIntoWorkbookRangeView(workbookRangeView: WorkbookRangeView | undefined = {} as WorkbookRangeView) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookRangeView),
        "cellAddresses": n => { workbookRangeView.cellAddresses = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "columnCount": n => { workbookRangeView.columnCount = n.getNumberValue(); },
        "formulas": n => { workbookRangeView.formulas = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "formulasLocal": n => { workbookRangeView.formulasLocal = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "formulasR1C1": n => { workbookRangeView.formulasR1C1 = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "index": n => { workbookRangeView.index = n.getNumberValue(); },
        "numberFormat": n => { workbookRangeView.numberFormat = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "rowCount": n => { workbookRangeView.rowCount = n.getNumberValue(); },
        "rows": n => { workbookRangeView.rows = n.getCollectionOfObjectValues<WorkbookRangeView>(createWorkbookRangeViewFromDiscriminatorValue); },
        "text": n => { workbookRangeView.text = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "values": n => { workbookRangeView.values = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
        "valueTypes": n => { workbookRangeView.valueTypes = n.getObjectValue<Json>(createJsonFromDiscriminatorValue); },
    }
}
export function serializeWorkbookRangeView(writer: SerializationWriter, workbookRangeView: WorkbookRangeView | undefined = {} as WorkbookRangeView) : void {
    serializeEntity(writer, workbookRangeView)
    writer.writeObjectValue<Json>("cellAddresses", workbookRangeView.cellAddresses, serializeJson);
    writer.writeNumberValue("columnCount", workbookRangeView.columnCount);
    writer.writeObjectValue<Json>("formulas", workbookRangeView.formulas, serializeJson);
    writer.writeObjectValue<Json>("formulasLocal", workbookRangeView.formulasLocal, serializeJson);
    writer.writeObjectValue<Json>("formulasR1C1", workbookRangeView.formulasR1C1, serializeJson);
    writer.writeNumberValue("index", workbookRangeView.index);
    writer.writeObjectValue<Json>("numberFormat", workbookRangeView.numberFormat, serializeJson);
    writer.writeNumberValue("rowCount", workbookRangeView.rowCount);
    writer.writeCollectionOfObjectValues<WorkbookRangeView>("rows", workbookRangeView.rows, serializeWorkbookRangeView);
    writer.writeObjectValue<Json>("text", workbookRangeView.text, serializeJson);
    writer.writeObjectValue<Json>("values", workbookRangeView.values, serializeJson);
    writer.writeObjectValue<Json>("valueTypes", workbookRangeView.valueTypes, serializeJson);
}
export interface WorkbookRangeView extends Entity, Parsable {
    /**
     * Represents the cell addresses
     */
    cellAddresses?: Json;
    /**
     * Returns the number of visible columns. Read-only.
     */
    columnCount?: number;
    /**
     * Represents the formula in A1-style notation.
     */
    formulas?: Json;
    /**
     * Represents the formula in A1-style notation, in the user's language and number-formatting locale. For example, the English '=SUM(A1, 1.5)' formula would become '=SUMME(A1; 1,5)' in German.
     */
    formulasLocal?: Json;
    /**
     * Represents the formula in R1C1-style notation.
     */
    formulasR1C1?: Json;
    /**
     * Index of the range.
     */
    index?: number;
    /**
     * Represents Excel's number format code for the given cell. Read-only.
     */
    numberFormat?: Json;
    /**
     * Returns the number of visible rows. Read-only.
     */
    rowCount?: number;
    /**
     * Represents a collection of range views associated with the range. Read-only. Read-only.
     */
    rows?: WorkbookRangeView[];
    /**
     * Text values of the specified range. The Text value won't depend on the cell width. The # sign substitution that happens in Excel UI won't affect the text value returned by the API. Read-only.
     */
    text?: Json;
    /**
     * Represents the raw values of the specified range view. The data returned could be of type string, number, or a boolean. Cell that contains an error returns the error string.
     */
    values?: Json;
    /**
     * Represents the type of data of each cell. Read-only. The possible values are: Unknown, Empty, String, Integer, Double, Boolean, Error.
     */
    valueTypes?: Json;
}
// tslint:enable
// eslint-enable
