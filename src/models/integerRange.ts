// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIntegerRangeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIntegerRange;
}
export function deserializeIntoIntegerRange(integerRange: IntegerRange | undefined = {} as IntegerRange) : Record<string, (node: ParseNode) => void> {
    return {
        "end": n => { integerRange.end = n.getNumberValue(); },
        "@odata.type": n => { integerRange.odataType = n.getStringValue(); },
        "start": n => { integerRange.start = n.getNumberValue(); },
    }
}
export interface IntegerRange extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The inclusive upper bound of the integer range.
     */
    end?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The inclusive lower bound of the integer range.
     */
    start?: number;
}
export function serializeIntegerRange(writer: SerializationWriter, integerRange: IntegerRange | undefined = {} as IntegerRange) : void {
    writer.writeNumberValue("end", integerRange.end);
    writer.writeStringValue("@odata.type", integerRange.odataType);
    writer.writeNumberValue("start", integerRange.start);
    writer.writeAdditionalData(integerRange.additionalData);
}
// tslint:enable
// eslint-enable
