// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { EndUserNotificationPreference } from './endUserNotificationPreference';
import { EndUserNotificationSettingType } from './endUserNotificationSettingType';
import { type NoTrainingNotificationSetting, type TrainingNotificationSetting } from './index';
import { deserializeIntoNoTrainingNotificationSetting } from './noTrainingNotificationSetting';
import { createPositiveReinforcementNotificationFromDiscriminatorValue, serializePositiveReinforcementNotification, type PositiveReinforcementNotification } from './positiveReinforcementNotification';
import { deserializeIntoTrainingNotificationSetting } from './trainingNotificationSetting';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEndUserNotificationSettingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.noTrainingNotificationSetting":
                    return deserializeIntoNoTrainingNotificationSetting;
                case "#microsoft.graph.trainingNotificationSetting":
                    return deserializeIntoTrainingNotificationSetting;
            }
        }
    }
    return deserializeIntoEndUserNotificationSetting;
}
export function deserializeIntoEndUserNotificationSetting(endUserNotificationSetting: EndUserNotificationSetting | undefined = {} as EndUserNotificationSetting) : Record<string, (node: ParseNode) => void> {
    return {
        "notificationPreference": n => { endUserNotificationSetting.notificationPreference = n.getEnumValue<EndUserNotificationPreference>(EndUserNotificationPreference); },
        "@odata.type": n => { endUserNotificationSetting.odataType = n.getStringValue(); },
        "positiveReinforcement": n => { endUserNotificationSetting.positiveReinforcement = n.getObjectValue<PositiveReinforcementNotification>(createPositiveReinforcementNotificationFromDiscriminatorValue); },
        "settingType": n => { endUserNotificationSetting.settingType = n.getEnumValue<EndUserNotificationSettingType>(EndUserNotificationSettingType); },
    }
}
export interface EndUserNotificationSetting extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Notification preference. Possible values are: unknown, microsoft, custom, unknownFutureValue.
     */
    notificationPreference?: EndUserNotificationPreference;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Positive reinforcement detail.
     */
    positiveReinforcement?: PositiveReinforcementNotification;
    /**
     * End user notification type. Possible values are: unknown, noTraining, trainingSelected, noNotification, unknownFutureValue.
     */
    settingType?: EndUserNotificationSettingType;
}
export function serializeEndUserNotificationSetting(writer: SerializationWriter, endUserNotificationSetting: EndUserNotificationSetting | undefined = {} as EndUserNotificationSetting) : void {
    writer.writeEnumValue<EndUserNotificationPreference>("notificationPreference", endUserNotificationSetting.notificationPreference);
    writer.writeStringValue("@odata.type", endUserNotificationSetting.odataType);
    writer.writeObjectValue<PositiveReinforcementNotification>("positiveReinforcement", endUserNotificationSetting.positiveReinforcement, serializePositiveReinforcementNotification);
    writer.writeEnumValue<EndUserNotificationSettingType>("settingType", endUserNotificationSetting.settingType);
    writer.writeAdditionalData(endUserNotificationSetting.additionalData);
}
// tslint:enable
// eslint-enable
