// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCoachmarkLocationFromDiscriminatorValue, serializeCoachmarkLocation, type CoachmarkLocation } from './coachmarkLocation';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPayloadCoachmarkFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPayloadCoachmark;
}
export function deserializeIntoPayloadCoachmark(payloadCoachmark: PayloadCoachmark | undefined = {} as PayloadCoachmark) : Record<string, (node: ParseNode) => void> {
    return {
        "coachmarkLocation": n => { payloadCoachmark.coachmarkLocation = n.getObjectValue<CoachmarkLocation>(createCoachmarkLocationFromDiscriminatorValue); },
        "description": n => { payloadCoachmark.description = n.getStringValue(); },
        "indicator": n => { payloadCoachmark.indicator = n.getStringValue(); },
        "isValid": n => { payloadCoachmark.isValid = n.getBooleanValue(); },
        "language": n => { payloadCoachmark.language = n.getStringValue(); },
        "@odata.type": n => { payloadCoachmark.odataType = n.getStringValue(); },
        "order": n => { payloadCoachmark.order = n.getStringValue(); },
    }
}
export interface PayloadCoachmark extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The coachmark location.
     */
    coachmarkLocation?: CoachmarkLocation;
    /**
     * The description about the coachmark.
     */
    description?: string;
    /**
     * The coachmark indicator.
     */
    indicator?: string;
    /**
     * Indicates whether the coachmark is valid or not.
     */
    isValid?: boolean;
    /**
     * The coachmark language.
     */
    language?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The coachmark order.
     */
    order?: string;
}
export function serializePayloadCoachmark(writer: SerializationWriter, payloadCoachmark: PayloadCoachmark | undefined = {} as PayloadCoachmark) : void {
        writer.writeObjectValue<CoachmarkLocation>("coachmarkLocation", payloadCoachmark.coachmarkLocation, serializeCoachmarkLocation);
        writer.writeStringValue("description", payloadCoachmark.description);
        writer.writeStringValue("indicator", payloadCoachmark.indicator);
        writer.writeBooleanValue("isValid", payloadCoachmark.isValid);
        writer.writeStringValue("language", payloadCoachmark.language);
        writer.writeStringValue("@odata.type", payloadCoachmark.odataType);
        writer.writeStringValue("order", payloadCoachmark.order);
        writer.writeAdditionalData(payloadCoachmark.additionalData);
}
// tslint:enable
// eslint-enable
