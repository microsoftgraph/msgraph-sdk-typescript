// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDetailsInfoFromDiscriminatorValue, serializeDetailsInfo, type DetailsInfo } from './detailsInfo';
import { ProvisioningResult } from './provisioningResult';
import { ProvisioningStepType } from './provisioningStepType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createProvisioningStepFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoProvisioningStep;
}
export function deserializeIntoProvisioningStep(provisioningStep: ProvisioningStep | undefined = {} as ProvisioningStep) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { provisioningStep.description = n.getStringValue(); },
        "details": n => { provisioningStep.details = n.getObjectValue<DetailsInfo>(createDetailsInfoFromDiscriminatorValue); },
        "name": n => { provisioningStep.name = n.getStringValue(); },
        "@odata.type": n => { provisioningStep.odataType = n.getStringValue(); },
        "provisioningStepType": n => { provisioningStep.provisioningStepType = n.getEnumValue<ProvisioningStepType>(ProvisioningStepType); },
        "status": n => { provisioningStep.status = n.getEnumValue<ProvisioningResult>(ProvisioningResult); },
    }
}
export interface ProvisioningStep extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Summary of what occurred during the step.
     */
    description?: string;
    /**
     * Details of what occurred during the step.
     */
    details?: DetailsInfo;
    /**
     * Name of the step.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Type of step. Possible values are: import, scoping, matching, processing, referenceResolution, export, unknownFutureValue.
     */
    provisioningStepType?: ProvisioningStepType;
    /**
     * Status of the step. Possible values are: success, warning,  failure, skipped, unknownFutureValue.
     */
    status?: ProvisioningResult;
}
export function serializeProvisioningStep(writer: SerializationWriter, provisioningStep: ProvisioningStep | undefined = {} as ProvisioningStep) : void {
        writer.writeStringValue("description", provisioningStep.description);
        writer.writeObjectValue<DetailsInfo>("details", provisioningStep.details, );
        writer.writeStringValue("name", provisioningStep.name);
        writer.writeStringValue("@odata.type", provisioningStep.odataType);
        writer.writeEnumValue<ProvisioningStepType>("provisioningStepType", provisioningStep.provisioningStepType);
        writer.writeEnumValue<ProvisioningResult>("status", provisioningStep.status);
        writer.writeAdditionalData(provisioningStep.additionalData);
}
// tslint:enable
// eslint-enable
