// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoUnifiedRoleManagementPolicyRule, serializeUnifiedRoleManagementPolicyRule, type UnifiedRoleManagementPolicyRule } from './unifiedRoleManagementPolicyRule';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleManagementPolicyAuthenticationContextRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRoleManagementPolicyAuthenticationContextRule;
}
export function deserializeIntoUnifiedRoleManagementPolicyAuthenticationContextRule(unifiedRoleManagementPolicyAuthenticationContextRule: UnifiedRoleManagementPolicyAuthenticationContextRule | undefined = {} as UnifiedRoleManagementPolicyAuthenticationContextRule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoUnifiedRoleManagementPolicyRule(unifiedRoleManagementPolicyAuthenticationContextRule),
        "claimValue": n => { unifiedRoleManagementPolicyAuthenticationContextRule.claimValue = n.getStringValue(); },
        "isEnabled": n => { unifiedRoleManagementPolicyAuthenticationContextRule.isEnabled = n.getBooleanValue(); },
    }
}
export function serializeUnifiedRoleManagementPolicyAuthenticationContextRule(writer: SerializationWriter, unifiedRoleManagementPolicyAuthenticationContextRule: UnifiedRoleManagementPolicyAuthenticationContextRule | undefined = {} as UnifiedRoleManagementPolicyAuthenticationContextRule) : void {
    serializeUnifiedRoleManagementPolicyRule(writer, unifiedRoleManagementPolicyAuthenticationContextRule)
    writer.writeStringValue("claimValue", unifiedRoleManagementPolicyAuthenticationContextRule.claimValue);
    writer.writeBooleanValue("isEnabled", unifiedRoleManagementPolicyAuthenticationContextRule.isEnabled);
}
export interface UnifiedRoleManagementPolicyAuthenticationContextRule extends Parsable, UnifiedRoleManagementPolicyRule {
    /**
     * The value of the authentication context claim.
     */
    claimValue?: string;
    /**
     * Determines whether this rule is enabled.
     */
    isEnabled?: boolean;
}
// tslint:enable
// eslint-enable
