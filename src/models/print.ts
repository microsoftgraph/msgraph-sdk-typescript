// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPrintConnectorFromDiscriminatorValue, serializePrintConnector, type PrintConnector } from './printConnector';
import { createPrinterFromDiscriminatorValue, serializePrinter, type Printer } from './printer';
import { createPrinterShareFromDiscriminatorValue, serializePrinterShare, type PrinterShare } from './printerShare';
import { createPrintOperationFromDiscriminatorValue, serializePrintOperation, type PrintOperation } from './printOperation';
import { createPrintServiceFromDiscriminatorValue, serializePrintService, type PrintService } from './printService';
import { createPrintSettingsFromDiscriminatorValue, serializePrintSettings, type PrintSettings } from './printSettings';
import { createPrintTaskDefinitionFromDiscriminatorValue, serializePrintTaskDefinition, type PrintTaskDefinition } from './printTaskDefinition';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrintFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrint;
}
export function deserializeIntoPrint(print: Print | undefined = {} as Print) : Record<string, (node: ParseNode) => void> {
    return {
        "connectors": n => { print.connectors = n.getCollectionOfObjectValues<PrintConnector>(createPrintConnectorFromDiscriminatorValue); },
        "@odata.type": n => { print.odataType = n.getStringValue(); },
        "operations": n => { print.operations = n.getCollectionOfObjectValues<PrintOperation>(createPrintOperationFromDiscriminatorValue); },
        "printers": n => { print.printers = n.getCollectionOfObjectValues<Printer>(createPrinterFromDiscriminatorValue); },
        "services": n => { print.services = n.getCollectionOfObjectValues<PrintService>(createPrintServiceFromDiscriminatorValue); },
        "settings": n => { print.settings = n.getObjectValue<PrintSettings>(createPrintSettingsFromDiscriminatorValue); },
        "shares": n => { print.shares = n.getCollectionOfObjectValues<PrinterShare>(createPrinterShareFromDiscriminatorValue); },
        "taskDefinitions": n => { print.taskDefinitions = n.getCollectionOfObjectValues<PrintTaskDefinition>(createPrintTaskDefinitionFromDiscriminatorValue); },
    }
}
export interface Print extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The list of available print connectors.
     */
    connectors?: PrintConnector[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The list of print long running operations.
     */
    operations?: PrintOperation[];
    /**
     * The list of printers registered in the tenant.
     */
    printers?: Printer[];
    /**
     * The list of available Universal Print service endpoints.
     */
    services?: PrintService[];
    /**
     * Tenant-wide settings for the Universal Print service.
     */
    settings?: PrintSettings;
    /**
     * The list of printer shares registered in the tenant.
     */
    shares?: PrinterShare[];
    /**
     * List of abstract definition for a task that can be triggered when various events occur within Universal Print.
     */
    taskDefinitions?: PrintTaskDefinition[];
}
export function serializePrint(writer: SerializationWriter, print: Print | undefined = {} as Print) : void {
        writer.writeCollectionOfObjectValues<PrintConnector>("connectors", print.connectors, serializePrintConnector);
        writer.writeStringValue("@odata.type", print.odataType);
        writer.writeCollectionOfObjectValues<PrintOperation>("operations", print.operations, serializePrintOperation);
        writer.writeCollectionOfObjectValues<Printer>("printers", print.printers, serializePrinter);
        writer.writeCollectionOfObjectValues<PrintService>("services", print.services, serializePrintService);
        writer.writeObjectValue<PrintSettings>("settings", print.settings, serializePrintSettings);
        writer.writeCollectionOfObjectValues<PrinterShare>("shares", print.shares, serializePrinterShare);
        writer.writeCollectionOfObjectValues<PrintTaskDefinition>("taskDefinitions", print.taskDefinitions, serializePrintTaskDefinition);
        writer.writeAdditionalData(print.additionalData);
}
// tslint:enable
// eslint-enable
