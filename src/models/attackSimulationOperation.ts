// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AttackSimulationOperationType } from './attackSimulationOperationType';
import { deserializeIntoLongRunningOperation, serializeLongRunningOperation, type LongRunningOperation } from './longRunningOperation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttackSimulationOperation extends LongRunningOperation, Parsable {
    /**
     * The percentageCompleted property
     */
    percentageCompleted?: number;
    /**
     * The tenantId property
     */
    tenantId?: string;
    /**
     * The type property
     */
    type?: AttackSimulationOperationType;
}
export function createAttackSimulationOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttackSimulationOperation;
}
export function deserializeIntoAttackSimulationOperation(attackSimulationOperation: AttackSimulationOperation | undefined = {} as AttackSimulationOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoLongRunningOperation(attackSimulationOperation),
        "percentageCompleted": n => { attackSimulationOperation.percentageCompleted = n.getNumberValue(); },
        "tenantId": n => { attackSimulationOperation.tenantId = n.getStringValue(); },
        "type": n => { attackSimulationOperation.type = n.getEnumValue<AttackSimulationOperationType>(AttackSimulationOperationType); },
    }
}
export function serializeAttackSimulationOperation(writer: SerializationWriter, attackSimulationOperation: AttackSimulationOperation | undefined = {} as AttackSimulationOperation) : void {
        serializeLongRunningOperation(writer, attackSimulationOperation)
        writer.writeNumberValue("percentageCompleted", attackSimulationOperation.percentageCompleted);
        writer.writeStringValue("tenantId", attackSimulationOperation.tenantId);
        writer.writeEnumValue<AttackSimulationOperationType>("type", attackSimulationOperation.type);
}
// tslint:enable
// eslint-enable
