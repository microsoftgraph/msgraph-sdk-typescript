// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPackageEscapedFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPackageEscaped;
}
export function deserializeIntoPackageEscaped(packageEscaped: PackageEscaped | undefined = {} as PackageEscaped) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { packageEscaped.odataType = n.getStringValue(); },
        "type": n => { packageEscaped.type = n.getStringValue(); },
    }
}
export interface PackageEscaped extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A string indicating the type of package. While oneNote is the only currently defined value, you should expect other package types to be returned and handle them accordingly.
     */
    type?: string;
}
export function serializePackageEscaped(writer: SerializationWriter, packageEscaped: PackageEscaped | undefined = {} as PackageEscaped) : void {
    writer.writeStringValue("@odata.type", packageEscaped.odataType);
    writer.writeStringValue("type", packageEscaped.type);
    writer.writeAdditionalData(packageEscaped.additionalData);
}
// tslint:enable
// eslint-enable
