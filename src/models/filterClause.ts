// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createFilterOperandFromDiscriminatorValue, serializeFilterOperand, type FilterOperand } from './filterOperand';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFilterClauseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFilterClause;
}
export function deserializeIntoFilterClause(filterClause: FilterClause | undefined = {} as FilterClause) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { filterClause.odataType = n.getStringValue(); },
        "operatorName": n => { filterClause.operatorName = n.getStringValue(); },
        "sourceOperandName": n => { filterClause.sourceOperandName = n.getStringValue(); },
        "targetOperand": n => { filterClause.targetOperand = n.getObjectValue<FilterOperand>(createFilterOperandFromDiscriminatorValue); },
    }
}
export interface FilterClause extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Name of the operator to be applied to the source and target operands. Must be one of the supported operators. Supported operators can be discovered.
     */
    operatorName?: string;
    /**
     * Name of source operand (the operand being tested). The source operand name must match one of the attribute names on the source object.
     */
    sourceOperandName?: string;
    /**
     * Values that the source operand will be tested against.
     */
    targetOperand?: FilterOperand;
}
export function serializeFilterClause(writer: SerializationWriter, filterClause: FilterClause | undefined = {} as FilterClause) : void {
        writer.writeStringValue("@odata.type", filterClause.odataType);
        writer.writeStringValue("operatorName", filterClause.operatorName);
        writer.writeStringValue("sourceOperandName", filterClause.sourceOperandName);
        writer.writeObjectValue<FilterOperand>("targetOperand", filterClause.targetOperand, );
        writer.writeAdditionalData(filterClause.additionalData);
}
// tslint:enable
// eslint-enable
