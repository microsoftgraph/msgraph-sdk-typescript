// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CallParticipantInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Identity of the call participant.
     */
    participant?: IdentitySet;
}
export function createCallParticipantInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCallParticipantInfo;
}
export function deserializeIntoCallParticipantInfo(callParticipantInfo: CallParticipantInfo | undefined = {} as CallParticipantInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { callParticipantInfo.odataType = n.getStringValue(); },
        "participant": n => { callParticipantInfo.participant = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
    }
}
export function serializeCallParticipantInfo(writer: SerializationWriter, callParticipantInfo: CallParticipantInfo | undefined = {} as CallParticipantInfo) : void {
    writer.writeStringValue("@odata.type", callParticipantInfo.odataType);
    writer.writeObjectValue<IdentitySet>("participant", callParticipantInfo.participant, serializeIdentitySet);
    writer.writeAdditionalData(callParticipantInfo.additionalData);
}
// tslint:enable
// eslint-enable
