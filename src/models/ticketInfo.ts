// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTicketInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTicketInfo;
}
export function deserializeIntoTicketInfo(ticketInfo: TicketInfo | undefined = {} as TicketInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { ticketInfo.odataType = n.getStringValue(); },
        "ticketNumber": n => { ticketInfo.ticketNumber = n.getStringValue(); },
        "ticketSystem": n => { ticketInfo.ticketSystem = n.getStringValue(); },
    }
}
export function serializeTicketInfo(writer: SerializationWriter, ticketInfo: TicketInfo | undefined = {} as TicketInfo) : void {
    writer.writeStringValue("@odata.type", ticketInfo.odataType);
    writer.writeStringValue("ticketNumber", ticketInfo.ticketNumber);
    writer.writeStringValue("ticketSystem", ticketInfo.ticketSystem);
    writer.writeAdditionalData(ticketInfo.additionalData);
}
export interface TicketInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The ticket number.
     */
    ticketNumber?: string;
    /**
     * The description of the ticket system.
     */
    ticketSystem?: string;
}
// tslint:enable
// eslint-enable
