// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoUnifiedRoleManagementPolicyRule, serializeUnifiedRoleManagementPolicyRule, type UnifiedRoleManagementPolicyRule } from './unifiedRoleManagementPolicyRule';
import { type Duration, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleManagementPolicyExpirationRuleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRoleManagementPolicyExpirationRule;
}
export function deserializeIntoUnifiedRoleManagementPolicyExpirationRule(unifiedRoleManagementPolicyExpirationRule: UnifiedRoleManagementPolicyExpirationRule | undefined = {} as UnifiedRoleManagementPolicyExpirationRule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoUnifiedRoleManagementPolicyRule(unifiedRoleManagementPolicyExpirationRule),
        "isExpirationRequired": n => { unifiedRoleManagementPolicyExpirationRule.isExpirationRequired = n.getBooleanValue(); },
        "maximumDuration": n => { unifiedRoleManagementPolicyExpirationRule.maximumDuration = n.getDurationValue(); },
    }
}
export function serializeUnifiedRoleManagementPolicyExpirationRule(writer: SerializationWriter, unifiedRoleManagementPolicyExpirationRule: UnifiedRoleManagementPolicyExpirationRule | undefined = {} as UnifiedRoleManagementPolicyExpirationRule) : void {
    serializeUnifiedRoleManagementPolicyRule(writer, unifiedRoleManagementPolicyExpirationRule)
    writer.writeBooleanValue("isExpirationRequired", unifiedRoleManagementPolicyExpirationRule.isExpirationRequired);
    writer.writeDurationValue("maximumDuration", unifiedRoleManagementPolicyExpirationRule.maximumDuration);
}
export interface UnifiedRoleManagementPolicyExpirationRule extends Parsable, UnifiedRoleManagementPolicyRule {
    /**
     * Indicates whether expiration is required or if it's a permanently active assignment or eligibility.
     */
    isExpirationRequired?: boolean;
    /**
     * The maximum duration allowed for eligibility or assignment that isn't permanent. Required when isExpirationRequired is true.
     */
    maximumDuration?: Duration;
}
// tslint:enable
// eslint-enable
