// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AttributeType } from './attributeType';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { ScopeOperatorMultiValuedComparisonType } from './scopeOperatorMultiValuedComparisonType';
import { ScopeOperatorType } from './scopeOperatorType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFilterOperatorSchemaFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFilterOperatorSchema;
}
export function deserializeIntoFilterOperatorSchema(filterOperatorSchema: FilterOperatorSchema | undefined = {} as FilterOperatorSchema) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(filterOperatorSchema),
        "arity": n => { filterOperatorSchema.arity = n.getEnumValue<ScopeOperatorType>(ScopeOperatorType); },
        "multivaluedComparisonType": n => { filterOperatorSchema.multivaluedComparisonType = n.getEnumValue<ScopeOperatorMultiValuedComparisonType>(ScopeOperatorMultiValuedComparisonType); },
        "supportedAttributeTypes": n => { filterOperatorSchema.supportedAttributeTypes = n.getCollectionOfEnumValues<AttributeType>(AttributeType); },
    }
}
export interface FilterOperatorSchema extends Entity, Parsable {
    /**
     * The arity property
     */
    arity?: ScopeOperatorType;
    /**
     * The multivaluedComparisonType property
     */
    multivaluedComparisonType?: ScopeOperatorMultiValuedComparisonType;
    /**
     * Attribute types supported by the operator. Possible values are: Boolean, Binary, Reference, Integer, String.
     */
    supportedAttributeTypes?: AttributeType[];
}
export function serializeFilterOperatorSchema(writer: SerializationWriter, filterOperatorSchema: FilterOperatorSchema | undefined = {} as FilterOperatorSchema) : void {
    serializeEntity(writer, filterOperatorSchema)
    writer.writeEnumValue<ScopeOperatorType>("arity", filterOperatorSchema.arity);
    writer.writeEnumValue<ScopeOperatorMultiValuedComparisonType>("multivaluedComparisonType", filterOperatorSchema.multivaluedComparisonType);
    if(filterOperatorSchema.supportedAttributeTypes)
    writer.writeEnumValue<AttributeType>("supportedAttributeTypes", ...filterOperatorSchema.supportedAttributeTypes);
}
// tslint:enable
// eslint-enable
