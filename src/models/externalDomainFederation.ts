// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoIdentitySource, serializeIdentitySource, type IdentitySource } from './identitySource';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createExternalDomainFederationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoExternalDomainFederation;
}
export function deserializeIntoExternalDomainFederation(externalDomainFederation: ExternalDomainFederation | undefined = {} as ExternalDomainFederation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentitySource(externalDomainFederation),
        "displayName": n => { externalDomainFederation.displayName = n.getStringValue(); },
        "domainName": n => { externalDomainFederation.domainName = n.getStringValue(); },
        "issuerUri": n => { externalDomainFederation.issuerUri = n.getStringValue(); },
    }
}
export interface ExternalDomainFederation extends IdentitySource, Parsable {
    /**
     * The name of the identity source, typically also the domain name. Read only.
     */
    displayName?: string;
    /**
     * The domain name. Read only.
     */
    domainName?: string;
    /**
     * The issuerURI of the incoming federation. Read only.
     */
    issuerUri?: string;
}
export function serializeExternalDomainFederation(writer: SerializationWriter, externalDomainFederation: ExternalDomainFederation | undefined = {} as ExternalDomainFederation) : void {
        serializeIdentitySource(writer, externalDomainFederation)
        writer.writeStringValue("displayName", externalDomainFederation.displayName);
        writer.writeStringValue("domainName", externalDomainFederation.domainName);
        writer.writeStringValue("issuerUri", externalDomainFederation.issuerUri);
}
// tslint:enable
// eslint-enable
