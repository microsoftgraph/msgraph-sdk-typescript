// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createInvitationParticipantInfoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoInvitationParticipantInfo;
}
export function deserializeIntoInvitationParticipantInfo(invitationParticipantInfo: InvitationParticipantInfo | undefined = {} as InvitationParticipantInfo) : Record<string, (node: ParseNode) => void> {
    return {
        "hidden": n => { invitationParticipantInfo.hidden = n.getBooleanValue(); },
        "identity": n => { invitationParticipantInfo.identity = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "@odata.type": n => { invitationParticipantInfo.odataType = n.getStringValue(); },
        "participantId": n => { invitationParticipantInfo.participantId = n.getStringValue(); },
        "removeFromDefaultAudioRoutingGroup": n => { invitationParticipantInfo.removeFromDefaultAudioRoutingGroup = n.getBooleanValue(); },
        "replacesCallId": n => { invitationParticipantInfo.replacesCallId = n.getStringValue(); },
    }
}
export interface InvitationParticipantInfo extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Optional. Whether to hide the participant from the roster.
     */
    hidden?: boolean;
    /**
     * The identity property
     */
    identity?: IdentitySet;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Optional. The ID of the target participant.
     */
    participantId?: string;
    /**
     * Optional. Whether to remove them from the main mixer.
     */
    removeFromDefaultAudioRoutingGroup?: boolean;
    /**
     * Optional. The call which the target identity is currently a part of. For peer-to-peer case, the call will be dropped once the participant is added successfully.
     */
    replacesCallId?: string;
}
export function serializeInvitationParticipantInfo(writer: SerializationWriter, invitationParticipantInfo: InvitationParticipantInfo | undefined = {} as InvitationParticipantInfo) : void {
    writer.writeBooleanValue("hidden", invitationParticipantInfo.hidden);
    writer.writeObjectValue<IdentitySet>("identity", invitationParticipantInfo.identity, serializeIdentitySet);
    writer.writeStringValue("@odata.type", invitationParticipantInfo.odataType);
    writer.writeStringValue("participantId", invitationParticipantInfo.participantId);
    writer.writeBooleanValue("removeFromDefaultAudioRoutingGroup", invitationParticipantInfo.removeFromDefaultAudioRoutingGroup);
    writer.writeStringValue("replacesCallId", invitationParticipantInfo.replacesCallId);
    writer.writeAdditionalData(invitationParticipantInfo.additionalData);
}
// tslint:enable
// eslint-enable
