import { createIpRangeFromDiscriminatorValue, serializeIpRange, type IpRange } from './ipRange';
import { deserializeIntoNamedLocation, serializeNamedLocation, type NamedLocation } from './namedLocation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createIpNamedLocationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIpNamedLocation;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoIpNamedLocation(ipNamedLocation: IpNamedLocation | undefined = {} as IpNamedLocation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoNamedLocation(ipNamedLocation),
        "ipRanges": n => { ipNamedLocation.ipRanges = n.getCollectionOfObjectValues<IpRange>(createIpRangeFromDiscriminatorValue); },
        "isTrusted": n => { ipNamedLocation.isTrusted = n.getBooleanValue(); },
    }
}
export interface IpNamedLocation extends NamedLocation, Parsable {
    /**
     * List of IP address ranges in IPv4 CIDR format (e.g. 1.2.3.4/32) or any allowable IPv6 format from IETF RFC5969. Required.
     */
    ipRanges?: IpRange[];
    /**
     * true if this location is explicitly trusted. Optional. Default value is false.
     */
    isTrusted?: boolean;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeIpNamedLocation(writer: SerializationWriter, ipNamedLocation: IpNamedLocation | undefined = {} as IpNamedLocation) : void {
        serializeNamedLocation(writer, ipNamedLocation)
        writer.writeCollectionOfObjectValues<IpRange>("ipRanges", ipNamedLocation.ipRanges, );
        writer.writeBooleanValue("isTrusted", ipNamedLocation.isTrusted);
}
