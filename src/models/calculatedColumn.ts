// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CalculatedColumn extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * For dateTime output types, the format of the value. Possible values are: dateOnly or dateTime.
     */
    format?: string;
    /**
     * The formula used to compute the value for this column.
     */
    formula?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The output type used to format values in this column. Possible values are: boolean, currency, dateTime, number, or text.
     */
    outputType?: string;
}
export function createCalculatedColumnFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCalculatedColumn;
}
export function deserializeIntoCalculatedColumn(calculatedColumn: CalculatedColumn | undefined = {} as CalculatedColumn) : Record<string, (node: ParseNode) => void> {
    return {
        "format": n => { calculatedColumn.format = n.getStringValue(); },
        "formula": n => { calculatedColumn.formula = n.getStringValue(); },
        "@odata.type": n => { calculatedColumn.odataType = n.getStringValue(); },
        "outputType": n => { calculatedColumn.outputType = n.getStringValue(); },
    }
}
export function serializeCalculatedColumn(writer: SerializationWriter, calculatedColumn: CalculatedColumn | undefined = {} as CalculatedColumn) : void {
        writer.writeStringValue("format", calculatedColumn.format);
        writer.writeStringValue("formula", calculatedColumn.formula);
        writer.writeStringValue("@odata.type", calculatedColumn.odataType);
        writer.writeStringValue("outputType", calculatedColumn.outputType);
        writer.writeAdditionalData(calculatedColumn.additionalData);
}
// tslint:enable
// eslint-enable
