// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type OpenShiftItem } from './index';
import { deserializeIntoOpenShiftItem } from './openShiftItem';
import { deserializeIntoScheduleEntity, serializeScheduleEntity, type ScheduleEntity } from './scheduleEntity';
import { createShiftActivityFromDiscriminatorValue, serializeShiftActivity, type ShiftActivity } from './shiftActivity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createShiftItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.openShiftItem":
                    return deserializeIntoOpenShiftItem;
            }
        }
    }
    return deserializeIntoShiftItem;
}
export function deserializeIntoShiftItem(shiftItem: ShiftItem | undefined = {} as ShiftItem) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoScheduleEntity(shiftItem),
        "activities": n => { shiftItem.activities = n.getCollectionOfObjectValues<ShiftActivity>(createShiftActivityFromDiscriminatorValue); },
        "displayName": n => { shiftItem.displayName = n.getStringValue(); },
        "notes": n => { shiftItem.notes = n.getStringValue(); },
    }
}
export function serializeShiftItem(writer: SerializationWriter, shiftItem: ShiftItem | undefined = {} as ShiftItem) : void {
        serializeScheduleEntity(writer, shiftItem)
        writer.writeCollectionOfObjectValues<ShiftActivity>("activities", shiftItem.activities, );
        writer.writeStringValue("displayName", shiftItem.displayName);
        writer.writeStringValue("notes", shiftItem.notes);
}
export interface ShiftItem extends Parsable, ScheduleEntity {
    /**
     * An incremental part of a shift which can cover details of when and where an employee is during their shift. For example, an assignment or a scheduled break or lunch. Required.
     */
    activities?: ShiftActivity[];
    /**
     * The shift label of the shiftItem.
     */
    displayName?: string;
    /**
     * The shift notes for the shiftItem.
     */
    notes?: string;
}
// tslint:enable
// eslint-enable
