// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BookingQuestionAssignment extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The ID of the custom question.
     */
    isRequired?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Indicates whether it's mandatory to answer the custom question.
     */
    questionId?: string;
}
export function createBookingQuestionAssignmentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBookingQuestionAssignment;
}
export function deserializeIntoBookingQuestionAssignment(bookingQuestionAssignment: BookingQuestionAssignment | undefined = {} as BookingQuestionAssignment) : Record<string, (node: ParseNode) => void> {
    return {
        "isRequired": n => { bookingQuestionAssignment.isRequired = n.getBooleanValue(); },
        "@odata.type": n => { bookingQuestionAssignment.odataType = n.getStringValue(); },
        "questionId": n => { bookingQuestionAssignment.questionId = n.getStringValue(); },
    }
}
export function serializeBookingQuestionAssignment(writer: SerializationWriter, bookingQuestionAssignment: BookingQuestionAssignment | undefined = {} as BookingQuestionAssignment) : void {
    writer.writeBooleanValue("isRequired", bookingQuestionAssignment.isRequired);
    writer.writeStringValue("@odata.type", bookingQuestionAssignment.odataType);
    writer.writeStringValue("questionId", bookingQuestionAssignment.questionId);
    writer.writeAdditionalData(bookingQuestionAssignment.additionalData);
}
// tslint:enable
// eslint-enable
