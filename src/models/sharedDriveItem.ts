// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoBaseItem, serializeBaseItem, type BaseItem } from './baseItem';
import { createDriveItemFromDiscriminatorValue, serializeDriveItem, type DriveItem } from './driveItem';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { createListFromDiscriminatorValue, serializeList, type List } from './list';
import { createListItemFromDiscriminatorValue, serializeListItem, type ListItem } from './listItem';
import { createPermissionFromDiscriminatorValue, serializePermission, type Permission } from './permission';
import { createSiteFromDiscriminatorValue, serializeSite, type Site } from './site';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSharedDriveItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSharedDriveItem;
}
export function deserializeIntoSharedDriveItem(sharedDriveItem: SharedDriveItem | undefined = {} as SharedDriveItem) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseItem(sharedDriveItem),
        "driveItem": n => { sharedDriveItem.driveItem = n.getObjectValue<DriveItem>(createDriveItemFromDiscriminatorValue); },
        "items": n => { sharedDriveItem.items = n.getCollectionOfObjectValues<DriveItem>(createDriveItemFromDiscriminatorValue); },
        "list": n => { sharedDriveItem.list = n.getObjectValue<List>(createListFromDiscriminatorValue); },
        "listItem": n => { sharedDriveItem.listItem = n.getObjectValue<ListItem>(createListItemFromDiscriminatorValue); },
        "owner": n => { sharedDriveItem.owner = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "permission": n => { sharedDriveItem.permission = n.getObjectValue<Permission>(createPermissionFromDiscriminatorValue); },
        "root": n => { sharedDriveItem.root = n.getObjectValue<DriveItem>(createDriveItemFromDiscriminatorValue); },
        "site": n => { sharedDriveItem.site = n.getObjectValue<Site>(createSiteFromDiscriminatorValue); },
    }
}
export function serializeSharedDriveItem(writer: SerializationWriter, sharedDriveItem: SharedDriveItem | undefined = {} as SharedDriveItem) : void {
        serializeBaseItem(writer, sharedDriveItem)
        writer.writeObjectValue<DriveItem>("driveItem", sharedDriveItem.driveItem, );
        writer.writeCollectionOfObjectValues<DriveItem>("items", sharedDriveItem.items, );
        writer.writeObjectValue<List>("list", sharedDriveItem.list, );
        writer.writeObjectValue<ListItem>("listItem", sharedDriveItem.listItem, );
        writer.writeObjectValue<IdentitySet>("owner", sharedDriveItem.owner, );
        writer.writeObjectValue<Permission>("permission", sharedDriveItem.permission, );
        writer.writeObjectValue<DriveItem>("root", sharedDriveItem.root, );
        writer.writeObjectValue<Site>("site", sharedDriveItem.site, );
}
export interface SharedDriveItem extends BaseItem, Parsable {
    /**
     * Used to access the underlying driveItem
     */
    driveItem?: DriveItem;
    /**
     * All driveItems contained in the sharing root. This collection cannot be enumerated.
     */
    items?: DriveItem[];
    /**
     * Used to access the underlying list
     */
    list?: List;
    /**
     * Used to access the underlying listItem
     */
    listItem?: ListItem;
    /**
     * Information about the owner of the shared item being referenced.
     */
    owner?: IdentitySet;
    /**
     * Used to access the permission representing the underlying sharing link
     */
    permission?: Permission;
    /**
     * Used to access the underlying driveItem. Deprecated -- use driveItem instead.
     */
    root?: DriveItem;
    /**
     * Used to access the underlying site
     */
    site?: Site;
}
// tslint:enable
// eslint-enable
