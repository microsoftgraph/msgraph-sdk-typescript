// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAttendee } from './attendee';
import { AttendeeType } from './attendeeType';
import { type Attendee } from './index';
import { deserializeIntoRecipient, serializeRecipient, type Recipient } from './recipient';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttendeeBase extends Parsable, Recipient {
    /**
     * The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type.
     */
    type?: AttendeeType;
}
export function createAttendeeBaseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.attendee":
                    return deserializeIntoAttendee;
            }
        }
    }
    return deserializeIntoAttendeeBase;
}
export function deserializeIntoAttendeeBase(attendeeBase: AttendeeBase | undefined = {} as AttendeeBase) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRecipient(attendeeBase),
        "type": n => { attendeeBase.type = n.getEnumValue<AttendeeType>(AttendeeType); },
    }
}
export function serializeAttendeeBase(writer: SerializationWriter, attendeeBase: AttendeeBase | undefined = {} as AttendeeBase) : void {
    serializeRecipient(writer, attendeeBase)
    writer.writeEnumValue<AttendeeType>("type", attendeeBase.type);
}
// tslint:enable
// eslint-enable
