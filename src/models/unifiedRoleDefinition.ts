// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createUnifiedRolePermissionFromDiscriminatorValue, serializeUnifiedRolePermission, type UnifiedRolePermission } from './unifiedRolePermission';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleDefinitionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRoleDefinition;
}
export function deserializeIntoUnifiedRoleDefinition(unifiedRoleDefinition: UnifiedRoleDefinition | undefined = {} as UnifiedRoleDefinition) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(unifiedRoleDefinition),
        "description": n => { unifiedRoleDefinition.description = n.getStringValue(); },
        "displayName": n => { unifiedRoleDefinition.displayName = n.getStringValue(); },
        "inheritsPermissionsFrom": n => { unifiedRoleDefinition.inheritsPermissionsFrom = n.getCollectionOfObjectValues<UnifiedRoleDefinition>(createUnifiedRoleDefinitionFromDiscriminatorValue); },
        "isBuiltIn": n => { unifiedRoleDefinition.isBuiltIn = n.getBooleanValue(); },
        "isEnabled": n => { unifiedRoleDefinition.isEnabled = n.getBooleanValue(); },
        "resourceScopes": n => { unifiedRoleDefinition.resourceScopes = n.getCollectionOfPrimitiveValues<string>(); },
        "rolePermissions": n => { unifiedRoleDefinition.rolePermissions = n.getCollectionOfObjectValues<UnifiedRolePermission>(createUnifiedRolePermissionFromDiscriminatorValue); },
        "templateId": n => { unifiedRoleDefinition.templateId = n.getStringValue(); },
        "version": n => { unifiedRoleDefinition.version = n.getStringValue(); },
    }
}
export function serializeUnifiedRoleDefinition(writer: SerializationWriter, unifiedRoleDefinition: UnifiedRoleDefinition | undefined = {} as UnifiedRoleDefinition) : void {
        serializeEntity(writer, unifiedRoleDefinition)
        writer.writeStringValue("description", unifiedRoleDefinition.description);
        writer.writeStringValue("displayName", unifiedRoleDefinition.displayName);
        writer.writeCollectionOfObjectValues<UnifiedRoleDefinition>("inheritsPermissionsFrom", unifiedRoleDefinition.inheritsPermissionsFrom, serializeUnifiedRoleDefinition);
        writer.writeBooleanValue("isBuiltIn", unifiedRoleDefinition.isBuiltIn);
        writer.writeBooleanValue("isEnabled", unifiedRoleDefinition.isEnabled);
        writer.writeCollectionOfPrimitiveValues<string>("resourceScopes", unifiedRoleDefinition.resourceScopes);
        writer.writeCollectionOfObjectValues<UnifiedRolePermission>("rolePermissions", unifiedRoleDefinition.rolePermissions, serializeUnifiedRolePermission);
        writer.writeStringValue("templateId", unifiedRoleDefinition.templateId);
        writer.writeStringValue("version", unifiedRoleDefinition.version);
}
export interface UnifiedRoleDefinition extends Entity, Parsable {
    /**
     * The description for the unifiedRoleDefinition. Read-only when isBuiltIn is true.
     */
    description?: string;
    /**
     * The display name for the unifiedRoleDefinition. Read-only when isBuiltIn is true. Required.  Supports $filter (eq, in).
     */
    displayName?: string;
    /**
     * Read-only collection of role definitions that the given role definition inherits from. Only Microsoft Entra built-in roles (isBuiltIn is true) support this attribute. Supports $expand.
     */
    inheritsPermissionsFrom?: UnifiedRoleDefinition[];
    /**
     * Flag indicating whether the role definition is part of the default set included in Microsoft Entra or a custom definition. Read-only. Supports $filter (eq, in).
     */
    isBuiltIn?: boolean;
    /**
     * Flag indicating whether the role is enabled for assignment. If false the role is not available for assignment. Read-only when isBuiltIn is true.
     */
    isEnabled?: boolean;
    /**
     * List of the scopes or permissions the role definition applies to. Currently only / is supported. Read-only when isBuiltIn is true. DO NOT USE. This will be deprecated soon. Attach scope to role assignment.
     */
    resourceScopes?: string[];
    /**
     * List of permissions included in the role. Read-only when isBuiltIn is true. Required.
     */
    rolePermissions?: UnifiedRolePermission[];
    /**
     * Custom template identifier that can be set when isBuiltIn is false but is read-only when isBuiltIn is true. This identifier is typically used if one needs an identifier to be the same across different directories.
     */
    templateId?: string;
    /**
     * Indicates version of the role definition. Read-only when isBuiltIn is true.
     */
    version?: string;
}
// tslint:enable
// eslint-enable
