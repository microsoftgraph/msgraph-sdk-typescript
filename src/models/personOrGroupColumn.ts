// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPersonOrGroupColumnFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPersonOrGroupColumn;
}
export function deserializeIntoPersonOrGroupColumn(personOrGroupColumn: PersonOrGroupColumn | undefined = {} as PersonOrGroupColumn) : Record<string, (node: ParseNode) => void> {
    return {
        "allowMultipleSelection": n => { personOrGroupColumn.allowMultipleSelection = n.getBooleanValue(); },
        "chooseFromType": n => { personOrGroupColumn.chooseFromType = n.getStringValue(); },
        "displayAs": n => { personOrGroupColumn.displayAs = n.getStringValue(); },
        "@odata.type": n => { personOrGroupColumn.odataType = n.getStringValue(); },
    }
}
export interface PersonOrGroupColumn extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates whether multiple values can be selected from the source.
     */
    allowMultipleSelection?: boolean;
    /**
     * Whether to allow selection of people only, or people and groups. Must be one of peopleAndGroups or peopleOnly.
     */
    chooseFromType?: string;
    /**
     * How to display the information about the person or group chosen. See below.
     */
    displayAs?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializePersonOrGroupColumn(writer: SerializationWriter, personOrGroupColumn: PersonOrGroupColumn | undefined = {} as PersonOrGroupColumn) : void {
        writer.writeBooleanValue("allowMultipleSelection", personOrGroupColumn.allowMultipleSelection);
        writer.writeStringValue("chooseFromType", personOrGroupColumn.chooseFromType);
        writer.writeStringValue("displayAs", personOrGroupColumn.displayAs);
        writer.writeStringValue("@odata.type", personOrGroupColumn.odataType);
        writer.writeAdditionalData(personOrGroupColumn.additionalData);
}
// tslint:enable
// eslint-enable
