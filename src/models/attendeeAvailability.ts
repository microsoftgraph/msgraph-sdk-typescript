// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttendeeBaseFromDiscriminatorValue, serializeAttendeeBase, type AttendeeBase } from './attendeeBase';
import { FreeBusyStatus } from './freeBusyStatus';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttendeeAvailability extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email address and type of attendee - whether it's a person or a resource, and whether required or optional if it's a person.
     */
    attendee?: AttendeeBase;
    /**
     * The availability status of the attendee. The possible values are: free, tentative, busy, oof, workingElsewhere, unknown.
     */
    availability?: FreeBusyStatus;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createAttendeeAvailabilityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttendeeAvailability;
}
export function deserializeIntoAttendeeAvailability(attendeeAvailability: AttendeeAvailability | undefined = {} as AttendeeAvailability) : Record<string, (node: ParseNode) => void> {
    return {
        "attendee": n => { attendeeAvailability.attendee = n.getObjectValue<AttendeeBase>(createAttendeeBaseFromDiscriminatorValue); },
        "availability": n => { attendeeAvailability.availability = n.getEnumValue<FreeBusyStatus>(FreeBusyStatus); },
        "@odata.type": n => { attendeeAvailability.odataType = n.getStringValue(); },
    }
}
export function serializeAttendeeAvailability(writer: SerializationWriter, attendeeAvailability: AttendeeAvailability | undefined = {} as AttendeeAvailability) : void {
        writer.writeObjectValue<AttendeeBase>("attendee", attendeeAvailability.attendee, );
        writer.writeEnumValue<FreeBusyStatus>("availability", attendeeAvailability.availability);
        writer.writeStringValue("@odata.type", attendeeAvailability.odataType);
        writer.writeAdditionalData(attendeeAvailability.additionalData);
}
// tslint:enable
// eslint-enable
