// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { SimulationAutomationRunStatus } from './simulationAutomationRunStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSimulationAutomationRunFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSimulationAutomationRun;
}
export function deserializeIntoSimulationAutomationRun(simulationAutomationRun: SimulationAutomationRun | undefined = {} as SimulationAutomationRun) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(simulationAutomationRun),
        "endDateTime": n => { simulationAutomationRun.endDateTime = n.getDateValue(); },
        "simulationId": n => { simulationAutomationRun.simulationId = n.getStringValue(); },
        "startDateTime": n => { simulationAutomationRun.startDateTime = n.getDateValue(); },
        "status": n => { simulationAutomationRun.status = n.getEnumValue<SimulationAutomationRunStatus>(SimulationAutomationRunStatus); },
    }
}
export function serializeSimulationAutomationRun(writer: SerializationWriter, simulationAutomationRun: SimulationAutomationRun | undefined = {} as SimulationAutomationRun) : void {
        serializeEntity(writer, simulationAutomationRun)
        writer.writeDateValue("endDateTime", simulationAutomationRun.endDateTime);
        writer.writeStringValue("simulationId", simulationAutomationRun.simulationId);
        writer.writeDateValue("startDateTime", simulationAutomationRun.startDateTime);
        writer.writeEnumValue<SimulationAutomationRunStatus>("status", simulationAutomationRun.status);
}
export interface SimulationAutomationRun extends Entity, Parsable {
    /**
     * Date and time when the run ends in an attack simulation automation.
     */
    endDateTime?: Date;
    /**
     * Unique identifier for the attack simulation campaign initiated in the attack simulation automation run.
     */
    simulationId?: string;
    /**
     * Date and time when the run starts in an attack simulation automation.
     */
    startDateTime?: Date;
    /**
     * Status of the attack simulation automation run. The possible values are: unknown, running, succeeded, failed, skipped, unknownFutureValue.
     */
    status?: SimulationAutomationRunStatus;
}
// tslint:enable
// eslint-enable
