// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPendingContentUpdateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPendingContentUpdate;
}
export function deserializeIntoPendingContentUpdate(pendingContentUpdate: PendingContentUpdate | undefined = {} as PendingContentUpdate) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { pendingContentUpdate.odataType = n.getStringValue(); },
        "queuedDateTime": n => { pendingContentUpdate.queuedDateTime = n.getDateValue(); },
    }
}
export interface PendingContentUpdate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Date and time the pending binary operation was queued in UTC time. Read-only.
     */
    queuedDateTime?: Date;
}
export function serializePendingContentUpdate(writer: SerializationWriter, pendingContentUpdate: PendingContentUpdate | undefined = {} as PendingContentUpdate) : void {
    writer.writeStringValue("@odata.type", pendingContentUpdate.odataType);
    writer.writeDateValue("queuedDateTime", pendingContentUpdate.queuedDateTime);
    writer.writeAdditionalData(pendingContentUpdate.additionalData);
}
// tslint:enable
// eslint-enable
