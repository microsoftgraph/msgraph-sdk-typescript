// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createRbacApplicationFromDiscriminatorValue, serializeRbacApplication, type RbacApplication } from './rbacApplication';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRoleManagementFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRoleManagement;
}
export function deserializeIntoRoleManagement(roleManagement: RoleManagement | undefined = {} as RoleManagement) : Record<string, (node: ParseNode) => void> {
    return {
        "directory": n => { roleManagement.directory = n.getObjectValue<RbacApplication>(createRbacApplicationFromDiscriminatorValue); },
        "entitlementManagement": n => { roleManagement.entitlementManagement = n.getObjectValue<RbacApplication>(createRbacApplicationFromDiscriminatorValue); },
        "@odata.type": n => { roleManagement.odataType = n.getStringValue(); },
    }
}
export interface RoleManagement extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The directory property
     */
    directory?: RbacApplication;
    /**
     * Container for roles and assignments for entitlement management resources.
     */
    entitlementManagement?: RbacApplication;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeRoleManagement(writer: SerializationWriter, roleManagement: RoleManagement | undefined = {} as RoleManagement) : void {
        writer.writeObjectValue<RbacApplication>("directory", roleManagement.directory, );
        writer.writeObjectValue<RbacApplication>("entitlementManagement", roleManagement.entitlementManagement, );
        writer.writeStringValue("@odata.type", roleManagement.odataType);
        writer.writeAdditionalData(roleManagement.additionalData);
}
// tslint:enable
// eslint-enable
