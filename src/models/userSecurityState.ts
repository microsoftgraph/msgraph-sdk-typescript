// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { EmailRole } from './emailRole';
import { LogonType } from './logonType';
import { UserAccountSecurityType } from './userAccountSecurityType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserSecurityStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserSecurityState;
}
export function deserializeIntoUserSecurityState(userSecurityState: UserSecurityState | undefined = {} as UserSecurityState) : Record<string, (node: ParseNode) => void> {
    return {
        "aadUserId": n => { userSecurityState.aadUserId = n.getStringValue(); },
        "accountName": n => { userSecurityState.accountName = n.getStringValue(); },
        "domainName": n => { userSecurityState.domainName = n.getStringValue(); },
        "emailRole": n => { userSecurityState.emailRole = n.getEnumValue<EmailRole>(EmailRole); },
        "isVpn": n => { userSecurityState.isVpn = n.getBooleanValue(); },
        "logonDateTime": n => { userSecurityState.logonDateTime = n.getDateValue(); },
        "logonId": n => { userSecurityState.logonId = n.getStringValue(); },
        "logonIp": n => { userSecurityState.logonIp = n.getStringValue(); },
        "logonLocation": n => { userSecurityState.logonLocation = n.getStringValue(); },
        "logonType": n => { userSecurityState.logonType = n.getEnumValue<LogonType>(LogonType); },
        "@odata.type": n => { userSecurityState.odataType = n.getStringValue(); },
        "onPremisesSecurityIdentifier": n => { userSecurityState.onPremisesSecurityIdentifier = n.getStringValue(); },
        "riskScore": n => { userSecurityState.riskScore = n.getStringValue(); },
        "userAccountType": n => { userSecurityState.userAccountType = n.getEnumValue<UserAccountSecurityType>(UserAccountSecurityType); },
        "userPrincipalName": n => { userSecurityState.userPrincipalName = n.getStringValue(); },
    }
}
export function serializeUserSecurityState(writer: SerializationWriter, userSecurityState: UserSecurityState | undefined = {} as UserSecurityState) : void {
    writer.writeStringValue("aadUserId", userSecurityState.aadUserId);
    writer.writeStringValue("accountName", userSecurityState.accountName);
    writer.writeStringValue("domainName", userSecurityState.domainName);
    writer.writeEnumValue<EmailRole>("emailRole", userSecurityState.emailRole);
    writer.writeBooleanValue("isVpn", userSecurityState.isVpn);
    writer.writeDateValue("logonDateTime", userSecurityState.logonDateTime);
    writer.writeStringValue("logonId", userSecurityState.logonId);
    writer.writeStringValue("logonIp", userSecurityState.logonIp);
    writer.writeStringValue("logonLocation", userSecurityState.logonLocation);
    writer.writeEnumValue<LogonType>("logonType", userSecurityState.logonType);
    writer.writeStringValue("@odata.type", userSecurityState.odataType);
    writer.writeStringValue("onPremisesSecurityIdentifier", userSecurityState.onPremisesSecurityIdentifier);
    writer.writeStringValue("riskScore", userSecurityState.riskScore);
    writer.writeEnumValue<UserAccountSecurityType>("userAccountType", userSecurityState.userAccountType);
    writer.writeStringValue("userPrincipalName", userSecurityState.userPrincipalName);
    writer.writeAdditionalData(userSecurityState.additionalData);
}
export interface UserSecurityState extends AdditionalDataHolder, Parsable {
    /**
     * AAD User object identifier (GUID) - represents the physical/multi-account user entity.
     */
    aadUserId?: string;
    /**
     * Account name of user account (without Active Directory domain or DNS domain) - (also called mailNickName).
     */
    accountName?: string;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * NetBIOS/Active Directory domain of user account (that is, domain/account format).
     */
    domainName?: string;
    /**
     * For email-related alerts - user account's email 'role'. Possible values are: unknown, sender, recipient.
     */
    emailRole?: EmailRole;
    /**
     * Indicates whether the user logged on through a VPN.
     */
    isVpn?: boolean;
    /**
     * Time at which the sign-in occurred. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    logonDateTime?: Date;
    /**
     * User sign-in ID.
     */
    logonId?: string;
    /**
     * IP Address the sign-in request originated from.
     */
    logonIp?: string;
    /**
     * Location (by IP address mapping) associated with a user sign-in event by this user.
     */
    logonLocation?: string;
    /**
     * Method of user sign in. Possible values are: unknown, interactive, remoteInteractive, network, batch, service.
     */
    logonType?: LogonType;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Active Directory (on-premises) Security Identifier (SID) of the user.
     */
    onPremisesSecurityIdentifier?: string;
    /**
     * Provider-generated/calculated risk score of the user account. Recommended value range of 0-1, which equates to a percentage.
     */
    riskScore?: string;
    /**
     * User account type (group membership), per Windows definition. Possible values are: unknown, standard, power, administrator.
     */
    userAccountType?: UserAccountSecurityType;
    /**
     * User sign-in name - internet format: (user account name)@(user account DNS domain name).
     */
    userPrincipalName?: string;
}
// tslint:enable
// eslint-enable
