// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createMimeContentFromDiscriminatorValue, serializeMimeContent, type MimeContent } from './mimeContent';
import { createRgbColorFromDiscriminatorValue, serializeRgbColor, type RgbColor } from './rgbColor';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIntuneBrandFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIntuneBrand;
}
export function deserializeIntoIntuneBrand(intuneBrand: IntuneBrand | undefined = {} as IntuneBrand) : Record<string, (node: ParseNode) => void> {
    return {
        "contactITEmailAddress": n => { intuneBrand.contactITEmailAddress = n.getStringValue(); },
        "contactITName": n => { intuneBrand.contactITName = n.getStringValue(); },
        "contactITNotes": n => { intuneBrand.contactITNotes = n.getStringValue(); },
        "contactITPhoneNumber": n => { intuneBrand.contactITPhoneNumber = n.getStringValue(); },
        "darkBackgroundLogo": n => { intuneBrand.darkBackgroundLogo = n.getObjectValue<MimeContent>(createMimeContentFromDiscriminatorValue); },
        "displayName": n => { intuneBrand.displayName = n.getStringValue(); },
        "lightBackgroundLogo": n => { intuneBrand.lightBackgroundLogo = n.getObjectValue<MimeContent>(createMimeContentFromDiscriminatorValue); },
        "@odata.type": n => { intuneBrand.odataType = n.getStringValue(); },
        "onlineSupportSiteName": n => { intuneBrand.onlineSupportSiteName = n.getStringValue(); },
        "onlineSupportSiteUrl": n => { intuneBrand.onlineSupportSiteUrl = n.getStringValue(); },
        "privacyUrl": n => { intuneBrand.privacyUrl = n.getStringValue(); },
        "showDisplayNameNextToLogo": n => { intuneBrand.showDisplayNameNextToLogo = n.getBooleanValue(); },
        "showLogo": n => { intuneBrand.showLogo = n.getBooleanValue(); },
        "showNameNextToLogo": n => { intuneBrand.showNameNextToLogo = n.getBooleanValue(); },
        "themeColor": n => { intuneBrand.themeColor = n.getObjectValue<RgbColor>(createRgbColorFromDiscriminatorValue); },
    }
}
export interface IntuneBrand extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Email address of the person/organization responsible for IT support.
     */
    contactITEmailAddress?: string;
    /**
     * Name of the person/organization responsible for IT support.
     */
    contactITName?: string;
    /**
     * Text comments regarding the person/organization responsible for IT support.
     */
    contactITNotes?: string;
    /**
     * Phone number of the person/organization responsible for IT support.
     */
    contactITPhoneNumber?: string;
    /**
     * Logo image displayed in Company Portal apps which have a dark background behind the logo.
     */
    darkBackgroundLogo?: MimeContent;
    /**
     * Company/organization name that is displayed to end users.
     */
    displayName?: string;
    /**
     * Logo image displayed in Company Portal apps which have a light background behind the logo.
     */
    lightBackgroundLogo?: MimeContent;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Display name of the company/organization’s IT helpdesk site.
     */
    onlineSupportSiteName?: string;
    /**
     * URL to the company/organization’s IT helpdesk site.
     */
    onlineSupportSiteUrl?: string;
    /**
     * URL to the company/organization’s privacy policy.
     */
    privacyUrl?: string;
    /**
     * Boolean that represents whether the administrator-supplied display name will be shown next to the logo image.
     */
    showDisplayNameNextToLogo?: boolean;
    /**
     * Boolean that represents whether the administrator-supplied logo images are shown or not shown.
     */
    showLogo?: boolean;
    /**
     * Boolean that represents whether the administrator-supplied display name will be shown next to the logo image.
     */
    showNameNextToLogo?: boolean;
    /**
     * Primary theme color used in the Company Portal applications and web portal.
     */
    themeColor?: RgbColor;
}
export function serializeIntuneBrand(writer: SerializationWriter, intuneBrand: IntuneBrand | undefined = {} as IntuneBrand) : void {
        writer.writeStringValue("contactITEmailAddress", intuneBrand.contactITEmailAddress);
        writer.writeStringValue("contactITName", intuneBrand.contactITName);
        writer.writeStringValue("contactITNotes", intuneBrand.contactITNotes);
        writer.writeStringValue("contactITPhoneNumber", intuneBrand.contactITPhoneNumber);
        writer.writeObjectValue<MimeContent>("darkBackgroundLogo", intuneBrand.darkBackgroundLogo, );
        writer.writeStringValue("displayName", intuneBrand.displayName);
        writer.writeObjectValue<MimeContent>("lightBackgroundLogo", intuneBrand.lightBackgroundLogo, );
        writer.writeStringValue("@odata.type", intuneBrand.odataType);
        writer.writeStringValue("onlineSupportSiteName", intuneBrand.onlineSupportSiteName);
        writer.writeStringValue("onlineSupportSiteUrl", intuneBrand.onlineSupportSiteUrl);
        writer.writeStringValue("privacyUrl", intuneBrand.privacyUrl);
        writer.writeBooleanValue("showDisplayNameNextToLogo", intuneBrand.showDisplayNameNextToLogo);
        writer.writeBooleanValue("showLogo", intuneBrand.showLogo);
        writer.writeBooleanValue("showNameNextToLogo", intuneBrand.showNameNextToLogo);
        writer.writeObjectValue<RgbColor>("themeColor", intuneBrand.themeColor, );
        writer.writeAdditionalData(intuneBrand.additionalData);
}
// tslint:enable
// eslint-enable
