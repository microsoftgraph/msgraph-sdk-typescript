// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSecurityVendorInformationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSecurityVendorInformation;
}
export function deserializeIntoSecurityVendorInformation(securityVendorInformation: SecurityVendorInformation | undefined = {} as SecurityVendorInformation) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { securityVendorInformation.odataType = n.getStringValue(); },
        "provider": n => { securityVendorInformation.provider = n.getStringValue(); },
        "providerVersion": n => { securityVendorInformation.providerVersion = n.getStringValue(); },
        "subProvider": n => { securityVendorInformation.subProvider = n.getStringValue(); },
        "vendor": n => { securityVendorInformation.vendor = n.getStringValue(); },
    }
}
export interface SecurityVendorInformation extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Specific provider (product/service - not vendor company); for example, WindowsDefenderATP.
     */
    provider?: string;
    /**
     * Version of the provider or subprovider, if it exists, that generated the alert. Required
     */
    providerVersion?: string;
    /**
     * Specific subprovider (under aggregating provider); for example, WindowsDefenderATP.SmartScreen.
     */
    subProvider?: string;
    /**
     * Name of the alert vendor (for example, Microsoft, Dell, FireEye). Required
     */
    vendor?: string;
}
export function serializeSecurityVendorInformation(writer: SerializationWriter, securityVendorInformation: SecurityVendorInformation | undefined = {} as SecurityVendorInformation) : void {
        writer.writeStringValue("@odata.type", securityVendorInformation.odataType);
        writer.writeStringValue("provider", securityVendorInformation.provider);
        writer.writeStringValue("providerVersion", securityVendorInformation.providerVersion);
        writer.writeStringValue("subProvider", securityVendorInformation.subProvider);
        writer.writeStringValue("vendor", securityVendorInformation.vendor);
        writer.writeAdditionalData(securityVendorInformation.additionalData);
}
// tslint:enable
// eslint-enable
