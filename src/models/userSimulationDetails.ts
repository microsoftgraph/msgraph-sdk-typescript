// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAttackSimulationUserFromDiscriminatorValue, serializeAttackSimulationUser, type AttackSimulationUser } from './attackSimulationUser';
import { createUserSimulationEventInfoFromDiscriminatorValue, serializeUserSimulationEventInfo, type UserSimulationEventInfo } from './userSimulationEventInfo';
import { createUserTrainingEventInfoFromDiscriminatorValue, serializeUserTrainingEventInfo, type UserTrainingEventInfo } from './userTrainingEventInfo';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserSimulationDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserSimulationDetails;
}
export function deserializeIntoUserSimulationDetails(userSimulationDetails: UserSimulationDetails | undefined = {} as UserSimulationDetails) : Record<string, (node: ParseNode) => void> {
    return {
        "assignedTrainingsCount": n => { userSimulationDetails.assignedTrainingsCount = n.getNumberValue(); },
        "completedTrainingsCount": n => { userSimulationDetails.completedTrainingsCount = n.getNumberValue(); },
        "compromisedDateTime": n => { userSimulationDetails.compromisedDateTime = n.getDateValue(); },
        "inProgressTrainingsCount": n => { userSimulationDetails.inProgressTrainingsCount = n.getNumberValue(); },
        "isCompromised": n => { userSimulationDetails.isCompromised = n.getBooleanValue(); },
        "@odata.type": n => { userSimulationDetails.odataType = n.getStringValue(); },
        "reportedPhishDateTime": n => { userSimulationDetails.reportedPhishDateTime = n.getDateValue(); },
        "simulationEvents": n => { userSimulationDetails.simulationEvents = n.getCollectionOfObjectValues<UserSimulationEventInfo>(createUserSimulationEventInfoFromDiscriminatorValue); },
        "simulationUser": n => { userSimulationDetails.simulationUser = n.getObjectValue<AttackSimulationUser>(createAttackSimulationUserFromDiscriminatorValue); },
        "trainingEvents": n => { userSimulationDetails.trainingEvents = n.getCollectionOfObjectValues<UserTrainingEventInfo>(createUserTrainingEventInfoFromDiscriminatorValue); },
    }
}
export function serializeUserSimulationDetails(writer: SerializationWriter, userSimulationDetails: UserSimulationDetails | undefined = {} as UserSimulationDetails) : void {
    writer.writeNumberValue("assignedTrainingsCount", userSimulationDetails.assignedTrainingsCount);
    writer.writeNumberValue("completedTrainingsCount", userSimulationDetails.completedTrainingsCount);
    writer.writeDateValue("compromisedDateTime", userSimulationDetails.compromisedDateTime);
    writer.writeNumberValue("inProgressTrainingsCount", userSimulationDetails.inProgressTrainingsCount);
    writer.writeBooleanValue("isCompromised", userSimulationDetails.isCompromised);
    writer.writeStringValue("@odata.type", userSimulationDetails.odataType);
    writer.writeDateValue("reportedPhishDateTime", userSimulationDetails.reportedPhishDateTime);
    writer.writeCollectionOfObjectValues<UserSimulationEventInfo>("simulationEvents", userSimulationDetails.simulationEvents, serializeUserSimulationEventInfo);
    writer.writeObjectValue<AttackSimulationUser>("simulationUser", userSimulationDetails.simulationUser, serializeAttackSimulationUser);
    writer.writeCollectionOfObjectValues<UserTrainingEventInfo>("trainingEvents", userSimulationDetails.trainingEvents, serializeUserTrainingEventInfo);
    writer.writeAdditionalData(userSimulationDetails.additionalData);
}
export interface UserSimulationDetails extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Number of trainings assigned to a user in an attack simulation and training campaign.
     */
    assignedTrainingsCount?: number;
    /**
     * Number of trainings completed by a user in an attack simulation and training campaign.
     */
    completedTrainingsCount?: number;
    /**
     * Date and time of the compromising online action by a user in an attack simulation and training campaign.
     */
    compromisedDateTime?: Date;
    /**
     * Number of trainings in progress by a user in an attack simulation and training campaign.
     */
    inProgressTrainingsCount?: number;
    /**
     * Indicates whether a user was compromised in an attack simulation and training campaign.
     */
    isCompromised?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Date and time when a user reported the delivered payload as phishing in the attack simulation and training campaign.
     */
    reportedPhishDateTime?: Date;
    /**
     * List of simulation events of a user in the attack simulation and training campaign.
     */
    simulationEvents?: UserSimulationEventInfo[];
    /**
     * User in an attack simulation and training campaign.
     */
    simulationUser?: AttackSimulationUser;
    /**
     * List of training events of a user in the attack simulation and training campaign.
     */
    trainingEvents?: UserTrainingEventInfo[];
}
// tslint:enable
// eslint-enable
