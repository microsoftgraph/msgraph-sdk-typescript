// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessReviewReviewerScope extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The query specifying who will be the reviewer.
     */
    query?: string;
    /**
     * In the scenario where reviewers need to be specified dynamically, this property is used to indicate the relative source of the query. This property is only required if a relative query, for example, ./manager, is specified. Possible value: decisions.
     */
    queryRoot?: string;
    /**
     * The type of query. Examples include MicrosoftGraph and ARM.
     */
    queryType?: string;
}
export function createAccessReviewReviewerScopeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessReviewReviewerScope;
}
export function deserializeIntoAccessReviewReviewerScope(accessReviewReviewerScope: AccessReviewReviewerScope | undefined = {} as AccessReviewReviewerScope) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { accessReviewReviewerScope.odataType = n.getStringValue(); },
        "query": n => { accessReviewReviewerScope.query = n.getStringValue(); },
        "queryRoot": n => { accessReviewReviewerScope.queryRoot = n.getStringValue(); },
        "queryType": n => { accessReviewReviewerScope.queryType = n.getStringValue(); },
    }
}
export function serializeAccessReviewReviewerScope(writer: SerializationWriter, accessReviewReviewerScope: AccessReviewReviewerScope | undefined = {} as AccessReviewReviewerScope) : void {
    writer.writeStringValue("@odata.type", accessReviewReviewerScope.odataType);
    writer.writeStringValue("query", accessReviewReviewerScope.query);
    writer.writeStringValue("queryRoot", accessReviewReviewerScope.queryRoot);
    writer.writeStringValue("queryType", accessReviewReviewerScope.queryType);
    writer.writeAdditionalData(accessReviewReviewerScope.additionalData);
}
// tslint:enable
// eslint-enable
