// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPersonTypeFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPersonType;
}
export function deserializeIntoPersonType(personType: PersonType | undefined = {} as PersonType) : Record<string, (node: ParseNode) => void> {
    return {
        "class": n => { personType.classEscaped = n.getStringValue(); },
        "@odata.type": n => { personType.odataType = n.getStringValue(); },
        "subclass": n => { personType.subclass = n.getStringValue(); },
    }
}
export interface PersonType extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The type of data source, such as Person.
     */
    classEscaped?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The secondary type of data source, such as OrganizationUser.
     */
    subclass?: string;
}
export function serializePersonType(writer: SerializationWriter, personType: PersonType | undefined = {} as PersonType) : void {
    writer.writeStringValue("class", personType.classEscaped);
    writer.writeStringValue("@odata.type", personType.odataType);
    writer.writeStringValue("subclass", personType.subclass);
    writer.writeAdditionalData(personType.additionalData);
}
// tslint:enable
// eslint-enable
