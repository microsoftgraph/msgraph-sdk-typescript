// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPrintConnectorFromDiscriminatorValue, serializePrintConnector, type PrintConnector } from './printConnector';
import { deserializeIntoPrinterBase, serializePrinterBase, type PrinterBase } from './printerBase';
import { createPrinterShareFromDiscriminatorValue, serializePrinterShare, type PrinterShare } from './printerShare';
import { createPrintTaskTriggerFromDiscriminatorValue, serializePrintTaskTrigger, type PrintTaskTrigger } from './printTaskTrigger';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrinterFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrinter;
}
export function deserializeIntoPrinter(printer: Printer | undefined = {} as Printer) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPrinterBase(printer),
        "connectors": n => { printer.connectors = n.getCollectionOfObjectValues<PrintConnector>(createPrintConnectorFromDiscriminatorValue); },
        "hasPhysicalDevice": n => { printer.hasPhysicalDevice = n.getBooleanValue(); },
        "isShared": n => { printer.isShared = n.getBooleanValue(); },
        "lastSeenDateTime": n => { printer.lastSeenDateTime = n.getDateValue(); },
        "registeredDateTime": n => { printer.registeredDateTime = n.getDateValue(); },
        "shares": n => { printer.shares = n.getCollectionOfObjectValues<PrinterShare>(createPrinterShareFromDiscriminatorValue); },
        "taskTriggers": n => { printer.taskTriggers = n.getCollectionOfObjectValues<PrintTaskTrigger>(createPrintTaskTriggerFromDiscriminatorValue); },
    }
}
export interface Printer extends Parsable, PrinterBase {
    /**
     * The connectors that are associated with the printer.
     */
    connectors?: PrintConnector[];
    /**
     * True if the printer has a physical device for printing. Read-only.
     */
    hasPhysicalDevice?: boolean;
    /**
     * True if the printer is shared; false otherwise. Read-only.
     */
    isShared?: boolean;
    /**
     * The most recent dateTimeOffset when a printer interacted with Universal Print. Read-only.
     */
    lastSeenDateTime?: Date;
    /**
     * The DateTimeOffset when the printer was registered. Read-only.
     */
    registeredDateTime?: Date;
    /**
     * The list of printerShares that are associated with the printer. Currently, only one printerShare can be associated with the printer. Read-only. Nullable.
     */
    shares?: PrinterShare[];
    /**
     * A list of task triggers that are associated with the printer.
     */
    taskTriggers?: PrintTaskTrigger[];
}
export function serializePrinter(writer: SerializationWriter, printer: Printer | undefined = {} as Printer) : void {
        serializePrinterBase(writer, printer)
        writer.writeCollectionOfObjectValues<PrintConnector>("connectors", printer.connectors, );
        writer.writeBooleanValue("hasPhysicalDevice", printer.hasPhysicalDevice);
        writer.writeBooleanValue("isShared", printer.isShared);
        writer.writeDateValue("lastSeenDateTime", printer.lastSeenDateTime);
        writer.writeDateValue("registeredDateTime", printer.registeredDateTime);
        writer.writeCollectionOfObjectValues<PrinterShare>("shares", printer.shares, );
        writer.writeCollectionOfObjectValues<PrintTaskTrigger>("taskTriggers", printer.taskTriggers, );
}
// tslint:enable
// eslint-enable
