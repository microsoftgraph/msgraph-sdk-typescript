// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createWorkbookChartTitleFormatFromDiscriminatorValue, serializeWorkbookChartTitleFormat, type WorkbookChartTitleFormat } from './workbookChartTitleFormat';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookChartTitleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookChartTitle;
}
export function deserializeIntoWorkbookChartTitle(workbookChartTitle: WorkbookChartTitle | undefined = {} as WorkbookChartTitle) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartTitle),
        "format": n => { workbookChartTitle.format = n.getObjectValue<WorkbookChartTitleFormat>(createWorkbookChartTitleFormatFromDiscriminatorValue); },
        "overlay": n => { workbookChartTitle.overlay = n.getBooleanValue(); },
        "text": n => { workbookChartTitle.text = n.getStringValue(); },
        "visible": n => { workbookChartTitle.visible = n.getBooleanValue(); },
    }
}
export function serializeWorkbookChartTitle(writer: SerializationWriter, workbookChartTitle: WorkbookChartTitle | undefined = {} as WorkbookChartTitle) : void {
        serializeEntity(writer, workbookChartTitle)
        writer.writeObjectValue<WorkbookChartTitleFormat>("format", workbookChartTitle.format, );
        writer.writeBooleanValue("overlay", workbookChartTitle.overlay);
        writer.writeStringValue("text", workbookChartTitle.text);
        writer.writeBooleanValue("visible", workbookChartTitle.visible);
}
export interface WorkbookChartTitle extends Entity, Parsable {
    /**
     * Represents the formatting of a chart title, which includes fill and font formatting. Read-only.
     */
    format?: WorkbookChartTitleFormat;
    /**
     * Boolean value representing if the chart title will overlay the chart or not.
     */
    overlay?: boolean;
    /**
     * Represents the title text of a chart.
     */
    text?: string;
    /**
     * A boolean value that represents the visibility of a chart title object.
     */
    visible?: boolean;
}
// tslint:enable
// eslint-enable
