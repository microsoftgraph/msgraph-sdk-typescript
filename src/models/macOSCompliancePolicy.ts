// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDeviceCompliancePolicy, serializeDeviceCompliancePolicy, type DeviceCompliancePolicy } from './deviceCompliancePolicy';
import { DeviceThreatProtectionLevel } from './deviceThreatProtectionLevel';
import { RequiredPasswordType } from './requiredPasswordType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMacOSCompliancePolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMacOSCompliancePolicy;
}
export function deserializeIntoMacOSCompliancePolicy(macOSCompliancePolicy: MacOSCompliancePolicy | undefined = {} as MacOSCompliancePolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceCompliancePolicy(macOSCompliancePolicy),
        "deviceThreatProtectionEnabled": n => { macOSCompliancePolicy.deviceThreatProtectionEnabled = n.getBooleanValue(); },
        "deviceThreatProtectionRequiredSecurityLevel": n => { macOSCompliancePolicy.deviceThreatProtectionRequiredSecurityLevel = n.getEnumValue<DeviceThreatProtectionLevel>(DeviceThreatProtectionLevel); },
        "firewallBlockAllIncoming": n => { macOSCompliancePolicy.firewallBlockAllIncoming = n.getBooleanValue(); },
        "firewallEnabled": n => { macOSCompliancePolicy.firewallEnabled = n.getBooleanValue(); },
        "firewallEnableStealthMode": n => { macOSCompliancePolicy.firewallEnableStealthMode = n.getBooleanValue(); },
        "osMaximumVersion": n => { macOSCompliancePolicy.osMaximumVersion = n.getStringValue(); },
        "osMinimumVersion": n => { macOSCompliancePolicy.osMinimumVersion = n.getStringValue(); },
        "passwordBlockSimple": n => { macOSCompliancePolicy.passwordBlockSimple = n.getBooleanValue(); },
        "passwordExpirationDays": n => { macOSCompliancePolicy.passwordExpirationDays = n.getNumberValue(); },
        "passwordMinimumCharacterSetCount": n => { macOSCompliancePolicy.passwordMinimumCharacterSetCount = n.getNumberValue(); },
        "passwordMinimumLength": n => { macOSCompliancePolicy.passwordMinimumLength = n.getNumberValue(); },
        "passwordMinutesOfInactivityBeforeLock": n => { macOSCompliancePolicy.passwordMinutesOfInactivityBeforeLock = n.getNumberValue(); },
        "passwordPreviousPasswordBlockCount": n => { macOSCompliancePolicy.passwordPreviousPasswordBlockCount = n.getNumberValue(); },
        "passwordRequired": n => { macOSCompliancePolicy.passwordRequired = n.getBooleanValue(); },
        "passwordRequiredType": n => { macOSCompliancePolicy.passwordRequiredType = n.getEnumValue<RequiredPasswordType>(RequiredPasswordType); },
        "storageRequireEncryption": n => { macOSCompliancePolicy.storageRequireEncryption = n.getBooleanValue(); },
        "systemIntegrityProtectionEnabled": n => { macOSCompliancePolicy.systemIntegrityProtectionEnabled = n.getBooleanValue(); },
    }
}
export interface MacOSCompliancePolicy extends DeviceCompliancePolicy, Parsable {
    /**
     * Require that devices have enabled device threat protection.
     */
    deviceThreatProtectionEnabled?: boolean;
    /**
     * Device threat protection levels for the Device Threat Protection API.
     */
    deviceThreatProtectionRequiredSecurityLevel?: DeviceThreatProtectionLevel;
    /**
     * Corresponds to the 'Block all incoming connections' option.
     */
    firewallBlockAllIncoming?: boolean;
    /**
     * Whether the firewall should be enabled or not.
     */
    firewallEnabled?: boolean;
    /**
     * Corresponds to 'Enable stealth mode.'
     */
    firewallEnableStealthMode?: boolean;
    /**
     * Maximum MacOS version.
     */
    osMaximumVersion?: string;
    /**
     * Minimum MacOS version.
     */
    osMinimumVersion?: string;
    /**
     * Indicates whether or not to block simple passwords.
     */
    passwordBlockSimple?: boolean;
    /**
     * Number of days before the password expires. Valid values 1 to 65535
     */
    passwordExpirationDays?: number;
    /**
     * The number of character sets required in the password.
     */
    passwordMinimumCharacterSetCount?: number;
    /**
     * Minimum length of password. Valid values 4 to 14
     */
    passwordMinimumLength?: number;
    /**
     * Minutes of inactivity before a password is required.
     */
    passwordMinutesOfInactivityBeforeLock?: number;
    /**
     * Number of previous passwords to block. Valid values 1 to 24
     */
    passwordPreviousPasswordBlockCount?: number;
    /**
     * Whether or not to require a password.
     */
    passwordRequired?: boolean;
    /**
     * Possible values of required passwords.
     */
    passwordRequiredType?: RequiredPasswordType;
    /**
     * Require encryption on Mac OS devices.
     */
    storageRequireEncryption?: boolean;
    /**
     * Require that devices have enabled system integrity protection.
     */
    systemIntegrityProtectionEnabled?: boolean;
}
export function serializeMacOSCompliancePolicy(writer: SerializationWriter, macOSCompliancePolicy: MacOSCompliancePolicy | undefined = {} as MacOSCompliancePolicy) : void {
    serializeDeviceCompliancePolicy(writer, macOSCompliancePolicy)
    writer.writeBooleanValue("deviceThreatProtectionEnabled", macOSCompliancePolicy.deviceThreatProtectionEnabled);
    writer.writeEnumValue<DeviceThreatProtectionLevel>("deviceThreatProtectionRequiredSecurityLevel", macOSCompliancePolicy.deviceThreatProtectionRequiredSecurityLevel);
    writer.writeBooleanValue("firewallBlockAllIncoming", macOSCompliancePolicy.firewallBlockAllIncoming);
    writer.writeBooleanValue("firewallEnabled", macOSCompliancePolicy.firewallEnabled);
    writer.writeBooleanValue("firewallEnableStealthMode", macOSCompliancePolicy.firewallEnableStealthMode);
    writer.writeStringValue("osMaximumVersion", macOSCompliancePolicy.osMaximumVersion);
    writer.writeStringValue("osMinimumVersion", macOSCompliancePolicy.osMinimumVersion);
    writer.writeBooleanValue("passwordBlockSimple", macOSCompliancePolicy.passwordBlockSimple);
    writer.writeNumberValue("passwordExpirationDays", macOSCompliancePolicy.passwordExpirationDays);
    writer.writeNumberValue("passwordMinimumCharacterSetCount", macOSCompliancePolicy.passwordMinimumCharacterSetCount);
    writer.writeNumberValue("passwordMinimumLength", macOSCompliancePolicy.passwordMinimumLength);
    writer.writeNumberValue("passwordMinutesOfInactivityBeforeLock", macOSCompliancePolicy.passwordMinutesOfInactivityBeforeLock);
    writer.writeNumberValue("passwordPreviousPasswordBlockCount", macOSCompliancePolicy.passwordPreviousPasswordBlockCount);
    writer.writeBooleanValue("passwordRequired", macOSCompliancePolicy.passwordRequired);
    writer.writeEnumValue<RequiredPasswordType>("passwordRequiredType", macOSCompliancePolicy.passwordRequiredType);
    writer.writeBooleanValue("storageRequireEncryption", macOSCompliancePolicy.storageRequireEncryption);
    writer.writeBooleanValue("systemIntegrityProtectionEnabled", macOSCompliancePolicy.systemIntegrityProtectionEnabled);
}
// tslint:enable
// eslint-enable
