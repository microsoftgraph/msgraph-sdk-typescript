// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAuthenticationMethodConfiguration, serializeAuthenticationMethodConfiguration, type AuthenticationMethodConfiguration } from './authenticationMethodConfiguration';
import { createAuthenticationMethodTargetFromDiscriminatorValue, serializeAuthenticationMethodTarget, type AuthenticationMethodTarget } from './authenticationMethodTarget';
import { ExternalEmailOtpState } from './externalEmailOtpState';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEmailAuthenticationMethodConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEmailAuthenticationMethodConfiguration;
}
export function deserializeIntoEmailAuthenticationMethodConfiguration(emailAuthenticationMethodConfiguration: EmailAuthenticationMethodConfiguration | undefined = {} as EmailAuthenticationMethodConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAuthenticationMethodConfiguration(emailAuthenticationMethodConfiguration),
        "allowExternalIdToUseEmailOtp": n => { emailAuthenticationMethodConfiguration.allowExternalIdToUseEmailOtp = n.getEnumValue<ExternalEmailOtpState>(ExternalEmailOtpState); },
        "includeTargets": n => { emailAuthenticationMethodConfiguration.includeTargets = n.getCollectionOfObjectValues<AuthenticationMethodTarget>(createAuthenticationMethodTargetFromDiscriminatorValue); },
    }
}
export interface EmailAuthenticationMethodConfiguration extends AuthenticationMethodConfiguration, Parsable {
    /**
     * Determines whether email OTP is usable by external users for authentication. Possible values are: default, enabled, disabled, unknownFutureValue. Tenants in the default state who didn't use public preview have email OTP enabled beginning in October 2021.
     */
    allowExternalIdToUseEmailOtp?: ExternalEmailOtpState;
    /**
     * A collection of groups that are enabled to use the authentication method.
     */
    includeTargets?: AuthenticationMethodTarget[];
}
export function serializeEmailAuthenticationMethodConfiguration(writer: SerializationWriter, emailAuthenticationMethodConfiguration: EmailAuthenticationMethodConfiguration | undefined = {} as EmailAuthenticationMethodConfiguration) : void {
    serializeAuthenticationMethodConfiguration(writer, emailAuthenticationMethodConfiguration)
    writer.writeEnumValue<ExternalEmailOtpState>("allowExternalIdToUseEmailOtp", emailAuthenticationMethodConfiguration.allowExternalIdToUseEmailOtp);
    writer.writeCollectionOfObjectValues<AuthenticationMethodTarget>("includeTargets", emailAuthenticationMethodConfiguration.includeTargets, serializeAuthenticationMethodTarget);
}
// tslint:enable
// eslint-enable
