// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDocumentSetVersion } from './documentSetVersion';
import { deserializeIntoDriveItemVersion } from './driveItemVersion';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type DocumentSetVersion, type DriveItemVersion, type ListItemVersion } from './index';
import { deserializeIntoListItemVersion } from './listItemVersion';
import { createPublicationFacetFromDiscriminatorValue, serializePublicationFacet, type PublicationFacet } from './publicationFacet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BaseItemVersion extends Entity, Parsable {
    /**
     * Identity of the user which last modified the version. Read-only.
     */
    lastModifiedBy?: IdentitySet;
    /**
     * Date and time the version was last modified. Read-only.
     */
    lastModifiedDateTime?: Date;
    /**
     * Indicates the publication status of this particular version. Read-only.
     */
    publication?: PublicationFacet;
}
export function createBaseItemVersionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.documentSetVersion":
                    return deserializeIntoDocumentSetVersion;
                case "#microsoft.graph.driveItemVersion":
                    return deserializeIntoDriveItemVersion;
                case "#microsoft.graph.listItemVersion":
                    return deserializeIntoListItemVersion;
            }
        }
    }
    return deserializeIntoBaseItemVersion;
}
export function deserializeIntoBaseItemVersion(baseItemVersion: BaseItemVersion | undefined = {} as BaseItemVersion) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(baseItemVersion),
        "lastModifiedBy": n => { baseItemVersion.lastModifiedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { baseItemVersion.lastModifiedDateTime = n.getDateValue(); },
        "publication": n => { baseItemVersion.publication = n.getObjectValue<PublicationFacet>(createPublicationFacetFromDiscriminatorValue); },
    }
}
export function serializeBaseItemVersion(writer: SerializationWriter, baseItemVersion: BaseItemVersion | undefined = {} as BaseItemVersion) : void {
    serializeEntity(writer, baseItemVersion)
    writer.writeObjectValue<IdentitySet>("lastModifiedBy", baseItemVersion.lastModifiedBy, serializeIdentitySet);
    writer.writeDateValue("lastModifiedDateTime", baseItemVersion.lastModifiedDateTime);
    writer.writeObjectValue<PublicationFacet>("publication", baseItemVersion.publication, serializePublicationFacet);
}
// tslint:enable
// eslint-enable
