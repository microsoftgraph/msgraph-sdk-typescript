// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AccessReviewHistoryStatus } from './accessReviewHistoryStatus';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessReviewHistoryInstance extends Entity, Parsable {
    /**
     * Uri that can be used to retrieve review history data. This URI will be active for 24 hours after being generated. Required.
     */
    downloadUri?: string;
    /**
     * Timestamp when this instance and associated data expires and the history is deleted. Required.
     */
    expirationDateTime?: Date;
    /**
     * Timestamp when all of the available data for this instance was collected and is set after this instance's status is set to done. Required.
     */
    fulfilledDateTime?: Date;
    /**
     * Timestamp reviews ending on or before this date will be included in the fetched history data.
     */
    reviewHistoryPeriodEndDateTime?: Date;
    /**
     * Timestamp reviews starting on or after this date will be included in the fetched history data.
     */
    reviewHistoryPeriodStartDateTime?: Date;
    /**
     * Timestamp when the instance's history data is scheduled to be generated.
     */
    runDateTime?: Date;
    /**
     * Represents the status of the review history data collection. The possible values are: done, inProgress, error, requested, unknownFutureValue. Once the status has been marked as done, a link can be generated to retrieve the instance's data by calling generateDownloadUri method.
     */
    status?: AccessReviewHistoryStatus;
}
export function createAccessReviewHistoryInstanceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessReviewHistoryInstance;
}
export function deserializeIntoAccessReviewHistoryInstance(accessReviewHistoryInstance: AccessReviewHistoryInstance | undefined = {} as AccessReviewHistoryInstance) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(accessReviewHistoryInstance),
        "downloadUri": n => { accessReviewHistoryInstance.downloadUri = n.getStringValue(); },
        "expirationDateTime": n => { accessReviewHistoryInstance.expirationDateTime = n.getDateValue(); },
        "fulfilledDateTime": n => { accessReviewHistoryInstance.fulfilledDateTime = n.getDateValue(); },
        "reviewHistoryPeriodEndDateTime": n => { accessReviewHistoryInstance.reviewHistoryPeriodEndDateTime = n.getDateValue(); },
        "reviewHistoryPeriodStartDateTime": n => { accessReviewHistoryInstance.reviewHistoryPeriodStartDateTime = n.getDateValue(); },
        "runDateTime": n => { accessReviewHistoryInstance.runDateTime = n.getDateValue(); },
        "status": n => { accessReviewHistoryInstance.status = n.getEnumValue<AccessReviewHistoryStatus>(AccessReviewHistoryStatus); },
    }
}
export function serializeAccessReviewHistoryInstance(writer: SerializationWriter, accessReviewHistoryInstance: AccessReviewHistoryInstance | undefined = {} as AccessReviewHistoryInstance) : void {
    serializeEntity(writer, accessReviewHistoryInstance)
    writer.writeStringValue("downloadUri", accessReviewHistoryInstance.downloadUri);
    writer.writeDateValue("expirationDateTime", accessReviewHistoryInstance.expirationDateTime);
    writer.writeDateValue("fulfilledDateTime", accessReviewHistoryInstance.fulfilledDateTime);
    writer.writeDateValue("reviewHistoryPeriodEndDateTime", accessReviewHistoryInstance.reviewHistoryPeriodEndDateTime);
    writer.writeDateValue("reviewHistoryPeriodStartDateTime", accessReviewHistoryInstance.reviewHistoryPeriodStartDateTime);
    writer.writeDateValue("runDateTime", accessReviewHistoryInstance.runDateTime);
    writer.writeEnumValue<AccessReviewHistoryStatus>("status", accessReviewHistoryInstance.status);
}
// tslint:enable
// eslint-enable
