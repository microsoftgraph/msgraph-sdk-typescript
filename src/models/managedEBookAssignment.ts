// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDeviceAndAppManagementAssignmentTargetFromDiscriminatorValue, serializeDeviceAndAppManagementAssignmentTarget, type DeviceAndAppManagementAssignmentTarget } from './deviceAndAppManagementAssignmentTarget';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type IosVppEBookAssignment } from './index';
import { InstallIntent } from './installIntent';
import { deserializeIntoIosVppEBookAssignment } from './iosVppEBookAssignment';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createManagedEBookAssignmentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.iosVppEBookAssignment":
                    return deserializeIntoIosVppEBookAssignment;
            }
        }
    }
    return deserializeIntoManagedEBookAssignment;
}
export function deserializeIntoManagedEBookAssignment(managedEBookAssignment: ManagedEBookAssignment | undefined = {} as ManagedEBookAssignment) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(managedEBookAssignment),
        "installIntent": n => { managedEBookAssignment.installIntent = n.getEnumValue<InstallIntent>(InstallIntent); },
        "target": n => { managedEBookAssignment.target = n.getObjectValue<DeviceAndAppManagementAssignmentTarget>(createDeviceAndAppManagementAssignmentTargetFromDiscriminatorValue); },
    }
}
export interface ManagedEBookAssignment extends Entity, Parsable {
    /**
     * Possible values for the install intent chosen by the admin.
     */
    installIntent?: InstallIntent;
    /**
     * The assignment target for eBook.
     */
    target?: DeviceAndAppManagementAssignmentTarget;
}
export function serializeManagedEBookAssignment(writer: SerializationWriter, managedEBookAssignment: ManagedEBookAssignment | undefined = {} as ManagedEBookAssignment) : void {
        serializeEntity(writer, managedEBookAssignment)
        writer.writeEnumValue<InstallIntent>("installIntent", managedEBookAssignment.installIntent);
        writer.writeObjectValue<DeviceAndAppManagementAssignmentTarget>("target", managedEBookAssignment.target, serializeDeviceAndAppManagementAssignmentTarget);
}
// tslint:enable
// eslint-enable
