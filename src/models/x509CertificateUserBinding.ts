// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createX509CertificateUserBindingFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoX509CertificateUserBinding;
}
export function deserializeIntoX509CertificateUserBinding(x509CertificateUserBinding: X509CertificateUserBinding | undefined = {} as X509CertificateUserBinding) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { x509CertificateUserBinding.odataType = n.getStringValue(); },
        "priority": n => { x509CertificateUserBinding.priority = n.getNumberValue(); },
        "userProperty": n => { x509CertificateUserBinding.userProperty = n.getStringValue(); },
        "x509CertificateField": n => { x509CertificateUserBinding.x509CertificateField = n.getStringValue(); },
    }
}
export function serializeX509CertificateUserBinding(writer: SerializationWriter, x509CertificateUserBinding: X509CertificateUserBinding | undefined = {} as X509CertificateUserBinding) : void {
    writer.writeStringValue("@odata.type", x509CertificateUserBinding.odataType);
    writer.writeNumberValue("priority", x509CertificateUserBinding.priority);
    writer.writeStringValue("userProperty", x509CertificateUserBinding.userProperty);
    writer.writeStringValue("x509CertificateField", x509CertificateUserBinding.x509CertificateField);
    writer.writeAdditionalData(x509CertificateUserBinding.additionalData);
}
export interface X509CertificateUserBinding extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The priority of the binding. Microsoft Entra ID uses the binding with the highest priority. This value must be a non-negative integer and unique in the collection of objects in the certificateUserBindings property of an x509CertificateAuthenticationMethodConfiguration object. Required
     */
    priority?: number;
    /**
     * Defines the Microsoft Entra user property of the user object to use for the binding. The possible values are: userPrincipalName, onPremisesUserPrincipalName, certificateUserIds. Required.
     */
    userProperty?: string;
    /**
     * The field on the X.509 certificate to use for the binding. The possible values are: PrincipalName, RFC822Name, SubjectKeyIdentifier, SHA1PublicKey.
     */
    x509CertificateField?: string;
}
// tslint:enable
// eslint-enable
