// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { PermissionClassificationType } from './permissionClassificationType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDelegatedPermissionClassificationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDelegatedPermissionClassification;
}
export interface DelegatedPermissionClassification extends Entity, Parsable {
    /**
     * The classification value being given. Possible value: low. Doesn't support $filter.
     */
    classification?: PermissionClassificationType;
    /**
     * The unique identifier (id) for the delegated permission listed in the oauth2PermissionScopes collection of the servicePrincipal. Required on create. Doesn't support $filter.
     */
    permissionId?: string;
    /**
     * The claim value (value) for the delegated permission listed in the oauth2PermissionScopes collection of the servicePrincipal. Doesn't support $filter.
     */
    permissionName?: string;
}
export function deserializeIntoDelegatedPermissionClassification(delegatedPermissionClassification: DelegatedPermissionClassification | undefined = {} as DelegatedPermissionClassification) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(delegatedPermissionClassification),
        "classification": n => { delegatedPermissionClassification.classification = n.getEnumValue<PermissionClassificationType>(PermissionClassificationType); },
        "permissionId": n => { delegatedPermissionClassification.permissionId = n.getStringValue(); },
        "permissionName": n => { delegatedPermissionClassification.permissionName = n.getStringValue(); },
    }
}
export function serializeDelegatedPermissionClassification(writer: SerializationWriter, delegatedPermissionClassification: DelegatedPermissionClassification | undefined = {} as DelegatedPermissionClassification) : void {
        serializeEntity(writer, delegatedPermissionClassification)
        writer.writeEnumValue<PermissionClassificationType>("classification", delegatedPermissionClassification.classification);
        writer.writeStringValue("permissionId", delegatedPermissionClassification.permissionId);
        writer.writeStringValue("permissionName", delegatedPermissionClassification.permissionName);
}
// tslint:enable
// eslint-enable
