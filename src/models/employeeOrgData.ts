// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEmployeeOrgDataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEmployeeOrgData;
}
export function deserializeIntoEmployeeOrgData(employeeOrgData: EmployeeOrgData | undefined = {} as EmployeeOrgData) : Record<string, (node: ParseNode) => void> {
    return {
        "costCenter": n => { employeeOrgData.costCenter = n.getStringValue(); },
        "division": n => { employeeOrgData.division = n.getStringValue(); },
        "@odata.type": n => { employeeOrgData.odataType = n.getStringValue(); },
    }
}
export interface EmployeeOrgData extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The cost center associated with the user. Returned only on $select. Supports $filter.
     */
    costCenter?: string;
    /**
     * The name of the division in which the user works. Returned only on $select. Supports $filter.
     */
    division?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeEmployeeOrgData(writer: SerializationWriter, employeeOrgData: EmployeeOrgData | undefined = {} as EmployeeOrgData) : void {
        writer.writeStringValue("costCenter", employeeOrgData.costCenter);
        writer.writeStringValue("division", employeeOrgData.division);
        writer.writeStringValue("@odata.type", employeeOrgData.odataType);
        writer.writeAdditionalData(employeeOrgData.additionalData);
}
// tslint:enable
// eslint-enable
