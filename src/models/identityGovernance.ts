// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAccessReviewSetFromDiscriminatorValue, serializeAccessReviewSet, type AccessReviewSet } from './accessReviewSet';
import { createAppConsentApprovalRouteFromDiscriminatorValue, serializeAppConsentApprovalRoute, type AppConsentApprovalRoute } from './appConsentApprovalRoute';
import { createEntitlementManagementFromDiscriminatorValue, serializeEntitlementManagement, type EntitlementManagement } from './entitlementManagement';
import { createLifecycleWorkflowsContainerFromDiscriminatorValue, serializeLifecycleWorkflowsContainer, type LifecycleWorkflowsContainer } from './identityGovernance/lifecycleWorkflowsContainer';
import { createPrivilegedAccessRootFromDiscriminatorValue, serializePrivilegedAccessRoot, type PrivilegedAccessRoot } from './privilegedAccessRoot';
import { createTermsOfUseContainerFromDiscriminatorValue, serializeTermsOfUseContainer, type TermsOfUseContainer } from './termsOfUseContainer';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIdentityGovernanceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIdentityGovernance;
}
export function deserializeIntoIdentityGovernance(identityGovernance: IdentityGovernance | undefined = {} as IdentityGovernance) : Record<string, (node: ParseNode) => void> {
    return {
        "accessReviews": n => { identityGovernance.accessReviews = n.getObjectValue<AccessReviewSet>(createAccessReviewSetFromDiscriminatorValue); },
        "appConsent": n => { identityGovernance.appConsent = n.getObjectValue<AppConsentApprovalRoute>(createAppConsentApprovalRouteFromDiscriminatorValue); },
        "entitlementManagement": n => { identityGovernance.entitlementManagement = n.getObjectValue<EntitlementManagement>(createEntitlementManagementFromDiscriminatorValue); },
        "lifecycleWorkflows": n => { identityGovernance.lifecycleWorkflows = n.getObjectValue<LifecycleWorkflowsContainer>(createLifecycleWorkflowsContainerFromDiscriminatorValue); },
        "@odata.type": n => { identityGovernance.odataType = n.getStringValue(); },
        "privilegedAccess": n => { identityGovernance.privilegedAccess = n.getObjectValue<PrivilegedAccessRoot>(createPrivilegedAccessRootFromDiscriminatorValue); },
        "termsOfUse": n => { identityGovernance.termsOfUse = n.getObjectValue<TermsOfUseContainer>(createTermsOfUseContainerFromDiscriminatorValue); },
    }
}
export interface IdentityGovernance extends AdditionalDataHolder, Parsable {
    /**
     * The accessReviews property
     */
    accessReviews?: AccessReviewSet;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The appConsent property
     */
    appConsent?: AppConsentApprovalRoute;
    /**
     * The entitlementManagement property
     */
    entitlementManagement?: EntitlementManagement;
    /**
     * The lifecycleWorkflows property
     */
    lifecycleWorkflows?: LifecycleWorkflowsContainer;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The privilegedAccess property
     */
    privilegedAccess?: PrivilegedAccessRoot;
    /**
     * The termsOfUse property
     */
    termsOfUse?: TermsOfUseContainer;
}
export function serializeIdentityGovernance(writer: SerializationWriter, identityGovernance: IdentityGovernance | undefined = {} as IdentityGovernance) : void {
        writer.writeObjectValue<AccessReviewSet>("accessReviews", identityGovernance.accessReviews, );
        writer.writeObjectValue<AppConsentApprovalRoute>("appConsent", identityGovernance.appConsent, );
        writer.writeObjectValue<EntitlementManagement>("entitlementManagement", identityGovernance.entitlementManagement, );
        writer.writeObjectValue<LifecycleWorkflowsContainer>("lifecycleWorkflows", identityGovernance.lifecycleWorkflows, );
        writer.writeStringValue("@odata.type", identityGovernance.odataType);
        writer.writeObjectValue<PrivilegedAccessRoot>("privilegedAccess", identityGovernance.privilegedAccess, );
        writer.writeObjectValue<TermsOfUseContainer>("termsOfUse", identityGovernance.termsOfUse, );
        writer.writeAdditionalData(identityGovernance.additionalData);
}
// tslint:enable
// eslint-enable
