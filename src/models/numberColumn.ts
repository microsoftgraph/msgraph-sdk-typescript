// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createNumberColumnFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoNumberColumn;
}
export function deserializeIntoNumberColumn(numberColumn: NumberColumn | undefined = {} as NumberColumn) : Record<string, (node: ParseNode) => void> {
    return {
        "decimalPlaces": n => { numberColumn.decimalPlaces = n.getStringValue(); },
        "displayAs": n => { numberColumn.displayAs = n.getStringValue(); },
        "maximum": n => { numberColumn.maximum = n.getNumberValue(); },
        "minimum": n => { numberColumn.minimum = n.getNumberValue(); },
        "@odata.type": n => { numberColumn.odataType = n.getStringValue(); },
    }
}
export interface NumberColumn extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * How many decimal places to display. See below for information about the possible values.
     */
    decimalPlaces?: string;
    /**
     * How the value should be presented in the UX. Must be one of number or percentage. If unspecified, treated as number.
     */
    displayAs?: string;
    /**
     * The maximum permitted value.
     */
    maximum?: number;
    /**
     * The minimum permitted value.
     */
    minimum?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeNumberColumn(writer: SerializationWriter, numberColumn: NumberColumn | undefined = {} as NumberColumn) : void {
        writer.writeStringValue("decimalPlaces", numberColumn.decimalPlaces);
        writer.writeStringValue("displayAs", numberColumn.displayAs);
        writer.writeNumberValue("maximum", numberColumn.maximum);
        writer.writeNumberValue("minimum", numberColumn.minimum);
        writer.writeStringValue("@odata.type", numberColumn.odataType);
        writer.writeAdditionalData(numberColumn.additionalData);
}
// tslint:enable
// eslint-enable
