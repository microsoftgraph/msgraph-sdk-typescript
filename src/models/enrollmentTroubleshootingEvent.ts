// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DeviceEnrollmentFailureReason } from './deviceEnrollmentFailureReason';
import { DeviceEnrollmentType } from './deviceEnrollmentType';
import { deserializeIntoDeviceManagementTroubleshootingEvent, serializeDeviceManagementTroubleshootingEvent, type DeviceManagementTroubleshootingEvent } from './deviceManagementTroubleshootingEvent';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEnrollmentTroubleshootingEventFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEnrollmentTroubleshootingEvent;
}
export function deserializeIntoEnrollmentTroubleshootingEvent(enrollmentTroubleshootingEvent: EnrollmentTroubleshootingEvent | undefined = {} as EnrollmentTroubleshootingEvent) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceManagementTroubleshootingEvent(enrollmentTroubleshootingEvent),
        "deviceId": n => { enrollmentTroubleshootingEvent.deviceId = n.getStringValue(); },
        "enrollmentType": n => { enrollmentTroubleshootingEvent.enrollmentType = n.getEnumValue<DeviceEnrollmentType>(DeviceEnrollmentType); },
        "failureCategory": n => { enrollmentTroubleshootingEvent.failureCategory = n.getEnumValue<DeviceEnrollmentFailureReason>(DeviceEnrollmentFailureReason); },
        "failureReason": n => { enrollmentTroubleshootingEvent.failureReason = n.getStringValue(); },
        "managedDeviceIdentifier": n => { enrollmentTroubleshootingEvent.managedDeviceIdentifier = n.getStringValue(); },
        "operatingSystem": n => { enrollmentTroubleshootingEvent.operatingSystem = n.getStringValue(); },
        "osVersion": n => { enrollmentTroubleshootingEvent.osVersion = n.getStringValue(); },
        "userId": n => { enrollmentTroubleshootingEvent.userId = n.getStringValue(); },
    }
}
export interface EnrollmentTroubleshootingEvent extends DeviceManagementTroubleshootingEvent, Parsable {
    /**
     * Azure AD device identifier.
     */
    deviceId?: string;
    /**
     * Possible ways of adding a mobile device to management.
     */
    enrollmentType?: DeviceEnrollmentType;
    /**
     * Top level failure categories for enrollment.
     */
    failureCategory?: DeviceEnrollmentFailureReason;
    /**
     * Detailed failure reason.
     */
    failureReason?: string;
    /**
     * Device identifier created or collected by Intune.
     */
    managedDeviceIdentifier?: string;
    /**
     * Operating System.
     */
    operatingSystem?: string;
    /**
     * OS Version.
     */
    osVersion?: string;
    /**
     * Identifier for the user that tried to enroll the device.
     */
    userId?: string;
}
export function serializeEnrollmentTroubleshootingEvent(writer: SerializationWriter, enrollmentTroubleshootingEvent: EnrollmentTroubleshootingEvent | undefined = {} as EnrollmentTroubleshootingEvent) : void {
        serializeDeviceManagementTroubleshootingEvent(writer, enrollmentTroubleshootingEvent)
        writer.writeStringValue("deviceId", enrollmentTroubleshootingEvent.deviceId);
        writer.writeEnumValue<DeviceEnrollmentType>("enrollmentType", enrollmentTroubleshootingEvent.enrollmentType);
        writer.writeEnumValue<DeviceEnrollmentFailureReason>("failureCategory", enrollmentTroubleshootingEvent.failureCategory);
        writer.writeStringValue("failureReason", enrollmentTroubleshootingEvent.failureReason);
        writer.writeStringValue("managedDeviceIdentifier", enrollmentTroubleshootingEvent.managedDeviceIdentifier);
        writer.writeStringValue("operatingSystem", enrollmentTroubleshootingEvent.operatingSystem);
        writer.writeStringValue("osVersion", enrollmentTroubleshootingEvent.osVersion);
        writer.writeStringValue("userId", enrollmentTroubleshootingEvent.userId);
}
// tslint:enable
// eslint-enable
