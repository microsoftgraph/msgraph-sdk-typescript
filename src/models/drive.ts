// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoBaseItem, serializeBaseItem, type BaseItem } from './baseItem';
import { createDriveItemFromDiscriminatorValue, serializeDriveItem, type DriveItem } from './driveItem';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { createListFromDiscriminatorValue, serializeList, type List } from './list';
import { createQuotaFromDiscriminatorValue, serializeQuota, type Quota } from './quota';
import { createSharepointIdsFromDiscriminatorValue, serializeSharepointIds, type SharepointIds } from './sharepointIds';
import { createSystemFacetFromDiscriminatorValue, serializeSystemFacet, type SystemFacet } from './systemFacet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDriveFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDrive;
}
export function deserializeIntoDrive(drive: Drive | undefined = {} as Drive) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseItem(drive),
        "bundles": n => { drive.bundles = n.getCollectionOfObjectValues<DriveItem>(createDriveItemFromDiscriminatorValue); },
        "driveType": n => { drive.driveType = n.getStringValue(); },
        "following": n => { drive.following = n.getCollectionOfObjectValues<DriveItem>(createDriveItemFromDiscriminatorValue); },
        "items": n => { drive.items = n.getCollectionOfObjectValues<DriveItem>(createDriveItemFromDiscriminatorValue); },
        "list": n => { drive.list = n.getObjectValue<List>(createListFromDiscriminatorValue); },
        "owner": n => { drive.owner = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "quota": n => { drive.quota = n.getObjectValue<Quota>(createQuotaFromDiscriminatorValue); },
        "root": n => { drive.root = n.getObjectValue<DriveItem>(createDriveItemFromDiscriminatorValue); },
        "sharePointIds": n => { drive.sharePointIds = n.getObjectValue<SharepointIds>(createSharepointIdsFromDiscriminatorValue); },
        "special": n => { drive.special = n.getCollectionOfObjectValues<DriveItem>(createDriveItemFromDiscriminatorValue); },
        "system": n => { drive.system = n.getObjectValue<SystemFacet>(createSystemFacetFromDiscriminatorValue); },
    }
}
export interface Drive extends BaseItem, Parsable {
    /**
     * Collection of [bundles][bundle] (albums and multi-select-shared sets of items). Only in personal OneDrive.
     */
    bundles?: DriveItem[];
    /**
     * Describes the type of drive represented by this resource. OneDrive personal drives will return personal. OneDrive for Business will return business. SharePoint document libraries will return documentLibrary. Read-only.
     */
    driveType?: string;
    /**
     * The list of items the user is following. Only in OneDrive for Business.
     */
    following?: DriveItem[];
    /**
     * All items contained in the drive. Read-only. Nullable.
     */
    items?: DriveItem[];
    /**
     * For drives in SharePoint, the underlying document library list. Read-only. Nullable.
     */
    list?: List;
    /**
     * Optional. The user account that owns the drive. Read-only.
     */
    owner?: IdentitySet;
    /**
     * Optional. Information about the drive's storage space quota. Read-only.
     */
    quota?: Quota;
    /**
     * The root folder of the drive. Read-only.
     */
    root?: DriveItem;
    /**
     * The sharePointIds property
     */
    sharePointIds?: SharepointIds;
    /**
     * Collection of common folders available in OneDrive. Read-only. Nullable.
     */
    special?: DriveItem[];
    /**
     * If present, indicates that this is a system-managed drive. Read-only.
     */
    system?: SystemFacet;
}
export function serializeDrive(writer: SerializationWriter, drive: Drive | undefined = {} as Drive) : void {
        serializeBaseItem(writer, drive)
        writer.writeCollectionOfObjectValues<DriveItem>("bundles", drive.bundles, );
        writer.writeStringValue("driveType", drive.driveType);
        writer.writeCollectionOfObjectValues<DriveItem>("following", drive.following, );
        writer.writeCollectionOfObjectValues<DriveItem>("items", drive.items, );
        writer.writeObjectValue<List>("list", drive.list, );
        writer.writeObjectValue<IdentitySet>("owner", drive.owner, );
        writer.writeObjectValue<Quota>("quota", drive.quota, );
        writer.writeObjectValue<DriveItem>("root", drive.root, );
        writer.writeObjectValue<SharepointIds>("sharePointIds", drive.sharePointIds, );
        writer.writeCollectionOfObjectValues<DriveItem>("special", drive.special, );
        writer.writeObjectValue<SystemFacet>("system", drive.system, );
}
// tslint:enable
// eslint-enable
