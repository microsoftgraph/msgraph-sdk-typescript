// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createResourceActionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoResourceAction;
}
export function deserializeIntoResourceAction(resourceAction: ResourceAction | undefined = {} as ResourceAction) : Record<string, (node: ParseNode) => void> {
    return {
        "allowedResourceActions": n => { resourceAction.allowedResourceActions = n.getCollectionOfPrimitiveValues<string>(); },
        "notAllowedResourceActions": n => { resourceAction.notAllowedResourceActions = n.getCollectionOfPrimitiveValues<string>(); },
        "@odata.type": n => { resourceAction.odataType = n.getStringValue(); },
    }
}
export interface ResourceAction extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Allowed Actions
     */
    allowedResourceActions?: string[];
    /**
     * Not Allowed Actions.
     */
    notAllowedResourceActions?: string[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeResourceAction(writer: SerializationWriter, resourceAction: ResourceAction | undefined = {} as ResourceAction) : void {
    writer.writeCollectionOfPrimitiveValues<string>("allowedResourceActions", resourceAction.allowedResourceActions);
    writer.writeCollectionOfPrimitiveValues<string>("notAllowedResourceActions", resourceAction.notAllowedResourceActions);
    writer.writeStringValue("@odata.type", resourceAction.odataType);
    writer.writeAdditionalData(resourceAction.additionalData);
}
// tslint:enable
// eslint-enable
