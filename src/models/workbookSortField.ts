// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createWorkbookIconFromDiscriminatorValue, serializeWorkbookIcon, type WorkbookIcon } from './workbookIcon';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookSortFieldFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookSortField;
}
export function deserializeIntoWorkbookSortField(workbookSortField: WorkbookSortField | undefined = {} as WorkbookSortField) : Record<string, (node: ParseNode) => void> {
    return {
        "ascending": n => { workbookSortField.ascending = n.getBooleanValue(); },
        "color": n => { workbookSortField.color = n.getStringValue(); },
        "dataOption": n => { workbookSortField.dataOption = n.getStringValue(); },
        "icon": n => { workbookSortField.icon = n.getObjectValue<WorkbookIcon>(createWorkbookIconFromDiscriminatorValue); },
        "key": n => { workbookSortField.key = n.getNumberValue(); },
        "@odata.type": n => { workbookSortField.odataType = n.getStringValue(); },
        "sortOn": n => { workbookSortField.sortOn = n.getStringValue(); },
    }
}
export function serializeWorkbookSortField(writer: SerializationWriter, workbookSortField: WorkbookSortField | undefined = {} as WorkbookSortField) : void {
        writer.writeBooleanValue("ascending", workbookSortField.ascending);
        writer.writeStringValue("color", workbookSortField.color);
        writer.writeStringValue("dataOption", workbookSortField.dataOption);
        writer.writeObjectValue<WorkbookIcon>("icon", workbookSortField.icon, serializeWorkbookIcon);
        writer.writeNumberValue("key", workbookSortField.key);
        writer.writeStringValue("@odata.type", workbookSortField.odataType);
        writer.writeStringValue("sortOn", workbookSortField.sortOn);
        writer.writeAdditionalData(workbookSortField.additionalData);
}
export interface WorkbookSortField extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Represents whether the sorting is done in an ascending fashion.
     */
    ascending?: boolean;
    /**
     * Represents the color that is the target of the condition if the sorting is on font or cell color.
     */
    color?: string;
    /**
     * Represents additional sorting options for this field. The possible values are: Normal, TextAsNumber.
     */
    dataOption?: string;
    /**
     * Represents the icon that is the target of the condition if the sorting is on the cell's icon.
     */
    icon?: WorkbookIcon;
    /**
     * Represents the column (or row, depending on the sort orientation) that the condition is on. Represented as an offset from the first column (or row).
     */
    key?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Represents the type of sorting of this condition. The possible values are: Value, CellColor, FontColor, Icon.
     */
    sortOn?: string;
}
// tslint:enable
// eslint-enable
