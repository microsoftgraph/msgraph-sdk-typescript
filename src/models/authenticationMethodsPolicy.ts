// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAuthenticationMethodConfigurationFromDiscriminatorValue, serializeAuthenticationMethodConfiguration, type AuthenticationMethodConfiguration } from './authenticationMethodConfiguration';
import { AuthenticationMethodsPolicyMigrationState } from './authenticationMethodsPolicyMigrationState';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createRegistrationEnforcementFromDiscriminatorValue, serializeRegistrationEnforcement, type RegistrationEnforcement } from './registrationEnforcement';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthenticationMethodsPolicy extends Entity, Parsable {
    /**
     * Represents the settings for each authentication method. Automatically expanded on GET /policies/authenticationMethodsPolicy.
     */
    authenticationMethodConfigurations?: AuthenticationMethodConfiguration[];
    /**
     * A description of the policy. Read-only.
     */
    description?: string;
    /**
     * The name of the policy. Read-only.
     */
    displayName?: string;
    /**
     * The date and time of the last update to the policy. Read-only.
     */
    lastModifiedDateTime?: Date;
    /**
     * The state of migration of the authentication methods policy from the legacy multifactor authentication and self-service password reset (SSPR) policies. The possible values are: premigration - means the authentication methods policy is used for authentication only, legacy policies are respected. migrationInProgress - means the authentication methods policy is used for both authentication and SSPR, legacy policies are respected. migrationComplete - means the authentication methods policy is used for authentication and SSPR, legacy policies are ignored. unknownFutureValue - Evolvable enumeration sentinel value. Do not use.
     */
    policyMigrationState?: AuthenticationMethodsPolicyMigrationState;
    /**
     * The version of the policy in use. Read-only.
     */
    policyVersion?: string;
    /**
     * The reconfirmationInDays property
     */
    reconfirmationInDays?: number;
    /**
     * Enforce registration at sign-in time. This property can be used to remind users to set up targeted authentication methods.
     */
    registrationEnforcement?: RegistrationEnforcement;
}
export function createAuthenticationMethodsPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuthenticationMethodsPolicy;
}
export function deserializeIntoAuthenticationMethodsPolicy(authenticationMethodsPolicy: AuthenticationMethodsPolicy | undefined = {} as AuthenticationMethodsPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(authenticationMethodsPolicy),
        "authenticationMethodConfigurations": n => { authenticationMethodsPolicy.authenticationMethodConfigurations = n.getCollectionOfObjectValues<AuthenticationMethodConfiguration>(createAuthenticationMethodConfigurationFromDiscriminatorValue); },
        "description": n => { authenticationMethodsPolicy.description = n.getStringValue(); },
        "displayName": n => { authenticationMethodsPolicy.displayName = n.getStringValue(); },
        "lastModifiedDateTime": n => { authenticationMethodsPolicy.lastModifiedDateTime = n.getDateValue(); },
        "policyMigrationState": n => { authenticationMethodsPolicy.policyMigrationState = n.getEnumValue<AuthenticationMethodsPolicyMigrationState>(AuthenticationMethodsPolicyMigrationState); },
        "policyVersion": n => { authenticationMethodsPolicy.policyVersion = n.getStringValue(); },
        "reconfirmationInDays": n => { authenticationMethodsPolicy.reconfirmationInDays = n.getNumberValue(); },
        "registrationEnforcement": n => { authenticationMethodsPolicy.registrationEnforcement = n.getObjectValue<RegistrationEnforcement>(createRegistrationEnforcementFromDiscriminatorValue); },
    }
}
export function serializeAuthenticationMethodsPolicy(writer: SerializationWriter, authenticationMethodsPolicy: AuthenticationMethodsPolicy | undefined = {} as AuthenticationMethodsPolicy) : void {
        serializeEntity(writer, authenticationMethodsPolicy)
        writer.writeCollectionOfObjectValues<AuthenticationMethodConfiguration>("authenticationMethodConfigurations", authenticationMethodsPolicy.authenticationMethodConfigurations, serializeAuthenticationMethodConfiguration);
        writer.writeStringValue("description", authenticationMethodsPolicy.description);
        writer.writeStringValue("displayName", authenticationMethodsPolicy.displayName);
        writer.writeDateValue("lastModifiedDateTime", authenticationMethodsPolicy.lastModifiedDateTime);
        writer.writeEnumValue<AuthenticationMethodsPolicyMigrationState>("policyMigrationState", authenticationMethodsPolicy.policyMigrationState);
        writer.writeStringValue("policyVersion", authenticationMethodsPolicy.policyVersion);
        writer.writeNumberValue("reconfirmationInDays", authenticationMethodsPolicy.reconfirmationInDays);
        writer.writeObjectValue<RegistrationEnforcement>("registrationEnforcement", authenticationMethodsPolicy.registrationEnforcement, serializeRegistrationEnforcement);
}
// tslint:enable
// eslint-enable
