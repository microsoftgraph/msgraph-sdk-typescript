// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createResourceReferenceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoResourceReference;
}
export function deserializeIntoResourceReference(resourceReference: ResourceReference | undefined = {} as ResourceReference) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { resourceReference.id = n.getStringValue(); },
        "@odata.type": n => { resourceReference.odataType = n.getStringValue(); },
        "type": n => { resourceReference.type = n.getStringValue(); },
        "webUrl": n => { resourceReference.webUrl = n.getStringValue(); },
    }
}
export interface ResourceReference extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The item's unique identifier.
     */
    id?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A string value that can be used to classify the item, such as 'microsoft.graph.driveItem'
     */
    type?: string;
    /**
     * A URL leading to the referenced item.
     */
    webUrl?: string;
}
export function serializeResourceReference(writer: SerializationWriter, resourceReference: ResourceReference | undefined = {} as ResourceReference) : void {
    writer.writeStringValue("id", resourceReference.id);
    writer.writeStringValue("@odata.type", resourceReference.odataType);
    writer.writeStringValue("type", resourceReference.type);
    writer.writeStringValue("webUrl", resourceReference.webUrl);
    writer.writeAdditionalData(resourceReference.additionalData);
}
// tslint:enable
// eslint-enable
