// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ComplianceStatus } from './complianceStatus';
import { createDeviceConfigurationSettingStateFromDiscriminatorValue, serializeDeviceConfigurationSettingState, type DeviceConfigurationSettingState } from './deviceConfigurationSettingState';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { PolicyPlatformType } from './policyPlatformType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceConfigurationStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceConfigurationState;
}
export function deserializeIntoDeviceConfigurationState(deviceConfigurationState: DeviceConfigurationState | undefined = {} as DeviceConfigurationState) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceConfigurationState),
        "displayName": n => { deviceConfigurationState.displayName = n.getStringValue(); },
        "platformType": n => { deviceConfigurationState.platformType = n.getEnumValue<PolicyPlatformType>(PolicyPlatformType); },
        "settingCount": n => { deviceConfigurationState.settingCount = n.getNumberValue(); },
        "settingStates": n => { deviceConfigurationState.settingStates = n.getCollectionOfObjectValues<DeviceConfigurationSettingState>(createDeviceConfigurationSettingStateFromDiscriminatorValue); },
        "state": n => { deviceConfigurationState.state = n.getEnumValue<ComplianceStatus>(ComplianceStatus); },
        "version": n => { deviceConfigurationState.version = n.getNumberValue(); },
    }
}
export interface DeviceConfigurationState extends Entity, Parsable {
    /**
     * The name of the policy for this policyBase
     */
    displayName?: string;
    /**
     * Supported platform types for policies.
     */
    platformType?: PolicyPlatformType;
    /**
     * Count of how many setting a policy holds
     */
    settingCount?: number;
    /**
     * The settingStates property
     */
    settingStates?: DeviceConfigurationSettingState[];
    /**
     * The state property
     */
    state?: ComplianceStatus;
    /**
     * The version of the policy
     */
    version?: number;
}
export function serializeDeviceConfigurationState(writer: SerializationWriter, deviceConfigurationState: DeviceConfigurationState | undefined = {} as DeviceConfigurationState) : void {
        serializeEntity(writer, deviceConfigurationState)
        writer.writeStringValue("displayName", deviceConfigurationState.displayName);
        writer.writeEnumValue<PolicyPlatformType>("platformType", deviceConfigurationState.platformType);
        writer.writeNumberValue("settingCount", deviceConfigurationState.settingCount);
        writer.writeCollectionOfObjectValues<DeviceConfigurationSettingState>("settingStates", deviceConfigurationState.settingStates, serializeDeviceConfigurationSettingState);
        writer.writeEnumValue<ComplianceStatus>("state", deviceConfigurationState.state);
        writer.writeNumberValue("version", deviceConfigurationState.version);
}
// tslint:enable
// eslint-enable
