// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createTeleconferenceDeviceMediaQualityFromDiscriminatorValue, serializeTeleconferenceDeviceMediaQuality, type TeleconferenceDeviceMediaQuality } from './teleconferenceDeviceMediaQuality';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export function createTeleconferenceDeviceQualityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTeleconferenceDeviceQuality;
}
export function deserializeIntoTeleconferenceDeviceQuality(teleconferenceDeviceQuality: TeleconferenceDeviceQuality | undefined = {} as TeleconferenceDeviceQuality) : Record<string, (node: ParseNode) => void> {
    return {
        "callChainId": n => { teleconferenceDeviceQuality.callChainId = n.getGuidValue(); },
        "cloudServiceDeploymentEnvironment": n => { teleconferenceDeviceQuality.cloudServiceDeploymentEnvironment = n.getStringValue(); },
        "cloudServiceDeploymentId": n => { teleconferenceDeviceQuality.cloudServiceDeploymentId = n.getStringValue(); },
        "cloudServiceInstanceName": n => { teleconferenceDeviceQuality.cloudServiceInstanceName = n.getStringValue(); },
        "cloudServiceName": n => { teleconferenceDeviceQuality.cloudServiceName = n.getStringValue(); },
        "deviceDescription": n => { teleconferenceDeviceQuality.deviceDescription = n.getStringValue(); },
        "deviceName": n => { teleconferenceDeviceQuality.deviceName = n.getStringValue(); },
        "mediaLegId": n => { teleconferenceDeviceQuality.mediaLegId = n.getGuidValue(); },
        "mediaQualityList": n => { teleconferenceDeviceQuality.mediaQualityList = n.getCollectionOfObjectValues<TeleconferenceDeviceMediaQuality>(createTeleconferenceDeviceMediaQualityFromDiscriminatorValue); },
        "@odata.type": n => { teleconferenceDeviceQuality.odataType = n.getStringValue(); },
        "participantId": n => { teleconferenceDeviceQuality.participantId = n.getGuidValue(); },
    }
}
export function serializeTeleconferenceDeviceQuality(writer: SerializationWriter, teleconferenceDeviceQuality: TeleconferenceDeviceQuality | undefined = {} as TeleconferenceDeviceQuality) : void {
    writer.writeGuidValue("callChainId", teleconferenceDeviceQuality.callChainId);
    writer.writeStringValue("cloudServiceDeploymentEnvironment", teleconferenceDeviceQuality.cloudServiceDeploymentEnvironment);
    writer.writeStringValue("cloudServiceDeploymentId", teleconferenceDeviceQuality.cloudServiceDeploymentId);
    writer.writeStringValue("cloudServiceInstanceName", teleconferenceDeviceQuality.cloudServiceInstanceName);
    writer.writeStringValue("cloudServiceName", teleconferenceDeviceQuality.cloudServiceName);
    writer.writeStringValue("deviceDescription", teleconferenceDeviceQuality.deviceDescription);
    writer.writeStringValue("deviceName", teleconferenceDeviceQuality.deviceName);
    writer.writeGuidValue("mediaLegId", teleconferenceDeviceQuality.mediaLegId);
    writer.writeCollectionOfObjectValues<TeleconferenceDeviceMediaQuality>("mediaQualityList", teleconferenceDeviceQuality.mediaQualityList, serializeTeleconferenceDeviceMediaQuality);
    writer.writeStringValue("@odata.type", teleconferenceDeviceQuality.odataType);
    writer.writeGuidValue("participantId", teleconferenceDeviceQuality.participantId);
    writer.writeAdditionalData(teleconferenceDeviceQuality.additionalData);
}
export interface TeleconferenceDeviceQuality extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A unique identifier for all  the participant calls in a conference or a unique identifier for two participant calls in P2P call. This needs to be copied over from Microsoft.Graph.Call.CallChainId.
     */
    callChainId?: Guid;
    /**
     * A geo-region where the service is deployed, such as ProdNoam.
     */
    cloudServiceDeploymentEnvironment?: string;
    /**
     * A unique deployment identifier assigned by Azure.
     */
    cloudServiceDeploymentId?: string;
    /**
     * The Azure deployed cloud service instance name, such as FrontEndIN3.
     */
    cloudServiceInstanceName?: string;
    /**
     * The Azure deployed cloud service name, such as contoso.cloudapp.net.
     */
    cloudServiceName?: string;
    /**
     * Any additional description, such as VTC Bldg 30/21.
     */
    deviceDescription?: string;
    /**
     * The user media agent name, such as Cisco SX80.
     */
    deviceName?: string;
    /**
     * A unique identifier for a specific media leg of a participant in a conference.  One participant can have multiple media leg identifiers if retargeting happens. CVI partner assigns this value.
     */
    mediaLegId?: Guid;
    /**
     * The list of media qualities in a media session (call), such as audio quality, video quality, and/or screen sharing quality.
     */
    mediaQualityList?: TeleconferenceDeviceMediaQuality[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A unique identifier for a specific participant in a conference. The CVI partner needs to copy over Call.MyParticipantId to this property.
     */
    participantId?: Guid;
}
// tslint:enable
// eslint-enable
