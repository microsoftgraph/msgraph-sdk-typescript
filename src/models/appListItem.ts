// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AppListItem extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The application or bundle identifier of the application
     */
    appId?: string;
    /**
     * The Store URL of the application
     */
    appStoreUrl?: string;
    /**
     * The application name
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The publisher of the application
     */
    publisher?: string;
}
export function createAppListItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAppListItem;
}
export function deserializeIntoAppListItem(appListItem: AppListItem | undefined = {} as AppListItem) : Record<string, (node: ParseNode) => void> {
    return {
        "appId": n => { appListItem.appId = n.getStringValue(); },
        "appStoreUrl": n => { appListItem.appStoreUrl = n.getStringValue(); },
        "name": n => { appListItem.name = n.getStringValue(); },
        "@odata.type": n => { appListItem.odataType = n.getStringValue(); },
        "publisher": n => { appListItem.publisher = n.getStringValue(); },
    }
}
export function serializeAppListItem(writer: SerializationWriter, appListItem: AppListItem | undefined = {} as AppListItem) : void {
        writer.writeStringValue("appId", appListItem.appId);
        writer.writeStringValue("appStoreUrl", appListItem.appStoreUrl);
        writer.writeStringValue("name", appListItem.name);
        writer.writeStringValue("@odata.type", appListItem.odataType);
        writer.writeStringValue("publisher", appListItem.publisher);
        writer.writeAdditionalData(appListItem.additionalData);
}
// tslint:enable
// eslint-enable
