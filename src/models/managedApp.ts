// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type ManagedAndroidLobApp, type ManagedAndroidStoreApp, type ManagedIOSLobApp, type ManagedIOSStoreApp, type ManagedMobileLobApp } from './index';
import { deserializeIntoManagedAndroidLobApp } from './managedAndroidLobApp';
import { deserializeIntoManagedAndroidStoreApp } from './managedAndroidStoreApp';
import { ManagedAppAvailability } from './managedAppAvailability';
import { deserializeIntoManagedIOSLobApp } from './managedIOSLobApp';
import { deserializeIntoManagedIOSStoreApp } from './managedIOSStoreApp';
import { deserializeIntoManagedMobileLobApp } from './managedMobileLobApp';
import { deserializeIntoMobileApp, serializeMobileApp, type MobileApp } from './mobileApp';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createManagedAppFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.managedAndroidLobApp":
                    return deserializeIntoManagedAndroidLobApp;
                case "#microsoft.graph.managedAndroidStoreApp":
                    return deserializeIntoManagedAndroidStoreApp;
                case "#microsoft.graph.managedIOSLobApp":
                    return deserializeIntoManagedIOSLobApp;
                case "#microsoft.graph.managedIOSStoreApp":
                    return deserializeIntoManagedIOSStoreApp;
                case "#microsoft.graph.managedMobileLobApp":
                    return deserializeIntoManagedMobileLobApp;
            }
        }
    }
    return deserializeIntoManagedApp;
}
export function deserializeIntoManagedApp(managedApp: ManagedApp | undefined = {} as ManagedApp) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMobileApp(managedApp),
        "appAvailability": n => { managedApp.appAvailability = n.getEnumValue<ManagedAppAvailability>(ManagedAppAvailability); },
        "version": n => { managedApp.version = n.getStringValue(); },
    }
}
export interface ManagedApp extends MobileApp, Parsable {
    /**
     * A managed (MAM) application's availability.
     */
    appAvailability?: ManagedAppAvailability;
    /**
     * The Application's version.
     */
    version?: string;
}
export function serializeManagedApp(writer: SerializationWriter, managedApp: ManagedApp | undefined = {} as ManagedApp) : void {
        serializeMobileApp(writer, managedApp)
        writer.writeEnumValue<ManagedAppAvailability>("appAvailability", managedApp.appAvailability);
        writer.writeStringValue("version", managedApp.version);
}
// tslint:enable
// eslint-enable
