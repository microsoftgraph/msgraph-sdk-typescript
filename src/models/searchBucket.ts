// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSearchBucketFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSearchBucket;
}
export function deserializeIntoSearchBucket(searchBucket: SearchBucket | undefined = {} as SearchBucket) : Record<string, (node: ParseNode) => void> {
    return {
        "aggregationFilterToken": n => { searchBucket.aggregationFilterToken = n.getStringValue(); },
        "count": n => { searchBucket.count = n.getNumberValue(); },
        "key": n => { searchBucket.key = n.getStringValue(); },
        "@odata.type": n => { searchBucket.odataType = n.getStringValue(); },
    }
}
export interface SearchBucket extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A token containing the encoded filter to aggregate search matches by the specific key value. To use the filter, pass the token as part of the aggregationFilter property in a searchRequest object, in the format '{field}:/'{aggregationFilterToken}/''. See an example.
     */
    aggregationFilterToken?: string;
    /**
     * The approximate number of search matches that share the same value specified in the key property. Note that this number is not the exact number of matches.
     */
    count?: number;
    /**
     * The discrete value of the field that an aggregation was computed on.
     */
    key?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeSearchBucket(writer: SerializationWriter, searchBucket: SearchBucket | undefined = {} as SearchBucket) : void {
    writer.writeStringValue("aggregationFilterToken", searchBucket.aggregationFilterToken);
    writer.writeNumberValue("count", searchBucket.count);
    writer.writeStringValue("key", searchBucket.key);
    writer.writeStringValue("@odata.type", searchBucket.odataType);
    writer.writeAdditionalData(searchBucket.additionalData);
}
// tslint:enable
// eslint-enable
