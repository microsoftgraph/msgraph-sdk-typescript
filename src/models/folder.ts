// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createFolderViewFromDiscriminatorValue, serializeFolderView, type FolderView } from './folderView';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createFolderFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoFolder;
}
export function deserializeIntoFolder(folder: Folder | undefined = {} as Folder) : Record<string, (node: ParseNode) => void> {
    return {
        "childCount": n => { folder.childCount = n.getNumberValue(); },
        "@odata.type": n => { folder.odataType = n.getStringValue(); },
        "view": n => { folder.view = n.getObjectValue<FolderView>(createFolderViewFromDiscriminatorValue); },
    }
}
export interface Folder extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Number of children contained immediately within this container.
     */
    childCount?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A collection of properties defining the recommended view for the folder.
     */
    view?: FolderView;
}
export function serializeFolder(writer: SerializationWriter, folder: Folder | undefined = {} as Folder) : void {
    writer.writeNumberValue("childCount", folder.childCount);
    writer.writeStringValue("@odata.type", folder.odataType);
    writer.writeObjectValue<FolderView>("view", folder.view, serializeFolderView);
    writer.writeAdditionalData(folder.additionalData);
}
// tslint:enable
// eslint-enable
