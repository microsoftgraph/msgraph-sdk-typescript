// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { OnenotePatchActionType } from './onenotePatchActionType';
import { OnenotePatchInsertPosition } from './onenotePatchInsertPosition';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOnenotePatchContentCommandFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOnenotePatchContentCommand;
}
export function deserializeIntoOnenotePatchContentCommand(onenotePatchContentCommand: OnenotePatchContentCommand | undefined = {} as OnenotePatchContentCommand) : Record<string, (node: ParseNode) => void> {
    return {
        "action": n => { onenotePatchContentCommand.action = n.getEnumValue<OnenotePatchActionType>(OnenotePatchActionType); },
        "content": n => { onenotePatchContentCommand.content = n.getStringValue(); },
        "@odata.type": n => { onenotePatchContentCommand.odataType = n.getStringValue(); },
        "position": n => { onenotePatchContentCommand.position = n.getEnumValue<OnenotePatchInsertPosition>(OnenotePatchInsertPosition); },
        "target": n => { onenotePatchContentCommand.target = n.getStringValue(); },
    }
}
export interface OnenotePatchContentCommand extends AdditionalDataHolder, Parsable {
    /**
     * The action property
     */
    action?: OnenotePatchActionType;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A string of well-formed HTML to add to the page, and any image or file binary data. If the content contains binary data, the request must be sent using the multipart/form-data content type with a 'Commands' part.
     */
    content?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The location to add the supplied content, relative to the target element. The possible values are: after (default) or before.
     */
    position?: OnenotePatchInsertPosition;
    /**
     * The element to update. Must be the #<data-id> or the generated <id> of the element, or the body or title keyword.
     */
    target?: string;
}
export function serializeOnenotePatchContentCommand(writer: SerializationWriter, onenotePatchContentCommand: OnenotePatchContentCommand | undefined = {} as OnenotePatchContentCommand) : void {
        writer.writeEnumValue<OnenotePatchActionType>("action", onenotePatchContentCommand.action);
        writer.writeStringValue("content", onenotePatchContentCommand.content);
        writer.writeStringValue("@odata.type", onenotePatchContentCommand.odataType);
        writer.writeEnumValue<OnenotePatchInsertPosition>("position", onenotePatchContentCommand.position);
        writer.writeStringValue("target", onenotePatchContentCommand.target);
        writer.writeAdditionalData(onenotePatchContentCommand.additionalData);
}
// tslint:enable
// eslint-enable
