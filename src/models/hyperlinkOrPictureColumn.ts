// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createHyperlinkOrPictureColumnFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoHyperlinkOrPictureColumn;
}
export function deserializeIntoHyperlinkOrPictureColumn(hyperlinkOrPictureColumn: HyperlinkOrPictureColumn | undefined = {} as HyperlinkOrPictureColumn) : Record<string, (node: ParseNode) => void> {
    return {
        "isPicture": n => { hyperlinkOrPictureColumn.isPicture = n.getBooleanValue(); },
        "@odata.type": n => { hyperlinkOrPictureColumn.odataType = n.getStringValue(); },
    }
}
export interface HyperlinkOrPictureColumn extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Specifies whether the display format used for URL columns is an image or a hyperlink.
     */
    isPicture?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeHyperlinkOrPictureColumn(writer: SerializationWriter, hyperlinkOrPictureColumn: HyperlinkOrPictureColumn | undefined = {} as HyperlinkOrPictureColumn) : void {
        writer.writeBooleanValue("isPicture", hyperlinkOrPictureColumn.isPicture);
        writer.writeStringValue("@odata.type", hyperlinkOrPictureColumn.odataType);
        writer.writeAdditionalData(hyperlinkOrPictureColumn.additionalData);
}
// tslint:enable
// eslint-enable
