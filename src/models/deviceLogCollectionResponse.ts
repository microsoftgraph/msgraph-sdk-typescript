// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AppLogUploadState } from './appLogUploadState';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export function createDeviceLogCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceLogCollectionResponse;
}
export function deserializeIntoDeviceLogCollectionResponse(deviceLogCollectionResponse: DeviceLogCollectionResponse | undefined = {} as DeviceLogCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceLogCollectionResponse),
        "enrolledByUser": n => { deviceLogCollectionResponse.enrolledByUser = n.getStringValue(); },
        "expirationDateTimeUTC": n => { deviceLogCollectionResponse.expirationDateTimeUTC = n.getDateValue(); },
        "initiatedByUserPrincipalName": n => { deviceLogCollectionResponse.initiatedByUserPrincipalName = n.getStringValue(); },
        "managedDeviceId": n => { deviceLogCollectionResponse.managedDeviceId = n.getGuidValue(); },
        "receivedDateTimeUTC": n => { deviceLogCollectionResponse.receivedDateTimeUTC = n.getDateValue(); },
        "requestedDateTimeUTC": n => { deviceLogCollectionResponse.requestedDateTimeUTC = n.getDateValue(); },
        "sizeInKB": n => { deviceLogCollectionResponse.sizeInKB = n.getNumberValue(); },
        "status": n => { deviceLogCollectionResponse.status = n.getEnumValue<AppLogUploadState>(AppLogUploadState); },
    }
}
export interface DeviceLogCollectionResponse extends Entity, Parsable {
    /**
     * The User Principal Name (UPN) of the user that enrolled the device.
     */
    enrolledByUser?: string;
    /**
     * The DateTime of the expiration of the logs.
     */
    expirationDateTimeUTC?: Date;
    /**
     * The UPN for who initiated the request.
     */
    initiatedByUserPrincipalName?: string;
    /**
     * Indicates Intune device unique identifier.
     */
    managedDeviceId?: Guid;
    /**
     * The DateTime the request was received.
     */
    receivedDateTimeUTC?: Date;
    /**
     * The DateTime of the request.
     */
    requestedDateTimeUTC?: Date;
    /**
     * The size of the logs in KB. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
     */
    sizeInKB?: number;
    /**
     * AppLogUploadStatus
     */
    status?: AppLogUploadState;
}
export function serializeDeviceLogCollectionResponse(writer: SerializationWriter, deviceLogCollectionResponse: DeviceLogCollectionResponse | undefined = {} as DeviceLogCollectionResponse) : void {
    serializeEntity(writer, deviceLogCollectionResponse)
    writer.writeStringValue("enrolledByUser", deviceLogCollectionResponse.enrolledByUser);
    writer.writeDateValue("expirationDateTimeUTC", deviceLogCollectionResponse.expirationDateTimeUTC);
    writer.writeStringValue("initiatedByUserPrincipalName", deviceLogCollectionResponse.initiatedByUserPrincipalName);
    writer.writeGuidValue("managedDeviceId", deviceLogCollectionResponse.managedDeviceId);
    writer.writeDateValue("receivedDateTimeUTC", deviceLogCollectionResponse.receivedDateTimeUTC);
    writer.writeDateValue("requestedDateTimeUTC", deviceLogCollectionResponse.requestedDateTimeUTC);
    writer.writeNumberValue("sizeInKB", deviceLogCollectionResponse.sizeInKB);
    writer.writeEnumValue<AppLogUploadState>("status", deviceLogCollectionResponse.status);
}
// tslint:enable
// eslint-enable
