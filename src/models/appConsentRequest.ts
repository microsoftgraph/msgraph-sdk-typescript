// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAppConsentRequestScopeFromDiscriminatorValue, serializeAppConsentRequestScope, type AppConsentRequestScope } from './appConsentRequestScope';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createUserConsentRequestFromDiscriminatorValue, serializeUserConsentRequest, type UserConsentRequest } from './userConsentRequest';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AppConsentRequest extends Entity, Parsable {
    /**
     * The display name of the app for which consent is requested. Required. Supports $filter (eq only) and $orderby.
     */
    appDisplayName?: string;
    /**
     * The identifier of the application. Required. Supports $filter (eq only) and $orderby.
     */
    appId?: string;
    /**
     * A list of pending scopes waiting for approval. Required.
     */
    pendingScopes?: AppConsentRequestScope[];
    /**
     * A list of pending user consent requests. Supports $filter (eq).
     */
    userConsentRequests?: UserConsentRequest[];
}
export function createAppConsentRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAppConsentRequest;
}
export function deserializeIntoAppConsentRequest(appConsentRequest: AppConsentRequest | undefined = {} as AppConsentRequest) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(appConsentRequest),
        "appDisplayName": n => { appConsentRequest.appDisplayName = n.getStringValue(); },
        "appId": n => { appConsentRequest.appId = n.getStringValue(); },
        "pendingScopes": n => { appConsentRequest.pendingScopes = n.getCollectionOfObjectValues<AppConsentRequestScope>(createAppConsentRequestScopeFromDiscriminatorValue); },
        "userConsentRequests": n => { appConsentRequest.userConsentRequests = n.getCollectionOfObjectValues<UserConsentRequest>(createUserConsentRequestFromDiscriminatorValue); },
    }
}
export function serializeAppConsentRequest(writer: SerializationWriter, appConsentRequest: AppConsentRequest | undefined = {} as AppConsentRequest) : void {
        serializeEntity(writer, appConsentRequest)
        writer.writeStringValue("appDisplayName", appConsentRequest.appDisplayName);
        writer.writeStringValue("appId", appConsentRequest.appId);
        writer.writeCollectionOfObjectValues<AppConsentRequestScope>("pendingScopes", appConsentRequest.pendingScopes, serializeAppConsentRequestScope);
        writer.writeCollectionOfObjectValues<UserConsentRequest>("userConsentRequests", appConsentRequest.userConsentRequests, serializeUserConsentRequest);
}
// tslint:enable
// eslint-enable
