// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceConfigurationDeviceStateSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceConfigurationDeviceStateSummary;
}
export function deserializeIntoDeviceConfigurationDeviceStateSummary(deviceConfigurationDeviceStateSummary: DeviceConfigurationDeviceStateSummary | undefined = {} as DeviceConfigurationDeviceStateSummary) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceConfigurationDeviceStateSummary),
        "compliantDeviceCount": n => { deviceConfigurationDeviceStateSummary.compliantDeviceCount = n.getNumberValue(); },
        "conflictDeviceCount": n => { deviceConfigurationDeviceStateSummary.conflictDeviceCount = n.getNumberValue(); },
        "errorDeviceCount": n => { deviceConfigurationDeviceStateSummary.errorDeviceCount = n.getNumberValue(); },
        "nonCompliantDeviceCount": n => { deviceConfigurationDeviceStateSummary.nonCompliantDeviceCount = n.getNumberValue(); },
        "notApplicableDeviceCount": n => { deviceConfigurationDeviceStateSummary.notApplicableDeviceCount = n.getNumberValue(); },
        "remediatedDeviceCount": n => { deviceConfigurationDeviceStateSummary.remediatedDeviceCount = n.getNumberValue(); },
        "unknownDeviceCount": n => { deviceConfigurationDeviceStateSummary.unknownDeviceCount = n.getNumberValue(); },
    }
}
export interface DeviceConfigurationDeviceStateSummary extends Entity, Parsable {
    /**
     * Number of compliant devices
     */
    compliantDeviceCount?: number;
    /**
     * Number of conflict devices
     */
    conflictDeviceCount?: number;
    /**
     * Number of error devices
     */
    errorDeviceCount?: number;
    /**
     * Number of NonCompliant devices
     */
    nonCompliantDeviceCount?: number;
    /**
     * Number of not applicable devices
     */
    notApplicableDeviceCount?: number;
    /**
     * Number of remediated devices
     */
    remediatedDeviceCount?: number;
    /**
     * Number of unknown devices
     */
    unknownDeviceCount?: number;
}
export function serializeDeviceConfigurationDeviceStateSummary(writer: SerializationWriter, deviceConfigurationDeviceStateSummary: DeviceConfigurationDeviceStateSummary | undefined = {} as DeviceConfigurationDeviceStateSummary) : void {
        serializeEntity(writer, deviceConfigurationDeviceStateSummary)
        writer.writeNumberValue("compliantDeviceCount", deviceConfigurationDeviceStateSummary.compliantDeviceCount);
        writer.writeNumberValue("conflictDeviceCount", deviceConfigurationDeviceStateSummary.conflictDeviceCount);
        writer.writeNumberValue("errorDeviceCount", deviceConfigurationDeviceStateSummary.errorDeviceCount);
        writer.writeNumberValue("nonCompliantDeviceCount", deviceConfigurationDeviceStateSummary.nonCompliantDeviceCount);
        writer.writeNumberValue("notApplicableDeviceCount", deviceConfigurationDeviceStateSummary.notApplicableDeviceCount);
        writer.writeNumberValue("remediatedDeviceCount", deviceConfigurationDeviceStateSummary.remediatedDeviceCount);
        writer.writeNumberValue("unknownDeviceCount", deviceConfigurationDeviceStateSummary.unknownDeviceCount);
}
// tslint:enable
// eslint-enable
