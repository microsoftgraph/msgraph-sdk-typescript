// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createVideoFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoVideo;
}
export function deserializeIntoVideo(video: Video | undefined = {} as Video) : Record<string, (node: ParseNode) => void> {
    return {
        "audioBitsPerSample": n => { video.audioBitsPerSample = n.getNumberValue(); },
        "audioChannels": n => { video.audioChannels = n.getNumberValue(); },
        "audioFormat": n => { video.audioFormat = n.getStringValue(); },
        "audioSamplesPerSecond": n => { video.audioSamplesPerSecond = n.getNumberValue(); },
        "bitrate": n => { video.bitrate = n.getNumberValue(); },
        "duration": n => { video.duration = n.getNumberValue(); },
        "fourCC": n => { video.fourCC = n.getStringValue(); },
        "frameRate": n => { video.frameRate = n.getNumberValue(); },
        "height": n => { video.height = n.getNumberValue(); },
        "@odata.type": n => { video.odataType = n.getStringValue(); },
        "width": n => { video.width = n.getNumberValue(); },
    }
}
export function serializeVideo(writer: SerializationWriter, video: Video | undefined = {} as Video) : void {
        writer.writeNumberValue("audioBitsPerSample", video.audioBitsPerSample);
        writer.writeNumberValue("audioChannels", video.audioChannels);
        writer.writeStringValue("audioFormat", video.audioFormat);
        writer.writeNumberValue("audioSamplesPerSecond", video.audioSamplesPerSecond);
        writer.writeNumberValue("bitrate", video.bitrate);
        writer.writeNumberValue("duration", video.duration);
        writer.writeStringValue("fourCC", video.fourCC);
        writer.writeNumberValue("frameRate", video.frameRate);
        writer.writeNumberValue("height", video.height);
        writer.writeStringValue("@odata.type", video.odataType);
        writer.writeNumberValue("width", video.width);
        writer.writeAdditionalData(video.additionalData);
}
export interface Video extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Number of audio bits per sample.
     */
    audioBitsPerSample?: number;
    /**
     * Number of audio channels.
     */
    audioChannels?: number;
    /**
     * Name of the audio format (AAC, MP3, etc.).
     */
    audioFormat?: string;
    /**
     * Number of audio samples per second.
     */
    audioSamplesPerSecond?: number;
    /**
     * Bit rate of the video in bits per second.
     */
    bitrate?: number;
    /**
     * Duration of the file in milliseconds.
     */
    duration?: number;
    /**
     * 'Four character code' name of the video format.
     */
    fourCC?: string;
    /**
     * Frame rate of the video.
     */
    frameRate?: number;
    /**
     * Height of the video, in pixels.
     */
    height?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Width of the video, in pixels.
     */
    width?: number;
}
// tslint:enable
// eslint-enable
