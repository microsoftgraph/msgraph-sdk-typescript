// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { createRetentionLabelSettingsFromDiscriminatorValue, serializeRetentionLabelSettings, type RetentionLabelSettings } from './retentionLabelSettings';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createItemRetentionLabelFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoItemRetentionLabel;
}
export function deserializeIntoItemRetentionLabel(itemRetentionLabel: ItemRetentionLabel | undefined = {} as ItemRetentionLabel) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(itemRetentionLabel),
        "isLabelAppliedExplicitly": n => { itemRetentionLabel.isLabelAppliedExplicitly = n.getBooleanValue(); },
        "labelAppliedBy": n => { itemRetentionLabel.labelAppliedBy = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "labelAppliedDateTime": n => { itemRetentionLabel.labelAppliedDateTime = n.getDateValue(); },
        "name": n => { itemRetentionLabel.name = n.getStringValue(); },
        "retentionSettings": n => { itemRetentionLabel.retentionSettings = n.getObjectValue<RetentionLabelSettings>(createRetentionLabelSettingsFromDiscriminatorValue); },
    }
}
export interface ItemRetentionLabel extends Entity, Parsable {
    /**
     * Specifies whether the label is applied explicitly on the item. True indicates that the label is applied explicitly; otherwise, the label is inherited from its parent. Read-only.
     */
    isLabelAppliedExplicitly?: boolean;
    /**
     * Identity of the user who applied the label. Read-only.
     */
    labelAppliedBy?: IdentitySet;
    /**
     * The date and time when the label was applied on the item. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
     */
    labelAppliedDateTime?: Date;
    /**
     * The retention label on the document. Read-write.
     */
    name?: string;
    /**
     * The retention settings enforced on the item. Read-write.
     */
    retentionSettings?: RetentionLabelSettings;
}
export function serializeItemRetentionLabel(writer: SerializationWriter, itemRetentionLabel: ItemRetentionLabel | undefined = {} as ItemRetentionLabel) : void {
        serializeEntity(writer, itemRetentionLabel)
        writer.writeBooleanValue("isLabelAppliedExplicitly", itemRetentionLabel.isLabelAppliedExplicitly);
        writer.writeObjectValue<IdentitySet>("labelAppliedBy", itemRetentionLabel.labelAppliedBy, serializeIdentitySet);
        writer.writeDateValue("labelAppliedDateTime", itemRetentionLabel.labelAppliedDateTime);
        writer.writeStringValue("name", itemRetentionLabel.name);
        writer.writeObjectValue<RetentionLabelSettings>("retentionSettings", itemRetentionLabel.retentionSettings, serializeRetentionLabelSettings);
}
// tslint:enable
// eslint-enable
