// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createHostSecurityStateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoHostSecurityState;
}
export function deserializeIntoHostSecurityState(hostSecurityState: HostSecurityState | undefined = {} as HostSecurityState) : Record<string, (node: ParseNode) => void> {
    return {
        "fqdn": n => { hostSecurityState.fqdn = n.getStringValue(); },
        "isAzureAdJoined": n => { hostSecurityState.isAzureAdJoined = n.getBooleanValue(); },
        "isAzureAdRegistered": n => { hostSecurityState.isAzureAdRegistered = n.getBooleanValue(); },
        "isHybridAzureDomainJoined": n => { hostSecurityState.isHybridAzureDomainJoined = n.getBooleanValue(); },
        "netBiosName": n => { hostSecurityState.netBiosName = n.getStringValue(); },
        "@odata.type": n => { hostSecurityState.odataType = n.getStringValue(); },
        "os": n => { hostSecurityState.os = n.getStringValue(); },
        "privateIpAddress": n => { hostSecurityState.privateIpAddress = n.getStringValue(); },
        "publicIpAddress": n => { hostSecurityState.publicIpAddress = n.getStringValue(); },
        "riskScore": n => { hostSecurityState.riskScore = n.getStringValue(); },
    }
}
export interface HostSecurityState extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Host FQDN (Fully Qualified Domain Name) (for example, machine.company.com).
     */
    fqdn?: string;
    /**
     * The isAzureAdJoined property
     */
    isAzureAdJoined?: boolean;
    /**
     * The isAzureAdRegistered property
     */
    isAzureAdRegistered?: boolean;
    /**
     * True if the host is domain joined to an on-premises Active Directory domain.
     */
    isHybridAzureDomainJoined?: boolean;
    /**
     * The local host name, without the DNS domain name.
     */
    netBiosName?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Host Operating System. (For example, Windows 10, macOS, RHEL, etc.).
     */
    os?: string;
    /**
     * Private (not routable) IPv4 or IPv6 address (see RFC 1918) at the time of the alert.
     */
    privateIpAddress?: string;
    /**
     * Publicly routable IPv4 or IPv6 address (see RFC 1918) at time of the alert.
     */
    publicIpAddress?: string;
    /**
     * Provider-generated/calculated risk score of the host.  Recommended value range of 0-1, which equates to a percentage.
     */
    riskScore?: string;
}
export function serializeHostSecurityState(writer: SerializationWriter, hostSecurityState: HostSecurityState | undefined = {} as HostSecurityState) : void {
        writer.writeStringValue("fqdn", hostSecurityState.fqdn);
        writer.writeBooleanValue("isAzureAdJoined", hostSecurityState.isAzureAdJoined);
        writer.writeBooleanValue("isAzureAdRegistered", hostSecurityState.isAzureAdRegistered);
        writer.writeBooleanValue("isHybridAzureDomainJoined", hostSecurityState.isHybridAzureDomainJoined);
        writer.writeStringValue("netBiosName", hostSecurityState.netBiosName);
        writer.writeStringValue("@odata.type", hostSecurityState.odataType);
        writer.writeStringValue("os", hostSecurityState.os);
        writer.writeStringValue("privateIpAddress", hostSecurityState.privateIpAddress);
        writer.writeStringValue("publicIpAddress", hostSecurityState.publicIpAddress);
        writer.writeStringValue("riskScore", hostSecurityState.riskScore);
        writer.writeAdditionalData(hostSecurityState.additionalData);
}
// tslint:enable
// eslint-enable
