// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createRequestScheduleFromDiscriminatorValue, serializeRequestSchedule, type RequestSchedule } from './requestSchedule';
import { createUnifiedRoleEligibilityScheduleFromDiscriminatorValue, serializeUnifiedRoleEligibilitySchedule, type UnifiedRoleEligibilitySchedule } from './unifiedRoleEligibilitySchedule';
import { deserializeIntoUnifiedRoleScheduleBase, serializeUnifiedRoleScheduleBase, type UnifiedRoleScheduleBase } from './unifiedRoleScheduleBase';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUnifiedRoleAssignmentScheduleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUnifiedRoleAssignmentSchedule;
}
export function deserializeIntoUnifiedRoleAssignmentSchedule(unifiedRoleAssignmentSchedule: UnifiedRoleAssignmentSchedule | undefined = {} as UnifiedRoleAssignmentSchedule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoUnifiedRoleScheduleBase(unifiedRoleAssignmentSchedule),
        "activatedUsing": n => { unifiedRoleAssignmentSchedule.activatedUsing = n.getObjectValue<UnifiedRoleEligibilitySchedule>(createUnifiedRoleEligibilityScheduleFromDiscriminatorValue); },
        "assignmentType": n => { unifiedRoleAssignmentSchedule.assignmentType = n.getStringValue(); },
        "memberType": n => { unifiedRoleAssignmentSchedule.memberType = n.getStringValue(); },
        "scheduleInfo": n => { unifiedRoleAssignmentSchedule.scheduleInfo = n.getObjectValue<RequestSchedule>(createRequestScheduleFromDiscriminatorValue); },
    }
}
export function serializeUnifiedRoleAssignmentSchedule(writer: SerializationWriter, unifiedRoleAssignmentSchedule: UnifiedRoleAssignmentSchedule | undefined = {} as UnifiedRoleAssignmentSchedule) : void {
        serializeUnifiedRoleScheduleBase(writer, unifiedRoleAssignmentSchedule)
        writer.writeObjectValue<UnifiedRoleEligibilitySchedule>("activatedUsing", unifiedRoleAssignmentSchedule.activatedUsing, );
        writer.writeStringValue("assignmentType", unifiedRoleAssignmentSchedule.assignmentType);
        writer.writeStringValue("memberType", unifiedRoleAssignmentSchedule.memberType);
        writer.writeObjectValue<RequestSchedule>("scheduleInfo", unifiedRoleAssignmentSchedule.scheduleInfo, );
}
export interface UnifiedRoleAssignmentSchedule extends Parsable, UnifiedRoleScheduleBase {
    /**
     * If the request is from an eligible administrator to activate a role, this parameter will show the related eligible assignment for that activation. Otherwise, it is null. Supports $expand.
     */
    activatedUsing?: UnifiedRoleEligibilitySchedule;
    /**
     * Type of the assignment which can either be Assigned or Activated. Supports $filter (eq, ne).
     */
    assignmentType?: string;
    /**
     * How the assignments is inherited. It can either be Inherited, Direct, or Group. It can further imply whether the unifiedRoleAssignmentSchedule can be managed by the caller. Supports $filter (eq, ne).
     */
    memberType?: string;
    /**
     * The period of the role assignment. It can represent a single occurrence or multiple recurrences.
     */
    scheduleInfo?: RequestSchedule;
}
// tslint:enable
// eslint-enable
