// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoApiAuthenticationConfigurationBase, serializeApiAuthenticationConfigurationBase, type ApiAuthenticationConfigurationBase } from './apiAuthenticationConfigurationBase';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPkcs12CertificateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPkcs12Certificate;
}
export function deserializeIntoPkcs12Certificate(pkcs12Certificate: Pkcs12Certificate | undefined = {} as Pkcs12Certificate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoApiAuthenticationConfigurationBase(pkcs12Certificate),
        "password": n => { pkcs12Certificate.password = n.getStringValue(); },
        "pkcs12Value": n => { pkcs12Certificate.pkcs12Value = n.getStringValue(); },
    }
}
export interface Pkcs12Certificate extends ApiAuthenticationConfigurationBase, Parsable {
    /**
     * The password for the pfx file. Required. If no password is used, you must still provide a value of ''.
     */
    password?: string;
    /**
     * Represents the pfx content that is sent. The value should be a base-64 encoded version of the actual certificate content. Required.
     */
    pkcs12Value?: string;
}
export function serializePkcs12Certificate(writer: SerializationWriter, pkcs12Certificate: Pkcs12Certificate | undefined = {} as Pkcs12Certificate) : void {
        serializeApiAuthenticationConfigurationBase(writer, pkcs12Certificate)
        writer.writeStringValue("password", pkcs12Certificate.password);
        writer.writeStringValue("pkcs12Value", pkcs12Certificate.pkcs12Value);
}
// tslint:enable
// eslint-enable
