import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createWorkbookChartFontFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookChartFont;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoWorkbookChartFont(workbookChartFont: WorkbookChartFont | undefined = {} as WorkbookChartFont) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartFont),
        "bold": n => { workbookChartFont.bold = n.getBooleanValue(); },
        "color": n => { workbookChartFont.color = n.getStringValue(); },
        "italic": n => { workbookChartFont.italic = n.getBooleanValue(); },
        "name": n => { workbookChartFont.name = n.getStringValue(); },
        "size": n => { workbookChartFont.size = n.getNumberValue(); },
        "underline": n => { workbookChartFont.underline = n.getStringValue(); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeWorkbookChartFont(writer: SerializationWriter, workbookChartFont: WorkbookChartFont | undefined = {} as WorkbookChartFont) : void {
        serializeEntity(writer, workbookChartFont)
        writer.writeBooleanValue("bold", workbookChartFont.bold);
        writer.writeStringValue("color", workbookChartFont.color);
        writer.writeBooleanValue("italic", workbookChartFont.italic);
        writer.writeStringValue("name", workbookChartFont.name);
        writer.writeNumberValue("size", workbookChartFont.size);
        writer.writeStringValue("underline", workbookChartFont.underline);
}
export interface WorkbookChartFont extends Entity, Parsable {
    /**
     * Represents the bold status of font.
     */
    bold?: boolean;
    /**
     * HTML color code representation of the text color. E.g. #FF0000 represents Red.
     */
    color?: string;
    /**
     * Represents the italic status of the font.
     */
    italic?: boolean;
    /**
     * Font name (e.g. 'Calibri')
     */
    name?: string;
    /**
     * Size of the font (e.g. 11)
     */
    size?: number;
    /**
     * Type of underline applied to the font. The possible values are: None, Single.
     */
    underline?: string;
}
