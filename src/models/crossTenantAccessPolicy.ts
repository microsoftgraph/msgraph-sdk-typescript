// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createCrossTenantAccessPolicyConfigurationDefaultFromDiscriminatorValue, serializeCrossTenantAccessPolicyConfigurationDefault, type CrossTenantAccessPolicyConfigurationDefault } from './crossTenantAccessPolicyConfigurationDefault';
import { createCrossTenantAccessPolicyConfigurationPartnerFromDiscriminatorValue, serializeCrossTenantAccessPolicyConfigurationPartner, type CrossTenantAccessPolicyConfigurationPartner } from './crossTenantAccessPolicyConfigurationPartner';
import { deserializeIntoPolicyBase, serializePolicyBase, type PolicyBase } from './policyBase';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCrossTenantAccessPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCrossTenantAccessPolicy;
}
export interface CrossTenantAccessPolicy extends Parsable, PolicyBase {
    /**
     * Used to specify which Microsoft clouds an organization would like to collaborate with. By default, this value is empty. Supported values for this field are: microsoftonline.com, microsoftonline.us, and partner.microsoftonline.cn.
     */
    allowedCloudEndpoints?: string[];
    /**
     * Defines the default configuration for how your organization interacts with external Microsoft Entra organizations.
     */
    defaultEscaped?: CrossTenantAccessPolicyConfigurationDefault;
    /**
     * Defines partner-specific configurations for external Microsoft Entra organizations.
     */
    partners?: CrossTenantAccessPolicyConfigurationPartner[];
}
export function deserializeIntoCrossTenantAccessPolicy(crossTenantAccessPolicy: CrossTenantAccessPolicy | undefined = {} as CrossTenantAccessPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPolicyBase(crossTenantAccessPolicy),
        "allowedCloudEndpoints": n => { crossTenantAccessPolicy.allowedCloudEndpoints = n.getCollectionOfPrimitiveValues<string>(); },
        "default": n => { crossTenantAccessPolicy.defaultEscaped = n.getObjectValue<CrossTenantAccessPolicyConfigurationDefault>(createCrossTenantAccessPolicyConfigurationDefaultFromDiscriminatorValue); },
        "partners": n => { crossTenantAccessPolicy.partners = n.getCollectionOfObjectValues<CrossTenantAccessPolicyConfigurationPartner>(createCrossTenantAccessPolicyConfigurationPartnerFromDiscriminatorValue); },
    }
}
export function serializeCrossTenantAccessPolicy(writer: SerializationWriter, crossTenantAccessPolicy: CrossTenantAccessPolicy | undefined = {} as CrossTenantAccessPolicy) : void {
    serializePolicyBase(writer, crossTenantAccessPolicy)
    writer.writeCollectionOfPrimitiveValues<string>("allowedCloudEndpoints", crossTenantAccessPolicy.allowedCloudEndpoints);
    writer.writeObjectValue<CrossTenantAccessPolicyConfigurationDefault>("default", crossTenantAccessPolicy.defaultEscaped, serializeCrossTenantAccessPolicyConfigurationDefault);
    writer.writeCollectionOfObjectValues<CrossTenantAccessPolicyConfigurationPartner>("partners", crossTenantAccessPolicy.partners, serializeCrossTenantAccessPolicyConfigurationPartner);
}
// tslint:enable
// eslint-enable
