// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from './group';
import { createSetFromDiscriminatorValue, serializeSet, type Set } from './set';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createStoreFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoStore;
}
export function deserializeIntoStore(store: Store | undefined = {} as Store) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(store),
        "defaultLanguageTag": n => { store.defaultLanguageTag = n.getStringValue(); },
        "groups": n => { store.groups = n.getCollectionOfObjectValues<Group>(createGroupFromDiscriminatorValue); },
        "languageTags": n => { store.languageTags = n.getCollectionOfPrimitiveValues<string>(); },
        "sets": n => { store.sets = n.getCollectionOfObjectValues<Set>(createSetFromDiscriminatorValue); },
    }
}
export function serializeStore(writer: SerializationWriter, store: Store | undefined = {} as Store) : void {
    serializeEntity(writer, store)
    writer.writeStringValue("defaultLanguageTag", store.defaultLanguageTag);
    writer.writeCollectionOfObjectValues<Group>("groups", store.groups, serializeGroup);
    writer.writeCollectionOfPrimitiveValues<string>("languageTags", store.languageTags);
    writer.writeCollectionOfObjectValues<Set>("sets", store.sets, serializeSet);
}
export interface Store extends Entity, Parsable {
    /**
     * Default language of the term store.
     */
    defaultLanguageTag?: string;
    /**
     * Collection of all groups available in the term store.
     */
    groups?: Group[];
    /**
     * List of languages for the term store.
     */
    languageTags?: string[];
    /**
     * Collection of all sets available in the term store. This relationship can only be used to load a specific term set.
     */
    sets?: Set[];
}
// tslint:enable
// eslint-enable
