// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createKeyValueFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, deserializeIntoEntity, serializeBaseCollectionPaginationCountResponse, serializeEntity, serializeKeyValue, type BaseCollectionPaginationCountResponse, type Entity, type KeyValue } from '../';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGroupCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGroupCollectionResponse;
}
export function createGroupFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoGroup;
}
export function createLocalizedDescriptionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoLocalizedDescription;
}
export function createLocalizedLabelFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoLocalizedLabel;
}
export function createLocalizedNameFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoLocalizedName;
}
export function createRelationCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRelationCollectionResponse;
}
export function createRelationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRelation;
}
export function createSetCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSetCollectionResponse;
}
export function createSetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSet;
}
export function createStoreCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoStoreCollectionResponse;
}
export function createStoreFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoStore;
}
export function createTermCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTermCollectionResponse;
}
export function createTermFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTerm;
}
export function deserializeIntoGroup(group: Group | undefined = {} as Group) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(group),
        "createdDateTime": n => { group.createdDateTime = n.getDateValue(); },
        "description": n => { group.description = n.getStringValue(); },
        "displayName": n => { group.displayName = n.getStringValue(); },
        "parentSiteId": n => { group.parentSiteId = n.getStringValue(); },
        "scope": n => { group.scope = n.getEnumValue<Group_scope>(Group_scopeObject); },
        "sets": n => { group.sets = n.getCollectionOfObjectValues<Set>(createSetFromDiscriminatorValue); },
    }
}
export function deserializeIntoGroupCollectionResponse(groupCollectionResponse: GroupCollectionResponse | undefined = {} as GroupCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(groupCollectionResponse),
        "value": n => { groupCollectionResponse.value = n.getCollectionOfObjectValues<Group>(createGroupFromDiscriminatorValue); },
    }
}
export function deserializeIntoLocalizedDescription(localizedDescription: LocalizedDescription | undefined = {} as LocalizedDescription) : Record<string, (node: ParseNode) => void> {
    return {
        "description": n => { localizedDescription.description = n.getStringValue(); },
        "languageTag": n => { localizedDescription.languageTag = n.getStringValue(); },
        "@odata.type": n => { localizedDescription.odataType = n.getStringValue(); },
    }
}
export function deserializeIntoLocalizedLabel(localizedLabel: LocalizedLabel | undefined = {} as LocalizedLabel) : Record<string, (node: ParseNode) => void> {
    return {
        "isDefault": n => { localizedLabel.isDefault = n.getBooleanValue(); },
        "languageTag": n => { localizedLabel.languageTag = n.getStringValue(); },
        "name": n => { localizedLabel.name = n.getStringValue(); },
        "@odata.type": n => { localizedLabel.odataType = n.getStringValue(); },
    }
}
export function deserializeIntoLocalizedName(localizedName: LocalizedName | undefined = {} as LocalizedName) : Record<string, (node: ParseNode) => void> {
    return {
        "languageTag": n => { localizedName.languageTag = n.getStringValue(); },
        "name": n => { localizedName.name = n.getStringValue(); },
        "@odata.type": n => { localizedName.odataType = n.getStringValue(); },
    }
}
export function deserializeIntoRelation(relation: Relation | undefined = {} as Relation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(relation),
        "fromTerm": n => { relation.fromTerm = n.getObjectValue<Term>(createTermFromDiscriminatorValue); },
        "relationship": n => { relation.relationship = n.getEnumValue<Relation_relationship>(Relation_relationshipObject); },
        "set": n => { relation.set = n.getObjectValue<Set>(createSetFromDiscriminatorValue); },
        "toTerm": n => { relation.toTerm = n.getObjectValue<Term>(createTermFromDiscriminatorValue); },
    }
}
export function deserializeIntoRelationCollectionResponse(relationCollectionResponse: RelationCollectionResponse | undefined = {} as RelationCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(relationCollectionResponse),
        "value": n => { relationCollectionResponse.value = n.getCollectionOfObjectValues<Relation>(createRelationFromDiscriminatorValue); },
    }
}
export function deserializeIntoSet(set: Set | undefined = {} as Set) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(set),
        "children": n => { set.children = n.getCollectionOfObjectValues<Term>(createTermFromDiscriminatorValue); },
        "createdDateTime": n => { set.createdDateTime = n.getDateValue(); },
        "description": n => { set.description = n.getStringValue(); },
        "localizedNames": n => { set.localizedNames = n.getCollectionOfObjectValues<LocalizedName>(createLocalizedNameFromDiscriminatorValue); },
        "parentGroup": n => { set.parentGroup = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "properties": n => { set.properties = n.getCollectionOfObjectValues<KeyValue>(createKeyValueFromDiscriminatorValue); },
        "relations": n => { set.relations = n.getCollectionOfObjectValues<Relation>(createRelationFromDiscriminatorValue); },
        "terms": n => { set.terms = n.getCollectionOfObjectValues<Term>(createTermFromDiscriminatorValue); },
    }
}
export function deserializeIntoSetCollectionResponse(setCollectionResponse: SetCollectionResponse | undefined = {} as SetCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(setCollectionResponse),
        "value": n => { setCollectionResponse.value = n.getCollectionOfObjectValues<Set>(createSetFromDiscriminatorValue); },
    }
}
export function deserializeIntoStore(store: Store | undefined = {} as Store) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(store),
        "defaultLanguageTag": n => { store.defaultLanguageTag = n.getStringValue(); },
        "groups": n => { store.groups = n.getCollectionOfObjectValues<Group>(createGroupFromDiscriminatorValue); },
        "languageTags": n => { store.languageTags = n.getCollectionOfPrimitiveValues<string>(); },
        "sets": n => { store.sets = n.getCollectionOfObjectValues<Set>(createSetFromDiscriminatorValue); },
    }
}
export function deserializeIntoStoreCollectionResponse(storeCollectionResponse: StoreCollectionResponse | undefined = {} as StoreCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(storeCollectionResponse),
        "value": n => { storeCollectionResponse.value = n.getCollectionOfObjectValues<Store>(createStoreFromDiscriminatorValue); },
    }
}
export function deserializeIntoTerm(term: Term | undefined = {} as Term) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(term),
        "children": n => { term.children = n.getCollectionOfObjectValues<Term>(createTermFromDiscriminatorValue); },
        "createdDateTime": n => { term.createdDateTime = n.getDateValue(); },
        "descriptions": n => { term.descriptions = n.getCollectionOfObjectValues<LocalizedDescription>(createLocalizedDescriptionFromDiscriminatorValue); },
        "labels": n => { term.labels = n.getCollectionOfObjectValues<LocalizedLabel>(createLocalizedLabelFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { term.lastModifiedDateTime = n.getDateValue(); },
        "properties": n => { term.properties = n.getCollectionOfObjectValues<KeyValue>(createKeyValueFromDiscriminatorValue); },
        "relations": n => { term.relations = n.getCollectionOfObjectValues<Relation>(createRelationFromDiscriminatorValue); },
        "set": n => { term.set = n.getObjectValue<Set>(createSetFromDiscriminatorValue); },
    }
}
export function deserializeIntoTermCollectionResponse(termCollectionResponse: TermCollectionResponse | undefined = {} as TermCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(termCollectionResponse),
        "value": n => { termCollectionResponse.value = n.getCollectionOfObjectValues<Term>(createTermFromDiscriminatorValue); },
    }
}
export interface Group extends Entity, Parsable {
    /**
     * Date and time of the group creation. Read-only.
     */
    createdDateTime?: Date;
    /**
     * Description that gives details on the term usage.
     */
    description?: string;
    /**
     * Name of the group.
     */
    displayName?: string;
    /**
     * ID of the parent site of this group.
     */
    parentSiteId?: string;
    /**
     * Returns the type of the group. Possible values are: global, system, and siteCollection.
     */
    scope?: Group_scope;
    /**
     * All sets under the group in a term [store].
     */
    sets?: Set[];
}
export interface GroupCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Group[];
}
export interface LocalizedDescription extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The description in the localized language.
     */
    description?: string;
    /**
     * The language tag for the label.
     */
    languageTag?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface LocalizedLabel extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates whether the label is the default label.
     */
    isDefault?: boolean;
    /**
     * The language tag for the label.
     */
    languageTag?: string;
    /**
     * The name of the label.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface LocalizedName extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The language tag for the label.
     */
    languageTag?: string;
    /**
     * The name in the localized language.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface Relation extends Entity, Parsable {
    /**
     * The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].
     */
    fromTerm?: Term;
    /**
     * The type of relation. Possible values are: pin, reuse.
     */
    relationship?: Relation_relationship;
    /**
     * The [set] in which the relation is relevant.
     */
    set?: Set;
    /**
     * The to [term] of the relation. The term to which the relationship is defined.
     */
    toTerm?: Term;
}
export interface RelationCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Relation[];
}
export function serializeGroup(writer: SerializationWriter, group: Group | undefined = {} as Group) : void {
    serializeEntity(writer, group)
    writer.writeDateValue("createdDateTime", group.createdDateTime);
    writer.writeStringValue("description", group.description);
    writer.writeStringValue("displayName", group.displayName);
    writer.writeStringValue("parentSiteId", group.parentSiteId);
    writer.writeEnumValue<Group_scope>("scope", group.scope);
    writer.writeCollectionOfObjectValues<Set>("sets", group.sets, serializeSet);
}
export function serializeGroupCollectionResponse(writer: SerializationWriter, groupCollectionResponse: GroupCollectionResponse | undefined = {} as GroupCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, groupCollectionResponse)
    writer.writeCollectionOfObjectValues<Group>("value", groupCollectionResponse.value, serializeGroup);
}
export function serializeLocalizedDescription(writer: SerializationWriter, localizedDescription: LocalizedDescription | undefined = {} as LocalizedDescription) : void {
    writer.writeStringValue("description", localizedDescription.description);
    writer.writeStringValue("languageTag", localizedDescription.languageTag);
    writer.writeStringValue("@odata.type", localizedDescription.odataType);
    writer.writeAdditionalData(localizedDescription.additionalData);
}
export function serializeLocalizedLabel(writer: SerializationWriter, localizedLabel: LocalizedLabel | undefined = {} as LocalizedLabel) : void {
    writer.writeBooleanValue("isDefault", localizedLabel.isDefault);
    writer.writeStringValue("languageTag", localizedLabel.languageTag);
    writer.writeStringValue("name", localizedLabel.name);
    writer.writeStringValue("@odata.type", localizedLabel.odataType);
    writer.writeAdditionalData(localizedLabel.additionalData);
}
export function serializeLocalizedName(writer: SerializationWriter, localizedName: LocalizedName | undefined = {} as LocalizedName) : void {
    writer.writeStringValue("languageTag", localizedName.languageTag);
    writer.writeStringValue("name", localizedName.name);
    writer.writeStringValue("@odata.type", localizedName.odataType);
    writer.writeAdditionalData(localizedName.additionalData);
}
export function serializeRelation(writer: SerializationWriter, relation: Relation | undefined = {} as Relation) : void {
    serializeEntity(writer, relation)
    writer.writeObjectValue<Term>("fromTerm", relation.fromTerm, serializeTerm);
    writer.writeEnumValue<Relation_relationship>("relationship", relation.relationship);
    writer.writeObjectValue<Set>("set", relation.set, serializeSet);
    writer.writeObjectValue<Term>("toTerm", relation.toTerm, serializeTerm);
}
export function serializeRelationCollectionResponse(writer: SerializationWriter, relationCollectionResponse: RelationCollectionResponse | undefined = {} as RelationCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, relationCollectionResponse)
    writer.writeCollectionOfObjectValues<Relation>("value", relationCollectionResponse.value, serializeRelation);
}
export function serializeSet(writer: SerializationWriter, set: Set | undefined = {} as Set) : void {
    serializeEntity(writer, set)
    writer.writeCollectionOfObjectValues<Term>("children", set.children, serializeTerm);
    writer.writeDateValue("createdDateTime", set.createdDateTime);
    writer.writeStringValue("description", set.description);
    writer.writeCollectionOfObjectValues<LocalizedName>("localizedNames", set.localizedNames, serializeLocalizedName);
    writer.writeObjectValue<Group>("parentGroup", set.parentGroup, serializeGroup);
    writer.writeCollectionOfObjectValues<KeyValue>("properties", set.properties, serializeKeyValue);
    writer.writeCollectionOfObjectValues<Relation>("relations", set.relations, serializeRelation);
    writer.writeCollectionOfObjectValues<Term>("terms", set.terms, serializeTerm);
}
export function serializeSetCollectionResponse(writer: SerializationWriter, setCollectionResponse: SetCollectionResponse | undefined = {} as SetCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, setCollectionResponse)
    writer.writeCollectionOfObjectValues<Set>("value", setCollectionResponse.value, serializeSet);
}
export function serializeStore(writer: SerializationWriter, store: Store | undefined = {} as Store) : void {
    serializeEntity(writer, store)
    writer.writeStringValue("defaultLanguageTag", store.defaultLanguageTag);
    writer.writeCollectionOfObjectValues<Group>("groups", store.groups, serializeGroup);
    writer.writeCollectionOfPrimitiveValues<string>("languageTags", store.languageTags);
    writer.writeCollectionOfObjectValues<Set>("sets", store.sets, serializeSet);
}
export function serializeStoreCollectionResponse(writer: SerializationWriter, storeCollectionResponse: StoreCollectionResponse | undefined = {} as StoreCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, storeCollectionResponse)
    writer.writeCollectionOfObjectValues<Store>("value", storeCollectionResponse.value, serializeStore);
}
export function serializeTerm(writer: SerializationWriter, term: Term | undefined = {} as Term) : void {
    serializeEntity(writer, term)
    writer.writeCollectionOfObjectValues<Term>("children", term.children, serializeTerm);
    writer.writeDateValue("createdDateTime", term.createdDateTime);
    writer.writeCollectionOfObjectValues<LocalizedDescription>("descriptions", term.descriptions, serializeLocalizedDescription);
    writer.writeCollectionOfObjectValues<LocalizedLabel>("labels", term.labels, serializeLocalizedLabel);
    writer.writeDateValue("lastModifiedDateTime", term.lastModifiedDateTime);
    writer.writeCollectionOfObjectValues<KeyValue>("properties", term.properties, serializeKeyValue);
    writer.writeCollectionOfObjectValues<Relation>("relations", term.relations, serializeRelation);
    writer.writeObjectValue<Set>("set", term.set, serializeSet);
}
export function serializeTermCollectionResponse(writer: SerializationWriter, termCollectionResponse: TermCollectionResponse | undefined = {} as TermCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, termCollectionResponse)
    writer.writeCollectionOfObjectValues<Term>("value", termCollectionResponse.value, serializeTerm);
}
export interface Set extends Entity, Parsable {
    /**
     * Children terms of set in term [store].
     */
    children?: Term[];
    /**
     * Date and time of set creation. Read-only.
     */
    createdDateTime?: Date;
    /**
     * Description that gives details on the term usage.
     */
    description?: string;
    /**
     * Name of the set for each languageTag.
     */
    localizedNames?: LocalizedName[];
    /**
     * The parentGroup property
     */
    parentGroup?: Group;
    /**
     * Custom properties for the set.
     */
    properties?: KeyValue[];
    /**
     * Indicates which terms have been pinned or reused directly under the set.
     */
    relations?: Relation[];
    /**
     * All the terms under the set.
     */
    terms?: Term[];
}
export interface SetCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Set[];
}
export interface Store extends Entity, Parsable {
    /**
     * Default language of the term store.
     */
    defaultLanguageTag?: string;
    /**
     * Collection of all groups available in the term store.
     */
    groups?: Group[];
    /**
     * List of languages for the term store.
     */
    languageTags?: string[];
    /**
     * Collection of all sets available in the term store. This relationship can only be used to load a specific term set.
     */
    sets?: Set[];
}
export interface StoreCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Store[];
}
export interface Term extends Entity, Parsable {
    /**
     * Children of current term.
     */
    children?: Term[];
    /**
     * Date and time of term creation. Read-only.
     */
    createdDateTime?: Date;
    /**
     * Description about term that is dependent on the languageTag.
     */
    descriptions?: LocalizedDescription[];
    /**
     * Label metadata for a term.
     */
    labels?: LocalizedLabel[];
    /**
     * Last date and time of term modification. Read-only.
     */
    lastModifiedDateTime?: Date;
    /**
     * Collection of properties on the term.
     */
    properties?: KeyValue[];
    /**
     * To indicate which terms are related to the current term as either pinned or reused.
     */
    relations?: Relation[];
    /**
     * The [set] in which the term is created.
     */
    set?: Set;
}
export interface TermCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Term[];
}
// tslint:enable
// eslint-enable
