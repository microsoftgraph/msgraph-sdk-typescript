// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createSetFromDiscriminatorValue, serializeSet, type Set } from './set';
import { TermGroupScope } from './termGroupScope';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createGroupFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoGroup;
}
export function deserializeIntoGroup(group: Group | undefined = {} as Group) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(group),
        "createdDateTime": n => { group.createdDateTime = n.getDateValue(); },
        "description": n => { group.description = n.getStringValue(); },
        "displayName": n => { group.displayName = n.getStringValue(); },
        "parentSiteId": n => { group.parentSiteId = n.getStringValue(); },
        "scope": n => { group.scope = n.getEnumValue<TermGroupScope>(TermGroupScope); },
        "sets": n => { group.sets = n.getCollectionOfObjectValues<Set>(createSetFromDiscriminatorValue); },
    }
}
export interface Group extends Entity, Parsable {
    /**
     * Date and time of the group creation. Read-only.
     */
    createdDateTime?: Date;
    /**
     * Description that gives details on the term usage.
     */
    description?: string;
    /**
     * Name of the group.
     */
    displayName?: string;
    /**
     * ID of the parent site of this group.
     */
    parentSiteId?: string;
    /**
     * Returns the type of the group. Possible values are: global, system, and siteCollection.
     */
    scope?: TermGroupScope;
    /**
     * All sets under the group in a term [store].
     */
    sets?: Set[];
}
export function serializeGroup(writer: SerializationWriter, group: Group | undefined = {} as Group) : void {
        serializeEntity(writer, group)
        writer.writeDateValue("createdDateTime", group.createdDateTime);
        writer.writeStringValue("description", group.description);
        writer.writeStringValue("displayName", group.displayName);
        writer.writeStringValue("parentSiteId", group.parentSiteId);
        writer.writeEnumValue<TermGroupScope>("scope", group.scope);
        writer.writeCollectionOfObjectValues<Set>("sets", group.sets, serializeSet);
}
// tslint:enable
// eslint-enable
