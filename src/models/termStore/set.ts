// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from '../entity';
import { createKeyValueFromDiscriminatorValue, serializeKeyValue, type KeyValue } from '../keyValue';
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from './group';
import { createLocalizedNameFromDiscriminatorValue, serializeLocalizedName, type LocalizedName } from './localizedName';
import { createRelationFromDiscriminatorValue, serializeRelation, type Relation } from './relation';
import { createTermFromDiscriminatorValue, serializeTerm, type Term } from './term';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSet;
}
export function deserializeIntoSet(set: Set | undefined = {} as Set) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(set),
        "children": n => { set.children = n.getCollectionOfObjectValues<Term>(createTermFromDiscriminatorValue); },
        "createdDateTime": n => { set.createdDateTime = n.getDateValue(); },
        "description": n => { set.description = n.getStringValue(); },
        "localizedNames": n => { set.localizedNames = n.getCollectionOfObjectValues<LocalizedName>(createLocalizedNameFromDiscriminatorValue); },
        "parentGroup": n => { set.parentGroup = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "properties": n => { set.properties = n.getCollectionOfObjectValues<KeyValue>(createKeyValueFromDiscriminatorValue); },
        "relations": n => { set.relations = n.getCollectionOfObjectValues<Relation>(createRelationFromDiscriminatorValue); },
        "terms": n => { set.terms = n.getCollectionOfObjectValues<Term>(createTermFromDiscriminatorValue); },
    }
}
export function serializeSet(writer: SerializationWriter, set: Set | undefined = {} as Set) : void {
        serializeEntity(writer, set)
        writer.writeCollectionOfObjectValues<Term>("children", set.children, );
        writer.writeDateValue("createdDateTime", set.createdDateTime);
        writer.writeStringValue("description", set.description);
        writer.writeCollectionOfObjectValues<LocalizedName>("localizedNames", set.localizedNames, );
        writer.writeObjectValue<Group>("parentGroup", set.parentGroup, );
        writer.writeCollectionOfObjectValues<KeyValue>("properties", set.properties, );
        writer.writeCollectionOfObjectValues<Relation>("relations", set.relations, );
        writer.writeCollectionOfObjectValues<Term>("terms", set.terms, );
}
export interface Set extends Entity, Parsable {
    /**
     * Children terms of set in term [store].
     */
    children?: Term[];
    /**
     * Date and time of set creation. Read-only.
     */
    createdDateTime?: Date;
    /**
     * Description that gives details on the term usage.
     */
    description?: string;
    /**
     * Name of the set for each languageTag.
     */
    localizedNames?: LocalizedName[];
    /**
     * The parentGroup property
     */
    parentGroup?: Group;
    /**
     * Custom properties for the set.
     */
    properties?: KeyValue[];
    /**
     * Indicates which terms have been pinned or reused directly under the set.
     */
    relations?: Relation[];
    /**
     * All the terms under the set.
     */
    terms?: Term[];
}
// tslint:enable
// eslint-enable
