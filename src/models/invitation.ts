// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createInvitedUserMessageInfoFromDiscriminatorValue, serializeInvitedUserMessageInfo, type InvitedUserMessageInfo } from './invitedUserMessageInfo';
import { createUserFromDiscriminatorValue, serializeUser, type User } from './user';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createInvitationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoInvitation;
}
export function deserializeIntoInvitation(invitation: Invitation | undefined = {} as Invitation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(invitation),
        "invitedUser": n => { invitation.invitedUser = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "invitedUserDisplayName": n => { invitation.invitedUserDisplayName = n.getStringValue(); },
        "invitedUserEmailAddress": n => { invitation.invitedUserEmailAddress = n.getStringValue(); },
        "invitedUserMessageInfo": n => { invitation.invitedUserMessageInfo = n.getObjectValue<InvitedUserMessageInfo>(createInvitedUserMessageInfoFromDiscriminatorValue); },
        "invitedUserType": n => { invitation.invitedUserType = n.getStringValue(); },
        "inviteRedeemUrl": n => { invitation.inviteRedeemUrl = n.getStringValue(); },
        "inviteRedirectUrl": n => { invitation.inviteRedirectUrl = n.getStringValue(); },
        "resetRedemption": n => { invitation.resetRedemption = n.getBooleanValue(); },
        "sendInvitationMessage": n => { invitation.sendInvitationMessage = n.getBooleanValue(); },
        "status": n => { invitation.status = n.getStringValue(); },
    }
}
export interface Invitation extends Entity, Parsable {
    /**
     * The user created as part of the invitation creation. Read-Only
     */
    invitedUser?: User;
    /**
     * The display name of the user being invited.
     */
    invitedUserDisplayName?: string;
    /**
     * The email address of the user being invited. Required. The following special characters aren't permitted in the email address:Tilde (~)Exclamation point (!)Number sign (#)Dollar sign ($)Percent (%)Circumflex (^)Ampersand (&)Asterisk (*)Parentheses (( ))Plus sign (+)Equal sign (=)Brackets ([ ])Braces ({ })Backslash (/)Slash mark (/)Pipe (/|)Semicolon (;)Colon (:)Quotation marks (')Angle brackets (< >)Question mark (?)Comma (,)However, the following exceptions apply:A period (.) or a hyphen (-) is permitted anywhere in the user name, except at the beginning or end of the name.An underscore (_) is permitted anywhere in the user name. This includes at the beginning or end of the name.
     */
    invitedUserEmailAddress?: string;
    /**
     * Additional configuration for the message being sent to the invited user, including customizing message text, language and cc recipient list.
     */
    invitedUserMessageInfo?: InvitedUserMessageInfo;
    /**
     * The userType of the user being invited. By default, this is Guest. You can invite as Member if you're a company administrator.
     */
    invitedUserType?: string;
    /**
     * The URL the user can use to redeem their invitation. Read-only.
     */
    inviteRedeemUrl?: string;
    /**
     * The URL the user should be redirected to once the invitation is redeemed. Required.
     */
    inviteRedirectUrl?: string;
    /**
     * Reset the user's redemption status and reinvite a user while retaining their user identifier, group memberships, and app assignments. This property allows you to enable a user to sign-in using a different email address from the one in the previous invitation. For more information about using this property, see Reset redemption status for a guest user.
     */
    resetRedemption?: boolean;
    /**
     * Indicates whether an email should be sent to the user being invited. The default is false.
     */
    sendInvitationMessage?: boolean;
    /**
     * The status of the invitation. Possible values are: PendingAcceptance, Completed, InProgress, and Error.
     */
    status?: string;
}
export function serializeInvitation(writer: SerializationWriter, invitation: Invitation | undefined = {} as Invitation) : void {
        serializeEntity(writer, invitation)
        writer.writeObjectValue<User>("invitedUser", invitation.invitedUser, serializeUser);
        writer.writeStringValue("invitedUserDisplayName", invitation.invitedUserDisplayName);
        writer.writeStringValue("invitedUserEmailAddress", invitation.invitedUserEmailAddress);
        writer.writeObjectValue<InvitedUserMessageInfo>("invitedUserMessageInfo", invitation.invitedUserMessageInfo, serializeInvitedUserMessageInfo);
        writer.writeStringValue("invitedUserType", invitation.invitedUserType);
        writer.writeStringValue("inviteRedeemUrl", invitation.inviteRedeemUrl);
        writer.writeStringValue("inviteRedirectUrl", invitation.inviteRedirectUrl);
        writer.writeBooleanValue("resetRedemption", invitation.resetRedemption);
        writer.writeBooleanValue("sendInvitationMessage", invitation.sendInvitationMessage);
        writer.writeStringValue("status", invitation.status);
}
// tslint:enable
// eslint-enable
