// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOptionalClaimFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOptionalClaim;
}
export function deserializeIntoOptionalClaim(optionalClaim: OptionalClaim | undefined = {} as OptionalClaim) : Record<string, (node: ParseNode) => void> {
    return {
        "additionalProperties": n => { optionalClaim.additionalProperties = n.getCollectionOfPrimitiveValues<string>(); },
        "essential": n => { optionalClaim.essential = n.getBooleanValue(); },
        "name": n => { optionalClaim.name = n.getStringValue(); },
        "@odata.type": n => { optionalClaim.odataType = n.getStringValue(); },
        "source": n => { optionalClaim.source = n.getStringValue(); },
    }
}
export interface OptionalClaim extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Additional properties of the claim. If a property exists in this collection, it modifies the behavior of the optional claim specified in the name property.
     */
    additionalProperties?: string[];
    /**
     * If the value is true, the claim specified by the client is necessary to ensure a smooth authorization experience for the specific task requested by the end user. The default value is false.
     */
    essential?: boolean;
    /**
     * The name of the optional claim.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The source (directory object) of the claim. There are predefined claims and user-defined claims from extension properties. If the source value is null, the claim is a predefined optional claim. If the source value is user, the value in the name property is the extension property from the user object.
     */
    source?: string;
}
export function serializeOptionalClaim(writer: SerializationWriter, optionalClaim: OptionalClaim | undefined = {} as OptionalClaim) : void {
    writer.writeCollectionOfPrimitiveValues<string>("additionalProperties", optionalClaim.additionalProperties);
    writer.writeBooleanValue("essential", optionalClaim.essential);
    writer.writeStringValue("name", optionalClaim.name);
    writer.writeStringValue("@odata.type", optionalClaim.odataType);
    writer.writeStringValue("source", optionalClaim.source);
    writer.writeAdditionalData(optionalClaim.additionalData);
}
// tslint:enable
// eslint-enable
