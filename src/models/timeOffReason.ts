// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoChangeTrackedEntity, serializeChangeTrackedEntity, type ChangeTrackedEntity } from './changeTrackedEntity';
import { TimeOffReasonIconType } from './timeOffReasonIconType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTimeOffReasonFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTimeOffReason;
}
export function deserializeIntoTimeOffReason(timeOffReason: TimeOffReason | undefined = {} as TimeOffReason) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoChangeTrackedEntity(timeOffReason),
        "displayName": n => { timeOffReason.displayName = n.getStringValue(); },
        "iconType": n => { timeOffReason.iconType = n.getEnumValue<TimeOffReasonIconType>(TimeOffReasonIconType); },
        "isActive": n => { timeOffReason.isActive = n.getBooleanValue(); },
    }
}
export function serializeTimeOffReason(writer: SerializationWriter, timeOffReason: TimeOffReason | undefined = {} as TimeOffReason) : void {
        serializeChangeTrackedEntity(writer, timeOffReason)
        writer.writeStringValue("displayName", timeOffReason.displayName);
        writer.writeEnumValue<TimeOffReasonIconType>("iconType", timeOffReason.iconType);
        writer.writeBooleanValue("isActive", timeOffReason.isActive);
}
export interface TimeOffReason extends ChangeTrackedEntity, Parsable {
    /**
     * The name of the timeOffReason. Required.
     */
    displayName?: string;
    /**
     * Supported icon types are: none, car, calendar, running, plane, firstAid, doctor, notWorking, clock, juryDuty, globe, cup, phone, weather, umbrella, piggyBank, dog, cake, trafficCone, pin, sunny. Required.
     */
    iconType?: TimeOffReasonIconType;
    /**
     * Indicates whether the timeOffReason can be used when creating new entities or updating existing ones. Required.
     */
    isActive?: boolean;
}
// tslint:enable
// eslint-enable
