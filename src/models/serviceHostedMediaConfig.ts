// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoMediaConfig, serializeMediaConfig, type MediaConfig } from './mediaConfig';
import { createMediaInfoFromDiscriminatorValue, serializeMediaInfo, type MediaInfo } from './mediaInfo';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createServiceHostedMediaConfigFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoServiceHostedMediaConfig;
}
export function deserializeIntoServiceHostedMediaConfig(serviceHostedMediaConfig: ServiceHostedMediaConfig | undefined = {} as ServiceHostedMediaConfig) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMediaConfig(serviceHostedMediaConfig),
        "preFetchMedia": n => { serviceHostedMediaConfig.preFetchMedia = n.getCollectionOfObjectValues<MediaInfo>(createMediaInfoFromDiscriminatorValue); },
    }
}
export function serializeServiceHostedMediaConfig(writer: SerializationWriter, serviceHostedMediaConfig: ServiceHostedMediaConfig | undefined = {} as ServiceHostedMediaConfig) : void {
        serializeMediaConfig(writer, serviceHostedMediaConfig)
        writer.writeCollectionOfObjectValues<MediaInfo>("preFetchMedia", serviceHostedMediaConfig.preFetchMedia, );
}
export interface ServiceHostedMediaConfig extends MediaConfig, Parsable {
    /**
     * The list of media to pre-fetch.
     */
    preFetchMedia?: MediaInfo[];
}
// tslint:enable
// eslint-enable
