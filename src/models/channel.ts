// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { ChannelMembershipType } from './channelMembershipType';
import { createChannelSummaryFromDiscriminatorValue, serializeChannelSummary, type ChannelSummary } from './channelSummary';
import { createChatMessageFromDiscriminatorValue, serializeChatMessage, type ChatMessage } from './chatMessage';
import { createConversationMemberFromDiscriminatorValue, serializeConversationMember, type ConversationMember } from './conversationMember';
import { createDriveItemFromDiscriminatorValue, serializeDriveItem, type DriveItem } from './driveItem';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createSharedWithChannelTeamInfoFromDiscriminatorValue, serializeSharedWithChannelTeamInfo, type SharedWithChannelTeamInfo } from './sharedWithChannelTeamInfo';
import { createTeamsTabFromDiscriminatorValue, serializeTeamsTab, type TeamsTab } from './teamsTab';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Channel extends Entity, Parsable {
    /**
     * Read only. Timestamp at which the channel was created.
     */
    createdDateTime?: Date;
    /**
     * Optional textual description for the channel.
     */
    description?: string;
    /**
     * Channel name as it will appear to the user in Microsoft Teams. The maximum length is 50 characters.
     */
    displayName?: string;
    /**
     * The email address for sending messages to the channel. Read-only.
     */
    email?: string;
    /**
     * Metadata for the location where the channel's files are stored.
     */
    filesFolder?: DriveItem;
    /**
     * Indicates whether the channel should automatically be marked 'favorite' for all members of the team. Can only be set programmatically with Create team. Default: false.
     */
    isFavoriteByDefault?: boolean;
    /**
     * A collection of membership records associated with the channel.
     */
    members?: ConversationMember[];
    /**
     * The type of the channel. Can be set during creation and can't be changed. The possible values are: standard, private, unknownFutureValue, shared. The default value is standard. Note that you must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: shared.
     */
    membershipType?: ChannelMembershipType;
    /**
     * A collection of all the messages in the channel. A navigation property. Nullable.
     */
    messages?: ChatMessage[];
    /**
     * A collection of teams with which a channel is shared.
     */
    sharedWithTeams?: SharedWithChannelTeamInfo[];
    /**
     * Contains summary information about the channel, including number of owners, members, guests, and an indicator for members from other tenants. The summary property will only be returned if it is specified in the $select clause of the Get channel method.
     */
    summary?: ChannelSummary;
    /**
     * A collection of all the tabs in the channel. A navigation property.
     */
    tabs?: TeamsTab[];
    /**
     * The ID of the Microsoft Entra tenant.
     */
    tenantId?: string;
    /**
     * A hyperlink that will go to the channel in Microsoft Teams. This is the URL that you get when you right-click a channel in Microsoft Teams and select Get link to channel. This URL should be treated as an opaque blob, and not parsed. Read-only.
     */
    webUrl?: string;
}
export function createChannelFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoChannel;
}
export function deserializeIntoChannel(channel: Channel | undefined = {} as Channel) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(channel),
        "createdDateTime": n => { channel.createdDateTime = n.getDateValue(); },
        "description": n => { channel.description = n.getStringValue(); },
        "displayName": n => { channel.displayName = n.getStringValue(); },
        "email": n => { channel.email = n.getStringValue(); },
        "filesFolder": n => { channel.filesFolder = n.getObjectValue<DriveItem>(createDriveItemFromDiscriminatorValue); },
        "isFavoriteByDefault": n => { channel.isFavoriteByDefault = n.getBooleanValue(); },
        "members": n => { channel.members = n.getCollectionOfObjectValues<ConversationMember>(createConversationMemberFromDiscriminatorValue); },
        "membershipType": n => { channel.membershipType = n.getEnumValue<ChannelMembershipType>(ChannelMembershipType); },
        "messages": n => { channel.messages = n.getCollectionOfObjectValues<ChatMessage>(createChatMessageFromDiscriminatorValue); },
        "sharedWithTeams": n => { channel.sharedWithTeams = n.getCollectionOfObjectValues<SharedWithChannelTeamInfo>(createSharedWithChannelTeamInfoFromDiscriminatorValue); },
        "summary": n => { channel.summary = n.getObjectValue<ChannelSummary>(createChannelSummaryFromDiscriminatorValue); },
        "tabs": n => { channel.tabs = n.getCollectionOfObjectValues<TeamsTab>(createTeamsTabFromDiscriminatorValue); },
        "tenantId": n => { channel.tenantId = n.getStringValue(); },
        "webUrl": n => { channel.webUrl = n.getStringValue(); },
    }
}
export function serializeChannel(writer: SerializationWriter, channel: Channel | undefined = {} as Channel) : void {
        serializeEntity(writer, channel)
        writer.writeDateValue("createdDateTime", channel.createdDateTime);
        writer.writeStringValue("description", channel.description);
        writer.writeStringValue("displayName", channel.displayName);
        writer.writeStringValue("email", channel.email);
        writer.writeObjectValue<DriveItem>("filesFolder", channel.filesFolder, serializeDriveItem);
        writer.writeBooleanValue("isFavoriteByDefault", channel.isFavoriteByDefault);
        writer.writeCollectionOfObjectValues<ConversationMember>("members", channel.members, serializeConversationMember);
        writer.writeEnumValue<ChannelMembershipType>("membershipType", channel.membershipType);
        writer.writeCollectionOfObjectValues<ChatMessage>("messages", channel.messages, serializeChatMessage);
        writer.writeCollectionOfObjectValues<SharedWithChannelTeamInfo>("sharedWithTeams", channel.sharedWithTeams, serializeSharedWithChannelTeamInfo);
        writer.writeObjectValue<ChannelSummary>("summary", channel.summary, serializeChannelSummary);
        writer.writeCollectionOfObjectValues<TeamsTab>("tabs", channel.tabs, serializeTeamsTab);
        writer.writeStringValue("tenantId", channel.tenantId);
        writer.writeStringValue("webUrl", channel.webUrl);
}
// tslint:enable
// eslint-enable
