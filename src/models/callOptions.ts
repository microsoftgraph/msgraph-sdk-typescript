// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoIncomingCallOptions } from './incomingCallOptions';
import { type IncomingCallOptions, type OutgoingCallOptions } from './index';
import { deserializeIntoOutgoingCallOptions } from './outgoingCallOptions';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CallOptions extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates whether to hide the app after the call is escalated.
     */
    hideBotAfterEscalation?: boolean;
    /**
     * Indicates whether content sharing notifications should be enabled for the call.
     */
    isContentSharingNotificationEnabled?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createCallOptionsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.incomingCallOptions":
                    return deserializeIntoIncomingCallOptions;
                case "#microsoft.graph.outgoingCallOptions":
                    return deserializeIntoOutgoingCallOptions;
            }
        }
    }
    return deserializeIntoCallOptions;
}
export function deserializeIntoCallOptions(callOptions: CallOptions | undefined = {} as CallOptions) : Record<string, (node: ParseNode) => void> {
    return {
        "hideBotAfterEscalation": n => { callOptions.hideBotAfterEscalation = n.getBooleanValue(); },
        "isContentSharingNotificationEnabled": n => { callOptions.isContentSharingNotificationEnabled = n.getBooleanValue(); },
        "@odata.type": n => { callOptions.odataType = n.getStringValue(); },
    }
}
export function serializeCallOptions(writer: SerializationWriter, callOptions: CallOptions | undefined = {} as CallOptions) : void {
        writer.writeBooleanValue("hideBotAfterEscalation", callOptions.hideBotAfterEscalation);
        writer.writeBooleanValue("isContentSharingNotificationEnabled", callOptions.isContentSharingNotificationEnabled);
        writer.writeStringValue("@odata.type", callOptions.odataType);
        writer.writeAdditionalData(callOptions.additionalData);
}
// tslint:enable
// eslint-enable
