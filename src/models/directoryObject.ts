// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoActivityBasedTimeoutPolicy } from './activityBasedTimeoutPolicy';
import { deserializeIntoAdministrativeUnit } from './administrativeUnit';
import { deserializeIntoApplication } from './application';
import { deserializeIntoAppManagementPolicy } from './appManagementPolicy';
import { deserializeIntoAppRoleAssignment } from './appRoleAssignment';
import { deserializeIntoAuthorizationPolicy } from './authorizationPolicy';
import { deserializeIntoClaimsMappingPolicy } from './claimsMappingPolicy';
import { deserializeIntoContract } from './contract';
import { deserializeIntoCrossTenantAccessPolicy } from './crossTenantAccessPolicy';
import { deserializeIntoDevice } from './device';
import { deserializeIntoDirectoryObjectPartnerReference } from './directoryObjectPartnerReference';
import { deserializeIntoDirectoryRole } from './directoryRole';
import { deserializeIntoDirectoryRoleTemplate } from './directoryRoleTemplate';
import { deserializeIntoEndpoint } from './endpoint';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { deserializeIntoExtensionProperty } from './extensionProperty';
import { deserializeIntoGroup } from './group';
import { deserializeIntoGroupSettingTemplate } from './groupSettingTemplate';
import { deserializeIntoHomeRealmDiscoveryPolicy } from './homeRealmDiscoveryPolicy';
import { deserializeIntoIdentitySecurityDefaultsEnforcementPolicy } from './identitySecurityDefaultsEnforcementPolicy';
import { type ActivityBasedTimeoutPolicy, type AdministrativeUnit, type Application, type AppManagementPolicy, type AppRoleAssignment, type AuthorizationPolicy, type ClaimsMappingPolicy, type Contract, type CrossTenantAccessPolicy, type Device, type DirectoryObjectPartnerReference, type DirectoryRole, type DirectoryRoleTemplate, type Endpoint, type ExtensionProperty, type Group, type GroupSettingTemplate, type HomeRealmDiscoveryPolicy, type IdentitySecurityDefaultsEnforcementPolicy, type Organization, type OrgContact, type PermissionGrantPolicy, type PolicyBase, type ResourceSpecificPermissionGrant, type ServicePrincipal, type StsPolicy, type TenantAppManagementPolicy, type TokenIssuancePolicy, type TokenLifetimePolicy, type User } from './index';
import { deserializeIntoOrganization } from './organization';
import { deserializeIntoOrgContact } from './orgContact';
import { deserializeIntoPermissionGrantPolicy } from './permissionGrantPolicy';
import { deserializeIntoPolicyBase } from './policyBase';
import { deserializeIntoResourceSpecificPermissionGrant } from './resourceSpecificPermissionGrant';
import { deserializeIntoServicePrincipal } from './servicePrincipal';
import { deserializeIntoStsPolicy } from './stsPolicy';
import { deserializeIntoTenantAppManagementPolicy } from './tenantAppManagementPolicy';
import { deserializeIntoTokenIssuancePolicy } from './tokenIssuancePolicy';
import { deserializeIntoTokenLifetimePolicy } from './tokenLifetimePolicy';
import { deserializeIntoUser } from './user';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDirectoryObjectFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.activityBasedTimeoutPolicy":
                    return deserializeIntoActivityBasedTimeoutPolicy;
                case "#microsoft.graph.administrativeUnit":
                    return deserializeIntoAdministrativeUnit;
                case "#microsoft.graph.application":
                    return deserializeIntoApplication;
                case "#microsoft.graph.appManagementPolicy":
                    return deserializeIntoAppManagementPolicy;
                case "#microsoft.graph.appRoleAssignment":
                    return deserializeIntoAppRoleAssignment;
                case "#microsoft.graph.authorizationPolicy":
                    return deserializeIntoAuthorizationPolicy;
                case "#microsoft.graph.claimsMappingPolicy":
                    return deserializeIntoClaimsMappingPolicy;
                case "#microsoft.graph.contract":
                    return deserializeIntoContract;
                case "#microsoft.graph.crossTenantAccessPolicy":
                    return deserializeIntoCrossTenantAccessPolicy;
                case "#microsoft.graph.device":
                    return deserializeIntoDevice;
                case "#microsoft.graph.directoryObjectPartnerReference":
                    return deserializeIntoDirectoryObjectPartnerReference;
                case "#microsoft.graph.directoryRole":
                    return deserializeIntoDirectoryRole;
                case "#microsoft.graph.directoryRoleTemplate":
                    return deserializeIntoDirectoryRoleTemplate;
                case "#microsoft.graph.endpoint":
                    return deserializeIntoEndpoint;
                case "#microsoft.graph.extensionProperty":
                    return deserializeIntoExtensionProperty;
                case "#microsoft.graph.group":
                    return deserializeIntoGroup;
                case "#microsoft.graph.groupSettingTemplate":
                    return deserializeIntoGroupSettingTemplate;
                case "#microsoft.graph.homeRealmDiscoveryPolicy":
                    return deserializeIntoHomeRealmDiscoveryPolicy;
                case "#microsoft.graph.identitySecurityDefaultsEnforcementPolicy":
                    return deserializeIntoIdentitySecurityDefaultsEnforcementPolicy;
                case "#microsoft.graph.organization":
                    return deserializeIntoOrganization;
                case "#microsoft.graph.orgContact":
                    return deserializeIntoOrgContact;
                case "#microsoft.graph.permissionGrantPolicy":
                    return deserializeIntoPermissionGrantPolicy;
                case "#microsoft.graph.policyBase":
                    return deserializeIntoPolicyBase;
                case "#microsoft.graph.resourceSpecificPermissionGrant":
                    return deserializeIntoResourceSpecificPermissionGrant;
                case "#microsoft.graph.servicePrincipal":
                    return deserializeIntoServicePrincipal;
                case "#microsoft.graph.stsPolicy":
                    return deserializeIntoStsPolicy;
                case "#microsoft.graph.tenantAppManagementPolicy":
                    return deserializeIntoTenantAppManagementPolicy;
                case "#microsoft.graph.tokenIssuancePolicy":
                    return deserializeIntoTokenIssuancePolicy;
                case "#microsoft.graph.tokenLifetimePolicy":
                    return deserializeIntoTokenLifetimePolicy;
                case "#microsoft.graph.user":
                    return deserializeIntoUser;
            }
        }
    }
    return deserializeIntoDirectoryObject;
}
export function deserializeIntoDirectoryObject(directoryObject: DirectoryObject | undefined = {} as DirectoryObject) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(directoryObject),
        "deletedDateTime": n => { directoryObject.deletedDateTime = n.getDateValue(); },
    }
}
export interface DirectoryObject extends Entity, Parsable {
    /**
     * Date and time when this object was deleted. Always null when the object hasn't been deleted.
     */
    deletedDateTime?: Date;
}
export function serializeDirectoryObject(writer: SerializationWriter, directoryObject: DirectoryObject | undefined = {} as DirectoryObject) : void {
    serializeEntity(writer, directoryObject)
    writer.writeDateValue("deletedDateTime", directoryObject.deletedDateTime);
}
// tslint:enable
// eslint-enable
