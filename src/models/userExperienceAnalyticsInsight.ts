// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { UserExperienceAnalyticsInsightSeverity } from './userExperienceAnalyticsInsightSeverity';
import { createUserExperienceAnalyticsInsightValueFromDiscriminatorValue, serializeUserExperienceAnalyticsInsightValue, type UserExperienceAnalyticsInsightValue } from './userExperienceAnalyticsInsightValue';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createUserExperienceAnalyticsInsightFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoUserExperienceAnalyticsInsight;
}
export function deserializeIntoUserExperienceAnalyticsInsight(userExperienceAnalyticsInsight: UserExperienceAnalyticsInsight | undefined = {} as UserExperienceAnalyticsInsight) : Record<string, (node: ParseNode) => void> {
    return {
        "insightId": n => { userExperienceAnalyticsInsight.insightId = n.getStringValue(); },
        "@odata.type": n => { userExperienceAnalyticsInsight.odataType = n.getStringValue(); },
        "severity": n => { userExperienceAnalyticsInsight.severity = n.getEnumValue<UserExperienceAnalyticsInsightSeverity>(UserExperienceAnalyticsInsightSeverity); },
        "userExperienceAnalyticsMetricId": n => { userExperienceAnalyticsInsight.userExperienceAnalyticsMetricId = n.getStringValue(); },
        "values": n => { userExperienceAnalyticsInsight.values = n.getCollectionOfObjectValues<UserExperienceAnalyticsInsightValue>(createUserExperienceAnalyticsInsightValueFromDiscriminatorValue); },
    }
}
export function serializeUserExperienceAnalyticsInsight(writer: SerializationWriter, userExperienceAnalyticsInsight: UserExperienceAnalyticsInsight | undefined = {} as UserExperienceAnalyticsInsight) : void {
        writer.writeStringValue("insightId", userExperienceAnalyticsInsight.insightId);
        writer.writeStringValue("@odata.type", userExperienceAnalyticsInsight.odataType);
        writer.writeEnumValue<UserExperienceAnalyticsInsightSeverity>("severity", userExperienceAnalyticsInsight.severity);
        writer.writeStringValue("userExperienceAnalyticsMetricId", userExperienceAnalyticsInsight.userExperienceAnalyticsMetricId);
        writer.writeCollectionOfObjectValues<UserExperienceAnalyticsInsightValue>("values", userExperienceAnalyticsInsight.values, );
        writer.writeAdditionalData(userExperienceAnalyticsInsight.additionalData);
}
export interface UserExperienceAnalyticsInsight extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The unique identifier of the user experience analytics insight.
     */
    insightId?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Indicates severity of insights. Possible values are: None, Informational, Warning, Error.
     */
    severity?: UserExperienceAnalyticsInsightSeverity;
    /**
     * The unique identifier of the user experience analytics metric.
     */
    userExperienceAnalyticsMetricId?: string;
    /**
     * The value of the user experience analytics insight.
     */
    values?: UserExperienceAnalyticsInsightValue[];
}
// tslint:enable
// eslint-enable
