// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type IosLobAppAssignmentSettings, type IosStoreAppAssignmentSettings, type IosVppAppAssignmentSettings, type MacOsLobAppAssignmentSettings, type MicrosoftStoreForBusinessAppAssignmentSettings, type Win32LobAppAssignmentSettings, type WindowsAppXAppAssignmentSettings, type WindowsUniversalAppXAppAssignmentSettings } from './index';
import { deserializeIntoIosLobAppAssignmentSettings } from './iosLobAppAssignmentSettings';
import { deserializeIntoIosStoreAppAssignmentSettings } from './iosStoreAppAssignmentSettings';
import { deserializeIntoIosVppAppAssignmentSettings } from './iosVppAppAssignmentSettings';
import { deserializeIntoMacOsLobAppAssignmentSettings } from './macOsLobAppAssignmentSettings';
import { deserializeIntoMicrosoftStoreForBusinessAppAssignmentSettings } from './microsoftStoreForBusinessAppAssignmentSettings';
import { deserializeIntoWin32LobAppAssignmentSettings } from './win32LobAppAssignmentSettings';
import { deserializeIntoWindowsAppXAppAssignmentSettings } from './windowsAppXAppAssignmentSettings';
import { deserializeIntoWindowsUniversalAppXAppAssignmentSettings } from './windowsUniversalAppXAppAssignmentSettings';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMobileAppAssignmentSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.iosLobAppAssignmentSettings":
                    return deserializeIntoIosLobAppAssignmentSettings;
                case "#microsoft.graph.iosStoreAppAssignmentSettings":
                    return deserializeIntoIosStoreAppAssignmentSettings;
                case "#microsoft.graph.iosVppAppAssignmentSettings":
                    return deserializeIntoIosVppAppAssignmentSettings;
                case "#microsoft.graph.macOsLobAppAssignmentSettings":
                    return deserializeIntoMacOsLobAppAssignmentSettings;
                case "#microsoft.graph.microsoftStoreForBusinessAppAssignmentSettings":
                    return deserializeIntoMicrosoftStoreForBusinessAppAssignmentSettings;
                case "#microsoft.graph.win32LobAppAssignmentSettings":
                    return deserializeIntoWin32LobAppAssignmentSettings;
                case "#microsoft.graph.windowsAppXAppAssignmentSettings":
                    return deserializeIntoWindowsAppXAppAssignmentSettings;
                case "#microsoft.graph.windowsUniversalAppXAppAssignmentSettings":
                    return deserializeIntoWindowsUniversalAppXAppAssignmentSettings;
            }
        }
    }
    return deserializeIntoMobileAppAssignmentSettings;
}
export function deserializeIntoMobileAppAssignmentSettings(mobileAppAssignmentSettings: MobileAppAssignmentSettings | undefined = {} as MobileAppAssignmentSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { mobileAppAssignmentSettings.odataType = n.getStringValue(); },
    }
}
export interface MobileAppAssignmentSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function serializeMobileAppAssignmentSettings(writer: SerializationWriter, mobileAppAssignmentSettings: MobileAppAssignmentSettings | undefined = {} as MobileAppAssignmentSettings) : void {
    writer.writeStringValue("@odata.type", mobileAppAssignmentSettings.odataType);
    writer.writeAdditionalData(mobileAppAssignmentSettings.additionalData);
}
// tslint:enable
// eslint-enable
