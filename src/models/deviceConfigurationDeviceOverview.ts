// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceConfigurationDeviceOverviewFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceConfigurationDeviceOverview;
}
export function deserializeIntoDeviceConfigurationDeviceOverview(deviceConfigurationDeviceOverview: DeviceConfigurationDeviceOverview | undefined = {} as DeviceConfigurationDeviceOverview) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceConfigurationDeviceOverview),
        "configurationVersion": n => { deviceConfigurationDeviceOverview.configurationVersion = n.getNumberValue(); },
        "errorCount": n => { deviceConfigurationDeviceOverview.errorCount = n.getNumberValue(); },
        "failedCount": n => { deviceConfigurationDeviceOverview.failedCount = n.getNumberValue(); },
        "lastUpdateDateTime": n => { deviceConfigurationDeviceOverview.lastUpdateDateTime = n.getDateValue(); },
        "notApplicableCount": n => { deviceConfigurationDeviceOverview.notApplicableCount = n.getNumberValue(); },
        "pendingCount": n => { deviceConfigurationDeviceOverview.pendingCount = n.getNumberValue(); },
        "successCount": n => { deviceConfigurationDeviceOverview.successCount = n.getNumberValue(); },
    }
}
export interface DeviceConfigurationDeviceOverview extends Entity, Parsable {
    /**
     * Version of the policy for that overview
     */
    configurationVersion?: number;
    /**
     * Number of error devices
     */
    errorCount?: number;
    /**
     * Number of failed devices
     */
    failedCount?: number;
    /**
     * Last update time
     */
    lastUpdateDateTime?: Date;
    /**
     * Number of not applicable devices
     */
    notApplicableCount?: number;
    /**
     * Number of pending devices
     */
    pendingCount?: number;
    /**
     * Number of succeeded devices
     */
    successCount?: number;
}
export function serializeDeviceConfigurationDeviceOverview(writer: SerializationWriter, deviceConfigurationDeviceOverview: DeviceConfigurationDeviceOverview | undefined = {} as DeviceConfigurationDeviceOverview) : void {
        serializeEntity(writer, deviceConfigurationDeviceOverview)
        writer.writeNumberValue("configurationVersion", deviceConfigurationDeviceOverview.configurationVersion);
        writer.writeNumberValue("errorCount", deviceConfigurationDeviceOverview.errorCount);
        writer.writeNumberValue("failedCount", deviceConfigurationDeviceOverview.failedCount);
        writer.writeDateValue("lastUpdateDateTime", deviceConfigurationDeviceOverview.lastUpdateDateTime);
        writer.writeNumberValue("notApplicableCount", deviceConfigurationDeviceOverview.notApplicableCount);
        writer.writeNumberValue("pendingCount", deviceConfigurationDeviceOverview.pendingCount);
        writer.writeNumberValue("successCount", deviceConfigurationDeviceOverview.successCount);
}
// tslint:enable
// eslint-enable
