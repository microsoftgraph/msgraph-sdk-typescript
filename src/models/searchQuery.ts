// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSearchQueryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSearchQuery;
}
export function deserializeIntoSearchQuery(searchQuery: SearchQuery | undefined = {} as SearchQuery) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { searchQuery.odataType = n.getStringValue(); },
        "queryString": n => { searchQuery.queryString = n.getStringValue(); },
        "queryTemplate": n => { searchQuery.queryTemplate = n.getStringValue(); },
    }
}
export interface SearchQuery extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The search query containing the search terms. Required.
     */
    queryString?: string;
    /**
     * Provides a way to decorate the query string. Supports both KQL and query variables. Optional.
     */
    queryTemplate?: string;
}
export function serializeSearchQuery(writer: SerializationWriter, searchQuery: SearchQuery | undefined = {} as SearchQuery) : void {
    writer.writeStringValue("@odata.type", searchQuery.odataType);
    writer.writeStringValue("queryString", searchQuery.queryString);
    writer.writeStringValue("queryTemplate", searchQuery.queryTemplate);
    writer.writeAdditionalData(searchQuery.additionalData);
}
// tslint:enable
// eslint-enable
