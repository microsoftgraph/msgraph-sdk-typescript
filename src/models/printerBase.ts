// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Printer, type PrinterShare } from './index';
import { deserializeIntoPrinter } from './printer';
import { createPrinterCapabilitiesFromDiscriminatorValue, serializePrinterCapabilities, type PrinterCapabilities } from './printerCapabilities';
import { createPrinterDefaultsFromDiscriminatorValue, serializePrinterDefaults, type PrinterDefaults } from './printerDefaults';
import { createPrinterLocationFromDiscriminatorValue, serializePrinterLocation, type PrinterLocation } from './printerLocation';
import { deserializeIntoPrinterShare } from './printerShare';
import { createPrinterStatusFromDiscriminatorValue, serializePrinterStatus, type PrinterStatus } from './printerStatus';
import { createPrintJobFromDiscriminatorValue, serializePrintJob, type PrintJob } from './printJob';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrinterBaseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.printer":
                    return deserializeIntoPrinter;
                case "#microsoft.graph.printerShare":
                    return deserializeIntoPrinterShare;
            }
        }
    }
    return deserializeIntoPrinterBase;
}
export function deserializeIntoPrinterBase(printerBase: PrinterBase | undefined = {} as PrinterBase) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(printerBase),
        "capabilities": n => { printerBase.capabilities = n.getObjectValue<PrinterCapabilities>(createPrinterCapabilitiesFromDiscriminatorValue); },
        "defaults": n => { printerBase.defaults = n.getObjectValue<PrinterDefaults>(createPrinterDefaultsFromDiscriminatorValue); },
        "displayName": n => { printerBase.displayName = n.getStringValue(); },
        "isAcceptingJobs": n => { printerBase.isAcceptingJobs = n.getBooleanValue(); },
        "jobs": n => { printerBase.jobs = n.getCollectionOfObjectValues<PrintJob>(createPrintJobFromDiscriminatorValue); },
        "location": n => { printerBase.location = n.getObjectValue<PrinterLocation>(createPrinterLocationFromDiscriminatorValue); },
        "manufacturer": n => { printerBase.manufacturer = n.getStringValue(); },
        "model": n => { printerBase.model = n.getStringValue(); },
        "status": n => { printerBase.status = n.getObjectValue<PrinterStatus>(createPrinterStatusFromDiscriminatorValue); },
    }
}
export interface PrinterBase extends Entity, Parsable {
    /**
     * The capabilities of the printer/printerShare.
     */
    capabilities?: PrinterCapabilities;
    /**
     * The default print settings of printer/printerShare.
     */
    defaults?: PrinterDefaults;
    /**
     * The name of the printer/printerShare.
     */
    displayName?: string;
    /**
     * Specifies whether the printer/printerShare is currently accepting new print jobs.
     */
    isAcceptingJobs?: boolean;
    /**
     * The list of jobs that are queued for printing by the printer/printerShare.
     */
    jobs?: PrintJob[];
    /**
     * The physical and/or organizational location of the printer/printerShare.
     */
    location?: PrinterLocation;
    /**
     * The manufacturer of the printer/printerShare.
     */
    manufacturer?: string;
    /**
     * The model name of the printer/printerShare.
     */
    model?: string;
    /**
     * The status property
     */
    status?: PrinterStatus;
}
export function serializePrinterBase(writer: SerializationWriter, printerBase: PrinterBase | undefined = {} as PrinterBase) : void {
        serializeEntity(writer, printerBase)
        writer.writeObjectValue<PrinterCapabilities>("capabilities", printerBase.capabilities, );
        writer.writeObjectValue<PrinterDefaults>("defaults", printerBase.defaults, );
        writer.writeStringValue("displayName", printerBase.displayName);
        writer.writeBooleanValue("isAcceptingJobs", printerBase.isAcceptingJobs);
        writer.writeCollectionOfObjectValues<PrintJob>("jobs", printerBase.jobs, );
        writer.writeObjectValue<PrinterLocation>("location", printerBase.location, );
        writer.writeStringValue("manufacturer", printerBase.manufacturer);
        writer.writeStringValue("model", printerBase.model);
        writer.writeObjectValue<PrinterStatus>("status", printerBase.status, );
}
// tslint:enable
// eslint-enable
