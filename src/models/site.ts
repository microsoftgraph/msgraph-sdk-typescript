// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createBaseItemFromDiscriminatorValue, deserializeIntoBaseItem, serializeBaseItem, type BaseItem } from './baseItem';
import { createColumnDefinitionFromDiscriminatorValue, serializeColumnDefinition, type ColumnDefinition } from './columnDefinition';
import { createContentTypeFromDiscriminatorValue, serializeContentType, type ContentType } from './contentType';
import { createDriveFromDiscriminatorValue, serializeDrive, type Drive } from './drive';
import { createItemAnalyticsFromDiscriminatorValue, serializeItemAnalytics, type ItemAnalytics } from './itemAnalytics';
import { createListFromDiscriminatorValue, serializeList, type List } from './list';
import { createOnenoteFromDiscriminatorValue, serializeOnenote, type Onenote } from './onenote';
import { createPermissionFromDiscriminatorValue, serializePermission, type Permission } from './permission';
import { createPublicErrorFromDiscriminatorValue, serializePublicError, type PublicError } from './publicError';
import { createRichLongRunningOperationFromDiscriminatorValue, serializeRichLongRunningOperation, type RichLongRunningOperation } from './richLongRunningOperation';
import { createRootFromDiscriminatorValue, serializeRoot, type Root } from './root';
import { createSharepointIdsFromDiscriminatorValue, serializeSharepointIds, type SharepointIds } from './sharepointIds';
import { createSiteCollectionFromDiscriminatorValue, serializeSiteCollection, type SiteCollection } from './siteCollection';
import { createStoreFromDiscriminatorValue, serializeStore, type Store } from './termStore/store';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSiteFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSite;
}
export function deserializeIntoSite(site: Site | undefined = {} as Site) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseItem(site),
        "analytics": n => { site.analytics = n.getObjectValue<ItemAnalytics>(createItemAnalyticsFromDiscriminatorValue); },
        "columns": n => { site.columns = n.getCollectionOfObjectValues<ColumnDefinition>(createColumnDefinitionFromDiscriminatorValue); },
        "contentTypes": n => { site.contentTypes = n.getCollectionOfObjectValues<ContentType>(createContentTypeFromDiscriminatorValue); },
        "displayName": n => { site.displayName = n.getStringValue(); },
        "drive": n => { site.drive = n.getObjectValue<Drive>(createDriveFromDiscriminatorValue); },
        "drives": n => { site.drives = n.getCollectionOfObjectValues<Drive>(createDriveFromDiscriminatorValue); },
        "error": n => { site.errorEscaped = n.getObjectValue<PublicError>(createPublicErrorFromDiscriminatorValue); },
        "externalColumns": n => { site.externalColumns = n.getCollectionOfObjectValues<ColumnDefinition>(createColumnDefinitionFromDiscriminatorValue); },
        "isPersonalSite": n => { site.isPersonalSite = n.getBooleanValue(); },
        "items": n => { site.items = n.getCollectionOfObjectValues<BaseItem>(createBaseItemFromDiscriminatorValue); },
        "lists": n => { site.lists = n.getCollectionOfObjectValues<List>(createListFromDiscriminatorValue); },
        "onenote": n => { site.onenote = n.getObjectValue<Onenote>(createOnenoteFromDiscriminatorValue); },
        "operations": n => { site.operations = n.getCollectionOfObjectValues<RichLongRunningOperation>(createRichLongRunningOperationFromDiscriminatorValue); },
        "permissions": n => { site.permissions = n.getCollectionOfObjectValues<Permission>(createPermissionFromDiscriminatorValue); },
        "root": n => { site.root = n.getObjectValue<Root>(createRootFromDiscriminatorValue); },
        "sharepointIds": n => { site.sharepointIds = n.getObjectValue<SharepointIds>(createSharepointIdsFromDiscriminatorValue); },
        "siteCollection": n => { site.siteCollection = n.getObjectValue<SiteCollection>(createSiteCollectionFromDiscriminatorValue); },
        "sites": n => { site.sites = n.getCollectionOfObjectValues<Site>(createSiteFromDiscriminatorValue); },
        "termStore": n => { site.termStore = n.getObjectValue<Store>(createStoreFromDiscriminatorValue); },
        "termStores": n => { site.termStores = n.getCollectionOfObjectValues<Store>(createStoreFromDiscriminatorValue); },
    }
}
export function serializeSite(writer: SerializationWriter, site: Site | undefined = {} as Site) : void {
        serializeBaseItem(writer, site)
        writer.writeObjectValue<ItemAnalytics>("analytics", site.analytics, );
        writer.writeCollectionOfObjectValues<ColumnDefinition>("columns", site.columns, );
        writer.writeCollectionOfObjectValues<ContentType>("contentTypes", site.contentTypes, );
        writer.writeStringValue("displayName", site.displayName);
        writer.writeObjectValue<Drive>("drive", site.drive, );
        writer.writeCollectionOfObjectValues<Drive>("drives", site.drives, );
        writer.writeObjectValue<PublicError>("error", site.errorEscaped, );
        writer.writeCollectionOfObjectValues<ColumnDefinition>("externalColumns", site.externalColumns, );
        writer.writeBooleanValue("isPersonalSite", site.isPersonalSite);
        writer.writeCollectionOfObjectValues<BaseItem>("items", site.items, );
        writer.writeCollectionOfObjectValues<List>("lists", site.lists, );
        writer.writeObjectValue<Onenote>("onenote", site.onenote, );
        writer.writeCollectionOfObjectValues<RichLongRunningOperation>("operations", site.operations, );
        writer.writeCollectionOfObjectValues<Permission>("permissions", site.permissions, );
        writer.writeObjectValue<Root>("root", site.root, );
        writer.writeObjectValue<SharepointIds>("sharepointIds", site.sharepointIds, );
        writer.writeObjectValue<SiteCollection>("siteCollection", site.siteCollection, );
        writer.writeCollectionOfObjectValues<Site>("sites", site.sites, );
        writer.writeObjectValue<Store>("termStore", site.termStore, );
        writer.writeCollectionOfObjectValues<Store>("termStores", site.termStores, );
}
export interface Site extends BaseItem, Parsable {
    /**
     * Analytics about the view activities that took place in this site.
     */
    analytics?: ItemAnalytics;
    /**
     * The collection of column definitions reusable across lists under this site.
     */
    columns?: ColumnDefinition[];
    /**
     * The collection of content types defined for this site.
     */
    contentTypes?: ContentType[];
    /**
     * The full title for the site. Read-only.
     */
    displayName?: string;
    /**
     * The default drive (document library) for this site.
     */
    drive?: Drive;
    /**
     * The collection of drives (document libraries) under this site.
     */
    drives?: Drive[];
    /**
     * The error property
     */
    errorEscaped?: PublicError;
    /**
     * The externalColumns property
     */
    externalColumns?: ColumnDefinition[];
    /**
     * The isPersonalSite property
     */
    isPersonalSite?: boolean;
    /**
     * Used to address any item contained in this site. This collection can't be enumerated.
     */
    items?: BaseItem[];
    /**
     * The collection of lists under this site.
     */
    lists?: List[];
    /**
     * Calls the OneNote service for notebook related operations.
     */
    onenote?: Onenote;
    /**
     * The collection of long-running operations on the site.
     */
    operations?: RichLongRunningOperation[];
    /**
     * The permissions associated with the site. Nullable.
     */
    permissions?: Permission[];
    /**
     * If present, indicates that this is the root site in the site collection. Read-only.
     */
    root?: Root;
    /**
     * Returns identifiers useful for SharePoint REST compatibility. Read-only.
     */
    sharepointIds?: SharepointIds;
    /**
     * Provides details about the site's site collection. Available only on the root site. Read-only.
     */
    siteCollection?: SiteCollection;
    /**
     * The collection of the sub-sites under this site.
     */
    sites?: Site[];
    /**
     * The default termStore under this site.
     */
    termStore?: Store;
    /**
     * The collection of termStores under this site.
     */
    termStores?: Store[];
}
// tslint:enable
// eslint-enable
