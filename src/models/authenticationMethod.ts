// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEmailAuthenticationMethod } from './emailAuthenticationMethod';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { deserializeIntoFido2AuthenticationMethod } from './fido2AuthenticationMethod';
import { type EmailAuthenticationMethod, type Fido2AuthenticationMethod, type MicrosoftAuthenticatorAuthenticationMethod, type PasswordAuthenticationMethod, type PhoneAuthenticationMethod, type SoftwareOathAuthenticationMethod, type TemporaryAccessPassAuthenticationMethod, type WindowsHelloForBusinessAuthenticationMethod } from './index';
import { deserializeIntoMicrosoftAuthenticatorAuthenticationMethod } from './microsoftAuthenticatorAuthenticationMethod';
import { deserializeIntoPasswordAuthenticationMethod } from './passwordAuthenticationMethod';
import { deserializeIntoPhoneAuthenticationMethod } from './phoneAuthenticationMethod';
import { deserializeIntoSoftwareOathAuthenticationMethod } from './softwareOathAuthenticationMethod';
import { deserializeIntoTemporaryAccessPassAuthenticationMethod } from './temporaryAccessPassAuthenticationMethod';
import { deserializeIntoWindowsHelloForBusinessAuthenticationMethod } from './windowsHelloForBusinessAuthenticationMethod';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthenticationMethod extends Entity, Parsable {
}
export function createAuthenticationMethodFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.emailAuthenticationMethod":
                    return deserializeIntoEmailAuthenticationMethod;
                case "#microsoft.graph.fido2AuthenticationMethod":
                    return deserializeIntoFido2AuthenticationMethod;
                case "#microsoft.graph.microsoftAuthenticatorAuthenticationMethod":
                    return deserializeIntoMicrosoftAuthenticatorAuthenticationMethod;
                case "#microsoft.graph.passwordAuthenticationMethod":
                    return deserializeIntoPasswordAuthenticationMethod;
                case "#microsoft.graph.phoneAuthenticationMethod":
                    return deserializeIntoPhoneAuthenticationMethod;
                case "#microsoft.graph.softwareOathAuthenticationMethod":
                    return deserializeIntoSoftwareOathAuthenticationMethod;
                case "#microsoft.graph.temporaryAccessPassAuthenticationMethod":
                    return deserializeIntoTemporaryAccessPassAuthenticationMethod;
                case "#microsoft.graph.windowsHelloForBusinessAuthenticationMethod":
                    return deserializeIntoWindowsHelloForBusinessAuthenticationMethod;
            }
        }
    }
    return deserializeIntoAuthenticationMethod;
}
export function deserializeIntoAuthenticationMethod(authenticationMethod: AuthenticationMethod | undefined = {} as AuthenticationMethod) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(authenticationMethod),
    }
}
export function serializeAuthenticationMethod(writer: SerializationWriter, authenticationMethod: AuthenticationMethod | undefined = {} as AuthenticationMethod) : void {
        serializeEntity(writer, authenticationMethod)
}
// tslint:enable
// eslint-enable
