// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { WindowsMalwareExecutionState } from './windowsMalwareExecutionState';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindowsMalwareExecutionStateCountFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindowsMalwareExecutionStateCount;
}
export function deserializeIntoWindowsMalwareExecutionStateCount(windowsMalwareExecutionStateCount: WindowsMalwareExecutionStateCount | undefined = {} as WindowsMalwareExecutionStateCount) : Record<string, (node: ParseNode) => void> {
    return {
        "deviceCount": n => { windowsMalwareExecutionStateCount.deviceCount = n.getNumberValue(); },
        "executionState": n => { windowsMalwareExecutionStateCount.executionState = n.getEnumValue<WindowsMalwareExecutionState>(WindowsMalwareExecutionState); },
        "lastUpdateDateTime": n => { windowsMalwareExecutionStateCount.lastUpdateDateTime = n.getDateValue(); },
        "@odata.type": n => { windowsMalwareExecutionStateCount.odataType = n.getStringValue(); },
    }
}
export function serializeWindowsMalwareExecutionStateCount(writer: SerializationWriter, windowsMalwareExecutionStateCount: WindowsMalwareExecutionStateCount | undefined = {} as WindowsMalwareExecutionStateCount) : void {
        writer.writeNumberValue("deviceCount", windowsMalwareExecutionStateCount.deviceCount);
        writer.writeEnumValue<WindowsMalwareExecutionState>("executionState", windowsMalwareExecutionStateCount.executionState);
        writer.writeDateValue("lastUpdateDateTime", windowsMalwareExecutionStateCount.lastUpdateDateTime);
        writer.writeStringValue("@odata.type", windowsMalwareExecutionStateCount.odataType);
        writer.writeAdditionalData(windowsMalwareExecutionStateCount.additionalData);
}
export interface WindowsMalwareExecutionStateCount extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Count of devices with malware detections for this malware execution state
     */
    deviceCount?: number;
    /**
     * Malware execution status
     */
    executionState?: WindowsMalwareExecutionState;
    /**
     * The Timestamp of the last update for the device count in UTC
     */
    lastUpdateDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
}
// tslint:enable
// eslint-enable
