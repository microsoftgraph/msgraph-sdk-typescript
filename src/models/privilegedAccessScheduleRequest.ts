import { type PrivilegedAccessGroupAssignmentScheduleRequest, type PrivilegedAccessGroupEligibilityScheduleRequest } from './index';
import { deserializeIntoPrivilegedAccessGroupAssignmentScheduleRequest } from './privilegedAccessGroupAssignmentScheduleRequest';
import { deserializeIntoPrivilegedAccessGroupEligibilityScheduleRequest } from './privilegedAccessGroupEligibilityScheduleRequest';
import { deserializeIntoRequest, serializeRequest, type Request } from './request';
import { createRequestScheduleFromDiscriminatorValue, serializeRequestSchedule, type RequestSchedule } from './requestSchedule';
import { ScheduleRequestActions } from './scheduleRequestActions';
import { createTicketInfoFromDiscriminatorValue, serializeTicketInfo, type TicketInfo } from './ticketInfo';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createPrivilegedAccessScheduleRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.privilegedAccessGroupAssignmentScheduleRequest":
                    return deserializeIntoPrivilegedAccessGroupAssignmentScheduleRequest;
                case "#microsoft.graph.privilegedAccessGroupEligibilityScheduleRequest":
                    return deserializeIntoPrivilegedAccessGroupEligibilityScheduleRequest;
            }
        }
    }
    return deserializeIntoPrivilegedAccessScheduleRequest;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoPrivilegedAccessScheduleRequest(privilegedAccessScheduleRequest: PrivilegedAccessScheduleRequest | undefined = {} as PrivilegedAccessScheduleRequest) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoRequest(privilegedAccessScheduleRequest),
        "action": n => { privilegedAccessScheduleRequest.action = n.getEnumValue<ScheduleRequestActions>(ScheduleRequestActions); },
        "isValidationOnly": n => { privilegedAccessScheduleRequest.isValidationOnly = n.getBooleanValue(); },
        "justification": n => { privilegedAccessScheduleRequest.justification = n.getStringValue(); },
        "scheduleInfo": n => { privilegedAccessScheduleRequest.scheduleInfo = n.getObjectValue<RequestSchedule>(createRequestScheduleFromDiscriminatorValue); },
        "ticketInfo": n => { privilegedAccessScheduleRequest.ticketInfo = n.getObjectValue<TicketInfo>(createTicketInfoFromDiscriminatorValue); },
    }
}
export interface PrivilegedAccessScheduleRequest extends Parsable, Request {
    /**
     * The action property
     */
    action?: ScheduleRequestActions;
    /**
     * The isValidationOnly property
     */
    isValidationOnly?: boolean;
    /**
     * The justification property
     */
    justification?: string;
    /**
     * The scheduleInfo property
     */
    scheduleInfo?: RequestSchedule;
    /**
     * The ticketInfo property
     */
    ticketInfo?: TicketInfo;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializePrivilegedAccessScheduleRequest(writer: SerializationWriter, privilegedAccessScheduleRequest: PrivilegedAccessScheduleRequest | undefined = {} as PrivilegedAccessScheduleRequest) : void {
        serializeRequest(writer, privilegedAccessScheduleRequest)
        writer.writeEnumValue<ScheduleRequestActions>("action", privilegedAccessScheduleRequest.action);
        writer.writeBooleanValue("isValidationOnly", privilegedAccessScheduleRequest.isValidationOnly);
        writer.writeStringValue("justification", privilegedAccessScheduleRequest.justification);
        writer.writeObjectValue<RequestSchedule>("scheduleInfo", privilegedAccessScheduleRequest.scheduleInfo, );
        writer.writeObjectValue<TicketInfo>("ticketInfo", privilegedAccessScheduleRequest.ticketInfo, );
}
