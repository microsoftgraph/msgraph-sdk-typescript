// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createThumbnailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoThumbnail;
}
export function deserializeIntoThumbnail(thumbnail: Thumbnail | undefined = {} as Thumbnail) : Record<string, (node: ParseNode) => void> {
    return {
        "content": n => { thumbnail.content = n.getStringValue(); },
        "height": n => { thumbnail.height = n.getNumberValue(); },
        "@odata.type": n => { thumbnail.odataType = n.getStringValue(); },
        "sourceItemId": n => { thumbnail.sourceItemId = n.getStringValue(); },
        "url": n => { thumbnail.url = n.getStringValue(); },
        "width": n => { thumbnail.width = n.getNumberValue(); },
    }
}
export function serializeThumbnail(writer: SerializationWriter, thumbnail: Thumbnail | undefined = {} as Thumbnail) : void {
        writer.writeStringValue("content", thumbnail.content);
        writer.writeNumberValue("height", thumbnail.height);
        writer.writeStringValue("@odata.type", thumbnail.odataType);
        writer.writeStringValue("sourceItemId", thumbnail.sourceItemId);
        writer.writeStringValue("url", thumbnail.url);
        writer.writeNumberValue("width", thumbnail.width);
        writer.writeAdditionalData(thumbnail.additionalData);
}
export interface Thumbnail extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The content stream for the thumbnail.
     */
    content?: string;
    /**
     * The height of the thumbnail, in pixels.
     */
    height?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The unique identifier of the item that provided the thumbnail. This is only available when a folder thumbnail is requested.
     */
    sourceItemId?: string;
    /**
     * The URL used to fetch the thumbnail content.
     */
    url?: string;
    /**
     * The width of the thumbnail, in pixels.
     */
    width?: number;
}
// tslint:enable
// eslint-enable
