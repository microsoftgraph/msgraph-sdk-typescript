// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createRecommendedActionFromDiscriminatorValue, serializeRecommendedAction, type RecommendedAction } from './recommendedAction';
import { createSimulationEventsContentFromDiscriminatorValue, serializeSimulationEventsContent, type SimulationEventsContent } from './simulationEventsContent';
import { createTrainingEventsContentFromDiscriminatorValue, serializeTrainingEventsContent, type TrainingEventsContent } from './trainingEventsContent';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSimulationReportOverviewFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSimulationReportOverview;
}
export function deserializeIntoSimulationReportOverview(simulationReportOverview: SimulationReportOverview | undefined = {} as SimulationReportOverview) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { simulationReportOverview.odataType = n.getStringValue(); },
        "recommendedActions": n => { simulationReportOverview.recommendedActions = n.getCollectionOfObjectValues<RecommendedAction>(createRecommendedActionFromDiscriminatorValue); },
        "resolvedTargetsCount": n => { simulationReportOverview.resolvedTargetsCount = n.getNumberValue(); },
        "simulationEventsContent": n => { simulationReportOverview.simulationEventsContent = n.getObjectValue<SimulationEventsContent>(createSimulationEventsContentFromDiscriminatorValue); },
        "trainingEventsContent": n => { simulationReportOverview.trainingEventsContent = n.getObjectValue<TrainingEventsContent>(createTrainingEventsContentFromDiscriminatorValue); },
    }
}
export function serializeSimulationReportOverview(writer: SerializationWriter, simulationReportOverview: SimulationReportOverview | undefined = {} as SimulationReportOverview) : void {
        writer.writeStringValue("@odata.type", simulationReportOverview.odataType);
        writer.writeCollectionOfObjectValues<RecommendedAction>("recommendedActions", simulationReportOverview.recommendedActions, );
        writer.writeNumberValue("resolvedTargetsCount", simulationReportOverview.resolvedTargetsCount);
        writer.writeObjectValue<SimulationEventsContent>("simulationEventsContent", simulationReportOverview.simulationEventsContent, );
        writer.writeObjectValue<TrainingEventsContent>("trainingEventsContent", simulationReportOverview.trainingEventsContent, );
        writer.writeAdditionalData(simulationReportOverview.additionalData);
}
export interface SimulationReportOverview extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * List of recommended actions for a tenant to improve its security posture based on the attack simulation and training campaign attack type.
     */
    recommendedActions?: RecommendedAction[];
    /**
     * Number of valid users in the attack simulation and training campaign.
     */
    resolvedTargetsCount?: number;
    /**
     * Summary of simulation events in the attack simulation and training campaign.
     */
    simulationEventsContent?: SimulationEventsContent;
    /**
     * Summary of assigned trainings in the attack simulation and training campaign.
     */
    trainingEventsContent?: TrainingEventsContent;
}
// tslint:enable
// eslint-enable
