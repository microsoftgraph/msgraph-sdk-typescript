// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAccessPackageFromDiscriminatorValue, serializeAccessPackage, type AccessPackage } from './accessPackage';
import { createAccessPackageAssignmentFromDiscriminatorValue, serializeAccessPackageAssignment, type AccessPackageAssignment } from './accessPackageAssignment';
import { createAccessPackageAssignmentPolicyFromDiscriminatorValue, serializeAccessPackageAssignmentPolicy, type AccessPackageAssignmentPolicy } from './accessPackageAssignmentPolicy';
import { createAccessPackageAssignmentRequestFromDiscriminatorValue, serializeAccessPackageAssignmentRequest, type AccessPackageAssignmentRequest } from './accessPackageAssignmentRequest';
import { createAccessPackageCatalogFromDiscriminatorValue, serializeAccessPackageCatalog, type AccessPackageCatalog } from './accessPackageCatalog';
import { createAccessPackageResourceFromDiscriminatorValue, serializeAccessPackageResource, type AccessPackageResource } from './accessPackageResource';
import { createAccessPackageResourceEnvironmentFromDiscriminatorValue, serializeAccessPackageResourceEnvironment, type AccessPackageResourceEnvironment } from './accessPackageResourceEnvironment';
import { createAccessPackageResourceRequestFromDiscriminatorValue, serializeAccessPackageResourceRequest, type AccessPackageResourceRequest } from './accessPackageResourceRequest';
import { createAccessPackageResourceRoleScopeFromDiscriminatorValue, serializeAccessPackageResourceRoleScope, type AccessPackageResourceRoleScope } from './accessPackageResourceRoleScope';
import { createApprovalFromDiscriminatorValue, serializeApproval, type Approval } from './approval';
import { createConnectedOrganizationFromDiscriminatorValue, serializeConnectedOrganization, type ConnectedOrganization } from './connectedOrganization';
import { createEntitlementManagementSettingsFromDiscriminatorValue, serializeEntitlementManagementSettings, type EntitlementManagementSettings } from './entitlementManagementSettings';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createEntitlementManagementFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoEntitlementManagement;
}
export function deserializeIntoEntitlementManagement(entitlementManagement: EntitlementManagement | undefined = {} as EntitlementManagement) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(entitlementManagement),
        "accessPackageAssignmentApprovals": n => { entitlementManagement.accessPackageAssignmentApprovals = n.getCollectionOfObjectValues<Approval>(createApprovalFromDiscriminatorValue); },
        "accessPackages": n => { entitlementManagement.accessPackages = n.getCollectionOfObjectValues<AccessPackage>(createAccessPackageFromDiscriminatorValue); },
        "assignmentPolicies": n => { entitlementManagement.assignmentPolicies = n.getCollectionOfObjectValues<AccessPackageAssignmentPolicy>(createAccessPackageAssignmentPolicyFromDiscriminatorValue); },
        "assignmentRequests": n => { entitlementManagement.assignmentRequests = n.getCollectionOfObjectValues<AccessPackageAssignmentRequest>(createAccessPackageAssignmentRequestFromDiscriminatorValue); },
        "assignments": n => { entitlementManagement.assignments = n.getCollectionOfObjectValues<AccessPackageAssignment>(createAccessPackageAssignmentFromDiscriminatorValue); },
        "catalogs": n => { entitlementManagement.catalogs = n.getCollectionOfObjectValues<AccessPackageCatalog>(createAccessPackageCatalogFromDiscriminatorValue); },
        "connectedOrganizations": n => { entitlementManagement.connectedOrganizations = n.getCollectionOfObjectValues<ConnectedOrganization>(createConnectedOrganizationFromDiscriminatorValue); },
        "resourceEnvironments": n => { entitlementManagement.resourceEnvironments = n.getCollectionOfObjectValues<AccessPackageResourceEnvironment>(createAccessPackageResourceEnvironmentFromDiscriminatorValue); },
        "resourceRequests": n => { entitlementManagement.resourceRequests = n.getCollectionOfObjectValues<AccessPackageResourceRequest>(createAccessPackageResourceRequestFromDiscriminatorValue); },
        "resourceRoleScopes": n => { entitlementManagement.resourceRoleScopes = n.getCollectionOfObjectValues<AccessPackageResourceRoleScope>(createAccessPackageResourceRoleScopeFromDiscriminatorValue); },
        "resources": n => { entitlementManagement.resources = n.getCollectionOfObjectValues<AccessPackageResource>(createAccessPackageResourceFromDiscriminatorValue); },
        "settings": n => { entitlementManagement.settings = n.getObjectValue<EntitlementManagementSettings>(createEntitlementManagementSettingsFromDiscriminatorValue); },
    }
}
export interface EntitlementManagement extends Entity, Parsable {
    /**
     * Approval stages for decisions associated with access package assignment requests.
     */
    accessPackageAssignmentApprovals?: Approval[];
    /**
     * Access packages define the collection of resource roles and the policies for which subjects can request or be assigned access to those resources.
     */
    accessPackages?: AccessPackage[];
    /**
     * Access package assignment policies govern which subjects can request or be assigned an access package via an access package assignment.
     */
    assignmentPolicies?: AccessPackageAssignmentPolicy[];
    /**
     * Access package assignment requests created by or on behalf of a subject.
     */
    assignmentRequests?: AccessPackageAssignmentRequest[];
    /**
     * The assignment of an access package to a subject for a period of time.
     */
    assignments?: AccessPackageAssignment[];
    /**
     * A container for access packages.
     */
    catalogs?: AccessPackageCatalog[];
    /**
     * References to a directory or domain of another organization whose users can request access.
     */
    connectedOrganizations?: ConnectedOrganization[];
    /**
     * A reference to the geolocation environments in which a resource is located.
     */
    resourceEnvironments?: AccessPackageResourceEnvironment[];
    /**
     * Represents a request to add or remove a resource to or from a catalog respectively.
     */
    resourceRequests?: AccessPackageResourceRequest[];
    /**
     * The resourceRoleScopes property
     */
    resourceRoleScopes?: AccessPackageResourceRoleScope[];
    /**
     * The resources associated with the catalogs.
     */
    resources?: AccessPackageResource[];
    /**
     * The settings that control the behavior of Microsoft Entra entitlement management.
     */
    settings?: EntitlementManagementSettings;
}
export function serializeEntitlementManagement(writer: SerializationWriter, entitlementManagement: EntitlementManagement | undefined = {} as EntitlementManagement) : void {
        serializeEntity(writer, entitlementManagement)
        writer.writeCollectionOfObjectValues<Approval>("accessPackageAssignmentApprovals", entitlementManagement.accessPackageAssignmentApprovals, serializeApproval);
        writer.writeCollectionOfObjectValues<AccessPackage>("accessPackages", entitlementManagement.accessPackages, serializeAccessPackage);
        writer.writeCollectionOfObjectValues<AccessPackageAssignmentPolicy>("assignmentPolicies", entitlementManagement.assignmentPolicies, serializeAccessPackageAssignmentPolicy);
        writer.writeCollectionOfObjectValues<AccessPackageAssignmentRequest>("assignmentRequests", entitlementManagement.assignmentRequests, serializeAccessPackageAssignmentRequest);
        writer.writeCollectionOfObjectValues<AccessPackageAssignment>("assignments", entitlementManagement.assignments, serializeAccessPackageAssignment);
        writer.writeCollectionOfObjectValues<AccessPackageCatalog>("catalogs", entitlementManagement.catalogs, serializeAccessPackageCatalog);
        writer.writeCollectionOfObjectValues<ConnectedOrganization>("connectedOrganizations", entitlementManagement.connectedOrganizations, serializeConnectedOrganization);
        writer.writeCollectionOfObjectValues<AccessPackageResourceEnvironment>("resourceEnvironments", entitlementManagement.resourceEnvironments, serializeAccessPackageResourceEnvironment);
        writer.writeCollectionOfObjectValues<AccessPackageResourceRequest>("resourceRequests", entitlementManagement.resourceRequests, serializeAccessPackageResourceRequest);
        writer.writeCollectionOfObjectValues<AccessPackageResourceRoleScope>("resourceRoleScopes", entitlementManagement.resourceRoleScopes, serializeAccessPackageResourceRoleScope);
        writer.writeCollectionOfObjectValues<AccessPackageResource>("resources", entitlementManagement.resources, serializeAccessPackageResource);
        writer.writeObjectValue<EntitlementManagementSettings>("settings", entitlementManagement.settings, serializeEntitlementManagementSettings);
}
// tslint:enable
// eslint-enable
