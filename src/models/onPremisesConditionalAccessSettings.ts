// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export function createOnPremisesConditionalAccessSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOnPremisesConditionalAccessSettings;
}
export function deserializeIntoOnPremisesConditionalAccessSettings(onPremisesConditionalAccessSettings: OnPremisesConditionalAccessSettings | undefined = {} as OnPremisesConditionalAccessSettings) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(onPremisesConditionalAccessSettings),
        "enabled": n => { onPremisesConditionalAccessSettings.enabled = n.getBooleanValue(); },
        "excludedGroups": n => { onPremisesConditionalAccessSettings.excludedGroups = n.getCollectionOfPrimitiveValues<Guid>(); },
        "includedGroups": n => { onPremisesConditionalAccessSettings.includedGroups = n.getCollectionOfPrimitiveValues<Guid>(); },
        "overrideDefaultRule": n => { onPremisesConditionalAccessSettings.overrideDefaultRule = n.getBooleanValue(); },
    }
}
export interface OnPremisesConditionalAccessSettings extends Entity, Parsable {
    /**
     * Indicates if on premises conditional access is enabled for this organization
     */
    enabled?: boolean;
    /**
     * User groups that will be exempt by on premises conditional access. All users in these groups will be exempt from the conditional access policy.
     */
    excludedGroups?: Guid[];
    /**
     * User groups that will be targeted by on premises conditional access. All users in these groups will be required to have mobile device managed and compliant for mail access.
     */
    includedGroups?: Guid[];
    /**
     * Override the default access rule when allowing a device to ensure access is granted.
     */
    overrideDefaultRule?: boolean;
}
export function serializeOnPremisesConditionalAccessSettings(writer: SerializationWriter, onPremisesConditionalAccessSettings: OnPremisesConditionalAccessSettings | undefined = {} as OnPremisesConditionalAccessSettings) : void {
        serializeEntity(writer, onPremisesConditionalAccessSettings)
        writer.writeBooleanValue("enabled", onPremisesConditionalAccessSettings.enabled);
        writer.writeCollectionOfPrimitiveValues<Guid>("excludedGroups", onPremisesConditionalAccessSettings.excludedGroups);
        writer.writeCollectionOfPrimitiveValues<Guid>("includedGroups", onPremisesConditionalAccessSettings.includedGroups);
        writer.writeBooleanValue("overrideDefaultRule", onPremisesConditionalAccessSettings.overrideDefaultRule);
}
// tslint:enable
// eslint-enable
