// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DelegatedAdminAccessAssignmentStatus } from './delegatedAdminAccessAssignmentStatus';
import { createDelegatedAdminAccessContainerFromDiscriminatorValue, serializeDelegatedAdminAccessContainer, type DelegatedAdminAccessContainer } from './delegatedAdminAccessContainer';
import { createDelegatedAdminAccessDetailsFromDiscriminatorValue, serializeDelegatedAdminAccessDetails, type DelegatedAdminAccessDetails } from './delegatedAdminAccessDetails';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDelegatedAdminAccessAssignmentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDelegatedAdminAccessAssignment;
}
export interface DelegatedAdminAccessAssignment extends Entity, Parsable {
    /**
     * The accessContainer property
     */
    accessContainer?: DelegatedAdminAccessContainer;
    /**
     * The accessDetails property
     */
    accessDetails?: DelegatedAdminAccessDetails;
    /**
     * The date and time in ISO 8601 format and in UTC time when the access assignment was created. Read-only.
     */
    createdDateTime?: Date;
    /**
     * The date and time in ISO 8601 and in UTC time when this access assignment was last modified. Read-only.
     */
    lastModifiedDateTime?: Date;
    /**
     * The status of the access assignment. Read-only. The possible values are: pending, active, deleting, deleted, error, unknownFutureValue.
     */
    status?: DelegatedAdminAccessAssignmentStatus;
}
export function deserializeIntoDelegatedAdminAccessAssignment(delegatedAdminAccessAssignment: DelegatedAdminAccessAssignment | undefined = {} as DelegatedAdminAccessAssignment) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(delegatedAdminAccessAssignment),
        "accessContainer": n => { delegatedAdminAccessAssignment.accessContainer = n.getObjectValue<DelegatedAdminAccessContainer>(createDelegatedAdminAccessContainerFromDiscriminatorValue); },
        "accessDetails": n => { delegatedAdminAccessAssignment.accessDetails = n.getObjectValue<DelegatedAdminAccessDetails>(createDelegatedAdminAccessDetailsFromDiscriminatorValue); },
        "createdDateTime": n => { delegatedAdminAccessAssignment.createdDateTime = n.getDateValue(); },
        "lastModifiedDateTime": n => { delegatedAdminAccessAssignment.lastModifiedDateTime = n.getDateValue(); },
        "status": n => { delegatedAdminAccessAssignment.status = n.getEnumValue<DelegatedAdminAccessAssignmentStatus>(DelegatedAdminAccessAssignmentStatus); },
    }
}
export function serializeDelegatedAdminAccessAssignment(writer: SerializationWriter, delegatedAdminAccessAssignment: DelegatedAdminAccessAssignment | undefined = {} as DelegatedAdminAccessAssignment) : void {
        serializeEntity(writer, delegatedAdminAccessAssignment)
        writer.writeObjectValue<DelegatedAdminAccessContainer>("accessContainer", delegatedAdminAccessAssignment.accessContainer, );
        writer.writeObjectValue<DelegatedAdminAccessDetails>("accessDetails", delegatedAdminAccessAssignment.accessDetails, );
        writer.writeDateValue("createdDateTime", delegatedAdminAccessAssignment.createdDateTime);
        writer.writeDateValue("lastModifiedDateTime", delegatedAdminAccessAssignment.lastModifiedDateTime);
        writer.writeEnumValue<DelegatedAdminAccessAssignmentStatus>("status", delegatedAdminAccessAssignment.status);
}
// tslint:enable
// eslint-enable
