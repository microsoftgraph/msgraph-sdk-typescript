// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { CrossTenantAccessPolicyTargetType } from './crossTenantAccessPolicyTargetType';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCrossTenantAccessPolicyTargetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCrossTenantAccessPolicyTarget;
}
export interface CrossTenantAccessPolicyTarget extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The unique identifier of the user, group, or application; one of the following keywords: AllUsers and AllApplications; or for targets that are applications, you may use reserved values.
     */
    target?: string;
    /**
     * The type of resource that you want to target. The possible values are: user, group, application, unknownFutureValue.
     */
    targetType?: CrossTenantAccessPolicyTargetType;
}
export function deserializeIntoCrossTenantAccessPolicyTarget(crossTenantAccessPolicyTarget: CrossTenantAccessPolicyTarget | undefined = {} as CrossTenantAccessPolicyTarget) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { crossTenantAccessPolicyTarget.odataType = n.getStringValue(); },
        "target": n => { crossTenantAccessPolicyTarget.target = n.getStringValue(); },
        "targetType": n => { crossTenantAccessPolicyTarget.targetType = n.getEnumValue<CrossTenantAccessPolicyTargetType>(CrossTenantAccessPolicyTargetType); },
    }
}
export function serializeCrossTenantAccessPolicyTarget(writer: SerializationWriter, crossTenantAccessPolicyTarget: CrossTenantAccessPolicyTarget | undefined = {} as CrossTenantAccessPolicyTarget) : void {
        writer.writeStringValue("@odata.type", crossTenantAccessPolicyTarget.odataType);
        writer.writeStringValue("target", crossTenantAccessPolicyTarget.target);
        writer.writeEnumValue<CrossTenantAccessPolicyTargetType>("targetType", crossTenantAccessPolicyTarget.targetType);
        writer.writeAdditionalData(crossTenantAccessPolicyTarget.additionalData);
}
// tslint:enable
// eslint-enable
