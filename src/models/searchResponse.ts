// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAlterationResponseFromDiscriminatorValue, serializeAlterationResponse, type AlterationResponse } from './alterationResponse';
import { createResultTemplateDictionaryFromDiscriminatorValue, serializeResultTemplateDictionary, type ResultTemplateDictionary } from './resultTemplateDictionary';
import { createSearchHitsContainerFromDiscriminatorValue, serializeSearchHitsContainer, type SearchHitsContainer } from './searchHitsContainer';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSearchResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSearchResponse;
}
export function deserializeIntoSearchResponse(searchResponse: SearchResponse | undefined = {} as SearchResponse) : Record<string, (node: ParseNode) => void> {
    return {
        "hitsContainers": n => { searchResponse.hitsContainers = n.getCollectionOfObjectValues<SearchHitsContainer>(createSearchHitsContainerFromDiscriminatorValue); },
        "@odata.type": n => { searchResponse.odataType = n.getStringValue(); },
        "queryAlterationResponse": n => { searchResponse.queryAlterationResponse = n.getObjectValue<AlterationResponse>(createAlterationResponseFromDiscriminatorValue); },
        "resultTemplates": n => { searchResponse.resultTemplates = n.getObjectValue<ResultTemplateDictionary>(createResultTemplateDictionaryFromDiscriminatorValue); },
        "searchTerms": n => { searchResponse.searchTerms = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface SearchResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A collection of search results.
     */
    hitsContainers?: SearchHitsContainer[];
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Provides information related to spelling corrections in the alteration response.
     */
    queryAlterationResponse?: AlterationResponse;
    /**
     * A dictionary of resultTemplateIds and associated values, which include the name and JSON schema of the result templates.
     */
    resultTemplates?: ResultTemplateDictionary;
    /**
     * Contains the search terms sent in the initial search query.
     */
    searchTerms?: string[];
}
export function serializeSearchResponse(writer: SerializationWriter, searchResponse: SearchResponse | undefined = {} as SearchResponse) : void {
    writer.writeCollectionOfObjectValues<SearchHitsContainer>("hitsContainers", searchResponse.hitsContainers, serializeSearchHitsContainer);
    writer.writeStringValue("@odata.type", searchResponse.odataType);
    writer.writeObjectValue<AlterationResponse>("queryAlterationResponse", searchResponse.queryAlterationResponse, serializeAlterationResponse);
    writer.writeObjectValue<ResultTemplateDictionary>("resultTemplates", searchResponse.resultTemplates, serializeResultTemplateDictionary);
    writer.writeCollectionOfPrimitiveValues<string>("searchTerms", searchResponse.searchTerms);
    writer.writeAdditionalData(searchResponse.additionalData);
}
// tslint:enable
// eslint-enable
