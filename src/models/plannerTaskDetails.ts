// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createPlannerChecklistItemsFromDiscriminatorValue, serializePlannerChecklistItems, type PlannerChecklistItems } from './plannerChecklistItems';
import { createPlannerExternalReferencesFromDiscriminatorValue, serializePlannerExternalReferences, type PlannerExternalReferences } from './plannerExternalReferences';
import { PlannerPreviewType } from './plannerPreviewType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPlannerTaskDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPlannerTaskDetails;
}
export function deserializeIntoPlannerTaskDetails(plannerTaskDetails: PlannerTaskDetails | undefined = {} as PlannerTaskDetails) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(plannerTaskDetails),
        "checklist": n => { plannerTaskDetails.checklist = n.getObjectValue<PlannerChecklistItems>(createPlannerChecklistItemsFromDiscriminatorValue); },
        "description": n => { plannerTaskDetails.description = n.getStringValue(); },
        "previewType": n => { plannerTaskDetails.previewType = n.getEnumValue<PlannerPreviewType>(PlannerPreviewType); },
        "references": n => { plannerTaskDetails.references = n.getObjectValue<PlannerExternalReferences>(createPlannerExternalReferencesFromDiscriminatorValue); },
    }
}
export interface PlannerTaskDetails extends Entity, Parsable {
    /**
     * The collection of checklist items on the task.
     */
    checklist?: PlannerChecklistItems;
    /**
     * Description of the task.
     */
    description?: string;
    /**
     * This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference. When set to automatic the displayed preview is chosen by the app viewing the task.
     */
    previewType?: PlannerPreviewType;
    /**
     * The collection of references on the task.
     */
    references?: PlannerExternalReferences;
}
export function serializePlannerTaskDetails(writer: SerializationWriter, plannerTaskDetails: PlannerTaskDetails | undefined = {} as PlannerTaskDetails) : void {
    serializeEntity(writer, plannerTaskDetails)
    writer.writeObjectValue<PlannerChecklistItems>("checklist", plannerTaskDetails.checklist, serializePlannerChecklistItems);
    writer.writeStringValue("description", plannerTaskDetails.description);
    writer.writeEnumValue<PlannerPreviewType>("previewType", plannerTaskDetails.previewType);
    writer.writeObjectValue<PlannerExternalReferences>("references", plannerTaskDetails.references, serializePlannerExternalReferences);
}
// tslint:enable
// eslint-enable
