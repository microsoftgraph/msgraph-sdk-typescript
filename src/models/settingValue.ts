// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSettingValueFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSettingValue;
}
export function deserializeIntoSettingValue(settingValue: SettingValue | undefined = {} as SettingValue) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { settingValue.name = n.getStringValue(); },
        "@odata.type": n => { settingValue.odataType = n.getStringValue(); },
        "value": n => { settingValue.value = n.getStringValue(); },
    }
}
export function serializeSettingValue(writer: SerializationWriter, settingValue: SettingValue | undefined = {} as SettingValue) : void {
        writer.writeStringValue("name", settingValue.name);
        writer.writeStringValue("@odata.type", settingValue.odataType);
        writer.writeStringValue("value", settingValue.value);
        writer.writeAdditionalData(settingValue.additionalData);
}
export interface SettingValue extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Name of the setting (as defined by the groupSettingTemplate).
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Value of the setting.
     */
    value?: string;
}
// tslint:enable
// eslint-enable
