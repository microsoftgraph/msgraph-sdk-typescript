// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAccessPackageAssignmentRequestCallbackData } from './accessPackageAssignmentRequestCallbackData';
import { type CustomTaskExtensionCallbackData, type CustomTaskExtensionCalloutData } from './identityGovernance/';
import { deserializeIntoCustomTaskExtensionCallbackData } from './identityGovernance/customTaskExtensionCallbackData';
import { deserializeIntoCustomTaskExtensionCalloutData } from './identityGovernance/customTaskExtensionCalloutData';
import { type AccessPackageAssignmentRequestCallbackData } from './index';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createCustomExtensionDataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.accessPackageAssignmentRequestCallbackData":
                    return deserializeIntoAccessPackageAssignmentRequestCallbackData;
                case "#microsoft.graph.identityGovernance.customTaskExtensionCallbackData":
                    return deserializeIntoCustomTaskExtensionCallbackData;
                case "#microsoft.graph.identityGovernance.customTaskExtensionCalloutData":
                    return deserializeIntoCustomTaskExtensionCalloutData;
            }
        }
    }
    return deserializeIntoCustomExtensionData;
}
export interface CustomExtensionData extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function deserializeIntoCustomExtensionData(customExtensionData: CustomExtensionData | undefined = {} as CustomExtensionData) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { customExtensionData.odataType = n.getStringValue(); },
    }
}
export function serializeCustomExtensionData(writer: SerializationWriter, customExtensionData: CustomExtensionData | undefined = {} as CustomExtensionData) : void {
        writer.writeStringValue("@odata.type", customExtensionData.odataType);
        writer.writeAdditionalData(customExtensionData.additionalData);
}
// tslint:enable
// eslint-enable
