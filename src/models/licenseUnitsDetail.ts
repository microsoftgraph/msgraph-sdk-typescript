// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLicenseUnitsDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLicenseUnitsDetail;
}
export function deserializeIntoLicenseUnitsDetail(licenseUnitsDetail: LicenseUnitsDetail | undefined = {} as LicenseUnitsDetail) : Record<string, (node: ParseNode) => void> {
    return {
        "enabled": n => { licenseUnitsDetail.enabled = n.getNumberValue(); },
        "lockedOut": n => { licenseUnitsDetail.lockedOut = n.getNumberValue(); },
        "@odata.type": n => { licenseUnitsDetail.odataType = n.getStringValue(); },
        "suspended": n => { licenseUnitsDetail.suspended = n.getNumberValue(); },
        "warning": n => { licenseUnitsDetail.warning = n.getNumberValue(); },
    }
}
export interface LicenseUnitsDetail extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The number of units that are enabled for the active subscription of the service SKU.
     */
    enabled?: number;
    /**
     * The number of units that are locked out because the customer canceled their subscription of the service SKU.
     */
    lockedOut?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The number of units that are suspended because the subscription of the service SKU has been canceled. The units can't be assigned but can still be reactivated before they're deleted.
     */
    suspended?: number;
    /**
     * The number of units that are in warning status. When the subscription of the service SKU has expired, the customer has a grace period to renew their subscription before it's canceled (moved to a suspended state).
     */
    warning?: number;
}
export function serializeLicenseUnitsDetail(writer: SerializationWriter, licenseUnitsDetail: LicenseUnitsDetail | undefined = {} as LicenseUnitsDetail) : void {
        writer.writeNumberValue("enabled", licenseUnitsDetail.enabled);
        writer.writeNumberValue("lockedOut", licenseUnitsDetail.lockedOut);
        writer.writeStringValue("@odata.type", licenseUnitsDetail.odataType);
        writer.writeNumberValue("suspended", licenseUnitsDetail.suspended);
        writer.writeNumberValue("warning", licenseUnitsDetail.warning);
        writer.writeAdditionalData(licenseUnitsDetail.additionalData);
}
// tslint:enable
// eslint-enable
