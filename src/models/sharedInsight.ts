// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEntityFromDiscriminatorValue, deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createResourceReferenceFromDiscriminatorValue, serializeResourceReference, type ResourceReference } from './resourceReference';
import { createResourceVisualizationFromDiscriminatorValue, serializeResourceVisualization, type ResourceVisualization } from './resourceVisualization';
import { createSharingDetailFromDiscriminatorValue, serializeSharingDetail, type SharingDetail } from './sharingDetail';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSharedInsightFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSharedInsight;
}
export function deserializeIntoSharedInsight(sharedInsight: SharedInsight | undefined = {} as SharedInsight) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(sharedInsight),
        "lastShared": n => { sharedInsight.lastShared = n.getObjectValue<SharingDetail>(createSharingDetailFromDiscriminatorValue); },
        "lastSharedMethod": n => { sharedInsight.lastSharedMethod = n.getObjectValue<Entity>(createEntityFromDiscriminatorValue); },
        "resource": n => { sharedInsight.resource = n.getObjectValue<Entity>(createEntityFromDiscriminatorValue); },
        "resourceReference": n => { sharedInsight.resourceReference = n.getObjectValue<ResourceReference>(createResourceReferenceFromDiscriminatorValue); },
        "resourceVisualization": n => { sharedInsight.resourceVisualization = n.getObjectValue<ResourceVisualization>(createResourceVisualizationFromDiscriminatorValue); },
        "sharingHistory": n => { sharedInsight.sharingHistory = n.getCollectionOfObjectValues<SharingDetail>(createSharingDetailFromDiscriminatorValue); },
    }
}
export function serializeSharedInsight(writer: SerializationWriter, sharedInsight: SharedInsight | undefined = {} as SharedInsight) : void {
    serializeEntity(writer, sharedInsight)
    writer.writeObjectValue<SharingDetail>("lastShared", sharedInsight.lastShared, serializeSharingDetail);
    writer.writeObjectValue<Entity>("lastSharedMethod", sharedInsight.lastSharedMethod, serializeEntity);
    writer.writeObjectValue<Entity>("resource", sharedInsight.resource, serializeEntity);
    writer.writeCollectionOfObjectValues<SharingDetail>("sharingHistory", sharedInsight.sharingHistory, serializeSharingDetail);
}
export interface SharedInsight extends Entity, Parsable {
    /**
     * Details about the shared item. Read only.
     */
    lastShared?: SharingDetail;
    /**
     * The lastSharedMethod property
     */
    lastSharedMethod?: Entity;
    /**
     * Used for navigating to the item that was shared. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.
     */
    resource?: Entity;
    /**
     * Reference properties of the shared document, such as the url and type of the document. Read-only
     */
    resourceReference?: ResourceReference;
    /**
     * Properties that you can use to visualize the document in your experience. Read-only
     */
    resourceVisualization?: ResourceVisualization;
    /**
     * The sharingHistory property
     */
    sharingHistory?: SharingDetail[];
}
// tslint:enable
// eslint-enable
