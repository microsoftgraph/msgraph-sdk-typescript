// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceCompliancePolicyDeviceStateSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceCompliancePolicyDeviceStateSummary;
}
export function deserializeIntoDeviceCompliancePolicyDeviceStateSummary(deviceCompliancePolicyDeviceStateSummary: DeviceCompliancePolicyDeviceStateSummary | undefined = {} as DeviceCompliancePolicyDeviceStateSummary) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceCompliancePolicyDeviceStateSummary),
        "compliantDeviceCount": n => { deviceCompliancePolicyDeviceStateSummary.compliantDeviceCount = n.getNumberValue(); },
        "configManagerCount": n => { deviceCompliancePolicyDeviceStateSummary.configManagerCount = n.getNumberValue(); },
        "conflictDeviceCount": n => { deviceCompliancePolicyDeviceStateSummary.conflictDeviceCount = n.getNumberValue(); },
        "errorDeviceCount": n => { deviceCompliancePolicyDeviceStateSummary.errorDeviceCount = n.getNumberValue(); },
        "inGracePeriodCount": n => { deviceCompliancePolicyDeviceStateSummary.inGracePeriodCount = n.getNumberValue(); },
        "nonCompliantDeviceCount": n => { deviceCompliancePolicyDeviceStateSummary.nonCompliantDeviceCount = n.getNumberValue(); },
        "notApplicableDeviceCount": n => { deviceCompliancePolicyDeviceStateSummary.notApplicableDeviceCount = n.getNumberValue(); },
        "remediatedDeviceCount": n => { deviceCompliancePolicyDeviceStateSummary.remediatedDeviceCount = n.getNumberValue(); },
        "unknownDeviceCount": n => { deviceCompliancePolicyDeviceStateSummary.unknownDeviceCount = n.getNumberValue(); },
    }
}
export interface DeviceCompliancePolicyDeviceStateSummary extends Entity, Parsable {
    /**
     * Number of compliant devices
     */
    compliantDeviceCount?: number;
    /**
     * Number of devices that have compliance managed by System Center Configuration Manager
     */
    configManagerCount?: number;
    /**
     * Number of conflict devices
     */
    conflictDeviceCount?: number;
    /**
     * Number of error devices
     */
    errorDeviceCount?: number;
    /**
     * Number of devices that are in grace period
     */
    inGracePeriodCount?: number;
    /**
     * Number of NonCompliant devices
     */
    nonCompliantDeviceCount?: number;
    /**
     * Number of not applicable devices
     */
    notApplicableDeviceCount?: number;
    /**
     * Number of remediated devices
     */
    remediatedDeviceCount?: number;
    /**
     * Number of unknown devices
     */
    unknownDeviceCount?: number;
}
export function serializeDeviceCompliancePolicyDeviceStateSummary(writer: SerializationWriter, deviceCompliancePolicyDeviceStateSummary: DeviceCompliancePolicyDeviceStateSummary | undefined = {} as DeviceCompliancePolicyDeviceStateSummary) : void {
        serializeEntity(writer, deviceCompliancePolicyDeviceStateSummary)
        writer.writeNumberValue("compliantDeviceCount", deviceCompliancePolicyDeviceStateSummary.compliantDeviceCount);
        writer.writeNumberValue("configManagerCount", deviceCompliancePolicyDeviceStateSummary.configManagerCount);
        writer.writeNumberValue("conflictDeviceCount", deviceCompliancePolicyDeviceStateSummary.conflictDeviceCount);
        writer.writeNumberValue("errorDeviceCount", deviceCompliancePolicyDeviceStateSummary.errorDeviceCount);
        writer.writeNumberValue("inGracePeriodCount", deviceCompliancePolicyDeviceStateSummary.inGracePeriodCount);
        writer.writeNumberValue("nonCompliantDeviceCount", deviceCompliancePolicyDeviceStateSummary.nonCompliantDeviceCount);
        writer.writeNumberValue("notApplicableDeviceCount", deviceCompliancePolicyDeviceStateSummary.notApplicableDeviceCount);
        writer.writeNumberValue("remediatedDeviceCount", deviceCompliancePolicyDeviceStateSummary.remediatedDeviceCount);
        writer.writeNumberValue("unknownDeviceCount", deviceCompliancePolicyDeviceStateSummary.unknownDeviceCount);
}
// tslint:enable
// eslint-enable
