// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSecureScoreControlStateUpdateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSecureScoreControlStateUpdate;
}
export function deserializeIntoSecureScoreControlStateUpdate(secureScoreControlStateUpdate: SecureScoreControlStateUpdate | undefined = {} as SecureScoreControlStateUpdate) : Record<string, (node: ParseNode) => void> {
    return {
        "assignedTo": n => { secureScoreControlStateUpdate.assignedTo = n.getStringValue(); },
        "comment": n => { secureScoreControlStateUpdate.comment = n.getStringValue(); },
        "@odata.type": n => { secureScoreControlStateUpdate.odataType = n.getStringValue(); },
        "state": n => { secureScoreControlStateUpdate.state = n.getStringValue(); },
        "updatedBy": n => { secureScoreControlStateUpdate.updatedBy = n.getStringValue(); },
        "updatedDateTime": n => { secureScoreControlStateUpdate.updatedDateTime = n.getDateValue(); },
    }
}
export interface SecureScoreControlStateUpdate extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Assigns the control to the user who will take the action.
     */
    assignedTo?: string;
    /**
     * Provides optional comment about the control.
     */
    comment?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * State of the control, which can be modified via a PATCH command (for example, ignored, thirdParty).
     */
    state?: string;
    /**
     * ID of the user who updated tenant state.
     */
    updatedBy?: string;
    /**
     * Time at which the control state was updated.
     */
    updatedDateTime?: Date;
}
export function serializeSecureScoreControlStateUpdate(writer: SerializationWriter, secureScoreControlStateUpdate: SecureScoreControlStateUpdate | undefined = {} as SecureScoreControlStateUpdate) : void {
    writer.writeStringValue("assignedTo", secureScoreControlStateUpdate.assignedTo);
    writer.writeStringValue("comment", secureScoreControlStateUpdate.comment);
    writer.writeStringValue("@odata.type", secureScoreControlStateUpdate.odataType);
    writer.writeStringValue("state", secureScoreControlStateUpdate.state);
    writer.writeStringValue("updatedBy", secureScoreControlStateUpdate.updatedBy);
    writer.writeDateValue("updatedDateTime", secureScoreControlStateUpdate.updatedDateTime);
    writer.writeAdditionalData(secureScoreControlStateUpdate.additionalData);
}
// tslint:enable
// eslint-enable
