// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessPackageLocalizedText extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The language code that text is in. For example, 'en-us'. The language component follows 2-letter codes as defined in ISO 639-1, and the country component follows 2-letter codes as defined in ISO 3166-1 alpha-2. Required.
     */
    languageCode?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The question in the specific language. Required.
     */
    text?: string;
}
export function createAccessPackageLocalizedTextFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessPackageLocalizedText;
}
export function deserializeIntoAccessPackageLocalizedText(accessPackageLocalizedText: AccessPackageLocalizedText | undefined = {} as AccessPackageLocalizedText) : Record<string, (node: ParseNode) => void> {
    return {
        "languageCode": n => { accessPackageLocalizedText.languageCode = n.getStringValue(); },
        "@odata.type": n => { accessPackageLocalizedText.odataType = n.getStringValue(); },
        "text": n => { accessPackageLocalizedText.text = n.getStringValue(); },
    }
}
export function serializeAccessPackageLocalizedText(writer: SerializationWriter, accessPackageLocalizedText: AccessPackageLocalizedText | undefined = {} as AccessPackageLocalizedText) : void {
        writer.writeStringValue("languageCode", accessPackageLocalizedText.languageCode);
        writer.writeStringValue("@odata.type", accessPackageLocalizedText.odataType);
        writer.writeStringValue("text", accessPackageLocalizedText.text);
        writer.writeAdditionalData(accessPackageLocalizedText.additionalData);
}
// tslint:enable
// eslint-enable
