// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, type BaseCollectionPaginationCountResponse } from './baseCollectionPaginationCountResponse';
import { createCalendarFromDiscriminatorValue, serializeCalendar, type Calendar } from './calendar';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface CalendarCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Calendar[];
}
export function createCalendarCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoCalendarCollectionResponse;
}
export function deserializeIntoCalendarCollectionResponse(calendarCollectionResponse: CalendarCollectionResponse | undefined = {} as CalendarCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(calendarCollectionResponse),
        "value": n => { calendarCollectionResponse.value = n.getCollectionOfObjectValues<Calendar>(createCalendarFromDiscriminatorValue); },
    }
}
export function serializeCalendarCollectionResponse(writer: SerializationWriter, calendarCollectionResponse: CalendarCollectionResponse | undefined = {} as CalendarCollectionResponse) : void {
        serializeBaseCollectionPaginationCountResponse(writer, calendarCollectionResponse)
        writer.writeCollectionOfObjectValues<Calendar>("value", calendarCollectionResponse.value, serializeCalendar);
}
// tslint:enable
// eslint-enable
