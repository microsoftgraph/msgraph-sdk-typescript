// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAccessReviewReviewerScopeFromDiscriminatorValue, serializeAccessReviewReviewerScope, type AccessReviewReviewerScope } from './accessReviewReviewerScope';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AdminConsentRequestPolicy extends Entity, Parsable {
    /**
     * Specifies whether the admin consent request feature is enabled or disabled. Required.
     */
    isEnabled?: boolean;
    /**
     * Specifies whether reviewers will receive notifications. Required.
     */
    notifyReviewers?: boolean;
    /**
     * Specifies whether reviewers will receive reminder emails. Required.
     */
    remindersEnabled?: boolean;
    /**
     * Specifies the duration the request is active before it automatically expires if no decision is applied.
     */
    requestDurationInDays?: number;
    /**
     * The list of reviewers for the admin consent. Required.
     */
    reviewers?: AccessReviewReviewerScope[];
    /**
     * Specifies the version of this policy. When the policy is updated, this version is updated. Read-only.
     */
    version?: number;
}
export function createAdminConsentRequestPolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAdminConsentRequestPolicy;
}
export function deserializeIntoAdminConsentRequestPolicy(adminConsentRequestPolicy: AdminConsentRequestPolicy | undefined = {} as AdminConsentRequestPolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(adminConsentRequestPolicy),
        "isEnabled": n => { adminConsentRequestPolicy.isEnabled = n.getBooleanValue(); },
        "notifyReviewers": n => { adminConsentRequestPolicy.notifyReviewers = n.getBooleanValue(); },
        "remindersEnabled": n => { adminConsentRequestPolicy.remindersEnabled = n.getBooleanValue(); },
        "requestDurationInDays": n => { adminConsentRequestPolicy.requestDurationInDays = n.getNumberValue(); },
        "reviewers": n => { adminConsentRequestPolicy.reviewers = n.getCollectionOfObjectValues<AccessReviewReviewerScope>(createAccessReviewReviewerScopeFromDiscriminatorValue); },
        "version": n => { adminConsentRequestPolicy.version = n.getNumberValue(); },
    }
}
export function serializeAdminConsentRequestPolicy(writer: SerializationWriter, adminConsentRequestPolicy: AdminConsentRequestPolicy | undefined = {} as AdminConsentRequestPolicy) : void {
    serializeEntity(writer, adminConsentRequestPolicy)
    writer.writeBooleanValue("isEnabled", adminConsentRequestPolicy.isEnabled);
    writer.writeBooleanValue("notifyReviewers", adminConsentRequestPolicy.notifyReviewers);
    writer.writeBooleanValue("remindersEnabled", adminConsentRequestPolicy.remindersEnabled);
    writer.writeNumberValue("requestDurationInDays", adminConsentRequestPolicy.requestDurationInDays);
    writer.writeCollectionOfObjectValues<AccessReviewReviewerScope>("reviewers", adminConsentRequestPolicy.reviewers, serializeAccessReviewReviewerScope);
    writer.writeNumberValue("version", adminConsentRequestPolicy.version);
}
// tslint:enable
// eslint-enable
