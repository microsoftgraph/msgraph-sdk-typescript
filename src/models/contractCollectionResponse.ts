import { deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, type BaseCollectionPaginationCountResponse } from './baseCollectionPaginationCountResponse';
import { createContractFromDiscriminatorValue, serializeContract, type Contract } from './contract';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ContractCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Contract[];
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createContractCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoContractCollectionResponse;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoContractCollectionResponse(contractCollectionResponse: ContractCollectionResponse | undefined = {} as ContractCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(contractCollectionResponse),
        "value": n => { contractCollectionResponse.value = n.getCollectionOfObjectValues<Contract>(createContractFromDiscriminatorValue); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeContractCollectionResponse(writer: SerializationWriter, contractCollectionResponse: ContractCollectionResponse | undefined = {} as ContractCollectionResponse) : void {
        serializeBaseCollectionPaginationCountResponse(writer, contractCollectionResponse)
        writer.writeCollectionOfObjectValues<Contract>("value", contractCollectionResponse.value, );
}
