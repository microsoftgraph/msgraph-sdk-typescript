// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDeviceComplianceUserOverviewFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDeviceComplianceUserOverview;
}
export function deserializeIntoDeviceComplianceUserOverview(deviceComplianceUserOverview: DeviceComplianceUserOverview | undefined = {} as DeviceComplianceUserOverview) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(deviceComplianceUserOverview),
        "configurationVersion": n => { deviceComplianceUserOverview.configurationVersion = n.getNumberValue(); },
        "errorCount": n => { deviceComplianceUserOverview.errorCount = n.getNumberValue(); },
        "failedCount": n => { deviceComplianceUserOverview.failedCount = n.getNumberValue(); },
        "lastUpdateDateTime": n => { deviceComplianceUserOverview.lastUpdateDateTime = n.getDateValue(); },
        "notApplicableCount": n => { deviceComplianceUserOverview.notApplicableCount = n.getNumberValue(); },
        "pendingCount": n => { deviceComplianceUserOverview.pendingCount = n.getNumberValue(); },
        "successCount": n => { deviceComplianceUserOverview.successCount = n.getNumberValue(); },
    }
}
export interface DeviceComplianceUserOverview extends Entity, Parsable {
    /**
     * Version of the policy for that overview
     */
    configurationVersion?: number;
    /**
     * Number of error Users
     */
    errorCount?: number;
    /**
     * Number of failed Users
     */
    failedCount?: number;
    /**
     * Last update time
     */
    lastUpdateDateTime?: Date;
    /**
     * Number of not applicable users
     */
    notApplicableCount?: number;
    /**
     * Number of pending Users
     */
    pendingCount?: number;
    /**
     * Number of succeeded Users
     */
    successCount?: number;
}
export function serializeDeviceComplianceUserOverview(writer: SerializationWriter, deviceComplianceUserOverview: DeviceComplianceUserOverview | undefined = {} as DeviceComplianceUserOverview) : void {
    serializeEntity(writer, deviceComplianceUserOverview)
    writer.writeNumberValue("configurationVersion", deviceComplianceUserOverview.configurationVersion);
    writer.writeNumberValue("errorCount", deviceComplianceUserOverview.errorCount);
    writer.writeNumberValue("failedCount", deviceComplianceUserOverview.failedCount);
    writer.writeDateValue("lastUpdateDateTime", deviceComplianceUserOverview.lastUpdateDateTime);
    writer.writeNumberValue("notApplicableCount", deviceComplianceUserOverview.notApplicableCount);
    writer.writeNumberValue("pendingCount", deviceComplianceUserOverview.pendingCount);
    writer.writeNumberValue("successCount", deviceComplianceUserOverview.successCount);
}
// tslint:enable
// eslint-enable
