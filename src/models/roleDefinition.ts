// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDeviceAndAppManagementRoleDefinition } from './deviceAndAppManagementRoleDefinition';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type DeviceAndAppManagementRoleDefinition } from './index';
import { createRoleAssignmentFromDiscriminatorValue, serializeRoleAssignment, type RoleAssignment } from './roleAssignment';
import { createRolePermissionFromDiscriminatorValue, serializeRolePermission, type RolePermission } from './rolePermission';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRoleDefinitionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.deviceAndAppManagementRoleDefinition":
                    return deserializeIntoDeviceAndAppManagementRoleDefinition;
            }
        }
    }
    return deserializeIntoRoleDefinition;
}
export function deserializeIntoRoleDefinition(roleDefinition: RoleDefinition | undefined = {} as RoleDefinition) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(roleDefinition),
        "description": n => { roleDefinition.description = n.getStringValue(); },
        "displayName": n => { roleDefinition.displayName = n.getStringValue(); },
        "isBuiltIn": n => { roleDefinition.isBuiltIn = n.getBooleanValue(); },
        "roleAssignments": n => { roleDefinition.roleAssignments = n.getCollectionOfObjectValues<RoleAssignment>(createRoleAssignmentFromDiscriminatorValue); },
        "rolePermissions": n => { roleDefinition.rolePermissions = n.getCollectionOfObjectValues<RolePermission>(createRolePermissionFromDiscriminatorValue); },
    }
}
export interface RoleDefinition extends Entity, Parsable {
    /**
     * Description of the Role definition.
     */
    description?: string;
    /**
     * Display Name of the Role definition.
     */
    displayName?: string;
    /**
     * Type of Role. Set to True if it is built-in, or set to False if it is a custom role definition.
     */
    isBuiltIn?: boolean;
    /**
     * List of Role assignments for this role definition.
     */
    roleAssignments?: RoleAssignment[];
    /**
     * List of Role Permissions this role is allowed to perform. These must match the actionName that is defined as part of the rolePermission.
     */
    rolePermissions?: RolePermission[];
}
export function serializeRoleDefinition(writer: SerializationWriter, roleDefinition: RoleDefinition | undefined = {} as RoleDefinition) : void {
        serializeEntity(writer, roleDefinition)
        writer.writeStringValue("description", roleDefinition.description);
        writer.writeStringValue("displayName", roleDefinition.displayName);
        writer.writeBooleanValue("isBuiltIn", roleDefinition.isBuiltIn);
        writer.writeCollectionOfObjectValues<RoleAssignment>("roleAssignments", roleDefinition.roleAssignments, serializeRoleAssignment);
        writer.writeCollectionOfObjectValues<RolePermission>("rolePermissions", roleDefinition.rolePermissions, serializeRolePermission);
}
// tslint:enable
// eslint-enable
