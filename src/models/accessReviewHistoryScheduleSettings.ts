// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPatternedRecurrenceFromDiscriminatorValue, serializePatternedRecurrence, type PatternedRecurrence } from './patternedRecurrence';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AccessReviewHistoryScheduleSettings extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The recurrence property
     */
    recurrence?: PatternedRecurrence;
    /**
     * A duration string in ISO 8601 duration format specifying the lookback period of the generated review history data. For example, if a history definition is scheduled to run on the first of every month, the reportRange is P1M. In this case, on the first of every month, access review history data is collected containing only the previous month's review data. Note: Only years, months, and days ISO 8601 properties are supported. Required.
     */
    reportRange?: string;
}
export function createAccessReviewHistoryScheduleSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAccessReviewHistoryScheduleSettings;
}
export function deserializeIntoAccessReviewHistoryScheduleSettings(accessReviewHistoryScheduleSettings: AccessReviewHistoryScheduleSettings | undefined = {} as AccessReviewHistoryScheduleSettings) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { accessReviewHistoryScheduleSettings.odataType = n.getStringValue(); },
        "recurrence": n => { accessReviewHistoryScheduleSettings.recurrence = n.getObjectValue<PatternedRecurrence>(createPatternedRecurrenceFromDiscriminatorValue); },
        "reportRange": n => { accessReviewHistoryScheduleSettings.reportRange = n.getStringValue(); },
    }
}
export function serializeAccessReviewHistoryScheduleSettings(writer: SerializationWriter, accessReviewHistoryScheduleSettings: AccessReviewHistoryScheduleSettings | undefined = {} as AccessReviewHistoryScheduleSettings) : void {
        writer.writeStringValue("@odata.type", accessReviewHistoryScheduleSettings.odataType);
        writer.writeObjectValue<PatternedRecurrence>("recurrence", accessReviewHistoryScheduleSettings.recurrence, );
        writer.writeStringValue("reportRange", accessReviewHistoryScheduleSettings.reportRange);
        writer.writeAdditionalData(accessReviewHistoryScheduleSettings.additionalData);
}
// tslint:enable
// eslint-enable
