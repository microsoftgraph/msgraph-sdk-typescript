// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createMacOSLobChildAppFromDiscriminatorValue, serializeMacOSLobChildApp, type MacOSLobChildApp } from './macOSLobChildApp';
import { createMacOSMinimumOperatingSystemFromDiscriminatorValue, serializeMacOSMinimumOperatingSystem, type MacOSMinimumOperatingSystem } from './macOSMinimumOperatingSystem';
import { deserializeIntoMobileLobApp, serializeMobileLobApp, type MobileLobApp } from './mobileLobApp';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMacOSLobAppFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMacOSLobApp;
}
export function deserializeIntoMacOSLobApp(macOSLobApp: MacOSLobApp | undefined = {} as MacOSLobApp) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMobileLobApp(macOSLobApp),
        "buildNumber": n => { macOSLobApp.buildNumber = n.getStringValue(); },
        "bundleId": n => { macOSLobApp.bundleId = n.getStringValue(); },
        "childApps": n => { macOSLobApp.childApps = n.getCollectionOfObjectValues<MacOSLobChildApp>(createMacOSLobChildAppFromDiscriminatorValue); },
        "ignoreVersionDetection": n => { macOSLobApp.ignoreVersionDetection = n.getBooleanValue(); },
        "installAsManaged": n => { macOSLobApp.installAsManaged = n.getBooleanValue(); },
        "md5Hash": n => { macOSLobApp.md5Hash = n.getCollectionOfPrimitiveValues<string>(); },
        "md5HashChunkSize": n => { macOSLobApp.md5HashChunkSize = n.getNumberValue(); },
        "minimumSupportedOperatingSystem": n => { macOSLobApp.minimumSupportedOperatingSystem = n.getObjectValue<MacOSMinimumOperatingSystem>(createMacOSMinimumOperatingSystemFromDiscriminatorValue); },
        "versionNumber": n => { macOSLobApp.versionNumber = n.getStringValue(); },
    }
}
export interface MacOSLobApp extends MobileLobApp, Parsable {
    /**
     * The build number of the package. This should match the package CFBundleShortVersionString of the .pkg file.
     */
    buildNumber?: string;
    /**
     * The primary bundleId of the package.
     */
    bundleId?: string;
    /**
     * List of ComplexType macOSLobChildApp objects. Represents the apps expected to be installed by the package.
     */
    childApps?: MacOSLobChildApp[];
    /**
     * When TRUE, indicates that the app's version will NOT be used to detect if the app is installed on a device. When FALSE, indicates that the app's version will be used to detect if the app is installed on a device. Set this to true for apps that use a self update feature.
     */
    ignoreVersionDetection?: boolean;
    /**
     * When TRUE, indicates that the app will be installed as managed (requires macOS 11.0 and other managed package restrictions). When FALSE, indicates that the app will be installed as unmanaged.
     */
    installAsManaged?: boolean;
    /**
     * The MD5 hash codes. This is empty if the package was uploaded directly. If the Intune App Wrapping Tool is used to create a .intunemac, this value can be found inside the Detection.xml file.
     */
    md5Hash?: string[];
    /**
     * The chunk size for MD5 hash. This is '0' or empty if the package was uploaded directly. If the Intune App Wrapping Tool is used to create a .intunemac, this value can be found inside the Detection.xml file.
     */
    md5HashChunkSize?: number;
    /**
     * ComplexType macOSMinimumOperatingSystem that indicates the minimum operating system applicable for the application.
     */
    minimumSupportedOperatingSystem?: MacOSMinimumOperatingSystem;
    /**
     * The version number of the package. This should match the package CFBundleVersion in the packageinfo file.
     */
    versionNumber?: string;
}
export function serializeMacOSLobApp(writer: SerializationWriter, macOSLobApp: MacOSLobApp | undefined = {} as MacOSLobApp) : void {
        serializeMobileLobApp(writer, macOSLobApp)
        writer.writeStringValue("buildNumber", macOSLobApp.buildNumber);
        writer.writeStringValue("bundleId", macOSLobApp.bundleId);
        writer.writeCollectionOfObjectValues<MacOSLobChildApp>("childApps", macOSLobApp.childApps, serializeMacOSLobChildApp);
        writer.writeBooleanValue("ignoreVersionDetection", macOSLobApp.ignoreVersionDetection);
        writer.writeBooleanValue("installAsManaged", macOSLobApp.installAsManaged);
        writer.writeCollectionOfPrimitiveValues<string>("md5Hash", macOSLobApp.md5Hash);
        writer.writeNumberValue("md5HashChunkSize", macOSLobApp.md5HashChunkSize);
        writer.writeObjectValue<MacOSMinimumOperatingSystem>("minimumSupportedOperatingSystem", macOSLobApp.minimumSupportedOperatingSystem, serializeMacOSMinimumOperatingSystem);
        writer.writeStringValue("versionNumber", macOSLobApp.versionNumber);
}
// tslint:enable
// eslint-enable
