// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BookingCurrency extends Entity, Parsable {
    /**
     * The currency symbol. For example, the currency symbol for the US dollar and for the Australian dollar is $.
     */
    symbol?: string;
}
export function createBookingCurrencyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBookingCurrency;
}
export function deserializeIntoBookingCurrency(bookingCurrency: BookingCurrency | undefined = {} as BookingCurrency) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(bookingCurrency),
        "symbol": n => { bookingCurrency.symbol = n.getStringValue(); },
    }
}
export function serializeBookingCurrency(writer: SerializationWriter, bookingCurrency: BookingCurrency | undefined = {} as BookingCurrency) : void {
        serializeEntity(writer, bookingCurrency)
        writer.writeStringValue("symbol", bookingCurrency.symbol);
}
// tslint:enable
// eslint-enable
