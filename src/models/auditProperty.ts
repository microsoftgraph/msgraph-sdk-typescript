// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuditProperty extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Display name.
     */
    displayName?: string;
    /**
     * New value.
     */
    newValue?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Old value.
     */
    oldValue?: string;
}
export function createAuditPropertyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuditProperty;
}
export function deserializeIntoAuditProperty(auditProperty: AuditProperty | undefined = {} as AuditProperty) : Record<string, (node: ParseNode) => void> {
    return {
        "displayName": n => { auditProperty.displayName = n.getStringValue(); },
        "newValue": n => { auditProperty.newValue = n.getStringValue(); },
        "@odata.type": n => { auditProperty.odataType = n.getStringValue(); },
        "oldValue": n => { auditProperty.oldValue = n.getStringValue(); },
    }
}
export function serializeAuditProperty(writer: SerializationWriter, auditProperty: AuditProperty | undefined = {} as AuditProperty) : void {
    writer.writeStringValue("displayName", auditProperty.displayName);
    writer.writeStringValue("newValue", auditProperty.newValue);
    writer.writeStringValue("@odata.type", auditProperty.odataType);
    writer.writeStringValue("oldValue", auditProperty.oldValue);
    writer.writeAdditionalData(auditProperty.additionalData);
}
// tslint:enable
// eslint-enable
