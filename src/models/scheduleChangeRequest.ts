// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoChangeTrackedEntity, serializeChangeTrackedEntity, type ChangeTrackedEntity } from './changeTrackedEntity';
import { type OfferShiftRequest, type OpenShiftChangeRequest, type SwapShiftsChangeRequest, type TimeOffRequest } from './index';
import { deserializeIntoOfferShiftRequest } from './offerShiftRequest';
import { deserializeIntoOpenShiftChangeRequest } from './openShiftChangeRequest';
import { ScheduleChangeRequestActor } from './scheduleChangeRequestActor';
import { ScheduleChangeState } from './scheduleChangeState';
import { deserializeIntoSwapShiftsChangeRequest } from './swapShiftsChangeRequest';
import { deserializeIntoTimeOffRequest } from './timeOffRequest';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createScheduleChangeRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.offerShiftRequest":
                    return deserializeIntoOfferShiftRequest;
                case "#microsoft.graph.openShiftChangeRequest":
                    return deserializeIntoOpenShiftChangeRequest;
                case "#microsoft.graph.swapShiftsChangeRequest":
                    return deserializeIntoSwapShiftsChangeRequest;
                case "#microsoft.graph.timeOffRequest":
                    return deserializeIntoTimeOffRequest;
            }
        }
    }
    return deserializeIntoScheduleChangeRequest;
}
export function deserializeIntoScheduleChangeRequest(scheduleChangeRequest: ScheduleChangeRequest | undefined = {} as ScheduleChangeRequest) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoChangeTrackedEntity(scheduleChangeRequest),
        "assignedTo": n => { scheduleChangeRequest.assignedTo = n.getEnumValue<ScheduleChangeRequestActor>(ScheduleChangeRequestActor); },
        "managerActionDateTime": n => { scheduleChangeRequest.managerActionDateTime = n.getDateValue(); },
        "managerActionMessage": n => { scheduleChangeRequest.managerActionMessage = n.getStringValue(); },
        "managerUserId": n => { scheduleChangeRequest.managerUserId = n.getStringValue(); },
        "senderDateTime": n => { scheduleChangeRequest.senderDateTime = n.getDateValue(); },
        "senderMessage": n => { scheduleChangeRequest.senderMessage = n.getStringValue(); },
        "senderUserId": n => { scheduleChangeRequest.senderUserId = n.getStringValue(); },
        "state": n => { scheduleChangeRequest.state = n.getEnumValue<ScheduleChangeState>(ScheduleChangeState); },
    }
}
export interface ScheduleChangeRequest extends ChangeTrackedEntity, Parsable {
    /**
     * The assignedTo property
     */
    assignedTo?: ScheduleChangeRequestActor;
    /**
     * The managerActionDateTime property
     */
    managerActionDateTime?: Date;
    /**
     * The managerActionMessage property
     */
    managerActionMessage?: string;
    /**
     * The managerUserId property
     */
    managerUserId?: string;
    /**
     * The senderDateTime property
     */
    senderDateTime?: Date;
    /**
     * The senderMessage property
     */
    senderMessage?: string;
    /**
     * The senderUserId property
     */
    senderUserId?: string;
    /**
     * The state property
     */
    state?: ScheduleChangeState;
}
export function serializeScheduleChangeRequest(writer: SerializationWriter, scheduleChangeRequest: ScheduleChangeRequest | undefined = {} as ScheduleChangeRequest) : void {
        serializeChangeTrackedEntity(writer, scheduleChangeRequest)
        writer.writeEnumValue<ScheduleChangeRequestActor>("assignedTo", scheduleChangeRequest.assignedTo);
        writer.writeStringValue("managerActionMessage", scheduleChangeRequest.managerActionMessage);
        writer.writeStringValue("senderMessage", scheduleChangeRequest.senderMessage);
        writer.writeEnumValue<ScheduleChangeState>("state", scheduleChangeRequest.state);
}
// tslint:enable
// eslint-enable
