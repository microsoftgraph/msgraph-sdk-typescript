// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ApplePushNotificationCertificate extends Entity, Parsable {
    /**
     * Apple Id of the account used to create the MDM push certificate.
     */
    appleIdentifier?: string;
    /**
     * Not yet documented
     */
    certificate?: string;
    /**
     * Certificate serial number. This property is read-only.
     */
    certificateSerialNumber?: string;
    /**
     * The reason the certificate upload failed.
     */
    certificateUploadFailureReason?: string;
    /**
     * The certificate upload status.
     */
    certificateUploadStatus?: string;
    /**
     * The expiration date and time for Apple push notification certificate.
     */
    expirationDateTime?: Date;
    /**
     * Last modified date and time for Apple push notification certificate.
     */
    lastModifiedDateTime?: Date;
    /**
     * Topic Id.
     */
    topicIdentifier?: string;
}
export function createApplePushNotificationCertificateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoApplePushNotificationCertificate;
}
export function deserializeIntoApplePushNotificationCertificate(applePushNotificationCertificate: ApplePushNotificationCertificate | undefined = {} as ApplePushNotificationCertificate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(applePushNotificationCertificate),
        "appleIdentifier": n => { applePushNotificationCertificate.appleIdentifier = n.getStringValue(); },
        "certificate": n => { applePushNotificationCertificate.certificate = n.getStringValue(); },
        "certificateSerialNumber": n => { applePushNotificationCertificate.certificateSerialNumber = n.getStringValue(); },
        "certificateUploadFailureReason": n => { applePushNotificationCertificate.certificateUploadFailureReason = n.getStringValue(); },
        "certificateUploadStatus": n => { applePushNotificationCertificate.certificateUploadStatus = n.getStringValue(); },
        "expirationDateTime": n => { applePushNotificationCertificate.expirationDateTime = n.getDateValue(); },
        "lastModifiedDateTime": n => { applePushNotificationCertificate.lastModifiedDateTime = n.getDateValue(); },
        "topicIdentifier": n => { applePushNotificationCertificate.topicIdentifier = n.getStringValue(); },
    }
}
export function serializeApplePushNotificationCertificate(writer: SerializationWriter, applePushNotificationCertificate: ApplePushNotificationCertificate | undefined = {} as ApplePushNotificationCertificate) : void {
    serializeEntity(writer, applePushNotificationCertificate)
    writer.writeStringValue("appleIdentifier", applePushNotificationCertificate.appleIdentifier);
    writer.writeStringValue("certificate", applePushNotificationCertificate.certificate);
    writer.writeStringValue("certificateUploadFailureReason", applePushNotificationCertificate.certificateUploadFailureReason);
    writer.writeStringValue("certificateUploadStatus", applePushNotificationCertificate.certificateUploadStatus);
    writer.writeDateValue("expirationDateTime", applePushNotificationCertificate.expirationDateTime);
    writer.writeDateValue("lastModifiedDateTime", applePushNotificationCertificate.lastModifiedDateTime);
    writer.writeStringValue("topicIdentifier", applePushNotificationCertificate.topicIdentifier);
}
// tslint:enable
// eslint-enable
