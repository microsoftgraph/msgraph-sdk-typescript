import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from './group';
import { PrivilegedAccessGroupMemberType } from './privilegedAccessGroupMemberType';
import { PrivilegedAccessGroupRelationships } from './privilegedAccessGroupRelationships';
import { deserializeIntoPrivilegedAccessSchedule, serializePrivilegedAccessSchedule, type PrivilegedAccessSchedule } from './privilegedAccessSchedule';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createPrivilegedAccessGroupEligibilityScheduleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrivilegedAccessGroupEligibilitySchedule;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoPrivilegedAccessGroupEligibilitySchedule(privilegedAccessGroupEligibilitySchedule: PrivilegedAccessGroupEligibilitySchedule | undefined = {} as PrivilegedAccessGroupEligibilitySchedule) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPrivilegedAccessSchedule(privilegedAccessGroupEligibilitySchedule),
        "accessId": n => { privilegedAccessGroupEligibilitySchedule.accessId = n.getEnumValue<PrivilegedAccessGroupRelationships>(PrivilegedAccessGroupRelationships); },
        "group": n => { privilegedAccessGroupEligibilitySchedule.group = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "groupId": n => { privilegedAccessGroupEligibilitySchedule.groupId = n.getStringValue(); },
        "memberType": n => { privilegedAccessGroupEligibilitySchedule.memberType = n.getEnumValue<PrivilegedAccessGroupMemberType>(PrivilegedAccessGroupMemberType); },
        "principal": n => { privilegedAccessGroupEligibilitySchedule.principal = n.getObjectValue<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "principalId": n => { privilegedAccessGroupEligibilitySchedule.principalId = n.getStringValue(); },
    }
}
export interface PrivilegedAccessGroupEligibilitySchedule extends Parsable, PrivilegedAccessSchedule {
    /**
     * The accessId property
     */
    accessId?: PrivilegedAccessGroupRelationships;
    /**
     * The group property
     */
    group?: Group;
    /**
     * The groupId property
     */
    groupId?: string;
    /**
     * The memberType property
     */
    memberType?: PrivilegedAccessGroupMemberType;
    /**
     * The principal property
     */
    principal?: DirectoryObject;
    /**
     * The principalId property
     */
    principalId?: string;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializePrivilegedAccessGroupEligibilitySchedule(writer: SerializationWriter, privilegedAccessGroupEligibilitySchedule: PrivilegedAccessGroupEligibilitySchedule | undefined = {} as PrivilegedAccessGroupEligibilitySchedule) : void {
        serializePrivilegedAccessSchedule(writer, privilegedAccessGroupEligibilitySchedule)
        writer.writeEnumValue<PrivilegedAccessGroupRelationships>("accessId", privilegedAccessGroupEligibilitySchedule.accessId);
        writer.writeObjectValue<Group>("group", privilegedAccessGroupEligibilitySchedule.group, );
        writer.writeStringValue("groupId", privilegedAccessGroupEligibilitySchedule.groupId);
        writer.writeEnumValue<PrivilegedAccessGroupMemberType>("memberType", privilegedAccessGroupEligibilitySchedule.memberType);
        writer.writeObjectValue<DirectoryObject>("principal", privilegedAccessGroupEligibilitySchedule.principal, );
        writer.writeStringValue("principalId", privilegedAccessGroupEligibilitySchedule.principalId);
}
