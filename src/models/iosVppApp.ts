// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIosDeviceTypeFromDiscriminatorValue, serializeIosDeviceType, type IosDeviceType } from './iosDeviceType';
import { deserializeIntoMobileApp, serializeMobileApp, type MobileApp } from './mobileApp';
import { createVppLicensingTypeFromDiscriminatorValue, serializeVppLicensingType, type VppLicensingType } from './vppLicensingType';
import { VppTokenAccountType } from './vppTokenAccountType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createIosVppAppFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoIosVppApp;
}
export function deserializeIntoIosVppApp(iosVppApp: IosVppApp | undefined = {} as IosVppApp) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMobileApp(iosVppApp),
        "applicableDeviceType": n => { iosVppApp.applicableDeviceType = n.getObjectValue<IosDeviceType>(createIosDeviceTypeFromDiscriminatorValue); },
        "appStoreUrl": n => { iosVppApp.appStoreUrl = n.getStringValue(); },
        "bundleId": n => { iosVppApp.bundleId = n.getStringValue(); },
        "licensingType": n => { iosVppApp.licensingType = n.getObjectValue<VppLicensingType>(createVppLicensingTypeFromDiscriminatorValue); },
        "releaseDateTime": n => { iosVppApp.releaseDateTime = n.getDateValue(); },
        "totalLicenseCount": n => { iosVppApp.totalLicenseCount = n.getNumberValue(); },
        "usedLicenseCount": n => { iosVppApp.usedLicenseCount = n.getNumberValue(); },
        "vppTokenAccountType": n => { iosVppApp.vppTokenAccountType = n.getEnumValue<VppTokenAccountType>(VppTokenAccountType); },
        "vppTokenAppleId": n => { iosVppApp.vppTokenAppleId = n.getStringValue(); },
        "vppTokenOrganizationName": n => { iosVppApp.vppTokenOrganizationName = n.getStringValue(); },
    }
}
export interface IosVppApp extends MobileApp, Parsable {
    /**
     * The applicable iOS Device Type.
     */
    applicableDeviceType?: IosDeviceType;
    /**
     * The store URL.
     */
    appStoreUrl?: string;
    /**
     * The Identity Name.
     */
    bundleId?: string;
    /**
     * The supported License Type.
     */
    licensingType?: VppLicensingType;
    /**
     * The VPP application release date and time.
     */
    releaseDateTime?: Date;
    /**
     * The total number of VPP licenses.
     */
    totalLicenseCount?: number;
    /**
     * The number of VPP licenses in use.
     */
    usedLicenseCount?: number;
    /**
     * Possible types of an Apple Volume Purchase Program token.
     */
    vppTokenAccountType?: VppTokenAccountType;
    /**
     * The Apple Id associated with the given Apple Volume Purchase Program Token.
     */
    vppTokenAppleId?: string;
    /**
     * The organization associated with the Apple Volume Purchase Program Token
     */
    vppTokenOrganizationName?: string;
}
export function serializeIosVppApp(writer: SerializationWriter, iosVppApp: IosVppApp | undefined = {} as IosVppApp) : void {
        serializeMobileApp(writer, iosVppApp)
        writer.writeObjectValue<IosDeviceType>("applicableDeviceType", iosVppApp.applicableDeviceType, );
        writer.writeStringValue("appStoreUrl", iosVppApp.appStoreUrl);
        writer.writeStringValue("bundleId", iosVppApp.bundleId);
        writer.writeObjectValue<VppLicensingType>("licensingType", iosVppApp.licensingType, );
        writer.writeDateValue("releaseDateTime", iosVppApp.releaseDateTime);
        writer.writeNumberValue("totalLicenseCount", iosVppApp.totalLicenseCount);
        writer.writeNumberValue("usedLicenseCount", iosVppApp.usedLicenseCount);
        writer.writeEnumValue<VppTokenAccountType>("vppTokenAccountType", iosVppApp.vppTokenAccountType);
        writer.writeStringValue("vppTokenAppleId", iosVppApp.vppTokenAppleId);
        writer.writeStringValue("vppTokenOrganizationName", iosVppApp.vppTokenOrganizationName);
}
// tslint:enable
// eslint-enable
