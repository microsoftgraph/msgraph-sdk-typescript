// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConfigurationManagerClientEnabledFeatures extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Whether compliance policy is managed by Intune
     */
    compliancePolicy?: boolean;
    /**
     * Whether device configuration is managed by Intune
     */
    deviceConfiguration?: boolean;
    /**
     * Whether inventory is managed by Intune
     */
    inventory?: boolean;
    /**
     * Whether modern application is managed by Intune
     */
    modernApps?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Whether resource access is managed by Intune
     */
    resourceAccess?: boolean;
    /**
     * Whether Windows Update for Business is managed by Intune
     */
    windowsUpdateForBusiness?: boolean;
}
export function createConfigurationManagerClientEnabledFeaturesFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConfigurationManagerClientEnabledFeatures;
}
export function deserializeIntoConfigurationManagerClientEnabledFeatures(configurationManagerClientEnabledFeatures: ConfigurationManagerClientEnabledFeatures | undefined = {} as ConfigurationManagerClientEnabledFeatures) : Record<string, (node: ParseNode) => void> {
    return {
        "compliancePolicy": n => { configurationManagerClientEnabledFeatures.compliancePolicy = n.getBooleanValue(); },
        "deviceConfiguration": n => { configurationManagerClientEnabledFeatures.deviceConfiguration = n.getBooleanValue(); },
        "inventory": n => { configurationManagerClientEnabledFeatures.inventory = n.getBooleanValue(); },
        "modernApps": n => { configurationManagerClientEnabledFeatures.modernApps = n.getBooleanValue(); },
        "@odata.type": n => { configurationManagerClientEnabledFeatures.odataType = n.getStringValue(); },
        "resourceAccess": n => { configurationManagerClientEnabledFeatures.resourceAccess = n.getBooleanValue(); },
        "windowsUpdateForBusiness": n => { configurationManagerClientEnabledFeatures.windowsUpdateForBusiness = n.getBooleanValue(); },
    }
}
export function serializeConfigurationManagerClientEnabledFeatures(writer: SerializationWriter, configurationManagerClientEnabledFeatures: ConfigurationManagerClientEnabledFeatures | undefined = {} as ConfigurationManagerClientEnabledFeatures) : void {
        writer.writeBooleanValue("compliancePolicy", configurationManagerClientEnabledFeatures.compliancePolicy);
        writer.writeBooleanValue("deviceConfiguration", configurationManagerClientEnabledFeatures.deviceConfiguration);
        writer.writeBooleanValue("inventory", configurationManagerClientEnabledFeatures.inventory);
        writer.writeBooleanValue("modernApps", configurationManagerClientEnabledFeatures.modernApps);
        writer.writeStringValue("@odata.type", configurationManagerClientEnabledFeatures.odataType);
        writer.writeBooleanValue("resourceAccess", configurationManagerClientEnabledFeatures.resourceAccess);
        writer.writeBooleanValue("windowsUpdateForBusiness", configurationManagerClientEnabledFeatures.windowsUpdateForBusiness);
        writer.writeAdditionalData(configurationManagerClientEnabledFeatures.additionalData);
}
// tslint:enable
// eslint-enable
