// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoCommsOperation, serializeCommsOperation, type CommsOperation } from './commsOperation';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createRecordOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoRecordOperation;
}
export function deserializeIntoRecordOperation(recordOperation: RecordOperation | undefined = {} as RecordOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCommsOperation(recordOperation),
        "recordingAccessToken": n => { recordOperation.recordingAccessToken = n.getStringValue(); },
        "recordingLocation": n => { recordOperation.recordingLocation = n.getStringValue(); },
    }
}
export interface RecordOperation extends CommsOperation, Parsable {
    /**
     * The access token required to retrieve the recording.
     */
    recordingAccessToken?: string;
    /**
     * The location where the recording is located.
     */
    recordingLocation?: string;
}
export function serializeRecordOperation(writer: SerializationWriter, recordOperation: RecordOperation | undefined = {} as RecordOperation) : void {
    serializeCommsOperation(writer, recordOperation)
    writer.writeStringValue("recordingAccessToken", recordOperation.recordingAccessToken);
    writer.writeStringValue("recordingLocation", recordOperation.recordingLocation);
}
// tslint:enable
// eslint-enable
