// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type WindowsDeviceADAccount, type WindowsDeviceAzureADAccount } from './index';
import { deserializeIntoWindowsDeviceADAccount } from './windowsDeviceADAccount';
import { deserializeIntoWindowsDeviceAzureADAccount } from './windowsDeviceAzureADAccount';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindowsDeviceAccountFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.windowsDeviceADAccount":
                    return deserializeIntoWindowsDeviceADAccount;
                case "#microsoft.graph.windowsDeviceAzureADAccount":
                    return deserializeIntoWindowsDeviceAzureADAccount;
            }
        }
    }
    return deserializeIntoWindowsDeviceAccount;
}
export function deserializeIntoWindowsDeviceAccount(windowsDeviceAccount: WindowsDeviceAccount | undefined = {} as WindowsDeviceAccount) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { windowsDeviceAccount.odataType = n.getStringValue(); },
        "password": n => { windowsDeviceAccount.password = n.getStringValue(); },
    }
}
export function serializeWindowsDeviceAccount(writer: SerializationWriter, windowsDeviceAccount: WindowsDeviceAccount | undefined = {} as WindowsDeviceAccount) : void {
        writer.writeStringValue("@odata.type", windowsDeviceAccount.odataType);
        writer.writeStringValue("password", windowsDeviceAccount.password);
        writer.writeAdditionalData(windowsDeviceAccount.additionalData);
}
export interface WindowsDeviceAccount extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Not yet documented
     */
    password?: string;
}
// tslint:enable
// eslint-enable
