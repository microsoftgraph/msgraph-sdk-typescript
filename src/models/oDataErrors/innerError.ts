// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createInnerErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoInnerError;
}
export function deserializeIntoInnerError(innerError: InnerError | undefined = {} as InnerError) : Record<string, (node: ParseNode) => void> {
    return {
        "client-request-id": n => { innerError.clientRequestId = n.getStringValue(); },
        "date": n => { innerError.date = n.getDateValue(); },
        "@odata.type": n => { innerError.odataType = n.getStringValue(); },
        "request-id": n => { innerError.requestId = n.getStringValue(); },
    }
}
export interface InnerError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Client request Id as sent by the client application.
     */
    clientRequestId?: string;
    /**
     * Date when the error occured.
     */
    date?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Request Id as tracked internally by the service
     */
    requestId?: string;
}
export function serializeInnerError(writer: SerializationWriter, innerError: InnerError | undefined = {} as InnerError) : void {
    writer.writeStringValue("client-request-id", innerError.clientRequestId);
    writer.writeDateValue("Date", innerError.date);
    writer.writeStringValue("@odata.type", innerError.odataType);
    writer.writeStringValue("request-id", innerError.requestId);
    writer.writeAdditionalData(innerError.additionalData);
}
// tslint:enable
// eslint-enable
