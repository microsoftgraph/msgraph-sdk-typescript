// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createErrorDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoErrorDetails;
}
export function deserializeIntoErrorDetails(errorDetails: ErrorDetails | undefined = {} as ErrorDetails) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { errorDetails.code = n.getStringValue(); },
        "message": n => { errorDetails.message = n.getStringValue(); },
        "target": n => { errorDetails.target = n.getStringValue(); },
    }
}
export interface ErrorDetails extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The code property
     */
    code?: string;
    /**
     * The message property
     */
    message?: string;
    /**
     * The target property
     */
    target?: string;
}
export function serializeErrorDetails(writer: SerializationWriter, errorDetails: ErrorDetails | undefined = {} as ErrorDetails) : void {
    writer.writeStringValue("code", errorDetails.code);
    writer.writeStringValue("message", errorDetails.message);
    writer.writeStringValue("target", errorDetails.target);
    writer.writeAdditionalData(errorDetails.additionalData);
}
// tslint:enable
// eslint-enable
