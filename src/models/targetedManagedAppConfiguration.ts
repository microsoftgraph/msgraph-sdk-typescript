// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoManagedAppConfiguration, serializeManagedAppConfiguration, type ManagedAppConfiguration } from './managedAppConfiguration';
import { createManagedAppPolicyDeploymentSummaryFromDiscriminatorValue, serializeManagedAppPolicyDeploymentSummary, type ManagedAppPolicyDeploymentSummary } from './managedAppPolicyDeploymentSummary';
import { createManagedMobileAppFromDiscriminatorValue, serializeManagedMobileApp, type ManagedMobileApp } from './managedMobileApp';
import { createTargetedManagedAppPolicyAssignmentFromDiscriminatorValue, serializeTargetedManagedAppPolicyAssignment, type TargetedManagedAppPolicyAssignment } from './targetedManagedAppPolicyAssignment';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTargetedManagedAppConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoTargetedManagedAppConfiguration;
}
export function deserializeIntoTargetedManagedAppConfiguration(targetedManagedAppConfiguration: TargetedManagedAppConfiguration | undefined = {} as TargetedManagedAppConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoManagedAppConfiguration(targetedManagedAppConfiguration),
        "apps": n => { targetedManagedAppConfiguration.apps = n.getCollectionOfObjectValues<ManagedMobileApp>(createManagedMobileAppFromDiscriminatorValue); },
        "assignments": n => { targetedManagedAppConfiguration.assignments = n.getCollectionOfObjectValues<TargetedManagedAppPolicyAssignment>(createTargetedManagedAppPolicyAssignmentFromDiscriminatorValue); },
        "deployedAppCount": n => { targetedManagedAppConfiguration.deployedAppCount = n.getNumberValue(); },
        "deploymentSummary": n => { targetedManagedAppConfiguration.deploymentSummary = n.getObjectValue<ManagedAppPolicyDeploymentSummary>(createManagedAppPolicyDeploymentSummaryFromDiscriminatorValue); },
        "isAssigned": n => { targetedManagedAppConfiguration.isAssigned = n.getBooleanValue(); },
    }
}
export function serializeTargetedManagedAppConfiguration(writer: SerializationWriter, targetedManagedAppConfiguration: TargetedManagedAppConfiguration | undefined = {} as TargetedManagedAppConfiguration) : void {
        serializeManagedAppConfiguration(writer, targetedManagedAppConfiguration)
        writer.writeCollectionOfObjectValues<ManagedMobileApp>("apps", targetedManagedAppConfiguration.apps, serializeManagedMobileApp);
        writer.writeCollectionOfObjectValues<TargetedManagedAppPolicyAssignment>("assignments", targetedManagedAppConfiguration.assignments, serializeTargetedManagedAppPolicyAssignment);
        writer.writeNumberValue("deployedAppCount", targetedManagedAppConfiguration.deployedAppCount);
        writer.writeObjectValue<ManagedAppPolicyDeploymentSummary>("deploymentSummary", targetedManagedAppConfiguration.deploymentSummary, serializeManagedAppPolicyDeploymentSummary);
        writer.writeBooleanValue("isAssigned", targetedManagedAppConfiguration.isAssigned);
}
export interface TargetedManagedAppConfiguration extends ManagedAppConfiguration, Parsable {
    /**
     * List of apps to which the policy is deployed.
     */
    apps?: ManagedMobileApp[];
    /**
     * Navigation property to list of inclusion and exclusion groups to which the policy is deployed.
     */
    assignments?: TargetedManagedAppPolicyAssignment[];
    /**
     * Count of apps to which the current policy is deployed.
     */
    deployedAppCount?: number;
    /**
     * Navigation property to deployment summary of the configuration.
     */
    deploymentSummary?: ManagedAppPolicyDeploymentSummary;
    /**
     * Indicates if the policy is deployed to any inclusion groups or not.
     */
    isAssigned?: boolean;
}
// tslint:enable
// eslint-enable
