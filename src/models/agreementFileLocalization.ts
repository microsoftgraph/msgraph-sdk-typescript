// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAgreementFileProperties, serializeAgreementFileProperties, type AgreementFileProperties } from './agreementFileProperties';
import { createAgreementFileVersionFromDiscriminatorValue, serializeAgreementFileVersion, type AgreementFileVersion } from './agreementFileVersion';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AgreementFileLocalization extends AgreementFileProperties, Parsable {
    /**
     * Read-only. Customized versions of the terms of use agreement in the Microsoft Entra tenant.
     */
    versions?: AgreementFileVersion[];
}
export function createAgreementFileLocalizationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAgreementFileLocalization;
}
export function deserializeIntoAgreementFileLocalization(agreementFileLocalization: AgreementFileLocalization | undefined = {} as AgreementFileLocalization) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAgreementFileProperties(agreementFileLocalization),
        "versions": n => { agreementFileLocalization.versions = n.getCollectionOfObjectValues<AgreementFileVersion>(createAgreementFileVersionFromDiscriminatorValue); },
    }
}
export function serializeAgreementFileLocalization(writer: SerializationWriter, agreementFileLocalization: AgreementFileLocalization | undefined = {} as AgreementFileLocalization) : void {
        serializeAgreementFileProperties(writer, agreementFileLocalization)
        writer.writeCollectionOfObjectValues<AgreementFileVersion>("versions", agreementFileLocalization.versions, serializeAgreementFileVersion);
}
// tslint:enable
// eslint-enable
