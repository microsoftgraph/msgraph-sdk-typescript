// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIntegerRangeFromDiscriminatorValue, serializeIntegerRange, type IntegerRange } from './integerRange';
import { PrintColorMode } from './printColorMode';
import { PrintDuplexMode } from './printDuplexMode';
import { PrinterFeedOrientation } from './printerFeedOrientation';
import { PrintFinishing } from './printFinishing';
import { createPrintMarginFromDiscriminatorValue, serializePrintMargin, type PrintMargin } from './printMargin';
import { PrintMultipageLayout } from './printMultipageLayout';
import { PrintOrientation } from './printOrientation';
import { PrintQuality } from './printQuality';
import { PrintScaling } from './printScaling';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrintJobConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrintJobConfiguration;
}
export function deserializeIntoPrintJobConfiguration(printJobConfiguration: PrintJobConfiguration | undefined = {} as PrintJobConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        "collate": n => { printJobConfiguration.collate = n.getBooleanValue(); },
        "colorMode": n => { printJobConfiguration.colorMode = n.getEnumValue<PrintColorMode>(PrintColorMode); },
        "copies": n => { printJobConfiguration.copies = n.getNumberValue(); },
        "dpi": n => { printJobConfiguration.dpi = n.getNumberValue(); },
        "duplexMode": n => { printJobConfiguration.duplexMode = n.getEnumValue<PrintDuplexMode>(PrintDuplexMode); },
        "feedOrientation": n => { printJobConfiguration.feedOrientation = n.getEnumValue<PrinterFeedOrientation>(PrinterFeedOrientation); },
        "finishings": n => { printJobConfiguration.finishings = n.getCollectionOfEnumValues<PrintFinishing>(PrintFinishing); },
        "fitPdfToPage": n => { printJobConfiguration.fitPdfToPage = n.getBooleanValue(); },
        "inputBin": n => { printJobConfiguration.inputBin = n.getStringValue(); },
        "margin": n => { printJobConfiguration.margin = n.getObjectValue<PrintMargin>(createPrintMarginFromDiscriminatorValue); },
        "mediaSize": n => { printJobConfiguration.mediaSize = n.getStringValue(); },
        "mediaType": n => { printJobConfiguration.mediaType = n.getStringValue(); },
        "multipageLayout": n => { printJobConfiguration.multipageLayout = n.getEnumValue<PrintMultipageLayout>(PrintMultipageLayout); },
        "@odata.type": n => { printJobConfiguration.odataType = n.getStringValue(); },
        "orientation": n => { printJobConfiguration.orientation = n.getEnumValue<PrintOrientation>(PrintOrientation); },
        "outputBin": n => { printJobConfiguration.outputBin = n.getStringValue(); },
        "pageRanges": n => { printJobConfiguration.pageRanges = n.getCollectionOfObjectValues<IntegerRange>(createIntegerRangeFromDiscriminatorValue); },
        "pagesPerSheet": n => { printJobConfiguration.pagesPerSheet = n.getNumberValue(); },
        "quality": n => { printJobConfiguration.quality = n.getEnumValue<PrintQuality>(PrintQuality); },
        "scaling": n => { printJobConfiguration.scaling = n.getEnumValue<PrintScaling>(PrintScaling); },
    }
}
export interface PrintJobConfiguration extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Whether the printer should collate pages wehen printing multiple copies of a multi-page document.
     */
    collate?: boolean;
    /**
     * The color mode the printer should use to print the job. Valid values are described in the table below. Read-only.
     */
    colorMode?: PrintColorMode;
    /**
     * The number of copies that should be printed. Read-only.
     */
    copies?: number;
    /**
     * The resolution to use when printing the job, expressed in dots per inch (DPI). Read-only.
     */
    dpi?: number;
    /**
     * The duplex mode the printer should use when printing the job. Valid values are described in the table below. Read-only.
     */
    duplexMode?: PrintDuplexMode;
    /**
     * The orientation to use when feeding media into the printer. Valid values are described in the following table. Read-only.
     */
    feedOrientation?: PrinterFeedOrientation;
    /**
     * Finishing processes to use when printing.
     */
    finishings?: PrintFinishing[];
    /**
     * The fitPdfToPage property
     */
    fitPdfToPage?: boolean;
    /**
     * The input bin (tray) to use when printing. See the printer's capabilities for a list of supported input bins.
     */
    inputBin?: string;
    /**
     * The margin settings to use when printing.
     */
    margin?: PrintMargin;
    /**
     * The media size to use when printing. Supports standard size names for ISO and ANSI media sizes.
     */
    mediaSize?: string;
    /**
     * The mediaType property
     */
    mediaType?: string;
    /**
     * The multipageLayout property
     */
    multipageLayout?: PrintMultipageLayout;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The orientation property
     */
    orientation?: PrintOrientation;
    /**
     * The outputBin property
     */
    outputBin?: string;
    /**
     * The pageRanges property
     */
    pageRanges?: IntegerRange[];
    /**
     * The pagesPerSheet property
     */
    pagesPerSheet?: number;
    /**
     * The quality property
     */
    quality?: PrintQuality;
    /**
     * The scaling property
     */
    scaling?: PrintScaling;
}
export function serializePrintJobConfiguration(writer: SerializationWriter, printJobConfiguration: PrintJobConfiguration | undefined = {} as PrintJobConfiguration) : void {
        writer.writeBooleanValue("collate", printJobConfiguration.collate);
        writer.writeEnumValue<PrintColorMode>("colorMode", printJobConfiguration.colorMode);
        writer.writeNumberValue("copies", printJobConfiguration.copies);
        writer.writeNumberValue("dpi", printJobConfiguration.dpi);
        writer.writeEnumValue<PrintDuplexMode>("duplexMode", printJobConfiguration.duplexMode);
        writer.writeEnumValue<PrinterFeedOrientation>("feedOrientation", printJobConfiguration.feedOrientation);
        if(printJobConfiguration.finishings)
        writer.writeEnumValue<PrintFinishing>("finishings", ...printJobConfiguration.finishings);
        writer.writeBooleanValue("fitPdfToPage", printJobConfiguration.fitPdfToPage);
        writer.writeStringValue("inputBin", printJobConfiguration.inputBin);
        writer.writeObjectValue<PrintMargin>("margin", printJobConfiguration.margin, serializePrintMargin);
        writer.writeStringValue("mediaSize", printJobConfiguration.mediaSize);
        writer.writeStringValue("mediaType", printJobConfiguration.mediaType);
        writer.writeEnumValue<PrintMultipageLayout>("multipageLayout", printJobConfiguration.multipageLayout);
        writer.writeStringValue("@odata.type", printJobConfiguration.odataType);
        writer.writeEnumValue<PrintOrientation>("orientation", printJobConfiguration.orientation);
        writer.writeStringValue("outputBin", printJobConfiguration.outputBin);
        writer.writeCollectionOfObjectValues<IntegerRange>("pageRanges", printJobConfiguration.pageRanges, serializeIntegerRange);
        writer.writeNumberValue("pagesPerSheet", printJobConfiguration.pagesPerSheet);
        writer.writeEnumValue<PrintQuality>("quality", printJobConfiguration.quality);
        writer.writeEnumValue<PrintScaling>("scaling", printJobConfiguration.scaling);
        writer.writeAdditionalData(printJobConfiguration.additionalData);
}
// tslint:enable
// eslint-enable
