// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createIdentityProviderFromDiscriminatorValue, serializeIdentityProvider, type IdentityProvider } from './identityProvider';
import { createIdentityProviderBaseFromDiscriminatorValue, serializeIdentityProviderBase, type IdentityProviderBase } from './identityProviderBase';
import { deserializeIntoIdentityUserFlow, serializeIdentityUserFlow, type IdentityUserFlow } from './identityUserFlow';
import { createIdentityUserFlowAttributeAssignmentFromDiscriminatorValue, serializeIdentityUserFlowAttributeAssignment, type IdentityUserFlowAttributeAssignment } from './identityUserFlowAttributeAssignment';
import { createUserFlowApiConnectorConfigurationFromDiscriminatorValue, serializeUserFlowApiConnectorConfiguration, type UserFlowApiConnectorConfiguration } from './userFlowApiConnectorConfiguration';
import { createUserFlowLanguageConfigurationFromDiscriminatorValue, serializeUserFlowLanguageConfiguration, type UserFlowLanguageConfiguration } from './userFlowLanguageConfiguration';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface B2xIdentityUserFlow extends IdentityUserFlow, Parsable {
    /**
     * Configuration for enabling an API connector for use as part of the self-service sign-up user flow. You can only obtain the value of this object using Get userFlowApiConnectorConfiguration.
     */
    apiConnectorConfiguration?: UserFlowApiConnectorConfiguration;
    /**
     * The identity providers included in the user flow.
     */
    identityProviders?: IdentityProvider[];
    /**
     * The languages supported for customization within the user flow. Language customization is enabled by default in self-service sign-up user flow. You can't create custom languages in self-service sign-up user flows.
     */
    languages?: UserFlowLanguageConfiguration[];
    /**
     * The user attribute assignments included in the user flow.
     */
    userAttributeAssignments?: IdentityUserFlowAttributeAssignment[];
    /**
     * The userFlowIdentityProviders property
     */
    userFlowIdentityProviders?: IdentityProviderBase[];
}
export function createB2xIdentityUserFlowFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoB2xIdentityUserFlow;
}
export function deserializeIntoB2xIdentityUserFlow(b2xIdentityUserFlow: B2xIdentityUserFlow | undefined = {} as B2xIdentityUserFlow) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoIdentityUserFlow(b2xIdentityUserFlow),
        "apiConnectorConfiguration": n => { b2xIdentityUserFlow.apiConnectorConfiguration = n.getObjectValue<UserFlowApiConnectorConfiguration>(createUserFlowApiConnectorConfigurationFromDiscriminatorValue); },
        "identityProviders": n => { b2xIdentityUserFlow.identityProviders = n.getCollectionOfObjectValues<IdentityProvider>(createIdentityProviderFromDiscriminatorValue); },
        "languages": n => { b2xIdentityUserFlow.languages = n.getCollectionOfObjectValues<UserFlowLanguageConfiguration>(createUserFlowLanguageConfigurationFromDiscriminatorValue); },
        "userAttributeAssignments": n => { b2xIdentityUserFlow.userAttributeAssignments = n.getCollectionOfObjectValues<IdentityUserFlowAttributeAssignment>(createIdentityUserFlowAttributeAssignmentFromDiscriminatorValue); },
        "userFlowIdentityProviders": n => { b2xIdentityUserFlow.userFlowIdentityProviders = n.getCollectionOfObjectValues<IdentityProviderBase>(createIdentityProviderBaseFromDiscriminatorValue); },
    }
}
export function serializeB2xIdentityUserFlow(writer: SerializationWriter, b2xIdentityUserFlow: B2xIdentityUserFlow | undefined = {} as B2xIdentityUserFlow) : void {
        serializeIdentityUserFlow(writer, b2xIdentityUserFlow)
        writer.writeObjectValue<UserFlowApiConnectorConfiguration>("apiConnectorConfiguration", b2xIdentityUserFlow.apiConnectorConfiguration, );
        writer.writeCollectionOfObjectValues<IdentityProvider>("identityProviders", b2xIdentityUserFlow.identityProviders, );
        writer.writeCollectionOfObjectValues<UserFlowLanguageConfiguration>("languages", b2xIdentityUserFlow.languages, );
        writer.writeCollectionOfObjectValues<IdentityUserFlowAttributeAssignment>("userAttributeAssignments", b2xIdentityUserFlow.userAttributeAssignments, );
        writer.writeCollectionOfObjectValues<IdentityProviderBase>("userFlowIdentityProviders", b2xIdentityUserFlow.userFlowIdentityProviders, );
}
// tslint:enable
// eslint-enable
