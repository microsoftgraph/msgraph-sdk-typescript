// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createStoragePlanInformationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoStoragePlanInformation;
}
export function deserializeIntoStoragePlanInformation(storagePlanInformation: StoragePlanInformation | undefined = {} as StoragePlanInformation) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { storagePlanInformation.odataType = n.getStringValue(); },
        "upgradeAvailable": n => { storagePlanInformation.upgradeAvailable = n.getBooleanValue(); },
    }
}
export function serializeStoragePlanInformation(writer: SerializationWriter, storagePlanInformation: StoragePlanInformation | undefined = {} as StoragePlanInformation) : void {
        writer.writeStringValue("@odata.type", storagePlanInformation.odataType);
        writer.writeBooleanValue("upgradeAvailable", storagePlanInformation.upgradeAvailable);
        writer.writeAdditionalData(storagePlanInformation.additionalData);
}
export interface StoragePlanInformation extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Indicates whether there are higher storage quota plans available. Read-only.
     */
    upgradeAvailable?: boolean;
}
// tslint:enable
// eslint-enable
