// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDirectoryObjectFromDiscriminatorValue, deserializeIntoDirectoryObject, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { createOnPremisesProvisioningErrorFromDiscriminatorValue, serializeOnPremisesProvisioningError, type OnPremisesProvisioningError } from './onPremisesProvisioningError';
import { createPhoneFromDiscriminatorValue, serializePhone, type Phone } from './phone';
import { createPhysicalOfficeAddressFromDiscriminatorValue, serializePhysicalOfficeAddress, type PhysicalOfficeAddress } from './physicalOfficeAddress';
import { createServiceProvisioningErrorFromDiscriminatorValue, serializeServiceProvisioningError, type ServiceProvisioningError } from './serviceProvisioningError';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createOrgContactFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoOrgContact;
}
export function deserializeIntoOrgContact(orgContact: OrgContact | undefined = {} as OrgContact) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDirectoryObject(orgContact),
        "addresses": n => { orgContact.addresses = n.getCollectionOfObjectValues<PhysicalOfficeAddress>(createPhysicalOfficeAddressFromDiscriminatorValue); },
        "companyName": n => { orgContact.companyName = n.getStringValue(); },
        "department": n => { orgContact.department = n.getStringValue(); },
        "directReports": n => { orgContact.directReports = n.getCollectionOfObjectValues<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "displayName": n => { orgContact.displayName = n.getStringValue(); },
        "givenName": n => { orgContact.givenName = n.getStringValue(); },
        "jobTitle": n => { orgContact.jobTitle = n.getStringValue(); },
        "mail": n => { orgContact.mail = n.getStringValue(); },
        "mailNickname": n => { orgContact.mailNickname = n.getStringValue(); },
        "manager": n => { orgContact.manager = n.getObjectValue<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "memberOf": n => { orgContact.memberOf = n.getCollectionOfObjectValues<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "onPremisesLastSyncDateTime": n => { orgContact.onPremisesLastSyncDateTime = n.getDateValue(); },
        "onPremisesProvisioningErrors": n => { orgContact.onPremisesProvisioningErrors = n.getCollectionOfObjectValues<OnPremisesProvisioningError>(createOnPremisesProvisioningErrorFromDiscriminatorValue); },
        "onPremisesSyncEnabled": n => { orgContact.onPremisesSyncEnabled = n.getBooleanValue(); },
        "phones": n => { orgContact.phones = n.getCollectionOfObjectValues<Phone>(createPhoneFromDiscriminatorValue); },
        "proxyAddresses": n => { orgContact.proxyAddresses = n.getCollectionOfPrimitiveValues<string>(); },
        "serviceProvisioningErrors": n => { orgContact.serviceProvisioningErrors = n.getCollectionOfObjectValues<ServiceProvisioningError>(createServiceProvisioningErrorFromDiscriminatorValue); },
        "surname": n => { orgContact.surname = n.getStringValue(); },
        "transitiveMemberOf": n => { orgContact.transitiveMemberOf = n.getCollectionOfObjectValues<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
    }
}
export interface OrgContact extends DirectoryObject, Parsable {
    /**
     * Postal addresses for this organizational contact. For now a contact can only have one physical address.
     */
    addresses?: PhysicalOfficeAddress[];
    /**
     * Name of the company that this organizational contact belongs to.  Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
     */
    companyName?: string;
    /**
     * The name for the department in which the contact works.  Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
     */
    department?: string;
    /**
     * The contact's direct reports. (The users and contacts that have their manager property set to this contact.)  Read-only. Nullable. Supports $expand.
     */
    directReports?: DirectoryObject[];
    /**
     * Display name for this organizational contact. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values), $search, and $orderby.
     */
    displayName?: string;
    /**
     * First name for this organizational contact. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
     */
    givenName?: string;
    /**
     * Job title for this organizational contact. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
     */
    jobTitle?: string;
    /**
     * The SMTP address for the contact, for example, 'jeff@contoso.onmicrosoft.com'. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
     */
    mail?: string;
    /**
     * Email alias (portion of email address pre-pending the @ symbol) for this organizational contact. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
     */
    mailNickname?: string;
    /**
     * The user or contact that is this contact's manager. Read-only. Supports $expand and $filter (eq) by id.
     */
    manager?: DirectoryObject;
    /**
     * Groups that this contact is a member of. Read-only. Nullable. Supports $expand.
     */
    memberOf?: DirectoryObject[];
    /**
     * Date and time when this organizational contact was last synchronized from on-premises AD. This date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ne, not, ge, le, in).
     */
    onPremisesLastSyncDateTime?: Date;
    /**
     * List of any synchronization provisioning errors for this organizational contact. Supports $filter (eq, not for category and propertyCausingError), /$count eq 0, /$count ne 0.
     */
    onPremisesProvisioningErrors?: OnPremisesProvisioningError[];
    /**
     * true if this object is synced from an on-premises directory; false if this object was originally synced from an on-premises directory but is no longer synced and now mastered in Exchange; null if this object has never been synced from an on-premises directory (default).   Supports $filter (eq, ne, not, in, and eq for null values).
     */
    onPremisesSyncEnabled?: boolean;
    /**
     * List of phones for this organizational contact. Phone types can be mobile, business, and businessFax. Only one of each type can ever be present in the collection.
     */
    phones?: Phone[];
    /**
     * For example: 'SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com'. The any operator is required for filter expressions on multi-valued properties. Supports $filter (eq, not, ge, le, startsWith, /$count eq 0, /$count ne 0).
     */
    proxyAddresses?: string[];
    /**
     * The serviceProvisioningErrors property
     */
    serviceProvisioningErrors?: ServiceProvisioningError[];
    /**
     * Last name for this organizational contact. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq for null values).
     */
    surname?: string;
    /**
     * Groups that this contact is a member of, including groups that the contact is nested under. Read-only. Nullable.
     */
    transitiveMemberOf?: DirectoryObject[];
}
export function serializeOrgContact(writer: SerializationWriter, orgContact: OrgContact | undefined = {} as OrgContact) : void {
        serializeDirectoryObject(writer, orgContact)
        writer.writeCollectionOfObjectValues<PhysicalOfficeAddress>("addresses", orgContact.addresses, serializePhysicalOfficeAddress);
        writer.writeStringValue("companyName", orgContact.companyName);
        writer.writeStringValue("department", orgContact.department);
        writer.writeCollectionOfObjectValues<DirectoryObject>("directReports", orgContact.directReports, serializeDirectoryObject);
        writer.writeStringValue("displayName", orgContact.displayName);
        writer.writeStringValue("givenName", orgContact.givenName);
        writer.writeStringValue("jobTitle", orgContact.jobTitle);
        writer.writeStringValue("mail", orgContact.mail);
        writer.writeStringValue("mailNickname", orgContact.mailNickname);
        writer.writeObjectValue<DirectoryObject>("manager", orgContact.manager, serializeDirectoryObject);
        writer.writeCollectionOfObjectValues<DirectoryObject>("memberOf", orgContact.memberOf, serializeDirectoryObject);
        writer.writeDateValue("onPremisesLastSyncDateTime", orgContact.onPremisesLastSyncDateTime);
        writer.writeCollectionOfObjectValues<OnPremisesProvisioningError>("onPremisesProvisioningErrors", orgContact.onPremisesProvisioningErrors, serializeOnPremisesProvisioningError);
        writer.writeBooleanValue("onPremisesSyncEnabled", orgContact.onPremisesSyncEnabled);
        writer.writeCollectionOfObjectValues<Phone>("phones", orgContact.phones, serializePhone);
        writer.writeCollectionOfPrimitiveValues<string>("proxyAddresses", orgContact.proxyAddresses);
        writer.writeCollectionOfObjectValues<ServiceProvisioningError>("serviceProvisioningErrors", orgContact.serviceProvisioningErrors, serializeServiceProvisioningError);
        writer.writeStringValue("surname", orgContact.surname);
        writer.writeCollectionOfObjectValues<DirectoryObject>("transitiveMemberOf", orgContact.transitiveMemberOf, serializeDirectoryObject);
}
// tslint:enable
// eslint-enable
