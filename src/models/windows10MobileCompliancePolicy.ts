// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoDeviceCompliancePolicy, serializeDeviceCompliancePolicy, type DeviceCompliancePolicy } from './deviceCompliancePolicy';
import { RequiredPasswordType } from './requiredPasswordType';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindows10MobileCompliancePolicyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindows10MobileCompliancePolicy;
}
export function deserializeIntoWindows10MobileCompliancePolicy(windows10MobileCompliancePolicy: Windows10MobileCompliancePolicy | undefined = {} as Windows10MobileCompliancePolicy) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoDeviceCompliancePolicy(windows10MobileCompliancePolicy),
        "bitLockerEnabled": n => { windows10MobileCompliancePolicy.bitLockerEnabled = n.getBooleanValue(); },
        "codeIntegrityEnabled": n => { windows10MobileCompliancePolicy.codeIntegrityEnabled = n.getBooleanValue(); },
        "earlyLaunchAntiMalwareDriverEnabled": n => { windows10MobileCompliancePolicy.earlyLaunchAntiMalwareDriverEnabled = n.getBooleanValue(); },
        "osMaximumVersion": n => { windows10MobileCompliancePolicy.osMaximumVersion = n.getStringValue(); },
        "osMinimumVersion": n => { windows10MobileCompliancePolicy.osMinimumVersion = n.getStringValue(); },
        "passwordBlockSimple": n => { windows10MobileCompliancePolicy.passwordBlockSimple = n.getBooleanValue(); },
        "passwordExpirationDays": n => { windows10MobileCompliancePolicy.passwordExpirationDays = n.getNumberValue(); },
        "passwordMinimumCharacterSetCount": n => { windows10MobileCompliancePolicy.passwordMinimumCharacterSetCount = n.getNumberValue(); },
        "passwordMinimumLength": n => { windows10MobileCompliancePolicy.passwordMinimumLength = n.getNumberValue(); },
        "passwordMinutesOfInactivityBeforeLock": n => { windows10MobileCompliancePolicy.passwordMinutesOfInactivityBeforeLock = n.getNumberValue(); },
        "passwordPreviousPasswordBlockCount": n => { windows10MobileCompliancePolicy.passwordPreviousPasswordBlockCount = n.getNumberValue(); },
        "passwordRequired": n => { windows10MobileCompliancePolicy.passwordRequired = n.getBooleanValue(); },
        "passwordRequiredType": n => { windows10MobileCompliancePolicy.passwordRequiredType = n.getEnumValue<RequiredPasswordType>(RequiredPasswordType); },
        "passwordRequireToUnlockFromIdle": n => { windows10MobileCompliancePolicy.passwordRequireToUnlockFromIdle = n.getBooleanValue(); },
        "secureBootEnabled": n => { windows10MobileCompliancePolicy.secureBootEnabled = n.getBooleanValue(); },
        "storageRequireEncryption": n => { windows10MobileCompliancePolicy.storageRequireEncryption = n.getBooleanValue(); },
    }
}
export function serializeWindows10MobileCompliancePolicy(writer: SerializationWriter, windows10MobileCompliancePolicy: Windows10MobileCompliancePolicy | undefined = {} as Windows10MobileCompliancePolicy) : void {
        serializeDeviceCompliancePolicy(writer, windows10MobileCompliancePolicy)
        writer.writeBooleanValue("bitLockerEnabled", windows10MobileCompliancePolicy.bitLockerEnabled);
        writer.writeBooleanValue("codeIntegrityEnabled", windows10MobileCompliancePolicy.codeIntegrityEnabled);
        writer.writeBooleanValue("earlyLaunchAntiMalwareDriverEnabled", windows10MobileCompliancePolicy.earlyLaunchAntiMalwareDriverEnabled);
        writer.writeStringValue("osMaximumVersion", windows10MobileCompliancePolicy.osMaximumVersion);
        writer.writeStringValue("osMinimumVersion", windows10MobileCompliancePolicy.osMinimumVersion);
        writer.writeBooleanValue("passwordBlockSimple", windows10MobileCompliancePolicy.passwordBlockSimple);
        writer.writeNumberValue("passwordExpirationDays", windows10MobileCompliancePolicy.passwordExpirationDays);
        writer.writeNumberValue("passwordMinimumCharacterSetCount", windows10MobileCompliancePolicy.passwordMinimumCharacterSetCount);
        writer.writeNumberValue("passwordMinimumLength", windows10MobileCompliancePolicy.passwordMinimumLength);
        writer.writeNumberValue("passwordMinutesOfInactivityBeforeLock", windows10MobileCompliancePolicy.passwordMinutesOfInactivityBeforeLock);
        writer.writeNumberValue("passwordPreviousPasswordBlockCount", windows10MobileCompliancePolicy.passwordPreviousPasswordBlockCount);
        writer.writeBooleanValue("passwordRequired", windows10MobileCompliancePolicy.passwordRequired);
        writer.writeEnumValue<RequiredPasswordType>("passwordRequiredType", windows10MobileCompliancePolicy.passwordRequiredType);
        writer.writeBooleanValue("passwordRequireToUnlockFromIdle", windows10MobileCompliancePolicy.passwordRequireToUnlockFromIdle);
        writer.writeBooleanValue("secureBootEnabled", windows10MobileCompliancePolicy.secureBootEnabled);
        writer.writeBooleanValue("storageRequireEncryption", windows10MobileCompliancePolicy.storageRequireEncryption);
}
export interface Windows10MobileCompliancePolicy extends DeviceCompliancePolicy, Parsable {
    /**
     * Require devices to be reported healthy by Windows Device Health Attestation - bit locker is enabled
     */
    bitLockerEnabled?: boolean;
    /**
     * Require devices to be reported as healthy by Windows Device Health Attestation.
     */
    codeIntegrityEnabled?: boolean;
    /**
     * Require devices to be reported as healthy by Windows Device Health Attestation - early launch antimalware driver is enabled.
     */
    earlyLaunchAntiMalwareDriverEnabled?: boolean;
    /**
     * Maximum Windows Phone version.
     */
    osMaximumVersion?: string;
    /**
     * Minimum Windows Phone version.
     */
    osMinimumVersion?: string;
    /**
     * Whether or not to block syncing the calendar.
     */
    passwordBlockSimple?: boolean;
    /**
     * Number of days before password expiration. Valid values 1 to 255
     */
    passwordExpirationDays?: number;
    /**
     * The number of character sets required in the password.
     */
    passwordMinimumCharacterSetCount?: number;
    /**
     * Minimum password length. Valid values 4 to 16
     */
    passwordMinimumLength?: number;
    /**
     * Minutes of inactivity before a password is required.
     */
    passwordMinutesOfInactivityBeforeLock?: number;
    /**
     * The number of previous passwords to prevent re-use of.
     */
    passwordPreviousPasswordBlockCount?: number;
    /**
     * Require a password to unlock Windows Phone device.
     */
    passwordRequired?: boolean;
    /**
     * Possible values of required passwords.
     */
    passwordRequiredType?: RequiredPasswordType;
    /**
     * Require a password to unlock an idle device.
     */
    passwordRequireToUnlockFromIdle?: boolean;
    /**
     * Require devices to be reported as healthy by Windows Device Health Attestation - secure boot is enabled.
     */
    secureBootEnabled?: boolean;
    /**
     * Require encryption on windows devices.
     */
    storageRequireEncryption?: boolean;
}
// tslint:enable
// eslint-enable
