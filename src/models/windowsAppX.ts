// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoMobileLobApp, serializeMobileLobApp, type MobileLobApp } from './mobileLobApp';
import { WindowsArchitecture } from './windowsArchitecture';
import { createWindowsMinimumOperatingSystemFromDiscriminatorValue, serializeWindowsMinimumOperatingSystem, type WindowsMinimumOperatingSystem } from './windowsMinimumOperatingSystem';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWindowsAppXFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWindowsAppX;
}
export function deserializeIntoWindowsAppX(windowsAppX: WindowsAppX | undefined = {} as WindowsAppX) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoMobileLobApp(windowsAppX),
        "applicableArchitectures": n => { windowsAppX.applicableArchitectures = n.getCollectionOfEnumValues<WindowsArchitecture>(WindowsArchitecture); },
        "identityName": n => { windowsAppX.identityName = n.getStringValue(); },
        "identityPublisherHash": n => { windowsAppX.identityPublisherHash = n.getStringValue(); },
        "identityResourceIdentifier": n => { windowsAppX.identityResourceIdentifier = n.getStringValue(); },
        "identityVersion": n => { windowsAppX.identityVersion = n.getStringValue(); },
        "isBundle": n => { windowsAppX.isBundle = n.getBooleanValue(); },
        "minimumSupportedOperatingSystem": n => { windowsAppX.minimumSupportedOperatingSystem = n.getObjectValue<WindowsMinimumOperatingSystem>(createWindowsMinimumOperatingSystemFromDiscriminatorValue); },
    }
}
export function serializeWindowsAppX(writer: SerializationWriter, windowsAppX: WindowsAppX | undefined = {} as WindowsAppX) : void {
    serializeMobileLobApp(writer, windowsAppX)
    writer.writeEnumValue<WindowsArchitecture[]>("applicableArchitectures", windowsAppX.applicableArchitectures);
    writer.writeStringValue("identityName", windowsAppX.identityName);
    writer.writeStringValue("identityPublisherHash", windowsAppX.identityPublisherHash);
    writer.writeStringValue("identityResourceIdentifier", windowsAppX.identityResourceIdentifier);
    writer.writeStringValue("identityVersion", windowsAppX.identityVersion);
    writer.writeBooleanValue("isBundle", windowsAppX.isBundle);
    writer.writeObjectValue<WindowsMinimumOperatingSystem>("minimumSupportedOperatingSystem", windowsAppX.minimumSupportedOperatingSystem, serializeWindowsMinimumOperatingSystem);
}
export interface WindowsAppX extends MobileLobApp, Parsable {
    /**
     * Contains properties for Windows architecture.
     */
    applicableArchitectures?: WindowsArchitecture[];
    /**
     * The identity name of the uploaded app package. For example: 'Contoso.DemoApp'.
     */
    identityName?: string;
    /**
     * The identity publisher hash of the uploaded app package. This is the hash of the publisher from the manifest. For example: 'AB82CD0XYZ'.
     */
    identityPublisherHash?: string;
    /**
     * The identity resource identifier of the uploaded app package. For example: 'TestResourceId'.
     */
    identityResourceIdentifier?: string;
    /**
     * The identity version of the uploaded app package. For example: '1.0.0.0'.
     */
    identityVersion?: string;
    /**
     * When TRUE, indicates that the app is a bundle. When FALSE, indicates that the app is not a bundle. By default, property is set to FALSE.
     */
    isBundle?: boolean;
    /**
     * The minimum operating system required for a Windows mobile app.
     */
    minimumSupportedOperatingSystem?: WindowsMinimumOperatingSystem;
}
// tslint:enable
// eslint-enable
