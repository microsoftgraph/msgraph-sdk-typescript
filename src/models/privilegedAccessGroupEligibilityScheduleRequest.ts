// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createDirectoryObjectFromDiscriminatorValue, serializeDirectoryObject, type DirectoryObject } from './directoryObject';
import { createGroupFromDiscriminatorValue, serializeGroup, type Group } from './group';
import { createPrivilegedAccessGroupEligibilityScheduleFromDiscriminatorValue, serializePrivilegedAccessGroupEligibilitySchedule, type PrivilegedAccessGroupEligibilitySchedule } from './privilegedAccessGroupEligibilitySchedule';
import { PrivilegedAccessGroupRelationships } from './privilegedAccessGroupRelationships';
import { deserializeIntoPrivilegedAccessScheduleRequest, serializePrivilegedAccessScheduleRequest, type PrivilegedAccessScheduleRequest } from './privilegedAccessScheduleRequest';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPrivilegedAccessGroupEligibilityScheduleRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPrivilegedAccessGroupEligibilityScheduleRequest;
}
export function deserializeIntoPrivilegedAccessGroupEligibilityScheduleRequest(privilegedAccessGroupEligibilityScheduleRequest: PrivilegedAccessGroupEligibilityScheduleRequest | undefined = {} as PrivilegedAccessGroupEligibilityScheduleRequest) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoPrivilegedAccessScheduleRequest(privilegedAccessGroupEligibilityScheduleRequest),
        "accessId": n => { privilegedAccessGroupEligibilityScheduleRequest.accessId = n.getEnumValue<PrivilegedAccessGroupRelationships>(PrivilegedAccessGroupRelationships); },
        "group": n => { privilegedAccessGroupEligibilityScheduleRequest.group = n.getObjectValue<Group>(createGroupFromDiscriminatorValue); },
        "groupId": n => { privilegedAccessGroupEligibilityScheduleRequest.groupId = n.getStringValue(); },
        "principal": n => { privilegedAccessGroupEligibilityScheduleRequest.principal = n.getObjectValue<DirectoryObject>(createDirectoryObjectFromDiscriminatorValue); },
        "principalId": n => { privilegedAccessGroupEligibilityScheduleRequest.principalId = n.getStringValue(); },
        "targetSchedule": n => { privilegedAccessGroupEligibilityScheduleRequest.targetSchedule = n.getObjectValue<PrivilegedAccessGroupEligibilitySchedule>(createPrivilegedAccessGroupEligibilityScheduleFromDiscriminatorValue); },
        "targetScheduleId": n => { privilegedAccessGroupEligibilityScheduleRequest.targetScheduleId = n.getStringValue(); },
    }
}
export interface PrivilegedAccessGroupEligibilityScheduleRequest extends Parsable, PrivilegedAccessScheduleRequest {
    /**
     * The identifier of membership or ownership eligibility relationship to the group. Required. The possible values are: owner, member, unknownFutureValue.
     */
    accessId?: PrivilegedAccessGroupRelationships;
    /**
     * References the group that is the scope of the membership or ownership eligibility request through PIM for groups. Supports $expand.
     */
    group?: Group;
    /**
     * The identifier of the group representing the scope of the membership and ownership eligibility through PIM for groups. Required.
     */
    groupId?: string;
    /**
     * References the principal that's in the scope of the membership or ownership eligibility request through the group that's governed by PIM. Supports $expand.
     */
    principal?: DirectoryObject;
    /**
     * The identifier of the principal whose membership or ownership eligibility to the group is managed through PIM for groups. Required.
     */
    principalId?: string;
    /**
     * Schedule created by this request.
     */
    targetSchedule?: PrivilegedAccessGroupEligibilitySchedule;
    /**
     * The identifier of the schedule that's created from the eligibility request. Optional.
     */
    targetScheduleId?: string;
}
export function serializePrivilegedAccessGroupEligibilityScheduleRequest(writer: SerializationWriter, privilegedAccessGroupEligibilityScheduleRequest: PrivilegedAccessGroupEligibilityScheduleRequest | undefined = {} as PrivilegedAccessGroupEligibilityScheduleRequest) : void {
        serializePrivilegedAccessScheduleRequest(writer, privilegedAccessGroupEligibilityScheduleRequest)
        writer.writeEnumValue<PrivilegedAccessGroupRelationships>("accessId", privilegedAccessGroupEligibilityScheduleRequest.accessId);
        writer.writeObjectValue<Group>("group", privilegedAccessGroupEligibilityScheduleRequest.group, );
        writer.writeStringValue("groupId", privilegedAccessGroupEligibilityScheduleRequest.groupId);
        writer.writeObjectValue<DirectoryObject>("principal", privilegedAccessGroupEligibilityScheduleRequest.principal, );
        writer.writeStringValue("principalId", privilegedAccessGroupEligibilityScheduleRequest.principalId);
        writer.writeObjectValue<PrivilegedAccessGroupEligibilitySchedule>("targetSchedule", privilegedAccessGroupEligibilityScheduleRequest.targetSchedule, );
        writer.writeStringValue("targetScheduleId", privilegedAccessGroupEligibilityScheduleRequest.targetScheduleId);
}
// tslint:enable
// eslint-enable
