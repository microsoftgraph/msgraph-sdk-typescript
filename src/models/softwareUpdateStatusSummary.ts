// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSoftwareUpdateStatusSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSoftwareUpdateStatusSummary;
}
export function deserializeIntoSoftwareUpdateStatusSummary(softwareUpdateStatusSummary: SoftwareUpdateStatusSummary | undefined = {} as SoftwareUpdateStatusSummary) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(softwareUpdateStatusSummary),
        "compliantDeviceCount": n => { softwareUpdateStatusSummary.compliantDeviceCount = n.getNumberValue(); },
        "compliantUserCount": n => { softwareUpdateStatusSummary.compliantUserCount = n.getNumberValue(); },
        "conflictDeviceCount": n => { softwareUpdateStatusSummary.conflictDeviceCount = n.getNumberValue(); },
        "conflictUserCount": n => { softwareUpdateStatusSummary.conflictUserCount = n.getNumberValue(); },
        "displayName": n => { softwareUpdateStatusSummary.displayName = n.getStringValue(); },
        "errorDeviceCount": n => { softwareUpdateStatusSummary.errorDeviceCount = n.getNumberValue(); },
        "errorUserCount": n => { softwareUpdateStatusSummary.errorUserCount = n.getNumberValue(); },
        "nonCompliantDeviceCount": n => { softwareUpdateStatusSummary.nonCompliantDeviceCount = n.getNumberValue(); },
        "nonCompliantUserCount": n => { softwareUpdateStatusSummary.nonCompliantUserCount = n.getNumberValue(); },
        "notApplicableDeviceCount": n => { softwareUpdateStatusSummary.notApplicableDeviceCount = n.getNumberValue(); },
        "notApplicableUserCount": n => { softwareUpdateStatusSummary.notApplicableUserCount = n.getNumberValue(); },
        "remediatedDeviceCount": n => { softwareUpdateStatusSummary.remediatedDeviceCount = n.getNumberValue(); },
        "remediatedUserCount": n => { softwareUpdateStatusSummary.remediatedUserCount = n.getNumberValue(); },
        "unknownDeviceCount": n => { softwareUpdateStatusSummary.unknownDeviceCount = n.getNumberValue(); },
        "unknownUserCount": n => { softwareUpdateStatusSummary.unknownUserCount = n.getNumberValue(); },
    }
}
export function serializeSoftwareUpdateStatusSummary(writer: SerializationWriter, softwareUpdateStatusSummary: SoftwareUpdateStatusSummary | undefined = {} as SoftwareUpdateStatusSummary) : void {
        serializeEntity(writer, softwareUpdateStatusSummary)
        writer.writeNumberValue("compliantDeviceCount", softwareUpdateStatusSummary.compliantDeviceCount);
        writer.writeNumberValue("compliantUserCount", softwareUpdateStatusSummary.compliantUserCount);
        writer.writeNumberValue("conflictDeviceCount", softwareUpdateStatusSummary.conflictDeviceCount);
        writer.writeNumberValue("conflictUserCount", softwareUpdateStatusSummary.conflictUserCount);
        writer.writeStringValue("displayName", softwareUpdateStatusSummary.displayName);
        writer.writeNumberValue("errorDeviceCount", softwareUpdateStatusSummary.errorDeviceCount);
        writer.writeNumberValue("errorUserCount", softwareUpdateStatusSummary.errorUserCount);
        writer.writeNumberValue("nonCompliantDeviceCount", softwareUpdateStatusSummary.nonCompliantDeviceCount);
        writer.writeNumberValue("nonCompliantUserCount", softwareUpdateStatusSummary.nonCompliantUserCount);
        writer.writeNumberValue("notApplicableDeviceCount", softwareUpdateStatusSummary.notApplicableDeviceCount);
        writer.writeNumberValue("notApplicableUserCount", softwareUpdateStatusSummary.notApplicableUserCount);
        writer.writeNumberValue("remediatedDeviceCount", softwareUpdateStatusSummary.remediatedDeviceCount);
        writer.writeNumberValue("remediatedUserCount", softwareUpdateStatusSummary.remediatedUserCount);
        writer.writeNumberValue("unknownDeviceCount", softwareUpdateStatusSummary.unknownDeviceCount);
        writer.writeNumberValue("unknownUserCount", softwareUpdateStatusSummary.unknownUserCount);
}
export interface SoftwareUpdateStatusSummary extends Entity, Parsable {
    /**
     * Number of compliant devices.
     */
    compliantDeviceCount?: number;
    /**
     * Number of compliant users.
     */
    compliantUserCount?: number;
    /**
     * Number of conflict devices.
     */
    conflictDeviceCount?: number;
    /**
     * Number of conflict users.
     */
    conflictUserCount?: number;
    /**
     * The name of the policy.
     */
    displayName?: string;
    /**
     * Number of devices had error.
     */
    errorDeviceCount?: number;
    /**
     * Number of users had error.
     */
    errorUserCount?: number;
    /**
     * Number of non compliant devices.
     */
    nonCompliantDeviceCount?: number;
    /**
     * Number of non compliant users.
     */
    nonCompliantUserCount?: number;
    /**
     * Number of not applicable devices.
     */
    notApplicableDeviceCount?: number;
    /**
     * Number of not applicable users.
     */
    notApplicableUserCount?: number;
    /**
     * Number of remediated devices.
     */
    remediatedDeviceCount?: number;
    /**
     * Number of remediated users.
     */
    remediatedUserCount?: number;
    /**
     * Number of unknown devices.
     */
    unknownDeviceCount?: number;
    /**
     * Number of unknown users.
     */
    unknownUserCount?: number;
}
// tslint:enable
// eslint-enable
