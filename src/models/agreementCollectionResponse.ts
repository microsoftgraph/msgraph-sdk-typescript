// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAgreementFromDiscriminatorValue, serializeAgreement, type Agreement } from './agreement';
import { deserializeIntoBaseCollectionPaginationCountResponse, serializeBaseCollectionPaginationCountResponse, type BaseCollectionPaginationCountResponse } from './baseCollectionPaginationCountResponse';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AgreementCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Agreement[];
}
export function createAgreementCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAgreementCollectionResponse;
}
export function deserializeIntoAgreementCollectionResponse(agreementCollectionResponse: AgreementCollectionResponse | undefined = {} as AgreementCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(agreementCollectionResponse),
        "value": n => { agreementCollectionResponse.value = n.getCollectionOfObjectValues<Agreement>(createAgreementFromDiscriminatorValue); },
    }
}
export function serializeAgreementCollectionResponse(writer: SerializationWriter, agreementCollectionResponse: AgreementCollectionResponse | undefined = {} as AgreementCollectionResponse) : void {
        serializeBaseCollectionPaginationCountResponse(writer, agreementCollectionResponse)
        writer.writeCollectionOfObjectValues<Agreement>("value", agreementCollectionResponse.value, serializeAgreement);
}
// tslint:enable
// eslint-enable
