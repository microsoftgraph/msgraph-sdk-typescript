// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMimeContentFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMimeContent;
}
export function deserializeIntoMimeContent(mimeContent: MimeContent | undefined = {} as MimeContent) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { mimeContent.odataType = n.getStringValue(); },
        "type": n => { mimeContent.type = n.getStringValue(); },
        "value": n => { mimeContent.value = n.getStringValue(); },
    }
}
export interface MimeContent extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Indicates the content mime type.
     */
    type?: string;
    /**
     * The byte array that contains the actual content.
     */
    value?: string;
}
export function serializeMimeContent(writer: SerializationWriter, mimeContent: MimeContent | undefined = {} as MimeContent) : void {
        writer.writeStringValue("@odata.type", mimeContent.odataType);
        writer.writeStringValue("type", mimeContent.type);
        writer.writeStringValue("value", mimeContent.value);
        writer.writeAdditionalData(mimeContent.additionalData);
}
// tslint:enable
// eslint-enable
