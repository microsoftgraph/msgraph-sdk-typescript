// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSettingStateDeviceSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSettingStateDeviceSummary;
}
export function deserializeIntoSettingStateDeviceSummary(settingStateDeviceSummary: SettingStateDeviceSummary | undefined = {} as SettingStateDeviceSummary) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(settingStateDeviceSummary),
        "compliantDeviceCount": n => { settingStateDeviceSummary.compliantDeviceCount = n.getNumberValue(); },
        "conflictDeviceCount": n => { settingStateDeviceSummary.conflictDeviceCount = n.getNumberValue(); },
        "errorDeviceCount": n => { settingStateDeviceSummary.errorDeviceCount = n.getNumberValue(); },
        "instancePath": n => { settingStateDeviceSummary.instancePath = n.getStringValue(); },
        "nonCompliantDeviceCount": n => { settingStateDeviceSummary.nonCompliantDeviceCount = n.getNumberValue(); },
        "notApplicableDeviceCount": n => { settingStateDeviceSummary.notApplicableDeviceCount = n.getNumberValue(); },
        "remediatedDeviceCount": n => { settingStateDeviceSummary.remediatedDeviceCount = n.getNumberValue(); },
        "settingName": n => { settingStateDeviceSummary.settingName = n.getStringValue(); },
        "unknownDeviceCount": n => { settingStateDeviceSummary.unknownDeviceCount = n.getNumberValue(); },
    }
}
export function serializeSettingStateDeviceSummary(writer: SerializationWriter, settingStateDeviceSummary: SettingStateDeviceSummary | undefined = {} as SettingStateDeviceSummary) : void {
    serializeEntity(writer, settingStateDeviceSummary)
    writer.writeNumberValue("compliantDeviceCount", settingStateDeviceSummary.compliantDeviceCount);
    writer.writeNumberValue("conflictDeviceCount", settingStateDeviceSummary.conflictDeviceCount);
    writer.writeNumberValue("errorDeviceCount", settingStateDeviceSummary.errorDeviceCount);
    writer.writeStringValue("instancePath", settingStateDeviceSummary.instancePath);
    writer.writeNumberValue("nonCompliantDeviceCount", settingStateDeviceSummary.nonCompliantDeviceCount);
    writer.writeNumberValue("notApplicableDeviceCount", settingStateDeviceSummary.notApplicableDeviceCount);
    writer.writeNumberValue("remediatedDeviceCount", settingStateDeviceSummary.remediatedDeviceCount);
    writer.writeStringValue("settingName", settingStateDeviceSummary.settingName);
    writer.writeNumberValue("unknownDeviceCount", settingStateDeviceSummary.unknownDeviceCount);
}
export interface SettingStateDeviceSummary extends Entity, Parsable {
    /**
     * Device Compliant count for the setting
     */
    compliantDeviceCount?: number;
    /**
     * Device conflict error count for the setting
     */
    conflictDeviceCount?: number;
    /**
     * Device error count for the setting
     */
    errorDeviceCount?: number;
    /**
     * Name of the InstancePath for the setting
     */
    instancePath?: string;
    /**
     * Device NonCompliant count for the setting
     */
    nonCompliantDeviceCount?: number;
    /**
     * Device Not Applicable count for the setting
     */
    notApplicableDeviceCount?: number;
    /**
     * Device Compliant count for the setting
     */
    remediatedDeviceCount?: number;
    /**
     * Name of the setting
     */
    settingName?: string;
    /**
     * Device Unkown count for the setting
     */
    unknownDeviceCount?: number;
}
// tslint:enable
// eslint-enable
