// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type ManagedAndroidLobApp, type ManagedIOSLobApp } from './index';
import { deserializeIntoManagedAndroidLobApp } from './managedAndroidLobApp';
import { deserializeIntoManagedApp, serializeManagedApp, type ManagedApp } from './managedApp';
import { deserializeIntoManagedIOSLobApp } from './managedIOSLobApp';
import { createMobileAppContentFromDiscriminatorValue, serializeMobileAppContent, type MobileAppContent } from './mobileAppContent';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createManagedMobileLobAppFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.managedAndroidLobApp":
                    return deserializeIntoManagedAndroidLobApp;
                case "#microsoft.graph.managedIOSLobApp":
                    return deserializeIntoManagedIOSLobApp;
            }
        }
    }
    return deserializeIntoManagedMobileLobApp;
}
export function deserializeIntoManagedMobileLobApp(managedMobileLobApp: ManagedMobileLobApp | undefined = {} as ManagedMobileLobApp) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoManagedApp(managedMobileLobApp),
        "committedContentVersion": n => { managedMobileLobApp.committedContentVersion = n.getStringValue(); },
        "contentVersions": n => { managedMobileLobApp.contentVersions = n.getCollectionOfObjectValues<MobileAppContent>(createMobileAppContentFromDiscriminatorValue); },
        "fileName": n => { managedMobileLobApp.fileName = n.getStringValue(); },
        "size": n => { managedMobileLobApp.size = n.getNumberValue(); },
    }
}
export interface ManagedMobileLobApp extends ManagedApp, Parsable {
    /**
     * The internal committed content version.
     */
    committedContentVersion?: string;
    /**
     * The list of content versions for this app.
     */
    contentVersions?: MobileAppContent[];
    /**
     * The name of the main Lob application file.
     */
    fileName?: string;
    /**
     * The total size, including all uploaded files.
     */
    size?: number;
}
export function serializeManagedMobileLobApp(writer: SerializationWriter, managedMobileLobApp: ManagedMobileLobApp | undefined = {} as ManagedMobileLobApp) : void {
    serializeManagedApp(writer, managedMobileLobApp)
    writer.writeStringValue("committedContentVersion", managedMobileLobApp.committedContentVersion);
    writer.writeCollectionOfObjectValues<MobileAppContent>("contentVersions", managedMobileLobApp.contentVersions, serializeMobileAppContent);
    writer.writeStringValue("fileName", managedMobileLobApp.fileName);
    writer.writeNumberValue("size", managedMobileLobApp.size);
}
// tslint:enable
// eslint-enable
