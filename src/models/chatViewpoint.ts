// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ChatViewpoint extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Indicates whether the chat is hidden for the current user.
     */
    isHidden?: boolean;
    /**
     * Represents the dateTime up until which the current user has read chatMessages in a specific chat.
     */
    lastMessageReadDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createChatViewpointFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoChatViewpoint;
}
export function deserializeIntoChatViewpoint(chatViewpoint: ChatViewpoint | undefined = {} as ChatViewpoint) : Record<string, (node: ParseNode) => void> {
    return {
        "isHidden": n => { chatViewpoint.isHidden = n.getBooleanValue(); },
        "lastMessageReadDateTime": n => { chatViewpoint.lastMessageReadDateTime = n.getDateValue(); },
        "@odata.type": n => { chatViewpoint.odataType = n.getStringValue(); },
    }
}
export function serializeChatViewpoint(writer: SerializationWriter, chatViewpoint: ChatViewpoint | undefined = {} as ChatViewpoint) : void {
        writer.writeBooleanValue("isHidden", chatViewpoint.isHidden);
        writer.writeDateValue("lastMessageReadDateTime", chatViewpoint.lastMessageReadDateTime);
        writer.writeStringValue("@odata.type", chatViewpoint.odataType);
        writer.writeAdditionalData(chatViewpoint.additionalData);
}
// tslint:enable
// eslint-enable
