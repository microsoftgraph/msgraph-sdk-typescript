// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAlbumFromDiscriminatorValue, serializeAlbum, type Album } from './album';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface Bundle extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * If the bundle is an [album][], then the album property is included
     */
    album?: Album;
    /**
     * Number of children contained immediately within this container.
     */
    childCount?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createBundleFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoBundle;
}
export function deserializeIntoBundle(bundle: Bundle | undefined = {} as Bundle) : Record<string, (node: ParseNode) => void> {
    return {
        "album": n => { bundle.album = n.getObjectValue<Album>(createAlbumFromDiscriminatorValue); },
        "childCount": n => { bundle.childCount = n.getNumberValue(); },
        "@odata.type": n => { bundle.odataType = n.getStringValue(); },
    }
}
export function serializeBundle(writer: SerializationWriter, bundle: Bundle | undefined = {} as Bundle) : void {
    writer.writeObjectValue<Album>("album", bundle.album, serializeAlbum);
    writer.writeNumberValue("childCount", bundle.childCount);
    writer.writeStringValue("@odata.type", bundle.odataType);
    writer.writeAdditionalData(bundle.additionalData);
}
// tslint:enable
// eslint-enable
