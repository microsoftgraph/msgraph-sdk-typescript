// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AttributeMappingSourceType } from './attributeMappingSourceType';
import { createStringKeyAttributeMappingSourceValuePairFromDiscriminatorValue, serializeStringKeyAttributeMappingSourceValuePair, type StringKeyAttributeMappingSourceValuePair } from './stringKeyAttributeMappingSourceValuePair';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttributeMappingSource extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Equivalent expression representation of this attributeMappingSource object.
     */
    expression?: string;
    /**
     * Name parameter of the mapping source. Depending on the type property value, this can be the name of the function, the name of the source attribute, or a constant value to be used.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * If this object represents a function, lists function parameters. Parameters consist of attributeMappingSource objects themselves, allowing for complex expressions. If type isn't Function, this property is null/empty array.
     */
    parameters?: StringKeyAttributeMappingSourceValuePair[];
    /**
     * The type property
     */
    type?: AttributeMappingSourceType;
}
export function createAttributeMappingSourceFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttributeMappingSource;
}
export function deserializeIntoAttributeMappingSource(attributeMappingSource: AttributeMappingSource | undefined = {} as AttributeMappingSource) : Record<string, (node: ParseNode) => void> {
    return {
        "expression": n => { attributeMappingSource.expression = n.getStringValue(); },
        "name": n => { attributeMappingSource.name = n.getStringValue(); },
        "@odata.type": n => { attributeMappingSource.odataType = n.getStringValue(); },
        "parameters": n => { attributeMappingSource.parameters = n.getCollectionOfObjectValues<StringKeyAttributeMappingSourceValuePair>(createStringKeyAttributeMappingSourceValuePairFromDiscriminatorValue); },
        "type": n => { attributeMappingSource.type = n.getEnumValue<AttributeMappingSourceType>(AttributeMappingSourceType); },
    }
}
export function serializeAttributeMappingSource(writer: SerializationWriter, attributeMappingSource: AttributeMappingSource | undefined = {} as AttributeMappingSource) : void {
    writer.writeStringValue("expression", attributeMappingSource.expression);
    writer.writeStringValue("name", attributeMappingSource.name);
    writer.writeStringValue("@odata.type", attributeMappingSource.odataType);
    writer.writeCollectionOfObjectValues<StringKeyAttributeMappingSourceValuePair>("parameters", attributeMappingSource.parameters, serializeStringKeyAttributeMappingSourceValuePair);
    writer.writeEnumValue<AttributeMappingSourceType>("type", attributeMappingSource.type);
    writer.writeAdditionalData(attributeMappingSource.additionalData);
}
// tslint:enable
// eslint-enable
