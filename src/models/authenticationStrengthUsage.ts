// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createConditionalAccessPolicyFromDiscriminatorValue, serializeConditionalAccessPolicy, type ConditionalAccessPolicy } from './conditionalAccessPolicy';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthenticationStrengthUsage extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The mfa property
     */
    mfa?: ConditionalAccessPolicy[];
    /**
     * The none property
     */
    none?: ConditionalAccessPolicy[];
    /**
     * The OdataType property
     */
    odataType?: string;
}
export function createAuthenticationStrengthUsageFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAuthenticationStrengthUsage;
}
export function deserializeIntoAuthenticationStrengthUsage(authenticationStrengthUsage: AuthenticationStrengthUsage | undefined = {} as AuthenticationStrengthUsage) : Record<string, (node: ParseNode) => void> {
    return {
        "mfa": n => { authenticationStrengthUsage.mfa = n.getCollectionOfObjectValues<ConditionalAccessPolicy>(createConditionalAccessPolicyFromDiscriminatorValue); },
        "none": n => { authenticationStrengthUsage.none = n.getCollectionOfObjectValues<ConditionalAccessPolicy>(createConditionalAccessPolicyFromDiscriminatorValue); },
        "@odata.type": n => { authenticationStrengthUsage.odataType = n.getStringValue(); },
    }
}
export function serializeAuthenticationStrengthUsage(writer: SerializationWriter, authenticationStrengthUsage: AuthenticationStrengthUsage | undefined = {} as AuthenticationStrengthUsage) : void {
        writer.writeCollectionOfObjectValues<ConditionalAccessPolicy>("mfa", authenticationStrengthUsage.mfa, serializeConditionalAccessPolicy);
        writer.writeCollectionOfObjectValues<ConditionalAccessPolicy>("none", authenticationStrengthUsage.none, serializeConditionalAccessPolicy);
        writer.writeStringValue("@odata.type", authenticationStrengthUsage.odataType);
        writer.writeAdditionalData(authenticationStrengthUsage.additionalData);
}
// tslint:enable
// eslint-enable
