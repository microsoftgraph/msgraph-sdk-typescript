// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createThumbnailFromDiscriminatorValue, serializeThumbnail, type Thumbnail } from './thumbnail';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createThumbnailSetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoThumbnailSet;
}
export function deserializeIntoThumbnailSet(thumbnailSet: ThumbnailSet | undefined = {} as ThumbnailSet) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(thumbnailSet),
        "large": n => { thumbnailSet.large = n.getObjectValue<Thumbnail>(createThumbnailFromDiscriminatorValue); },
        "medium": n => { thumbnailSet.medium = n.getObjectValue<Thumbnail>(createThumbnailFromDiscriminatorValue); },
        "small": n => { thumbnailSet.small = n.getObjectValue<Thumbnail>(createThumbnailFromDiscriminatorValue); },
        "source": n => { thumbnailSet.source = n.getObjectValue<Thumbnail>(createThumbnailFromDiscriminatorValue); },
    }
}
export function serializeThumbnailSet(writer: SerializationWriter, thumbnailSet: ThumbnailSet | undefined = {} as ThumbnailSet) : void {
    serializeEntity(writer, thumbnailSet)
    writer.writeObjectValue<Thumbnail>("large", thumbnailSet.large, serializeThumbnail);
    writer.writeObjectValue<Thumbnail>("medium", thumbnailSet.medium, serializeThumbnail);
    writer.writeObjectValue<Thumbnail>("small", thumbnailSet.small, serializeThumbnail);
    writer.writeObjectValue<Thumbnail>("source", thumbnailSet.source, serializeThumbnail);
}
export interface ThumbnailSet extends Entity, Parsable {
    /**
     * A 1920x1920 scaled thumbnail.
     */
    large?: Thumbnail;
    /**
     * A 176x176 scaled thumbnail.
     */
    medium?: Thumbnail;
    /**
     * A 48x48 cropped thumbnail.
     */
    small?: Thumbnail;
    /**
     * A custom thumbnail image or the original image used to generate other thumbnails.
     */
    source?: Thumbnail;
}
// tslint:enable
// eslint-enable
