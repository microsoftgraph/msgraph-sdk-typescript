// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createUnifiedRoleFromDiscriminatorValue, serializeUnifiedRole, type UnifiedRole } from './unifiedRole';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDelegatedAdminAccessDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDelegatedAdminAccessDetails;
}
export interface DelegatedAdminAccessDetails extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The directory roles that the Microsoft partner is assigned in the customer tenant.
     */
    unifiedRoles?: UnifiedRole[];
}
export function deserializeIntoDelegatedAdminAccessDetails(delegatedAdminAccessDetails: DelegatedAdminAccessDetails | undefined = {} as DelegatedAdminAccessDetails) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { delegatedAdminAccessDetails.odataType = n.getStringValue(); },
        "unifiedRoles": n => { delegatedAdminAccessDetails.unifiedRoles = n.getCollectionOfObjectValues<UnifiedRole>(createUnifiedRoleFromDiscriminatorValue); },
    }
}
export function serializeDelegatedAdminAccessDetails(writer: SerializationWriter, delegatedAdminAccessDetails: DelegatedAdminAccessDetails | undefined = {} as DelegatedAdminAccessDetails) : void {
        writer.writeStringValue("@odata.type", delegatedAdminAccessDetails.odataType);
        writer.writeCollectionOfObjectValues<UnifiedRole>("unifiedRoles", delegatedAdminAccessDetails.unifiedRoles, serializeUnifiedRole);
        writer.writeAdditionalData(delegatedAdminAccessDetails.additionalData);
}
// tslint:enable
// eslint-enable
