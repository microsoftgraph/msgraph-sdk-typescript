// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createWorkbookChartPointFromDiscriminatorValue, serializeWorkbookChartPoint, type WorkbookChartPoint } from './workbookChartPoint';
import { createWorkbookChartSeriesFormatFromDiscriminatorValue, serializeWorkbookChartSeriesFormat, type WorkbookChartSeriesFormat } from './workbookChartSeriesFormat';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createWorkbookChartSeriesFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoWorkbookChartSeries;
}
export function deserializeIntoWorkbookChartSeries(workbookChartSeries: WorkbookChartSeries | undefined = {} as WorkbookChartSeries) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workbookChartSeries),
        "format": n => { workbookChartSeries.format = n.getObjectValue<WorkbookChartSeriesFormat>(createWorkbookChartSeriesFormatFromDiscriminatorValue); },
        "name": n => { workbookChartSeries.name = n.getStringValue(); },
        "points": n => { workbookChartSeries.points = n.getCollectionOfObjectValues<WorkbookChartPoint>(createWorkbookChartPointFromDiscriminatorValue); },
    }
}
export function serializeWorkbookChartSeries(writer: SerializationWriter, workbookChartSeries: WorkbookChartSeries | undefined = {} as WorkbookChartSeries) : void {
        serializeEntity(writer, workbookChartSeries)
        writer.writeObjectValue<WorkbookChartSeriesFormat>("format", workbookChartSeries.format, serializeWorkbookChartSeriesFormat);
        writer.writeStringValue("name", workbookChartSeries.name);
        writer.writeCollectionOfObjectValues<WorkbookChartPoint>("points", workbookChartSeries.points, serializeWorkbookChartPoint);
}
export interface WorkbookChartSeries extends Entity, Parsable {
    /**
     * Represents the formatting of a chart series, which includes fill and line formatting. Read-only.
     */
    format?: WorkbookChartSeriesFormat;
    /**
     * Represents the name of a series in a chart.
     */
    name?: string;
    /**
     * Represents a collection of all points in the series. Read-only.
     */
    points?: WorkbookChartPoint[];
}
// tslint:enable
// eslint-enable
