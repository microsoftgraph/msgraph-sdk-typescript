// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { DelegatedAdminRelationshipOperationType } from './delegatedAdminRelationshipOperationType';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { LongRunningOperationStatus } from './longRunningOperationStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createDelegatedAdminRelationshipOperationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoDelegatedAdminRelationshipOperation;
}
export interface DelegatedAdminRelationshipOperation extends Entity, Parsable {
    /**
     * The time in ISO 8601 format and in UTC time when the long-running operation was created. Read-only.
     */
    createdDateTime?: Date;
    /**
     * The data (payload) for the operation. Read-only.
     */
    data?: string;
    /**
     * The time in ISO 8601 format and in UTC time when the long-running operation was last modified. Read-only.
     */
    lastModifiedDateTime?: Date;
    /**
     * The operationType property
     */
    operationType?: DelegatedAdminRelationshipOperationType;
    /**
     * The status property
     */
    status?: LongRunningOperationStatus;
}
export function deserializeIntoDelegatedAdminRelationshipOperation(delegatedAdminRelationshipOperation: DelegatedAdminRelationshipOperation | undefined = {} as DelegatedAdminRelationshipOperation) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(delegatedAdminRelationshipOperation),
        "createdDateTime": n => { delegatedAdminRelationshipOperation.createdDateTime = n.getDateValue(); },
        "data": n => { delegatedAdminRelationshipOperation.data = n.getStringValue(); },
        "lastModifiedDateTime": n => { delegatedAdminRelationshipOperation.lastModifiedDateTime = n.getDateValue(); },
        "operationType": n => { delegatedAdminRelationshipOperation.operationType = n.getEnumValue<DelegatedAdminRelationshipOperationType>(DelegatedAdminRelationshipOperationType); },
        "status": n => { delegatedAdminRelationshipOperation.status = n.getEnumValue<LongRunningOperationStatus>(LongRunningOperationStatus); },
    }
}
export function serializeDelegatedAdminRelationshipOperation(writer: SerializationWriter, delegatedAdminRelationshipOperation: DelegatedAdminRelationshipOperation | undefined = {} as DelegatedAdminRelationshipOperation) : void {
        serializeEntity(writer, delegatedAdminRelationshipOperation)
        writer.writeDateValue("createdDateTime", delegatedAdminRelationshipOperation.createdDateTime);
        writer.writeStringValue("data", delegatedAdminRelationshipOperation.data);
        writer.writeDateValue("lastModifiedDateTime", delegatedAdminRelationshipOperation.lastModifiedDateTime);
        writer.writeEnumValue<DelegatedAdminRelationshipOperationType>("operationType", delegatedAdminRelationshipOperation.operationType);
        writer.writeEnumValue<LongRunningOperationStatus>("status", delegatedAdminRelationshipOperation.status);
}
// tslint:enable
// eslint-enable
