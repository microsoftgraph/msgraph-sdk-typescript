// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createProxiedDomainFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoProxiedDomain;
}
export function deserializeIntoProxiedDomain(proxiedDomain: ProxiedDomain | undefined = {} as ProxiedDomain) : Record<string, (node: ParseNode) => void> {
    return {
        "ipAddressOrFQDN": n => { proxiedDomain.ipAddressOrFQDN = n.getStringValue(); },
        "@odata.type": n => { proxiedDomain.odataType = n.getStringValue(); },
        "proxy": n => { proxiedDomain.proxy = n.getStringValue(); },
    }
}
export interface ProxiedDomain extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The IP address or FQDN
     */
    ipAddressOrFQDN?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Proxy IP or FQDN
     */
    proxy?: string;
}
export function serializeProxiedDomain(writer: SerializationWriter, proxiedDomain: ProxiedDomain | undefined = {} as ProxiedDomain) : void {
        writer.writeStringValue("ipAddressOrFQDN", proxiedDomain.ipAddressOrFQDN);
        writer.writeStringValue("@odata.type", proxiedDomain.odataType);
        writer.writeStringValue("proxy", proxiedDomain.proxy);
        writer.writeAdditionalData(proxiedDomain.additionalData);
}
// tslint:enable
// eslint-enable
