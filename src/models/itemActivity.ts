// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createAccessActionFromDiscriminatorValue, serializeAccessAction, type AccessAction } from './accessAction';
import { createDriveItemFromDiscriminatorValue, serializeDriveItem, type DriveItem } from './driveItem';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createItemActivityFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoItemActivity;
}
export function deserializeIntoItemActivity(itemActivity: ItemActivity | undefined = {} as ItemActivity) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(itemActivity),
        "access": n => { itemActivity.access = n.getObjectValue<AccessAction>(createAccessActionFromDiscriminatorValue); },
        "activityDateTime": n => { itemActivity.activityDateTime = n.getDateValue(); },
        "actor": n => { itemActivity.actor = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
        "driveItem": n => { itemActivity.driveItem = n.getObjectValue<DriveItem>(createDriveItemFromDiscriminatorValue); },
    }
}
export interface ItemActivity extends Entity, Parsable {
    /**
     * An item was accessed.
     */
    access?: AccessAction;
    /**
     * Details about when the activity took place. Read-only.
     */
    activityDateTime?: Date;
    /**
     * Identity of who performed the action. Read-only.
     */
    actor?: IdentitySet;
    /**
     * Exposes the driveItem that was the target of this activity.
     */
    driveItem?: DriveItem;
}
export function serializeItemActivity(writer: SerializationWriter, itemActivity: ItemActivity | undefined = {} as ItemActivity) : void {
        serializeEntity(writer, itemActivity)
        writer.writeObjectValue<AccessAction>("access", itemActivity.access, serializeAccessAction);
        writer.writeDateValue("activityDateTime", itemActivity.activityDateTime);
        writer.writeObjectValue<IdentitySet>("actor", itemActivity.actor, serializeIdentitySet);
        writer.writeObjectValue<DriveItem>("driveItem", itemActivity.driveItem, serializeDriveItem);
}
// tslint:enable
// eslint-enable
