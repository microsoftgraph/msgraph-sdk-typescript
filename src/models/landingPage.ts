// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEmailIdentityFromDiscriminatorValue, serializeEmailIdentity, type EmailIdentity } from './emailIdentity';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createLandingPageDetailFromDiscriminatorValue, serializeLandingPageDetail, type LandingPageDetail } from './landingPageDetail';
import { SimulationContentSource } from './simulationContentSource';
import { SimulationContentStatus } from './simulationContentStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLandingPageFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLandingPage;
}
export function deserializeIntoLandingPage(landingPage: LandingPage | undefined = {} as LandingPage) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(landingPage),
        "createdBy": n => { landingPage.createdBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "createdDateTime": n => { landingPage.createdDateTime = n.getDateValue(); },
        "description": n => { landingPage.description = n.getStringValue(); },
        "details": n => { landingPage.details = n.getCollectionOfObjectValues<LandingPageDetail>(createLandingPageDetailFromDiscriminatorValue); },
        "displayName": n => { landingPage.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { landingPage.lastModifiedBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { landingPage.lastModifiedDateTime = n.getDateValue(); },
        "locale": n => { landingPage.locale = n.getStringValue(); },
        "source": n => { landingPage.source = n.getEnumValue<SimulationContentSource>(SimulationContentSource); },
        "status": n => { landingPage.status = n.getEnumValue<SimulationContentStatus>(SimulationContentStatus); },
        "supportedLocales": n => { landingPage.supportedLocales = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface LandingPage extends Entity, Parsable {
    /**
     * Identity of the user who created the landing page.
     */
    createdBy?: EmailIdentity;
    /**
     * Date and time when the landing page was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    createdDateTime?: Date;
    /**
     * Description of the landing page as defined by the user.
     */
    description?: string;
    /**
     * The detail information for a landing page associated with a simulation during its creation.
     */
    details?: LandingPageDetail[];
    /**
     * The display name of the landing page.
     */
    displayName?: string;
    /**
     * Email identity of the user who last modified the landing page.
     */
    lastModifiedBy?: EmailIdentity;
    /**
     * Date and time when the landing page was last modified. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
     */
    lastModifiedDateTime?: Date;
    /**
     * Content locale.
     */
    locale?: string;
    /**
     * The source of the content. Possible values are: unknown, global, tenant, unknownFutureValue.
     */
    source?: SimulationContentSource;
    /**
     * The status of the simulation. Possible values are: unknown, draft, ready, archive, delete, unknownFutureValue.
     */
    status?: SimulationContentStatus;
    /**
     * Supported locales.
     */
    supportedLocales?: string[];
}
export function serializeLandingPage(writer: SerializationWriter, landingPage: LandingPage | undefined = {} as LandingPage) : void {
        serializeEntity(writer, landingPage)
        writer.writeObjectValue<EmailIdentity>("createdBy", landingPage.createdBy, serializeEmailIdentity);
        writer.writeDateValue("createdDateTime", landingPage.createdDateTime);
        writer.writeStringValue("description", landingPage.description);
        writer.writeCollectionOfObjectValues<LandingPageDetail>("details", landingPage.details, serializeLandingPageDetail);
        writer.writeStringValue("displayName", landingPage.displayName);
        writer.writeObjectValue<EmailIdentity>("lastModifiedBy", landingPage.lastModifiedBy, serializeEmailIdentity);
        writer.writeDateValue("lastModifiedDateTime", landingPage.lastModifiedDateTime);
        writer.writeStringValue("locale", landingPage.locale);
        writer.writeEnumValue<SimulationContentSource>("source", landingPage.source);
        writer.writeEnumValue<SimulationContentStatus>("status", landingPage.status);
        writer.writeCollectionOfPrimitiveValues<string>("supportedLocales", landingPage.supportedLocales);
}
// tslint:enable
// eslint-enable
