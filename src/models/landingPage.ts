// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createEmailIdentityFromDiscriminatorValue, serializeEmailIdentity, type EmailIdentity } from './emailIdentity';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createLandingPageDetailFromDiscriminatorValue, serializeLandingPageDetail, type LandingPageDetail } from './landingPageDetail';
import { SimulationContentSource } from './simulationContentSource';
import { SimulationContentStatus } from './simulationContentStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createLandingPageFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoLandingPage;
}
export function deserializeIntoLandingPage(landingPage: LandingPage | undefined = {} as LandingPage) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(landingPage),
        "createdBy": n => { landingPage.createdBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "createdDateTime": n => { landingPage.createdDateTime = n.getDateValue(); },
        "description": n => { landingPage.description = n.getStringValue(); },
        "details": n => { landingPage.details = n.getCollectionOfObjectValues<LandingPageDetail>(createLandingPageDetailFromDiscriminatorValue); },
        "displayName": n => { landingPage.displayName = n.getStringValue(); },
        "lastModifiedBy": n => { landingPage.lastModifiedBy = n.getObjectValue<EmailIdentity>(createEmailIdentityFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { landingPage.lastModifiedDateTime = n.getDateValue(); },
        "locale": n => { landingPage.locale = n.getStringValue(); },
        "source": n => { landingPage.source = n.getEnumValue<SimulationContentSource>(SimulationContentSource); },
        "status": n => { landingPage.status = n.getEnumValue<SimulationContentStatus>(SimulationContentStatus); },
        "supportedLocales": n => { landingPage.supportedLocales = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface LandingPage extends Entity, Parsable {
    /**
     * The createdBy property
     */
    createdBy?: EmailIdentity;
    /**
     * The createdDateTime property
     */
    createdDateTime?: Date;
    /**
     * The description property
     */
    description?: string;
    /**
     * The details property
     */
    details?: LandingPageDetail[];
    /**
     * The displayName property
     */
    displayName?: string;
    /**
     * The lastModifiedBy property
     */
    lastModifiedBy?: EmailIdentity;
    /**
     * The lastModifiedDateTime property
     */
    lastModifiedDateTime?: Date;
    /**
     * The locale property
     */
    locale?: string;
    /**
     * The source property
     */
    source?: SimulationContentSource;
    /**
     * The status property
     */
    status?: SimulationContentStatus;
    /**
     * The supportedLocales property
     */
    supportedLocales?: string[];
}
export function serializeLandingPage(writer: SerializationWriter, landingPage: LandingPage | undefined = {} as LandingPage) : void {
        serializeEntity(writer, landingPage)
        writer.writeObjectValue<EmailIdentity>("createdBy", landingPage.createdBy, );
        writer.writeDateValue("createdDateTime", landingPage.createdDateTime);
        writer.writeStringValue("description", landingPage.description);
        writer.writeCollectionOfObjectValues<LandingPageDetail>("details", landingPage.details, );
        writer.writeStringValue("displayName", landingPage.displayName);
        writer.writeObjectValue<EmailIdentity>("lastModifiedBy", landingPage.lastModifiedBy, );
        writer.writeDateValue("lastModifiedDateTime", landingPage.lastModifiedDateTime);
        writer.writeStringValue("locale", landingPage.locale);
        writer.writeEnumValue<SimulationContentSource>("source", landingPage.source);
        writer.writeEnumValue<SimulationContentStatus>("status", landingPage.status);
        writer.writeCollectionOfPrimitiveValues<string>("supportedLocales", landingPage.supportedLocales);
}
// tslint:enable
// eslint-enable
