// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createApplicationEnforcedRestrictionsSessionControlFromDiscriminatorValue, serializeApplicationEnforcedRestrictionsSessionControl, type ApplicationEnforcedRestrictionsSessionControl } from './applicationEnforcedRestrictionsSessionControl';
import { createCloudAppSecuritySessionControlFromDiscriminatorValue, serializeCloudAppSecuritySessionControl, type CloudAppSecuritySessionControl } from './cloudAppSecuritySessionControl';
import { createPersistentBrowserSessionControlFromDiscriminatorValue, serializePersistentBrowserSessionControl, type PersistentBrowserSessionControl } from './persistentBrowserSessionControl';
import { createSignInFrequencySessionControlFromDiscriminatorValue, serializeSignInFrequencySessionControl, type SignInFrequencySessionControl } from './signInFrequencySessionControl';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface ConditionalAccessSessionControls extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Session control to enforce application restrictions. Only Exchange Online and Sharepoint Online support this session control.
     */
    applicationEnforcedRestrictions?: ApplicationEnforcedRestrictionsSessionControl;
    /**
     * Session control to apply cloud app security.
     */
    cloudAppSecurity?: CloudAppSecuritySessionControl;
    /**
     * Session control that determines whether it is acceptable for Microsoft Entra ID to extend existing sessions based on information collected prior to an outage or not.
     */
    disableResilienceDefaults?: boolean;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Session control to define whether to persist cookies or not. All apps should be selected for this session control to work correctly.
     */
    persistentBrowser?: PersistentBrowserSessionControl;
    /**
     * Session control to enforce signin frequency.
     */
    signInFrequency?: SignInFrequencySessionControl;
}
export function createConditionalAccessSessionControlsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoConditionalAccessSessionControls;
}
export function deserializeIntoConditionalAccessSessionControls(conditionalAccessSessionControls: ConditionalAccessSessionControls | undefined = {} as ConditionalAccessSessionControls) : Record<string, (node: ParseNode) => void> {
    return {
        "applicationEnforcedRestrictions": n => { conditionalAccessSessionControls.applicationEnforcedRestrictions = n.getObjectValue<ApplicationEnforcedRestrictionsSessionControl>(createApplicationEnforcedRestrictionsSessionControlFromDiscriminatorValue); },
        "cloudAppSecurity": n => { conditionalAccessSessionControls.cloudAppSecurity = n.getObjectValue<CloudAppSecuritySessionControl>(createCloudAppSecuritySessionControlFromDiscriminatorValue); },
        "disableResilienceDefaults": n => { conditionalAccessSessionControls.disableResilienceDefaults = n.getBooleanValue(); },
        "@odata.type": n => { conditionalAccessSessionControls.odataType = n.getStringValue(); },
        "persistentBrowser": n => { conditionalAccessSessionControls.persistentBrowser = n.getObjectValue<PersistentBrowserSessionControl>(createPersistentBrowserSessionControlFromDiscriminatorValue); },
        "signInFrequency": n => { conditionalAccessSessionControls.signInFrequency = n.getObjectValue<SignInFrequencySessionControl>(createSignInFrequencySessionControlFromDiscriminatorValue); },
    }
}
export function serializeConditionalAccessSessionControls(writer: SerializationWriter, conditionalAccessSessionControls: ConditionalAccessSessionControls | undefined = {} as ConditionalAccessSessionControls) : void {
        writer.writeObjectValue<ApplicationEnforcedRestrictionsSessionControl>("applicationEnforcedRestrictions", conditionalAccessSessionControls.applicationEnforcedRestrictions, serializeApplicationEnforcedRestrictionsSessionControl);
        writer.writeObjectValue<CloudAppSecuritySessionControl>("cloudAppSecurity", conditionalAccessSessionControls.cloudAppSecurity, serializeCloudAppSecuritySessionControl);
        writer.writeBooleanValue("disableResilienceDefaults", conditionalAccessSessionControls.disableResilienceDefaults);
        writer.writeStringValue("@odata.type", conditionalAccessSessionControls.odataType);
        writer.writeObjectValue<PersistentBrowserSessionControl>("persistentBrowser", conditionalAccessSessionControls.persistentBrowser, serializePersistentBrowserSessionControl);
        writer.writeObjectValue<SignInFrequencySessionControl>("signInFrequency", conditionalAccessSessionControls.signInFrequency, serializeSignInFrequencySessionControl);
        writer.writeAdditionalData(conditionalAccessSessionControls.additionalData);
}
// tslint:enable
// eslint-enable
