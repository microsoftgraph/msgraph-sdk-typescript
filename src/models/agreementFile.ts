import { createAgreementFileLocalizationFromDiscriminatorValue, serializeAgreementFileLocalization, type AgreementFileLocalization } from './agreementFileLocalization';
import { deserializeIntoAgreementFileProperties, serializeAgreementFileProperties, type AgreementFileProperties } from './agreementFileProperties';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AgreementFile extends AgreementFileProperties, Parsable {
    /**
     * The localized version of the terms of use agreement files attached to the agreement.
     */
    localizations?: AgreementFileLocalization[];
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function createAgreementFileFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAgreementFile;
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function deserializeIntoAgreementFile(agreementFile: AgreementFile | undefined = {} as AgreementFile) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoAgreementFileProperties(agreementFile),
        "localizations": n => { agreementFile.localizations = n.getCollectionOfObjectValues<AgreementFileLocalization>(createAgreementFileLocalizationFromDiscriminatorValue); },
    }
}
// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
export function serializeAgreementFile(writer: SerializationWriter, agreementFile: AgreementFile | undefined = {} as AgreementFile) : void {
        serializeAgreementFileProperties(writer, agreementFile)
        writer.writeCollectionOfObjectValues<AgreementFileLocalization>("localizations", agreementFile.localizations, );
}
