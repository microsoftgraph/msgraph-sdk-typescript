// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPendingContentUpdateFromDiscriminatorValue, serializePendingContentUpdate, type PendingContentUpdate } from './pendingContentUpdate';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createPendingOperationsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoPendingOperations;
}
export function deserializeIntoPendingOperations(pendingOperations: PendingOperations | undefined = {} as PendingOperations) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { pendingOperations.odataType = n.getStringValue(); },
        "pendingContentUpdate": n => { pendingOperations.pendingContentUpdate = n.getObjectValue<PendingContentUpdate>(createPendingContentUpdateFromDiscriminatorValue); },
    }
}
export interface PendingOperations extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * A property that indicates that an operation that might update the binary content of a file is pending completion.
     */
    pendingContentUpdate?: PendingContentUpdate;
}
export function serializePendingOperations(writer: SerializationWriter, pendingOperations: PendingOperations | undefined = {} as PendingOperations) : void {
        writer.writeStringValue("@odata.type", pendingOperations.odataType);
        writer.writeObjectValue<PendingContentUpdate>("pendingContentUpdate", pendingOperations.pendingContentUpdate, );
        writer.writeAdditionalData(pendingOperations.additionalData);
}
// tslint:enable
// eslint-enable
