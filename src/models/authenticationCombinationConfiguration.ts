// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { AuthenticationMethodModes } from './authenticationMethodModes';
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { deserializeIntoFido2CombinationConfiguration } from './fido2CombinationConfiguration';
import { type Fido2CombinationConfiguration } from './index';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AuthenticationCombinationConfiguration extends Entity, Parsable {
    /**
     * Which authentication method combinations this configuration applies to. Must be an allowedCombinations object that's defined for the authenticationStrengthPolicy. The only possible value for fido2combinationConfigurations is 'fido2'.
     */
    appliesToCombinations?: AuthenticationMethodModes[];
}
export function createAuthenticationCombinationConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.fido2CombinationConfiguration":
                    return deserializeIntoFido2CombinationConfiguration;
            }
        }
    }
    return deserializeIntoAuthenticationCombinationConfiguration;
}
export function deserializeIntoAuthenticationCombinationConfiguration(authenticationCombinationConfiguration: AuthenticationCombinationConfiguration | undefined = {} as AuthenticationCombinationConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(authenticationCombinationConfiguration),
        "appliesToCombinations": n => { authenticationCombinationConfiguration.appliesToCombinations = n.getCollectionOfEnumValues<AuthenticationMethodModes>(AuthenticationMethodModes); },
    }
}
export function serializeAuthenticationCombinationConfiguration(writer: SerializationWriter, authenticationCombinationConfiguration: AuthenticationCombinationConfiguration | undefined = {} as AuthenticationCombinationConfiguration) : void {
    serializeEntity(writer, authenticationCombinationConfiguration)
    if(authenticationCombinationConfiguration.appliesToCombinations)
    writer.writeEnumValue<AuthenticationMethodModes>("appliesToCombinations", ...authenticationCombinationConfiguration.appliesToCombinations);
}
// tslint:enable
// eslint-enable
