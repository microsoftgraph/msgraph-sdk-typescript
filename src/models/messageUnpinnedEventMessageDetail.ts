// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEventMessageDetail, serializeEventMessageDetail, type EventMessageDetail } from './eventMessageDetail';
import { createIdentitySetFromDiscriminatorValue, serializeIdentitySet, type IdentitySet } from './identitySet';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMessageUnpinnedEventMessageDetailFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoMessageUnpinnedEventMessageDetail;
}
export function deserializeIntoMessageUnpinnedEventMessageDetail(messageUnpinnedEventMessageDetail: MessageUnpinnedEventMessageDetail | undefined = {} as MessageUnpinnedEventMessageDetail) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEventMessageDetail(messageUnpinnedEventMessageDetail),
        "eventDateTime": n => { messageUnpinnedEventMessageDetail.eventDateTime = n.getDateValue(); },
        "initiator": n => { messageUnpinnedEventMessageDetail.initiator = n.getObjectValue<IdentitySet>(createIdentitySetFromDiscriminatorValue); },
    }
}
export interface MessageUnpinnedEventMessageDetail extends EventMessageDetail, Parsable {
    /**
     * Date and time when the event occurred.
     */
    eventDateTime?: Date;
    /**
     * Initiator of the event.
     */
    initiator?: IdentitySet;
}
export function serializeMessageUnpinnedEventMessageDetail(writer: SerializationWriter, messageUnpinnedEventMessageDetail: MessageUnpinnedEventMessageDetail | undefined = {} as MessageUnpinnedEventMessageDetail) : void {
    serializeEventMessageDetail(writer, messageUnpinnedEventMessageDetail)
    writer.writeDateValue("eventDateTime", messageUnpinnedEventMessageDetail.eventDateTime);
    writer.writeObjectValue<IdentitySet>("initiator", messageUnpinnedEventMessageDetail.initiator, serializeIdentitySet);
}
// tslint:enable
// eslint-enable
