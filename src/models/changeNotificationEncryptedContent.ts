import {AdditionalDataHolder, Parsable, ParseNode, SerializationWriter} from '@microsoft/kiota-abstractions';

export class ChangeNotificationEncryptedContent implements AdditionalDataHolder, Parsable {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    private _additionalData: Record<string, unknown>;
    /** Base64-encoded encrypted data that produces a full resource respresented as JSON. The data has been encrypted with the provided dataKey using an AES/CBC/PKCS5PADDING cipher suite. */
    private _data?: string | undefined;
    /** Base64-encoded symmetric key generated by Microsoft Graph to encrypt the data value and to generate the data signature. This key is encrypted with the certificate public key that was provided during the subscription. It must be decrypted with the certificate private key before it can be used to decrypt the data or verify the signature. This key has been encrypted with the following cipher suite: RSA/ECB/OAEPWithSHA1AndMGF1Padding. */
    private _dataKey?: string | undefined;
    /** Base64-encoded HMAC-SHA256 hash of the data for validation purposes. */
    private _dataSignature?: string | undefined;
    /** ID of the certificate used to encrypt the dataKey. */
    private _encryptionCertificateId?: string | undefined;
    /** Hexadecimal representation of the thumbprint of the certificate used to encrypt the dataKey. */
    private _encryptionCertificateThumbprint?: string | undefined;
    private _odataType?: string | undefined;
    /**
     * Gets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @returns a Record<string, unknown>
     */
    public get additionalData() {
        return this._additionalData;
    };
    /**
     * Sets the additionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     * @param value Value to set for the AdditionalData property.
     */
    public set additionalData(value: Record<string, unknown>) {
        this._additionalData = value;
    };
    /**
     * Instantiates a new changeNotificationEncryptedContent and sets the default values.
     */
    public constructor() {
        this._additionalData = {};
    };
    /**
     * Gets the data property value. Base64-encoded encrypted data that produces a full resource respresented as JSON. The data has been encrypted with the provided dataKey using an AES/CBC/PKCS5PADDING cipher suite.
     * @returns a string
     */
    public get data() {
        return this._data;
    };
    /**
     * Sets the data property value. Base64-encoded encrypted data that produces a full resource respresented as JSON. The data has been encrypted with the provided dataKey using an AES/CBC/PKCS5PADDING cipher suite.
     * @param value Value to set for the data property.
     */
    public set data(value: string | undefined) {
        this._data = value;
    };
    /**
     * Gets the dataKey property value. Base64-encoded symmetric key generated by Microsoft Graph to encrypt the data value and to generate the data signature. This key is encrypted with the certificate public key that was provided during the subscription. It must be decrypted with the certificate private key before it can be used to decrypt the data or verify the signature. This key has been encrypted with the following cipher suite: RSA/ECB/OAEPWithSHA1AndMGF1Padding.
     * @returns a string
     */
    public get dataKey() {
        return this._dataKey;
    };
    /**
     * Sets the dataKey property value. Base64-encoded symmetric key generated by Microsoft Graph to encrypt the data value and to generate the data signature. This key is encrypted with the certificate public key that was provided during the subscription. It must be decrypted with the certificate private key before it can be used to decrypt the data or verify the signature. This key has been encrypted with the following cipher suite: RSA/ECB/OAEPWithSHA1AndMGF1Padding.
     * @param value Value to set for the dataKey property.
     */
    public set dataKey(value: string | undefined) {
        this._dataKey = value;
    };
    /**
     * Gets the dataSignature property value. Base64-encoded HMAC-SHA256 hash of the data for validation purposes.
     * @returns a string
     */
    public get dataSignature() {
        return this._dataSignature;
    };
    /**
     * Sets the dataSignature property value. Base64-encoded HMAC-SHA256 hash of the data for validation purposes.
     * @param value Value to set for the dataSignature property.
     */
    public set dataSignature(value: string | undefined) {
        this._dataSignature = value;
    };
    /**
     * Gets the encryptionCertificateId property value. ID of the certificate used to encrypt the dataKey.
     * @returns a string
     */
    public get encryptionCertificateId() {
        return this._encryptionCertificateId;
    };
    /**
     * Sets the encryptionCertificateId property value. ID of the certificate used to encrypt the dataKey.
     * @param value Value to set for the encryptionCertificateId property.
     */
    public set encryptionCertificateId(value: string | undefined) {
        this._encryptionCertificateId = value;
    };
    /**
     * Gets the encryptionCertificateThumbprint property value. Hexadecimal representation of the thumbprint of the certificate used to encrypt the dataKey.
     * @returns a string
     */
    public get encryptionCertificateThumbprint() {
        return this._encryptionCertificateThumbprint;
    };
    /**
     * Sets the encryptionCertificateThumbprint property value. Hexadecimal representation of the thumbprint of the certificate used to encrypt the dataKey.
     * @param value Value to set for the encryptionCertificateThumbprint property.
     */
    public set encryptionCertificateThumbprint(value: string | undefined) {
        this._encryptionCertificateThumbprint = value;
    };
    /**
     * The deserialization information for the current model
     * @returns a Record<string, (node: ParseNode) => void>
     */
    public getFieldDeserializers() : Record<string, (node: ParseNode) => void> {
        return {
            "data": n => { this.data = n.getStringValue(); },
            "dataKey": n => { this.dataKey = n.getStringValue(); },
            "dataSignature": n => { this.dataSignature = n.getStringValue(); },
            "encryptionCertificateId": n => { this.encryptionCertificateId = n.getStringValue(); },
            "encryptionCertificateThumbprint": n => { this.encryptionCertificateThumbprint = n.getStringValue(); },
            "@odata.type": n => { this.odataType = n.getStringValue(); },
        };
    };
    /**
     * Gets the @odata.type property value. 
     * @returns a string
     */
    public get odataType() {
        return this._odataType;
    };
    /**
     * Sets the @odata.type property value. 
     * @param value Value to set for the OdataType property.
     */
    public set odataType(value: string | undefined) {
        this._odataType = value;
    };
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    public serialize(writer: SerializationWriter) : void {
        if(!writer) throw new Error("writer cannot be undefined");
        writer.writeStringValue("data", this.data);
        writer.writeStringValue("dataKey", this.dataKey);
        writer.writeStringValue("dataSignature", this.dataSignature);
        writer.writeStringValue("encryptionCertificateId", this.encryptionCertificateId);
        writer.writeStringValue("encryptionCertificateThumbprint", this.encryptionCertificateThumbprint);
        writer.writeStringValue("@odata.type", this.odataType);
        writer.writeAdditionalData(this.additionalData);
    };
}
