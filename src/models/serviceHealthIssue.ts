// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoServiceAnnouncementBase, serializeServiceAnnouncementBase, type ServiceAnnouncementBase } from './serviceAnnouncementBase';
import { ServiceHealthClassificationType } from './serviceHealthClassificationType';
import { createServiceHealthIssuePostFromDiscriminatorValue, serializeServiceHealthIssuePost, type ServiceHealthIssuePost } from './serviceHealthIssuePost';
import { ServiceHealthOrigin } from './serviceHealthOrigin';
import { ServiceHealthStatus } from './serviceHealthStatus';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createServiceHealthIssueFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoServiceHealthIssue;
}
export function deserializeIntoServiceHealthIssue(serviceHealthIssue: ServiceHealthIssue | undefined = {} as ServiceHealthIssue) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoServiceAnnouncementBase(serviceHealthIssue),
        "classification": n => { serviceHealthIssue.classification = n.getEnumValue<ServiceHealthClassificationType>(ServiceHealthClassificationType); },
        "feature": n => { serviceHealthIssue.feature = n.getStringValue(); },
        "featureGroup": n => { serviceHealthIssue.featureGroup = n.getStringValue(); },
        "impactDescription": n => { serviceHealthIssue.impactDescription = n.getStringValue(); },
        "isResolved": n => { serviceHealthIssue.isResolved = n.getBooleanValue(); },
        "origin": n => { serviceHealthIssue.origin = n.getEnumValue<ServiceHealthOrigin>(ServiceHealthOrigin); },
        "posts": n => { serviceHealthIssue.posts = n.getCollectionOfObjectValues<ServiceHealthIssuePost>(createServiceHealthIssuePostFromDiscriminatorValue); },
        "service": n => { serviceHealthIssue.service = n.getStringValue(); },
        "status": n => { serviceHealthIssue.status = n.getEnumValue<ServiceHealthStatus>(ServiceHealthStatus); },
    }
}
export function serializeServiceHealthIssue(writer: SerializationWriter, serviceHealthIssue: ServiceHealthIssue | undefined = {} as ServiceHealthIssue) : void {
        serializeServiceAnnouncementBase(writer, serviceHealthIssue)
        writer.writeEnumValue<ServiceHealthClassificationType>("classification", serviceHealthIssue.classification);
        writer.writeStringValue("feature", serviceHealthIssue.feature);
        writer.writeStringValue("featureGroup", serviceHealthIssue.featureGroup);
        writer.writeStringValue("impactDescription", serviceHealthIssue.impactDescription);
        writer.writeBooleanValue("isResolved", serviceHealthIssue.isResolved);
        writer.writeEnumValue<ServiceHealthOrigin>("origin", serviceHealthIssue.origin);
        writer.writeCollectionOfObjectValues<ServiceHealthIssuePost>("posts", serviceHealthIssue.posts, serializeServiceHealthIssuePost);
        writer.writeStringValue("service", serviceHealthIssue.service);
        writer.writeEnumValue<ServiceHealthStatus>("status", serviceHealthIssue.status);
}
export interface ServiceHealthIssue extends Parsable, ServiceAnnouncementBase {
    /**
     * The classification property
     */
    classification?: ServiceHealthClassificationType;
    /**
     * The feature name of the service issue.
     */
    feature?: string;
    /**
     * The feature group name of the service issue.
     */
    featureGroup?: string;
    /**
     * The description of the service issue impact.
     */
    impactDescription?: string;
    /**
     * Indicates whether the issue is resolved.
     */
    isResolved?: boolean;
    /**
     * The origin property
     */
    origin?: ServiceHealthOrigin;
    /**
     * Collection of historical posts for the service issue.
     */
    posts?: ServiceHealthIssuePost[];
    /**
     * Indicates the service affected by the issue.
     */
    service?: string;
    /**
     * The status property
     */
    status?: ServiceHealthStatus;
}
// tslint:enable
// eslint-enable
