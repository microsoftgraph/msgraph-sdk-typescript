// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoChangeTrackedEntity, serializeChangeTrackedEntity, type ChangeTrackedEntity } from './changeTrackedEntity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSchedulingGroupFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSchedulingGroup;
}
export function deserializeIntoSchedulingGroup(schedulingGroup: SchedulingGroup | undefined = {} as SchedulingGroup) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoChangeTrackedEntity(schedulingGroup),
        "displayName": n => { schedulingGroup.displayName = n.getStringValue(); },
        "isActive": n => { schedulingGroup.isActive = n.getBooleanValue(); },
        "userIds": n => { schedulingGroup.userIds = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export interface SchedulingGroup extends ChangeTrackedEntity, Parsable {
    /**
     * The display name for the schedulingGroup. Required.
     */
    displayName?: string;
    /**
     * Indicates whether the schedulingGroup can be used when creating new entities or updating existing ones. Required.
     */
    isActive?: boolean;
    /**
     * The list of user IDs that are a member of the schedulingGroup. Required.
     */
    userIds?: string[];
}
export function serializeSchedulingGroup(writer: SerializationWriter, schedulingGroup: SchedulingGroup | undefined = {} as SchedulingGroup) : void {
        serializeChangeTrackedEntity(writer, schedulingGroup)
        writer.writeStringValue("displayName", schedulingGroup.displayName);
        writer.writeCollectionOfPrimitiveValues<string>("userIds", schedulingGroup.userIds);
}
// tslint:enable
// eslint-enable
