// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoAndroidManagedAppProtection } from './androidManagedAppProtection';
import { type AndroidManagedAppProtection, type IosManagedAppProtection } from './index';
import { deserializeIntoIosManagedAppProtection } from './iosManagedAppProtection';
import { deserializeIntoManagedAppProtection, serializeManagedAppProtection, type ManagedAppProtection } from './managedAppProtection';
import { createTargetedManagedAppPolicyAssignmentFromDiscriminatorValue, serializeTargetedManagedAppPolicyAssignment, type TargetedManagedAppPolicyAssignment } from './targetedManagedAppPolicyAssignment';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createTargetedManagedAppProtectionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.androidManagedAppProtection":
                    return deserializeIntoAndroidManagedAppProtection;
                case "#microsoft.graph.iosManagedAppProtection":
                    return deserializeIntoIosManagedAppProtection;
            }
        }
    }
    return deserializeIntoTargetedManagedAppProtection;
}
export function deserializeIntoTargetedManagedAppProtection(targetedManagedAppProtection: TargetedManagedAppProtection | undefined = {} as TargetedManagedAppProtection) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoManagedAppProtection(targetedManagedAppProtection),
        "assignments": n => { targetedManagedAppProtection.assignments = n.getCollectionOfObjectValues<TargetedManagedAppPolicyAssignment>(createTargetedManagedAppPolicyAssignmentFromDiscriminatorValue); },
        "isAssigned": n => { targetedManagedAppProtection.isAssigned = n.getBooleanValue(); },
    }
}
export function serializeTargetedManagedAppProtection(writer: SerializationWriter, targetedManagedAppProtection: TargetedManagedAppProtection | undefined = {} as TargetedManagedAppProtection) : void {
    serializeManagedAppProtection(writer, targetedManagedAppProtection)
    writer.writeCollectionOfObjectValues<TargetedManagedAppPolicyAssignment>("assignments", targetedManagedAppProtection.assignments, serializeTargetedManagedAppPolicyAssignment);
    writer.writeBooleanValue("isAssigned", targetedManagedAppProtection.isAssigned);
}
export interface TargetedManagedAppProtection extends ManagedAppProtection, Parsable {
    /**
     * Navigation property to list of inclusion and exclusion groups to which the policy is deployed.
     */
    assignments?: TargetedManagedAppPolicyAssignment[];
    /**
     * Indicates if the policy is deployed to any inclusion groups or not.
     */
    isAssigned?: boolean;
}
// tslint:enable
// eslint-enable
