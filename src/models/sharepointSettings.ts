// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { createIdleSessionSignOutFromDiscriminatorValue, serializeIdleSessionSignOut, type IdleSessionSignOut } from './idleSessionSignOut';
import { ImageTaggingChoice } from './imageTaggingChoice';
import { SharingCapabilities } from './sharingCapabilities';
import { SharingDomainRestrictionMode } from './sharingDomainRestrictionMode';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';
import { type Guid } from 'guid-typescript';

export function createSharepointSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSharepointSettings;
}
export function deserializeIntoSharepointSettings(sharepointSettings: SharepointSettings | undefined = {} as SharepointSettings) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(sharepointSettings),
        "allowedDomainGuidsForSyncApp": n => { sharepointSettings.allowedDomainGuidsForSyncApp = n.getCollectionOfPrimitiveValues<Guid>(); },
        "availableManagedPathsForSiteCreation": n => { sharepointSettings.availableManagedPathsForSiteCreation = n.getCollectionOfPrimitiveValues<string>(); },
        "deletedUserPersonalSiteRetentionPeriodInDays": n => { sharepointSettings.deletedUserPersonalSiteRetentionPeriodInDays = n.getNumberValue(); },
        "excludedFileExtensionsForSyncApp": n => { sharepointSettings.excludedFileExtensionsForSyncApp = n.getCollectionOfPrimitiveValues<string>(); },
        "idleSessionSignOut": n => { sharepointSettings.idleSessionSignOut = n.getObjectValue<IdleSessionSignOut>(createIdleSessionSignOutFromDiscriminatorValue); },
        "imageTaggingOption": n => { sharepointSettings.imageTaggingOption = n.getEnumValue<ImageTaggingChoice>(ImageTaggingChoice); },
        "isCommentingOnSitePagesEnabled": n => { sharepointSettings.isCommentingOnSitePagesEnabled = n.getBooleanValue(); },
        "isFileActivityNotificationEnabled": n => { sharepointSettings.isFileActivityNotificationEnabled = n.getBooleanValue(); },
        "isLegacyAuthProtocolsEnabled": n => { sharepointSettings.isLegacyAuthProtocolsEnabled = n.getBooleanValue(); },
        "isLoopEnabled": n => { sharepointSettings.isLoopEnabled = n.getBooleanValue(); },
        "isMacSyncAppEnabled": n => { sharepointSettings.isMacSyncAppEnabled = n.getBooleanValue(); },
        "isRequireAcceptingUserToMatchInvitedUserEnabled": n => { sharepointSettings.isRequireAcceptingUserToMatchInvitedUserEnabled = n.getBooleanValue(); },
        "isResharingByExternalUsersEnabled": n => { sharepointSettings.isResharingByExternalUsersEnabled = n.getBooleanValue(); },
        "isSharePointMobileNotificationEnabled": n => { sharepointSettings.isSharePointMobileNotificationEnabled = n.getBooleanValue(); },
        "isSharePointNewsfeedEnabled": n => { sharepointSettings.isSharePointNewsfeedEnabled = n.getBooleanValue(); },
        "isSiteCreationEnabled": n => { sharepointSettings.isSiteCreationEnabled = n.getBooleanValue(); },
        "isSiteCreationUIEnabled": n => { sharepointSettings.isSiteCreationUIEnabled = n.getBooleanValue(); },
        "isSitePagesCreationEnabled": n => { sharepointSettings.isSitePagesCreationEnabled = n.getBooleanValue(); },
        "isSitesStorageLimitAutomatic": n => { sharepointSettings.isSitesStorageLimitAutomatic = n.getBooleanValue(); },
        "isSyncButtonHiddenOnPersonalSite": n => { sharepointSettings.isSyncButtonHiddenOnPersonalSite = n.getBooleanValue(); },
        "isUnmanagedSyncAppForTenantRestricted": n => { sharepointSettings.isUnmanagedSyncAppForTenantRestricted = n.getBooleanValue(); },
        "personalSiteDefaultStorageLimitInMB": n => { sharepointSettings.personalSiteDefaultStorageLimitInMB = n.getNumberValue(); },
        "sharingAllowedDomainList": n => { sharepointSettings.sharingAllowedDomainList = n.getCollectionOfPrimitiveValues<string>(); },
        "sharingBlockedDomainList": n => { sharepointSettings.sharingBlockedDomainList = n.getCollectionOfPrimitiveValues<string>(); },
        "sharingCapability": n => { sharepointSettings.sharingCapability = n.getEnumValue<SharingCapabilities>(SharingCapabilities); },
        "sharingDomainRestrictionMode": n => { sharepointSettings.sharingDomainRestrictionMode = n.getEnumValue<SharingDomainRestrictionMode>(SharingDomainRestrictionMode); },
        "siteCreationDefaultManagedPath": n => { sharepointSettings.siteCreationDefaultManagedPath = n.getStringValue(); },
        "siteCreationDefaultStorageLimitInMB": n => { sharepointSettings.siteCreationDefaultStorageLimitInMB = n.getNumberValue(); },
        "tenantDefaultTimezone": n => { sharepointSettings.tenantDefaultTimezone = n.getStringValue(); },
    }
}
export function serializeSharepointSettings(writer: SerializationWriter, sharepointSettings: SharepointSettings | undefined = {} as SharepointSettings) : void {
        serializeEntity(writer, sharepointSettings)
        writer.writeCollectionOfPrimitiveValues<Guid>("allowedDomainGuidsForSyncApp", sharepointSettings.allowedDomainGuidsForSyncApp);
        writer.writeCollectionOfPrimitiveValues<string>("availableManagedPathsForSiteCreation", sharepointSettings.availableManagedPathsForSiteCreation);
        writer.writeNumberValue("deletedUserPersonalSiteRetentionPeriodInDays", sharepointSettings.deletedUserPersonalSiteRetentionPeriodInDays);
        writer.writeCollectionOfPrimitiveValues<string>("excludedFileExtensionsForSyncApp", sharepointSettings.excludedFileExtensionsForSyncApp);
        writer.writeObjectValue<IdleSessionSignOut>("idleSessionSignOut", sharepointSettings.idleSessionSignOut, );
        writer.writeEnumValue<ImageTaggingChoice>("imageTaggingOption", sharepointSettings.imageTaggingOption);
        writer.writeBooleanValue("isCommentingOnSitePagesEnabled", sharepointSettings.isCommentingOnSitePagesEnabled);
        writer.writeBooleanValue("isFileActivityNotificationEnabled", sharepointSettings.isFileActivityNotificationEnabled);
        writer.writeBooleanValue("isLegacyAuthProtocolsEnabled", sharepointSettings.isLegacyAuthProtocolsEnabled);
        writer.writeBooleanValue("isLoopEnabled", sharepointSettings.isLoopEnabled);
        writer.writeBooleanValue("isMacSyncAppEnabled", sharepointSettings.isMacSyncAppEnabled);
        writer.writeBooleanValue("isRequireAcceptingUserToMatchInvitedUserEnabled", sharepointSettings.isRequireAcceptingUserToMatchInvitedUserEnabled);
        writer.writeBooleanValue("isResharingByExternalUsersEnabled", sharepointSettings.isResharingByExternalUsersEnabled);
        writer.writeBooleanValue("isSharePointMobileNotificationEnabled", sharepointSettings.isSharePointMobileNotificationEnabled);
        writer.writeBooleanValue("isSharePointNewsfeedEnabled", sharepointSettings.isSharePointNewsfeedEnabled);
        writer.writeBooleanValue("isSiteCreationEnabled", sharepointSettings.isSiteCreationEnabled);
        writer.writeBooleanValue("isSiteCreationUIEnabled", sharepointSettings.isSiteCreationUIEnabled);
        writer.writeBooleanValue("isSitePagesCreationEnabled", sharepointSettings.isSitePagesCreationEnabled);
        writer.writeBooleanValue("isSitesStorageLimitAutomatic", sharepointSettings.isSitesStorageLimitAutomatic);
        writer.writeBooleanValue("isSyncButtonHiddenOnPersonalSite", sharepointSettings.isSyncButtonHiddenOnPersonalSite);
        writer.writeBooleanValue("isUnmanagedSyncAppForTenantRestricted", sharepointSettings.isUnmanagedSyncAppForTenantRestricted);
        writer.writeNumberValue("personalSiteDefaultStorageLimitInMB", sharepointSettings.personalSiteDefaultStorageLimitInMB);
        writer.writeCollectionOfPrimitiveValues<string>("sharingAllowedDomainList", sharepointSettings.sharingAllowedDomainList);
        writer.writeCollectionOfPrimitiveValues<string>("sharingBlockedDomainList", sharepointSettings.sharingBlockedDomainList);
        writer.writeEnumValue<SharingCapabilities>("sharingCapability", sharepointSettings.sharingCapability);
        writer.writeEnumValue<SharingDomainRestrictionMode>("sharingDomainRestrictionMode", sharepointSettings.sharingDomainRestrictionMode);
        writer.writeStringValue("siteCreationDefaultManagedPath", sharepointSettings.siteCreationDefaultManagedPath);
        writer.writeNumberValue("siteCreationDefaultStorageLimitInMB", sharepointSettings.siteCreationDefaultStorageLimitInMB);
        writer.writeStringValue("tenantDefaultTimezone", sharepointSettings.tenantDefaultTimezone);
}
export interface SharepointSettings extends Entity, Parsable {
    /**
     * Collection of trusted domain GUIDs for the OneDrive sync app.
     */
    allowedDomainGuidsForSyncApp?: Guid[];
    /**
     * Collection of managed paths available for site creation. Read-only.
     */
    availableManagedPathsForSiteCreation?: string[];
    /**
     * The number of days for preserving a deleted user's OneDrive.
     */
    deletedUserPersonalSiteRetentionPeriodInDays?: number;
    /**
     * Collection of file extensions not uploaded by the OneDrive sync app.
     */
    excludedFileExtensionsForSyncApp?: string[];
    /**
     * Specifies the idle session sign-out policies for the tenant.
     */
    idleSessionSignOut?: IdleSessionSignOut;
    /**
     * Specifies the image tagging option for the tenant. Possible values are: disabled, basic, enhanced.
     */
    imageTaggingOption?: ImageTaggingChoice;
    /**
     * Indicates whether comments are allowed on modern site pages in SharePoint.
     */
    isCommentingOnSitePagesEnabled?: boolean;
    /**
     * Indicates whether push notifications are enabled for OneDrive events.
     */
    isFileActivityNotificationEnabled?: boolean;
    /**
     * Indicates whether legacy authentication protocols are enabled for the tenant.
     */
    isLegacyAuthProtocolsEnabled?: boolean;
    /**
     * Indicates whether if Fluid Framework is allowed on SharePoint sites.
     */
    isLoopEnabled?: boolean;
    /**
     * Indicates whether files can be synced using the OneDrive sync app for Mac.
     */
    isMacSyncAppEnabled?: boolean;
    /**
     * Indicates whether guests must sign in using the same account to which sharing invitations are sent.
     */
    isRequireAcceptingUserToMatchInvitedUserEnabled?: boolean;
    /**
     * Indicates whether guests are allowed to reshare files, folders, and sites they don't own.
     */
    isResharingByExternalUsersEnabled?: boolean;
    /**
     * Indicates whether mobile push notifications are enabled for SharePoint.
     */
    isSharePointMobileNotificationEnabled?: boolean;
    /**
     * Indicates whether the newsfeed is allowed on the modern site pages in SharePoint.
     */
    isSharePointNewsfeedEnabled?: boolean;
    /**
     * Indicates whether users are allowed to create sites.
     */
    isSiteCreationEnabled?: boolean;
    /**
     * Indicates whether the UI commands for creating sites are shown.
     */
    isSiteCreationUIEnabled?: boolean;
    /**
     * Indicates whether creating new modern pages is allowed on SharePoint sites.
     */
    isSitePagesCreationEnabled?: boolean;
    /**
     * Indicates whether site storage space is automatically managed or if specific storage limits are set per site.
     */
    isSitesStorageLimitAutomatic?: boolean;
    /**
     * Indicates whether the sync button in OneDrive is hidden.
     */
    isSyncButtonHiddenOnPersonalSite?: boolean;
    /**
     * Indicates whether users are allowed to sync files only on PCs joined to specific domains.
     */
    isUnmanagedSyncAppForTenantRestricted?: boolean;
    /**
     * The default OneDrive storage limit for all new and existing users who are assigned a qualifying license. Measured in megabytes (MB).
     */
    personalSiteDefaultStorageLimitInMB?: number;
    /**
     * Collection of email domains that are allowed for sharing outside the organization.
     */
    sharingAllowedDomainList?: string[];
    /**
     * Collection of email domains that are blocked for sharing outside the organization.
     */
    sharingBlockedDomainList?: string[];
    /**
     * Sharing capability for the tenant. Possible values are: disabled, externalUserSharingOnly, externalUserAndGuestSharing, existingExternalUserSharingOnly.
     */
    sharingCapability?: SharingCapabilities;
    /**
     * Specifies the external sharing mode for domains. Possible values are: none, allowList, blockList.
     */
    sharingDomainRestrictionMode?: SharingDomainRestrictionMode;
    /**
     * The value of the team site managed path. This is the path under which new team sites will be created.
     */
    siteCreationDefaultManagedPath?: string;
    /**
     * The default storage quota for a new site upon creation. Measured in megabytes (MB).
     */
    siteCreationDefaultStorageLimitInMB?: number;
    /**
     * The default timezone of a tenant for newly created sites. For a list of possible values, see SPRegionalSettings.TimeZones property.
     */
    tenantDefaultTimezone?: string;
}
// tslint:enable
// eslint-enable
