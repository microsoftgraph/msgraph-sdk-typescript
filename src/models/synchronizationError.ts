// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createSynchronizationErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoSynchronizationError;
}
export function deserializeIntoSynchronizationError(synchronizationError: SynchronizationError | undefined = {} as SynchronizationError) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { synchronizationError.code = n.getStringValue(); },
        "message": n => { synchronizationError.message = n.getStringValue(); },
        "@odata.type": n => { synchronizationError.odataType = n.getStringValue(); },
        "tenantActionable": n => { synchronizationError.tenantActionable = n.getBooleanValue(); },
    }
}
export function serializeSynchronizationError(writer: SerializationWriter, synchronizationError: SynchronizationError | undefined = {} as SynchronizationError) : void {
        writer.writeStringValue("code", synchronizationError.code);
        writer.writeStringValue("message", synchronizationError.message);
        writer.writeStringValue("@odata.type", synchronizationError.odataType);
        writer.writeBooleanValue("tenantActionable", synchronizationError.tenantActionable);
        writer.writeAdditionalData(synchronizationError.additionalData);
}
export interface SynchronizationError extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The error code. For example, AzureDirectoryB2BManagementPolicyCheckFailure.
     */
    code?: string;
    /**
     * The error message. For example, Policy permitting auto-redemption of invitations not configured.
     */
    message?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The action to take to resolve the error. For example, false.
     */
    tenantActionable?: boolean;
}
// tslint:enable
// eslint-enable
