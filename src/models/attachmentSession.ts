// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { deserializeIntoEntity, serializeEntity, type Entity } from './entity';
import { type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AttachmentSession extends Entity, Parsable {
    /**
     * The content streams that are uploaded.
     */
    content?: string;
    /**
     * The date and time in UTC when the upload session will expire. The complete file must be uploaded before this expiration time is reached.
     */
    expirationDateTime?: Date;
    /**
     * Indicates a single value {start} that represents the location in the file where the next upload should begin.
     */
    nextExpectedRanges?: string[];
}
export function createAttachmentSessionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAttachmentSession;
}
export function deserializeIntoAttachmentSession(attachmentSession: AttachmentSession | undefined = {} as AttachmentSession) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(attachmentSession),
        "content": n => { attachmentSession.content = n.getStringValue(); },
        "expirationDateTime": n => { attachmentSession.expirationDateTime = n.getDateValue(); },
        "nextExpectedRanges": n => { attachmentSession.nextExpectedRanges = n.getCollectionOfPrimitiveValues<string>(); },
    }
}
export function serializeAttachmentSession(writer: SerializationWriter, attachmentSession: AttachmentSession | undefined = {} as AttachmentSession) : void {
    serializeEntity(writer, attachmentSession)
    writer.writeStringValue("content", attachmentSession.content);
    writer.writeDateValue("expirationDateTime", attachmentSession.expirationDateTime);
    writer.writeCollectionOfPrimitiveValues<string>("nextExpectedRanges", attachmentSession.nextExpectedRanges);
}
// tslint:enable
// eslint-enable
