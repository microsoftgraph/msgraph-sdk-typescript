// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { BookingsAvailabilityStatus } from './bookingsAvailabilityStatus';
import { createDateTimeTimeZoneFromDiscriminatorValue, serializeDateTimeTimeZone, type DateTimeTimeZone } from './dateTimeTimeZone';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AvailabilityItem extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The endDateTime property
     */
    endDateTime?: DateTimeTimeZone;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * Indicates the service ID for 1:n appointments. If the appointment is of type 1:n, this field is present, otherwise, null.
     */
    serviceId?: string;
    /**
     * The startDateTime property
     */
    startDateTime?: DateTimeTimeZone;
    /**
     * The status of the staff member. Possible values are: available, busy, slotsAvailable, outOfOffice, unknownFutureValue.
     */
    status?: BookingsAvailabilityStatus;
}
export function createAvailabilityItemFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    return deserializeIntoAvailabilityItem;
}
export function deserializeIntoAvailabilityItem(availabilityItem: AvailabilityItem | undefined = {} as AvailabilityItem) : Record<string, (node: ParseNode) => void> {
    return {
        "endDateTime": n => { availabilityItem.endDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "@odata.type": n => { availabilityItem.odataType = n.getStringValue(); },
        "serviceId": n => { availabilityItem.serviceId = n.getStringValue(); },
        "startDateTime": n => { availabilityItem.startDateTime = n.getObjectValue<DateTimeTimeZone>(createDateTimeTimeZoneFromDiscriminatorValue); },
        "status": n => { availabilityItem.status = n.getEnumValue<BookingsAvailabilityStatus>(BookingsAvailabilityStatus); },
    }
}
export function serializeAvailabilityItem(writer: SerializationWriter, availabilityItem: AvailabilityItem | undefined = {} as AvailabilityItem) : void {
        writer.writeObjectValue<DateTimeTimeZone>("endDateTime", availabilityItem.endDateTime, serializeDateTimeTimeZone);
        writer.writeStringValue("@odata.type", availabilityItem.odataType);
        writer.writeStringValue("serviceId", availabilityItem.serviceId);
        writer.writeObjectValue<DateTimeTimeZone>("startDateTime", availabilityItem.startDateTime, serializeDateTimeTimeZone);
        writer.writeEnumValue<BookingsAvailabilityStatus>("status", availabilityItem.status);
        writer.writeAdditionalData(availabilityItem.additionalData);
}
// tslint:enable
// eslint-enable
