/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createSolutionsRootFromDiscriminatorValue, serializeSolutionsRoot, type SolutionsRoot } from '../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../models/oDataErrors/';
import { BookingBusinessesRequestBuilderNavigationMetadata, BookingBusinessesRequestBuilderRequestsMetadata, BookingBusinessesRequestBuilderUriTemplate, type BookingBusinessesRequestBuilder } from './bookingBusinesses/';
import { BookingCurrenciesRequestBuilderNavigationMetadata, BookingCurrenciesRequestBuilderRequestsMetadata, BookingCurrenciesRequestBuilderUriTemplate, type BookingCurrenciesRequestBuilder } from './bookingCurrencies/';
import { type VirtualEventsRequestBuilder, VirtualEventsRequestBuilderNavigationMetadata, VirtualEventsRequestBuilderRequestsMetadata, VirtualEventsRequestBuilderUriTemplate } from './virtualEvents/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the solutionsRoot singleton.
 */
export interface SolutionsRequestBuilder extends BaseRequestBuilder<SolutionsRequestBuilder> {
    /**
     * Provides operations to manage the bookingBusinesses property of the microsoft.graph.solutionsRoot entity.
     */
    get bookingBusinesses(): BookingBusinessesRequestBuilder;
    /**
     * Provides operations to manage the bookingCurrencies property of the microsoft.graph.solutionsRoot entity.
     */
    get bookingCurrencies(): BookingCurrenciesRequestBuilder;
    /**
     * Provides operations to manage the virtualEvents property of the microsoft.graph.solutionsRoot entity.
     */
    get virtualEvents(): VirtualEventsRequestBuilder;
    /**
     * Get solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of SolutionsRoot
     */
     get(requestConfiguration?: RequestConfiguration<SolutionsRequestBuilderGetQueryParameters> | undefined) : Promise<SolutionsRoot | undefined>;
    /**
     * Update solutions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of SolutionsRoot
     */
     patch(body: SolutionsRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<SolutionsRoot | undefined>;
    /**
     * Get solutions
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<SolutionsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update solutions
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: SolutionsRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get solutions
 */
export interface SolutionsRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const SolutionsRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const SolutionsRequestBuilderNavigationMetadata: Record<Exclude<keyof SolutionsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    bookingBusinesses: {
        uriTemplate: BookingBusinessesRequestBuilderUriTemplate,
        requestsMetadata: BookingBusinessesRequestBuilderRequestsMetadata,
        navigationMetadata: BookingBusinessesRequestBuilderNavigationMetadata,
    },
    bookingCurrencies: {
        uriTemplate: BookingCurrenciesRequestBuilderUriTemplate,
        requestsMetadata: BookingCurrenciesRequestBuilderRequestsMetadata,
        navigationMetadata: BookingCurrenciesRequestBuilderNavigationMetadata,
    },
    virtualEvents: {
        uriTemplate: VirtualEventsRequestBuilderUriTemplate,
        requestsMetadata: VirtualEventsRequestBuilderRequestsMetadata,
        navigationMetadata: VirtualEventsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const SolutionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSolutionsRootFromDiscriminatorValue,
        queryParametersMapper: SolutionsRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createSolutionsRootFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeSolutionsRoot,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const SolutionsRequestBuilderUriTemplate = "{+baseurl}/solutions{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
