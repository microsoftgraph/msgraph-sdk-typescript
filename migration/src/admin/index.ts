/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAdminFromDiscriminatorValue, serializeAdmin, type Admin } from '../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../models/oDataErrors/';
import { EdgeRequestBuilderNavigationMetadata, EdgeRequestBuilderRequestsMetadata, EdgeRequestBuilderUriTemplate, type EdgeRequestBuilder } from './edge/';
import { PeopleRequestBuilderNavigationMetadata, PeopleRequestBuilderRequestsMetadata, PeopleRequestBuilderUriTemplate, type PeopleRequestBuilder } from './people/';
import { ServiceAnnouncementRequestBuilderNavigationMetadata, ServiceAnnouncementRequestBuilderRequestsMetadata, ServiceAnnouncementRequestBuilderUriTemplate, type ServiceAnnouncementRequestBuilder } from './serviceAnnouncement/';
import { SharepointRequestBuilderNavigationMetadata, SharepointRequestBuilderRequestsMetadata, SharepointRequestBuilderUriTemplate, type SharepointRequestBuilder } from './sharepoint/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the admin singleton.
 */
export interface AdminRequestBuilder extends BaseRequestBuilder<AdminRequestBuilder> {
    /**
     * Provides operations to manage the edge property of the microsoft.graph.admin entity.
     */
    get edge(): EdgeRequestBuilder;
    /**
     * Provides operations to manage the people property of the microsoft.graph.admin entity.
     */
    get people(): PeopleRequestBuilder;
    /**
     * Provides operations to manage the serviceAnnouncement property of the microsoft.graph.admin entity.
     */
    get serviceAnnouncement(): ServiceAnnouncementRequestBuilder;
    /**
     * Provides operations to manage the sharepoint property of the microsoft.graph.admin entity.
     */
    get sharepoint(): SharepointRequestBuilder;
    /**
     * Get admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Admin
     */
     get(requestConfiguration?: RequestConfiguration<AdminRequestBuilderGetQueryParameters> | undefined) : Promise<Admin | undefined>;
    /**
     * Update admin
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Admin
     */
     patch(body: Admin, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Admin | undefined>;
    /**
     * Get admin
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AdminRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update admin
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Admin, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get admin
 */
export interface AdminRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AdminRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AdminRequestBuilderNavigationMetadata: Record<Exclude<keyof AdminRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    edge: {
        uriTemplate: EdgeRequestBuilderUriTemplate,
        requestsMetadata: EdgeRequestBuilderRequestsMetadata,
        navigationMetadata: EdgeRequestBuilderNavigationMetadata,
    },
    people: {
        uriTemplate: PeopleRequestBuilderUriTemplate,
        requestsMetadata: PeopleRequestBuilderRequestsMetadata,
        navigationMetadata: PeopleRequestBuilderNavigationMetadata,
    },
    serviceAnnouncement: {
        uriTemplate: ServiceAnnouncementRequestBuilderUriTemplate,
        requestsMetadata: ServiceAnnouncementRequestBuilderRequestsMetadata,
        navigationMetadata: ServiceAnnouncementRequestBuilderNavigationMetadata,
    },
    sharepoint: {
        uriTemplate: SharepointRequestBuilderUriTemplate,
        requestsMetadata: SharepointRequestBuilderRequestsMetadata,
        navigationMetadata: SharepointRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AdminRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAdminFromDiscriminatorValue,
        queryParametersMapper: AdminRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAdminFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAdmin,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const AdminRequestBuilderUriTemplate = "{+baseurl}/admin{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
