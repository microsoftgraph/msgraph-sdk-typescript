/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAccessPackageResourceRoleScopeFromDiscriminatorValue, serializeAccessPackageResourceRoleScope, type AccessPackageResourceRoleScope } from '../../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../models/oDataErrors/';
import { RoleRequestBuilderNavigationMetadata, RoleRequestBuilderRequestsMetadata, RoleRequestBuilderUriTemplate, type RoleRequestBuilder } from './role/';
import { ScopeRequestBuilderNavigationMetadata, ScopeRequestBuilderRequestsMetadata, ScopeRequestBuilderUriTemplate, type ScopeRequestBuilder } from './scope/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the resourceRoleScopes property of the microsoft.graph.entitlementManagement entity.
 */
export interface AccessPackageResourceRoleScopeItemRequestBuilder extends BaseRequestBuilder<AccessPackageResourceRoleScopeItemRequestBuilder> {
    /**
     * Provides operations to manage the role property of the microsoft.graph.accessPackageResourceRoleScope entity.
     */
    get role(): RoleRequestBuilder;
    /**
     * Provides operations to manage the scope property of the microsoft.graph.accessPackageResourceRoleScope entity.
     */
    get scope(): ScopeRequestBuilder;
    /**
     * Delete navigation property resourceRoleScopes for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get resourceRoleScopes from identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccessPackageResourceRoleScope
     */
     get(requestConfiguration?: RequestConfiguration<AccessPackageResourceRoleScopeItemRequestBuilderGetQueryParameters> | undefined) : Promise<AccessPackageResourceRoleScope | undefined>;
    /**
     * Update the navigation property resourceRoleScopes in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccessPackageResourceRoleScope
     */
     patch(body: AccessPackageResourceRoleScope, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AccessPackageResourceRoleScope | undefined>;
    /**
     * Delete navigation property resourceRoleScopes for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get resourceRoleScopes from identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AccessPackageResourceRoleScopeItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property resourceRoleScopes in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: AccessPackageResourceRoleScope, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get resourceRoleScopes from identityGovernance
 */
export interface AccessPackageResourceRoleScopeItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AccessPackageResourceRoleScopeItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AccessPackageResourceRoleScopeItemRequestBuilderNavigationMetadata: Record<Exclude<keyof AccessPackageResourceRoleScopeItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    role: {
        uriTemplate: RoleRequestBuilderUriTemplate,
        requestsMetadata: RoleRequestBuilderRequestsMetadata,
        navigationMetadata: RoleRequestBuilderNavigationMetadata,
    },
    scope: {
        uriTemplate: ScopeRequestBuilderUriTemplate,
        requestsMetadata: ScopeRequestBuilderRequestsMetadata,
        navigationMetadata: ScopeRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AccessPackageResourceRoleScopeItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAccessPackageResourceRoleScopeFromDiscriminatorValue,
        queryParametersMapper: AccessPackageResourceRoleScopeItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAccessPackageResourceRoleScopeFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAccessPackageResourceRoleScope,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const AccessPackageResourceRoleScopeItemRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/entitlementManagement/resourceRoleScopes/{accessPackageResourceRoleScope%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
