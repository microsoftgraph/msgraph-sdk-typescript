/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createEntitlementManagementFromDiscriminatorValue, serializeEntitlementManagement, type EntitlementManagement } from '../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../models/oDataErrors/';
import { AccessPackageAssignmentApprovalsRequestBuilderNavigationMetadata, AccessPackageAssignmentApprovalsRequestBuilderRequestsMetadata, AccessPackageAssignmentApprovalsRequestBuilderUriTemplate, type AccessPackageAssignmentApprovalsRequestBuilder } from './accessPackageAssignmentApprovals/';
import { AccessPackagesRequestBuilderNavigationMetadata, AccessPackagesRequestBuilderRequestsMetadata, AccessPackagesRequestBuilderUriTemplate, type AccessPackagesRequestBuilder } from './accessPackages/';
import { AssignmentPoliciesRequestBuilderNavigationMetadata, AssignmentPoliciesRequestBuilderRequestsMetadata, AssignmentPoliciesRequestBuilderUriTemplate, type AssignmentPoliciesRequestBuilder } from './assignmentPolicies/';
import { AssignmentRequestsRequestBuilderNavigationMetadata, AssignmentRequestsRequestBuilderRequestsMetadata, AssignmentRequestsRequestBuilderUriTemplate, type AssignmentRequestsRequestBuilder } from './assignmentRequests/';
import { AssignmentsRequestBuilderNavigationMetadata, AssignmentsRequestBuilderRequestsMetadata, AssignmentsRequestBuilderUriTemplate, type AssignmentsRequestBuilder } from './assignments/';
import { CatalogsRequestBuilderNavigationMetadata, CatalogsRequestBuilderRequestsMetadata, CatalogsRequestBuilderUriTemplate, type CatalogsRequestBuilder } from './catalogs/';
import { ConnectedOrganizationsRequestBuilderNavigationMetadata, ConnectedOrganizationsRequestBuilderRequestsMetadata, ConnectedOrganizationsRequestBuilderUriTemplate, type ConnectedOrganizationsRequestBuilder } from './connectedOrganizations/';
import { ResourceEnvironmentsRequestBuilderNavigationMetadata, ResourceEnvironmentsRequestBuilderRequestsMetadata, ResourceEnvironmentsRequestBuilderUriTemplate, type ResourceEnvironmentsRequestBuilder } from './resourceEnvironments/';
import { ResourceRequestsRequestBuilderNavigationMetadata, ResourceRequestsRequestBuilderRequestsMetadata, ResourceRequestsRequestBuilderUriTemplate, type ResourceRequestsRequestBuilder } from './resourceRequests/';
import { ResourceRoleScopesRequestBuilderNavigationMetadata, ResourceRoleScopesRequestBuilderRequestsMetadata, ResourceRoleScopesRequestBuilderUriTemplate, type ResourceRoleScopesRequestBuilder } from './resourceRoleScopes/';
import { ResourcesRequestBuilderNavigationMetadata, ResourcesRequestBuilderRequestsMetadata, ResourcesRequestBuilderUriTemplate, type ResourcesRequestBuilder } from './resources/';
import { SettingsRequestBuilderRequestsMetadata, SettingsRequestBuilderUriTemplate, type SettingsRequestBuilder } from './settings/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the entitlementManagement property of the microsoft.graph.identityGovernance entity.
 */
export interface EntitlementManagementRequestBuilder extends BaseRequestBuilder<EntitlementManagementRequestBuilder> {
    /**
     * Provides operations to manage the accessPackageAssignmentApprovals property of the microsoft.graph.entitlementManagement entity.
     */
    get accessPackageAssignmentApprovals(): AccessPackageAssignmentApprovalsRequestBuilder;
    /**
     * Provides operations to manage the accessPackages property of the microsoft.graph.entitlementManagement entity.
     */
    get accessPackages(): AccessPackagesRequestBuilder;
    /**
     * Provides operations to manage the assignmentPolicies property of the microsoft.graph.entitlementManagement entity.
     */
    get assignmentPolicies(): AssignmentPoliciesRequestBuilder;
    /**
     * Provides operations to manage the assignmentRequests property of the microsoft.graph.entitlementManagement entity.
     */
    get assignmentRequests(): AssignmentRequestsRequestBuilder;
    /**
     * Provides operations to manage the assignments property of the microsoft.graph.entitlementManagement entity.
     */
    get assignments(): AssignmentsRequestBuilder;
    /**
     * Provides operations to manage the catalogs property of the microsoft.graph.entitlementManagement entity.
     */
    get catalogs(): CatalogsRequestBuilder;
    /**
     * Provides operations to manage the connectedOrganizations property of the microsoft.graph.entitlementManagement entity.
     */
    get connectedOrganizations(): ConnectedOrganizationsRequestBuilder;
    /**
     * Provides operations to manage the resourceEnvironments property of the microsoft.graph.entitlementManagement entity.
     */
    get resourceEnvironments(): ResourceEnvironmentsRequestBuilder;
    /**
     * Provides operations to manage the resourceRequests property of the microsoft.graph.entitlementManagement entity.
     */
    get resourceRequests(): ResourceRequestsRequestBuilder;
    /**
     * Provides operations to manage the resourceRoleScopes property of the microsoft.graph.entitlementManagement entity.
     */
    get resourceRoleScopes(): ResourceRoleScopesRequestBuilder;
    /**
     * Provides operations to manage the resources property of the microsoft.graph.entitlementManagement entity.
     */
    get resources(): ResourcesRequestBuilder;
    /**
     * Provides operations to manage the settings property of the microsoft.graph.entitlementManagement entity.
     */
    get settings(): SettingsRequestBuilder;
    /**
     * Delete navigation property entitlementManagement for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get entitlementManagement from identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of EntitlementManagement
     */
     get(requestConfiguration?: RequestConfiguration<EntitlementManagementRequestBuilderGetQueryParameters> | undefined) : Promise<EntitlementManagement | undefined>;
    /**
     * Update the navigation property entitlementManagement in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of EntitlementManagement
     */
     patch(body: EntitlementManagement, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<EntitlementManagement | undefined>;
    /**
     * Delete navigation property entitlementManagement for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get entitlementManagement from identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EntitlementManagementRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property entitlementManagement in identityGovernance
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: EntitlementManagement, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get entitlementManagement from identityGovernance
 */
export interface EntitlementManagementRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const EntitlementManagementRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EntitlementManagementRequestBuilderNavigationMetadata: Record<Exclude<keyof EntitlementManagementRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    accessPackageAssignmentApprovals: {
        uriTemplate: AccessPackageAssignmentApprovalsRequestBuilderUriTemplate,
        requestsMetadata: AccessPackageAssignmentApprovalsRequestBuilderRequestsMetadata,
        navigationMetadata: AccessPackageAssignmentApprovalsRequestBuilderNavigationMetadata,
    },
    accessPackages: {
        uriTemplate: AccessPackagesRequestBuilderUriTemplate,
        requestsMetadata: AccessPackagesRequestBuilderRequestsMetadata,
        navigationMetadata: AccessPackagesRequestBuilderNavigationMetadata,
    },
    assignmentPolicies: {
        uriTemplate: AssignmentPoliciesRequestBuilderUriTemplate,
        requestsMetadata: AssignmentPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: AssignmentPoliciesRequestBuilderNavigationMetadata,
    },
    assignmentRequests: {
        uriTemplate: AssignmentRequestsRequestBuilderUriTemplate,
        requestsMetadata: AssignmentRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: AssignmentRequestsRequestBuilderNavigationMetadata,
    },
    assignments: {
        uriTemplate: AssignmentsRequestBuilderUriTemplate,
        requestsMetadata: AssignmentsRequestBuilderRequestsMetadata,
        navigationMetadata: AssignmentsRequestBuilderNavigationMetadata,
    },
    catalogs: {
        uriTemplate: CatalogsRequestBuilderUriTemplate,
        requestsMetadata: CatalogsRequestBuilderRequestsMetadata,
        navigationMetadata: CatalogsRequestBuilderNavigationMetadata,
    },
    connectedOrganizations: {
        uriTemplate: ConnectedOrganizationsRequestBuilderUriTemplate,
        requestsMetadata: ConnectedOrganizationsRequestBuilderRequestsMetadata,
        navigationMetadata: ConnectedOrganizationsRequestBuilderNavigationMetadata,
    },
    resourceEnvironments: {
        uriTemplate: ResourceEnvironmentsRequestBuilderUriTemplate,
        requestsMetadata: ResourceEnvironmentsRequestBuilderRequestsMetadata,
        navigationMetadata: ResourceEnvironmentsRequestBuilderNavigationMetadata,
    },
    resourceRequests: {
        uriTemplate: ResourceRequestsRequestBuilderUriTemplate,
        requestsMetadata: ResourceRequestsRequestBuilderRequestsMetadata,
        navigationMetadata: ResourceRequestsRequestBuilderNavigationMetadata,
    },
    resourceRoleScopes: {
        uriTemplate: ResourceRoleScopesRequestBuilderUriTemplate,
        requestsMetadata: ResourceRoleScopesRequestBuilderRequestsMetadata,
        navigationMetadata: ResourceRoleScopesRequestBuilderNavigationMetadata,
    },
    resources: {
        uriTemplate: ResourcesRequestBuilderUriTemplate,
        requestsMetadata: ResourcesRequestBuilderRequestsMetadata,
        navigationMetadata: ResourcesRequestBuilderNavigationMetadata,
    },
    settings: {
        uriTemplate: SettingsRequestBuilderUriTemplate,
        requestsMetadata: SettingsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EntitlementManagementRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createEntitlementManagementFromDiscriminatorValue,
        queryParametersMapper: EntitlementManagementRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createEntitlementManagementFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeEntitlementManagement,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const EntitlementManagementRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/entitlementManagement{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
