/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createAccessReviewInstanceFromDiscriminatorValue, serializeAccessReviewInstance, type AccessReviewInstance } from '../../../../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../models/oDataErrors/';
import { AcceptRecommendationsRequestBuilderRequestsMetadata, AcceptRecommendationsRequestBuilderUriTemplate, type AcceptRecommendationsRequestBuilder } from './acceptRecommendations/';
import { ApplyDecisionsRequestBuilderRequestsMetadata, ApplyDecisionsRequestBuilderUriTemplate, type ApplyDecisionsRequestBuilder } from './applyDecisions/';
import { BatchRecordDecisionsRequestBuilderRequestsMetadata, BatchRecordDecisionsRequestBuilderUriTemplate, type BatchRecordDecisionsRequestBuilder } from './batchRecordDecisions/';
import { ContactedReviewersRequestBuilderNavigationMetadata, ContactedReviewersRequestBuilderRequestsMetadata, ContactedReviewersRequestBuilderUriTemplate, type ContactedReviewersRequestBuilder } from './contactedReviewers/';
import { DecisionsRequestBuilderNavigationMetadata, DecisionsRequestBuilderRequestsMetadata, DecisionsRequestBuilderUriTemplate, type DecisionsRequestBuilder } from './decisions/';
import { ResetDecisionsRequestBuilderRequestsMetadata, ResetDecisionsRequestBuilderUriTemplate, type ResetDecisionsRequestBuilder } from './resetDecisions/';
import { SendReminderRequestBuilderRequestsMetadata, SendReminderRequestBuilderUriTemplate, type SendReminderRequestBuilder } from './sendReminder/';
import { StagesRequestBuilderNavigationMetadata, StagesRequestBuilderRequestsMetadata, StagesRequestBuilderUriTemplate, type StagesRequestBuilder } from './stages/';
import { StopRequestBuilderRequestsMetadata, StopRequestBuilderUriTemplate, type StopRequestBuilder } from './stop/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the instances property of the microsoft.graph.accessReviewScheduleDefinition entity.
 */
export interface AccessReviewInstanceItemRequestBuilder extends BaseRequestBuilder<AccessReviewInstanceItemRequestBuilder> {
    /**
     * Provides operations to call the acceptRecommendations method.
     */
    get acceptRecommendations(): AcceptRecommendationsRequestBuilder;
    /**
     * Provides operations to call the applyDecisions method.
     */
    get applyDecisions(): ApplyDecisionsRequestBuilder;
    /**
     * Provides operations to call the batchRecordDecisions method.
     */
    get batchRecordDecisions(): BatchRecordDecisionsRequestBuilder;
    /**
     * Provides operations to manage the contactedReviewers property of the microsoft.graph.accessReviewInstance entity.
     */
    get contactedReviewers(): ContactedReviewersRequestBuilder;
    /**
     * Provides operations to manage the decisions property of the microsoft.graph.accessReviewInstance entity.
     */
    get decisions(): DecisionsRequestBuilder;
    /**
     * Provides operations to call the resetDecisions method.
     */
    get resetDecisions(): ResetDecisionsRequestBuilder;
    /**
     * Provides operations to call the sendReminder method.
     */
    get sendReminder(): SendReminderRequestBuilder;
    /**
     * Provides operations to manage the stages property of the microsoft.graph.accessReviewInstance entity.
     */
    get stages(): StagesRequestBuilder;
    /**
     * Provides operations to call the stop method.
     */
    get stop(): StopRequestBuilder;
    /**
     * Delete navigation property instances for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Read the properties and relationships of an accessReviewInstance object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccessReviewInstance
     * @see {@link https://learn.microsoft.com/graph/api/accessreviewinstance-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<AccessReviewInstanceItemRequestBuilderGetQueryParameters> | undefined) : Promise<AccessReviewInstance | undefined>;
    /**
     * Update the properties of an accessReviewInstance object. Only the reviewers and fallbackReviewers properties can be updated but the scope property is also required in the request body. You can only add reviewers to the fallbackReviewers property but can't remove existing fallbackReviewers. To update an accessReviewInstance, it's status must be InProgress.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of AccessReviewInstance
     * @see {@link https://learn.microsoft.com/graph/api/accessreviewinstance-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: AccessReviewInstance, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AccessReviewInstance | undefined>;
    /**
     * Delete navigation property instances for identityGovernance
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Read the properties and relationships of an accessReviewInstance object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AccessReviewInstanceItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of an accessReviewInstance object. Only the reviewers and fallbackReviewers properties can be updated but the scope property is also required in the request body. You can only add reviewers to the fallbackReviewers property but can't remove existing fallbackReviewers. To update an accessReviewInstance, it's status must be InProgress.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: AccessReviewInstance, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Read the properties and relationships of an accessReviewInstance object.
 */
export interface AccessReviewInstanceItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const AccessReviewInstanceItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AccessReviewInstanceItemRequestBuilderNavigationMetadata: Record<Exclude<keyof AccessReviewInstanceItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    acceptRecommendations: {
        uriTemplate: AcceptRecommendationsRequestBuilderUriTemplate,
        requestsMetadata: AcceptRecommendationsRequestBuilderRequestsMetadata,
    },
    applyDecisions: {
        uriTemplate: ApplyDecisionsRequestBuilderUriTemplate,
        requestsMetadata: ApplyDecisionsRequestBuilderRequestsMetadata,
    },
    batchRecordDecisions: {
        uriTemplate: BatchRecordDecisionsRequestBuilderUriTemplate,
        requestsMetadata: BatchRecordDecisionsRequestBuilderRequestsMetadata,
    },
    contactedReviewers: {
        uriTemplate: ContactedReviewersRequestBuilderUriTemplate,
        requestsMetadata: ContactedReviewersRequestBuilderRequestsMetadata,
        navigationMetadata: ContactedReviewersRequestBuilderNavigationMetadata,
    },
    decisions: {
        uriTemplate: DecisionsRequestBuilderUriTemplate,
        requestsMetadata: DecisionsRequestBuilderRequestsMetadata,
        navigationMetadata: DecisionsRequestBuilderNavigationMetadata,
    },
    resetDecisions: {
        uriTemplate: ResetDecisionsRequestBuilderUriTemplate,
        requestsMetadata: ResetDecisionsRequestBuilderRequestsMetadata,
    },
    sendReminder: {
        uriTemplate: SendReminderRequestBuilderUriTemplate,
        requestsMetadata: SendReminderRequestBuilderRequestsMetadata,
    },
    stages: {
        uriTemplate: StagesRequestBuilderUriTemplate,
        requestsMetadata: StagesRequestBuilderRequestsMetadata,
        navigationMetadata: StagesRequestBuilderNavigationMetadata,
    },
    stop: {
        uriTemplate: StopRequestBuilderUriTemplate,
        requestsMetadata: StopRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AccessReviewInstanceItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAccessReviewInstanceFromDiscriminatorValue,
        queryParametersMapper: AccessReviewInstanceItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createAccessReviewInstanceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAccessReviewInstance,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const AccessReviewInstanceItemRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/accessReviews/definitions/{accessReviewScheduleDefinition%2Did}/instances/{accessReviewInstance%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
