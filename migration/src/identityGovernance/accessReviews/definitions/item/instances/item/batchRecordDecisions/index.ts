/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../../models/oDataErrors/';
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface BatchRecordDecisionsPostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The decision property
     */
    decision?: string;
    /**
     * The justification property
     */
    justification?: string;
    /**
     * The principalId property
     */
    principalId?: string;
    /**
     * The resourceId property
     */
    resourceId?: string;
}
/**
 * Provides operations to call the batchRecordDecisions method.
 */
export interface BatchRecordDecisionsRequestBuilder extends BaseRequestBuilder<BatchRecordDecisionsRequestBuilder> {
    /**
     * Enables reviewers to review all accessReviewInstanceDecisionItem objects in batches by using principalId, resourceId, or neither.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @see {@link https://learn.microsoft.com/graph/api/accessreviewinstance-batchrecorddecisions?view=graph-rest-1.0|Find more info here}
     */
     post(body: BatchRecordDecisionsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Enables reviewers to review all accessReviewInstanceDecisionItem objects in batches by using principalId, resourceId, or neither.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: BatchRecordDecisionsPostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a batchRecordDecisionsPostRequestBody
 */
export function createBatchRecordDecisionsPostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoBatchRecordDecisionsPostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoBatchRecordDecisionsPostRequestBody(batchRecordDecisionsPostRequestBody: BatchRecordDecisionsPostRequestBody | undefined = {} as BatchRecordDecisionsPostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "decision": n => { batchRecordDecisionsPostRequestBody.decision = n.getStringValue(); },
        "justification": n => { batchRecordDecisionsPostRequestBody.justification = n.getStringValue(); },
        "principalId": n => { batchRecordDecisionsPostRequestBody.principalId = n.getStringValue(); },
        "resourceId": n => { batchRecordDecisionsPostRequestBody.resourceId = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeBatchRecordDecisionsPostRequestBody(writer: SerializationWriter, batchRecordDecisionsPostRequestBody: BatchRecordDecisionsPostRequestBody | undefined = {} as BatchRecordDecisionsPostRequestBody) : void {
    writer.writeStringValue("decision", batchRecordDecisionsPostRequestBody.decision);
    writer.writeStringValue("justification", batchRecordDecisionsPostRequestBody.justification);
    writer.writeStringValue("principalId", batchRecordDecisionsPostRequestBody.principalId);
    writer.writeStringValue("resourceId", batchRecordDecisionsPostRequestBody.resourceId);
    writer.writeAdditionalData(batchRecordDecisionsPostRequestBody.additionalData);
}
/**
 * Metadata for all the requests in the request builder.
 */
export const BatchRecordDecisionsRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeBatchRecordDecisionsPostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const BatchRecordDecisionsRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/accessReviews/definitions/{accessReviewScheduleDefinition%2Did}/instances/{accessReviewInstance%2Did}/batchRecordDecisions";
/* tslint:enable */
/* eslint-enable */
