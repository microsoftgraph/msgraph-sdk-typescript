/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createTaskFromDiscriminatorValue, type Task } from '../../../../../../models/identityGovernance/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../models/oDataErrors/';
import { TaskProcessingResultsRequestBuilderNavigationMetadata, TaskProcessingResultsRequestBuilderRequestsMetadata, TaskProcessingResultsRequestBuilderUriTemplate, type TaskProcessingResultsRequestBuilder } from './taskProcessingResults/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the tasks property of the microsoft.graph.identityGovernance.workflowTemplate entity.
 */
export interface TaskItemRequestBuilder extends BaseRequestBuilder<TaskItemRequestBuilder> {
    /**
     * Provides operations to manage the taskProcessingResults property of the microsoft.graph.identityGovernance.task entity.
     */
    get taskProcessingResults(): TaskProcessingResultsRequestBuilder;
    /**
     * Represents the configured tasks to execute and their execution sequence within a workflow. This relationship is expanded by default.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Task
     */
     get(requestConfiguration?: RequestConfiguration<TaskItemRequestBuilderGetQueryParameters> | undefined) : Promise<Task | undefined>;
    /**
     * Represents the configured tasks to execute and their execution sequence within a workflow. This relationship is expanded by default.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TaskItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * Represents the configured tasks to execute and their execution sequence within a workflow. This relationship is expanded by default.
 */
export interface TaskItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TaskItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TaskItemRequestBuilderNavigationMetadata: Record<Exclude<keyof TaskItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    taskProcessingResults: {
        uriTemplate: TaskProcessingResultsRequestBuilderUriTemplate,
        requestsMetadata: TaskProcessingResultsRequestBuilderRequestsMetadata,
        navigationMetadata: TaskProcessingResultsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TaskItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTaskFromDiscriminatorValue,
        queryParametersMapper: TaskItemRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Uri template for the request builder.
 */
export const TaskItemRequestBuilderUriTemplate = "{+baseurl}/identityGovernance/lifecycleWorkflows/workflowTemplates/{workflowTemplate%2Did}/tasks/{task%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
