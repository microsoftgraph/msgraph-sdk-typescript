/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createConversationThreadFromDiscriminatorValue, serializeConversationThread, type ConversationThread } from '../../../../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../models/oDataErrors/';
import { PostsRequestBuilderNavigationMetadata, PostsRequestBuilderRequestsMetadata, PostsRequestBuilderUriTemplate, type PostsRequestBuilder } from './posts/';
import { ReplyRequestBuilderRequestsMetadata, ReplyRequestBuilderUriTemplate, type ReplyRequestBuilder } from './reply/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the threads property of the microsoft.graph.conversation entity.
 */
export interface ConversationThreadItemRequestBuilder extends BaseRequestBuilder<ConversationThreadItemRequestBuilder> {
    /**
     * Provides operations to manage the posts property of the microsoft.graph.conversationThread entity.
     */
    get posts(): PostsRequestBuilder;
    /**
     * Provides operations to call the reply method.
     */
    get reply(): ReplyRequestBuilder;
    /**
     * Delete navigation property threads for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * A collection of all the conversation threads in the conversation. A navigation property. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ConversationThread
     */
     get(requestConfiguration?: RequestConfiguration<ConversationThreadItemRequestBuilderGetQueryParameters> | undefined) : Promise<ConversationThread | undefined>;
    /**
     * Update the navigation property threads in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ConversationThread
     */
     patch(body: ConversationThread, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ConversationThread | undefined>;
    /**
     * Delete navigation property threads for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * A collection of all the conversation threads in the conversation. A navigation property. Read-only. Nullable.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ConversationThreadItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property threads in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: ConversationThread, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * A collection of all the conversation threads in the conversation. A navigation property. Read-only. Nullable.
 */
export interface ConversationThreadItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ConversationThreadItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ConversationThreadItemRequestBuilderNavigationMetadata: Record<Exclude<keyof ConversationThreadItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    posts: {
        uriTemplate: PostsRequestBuilderUriTemplate,
        requestsMetadata: PostsRequestBuilderRequestsMetadata,
        navigationMetadata: PostsRequestBuilderNavigationMetadata,
    },
    reply: {
        uriTemplate: ReplyRequestBuilderUriTemplate,
        requestsMetadata: ReplyRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ConversationThreadItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createConversationThreadFromDiscriminatorValue,
        queryParametersMapper: ConversationThreadItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createConversationThreadFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeConversationThread,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const ConversationThreadItemRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/conversations/{conversation%2Did}/threads/{conversationThread%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
