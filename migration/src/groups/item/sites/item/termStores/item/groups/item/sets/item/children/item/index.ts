/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../../../../../../../models/oDataErrors/';
import { createTermFromDiscriminatorValue, serializeTerm, type Term } from '../../../../../../../../../../../../models/termStore/';
import { ChildrenRequestBuilderNavigationMetadata, ChildrenRequestBuilderRequestsMetadata, ChildrenRequestBuilderUriTemplate, type ChildrenRequestBuilder } from './children/';
import { RelationsRequestBuilderNavigationMetadata, RelationsRequestBuilderRequestsMetadata, RelationsRequestBuilderUriTemplate, type RelationsRequestBuilder } from './relations/';
import { SetRequestBuilderRequestsMetadata, SetRequestBuilderUriTemplate, type SetRequestBuilder } from './set/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the children property of the microsoft.graph.termStore.set entity.
 */
export interface TermItemRequestBuilder extends BaseRequestBuilder<TermItemRequestBuilder> {
    /**
     * Provides operations to manage the children property of the microsoft.graph.termStore.term entity.
     */
    get children(): ChildrenRequestBuilder;
    /**
     * Provides operations to manage the relations property of the microsoft.graph.termStore.term entity.
     */
    get relations(): RelationsRequestBuilder;
    /**
     * Provides operations to manage the set property of the microsoft.graph.termStore.term entity.
     */
    get set(): SetRequestBuilder;
    /**
     * Delete navigation property children for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Children terms of set in term [store].
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Term
     */
     get(requestConfiguration?: RequestConfiguration<TermItemRequestBuilderGetQueryParameters> | undefined) : Promise<Term | undefined>;
    /**
     * Update the navigation property children in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Term
     */
     patch(body: Term, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Term | undefined>;
    /**
     * Delete navigation property children for groups
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Children terms of set in term [store].
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<TermItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property children in groups
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Term, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Children terms of set in term [store].
 */
export interface TermItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const TermItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const TermItemRequestBuilderNavigationMetadata: Record<Exclude<keyof TermItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    children: {
        uriTemplate: ChildrenRequestBuilderUriTemplate,
        requestsMetadata: ChildrenRequestBuilderRequestsMetadata,
        navigationMetadata: ChildrenRequestBuilderNavigationMetadata,
    },
    relations: {
        uriTemplate: RelationsRequestBuilderUriTemplate,
        requestsMetadata: RelationsRequestBuilderRequestsMetadata,
        navigationMetadata: RelationsRequestBuilderNavigationMetadata,
    },
    set: {
        uriTemplate: SetRequestBuilderUriTemplate,
        requestsMetadata: SetRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const TermItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTermFromDiscriminatorValue,
        queryParametersMapper: TermItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createTermFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeTerm,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const TermItemRequestBuilderUriTemplate = "{+baseurl}/groups/{group%2Did}/sites/{site%2Did}/termStores/{store%2Did}/groups/{group%2Did1}/sets/{set%2Did}/children/{term%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
