/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createIdentityProviderCollectionResponseFromDiscriminatorValue, createIdentityProviderFromDiscriminatorValue, serializeIdentityProvider, type IdentityProvider, type IdentityProviderCollectionResponse } from '../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../models/oDataErrors/';
import { AvailableProviderTypesRequestBuilderRequestsMetadata, AvailableProviderTypesRequestBuilderUriTemplate, type AvailableProviderTypesRequestBuilder } from './availableProviderTypes/';
import { CountRequestBuilderRequestsMetadata, CountRequestBuilderUriTemplate, type CountRequestBuilder } from './count/';
import { IdentityProviderItemRequestBuilderRequestsMetadata, IdentityProviderItemRequestBuilderUriTemplate, type IdentityProviderItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of identityProvider entities.
 */
export interface IdentityProvidersRequestBuilder extends BaseRequestBuilder<IdentityProvidersRequestBuilder> {
    /**
     * Provides operations to call the availableProviderTypes method.
     * @deprecated The identityProvider API is deprecated and will stop returning data on March 2023. Please use the new identityProviderBase API. as of 2021-05/identityProvider on 2021-08-24 and will be removed 2023-03-15
     */
    get availableProviderTypes(): AvailableProviderTypesRequestBuilder;
    /**
     * Provides operations to count the resources in the collection.
     * @deprecated The identityProvider API is deprecated and will stop returning data on March 2023. Please use the new identityProviderBase API. as of 2021-05/identityProvider on 2021-08-24 and will be removed 2023-03-15
     */
    get count(): CountRequestBuilder;
    /**
     * Provides operations to manage the collection of identityProvider entities.
     * @param identityProviderId The unique identifier of identityProvider
     * @returns a IdentityProviderItemRequestBuilder
     * @deprecated The identityProvider API is deprecated and will stop returning data on March 2023. Please use the new identityProviderBase API. as of 2021-05/identityProvider on 2021-08-24 and will be removed 2023-03-15
     */
     byIdentityProviderId(identityProviderId: string) : IdentityProviderItemRequestBuilder;
    /**
     * Retrieve all identityProviders in the directory.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of IdentityProviderCollectionResponse
     * @deprecated The identityProvider API is deprecated and will stop returning data on March 2023. Please use the new identityProviderBase API. as of 2021-05/identityProvider on 2021-08-24 and will be removed 2023-03-15
     * @see {@link https://learn.microsoft.com/graph/api/identityprovider-list?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<IdentityProvidersRequestBuilderGetQueryParameters> | undefined) : Promise<IdentityProviderCollectionResponse | undefined>;
    /**
     * Create a new identityProvider by specifying display name, identityProvider type, client ID, and client secret.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of IdentityProvider
     * @deprecated The identityProvider API is deprecated and will stop returning data on March 2023. Please use the new identityProviderBase API. as of 2021-05/identityProvider on 2021-08-24 and will be removed 2023-03-15
     * @see {@link https://learn.microsoft.com/graph/api/identityprovider-post-identityproviders?view=graph-rest-1.0|Find more info here}
     */
     post(body: IdentityProvider, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<IdentityProvider | undefined>;
    /**
     * Retrieve all identityProviders in the directory.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     * @deprecated The identityProvider API is deprecated and will stop returning data on March 2023. Please use the new identityProviderBase API. as of 2021-05/identityProvider on 2021-08-24 and will be removed 2023-03-15
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<IdentityProvidersRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Create a new identityProvider by specifying display name, identityProvider type, client ID, and client secret.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     * @deprecated The identityProvider API is deprecated and will stop returning data on March 2023. Please use the new identityProviderBase API. as of 2021-05/identityProvider on 2021-08-24 and will be removed 2023-03-15
     */
     toPostRequestInformation(body: IdentityProvider, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Retrieve all identityProviders in the directory.
 */
export interface IdentityProvidersRequestBuilderGetQueryParameters {
    /**
     * Include count of items
     */
    count?: boolean;
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Search items by search phrases
     */
    search?: string;
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const IdentityProvidersRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "count": "%24count",
    "expand": "%24expand",
    "filter": "%24filter",
    "orderby": "%24orderby",
    "search": "%24search",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const IdentityProvidersRequestBuilderNavigationMetadata: Record<Exclude<keyof IdentityProvidersRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byIdentityProviderId: {
        uriTemplate: IdentityProviderItemRequestBuilderUriTemplate,
        requestsMetadata: IdentityProviderItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["identityProvider%2Did"],
    },
    availableProviderTypes: {
        uriTemplate: AvailableProviderTypesRequestBuilderUriTemplate,
        requestsMetadata: AvailableProviderTypesRequestBuilderRequestsMetadata,
    },
    count: {
        uriTemplate: CountRequestBuilderUriTemplate,
        requestsMetadata: CountRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const IdentityProvidersRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createIdentityProviderCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: IdentityProvidersRequestBuilderGetQueryParametersMapper,
    },
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createIdentityProviderFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeIdentityProvider,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const IdentityProvidersRequestBuilderUriTemplate = "{+baseurl}/identityProviders{?%24top,%24skip,%24search,%24filter,%24count,%24orderby,%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
