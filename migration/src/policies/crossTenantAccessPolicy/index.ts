/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createCrossTenantAccessPolicyFromDiscriminatorValue, serializeCrossTenantAccessPolicy, type CrossTenantAccessPolicy } from '../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../models/oDataErrors/';
import { DefaultRequestBuilderNavigationMetadata, DefaultRequestBuilderRequestsMetadata, DefaultRequestBuilderUriTemplate, type DefaultRequestBuilder } from './defaultEscaped/';
import { PartnersRequestBuilderNavigationMetadata, PartnersRequestBuilderRequestsMetadata, PartnersRequestBuilderUriTemplate, type PartnersRequestBuilder } from './partners/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the crossTenantAccessPolicy property of the microsoft.graph.policyRoot entity.
 */
export interface CrossTenantAccessPolicyRequestBuilder extends BaseRequestBuilder<CrossTenantAccessPolicyRequestBuilder> {
    /**
     * Provides operations to manage the default property of the microsoft.graph.crossTenantAccessPolicy entity.
     */
    get defaultEscaped(): DefaultRequestBuilder;
    /**
     * Provides operations to manage the partners property of the microsoft.graph.crossTenantAccessPolicy entity.
     */
    get partners(): PartnersRequestBuilder;
    /**
     * Delete navigation property crossTenantAccessPolicy for policies
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Read the properties and relationships of a crossTenantAccessPolicy object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of CrossTenantAccessPolicy
     * @see {@link https://learn.microsoft.com/graph/api/crosstenantaccesspolicy-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<CrossTenantAccessPolicyRequestBuilderGetQueryParameters> | undefined) : Promise<CrossTenantAccessPolicy | undefined>;
    /**
     * Update the properties of a cross-tenant access policy.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of CrossTenantAccessPolicy
     * @see {@link https://learn.microsoft.com/graph/api/crosstenantaccesspolicy-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: CrossTenantAccessPolicy, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<CrossTenantAccessPolicy | undefined>;
    /**
     * Delete navigation property crossTenantAccessPolicy for policies
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Read the properties and relationships of a crossTenantAccessPolicy object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<CrossTenantAccessPolicyRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of a cross-tenant access policy.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: CrossTenantAccessPolicy, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Read the properties and relationships of a crossTenantAccessPolicy object.
 */
export interface CrossTenantAccessPolicyRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const CrossTenantAccessPolicyRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const CrossTenantAccessPolicyRequestBuilderNavigationMetadata: Record<Exclude<keyof CrossTenantAccessPolicyRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    defaultEscaped: {
        uriTemplate: DefaultRequestBuilderUriTemplate,
        requestsMetadata: DefaultRequestBuilderRequestsMetadata,
        navigationMetadata: DefaultRequestBuilderNavigationMetadata,
    },
    partners: {
        uriTemplate: PartnersRequestBuilderUriTemplate,
        requestsMetadata: PartnersRequestBuilderRequestsMetadata,
        navigationMetadata: PartnersRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const CrossTenantAccessPolicyRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createCrossTenantAccessPolicyFromDiscriminatorValue,
        queryParametersMapper: CrossTenantAccessPolicyRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createCrossTenantAccessPolicyFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCrossTenantAccessPolicy,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const CrossTenantAccessPolicyRequestBuilderUriTemplate = "{+baseurl}/policies/crossTenantAccessPolicy{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
