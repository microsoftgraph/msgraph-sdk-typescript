/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPolicyRootFromDiscriminatorValue, serializePolicyRoot, type PolicyRoot } from '../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../models/oDataErrors/';
import { ActivityBasedTimeoutPoliciesRequestBuilderNavigationMetadata, ActivityBasedTimeoutPoliciesRequestBuilderRequestsMetadata, ActivityBasedTimeoutPoliciesRequestBuilderUriTemplate, type ActivityBasedTimeoutPoliciesRequestBuilder } from './activityBasedTimeoutPolicies/';
import { AdminConsentRequestPolicyRequestBuilderRequestsMetadata, AdminConsentRequestPolicyRequestBuilderUriTemplate, type AdminConsentRequestPolicyRequestBuilder } from './adminConsentRequestPolicy/';
import { AppManagementPoliciesRequestBuilderNavigationMetadata, AppManagementPoliciesRequestBuilderRequestsMetadata, AppManagementPoliciesRequestBuilderUriTemplate, type AppManagementPoliciesRequestBuilder } from './appManagementPolicies/';
import { AuthenticationFlowsPolicyRequestBuilderRequestsMetadata, AuthenticationFlowsPolicyRequestBuilderUriTemplate, type AuthenticationFlowsPolicyRequestBuilder } from './authenticationFlowsPolicy/';
import { AuthenticationMethodsPolicyRequestBuilderNavigationMetadata, AuthenticationMethodsPolicyRequestBuilderRequestsMetadata, AuthenticationMethodsPolicyRequestBuilderUriTemplate, type AuthenticationMethodsPolicyRequestBuilder } from './authenticationMethodsPolicy/';
import { AuthenticationStrengthPoliciesRequestBuilderNavigationMetadata, AuthenticationStrengthPoliciesRequestBuilderRequestsMetadata, AuthenticationStrengthPoliciesRequestBuilderUriTemplate, type AuthenticationStrengthPoliciesRequestBuilder } from './authenticationStrengthPolicies/';
import { AuthorizationPolicyRequestBuilderRequestsMetadata, AuthorizationPolicyRequestBuilderUriTemplate, type AuthorizationPolicyRequestBuilder } from './authorizationPolicy/';
import { ClaimsMappingPoliciesRequestBuilderNavigationMetadata, ClaimsMappingPoliciesRequestBuilderRequestsMetadata, ClaimsMappingPoliciesRequestBuilderUriTemplate, type ClaimsMappingPoliciesRequestBuilder } from './claimsMappingPolicies/';
import { ConditionalAccessPoliciesRequestBuilderNavigationMetadata, ConditionalAccessPoliciesRequestBuilderRequestsMetadata, ConditionalAccessPoliciesRequestBuilderUriTemplate, type ConditionalAccessPoliciesRequestBuilder } from './conditionalAccessPolicies/';
import { CrossTenantAccessPolicyRequestBuilderNavigationMetadata, CrossTenantAccessPolicyRequestBuilderRequestsMetadata, CrossTenantAccessPolicyRequestBuilderUriTemplate, type CrossTenantAccessPolicyRequestBuilder } from './crossTenantAccessPolicy/';
import { DefaultAppManagementPolicyRequestBuilderRequestsMetadata, DefaultAppManagementPolicyRequestBuilderUriTemplate, type DefaultAppManagementPolicyRequestBuilder } from './defaultAppManagementPolicy/';
import { FeatureRolloutPoliciesRequestBuilderNavigationMetadata, FeatureRolloutPoliciesRequestBuilderRequestsMetadata, FeatureRolloutPoliciesRequestBuilderUriTemplate, type FeatureRolloutPoliciesRequestBuilder } from './featureRolloutPolicies/';
import { HomeRealmDiscoveryPoliciesRequestBuilderNavigationMetadata, HomeRealmDiscoveryPoliciesRequestBuilderRequestsMetadata, HomeRealmDiscoveryPoliciesRequestBuilderUriTemplate, type HomeRealmDiscoveryPoliciesRequestBuilder } from './homeRealmDiscoveryPolicies/';
import { IdentitySecurityDefaultsEnforcementPolicyRequestBuilderRequestsMetadata, IdentitySecurityDefaultsEnforcementPolicyRequestBuilderUriTemplate, type IdentitySecurityDefaultsEnforcementPolicyRequestBuilder } from './identitySecurityDefaultsEnforcementPolicy/';
import { PermissionGrantPoliciesRequestBuilderNavigationMetadata, PermissionGrantPoliciesRequestBuilderRequestsMetadata, PermissionGrantPoliciesRequestBuilderUriTemplate, type PermissionGrantPoliciesRequestBuilder } from './permissionGrantPolicies/';
import { RoleManagementPoliciesRequestBuilderNavigationMetadata, RoleManagementPoliciesRequestBuilderRequestsMetadata, RoleManagementPoliciesRequestBuilderUriTemplate, type RoleManagementPoliciesRequestBuilder } from './roleManagementPolicies/';
import { RoleManagementPolicyAssignmentsRequestBuilderNavigationMetadata, RoleManagementPolicyAssignmentsRequestBuilderRequestsMetadata, RoleManagementPolicyAssignmentsRequestBuilderUriTemplate, type RoleManagementPolicyAssignmentsRequestBuilder } from './roleManagementPolicyAssignments/';
import { TokenIssuancePoliciesRequestBuilderNavigationMetadata, TokenIssuancePoliciesRequestBuilderRequestsMetadata, TokenIssuancePoliciesRequestBuilderUriTemplate, type TokenIssuancePoliciesRequestBuilder } from './tokenIssuancePolicies/';
import { TokenLifetimePoliciesRequestBuilderNavigationMetadata, TokenLifetimePoliciesRequestBuilderRequestsMetadata, TokenLifetimePoliciesRequestBuilderUriTemplate, type TokenLifetimePoliciesRequestBuilder } from './tokenLifetimePolicies/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the policyRoot singleton.
 */
export interface PoliciesRequestBuilder extends BaseRequestBuilder<PoliciesRequestBuilder> {
    /**
     * Provides operations to manage the activityBasedTimeoutPolicies property of the microsoft.graph.policyRoot entity.
     */
    get activityBasedTimeoutPolicies(): ActivityBasedTimeoutPoliciesRequestBuilder;
    /**
     * Provides operations to manage the adminConsentRequestPolicy property of the microsoft.graph.policyRoot entity.
     */
    get adminConsentRequestPolicy(): AdminConsentRequestPolicyRequestBuilder;
    /**
     * Provides operations to manage the appManagementPolicies property of the microsoft.graph.policyRoot entity.
     */
    get appManagementPolicies(): AppManagementPoliciesRequestBuilder;
    /**
     * Provides operations to manage the authenticationFlowsPolicy property of the microsoft.graph.policyRoot entity.
     */
    get authenticationFlowsPolicy(): AuthenticationFlowsPolicyRequestBuilder;
    /**
     * Provides operations to manage the authenticationMethodsPolicy property of the microsoft.graph.policyRoot entity.
     */
    get authenticationMethodsPolicy(): AuthenticationMethodsPolicyRequestBuilder;
    /**
     * Provides operations to manage the authenticationStrengthPolicies property of the microsoft.graph.policyRoot entity.
     */
    get authenticationStrengthPolicies(): AuthenticationStrengthPoliciesRequestBuilder;
    /**
     * Provides operations to manage the authorizationPolicy property of the microsoft.graph.policyRoot entity.
     */
    get authorizationPolicy(): AuthorizationPolicyRequestBuilder;
    /**
     * Provides operations to manage the claimsMappingPolicies property of the microsoft.graph.policyRoot entity.
     */
    get claimsMappingPolicies(): ClaimsMappingPoliciesRequestBuilder;
    /**
     * Provides operations to manage the conditionalAccessPolicies property of the microsoft.graph.policyRoot entity.
     */
    get conditionalAccessPolicies(): ConditionalAccessPoliciesRequestBuilder;
    /**
     * Provides operations to manage the crossTenantAccessPolicy property of the microsoft.graph.policyRoot entity.
     */
    get crossTenantAccessPolicy(): CrossTenantAccessPolicyRequestBuilder;
    /**
     * Provides operations to manage the defaultAppManagementPolicy property of the microsoft.graph.policyRoot entity.
     */
    get defaultAppManagementPolicy(): DefaultAppManagementPolicyRequestBuilder;
    /**
     * Provides operations to manage the featureRolloutPolicies property of the microsoft.graph.policyRoot entity.
     */
    get featureRolloutPolicies(): FeatureRolloutPoliciesRequestBuilder;
    /**
     * Provides operations to manage the homeRealmDiscoveryPolicies property of the microsoft.graph.policyRoot entity.
     */
    get homeRealmDiscoveryPolicies(): HomeRealmDiscoveryPoliciesRequestBuilder;
    /**
     * Provides operations to manage the identitySecurityDefaultsEnforcementPolicy property of the microsoft.graph.policyRoot entity.
     */
    get identitySecurityDefaultsEnforcementPolicy(): IdentitySecurityDefaultsEnforcementPolicyRequestBuilder;
    /**
     * Provides operations to manage the permissionGrantPolicies property of the microsoft.graph.policyRoot entity.
     */
    get permissionGrantPolicies(): PermissionGrantPoliciesRequestBuilder;
    /**
     * Provides operations to manage the roleManagementPolicies property of the microsoft.graph.policyRoot entity.
     */
    get roleManagementPolicies(): RoleManagementPoliciesRequestBuilder;
    /**
     * Provides operations to manage the roleManagementPolicyAssignments property of the microsoft.graph.policyRoot entity.
     */
    get roleManagementPolicyAssignments(): RoleManagementPolicyAssignmentsRequestBuilder;
    /**
     * Provides operations to manage the tokenIssuancePolicies property of the microsoft.graph.policyRoot entity.
     */
    get tokenIssuancePolicies(): TokenIssuancePoliciesRequestBuilder;
    /**
     * Provides operations to manage the tokenLifetimePolicies property of the microsoft.graph.policyRoot entity.
     */
    get tokenLifetimePolicies(): TokenLifetimePoliciesRequestBuilder;
    /**
     * Get policies
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PolicyRoot
     */
     get(requestConfiguration?: RequestConfiguration<PoliciesRequestBuilderGetQueryParameters> | undefined) : Promise<PolicyRoot | undefined>;
    /**
     * Update policies
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of PolicyRoot
     */
     patch(body: PolicyRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<PolicyRoot | undefined>;
    /**
     * Get policies
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PoliciesRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update policies
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: PolicyRoot, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get policies
 */
export interface PoliciesRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PoliciesRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PoliciesRequestBuilderNavigationMetadata: Record<Exclude<keyof PoliciesRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    activityBasedTimeoutPolicies: {
        uriTemplate: ActivityBasedTimeoutPoliciesRequestBuilderUriTemplate,
        requestsMetadata: ActivityBasedTimeoutPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: ActivityBasedTimeoutPoliciesRequestBuilderNavigationMetadata,
    },
    adminConsentRequestPolicy: {
        uriTemplate: AdminConsentRequestPolicyRequestBuilderUriTemplate,
        requestsMetadata: AdminConsentRequestPolicyRequestBuilderRequestsMetadata,
    },
    appManagementPolicies: {
        uriTemplate: AppManagementPoliciesRequestBuilderUriTemplate,
        requestsMetadata: AppManagementPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: AppManagementPoliciesRequestBuilderNavigationMetadata,
    },
    authenticationFlowsPolicy: {
        uriTemplate: AuthenticationFlowsPolicyRequestBuilderUriTemplate,
        requestsMetadata: AuthenticationFlowsPolicyRequestBuilderRequestsMetadata,
    },
    authenticationMethodsPolicy: {
        uriTemplate: AuthenticationMethodsPolicyRequestBuilderUriTemplate,
        requestsMetadata: AuthenticationMethodsPolicyRequestBuilderRequestsMetadata,
        navigationMetadata: AuthenticationMethodsPolicyRequestBuilderNavigationMetadata,
    },
    authenticationStrengthPolicies: {
        uriTemplate: AuthenticationStrengthPoliciesRequestBuilderUriTemplate,
        requestsMetadata: AuthenticationStrengthPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: AuthenticationStrengthPoliciesRequestBuilderNavigationMetadata,
    },
    authorizationPolicy: {
        uriTemplate: AuthorizationPolicyRequestBuilderUriTemplate,
        requestsMetadata: AuthorizationPolicyRequestBuilderRequestsMetadata,
    },
    claimsMappingPolicies: {
        uriTemplate: ClaimsMappingPoliciesRequestBuilderUriTemplate,
        requestsMetadata: ClaimsMappingPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: ClaimsMappingPoliciesRequestBuilderNavigationMetadata,
    },
    conditionalAccessPolicies: {
        uriTemplate: ConditionalAccessPoliciesRequestBuilderUriTemplate,
        requestsMetadata: ConditionalAccessPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: ConditionalAccessPoliciesRequestBuilderNavigationMetadata,
    },
    crossTenantAccessPolicy: {
        uriTemplate: CrossTenantAccessPolicyRequestBuilderUriTemplate,
        requestsMetadata: CrossTenantAccessPolicyRequestBuilderRequestsMetadata,
        navigationMetadata: CrossTenantAccessPolicyRequestBuilderNavigationMetadata,
    },
    defaultAppManagementPolicy: {
        uriTemplate: DefaultAppManagementPolicyRequestBuilderUriTemplate,
        requestsMetadata: DefaultAppManagementPolicyRequestBuilderRequestsMetadata,
    },
    featureRolloutPolicies: {
        uriTemplate: FeatureRolloutPoliciesRequestBuilderUriTemplate,
        requestsMetadata: FeatureRolloutPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: FeatureRolloutPoliciesRequestBuilderNavigationMetadata,
    },
    homeRealmDiscoveryPolicies: {
        uriTemplate: HomeRealmDiscoveryPoliciesRequestBuilderUriTemplate,
        requestsMetadata: HomeRealmDiscoveryPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: HomeRealmDiscoveryPoliciesRequestBuilderNavigationMetadata,
    },
    identitySecurityDefaultsEnforcementPolicy: {
        uriTemplate: IdentitySecurityDefaultsEnforcementPolicyRequestBuilderUriTemplate,
        requestsMetadata: IdentitySecurityDefaultsEnforcementPolicyRequestBuilderRequestsMetadata,
    },
    permissionGrantPolicies: {
        uriTemplate: PermissionGrantPoliciesRequestBuilderUriTemplate,
        requestsMetadata: PermissionGrantPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: PermissionGrantPoliciesRequestBuilderNavigationMetadata,
    },
    roleManagementPolicies: {
        uriTemplate: RoleManagementPoliciesRequestBuilderUriTemplate,
        requestsMetadata: RoleManagementPoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: RoleManagementPoliciesRequestBuilderNavigationMetadata,
    },
    roleManagementPolicyAssignments: {
        uriTemplate: RoleManagementPolicyAssignmentsRequestBuilderUriTemplate,
        requestsMetadata: RoleManagementPolicyAssignmentsRequestBuilderRequestsMetadata,
        navigationMetadata: RoleManagementPolicyAssignmentsRequestBuilderNavigationMetadata,
    },
    tokenIssuancePolicies: {
        uriTemplate: TokenIssuancePoliciesRequestBuilderUriTemplate,
        requestsMetadata: TokenIssuancePoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: TokenIssuancePoliciesRequestBuilderNavigationMetadata,
    },
    tokenLifetimePolicies: {
        uriTemplate: TokenLifetimePoliciesRequestBuilderUriTemplate,
        requestsMetadata: TokenLifetimePoliciesRequestBuilderRequestsMetadata,
        navigationMetadata: TokenLifetimePoliciesRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PoliciesRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPolicyRootFromDiscriminatorValue,
        queryParametersMapper: PoliciesRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPolicyRootFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePolicyRoot,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const PoliciesRequestBuilderUriTemplate = "{+baseurl}/policies{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
