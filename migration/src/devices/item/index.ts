/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createDeviceFromDiscriminatorValue, serializeDevice, type Device } from '../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../models/oDataErrors/';
import { CheckMemberGroupsRequestBuilderRequestsMetadata, CheckMemberGroupsRequestBuilderUriTemplate, type CheckMemberGroupsRequestBuilder } from './checkMemberGroups/';
import { CheckMemberObjectsRequestBuilderRequestsMetadata, CheckMemberObjectsRequestBuilderUriTemplate, type CheckMemberObjectsRequestBuilder } from './checkMemberObjects/';
import { ExtensionsRequestBuilderNavigationMetadata, ExtensionsRequestBuilderRequestsMetadata, ExtensionsRequestBuilderUriTemplate, type ExtensionsRequestBuilder } from './extensions/';
import { GetMemberGroupsRequestBuilderRequestsMetadata, GetMemberGroupsRequestBuilderUriTemplate, type GetMemberGroupsRequestBuilder } from './getMemberGroups/';
import { GetMemberObjectsRequestBuilderRequestsMetadata, GetMemberObjectsRequestBuilderUriTemplate, type GetMemberObjectsRequestBuilder } from './getMemberObjects/';
import { MemberOfRequestBuilderNavigationMetadata, MemberOfRequestBuilderRequestsMetadata, MemberOfRequestBuilderUriTemplate, type MemberOfRequestBuilder } from './memberOf/';
import { RegisteredOwnersRequestBuilderNavigationMetadata, RegisteredOwnersRequestBuilderRequestsMetadata, RegisteredOwnersRequestBuilderUriTemplate, type RegisteredOwnersRequestBuilder } from './registeredOwners/';
import { RegisteredUsersRequestBuilderNavigationMetadata, RegisteredUsersRequestBuilderRequestsMetadata, RegisteredUsersRequestBuilderUriTemplate, type RegisteredUsersRequestBuilder } from './registeredUsers/';
import { RestoreRequestBuilderRequestsMetadata, RestoreRequestBuilderUriTemplate, type RestoreRequestBuilder } from './restore/';
import { TransitiveMemberOfRequestBuilderNavigationMetadata, TransitiveMemberOfRequestBuilderRequestsMetadata, TransitiveMemberOfRequestBuilderUriTemplate, type TransitiveMemberOfRequestBuilder } from './transitiveMemberOf/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the collection of device entities.
 */
export interface DeviceItemRequestBuilder extends BaseRequestBuilder<DeviceItemRequestBuilder> {
    /**
     * Provides operations to call the checkMemberGroups method.
     */
    get checkMemberGroups(): CheckMemberGroupsRequestBuilder;
    /**
     * Provides operations to call the checkMemberObjects method.
     */
    get checkMemberObjects(): CheckMemberObjectsRequestBuilder;
    /**
     * Provides operations to manage the extensions property of the microsoft.graph.device entity.
     */
    get extensions(): ExtensionsRequestBuilder;
    /**
     * Provides operations to call the getMemberGroups method.
     */
    get getMemberGroups(): GetMemberGroupsRequestBuilder;
    /**
     * Provides operations to call the getMemberObjects method.
     */
    get getMemberObjects(): GetMemberObjectsRequestBuilder;
    /**
     * Provides operations to manage the memberOf property of the microsoft.graph.device entity.
     */
    get memberOf(): MemberOfRequestBuilder;
    /**
     * Provides operations to manage the registeredOwners property of the microsoft.graph.device entity.
     */
    get registeredOwners(): RegisteredOwnersRequestBuilder;
    /**
     * Provides operations to manage the registeredUsers property of the microsoft.graph.device entity.
     */
    get registeredUsers(): RegisteredUsersRequestBuilder;
    /**
     * Provides operations to call the restore method.
     */
    get restore(): RestoreRequestBuilder;
    /**
     * Provides operations to manage the transitiveMemberOf property of the microsoft.graph.device entity.
     */
    get transitiveMemberOf(): TransitiveMemberOfRequestBuilder;
    /**
     * Delete a registered device.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @see {@link https://learn.microsoft.com/graph/api/device-delete?view=graph-rest-1.0|Find more info here}
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Get the properties and relationships of a device object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Device
     * @see {@link https://learn.microsoft.com/graph/api/device-get?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<DeviceItemRequestBuilderGetQueryParameters> | undefined) : Promise<Device | undefined>;
    /**
     * Update the properties of a registered device. Only certain properties of a device can be updated through approved Mobile Device Managment (MDM) apps.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Device
     * @see {@link https://learn.microsoft.com/graph/api/device-update?view=graph-rest-1.0|Find more info here}
     */
     patch(body: Device, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Device | undefined>;
    /**
     * Delete a registered device.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Get the properties and relationships of a device object.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<DeviceItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the properties of a registered device. Only certain properties of a device can be updated through approved Mobile Device Managment (MDM) apps.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Device, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get the properties and relationships of a device object.
 */
export interface DeviceItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const DeviceItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const DeviceItemRequestBuilderNavigationMetadata: Record<Exclude<keyof DeviceItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    checkMemberGroups: {
        uriTemplate: CheckMemberGroupsRequestBuilderUriTemplate,
        requestsMetadata: CheckMemberGroupsRequestBuilderRequestsMetadata,
    },
    checkMemberObjects: {
        uriTemplate: CheckMemberObjectsRequestBuilderUriTemplate,
        requestsMetadata: CheckMemberObjectsRequestBuilderRequestsMetadata,
    },
    extensions: {
        uriTemplate: ExtensionsRequestBuilderUriTemplate,
        requestsMetadata: ExtensionsRequestBuilderRequestsMetadata,
        navigationMetadata: ExtensionsRequestBuilderNavigationMetadata,
    },
    getMemberGroups: {
        uriTemplate: GetMemberGroupsRequestBuilderUriTemplate,
        requestsMetadata: GetMemberGroupsRequestBuilderRequestsMetadata,
    },
    getMemberObjects: {
        uriTemplate: GetMemberObjectsRequestBuilderUriTemplate,
        requestsMetadata: GetMemberObjectsRequestBuilderRequestsMetadata,
    },
    memberOf: {
        uriTemplate: MemberOfRequestBuilderUriTemplate,
        requestsMetadata: MemberOfRequestBuilderRequestsMetadata,
        navigationMetadata: MemberOfRequestBuilderNavigationMetadata,
    },
    registeredOwners: {
        uriTemplate: RegisteredOwnersRequestBuilderUriTemplate,
        requestsMetadata: RegisteredOwnersRequestBuilderRequestsMetadata,
        navigationMetadata: RegisteredOwnersRequestBuilderNavigationMetadata,
    },
    registeredUsers: {
        uriTemplate: RegisteredUsersRequestBuilderUriTemplate,
        requestsMetadata: RegisteredUsersRequestBuilderRequestsMetadata,
        navigationMetadata: RegisteredUsersRequestBuilderNavigationMetadata,
    },
    restore: {
        uriTemplate: RestoreRequestBuilderUriTemplate,
        requestsMetadata: RestoreRequestBuilderRequestsMetadata,
    },
    transitiveMemberOf: {
        uriTemplate: TransitiveMemberOfRequestBuilderUriTemplate,
        requestsMetadata: TransitiveMemberOfRequestBuilderRequestsMetadata,
        navigationMetadata: TransitiveMemberOfRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const DeviceItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createDeviceFromDiscriminatorValue,
        queryParametersMapper: DeviceItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createDeviceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeDevice,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const DeviceItemRequestBuilderUriTemplate = "{+baseurl}/devices/{device%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
