/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createApplicationFromDiscriminatorValue, createCustomExtensionCallbackConfigurationFromDiscriminatorValue, createDeletedItemContainerFromDiscriminatorValue, createEmailSettingsFromDiscriminatorValue, createKeyValuePairFromDiscriminatorValue, createSubjectSetFromDiscriminatorValue, createUserFromDiscriminatorValue, deserializeIntoBaseCollectionPaginationCountResponse, deserializeIntoCustomCalloutExtension, deserializeIntoCustomExtensionCallbackConfiguration, deserializeIntoCustomExtensionData, deserializeIntoEntity, deserializeIntoSubjectSet, serializeApplication, serializeBaseCollectionPaginationCountResponse, serializeCustomCalloutExtension, serializeCustomExtensionCallbackConfiguration, serializeCustomExtensionData, serializeDeletedItemContainer, serializeEmailSettings, serializeEntity, serializeKeyValuePair, serializeSubjectSet, serializeUser, type Application, type BaseCollectionPaginationCountResponse, type CustomCalloutExtension, type CustomExtensionCallbackConfiguration, type CustomExtensionData, type DeletedItemContainer, type EmailSettings, type Entity, type KeyValuePair, type SubjectSet, type User } from '../';
import { type AdditionalDataHolder, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a customTaskExtensionCallbackConfiguration
 */
export function createCustomTaskExtensionCallbackConfigurationFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCustomTaskExtensionCallbackConfiguration;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a customTaskExtensionCallbackData
 */
export function createCustomTaskExtensionCallbackDataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCustomTaskExtensionCallbackData;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a customTaskExtensionCalloutData
 */
export function createCustomTaskExtensionCalloutDataFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCustomTaskExtensionCalloutData;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a customTaskExtensionCollectionResponse
 */
export function createCustomTaskExtensionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCustomTaskExtensionCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a customTaskExtension
 */
export function createCustomTaskExtensionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoCustomTaskExtension;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a lifecycleManagementSettings
 */
export function createLifecycleManagementSettingsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoLifecycleManagementSettings;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a lifecycleWorkflowsContainer
 */
export function createLifecycleWorkflowsContainerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoLifecycleWorkflowsContainer;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a onDemandExecutionOnly
 */
export function createOnDemandExecutionOnlyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoOnDemandExecutionOnly;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a parameter
 */
export function createParameterFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoParameter;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a ruleBasedSubjectSet
 */
export function createRuleBasedSubjectSetFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRuleBasedSubjectSet;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a runCollectionResponse
 */
export function createRunCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRunCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a run
 */
export function createRunFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRun;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a runSummary
 */
export function createRunSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoRunSummary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a taskCollectionResponse
 */
export function createTaskCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTaskCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a taskDefinitionCollectionResponse
 */
export function createTaskDefinitionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTaskDefinitionCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a taskDefinition
 */
export function createTaskDefinitionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTaskDefinition;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a task
 */
export function createTaskFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTask;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a taskProcessingResultCollectionResponse
 */
export function createTaskProcessingResultCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTaskProcessingResultCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a taskProcessingResult
 */
export function createTaskProcessingResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTaskProcessingResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a taskReportCollectionResponse
 */
export function createTaskReportCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTaskReportCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a taskReport
 */
export function createTaskReportFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTaskReport;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a taskReportSummary
 */
export function createTaskReportSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTaskReportSummary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a timeBasedAttributeTrigger
 */
export function createTimeBasedAttributeTriggerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTimeBasedAttributeTrigger;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a triggerAndScopeBasedConditions
 */
export function createTriggerAndScopeBasedConditionsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoTriggerAndScopeBasedConditions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a userProcessingResultCollectionResponse
 */
export function createUserProcessingResultCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUserProcessingResultCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a userProcessingResult
 */
export function createUserProcessingResultFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUserProcessingResult;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a userSummary
 */
export function createUserSummaryFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUserSummary;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a workflowBase
 */
export function createWorkflowBaseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.identityGovernance.workflow":
                    return deserializeIntoWorkflow;
                case "#microsoft.graph.identityGovernance.workflowVersion":
                    return deserializeIntoWorkflowVersion;
            }
        }
    }
    return deserializeIntoWorkflowBase;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a workflowCollectionResponse
 */
export function createWorkflowCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWorkflowCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a workflowExecutionConditions
 */
export function createWorkflowExecutionConditionsFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.identityGovernance.onDemandExecutionOnly":
                    return deserializeIntoOnDemandExecutionOnly;
                case "#microsoft.graph.identityGovernance.triggerAndScopeBasedConditions":
                    return deserializeIntoTriggerAndScopeBasedConditions;
            }
        }
    }
    return deserializeIntoWorkflowExecutionConditions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a workflowExecutionTrigger
 */
export function createWorkflowExecutionTriggerFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    if(!parseNode) throw new Error("parseNode cannot be undefined");
    const mappingValueNode = parseNode.getChildNode("@odata.type");
    if (mappingValueNode) {
        const mappingValue = mappingValueNode.getStringValue();
        if (mappingValue) {
            switch (mappingValue) {
                case "#microsoft.graph.identityGovernance.timeBasedAttributeTrigger":
                    return deserializeIntoTimeBasedAttributeTrigger;
            }
        }
    }
    return deserializeIntoWorkflowExecutionTrigger;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a workflow
 */
export function createWorkflowFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWorkflow;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a workflowTemplateCollectionResponse
 */
export function createWorkflowTemplateCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWorkflowTemplateCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a workflowTemplate
 */
export function createWorkflowTemplateFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWorkflowTemplate;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a workflowVersionCollectionResponse
 */
export function createWorkflowVersionCollectionResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWorkflowVersionCollectionResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a workflowVersion
 */
export function createWorkflowVersionFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoWorkflowVersion;
}
export interface CustomTaskExtension extends CustomCalloutExtension, Parsable {
    /**
     * The callback configuration for a custom task extension.
     */
    callbackConfiguration?: CustomExtensionCallbackConfiguration;
    /**
     * The unique identifier of the Microsoft Entra user that created the custom task extension.Supports $filter(eq, ne) and $expand.
     */
    createdBy?: User;
    /**
     * When the custom task extension was created.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    createdDateTime?: Date;
    /**
     * The unique identifier of the Microsoft Entra user that modified the custom task extension last.Supports $filter(eq, ne) and $expand.
     */
    lastModifiedBy?: User;
    /**
     * When the custom extension was last modified.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    lastModifiedDateTime?: Date;
}
export interface CustomTaskExtensionCallbackConfiguration extends CustomExtensionCallbackConfiguration, Parsable {
    /**
     * The authorizedApps property
     */
    authorizedApps?: Application[];
}
export interface CustomTaskExtensionCallbackData extends CustomExtensionData, Parsable {
    /**
     * Operation status that's provided by the Azure Logic App indicating whenever the Azure Logic App has run successfully or not. Supported values: completed, failed, unknownFutureValue.
     */
    operationStatus?: CustomTaskExtensionOperationStatus;
}
export interface CustomTaskExtensionCalloutData extends CustomExtensionData, Parsable {
    /**
     * The subject property
     */
    subject?: User;
    /**
     * The task property
     */
    task?: Task;
    /**
     * The taskProcessingresult property
     */
    taskProcessingresult?: TaskProcessingResult;
    /**
     * The workflow property
     */
    workflow?: Workflow;
}
export interface CustomTaskExtensionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: CustomTaskExtension[];
}
export type CustomTaskExtensionOperationStatus = (typeof CustomTaskExtensionOperationStatusObject)[keyof typeof CustomTaskExtensionOperationStatusObject];
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCustomTaskExtension(customTaskExtension: CustomTaskExtension | undefined = {} as CustomTaskExtension) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCustomCalloutExtension(customTaskExtension),
        "callbackConfiguration": n => { customTaskExtension.callbackConfiguration = n.getObjectValue<CustomExtensionCallbackConfiguration>(createCustomExtensionCallbackConfigurationFromDiscriminatorValue); },
        "createdBy": n => { customTaskExtension.createdBy = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "createdDateTime": n => { customTaskExtension.createdDateTime = n.getDateValue(); },
        "lastModifiedBy": n => { customTaskExtension.lastModifiedBy = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { customTaskExtension.lastModifiedDateTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCustomTaskExtensionCallbackConfiguration(customTaskExtensionCallbackConfiguration: CustomTaskExtensionCallbackConfiguration | undefined = {} as CustomTaskExtensionCallbackConfiguration) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCustomExtensionCallbackConfiguration(customTaskExtensionCallbackConfiguration),
        "authorizedApps": n => { customTaskExtensionCallbackConfiguration.authorizedApps = n.getCollectionOfObjectValues<Application>(createApplicationFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCustomTaskExtensionCallbackData(customTaskExtensionCallbackData: CustomTaskExtensionCallbackData | undefined = {} as CustomTaskExtensionCallbackData) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCustomExtensionData(customTaskExtensionCallbackData),
        "operationStatus": n => { customTaskExtensionCallbackData.operationStatus = n.getEnumValue<CustomTaskExtensionOperationStatus>(CustomTaskExtensionOperationStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCustomTaskExtensionCalloutData(customTaskExtensionCalloutData: CustomTaskExtensionCalloutData | undefined = {} as CustomTaskExtensionCalloutData) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoCustomExtensionData(customTaskExtensionCalloutData),
        "subject": n => { customTaskExtensionCalloutData.subject = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "task": n => { customTaskExtensionCalloutData.task = n.getObjectValue<Task>(createTaskFromDiscriminatorValue); },
        "taskProcessingresult": n => { customTaskExtensionCalloutData.taskProcessingresult = n.getObjectValue<TaskProcessingResult>(createTaskProcessingResultFromDiscriminatorValue); },
        "workflow": n => { customTaskExtensionCalloutData.workflow = n.getObjectValue<Workflow>(createWorkflowFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoCustomTaskExtensionCollectionResponse(customTaskExtensionCollectionResponse: CustomTaskExtensionCollectionResponse | undefined = {} as CustomTaskExtensionCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(customTaskExtensionCollectionResponse),
        "value": n => { customTaskExtensionCollectionResponse.value = n.getCollectionOfObjectValues<CustomTaskExtension>(createCustomTaskExtensionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoLifecycleManagementSettings(lifecycleManagementSettings: LifecycleManagementSettings | undefined = {} as LifecycleManagementSettings) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(lifecycleManagementSettings),
        "emailSettings": n => { lifecycleManagementSettings.emailSettings = n.getObjectValue<EmailSettings>(createEmailSettingsFromDiscriminatorValue); },
        "workflowScheduleIntervalInHours": n => { lifecycleManagementSettings.workflowScheduleIntervalInHours = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoLifecycleWorkflowsContainer(lifecycleWorkflowsContainer: LifecycleWorkflowsContainer | undefined = {} as LifecycleWorkflowsContainer) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(lifecycleWorkflowsContainer),
        "customTaskExtensions": n => { lifecycleWorkflowsContainer.customTaskExtensions = n.getCollectionOfObjectValues<CustomTaskExtension>(createCustomTaskExtensionFromDiscriminatorValue); },
        "deletedItems": n => { lifecycleWorkflowsContainer.deletedItems = n.getObjectValue<DeletedItemContainer>(createDeletedItemContainerFromDiscriminatorValue); },
        "settings": n => { lifecycleWorkflowsContainer.settings = n.getObjectValue<LifecycleManagementSettings>(createLifecycleManagementSettingsFromDiscriminatorValue); },
        "taskDefinitions": n => { lifecycleWorkflowsContainer.taskDefinitions = n.getCollectionOfObjectValues<TaskDefinition>(createTaskDefinitionFromDiscriminatorValue); },
        "workflows": n => { lifecycleWorkflowsContainer.workflows = n.getCollectionOfObjectValues<Workflow>(createWorkflowFromDiscriminatorValue); },
        "workflowTemplates": n => { lifecycleWorkflowsContainer.workflowTemplates = n.getCollectionOfObjectValues<WorkflowTemplate>(createWorkflowTemplateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoOnDemandExecutionOnly(onDemandExecutionOnly: OnDemandExecutionOnly | undefined = {} as OnDemandExecutionOnly) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWorkflowExecutionConditions(onDemandExecutionOnly),
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoParameter(parameter: Parameter | undefined = {} as Parameter) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { parameter.name = n.getStringValue(); },
        "@odata.type": n => { parameter.odataType = n.getStringValue(); },
        "values": n => { parameter.values = n.getCollectionOfPrimitiveValues<string>(); },
        "valueType": n => { parameter.valueType = n.getEnumValue<ValueType>(ValueTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRuleBasedSubjectSet(ruleBasedSubjectSet: RuleBasedSubjectSet | undefined = {} as RuleBasedSubjectSet) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoSubjectSet(ruleBasedSubjectSet),
        "rule": n => { ruleBasedSubjectSet.rule = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRun(run: Run | undefined = {} as Run) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(run),
        "completedDateTime": n => { run.completedDateTime = n.getDateValue(); },
        "failedTasksCount": n => { run.failedTasksCount = n.getNumberValue(); },
        "failedUsersCount": n => { run.failedUsersCount = n.getNumberValue(); },
        "lastUpdatedDateTime": n => { run.lastUpdatedDateTime = n.getDateValue(); },
        "processingStatus": n => { run.processingStatus = n.getEnumValue<LifecycleWorkflowProcessingStatus>(LifecycleWorkflowProcessingStatusObject); },
        "scheduledDateTime": n => { run.scheduledDateTime = n.getDateValue(); },
        "startedDateTime": n => { run.startedDateTime = n.getDateValue(); },
        "successfulUsersCount": n => { run.successfulUsersCount = n.getNumberValue(); },
        "taskProcessingResults": n => { run.taskProcessingResults = n.getCollectionOfObjectValues<TaskProcessingResult>(createTaskProcessingResultFromDiscriminatorValue); },
        "totalTasksCount": n => { run.totalTasksCount = n.getNumberValue(); },
        "totalUnprocessedTasksCount": n => { run.totalUnprocessedTasksCount = n.getNumberValue(); },
        "totalUsersCount": n => { run.totalUsersCount = n.getNumberValue(); },
        "userProcessingResults": n => { run.userProcessingResults = n.getCollectionOfObjectValues<UserProcessingResult>(createUserProcessingResultFromDiscriminatorValue); },
        "workflowExecutionType": n => { run.workflowExecutionType = n.getEnumValue<WorkflowExecutionType>(WorkflowExecutionTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRunCollectionResponse(runCollectionResponse: RunCollectionResponse | undefined = {} as RunCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(runCollectionResponse),
        "value": n => { runCollectionResponse.value = n.getCollectionOfObjectValues<Run>(createRunFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoRunSummary(runSummary: RunSummary | undefined = {} as RunSummary) : Record<string, (node: ParseNode) => void> {
    return {
        "failedRuns": n => { runSummary.failedRuns = n.getNumberValue(); },
        "failedTasks": n => { runSummary.failedTasks = n.getNumberValue(); },
        "@odata.type": n => { runSummary.odataType = n.getStringValue(); },
        "successfulRuns": n => { runSummary.successfulRuns = n.getNumberValue(); },
        "totalRuns": n => { runSummary.totalRuns = n.getNumberValue(); },
        "totalTasks": n => { runSummary.totalTasks = n.getNumberValue(); },
        "totalUsers": n => { runSummary.totalUsers = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTask(task: Task | undefined = {} as Task) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(task),
        "arguments": n => { task.arguments = n.getCollectionOfObjectValues<KeyValuePair>(createKeyValuePairFromDiscriminatorValue); },
        "category": n => { task.category = n.getCollectionOfEnumValues<LifecycleTaskCategory>(LifecycleTaskCategoryObject); },
        "continueOnError": n => { task.continueOnError = n.getBooleanValue(); },
        "description": n => { task.description = n.getStringValue(); },
        "displayName": n => { task.displayName = n.getStringValue(); },
        "executionSequence": n => { task.executionSequence = n.getNumberValue(); },
        "isEnabled": n => { task.isEnabled = n.getBooleanValue(); },
        "taskDefinitionId": n => { task.taskDefinitionId = n.getStringValue(); },
        "taskProcessingResults": n => { task.taskProcessingResults = n.getCollectionOfObjectValues<TaskProcessingResult>(createTaskProcessingResultFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTaskCollectionResponse(taskCollectionResponse: TaskCollectionResponse | undefined = {} as TaskCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(taskCollectionResponse),
        "value": n => { taskCollectionResponse.value = n.getCollectionOfObjectValues<Task>(createTaskFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTaskDefinition(taskDefinition: TaskDefinition | undefined = {} as TaskDefinition) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(taskDefinition),
        "category": n => { taskDefinition.category = n.getCollectionOfEnumValues<LifecycleTaskCategory>(LifecycleTaskCategoryObject); },
        "continueOnError": n => { taskDefinition.continueOnError = n.getBooleanValue(); },
        "description": n => { taskDefinition.description = n.getStringValue(); },
        "displayName": n => { taskDefinition.displayName = n.getStringValue(); },
        "parameters": n => { taskDefinition.parameters = n.getCollectionOfObjectValues<Parameter>(createParameterFromDiscriminatorValue); },
        "version": n => { taskDefinition.version = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTaskDefinitionCollectionResponse(taskDefinitionCollectionResponse: TaskDefinitionCollectionResponse | undefined = {} as TaskDefinitionCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(taskDefinitionCollectionResponse),
        "value": n => { taskDefinitionCollectionResponse.value = n.getCollectionOfObjectValues<TaskDefinition>(createTaskDefinitionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTaskProcessingResult(taskProcessingResult: TaskProcessingResult | undefined = {} as TaskProcessingResult) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(taskProcessingResult),
        "completedDateTime": n => { taskProcessingResult.completedDateTime = n.getDateValue(); },
        "createdDateTime": n => { taskProcessingResult.createdDateTime = n.getDateValue(); },
        "failureReason": n => { taskProcessingResult.failureReason = n.getStringValue(); },
        "processingStatus": n => { taskProcessingResult.processingStatus = n.getEnumValue<LifecycleWorkflowProcessingStatus>(LifecycleWorkflowProcessingStatusObject); },
        "startedDateTime": n => { taskProcessingResult.startedDateTime = n.getDateValue(); },
        "subject": n => { taskProcessingResult.subject = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "task": n => { taskProcessingResult.task = n.getObjectValue<Task>(createTaskFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTaskProcessingResultCollectionResponse(taskProcessingResultCollectionResponse: TaskProcessingResultCollectionResponse | undefined = {} as TaskProcessingResultCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(taskProcessingResultCollectionResponse),
        "value": n => { taskProcessingResultCollectionResponse.value = n.getCollectionOfObjectValues<TaskProcessingResult>(createTaskProcessingResultFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTaskReport(taskReport: TaskReport | undefined = {} as TaskReport) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(taskReport),
        "completedDateTime": n => { taskReport.completedDateTime = n.getDateValue(); },
        "failedUsersCount": n => { taskReport.failedUsersCount = n.getNumberValue(); },
        "lastUpdatedDateTime": n => { taskReport.lastUpdatedDateTime = n.getDateValue(); },
        "processingStatus": n => { taskReport.processingStatus = n.getEnumValue<LifecycleWorkflowProcessingStatus>(LifecycleWorkflowProcessingStatusObject); },
        "runId": n => { taskReport.runId = n.getStringValue(); },
        "startedDateTime": n => { taskReport.startedDateTime = n.getDateValue(); },
        "successfulUsersCount": n => { taskReport.successfulUsersCount = n.getNumberValue(); },
        "task": n => { taskReport.task = n.getObjectValue<Task>(createTaskFromDiscriminatorValue); },
        "taskDefinition": n => { taskReport.taskDefinition = n.getObjectValue<TaskDefinition>(createTaskDefinitionFromDiscriminatorValue); },
        "taskProcessingResults": n => { taskReport.taskProcessingResults = n.getCollectionOfObjectValues<TaskProcessingResult>(createTaskProcessingResultFromDiscriminatorValue); },
        "totalUsersCount": n => { taskReport.totalUsersCount = n.getNumberValue(); },
        "unprocessedUsersCount": n => { taskReport.unprocessedUsersCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTaskReportCollectionResponse(taskReportCollectionResponse: TaskReportCollectionResponse | undefined = {} as TaskReportCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(taskReportCollectionResponse),
        "value": n => { taskReportCollectionResponse.value = n.getCollectionOfObjectValues<TaskReport>(createTaskReportFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTaskReportSummary(taskReportSummary: TaskReportSummary | undefined = {} as TaskReportSummary) : Record<string, (node: ParseNode) => void> {
    return {
        "failedTasks": n => { taskReportSummary.failedTasks = n.getNumberValue(); },
        "@odata.type": n => { taskReportSummary.odataType = n.getStringValue(); },
        "successfulTasks": n => { taskReportSummary.successfulTasks = n.getNumberValue(); },
        "totalTasks": n => { taskReportSummary.totalTasks = n.getNumberValue(); },
        "unprocessedTasks": n => { taskReportSummary.unprocessedTasks = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTimeBasedAttributeTrigger(timeBasedAttributeTrigger: TimeBasedAttributeTrigger | undefined = {} as TimeBasedAttributeTrigger) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWorkflowExecutionTrigger(timeBasedAttributeTrigger),
        "offsetInDays": n => { timeBasedAttributeTrigger.offsetInDays = n.getNumberValue(); },
        "timeBasedAttribute": n => { timeBasedAttributeTrigger.timeBasedAttribute = n.getEnumValue<WorkflowTriggerTimeBasedAttribute>(WorkflowTriggerTimeBasedAttributeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoTriggerAndScopeBasedConditions(triggerAndScopeBasedConditions: TriggerAndScopeBasedConditions | undefined = {} as TriggerAndScopeBasedConditions) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWorkflowExecutionConditions(triggerAndScopeBasedConditions),
        "scope": n => { triggerAndScopeBasedConditions.scope = n.getObjectValue<SubjectSet>(createSubjectSetFromDiscriminatorValue); },
        "trigger": n => { triggerAndScopeBasedConditions.trigger = n.getObjectValue<WorkflowExecutionTrigger>(createWorkflowExecutionTriggerFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUserProcessingResult(userProcessingResult: UserProcessingResult | undefined = {} as UserProcessingResult) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(userProcessingResult),
        "completedDateTime": n => { userProcessingResult.completedDateTime = n.getDateValue(); },
        "failedTasksCount": n => { userProcessingResult.failedTasksCount = n.getNumberValue(); },
        "processingStatus": n => { userProcessingResult.processingStatus = n.getEnumValue<LifecycleWorkflowProcessingStatus>(LifecycleWorkflowProcessingStatusObject); },
        "scheduledDateTime": n => { userProcessingResult.scheduledDateTime = n.getDateValue(); },
        "startedDateTime": n => { userProcessingResult.startedDateTime = n.getDateValue(); },
        "subject": n => { userProcessingResult.subject = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "taskProcessingResults": n => { userProcessingResult.taskProcessingResults = n.getCollectionOfObjectValues<TaskProcessingResult>(createTaskProcessingResultFromDiscriminatorValue); },
        "totalTasksCount": n => { userProcessingResult.totalTasksCount = n.getNumberValue(); },
        "totalUnprocessedTasksCount": n => { userProcessingResult.totalUnprocessedTasksCount = n.getNumberValue(); },
        "workflowExecutionType": n => { userProcessingResult.workflowExecutionType = n.getEnumValue<WorkflowExecutionType>(WorkflowExecutionTypeObject); },
        "workflowVersion": n => { userProcessingResult.workflowVersion = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUserProcessingResultCollectionResponse(userProcessingResultCollectionResponse: UserProcessingResultCollectionResponse | undefined = {} as UserProcessingResultCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(userProcessingResultCollectionResponse),
        "value": n => { userProcessingResultCollectionResponse.value = n.getCollectionOfObjectValues<UserProcessingResult>(createUserProcessingResultFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUserSummary(userSummary: UserSummary | undefined = {} as UserSummary) : Record<string, (node: ParseNode) => void> {
    return {
        "failedTasks": n => { userSummary.failedTasks = n.getNumberValue(); },
        "failedUsers": n => { userSummary.failedUsers = n.getNumberValue(); },
        "@odata.type": n => { userSummary.odataType = n.getStringValue(); },
        "successfulUsers": n => { userSummary.successfulUsers = n.getNumberValue(); },
        "totalTasks": n => { userSummary.totalTasks = n.getNumberValue(); },
        "totalUsers": n => { userSummary.totalUsers = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWorkflow(workflow: Workflow | undefined = {} as Workflow) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWorkflowBase(workflow),
        "deletedDateTime": n => { workflow.deletedDateTime = n.getDateValue(); },
        "executionScope": n => { workflow.executionScope = n.getCollectionOfObjectValues<UserProcessingResult>(createUserProcessingResultFromDiscriminatorValue); },
        "id": n => { workflow.id = n.getStringValue(); },
        "nextScheduleRunDateTime": n => { workflow.nextScheduleRunDateTime = n.getDateValue(); },
        "runs": n => { workflow.runs = n.getCollectionOfObjectValues<Run>(createRunFromDiscriminatorValue); },
        "taskReports": n => { workflow.taskReports = n.getCollectionOfObjectValues<TaskReport>(createTaskReportFromDiscriminatorValue); },
        "userProcessingResults": n => { workflow.userProcessingResults = n.getCollectionOfObjectValues<UserProcessingResult>(createUserProcessingResultFromDiscriminatorValue); },
        "version": n => { workflow.version = n.getNumberValue(); },
        "versions": n => { workflow.versions = n.getCollectionOfObjectValues<WorkflowVersion>(createWorkflowVersionFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWorkflowBase(workflowBase: WorkflowBase | undefined = {} as WorkflowBase) : Record<string, (node: ParseNode) => void> {
    return {
        "category": n => { workflowBase.category = n.getEnumValue<LifecycleWorkflowCategory>(LifecycleWorkflowCategoryObject); },
        "createdBy": n => { workflowBase.createdBy = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "createdDateTime": n => { workflowBase.createdDateTime = n.getDateValue(); },
        "description": n => { workflowBase.description = n.getStringValue(); },
        "displayName": n => { workflowBase.displayName = n.getStringValue(); },
        "executionConditions": n => { workflowBase.executionConditions = n.getObjectValue<WorkflowExecutionConditions>(createWorkflowExecutionConditionsFromDiscriminatorValue); },
        "isEnabled": n => { workflowBase.isEnabled = n.getBooleanValue(); },
        "isSchedulingEnabled": n => { workflowBase.isSchedulingEnabled = n.getBooleanValue(); },
        "lastModifiedBy": n => { workflowBase.lastModifiedBy = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
        "lastModifiedDateTime": n => { workflowBase.lastModifiedDateTime = n.getDateValue(); },
        "@odata.type": n => { workflowBase.odataType = n.getStringValue(); },
        "tasks": n => { workflowBase.tasks = n.getCollectionOfObjectValues<Task>(createTaskFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWorkflowCollectionResponse(workflowCollectionResponse: WorkflowCollectionResponse | undefined = {} as WorkflowCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workflowCollectionResponse),
        "value": n => { workflowCollectionResponse.value = n.getCollectionOfObjectValues<Workflow>(createWorkflowFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWorkflowExecutionConditions(workflowExecutionConditions: WorkflowExecutionConditions | undefined = {} as WorkflowExecutionConditions) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { workflowExecutionConditions.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWorkflowExecutionTrigger(workflowExecutionTrigger: WorkflowExecutionTrigger | undefined = {} as WorkflowExecutionTrigger) : Record<string, (node: ParseNode) => void> {
    return {
        "@odata.type": n => { workflowExecutionTrigger.odataType = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWorkflowTemplate(workflowTemplate: WorkflowTemplate | undefined = {} as WorkflowTemplate) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoEntity(workflowTemplate),
        "category": n => { workflowTemplate.category = n.getEnumValue<LifecycleWorkflowCategory>(LifecycleWorkflowCategoryObject); },
        "description": n => { workflowTemplate.description = n.getStringValue(); },
        "displayName": n => { workflowTemplate.displayName = n.getStringValue(); },
        "executionConditions": n => { workflowTemplate.executionConditions = n.getObjectValue<WorkflowExecutionConditions>(createWorkflowExecutionConditionsFromDiscriminatorValue); },
        "tasks": n => { workflowTemplate.tasks = n.getCollectionOfObjectValues<Task>(createTaskFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWorkflowTemplateCollectionResponse(workflowTemplateCollectionResponse: WorkflowTemplateCollectionResponse | undefined = {} as WorkflowTemplateCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workflowTemplateCollectionResponse),
        "value": n => { workflowTemplateCollectionResponse.value = n.getCollectionOfObjectValues<WorkflowTemplate>(createWorkflowTemplateFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWorkflowVersion(workflowVersion: WorkflowVersion | undefined = {} as WorkflowVersion) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoWorkflowBase(workflowVersion),
        "versionNumber": n => { workflowVersion.versionNumber = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoWorkflowVersionCollectionResponse(workflowVersionCollectionResponse: WorkflowVersionCollectionResponse | undefined = {} as WorkflowVersionCollectionResponse) : Record<string, (node: ParseNode) => void> {
    return {
        ...deserializeIntoBaseCollectionPaginationCountResponse(workflowVersionCollectionResponse),
        "value": n => { workflowVersionCollectionResponse.value = n.getCollectionOfObjectValues<WorkflowVersion>(createWorkflowVersionFromDiscriminatorValue); },
    }
}
export interface LifecycleManagementSettings extends Entity, Parsable {
    /**
     * The emailSettings property
     */
    emailSettings?: EmailSettings;
    /**
     * The interval in hours at which all workflows running in the tenant should be scheduled for execution. This interval has a minimum value of 1 and a maximum value of 24. The default value is 3 hours.
     */
    workflowScheduleIntervalInHours?: number;
}
export type LifecycleTaskCategory = (typeof LifecycleTaskCategoryObject)[keyof typeof LifecycleTaskCategoryObject];
export type LifecycleWorkflowCategory = (typeof LifecycleWorkflowCategoryObject)[keyof typeof LifecycleWorkflowCategoryObject];
export type LifecycleWorkflowProcessingStatus = (typeof LifecycleWorkflowProcessingStatusObject)[keyof typeof LifecycleWorkflowProcessingStatusObject];
export interface LifecycleWorkflowsContainer extends Entity, Parsable {
    /**
     * The customTaskExtension instance.
     */
    customTaskExtensions?: CustomTaskExtension[];
    /**
     * Deleted workflows in your lifecycle workflows instance.
     */
    deletedItems?: DeletedItemContainer;
    /**
     * The settings property
     */
    settings?: LifecycleManagementSettings;
    /**
     * The definition of tasks within the lifecycle workflows instance.
     */
    taskDefinitions?: TaskDefinition[];
    /**
     * The workflows in the lifecycle workflows instance.
     */
    workflows?: Workflow[];
    /**
     * The workflow templates in the lifecycle workflow instance.
     */
    workflowTemplates?: WorkflowTemplate[];
}
export interface OnDemandExecutionOnly extends Parsable, WorkflowExecutionConditions {
}
export interface Parameter extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name of the parameter.
     */
    name?: string;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The values of the parameter.
     */
    values?: string[];
    /**
     * The valueType property
     */
    valueType?: ValueType;
}
export interface RuleBasedSubjectSet extends Parsable, SubjectSet {
    /**
     * The rule for the subject set. Lifecycle Workflows supports a rich set of user properties for configuring the rules using $filter query expressions. For more information, see supported user and query parameters.
     */
    rule?: string;
}
export interface Run extends Entity, Parsable {
    /**
     * The date time that the run completed. Value is null if the workflow hasn't completed.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    completedDateTime?: Date;
    /**
     * The number of tasks that failed in the run execution.
     */
    failedTasksCount?: number;
    /**
     * The number of users that failed in the run execution.
     */
    failedUsersCount?: number;
    /**
     * The datetime that the run was last updated.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    lastUpdatedDateTime?: Date;
    /**
     * The processingStatus property
     */
    processingStatus?: LifecycleWorkflowProcessingStatus;
    /**
     * The date time that the run is scheduled to be executed for a workflow.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    scheduledDateTime?: Date;
    /**
     * The date time that the run execution started.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    startedDateTime?: Date;
    /**
     * The number of successfully completed users in the run.
     */
    successfulUsersCount?: number;
    /**
     * The related taskProcessingResults.
     */
    taskProcessingResults?: TaskProcessingResult[];
    /**
     * The totalTasksCount property
     */
    totalTasksCount?: number;
    /**
     * The total number of unprocessed tasks in the run execution.
     */
    totalUnprocessedTasksCount?: number;
    /**
     * The total number of users in the workflow execution.
     */
    totalUsersCount?: number;
    /**
     * The associated individual user execution.
     */
    userProcessingResults?: UserProcessingResult[];
    /**
     * The workflowExecutionType property
     */
    workflowExecutionType?: WorkflowExecutionType;
}
export interface RunCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Run[];
}
export interface RunSummary extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The number of failed workflow runs.
     */
    failedRuns?: number;
    /**
     * The number of failed tasks of a workflow.
     */
    failedTasks?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The number of successful workflow runs.
     */
    successfulRuns?: number;
    /**
     * The total number of runs for a workflow.
     */
    totalRuns?: number;
    /**
     * The total number of tasks processed by a workflow.
     */
    totalTasks?: number;
    /**
     * The total number of users processed by a workflow.
     */
    totalUsers?: number;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCustomTaskExtension(writer: SerializationWriter, customTaskExtension: CustomTaskExtension | undefined = {} as CustomTaskExtension) : void {
    serializeCustomCalloutExtension(writer, customTaskExtension)
    writer.writeObjectValue<CustomExtensionCallbackConfiguration>("callbackConfiguration", customTaskExtension.callbackConfiguration, serializeCustomExtensionCallbackConfiguration);
    writer.writeObjectValue<User>("createdBy", customTaskExtension.createdBy, serializeUser);
    writer.writeDateValue("createdDateTime", customTaskExtension.createdDateTime);
    writer.writeObjectValue<User>("lastModifiedBy", customTaskExtension.lastModifiedBy, serializeUser);
    writer.writeDateValue("lastModifiedDateTime", customTaskExtension.lastModifiedDateTime);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCustomTaskExtensionCallbackConfiguration(writer: SerializationWriter, customTaskExtensionCallbackConfiguration: CustomTaskExtensionCallbackConfiguration | undefined = {} as CustomTaskExtensionCallbackConfiguration) : void {
    serializeCustomExtensionCallbackConfiguration(writer, customTaskExtensionCallbackConfiguration)
    writer.writeCollectionOfObjectValues<Application>("authorizedApps", customTaskExtensionCallbackConfiguration.authorizedApps, serializeApplication);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCustomTaskExtensionCallbackData(writer: SerializationWriter, customTaskExtensionCallbackData: CustomTaskExtensionCallbackData | undefined = {} as CustomTaskExtensionCallbackData) : void {
    serializeCustomExtensionData(writer, customTaskExtensionCallbackData)
    writer.writeEnumValue<CustomTaskExtensionOperationStatus>("operationStatus", customTaskExtensionCallbackData.operationStatus);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCustomTaskExtensionCalloutData(writer: SerializationWriter, customTaskExtensionCalloutData: CustomTaskExtensionCalloutData | undefined = {} as CustomTaskExtensionCalloutData) : void {
    serializeCustomExtensionData(writer, customTaskExtensionCalloutData)
    writer.writeObjectValue<User>("subject", customTaskExtensionCalloutData.subject, serializeUser);
    writer.writeObjectValue<Task>("task", customTaskExtensionCalloutData.task, serializeTask);
    writer.writeObjectValue<TaskProcessingResult>("taskProcessingresult", customTaskExtensionCalloutData.taskProcessingresult, serializeTaskProcessingResult);
    writer.writeObjectValue<Workflow>("workflow", customTaskExtensionCalloutData.workflow, serializeWorkflow);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeCustomTaskExtensionCollectionResponse(writer: SerializationWriter, customTaskExtensionCollectionResponse: CustomTaskExtensionCollectionResponse | undefined = {} as CustomTaskExtensionCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, customTaskExtensionCollectionResponse)
    writer.writeCollectionOfObjectValues<CustomTaskExtension>("value", customTaskExtensionCollectionResponse.value, serializeCustomTaskExtension);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeLifecycleManagementSettings(writer: SerializationWriter, lifecycleManagementSettings: LifecycleManagementSettings | undefined = {} as LifecycleManagementSettings) : void {
    serializeEntity(writer, lifecycleManagementSettings)
    writer.writeObjectValue<EmailSettings>("emailSettings", lifecycleManagementSettings.emailSettings, serializeEmailSettings);
    writer.writeNumberValue("workflowScheduleIntervalInHours", lifecycleManagementSettings.workflowScheduleIntervalInHours);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeLifecycleWorkflowsContainer(writer: SerializationWriter, lifecycleWorkflowsContainer: LifecycleWorkflowsContainer | undefined = {} as LifecycleWorkflowsContainer) : void {
    serializeEntity(writer, lifecycleWorkflowsContainer)
    writer.writeCollectionOfObjectValues<CustomTaskExtension>("customTaskExtensions", lifecycleWorkflowsContainer.customTaskExtensions, serializeCustomTaskExtension);
    writer.writeObjectValue<DeletedItemContainer>("deletedItems", lifecycleWorkflowsContainer.deletedItems, serializeDeletedItemContainer);
    writer.writeObjectValue<LifecycleManagementSettings>("settings", lifecycleWorkflowsContainer.settings, serializeLifecycleManagementSettings);
    writer.writeCollectionOfObjectValues<TaskDefinition>("taskDefinitions", lifecycleWorkflowsContainer.taskDefinitions, serializeTaskDefinition);
    writer.writeCollectionOfObjectValues<Workflow>("workflows", lifecycleWorkflowsContainer.workflows, serializeWorkflow);
    writer.writeCollectionOfObjectValues<WorkflowTemplate>("workflowTemplates", lifecycleWorkflowsContainer.workflowTemplates, serializeWorkflowTemplate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeOnDemandExecutionOnly(writer: SerializationWriter, onDemandExecutionOnly: OnDemandExecutionOnly | undefined = {} as OnDemandExecutionOnly) : void {
    serializeWorkflowExecutionConditions(writer, onDemandExecutionOnly)
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeParameter(writer: SerializationWriter, parameter: Parameter | undefined = {} as Parameter) : void {
    writer.writeStringValue("name", parameter.name);
    writer.writeStringValue("@odata.type", parameter.odataType);
    writer.writeCollectionOfPrimitiveValues<string>("values", parameter.values);
    writer.writeEnumValue<ValueType>("valueType", parameter.valueType);
    writer.writeAdditionalData(parameter.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRuleBasedSubjectSet(writer: SerializationWriter, ruleBasedSubjectSet: RuleBasedSubjectSet | undefined = {} as RuleBasedSubjectSet) : void {
    serializeSubjectSet(writer, ruleBasedSubjectSet)
    writer.writeStringValue("rule", ruleBasedSubjectSet.rule);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRun(writer: SerializationWriter, run: Run | undefined = {} as Run) : void {
    serializeEntity(writer, run)
    writer.writeDateValue("completedDateTime", run.completedDateTime);
    writer.writeNumberValue("failedTasksCount", run.failedTasksCount);
    writer.writeNumberValue("failedUsersCount", run.failedUsersCount);
    writer.writeDateValue("lastUpdatedDateTime", run.lastUpdatedDateTime);
    writer.writeEnumValue<LifecycleWorkflowProcessingStatus>("processingStatus", run.processingStatus);
    writer.writeDateValue("scheduledDateTime", run.scheduledDateTime);
    writer.writeDateValue("startedDateTime", run.startedDateTime);
    writer.writeNumberValue("successfulUsersCount", run.successfulUsersCount);
    writer.writeCollectionOfObjectValues<TaskProcessingResult>("taskProcessingResults", run.taskProcessingResults, serializeTaskProcessingResult);
    writer.writeNumberValue("totalTasksCount", run.totalTasksCount);
    writer.writeNumberValue("totalUnprocessedTasksCount", run.totalUnprocessedTasksCount);
    writer.writeNumberValue("totalUsersCount", run.totalUsersCount);
    writer.writeCollectionOfObjectValues<UserProcessingResult>("userProcessingResults", run.userProcessingResults, serializeUserProcessingResult);
    writer.writeEnumValue<WorkflowExecutionType>("workflowExecutionType", run.workflowExecutionType);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRunCollectionResponse(writer: SerializationWriter, runCollectionResponse: RunCollectionResponse | undefined = {} as RunCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, runCollectionResponse)
    writer.writeCollectionOfObjectValues<Run>("value", runCollectionResponse.value, serializeRun);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeRunSummary(writer: SerializationWriter, runSummary: RunSummary | undefined = {} as RunSummary) : void {
    writer.writeNumberValue("failedRuns", runSummary.failedRuns);
    writer.writeNumberValue("failedTasks", runSummary.failedTasks);
    writer.writeStringValue("@odata.type", runSummary.odataType);
    writer.writeNumberValue("successfulRuns", runSummary.successfulRuns);
    writer.writeNumberValue("totalRuns", runSummary.totalRuns);
    writer.writeNumberValue("totalTasks", runSummary.totalTasks);
    writer.writeNumberValue("totalUsers", runSummary.totalUsers);
    writer.writeAdditionalData(runSummary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTask(writer: SerializationWriter, task: Task | undefined = {} as Task) : void {
    serializeEntity(writer, task)
    writer.writeCollectionOfObjectValues<KeyValuePair>("arguments", task.arguments, serializeKeyValuePair);
    writer.writeEnumValue<LifecycleTaskCategory[]>("category", task.category);
    writer.writeBooleanValue("continueOnError", task.continueOnError);
    writer.writeStringValue("description", task.description);
    writer.writeStringValue("displayName", task.displayName);
    writer.writeNumberValue("executionSequence", task.executionSequence);
    writer.writeBooleanValue("isEnabled", task.isEnabled);
    writer.writeStringValue("taskDefinitionId", task.taskDefinitionId);
    writer.writeCollectionOfObjectValues<TaskProcessingResult>("taskProcessingResults", task.taskProcessingResults, serializeTaskProcessingResult);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTaskCollectionResponse(writer: SerializationWriter, taskCollectionResponse: TaskCollectionResponse | undefined = {} as TaskCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, taskCollectionResponse)
    writer.writeCollectionOfObjectValues<Task>("value", taskCollectionResponse.value, serializeTask);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTaskDefinition(writer: SerializationWriter, taskDefinition: TaskDefinition | undefined = {} as TaskDefinition) : void {
    serializeEntity(writer, taskDefinition)
    writer.writeEnumValue<LifecycleTaskCategory[]>("category", taskDefinition.category);
    writer.writeBooleanValue("continueOnError", taskDefinition.continueOnError);
    writer.writeStringValue("description", taskDefinition.description);
    writer.writeStringValue("displayName", taskDefinition.displayName);
    writer.writeCollectionOfObjectValues<Parameter>("parameters", taskDefinition.parameters, serializeParameter);
    writer.writeNumberValue("version", taskDefinition.version);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTaskDefinitionCollectionResponse(writer: SerializationWriter, taskDefinitionCollectionResponse: TaskDefinitionCollectionResponse | undefined = {} as TaskDefinitionCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, taskDefinitionCollectionResponse)
    writer.writeCollectionOfObjectValues<TaskDefinition>("value", taskDefinitionCollectionResponse.value, serializeTaskDefinition);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTaskProcessingResult(writer: SerializationWriter, taskProcessingResult: TaskProcessingResult | undefined = {} as TaskProcessingResult) : void {
    serializeEntity(writer, taskProcessingResult)
    writer.writeDateValue("completedDateTime", taskProcessingResult.completedDateTime);
    writer.writeDateValue("createdDateTime", taskProcessingResult.createdDateTime);
    writer.writeStringValue("failureReason", taskProcessingResult.failureReason);
    writer.writeEnumValue<LifecycleWorkflowProcessingStatus>("processingStatus", taskProcessingResult.processingStatus);
    writer.writeDateValue("startedDateTime", taskProcessingResult.startedDateTime);
    writer.writeObjectValue<User>("subject", taskProcessingResult.subject, serializeUser);
    writer.writeObjectValue<Task>("task", taskProcessingResult.task, serializeTask);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTaskProcessingResultCollectionResponse(writer: SerializationWriter, taskProcessingResultCollectionResponse: TaskProcessingResultCollectionResponse | undefined = {} as TaskProcessingResultCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, taskProcessingResultCollectionResponse)
    writer.writeCollectionOfObjectValues<TaskProcessingResult>("value", taskProcessingResultCollectionResponse.value, serializeTaskProcessingResult);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTaskReport(writer: SerializationWriter, taskReport: TaskReport | undefined = {} as TaskReport) : void {
    serializeEntity(writer, taskReport)
    writer.writeDateValue("completedDateTime", taskReport.completedDateTime);
    writer.writeNumberValue("failedUsersCount", taskReport.failedUsersCount);
    writer.writeDateValue("lastUpdatedDateTime", taskReport.lastUpdatedDateTime);
    writer.writeEnumValue<LifecycleWorkflowProcessingStatus>("processingStatus", taskReport.processingStatus);
    writer.writeStringValue("runId", taskReport.runId);
    writer.writeDateValue("startedDateTime", taskReport.startedDateTime);
    writer.writeNumberValue("successfulUsersCount", taskReport.successfulUsersCount);
    writer.writeObjectValue<Task>("task", taskReport.task, serializeTask);
    writer.writeObjectValue<TaskDefinition>("taskDefinition", taskReport.taskDefinition, serializeTaskDefinition);
    writer.writeCollectionOfObjectValues<TaskProcessingResult>("taskProcessingResults", taskReport.taskProcessingResults, serializeTaskProcessingResult);
    writer.writeNumberValue("totalUsersCount", taskReport.totalUsersCount);
    writer.writeNumberValue("unprocessedUsersCount", taskReport.unprocessedUsersCount);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTaskReportCollectionResponse(writer: SerializationWriter, taskReportCollectionResponse: TaskReportCollectionResponse | undefined = {} as TaskReportCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, taskReportCollectionResponse)
    writer.writeCollectionOfObjectValues<TaskReport>("value", taskReportCollectionResponse.value, serializeTaskReport);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTaskReportSummary(writer: SerializationWriter, taskReportSummary: TaskReportSummary | undefined = {} as TaskReportSummary) : void {
    writer.writeNumberValue("failedTasks", taskReportSummary.failedTasks);
    writer.writeStringValue("@odata.type", taskReportSummary.odataType);
    writer.writeNumberValue("successfulTasks", taskReportSummary.successfulTasks);
    writer.writeNumberValue("totalTasks", taskReportSummary.totalTasks);
    writer.writeNumberValue("unprocessedTasks", taskReportSummary.unprocessedTasks);
    writer.writeAdditionalData(taskReportSummary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTimeBasedAttributeTrigger(writer: SerializationWriter, timeBasedAttributeTrigger: TimeBasedAttributeTrigger | undefined = {} as TimeBasedAttributeTrigger) : void {
    serializeWorkflowExecutionTrigger(writer, timeBasedAttributeTrigger)
    writer.writeNumberValue("offsetInDays", timeBasedAttributeTrigger.offsetInDays);
    writer.writeEnumValue<WorkflowTriggerTimeBasedAttribute>("timeBasedAttribute", timeBasedAttributeTrigger.timeBasedAttribute);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeTriggerAndScopeBasedConditions(writer: SerializationWriter, triggerAndScopeBasedConditions: TriggerAndScopeBasedConditions | undefined = {} as TriggerAndScopeBasedConditions) : void {
    serializeWorkflowExecutionConditions(writer, triggerAndScopeBasedConditions)
    writer.writeObjectValue<SubjectSet>("scope", triggerAndScopeBasedConditions.scope, serializeSubjectSet);
    writer.writeObjectValue<WorkflowExecutionTrigger>("trigger", triggerAndScopeBasedConditions.trigger, serializeWorkflowExecutionTrigger);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserProcessingResult(writer: SerializationWriter, userProcessingResult: UserProcessingResult | undefined = {} as UserProcessingResult) : void {
    serializeEntity(writer, userProcessingResult)
    writer.writeDateValue("completedDateTime", userProcessingResult.completedDateTime);
    writer.writeNumberValue("failedTasksCount", userProcessingResult.failedTasksCount);
    writer.writeEnumValue<LifecycleWorkflowProcessingStatus>("processingStatus", userProcessingResult.processingStatus);
    writer.writeDateValue("scheduledDateTime", userProcessingResult.scheduledDateTime);
    writer.writeDateValue("startedDateTime", userProcessingResult.startedDateTime);
    writer.writeObjectValue<User>("subject", userProcessingResult.subject, serializeUser);
    writer.writeCollectionOfObjectValues<TaskProcessingResult>("taskProcessingResults", userProcessingResult.taskProcessingResults, serializeTaskProcessingResult);
    writer.writeNumberValue("totalTasksCount", userProcessingResult.totalTasksCount);
    writer.writeNumberValue("totalUnprocessedTasksCount", userProcessingResult.totalUnprocessedTasksCount);
    writer.writeEnumValue<WorkflowExecutionType>("workflowExecutionType", userProcessingResult.workflowExecutionType);
    writer.writeNumberValue("workflowVersion", userProcessingResult.workflowVersion);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserProcessingResultCollectionResponse(writer: SerializationWriter, userProcessingResultCollectionResponse: UserProcessingResultCollectionResponse | undefined = {} as UserProcessingResultCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, userProcessingResultCollectionResponse)
    writer.writeCollectionOfObjectValues<UserProcessingResult>("value", userProcessingResultCollectionResponse.value, serializeUserProcessingResult);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUserSummary(writer: SerializationWriter, userSummary: UserSummary | undefined = {} as UserSummary) : void {
    writer.writeNumberValue("failedTasks", userSummary.failedTasks);
    writer.writeNumberValue("failedUsers", userSummary.failedUsers);
    writer.writeStringValue("@odata.type", userSummary.odataType);
    writer.writeNumberValue("successfulUsers", userSummary.successfulUsers);
    writer.writeNumberValue("totalTasks", userSummary.totalTasks);
    writer.writeNumberValue("totalUsers", userSummary.totalUsers);
    writer.writeAdditionalData(userSummary.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkflow(writer: SerializationWriter, workflow: Workflow | undefined = {} as Workflow) : void {
    serializeWorkflowBase(writer, workflow)
    writer.writeDateValue("deletedDateTime", workflow.deletedDateTime);
    writer.writeCollectionOfObjectValues<UserProcessingResult>("executionScope", workflow.executionScope, serializeUserProcessingResult);
    writer.writeStringValue("id", workflow.id);
    writer.writeDateValue("nextScheduleRunDateTime", workflow.nextScheduleRunDateTime);
    writer.writeCollectionOfObjectValues<Run>("runs", workflow.runs, serializeRun);
    writer.writeCollectionOfObjectValues<TaskReport>("taskReports", workflow.taskReports, serializeTaskReport);
    writer.writeCollectionOfObjectValues<UserProcessingResult>("userProcessingResults", workflow.userProcessingResults, serializeUserProcessingResult);
    writer.writeNumberValue("version", workflow.version);
    writer.writeCollectionOfObjectValues<WorkflowVersion>("versions", workflow.versions, serializeWorkflowVersion);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkflowBase(writer: SerializationWriter, workflowBase: WorkflowBase | undefined = {} as WorkflowBase) : void {
    writer.writeEnumValue<LifecycleWorkflowCategory>("category", workflowBase.category);
    writer.writeObjectValue<User>("createdBy", workflowBase.createdBy, serializeUser);
    writer.writeDateValue("createdDateTime", workflowBase.createdDateTime);
    writer.writeStringValue("description", workflowBase.description);
    writer.writeStringValue("displayName", workflowBase.displayName);
    writer.writeObjectValue<WorkflowExecutionConditions>("executionConditions", workflowBase.executionConditions, serializeWorkflowExecutionConditions);
    writer.writeBooleanValue("isEnabled", workflowBase.isEnabled);
    writer.writeBooleanValue("isSchedulingEnabled", workflowBase.isSchedulingEnabled);
    writer.writeObjectValue<User>("lastModifiedBy", workflowBase.lastModifiedBy, serializeUser);
    writer.writeDateValue("lastModifiedDateTime", workflowBase.lastModifiedDateTime);
    writer.writeStringValue("@odata.type", workflowBase.odataType);
    writer.writeCollectionOfObjectValues<Task>("tasks", workflowBase.tasks, serializeTask);
    writer.writeAdditionalData(workflowBase.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkflowCollectionResponse(writer: SerializationWriter, workflowCollectionResponse: WorkflowCollectionResponse | undefined = {} as WorkflowCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workflowCollectionResponse)
    writer.writeCollectionOfObjectValues<Workflow>("value", workflowCollectionResponse.value, serializeWorkflow);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkflowExecutionConditions(writer: SerializationWriter, workflowExecutionConditions: WorkflowExecutionConditions | undefined = {} as WorkflowExecutionConditions) : void {
    writer.writeStringValue("@odata.type", workflowExecutionConditions.odataType);
    writer.writeAdditionalData(workflowExecutionConditions.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkflowExecutionTrigger(writer: SerializationWriter, workflowExecutionTrigger: WorkflowExecutionTrigger | undefined = {} as WorkflowExecutionTrigger) : void {
    writer.writeStringValue("@odata.type", workflowExecutionTrigger.odataType);
    writer.writeAdditionalData(workflowExecutionTrigger.additionalData);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkflowTemplate(writer: SerializationWriter, workflowTemplate: WorkflowTemplate | undefined = {} as WorkflowTemplate) : void {
    serializeEntity(writer, workflowTemplate)
    writer.writeEnumValue<LifecycleWorkflowCategory>("category", workflowTemplate.category);
    writer.writeStringValue("description", workflowTemplate.description);
    writer.writeStringValue("displayName", workflowTemplate.displayName);
    writer.writeObjectValue<WorkflowExecutionConditions>("executionConditions", workflowTemplate.executionConditions, serializeWorkflowExecutionConditions);
    writer.writeCollectionOfObjectValues<Task>("tasks", workflowTemplate.tasks, serializeTask);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkflowTemplateCollectionResponse(writer: SerializationWriter, workflowTemplateCollectionResponse: WorkflowTemplateCollectionResponse | undefined = {} as WorkflowTemplateCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workflowTemplateCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkflowTemplate>("value", workflowTemplateCollectionResponse.value, serializeWorkflowTemplate);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkflowVersion(writer: SerializationWriter, workflowVersion: WorkflowVersion | undefined = {} as WorkflowVersion) : void {
    serializeWorkflowBase(writer, workflowVersion)
    writer.writeNumberValue("versionNumber", workflowVersion.versionNumber);
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeWorkflowVersionCollectionResponse(writer: SerializationWriter, workflowVersionCollectionResponse: WorkflowVersionCollectionResponse | undefined = {} as WorkflowVersionCollectionResponse) : void {
    serializeBaseCollectionPaginationCountResponse(writer, workflowVersionCollectionResponse)
    writer.writeCollectionOfObjectValues<WorkflowVersion>("value", workflowVersionCollectionResponse.value, serializeWorkflowVersion);
}
export interface Task extends Entity, Parsable {
    /**
     * Arguments included within the task.  For guidance to configure this property, see Configure the arguments for built-in Lifecycle Workflow tasks. Required.
     */
    arguments?: KeyValuePair[];
    /**
     * The category property
     */
    category?: LifecycleTaskCategory[];
    /**
     * A boolean value that specifies whether, if this task fails, the workflow will stop, and subsequent tasks will not run. Optional.
     */
    continueOnError?: boolean;
    /**
     * A string that describes the purpose of the task for administrative use. Optional.
     */
    description?: string;
    /**
     * A unique string that identifies the task. Required.Supports $filter(eq, ne) and orderBy.
     */
    displayName?: string;
    /**
     * An integer that states in what order the task will run in a workflow.Supports $orderby.
     */
    executionSequence?: number;
    /**
     * A boolean value that denotes whether the task is set to run or not. Optional.Supports $filter(eq, ne) and orderBy.
     */
    isEnabled?: boolean;
    /**
     * A unique template identifier for the task. For more information about the tasks that Lifecycle Workflows currently supports and their unique identifiers, see supported tasks. Required.Supports $filter(eq, ne).
     */
    taskDefinitionId?: string;
    /**
     * The result of processing the task.
     */
    taskProcessingResults?: TaskProcessingResult[];
}
export interface TaskCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Task[];
}
export interface TaskDefinition extends Entity, Parsable {
    /**
     * The category property
     */
    category?: LifecycleTaskCategory[];
    /**
     * The continueOnError property
     */
    continueOnError?: boolean;
    /**
     * The description of the taskDefinition.
     */
    description?: string;
    /**
     * The display name of the taskDefinition.Supports $filter(eq, ne) and $orderby.
     */
    displayName?: string;
    /**
     * The parameters that must be supplied when creating a workflow task object.Supports $filter(any).
     */
    parameters?: Parameter[];
    /**
     * The version number of the taskDefinition. New records are pushed when we add support for new parameters.Supports $filter(ge, gt, le, lt, eq, ne) and $orderby.
     */
    version?: number;
}
export interface TaskDefinitionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: TaskDefinition[];
}
export interface TaskProcessingResult extends Entity, Parsable {
    /**
     * The date time when taskProcessingResult execution ended. Value is null if task execution is still in progress.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    completedDateTime?: Date;
    /**
     * The date time when the taskProcessingResult was created.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    createdDateTime?: Date;
    /**
     * Describes why the taskProcessingResult has failed.
     */
    failureReason?: string;
    /**
     * The processingStatus property
     */
    processingStatus?: LifecycleWorkflowProcessingStatus;
    /**
     * The date time when taskProcessingResult execution started. Value is null if task execution has not yet started.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    startedDateTime?: Date;
    /**
     * The subject property
     */
    subject?: User;
    /**
     * The task property
     */
    task?: Task;
}
export interface TaskProcessingResultCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: TaskProcessingResult[];
}
export interface TaskReport extends Entity, Parsable {
    /**
     * The date time that the associated run completed. Value is null if the run has not completed.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    completedDateTime?: Date;
    /**
     * The number of users in the run execution for which the associated task failed.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    failedUsersCount?: number;
    /**
     * The date and time that the task report was last updated.
     */
    lastUpdatedDateTime?: Date;
    /**
     * The processingStatus property
     */
    processingStatus?: LifecycleWorkflowProcessingStatus;
    /**
     * The unique identifier of the associated run.
     */
    runId?: string;
    /**
     * The date time that the associated run started. Value is null if the run has not started.
     */
    startedDateTime?: Date;
    /**
     * The number of users in the run execution for which the associated task succeeded.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    successfulUsersCount?: number;
    /**
     * The task property
     */
    task?: Task;
    /**
     * The taskDefinition property
     */
    taskDefinition?: TaskDefinition;
    /**
     * The related lifecycle workflow taskProcessingResults.
     */
    taskProcessingResults?: TaskProcessingResult[];
    /**
     * The total number of users in the run execution for which the associated task was scheduled to execute.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    totalUsersCount?: number;
    /**
     * The number of users in the run execution for which the associated task is queued, in progress, or canceled.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    unprocessedUsersCount?: number;
}
export interface TaskReportCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: TaskReport[];
}
export interface TaskReportSummary extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The number of failed tasks in a report.
     */
    failedTasks?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The total number of successful tasks in a report.
     */
    successfulTasks?: number;
    /**
     * The total number of tasks in a report.
     */
    totalTasks?: number;
    /**
     * The number of unprocessed tasks in a report.
     */
    unprocessedTasks?: number;
}
export interface TimeBasedAttributeTrigger extends Parsable, WorkflowExecutionTrigger {
    /**
     * How many days before or after the time-based attribute specified the workflow should trigger. For example, if the attribute is employeeHireDate and offsetInDays is -1, then the workflow should trigger one day before the employee hire date. The value can range between -180 and 180 days.
     */
    offsetInDays?: number;
    /**
     * The timeBasedAttribute property
     */
    timeBasedAttribute?: WorkflowTriggerTimeBasedAttribute;
}
export interface TriggerAndScopeBasedConditions extends Parsable, WorkflowExecutionConditions {
    /**
     * Defines who the workflow runs for.
     */
    scope?: SubjectSet;
    /**
     * What triggers a workflow to run.
     */
    trigger?: WorkflowExecutionTrigger;
}
export interface UserProcessingResult extends Entity, Parsable {
    /**
     * The date time that the workflow execution for a user completed. Value is null if the workflow hasn't completed.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    completedDateTime?: Date;
    /**
     * The number of tasks that failed in the workflow execution.
     */
    failedTasksCount?: number;
    /**
     * The processingStatus property
     */
    processingStatus?: LifecycleWorkflowProcessingStatus;
    /**
     * The date time that the workflow is scheduled to be executed for a user.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    scheduledDateTime?: Date;
    /**
     * The date time that the workflow execution started. Value is null if the workflow execution has not started.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    startedDateTime?: Date;
    /**
     * The subject property
     */
    subject?: User;
    /**
     * The associated individual task execution.
     */
    taskProcessingResults?: TaskProcessingResult[];
    /**
     * The total number of tasks that in the workflow execution.
     */
    totalTasksCount?: number;
    /**
     * The total number of unprocessed tasks for the workflow.
     */
    totalUnprocessedTasksCount?: number;
    /**
     * The workflowExecutionType property
     */
    workflowExecutionType?: WorkflowExecutionType;
    /**
     * The version of the workflow that was executed.
     */
    workflowVersion?: number;
}
export interface UserProcessingResultCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: UserProcessingResult[];
}
export interface UserSummary extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The number of failed tasks for users in a user summary.
     */
    failedTasks?: number;
    /**
     * The number of failed users in a user summary.
     */
    failedUsers?: number;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The number of successful users in a user summary.
     */
    successfulUsers?: number;
    /**
     * The total tasks of users in a user summary.
     */
    totalTasks?: number;
    /**
     * The total number of users in a user summary
     */
    totalUsers?: number;
}
export type ValueType = (typeof ValueTypeObject)[keyof typeof ValueTypeObject];
export interface Workflow extends Parsable, WorkflowBase {
    /**
     * When the workflow was deleted.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    deletedDateTime?: Date;
    /**
     * The unique identifier of the Microsoft Entra identity that last modified the workflow object.
     */
    executionScope?: UserProcessingResult[];
    /**
     * Identifier used for individually addressing a specific workflow.Supports $filter(eq, ne) and $orderby.
     */
    id?: string;
    /**
     * The date time when the workflow is expected to run next based on the schedule interval, if there are any users matching the execution conditions. Supports $filter(lt,gt) and $orderby.
     */
    nextScheduleRunDateTime?: Date;
    /**
     * Workflow runs.
     */
    runs?: Run[];
    /**
     * Represents the aggregation of task execution data for tasks within a workflow object.
     */
    taskReports?: TaskReport[];
    /**
     * Per-user workflow execution results.
     */
    userProcessingResults?: UserProcessingResult[];
    /**
     * The current version number of the workflow. Value is 1 when the workflow is first created.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    version?: number;
    /**
     * The workflow versions that are available.
     */
    versions?: WorkflowVersion[];
}
export interface WorkflowBase extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The category property
     */
    category?: LifecycleWorkflowCategory;
    /**
     * The user who created the workflow.
     */
    createdBy?: User;
    /**
     * When a workflow was created.
     */
    createdDateTime?: Date;
    /**
     * A string that describes the purpose of the workflow.
     */
    description?: string;
    /**
     * A string to identify the workflow.
     */
    displayName?: string;
    /**
     * Defines when and for who the workflow will run.
     */
    executionConditions?: WorkflowExecutionConditions;
    /**
     * Whether the workflow is enabled or disabled. If this setting is true, the workflow can be run on demand or on schedule when isSchedulingEnabled is true.
     */
    isEnabled?: boolean;
    /**
     * If true, the Lifecycle Workflow engine executes the workflow based on the schedule defined by tenant settings. Can't be true for a disabled workflow (where isEnabled is false).
     */
    isSchedulingEnabled?: boolean;
    /**
     * The unique identifier of the Microsoft Entra identity that last modified the workflow.
     */
    lastModifiedBy?: User;
    /**
     * When the workflow was last modified.
     */
    lastModifiedDateTime?: Date;
    /**
     * The OdataType property
     */
    odataType?: string;
    /**
     * The tasks in the workflow.
     */
    tasks?: Task[];
}
export interface WorkflowCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: Workflow[];
}
export interface WorkflowExecutionConditions extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export interface WorkflowExecutionTrigger extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The OdataType property
     */
    odataType?: string;
}
export type WorkflowExecutionType = (typeof WorkflowExecutionTypeObject)[keyof typeof WorkflowExecutionTypeObject];
export interface WorkflowTemplate extends Entity, Parsable {
    /**
     * The category property
     */
    category?: LifecycleWorkflowCategory;
    /**
     * The description of the workflowTemplate.
     */
    description?: string;
    /**
     * The display name of the workflowTemplate.Supports $filter(eq, ne) and $orderby.
     */
    displayName?: string;
    /**
     * Conditions describing when to execute the workflow and the criteria to identify in-scope subject set.
     */
    executionConditions?: WorkflowExecutionConditions;
    /**
     * Represents the configured tasks to execute and their execution sequence within a workflow. This relationship is expanded by default.
     */
    tasks?: Task[];
}
export interface WorkflowTemplateCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkflowTemplate[];
}
export type WorkflowTriggerTimeBasedAttribute = (typeof WorkflowTriggerTimeBasedAttributeObject)[keyof typeof WorkflowTriggerTimeBasedAttributeObject];
export interface WorkflowVersion extends Parsable, WorkflowBase {
    /**
     * The version of the workflow.Supports $filter(lt, le, gt, ge, eq, ne) and $orderby.
     */
    versionNumber?: number;
}
export interface WorkflowVersionCollectionResponse extends BaseCollectionPaginationCountResponse, Parsable {
    /**
     * The value property
     */
    value?: WorkflowVersion[];
}
export const CustomTaskExtensionOperationStatusObject = {
    Completed: "completed",
    Failed: "failed",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const LifecycleTaskCategoryObject = {
    Joiner: "joiner",
    Leaver: "leaver",
    UnknownFutureValue: "unknownFutureValue",
    Mover: "mover",
}  as const;
export const LifecycleWorkflowCategoryObject = {
    Joiner: "joiner",
    Leaver: "leaver",
    UnknownFutureValue: "unknownFutureValue",
    Mover: "mover",
}  as const;
export const LifecycleWorkflowProcessingStatusObject = {
    Queued: "queued",
    InProgress: "inProgress",
    Completed: "completed",
    CompletedWithErrors: "completedWithErrors",
    Canceled: "canceled",
    Failed: "failed",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const ValueTypeObject = {
    EnumEscaped: "enum",
    String: "string",
    Int: "int",
    Bool: "bool",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const WorkflowExecutionTypeObject = {
    Scheduled: "scheduled",
    OnDemand: "onDemand",
    UnknownFutureValue: "unknownFutureValue",
}  as const;
export const WorkflowTriggerTimeBasedAttributeObject = {
    EmployeeHireDate: "employeeHireDate",
    EmployeeLeaveDateTime: "employeeLeaveDateTime",
    UnknownFutureValue: "unknownFutureValue",
    CreatedDateTime: "createdDateTime",
}  as const;
/* tslint:enable */
/* eslint-enable */
