/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createProfilePhotoCollectionResponseFromDiscriminatorValue, type ProfilePhotoCollectionResponse } from '../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../models/oDataErrors/';
import { ProfilePhotoItemRequestBuilderNavigationMetadata, ProfilePhotoItemRequestBuilderRequestsMetadata, ProfilePhotoItemRequestBuilderUriTemplate, type ProfilePhotoItemRequestBuilder } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the photos property of the microsoft.graph.user entity.
 */
export interface PhotosRequestBuilder extends BaseRequestBuilder<PhotosRequestBuilder> {
    /**
     * Provides operations to manage the photos property of the microsoft.graph.user entity.
     * @param profilePhotoId The unique identifier of profilePhoto
     * @returns a ProfilePhotoItemRequestBuilder
     */
     byProfilePhotoId(profilePhotoId: string) : ProfilePhotoItemRequestBuilder;
    /**
     * The collection of the user's profile photos in different sizes. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ProfilePhotoCollectionResponse
     */
     get(requestConfiguration?: RequestConfiguration<PhotosRequestBuilderGetQueryParameters> | undefined) : Promise<ProfilePhotoCollectionResponse | undefined>;
    /**
     * The collection of the user's profile photos in different sizes. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PhotosRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
}
/**
 * The collection of the user's profile photos in different sizes. Read-only.
 */
export interface PhotosRequestBuilderGetQueryParameters {
    /**
     * Filter items by property values
     */
    filter?: string;
    /**
     * Order items by property values
     */
    orderby?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
    /**
     * Skip the first n items
     */
    skip?: number;
    /**
     * Show only the first n items
     */
    top?: number;
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PhotosRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "filter": "%24filter",
    "orderby": "%24orderby",
    "select": "%24select",
    "skip": "%24skip",
    "top": "%24top",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PhotosRequestBuilderNavigationMetadata: Record<Exclude<keyof PhotosRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byProfilePhotoId: {
        uriTemplate: ProfilePhotoItemRequestBuilderUriTemplate,
        requestsMetadata: ProfilePhotoItemRequestBuilderRequestsMetadata,
        navigationMetadata: ProfilePhotoItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["profilePhoto%2Did"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PhotosRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createProfilePhotoCollectionResponseFromDiscriminatorValue,
        queryParametersMapper: PhotosRequestBuilderGetQueryParametersMapper,
    },
};
/**
 * Uri template for the request builder.
 */
export const PhotosRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/photos{?%24top,%24skip,%24filter,%24orderby,%24select}";
/* tslint:enable */
/* eslint-enable */
