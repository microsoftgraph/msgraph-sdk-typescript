/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createPresenceFromDiscriminatorValue, serializePresence, type Presence } from '../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../models/oDataErrors/';
import { ClearPresenceRequestBuilderRequestsMetadata, ClearPresenceRequestBuilderUriTemplate, type ClearPresenceRequestBuilder } from './clearPresence/';
import { ClearUserPreferredPresenceRequestBuilderRequestsMetadata, ClearUserPreferredPresenceRequestBuilderUriTemplate, type ClearUserPreferredPresenceRequestBuilder } from './clearUserPreferredPresence/';
import { SetPresenceRequestBuilderRequestsMetadata, SetPresenceRequestBuilderUriTemplate, type SetPresenceRequestBuilder } from './setPresence/';
import { SetStatusMessageRequestBuilderRequestsMetadata, SetStatusMessageRequestBuilderUriTemplate, type SetStatusMessageRequestBuilder } from './setStatusMessage/';
import { SetUserPreferredPresenceRequestBuilderRequestsMetadata, SetUserPreferredPresenceRequestBuilderUriTemplate, type SetUserPreferredPresenceRequestBuilder } from './setUserPreferredPresence/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the presence property of the microsoft.graph.user entity.
 */
export interface PresenceRequestBuilder extends BaseRequestBuilder<PresenceRequestBuilder> {
    /**
     * Provides operations to call the clearPresence method.
     */
    get clearPresence(): ClearPresenceRequestBuilder;
    /**
     * Provides operations to call the clearUserPreferredPresence method.
     */
    get clearUserPreferredPresence(): ClearUserPreferredPresenceRequestBuilder;
    /**
     * Provides operations to call the setPresence method.
     */
    get setPresence(): SetPresenceRequestBuilder;
    /**
     * Provides operations to call the setStatusMessage method.
     */
    get setStatusMessage(): SetStatusMessageRequestBuilder;
    /**
     * Provides operations to call the setUserPreferredPresence method.
     */
    get setUserPreferredPresence(): SetUserPreferredPresenceRequestBuilder;
    /**
     * Delete navigation property presence for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Set a presence status message for a user. An optional expiration date and time can be supplied.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Presence
     * @see {@link https://learn.microsoft.com/graph/api/presence-setstatusmessage?view=graph-rest-1.0|Find more info here}
     */
     get(requestConfiguration?: RequestConfiguration<PresenceRequestBuilderGetQueryParameters> | undefined) : Promise<Presence | undefined>;
    /**
     * Update the navigation property presence in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Presence
     */
     patch(body: Presence, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Presence | undefined>;
    /**
     * Delete navigation property presence for users
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Set a presence status message for a user. An optional expiration date and time can be supplied.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PresenceRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property presence in users
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: Presence, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Set a presence status message for a user. An optional expiration date and time can be supplied.
 */
export interface PresenceRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const PresenceRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PresenceRequestBuilderNavigationMetadata: Record<Exclude<keyof PresenceRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    clearPresence: {
        uriTemplate: ClearPresenceRequestBuilderUriTemplate,
        requestsMetadata: ClearPresenceRequestBuilderRequestsMetadata,
    },
    clearUserPreferredPresence: {
        uriTemplate: ClearUserPreferredPresenceRequestBuilderUriTemplate,
        requestsMetadata: ClearUserPreferredPresenceRequestBuilderRequestsMetadata,
    },
    setPresence: {
        uriTemplate: SetPresenceRequestBuilderUriTemplate,
        requestsMetadata: SetPresenceRequestBuilderRequestsMetadata,
    },
    setStatusMessage: {
        uriTemplate: SetStatusMessageRequestBuilderUriTemplate,
        requestsMetadata: SetStatusMessageRequestBuilderRequestsMetadata,
    },
    setUserPreferredPresence: {
        uriTemplate: SetUserPreferredPresenceRequestBuilderUriTemplate,
        requestsMetadata: SetUserPreferredPresenceRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PresenceRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPresenceFromDiscriminatorValue,
        queryParametersMapper: PresenceRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createPresenceFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePresence,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const PresenceRequestBuilderUriTemplate = "{+baseurl}/users/{user%2Did}/presence{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
