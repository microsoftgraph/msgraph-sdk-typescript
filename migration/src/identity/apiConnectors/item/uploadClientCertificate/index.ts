/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createIdentityApiConnectorFromDiscriminatorValue, serializeIdentityApiConnector, type IdentityApiConnector } from '../../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../models/oDataErrors/';
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a uploadClientCertificatePostRequestBody
 */
export function createUploadClientCertificatePostRequestBodyFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoUploadClientCertificatePostRequestBody;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoUploadClientCertificatePostRequestBody(uploadClientCertificatePostRequestBody: UploadClientCertificatePostRequestBody | undefined = {} as UploadClientCertificatePostRequestBody) : Record<string, (node: ParseNode) => void> {
    return {
        "password": n => { uploadClientCertificatePostRequestBody.password = n.getStringValue(); },
        "pkcs12Value": n => { uploadClientCertificatePostRequestBody.pkcs12Value = n.getStringValue(); },
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeUploadClientCertificatePostRequestBody(writer: SerializationWriter, uploadClientCertificatePostRequestBody: UploadClientCertificatePostRequestBody | undefined = {} as UploadClientCertificatePostRequestBody) : void {
    writer.writeStringValue("password", uploadClientCertificatePostRequestBody.password);
    writer.writeStringValue("pkcs12Value", uploadClientCertificatePostRequestBody.pkcs12Value);
    writer.writeAdditionalData(uploadClientCertificatePostRequestBody.additionalData);
}
export interface UploadClientCertificatePostRequestBody extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The password property
     */
    password?: string;
    /**
     * The pkcs12Value property
     */
    pkcs12Value?: string;
}
/**
 * Provides operations to call the uploadClientCertificate method.
 */
export interface UploadClientCertificateRequestBuilder extends BaseRequestBuilder<UploadClientCertificateRequestBuilder> {
    /**
     * Upload a PKCS 12 format key (.pfx) to an API connector's authentication configuration. The input is a base-64 encoded value of the PKCS 12 certificate contents. This method returns an apiConnector.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of IdentityApiConnector
     * @see {@link https://learn.microsoft.com/graph/api/identityapiconnector-uploadclientcertificate?view=graph-rest-1.0|Find more info here}
     */
     post(body: UploadClientCertificatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<IdentityApiConnector | undefined>;
    /**
     * Upload a PKCS 12 format key (.pfx) to an API connector's authentication configuration. The input is a base-64 encoded value of the PKCS 12 certificate contents. This method returns an apiConnector.
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: UploadClientCertificatePostRequestBody, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Metadata for all the requests in the request builder.
 */
export const UploadClientCertificateRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createIdentityApiConnectorFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUploadClientCertificatePostRequestBody,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const UploadClientCertificateRequestBuilderUriTemplate = "{+baseurl}/identity/apiConnectors/{identityApiConnector%2Did}/uploadClientCertificate";
/* tslint:enable */
/* eslint-enable */
