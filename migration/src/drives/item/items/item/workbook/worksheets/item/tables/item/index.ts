/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createWorkbookTableFromDiscriminatorValue, serializeWorkbookTable, type WorkbookTable } from '../../../../../../../../../models/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../../../../../../../../../models/oDataErrors/';
import { ClearFiltersRequestBuilderRequestsMetadata, ClearFiltersRequestBuilderUriTemplate, type ClearFiltersRequestBuilder } from './clearFilters/';
import { ColumnsRequestBuilderNavigationMetadata, ColumnsRequestBuilderRequestsMetadata, ColumnsRequestBuilderUriTemplate, type ColumnsRequestBuilder } from './columns/';
import { ConvertToRangeRequestBuilderRequestsMetadata, ConvertToRangeRequestBuilderUriTemplate, type ConvertToRangeRequestBuilder } from './convertToRange/';
import { DataBodyRangeRequestBuilderRequestsMetadata, DataBodyRangeRequestBuilderUriTemplate, type DataBodyRangeRequestBuilder } from './dataBodyRange/';
import { HeaderRowRangeRequestBuilderRequestsMetadata, HeaderRowRangeRequestBuilderUriTemplate, type HeaderRowRangeRequestBuilder } from './headerRowRange/';
import { RangeRequestBuilderRequestsMetadata, RangeRequestBuilderUriTemplate, type RangeRequestBuilder } from './range/';
import { ReapplyFiltersRequestBuilderRequestsMetadata, ReapplyFiltersRequestBuilderUriTemplate, type ReapplyFiltersRequestBuilder } from './reapplyFilters/';
import { RowsRequestBuilderNavigationMetadata, RowsRequestBuilderRequestsMetadata, RowsRequestBuilderUriTemplate, type RowsRequestBuilder } from './rows/';
import { SortRequestBuilderNavigationMetadata, SortRequestBuilderRequestsMetadata, SortRequestBuilderUriTemplate, type SortRequestBuilder } from './sort/';
import { TotalRowRangeRequestBuilderRequestsMetadata, TotalRowRangeRequestBuilderUriTemplate, type TotalRowRangeRequestBuilder } from './totalRowRange/';
import { type WorksheetRequestBuilder, WorksheetRequestBuilderRequestsMetadata, WorksheetRequestBuilderUriTemplate } from './worksheet/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the tables property of the microsoft.graph.workbookWorksheet entity.
 */
export interface WorkbookTableItemRequestBuilder extends BaseRequestBuilder<WorkbookTableItemRequestBuilder> {
    /**
     * Provides operations to call the clearFilters method.
     */
    get clearFilters(): ClearFiltersRequestBuilder;
    /**
     * Provides operations to manage the columns property of the microsoft.graph.workbookTable entity.
     */
    get columns(): ColumnsRequestBuilder;
    /**
     * Provides operations to call the convertToRange method.
     */
    get convertToRange(): ConvertToRangeRequestBuilder;
    /**
     * Provides operations to call the dataBodyRange method.
     */
    get dataBodyRange(): DataBodyRangeRequestBuilder;
    /**
     * Provides operations to call the headerRowRange method.
     */
    get headerRowRange(): HeaderRowRangeRequestBuilder;
    /**
     * Provides operations to call the range method.
     */
    get range(): RangeRequestBuilder;
    /**
     * Provides operations to call the reapplyFilters method.
     */
    get reapplyFilters(): ReapplyFiltersRequestBuilder;
    /**
     * Provides operations to manage the rows property of the microsoft.graph.workbookTable entity.
     */
    get rows(): RowsRequestBuilder;
    /**
     * Provides operations to manage the sort property of the microsoft.graph.workbookTable entity.
     */
    get sort(): SortRequestBuilder;
    /**
     * Provides operations to call the totalRowRange method.
     */
    get totalRowRange(): TotalRowRangeRequestBuilder;
    /**
     * Provides operations to manage the worksheet property of the microsoft.graph.workbookTable entity.
     */
    get worksheet(): WorksheetRequestBuilder;
    /**
     * Delete navigation property tables for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * Collection of tables that are part of the worksheet. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WorkbookTable
     */
     get(requestConfiguration?: RequestConfiguration<WorkbookTableItemRequestBuilderGetQueryParameters> | undefined) : Promise<WorkbookTable | undefined>;
    /**
     * Update the navigation property tables in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of WorkbookTable
     */
     patch(body: WorkbookTable, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<WorkbookTable | undefined>;
    /**
     * Delete navigation property tables for drives
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * Collection of tables that are part of the worksheet. Read-only.
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<WorkbookTableItemRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update the navigation property tables in drives
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: WorkbookTable, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Collection of tables that are part of the worksheet. Read-only.
 */
export interface WorkbookTableItemRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const WorkbookTableItemRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const WorkbookTableItemRequestBuilderNavigationMetadata: Record<Exclude<keyof WorkbookTableItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    clearFilters: {
        uriTemplate: ClearFiltersRequestBuilderUriTemplate,
        requestsMetadata: ClearFiltersRequestBuilderRequestsMetadata,
    },
    columns: {
        uriTemplate: ColumnsRequestBuilderUriTemplate,
        requestsMetadata: ColumnsRequestBuilderRequestsMetadata,
        navigationMetadata: ColumnsRequestBuilderNavigationMetadata,
    },
    convertToRange: {
        uriTemplate: ConvertToRangeRequestBuilderUriTemplate,
        requestsMetadata: ConvertToRangeRequestBuilderRequestsMetadata,
    },
    dataBodyRange: {
        uriTemplate: DataBodyRangeRequestBuilderUriTemplate,
        requestsMetadata: DataBodyRangeRequestBuilderRequestsMetadata,
    },
    headerRowRange: {
        uriTemplate: HeaderRowRangeRequestBuilderUriTemplate,
        requestsMetadata: HeaderRowRangeRequestBuilderRequestsMetadata,
    },
    range: {
        uriTemplate: RangeRequestBuilderUriTemplate,
        requestsMetadata: RangeRequestBuilderRequestsMetadata,
    },
    reapplyFilters: {
        uriTemplate: ReapplyFiltersRequestBuilderUriTemplate,
        requestsMetadata: ReapplyFiltersRequestBuilderRequestsMetadata,
    },
    rows: {
        uriTemplate: RowsRequestBuilderUriTemplate,
        requestsMetadata: RowsRequestBuilderRequestsMetadata,
        navigationMetadata: RowsRequestBuilderNavigationMetadata,
    },
    sort: {
        uriTemplate: SortRequestBuilderUriTemplate,
        requestsMetadata: SortRequestBuilderRequestsMetadata,
        navigationMetadata: SortRequestBuilderNavigationMetadata,
    },
    totalRowRange: {
        uriTemplate: TotalRowRangeRequestBuilderUriTemplate,
        requestsMetadata: TotalRowRangeRequestBuilderRequestsMetadata,
    },
    worksheet: {
        uriTemplate: WorksheetRequestBuilderUriTemplate,
        requestsMetadata: WorksheetRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const WorkbookTableItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContentAsync",
    },
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createWorkbookTableFromDiscriminatorValue,
        queryParametersMapper: WorkbookTableItemRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createWorkbookTableFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeWorkbookTable,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const WorkbookTableItemRequestBuilderUriTemplate = "{+baseurl}/drives/{drive%2Did}/items/{driveItem%2Did}/workbook/worksheets/{workbookWorksheet%2Did}/tables/{workbookTable%2Did}{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
