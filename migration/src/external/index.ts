/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createExternalFromDiscriminatorValue, serializeExternal, type External } from '../models/externalConnectors/';
import { createODataErrorFromDiscriminatorValue, type ODataError } from '../models/oDataErrors/';
import { ConnectionsRequestBuilderNavigationMetadata, ConnectionsRequestBuilderRequestsMetadata, ConnectionsRequestBuilderUriTemplate, type ConnectionsRequestBuilder } from './connections/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Provides operations to manage the external singleton.
 */
export interface ExternalRequestBuilder extends BaseRequestBuilder<ExternalRequestBuilder> {
    /**
     * Provides operations to manage the connections property of the microsoft.graph.externalConnectors.external entity.
     */
    get connections(): ConnectionsRequestBuilder;
    /**
     * Get external
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of External
     */
     get(requestConfiguration?: RequestConfiguration<ExternalRequestBuilderGetQueryParameters> | undefined) : Promise<External | undefined>;
    /**
     * Update external
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of External
     */
     patch(body: External, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<External | undefined>;
    /**
     * Get external
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<ExternalRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * Update external
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPatchRequestInformation(body: External, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Get external
 */
export interface ExternalRequestBuilderGetQueryParameters {
    /**
     * Expand related entities
     */
    expand?: string[];
    /**
     * Select properties to be returned
     */
    select?: string[];
}
/**
 * Mapper for query parameters from symbol name to serialization name represented as a constant.
 */
const ExternalRequestBuilderGetQueryParametersMapper: Record<string, string> = {
    "expand": "%24expand",
    "select": "%24select",
};
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const ExternalRequestBuilderNavigationMetadata: Record<Exclude<keyof ExternalRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    connections: {
        uriTemplate: ConnectionsRequestBuilderUriTemplate,
        requestsMetadata: ConnectionsRequestBuilderRequestsMetadata,
        navigationMetadata: ConnectionsRequestBuilderNavigationMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const ExternalRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createExternalFromDiscriminatorValue,
        queryParametersMapper: ExternalRequestBuilderGetQueryParametersMapper,
    },
    patch: {
        responseBodyContentType: "application/json",
        errorMappings: {
            _4XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
            _5XX: createODataErrorFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createExternalFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeExternal,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const ExternalRequestBuilderUriTemplate = "{+baseurl}/external{?%24select,%24expand}";
/* tslint:enable */
/* eslint-enable */
