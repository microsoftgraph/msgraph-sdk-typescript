"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordCredential = void 0;
var PasswordCredential = /** @class */ (function () {
    /**
     * Instantiates a new passwordCredential and sets the default values.
     */
    function PasswordCredential() {
        this._additionalData = new Map();
    }
    ;
    Object.defineProperty(PasswordCredential.prototype, "additionalData", {
        /**
         * Gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
         * @returns a Map<string, unknown>
         */
        get: function () {
            return this._additionalData;
        },
        /**
         * Sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
         * @param value Value to set for the AdditionalData property.
         */
        set: function (value) {
            this._additionalData = value;
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(PasswordCredential.prototype, "customKeyIdentifier", {
        /**
         * Gets the customKeyIdentifier property value. Do not use.
         * @returns a binary
         */
        get: function () {
            return this._customKeyIdentifier;
        },
        /**
         * Sets the customKeyIdentifier property value. Do not use.
         * @param value Value to set for the customKeyIdentifier property.
         */
        set: function (value) {
            this._customKeyIdentifier = value;
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(PasswordCredential.prototype, "displayName", {
        /**
         * Gets the displayName property value. Friendly name for the password. Optional.
         * @returns a string
         */
        get: function () {
            return this._displayName;
        },
        /**
         * Sets the displayName property value. Friendly name for the password. Optional.
         * @param value Value to set for the displayName property.
         */
        set: function (value) {
            this._displayName = value;
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(PasswordCredential.prototype, "endDateTime", {
        /**
         * Gets the endDateTime property value. The date and time at which the password expires represented using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
         * @returns a Date
         */
        get: function () {
            return this._endDateTime;
        },
        /**
         * Sets the endDateTime property value. The date and time at which the password expires represented using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
         * @param value Value to set for the endDateTime property.
         */
        set: function (value) {
            this._endDateTime = value;
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(PasswordCredential.prototype, "hint", {
        /**
         * Gets the hint property value. Contains the first three characters of the password. Read-only.
         * @returns a string
         */
        get: function () {
            return this._hint;
        },
        /**
         * Sets the hint property value. Contains the first three characters of the password. Read-only.
         * @param value Value to set for the hint property.
         */
        set: function (value) {
            this._hint = value;
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(PasswordCredential.prototype, "keyId", {
        /**
         * Gets the keyId property value. The unique identifier for the password.
         * @returns a string
         */
        get: function () {
            return this._keyId;
        },
        /**
         * Sets the keyId property value. The unique identifier for the password.
         * @param value Value to set for the keyId property.
         */
        set: function (value) {
            this._keyId = value;
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(PasswordCredential.prototype, "secretText", {
        /**
         * Gets the secretText property value. Read-only; Contains the strong passwords generated by Azure AD that are 16-64 characters in length. The generated password value is only returned during the initial POST request to addPassword. There is no way to retrieve this password in the future.
         * @returns a string
         */
        get: function () {
            return this._secretText;
        },
        /**
         * Sets the secretText property value. Read-only; Contains the strong passwords generated by Azure AD that are 16-64 characters in length. The generated password value is only returned during the initial POST request to addPassword. There is no way to retrieve this password in the future.
         * @param value Value to set for the secretText property.
         */
        set: function (value) {
            this._secretText = value;
        },
        enumerable: false,
        configurable: true
    });
    ;
    Object.defineProperty(PasswordCredential.prototype, "startDateTime", {
        /**
         * Gets the startDateTime property value. The date and time at which the password becomes valid. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
         * @returns a Date
         */
        get: function () {
            return this._startDateTime;
        },
        /**
         * Sets the startDateTime property value. The date and time at which the password becomes valid. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Optional.
         * @param value Value to set for the startDateTime property.
         */
        set: function (value) {
            this._startDateTime = value;
        },
        enumerable: false,
        configurable: true
    });
    ;
    /**
     * The deserialization information for the current model
     * @returns a Map<string, (item: T, node: ParseNode) => void>
     */
    PasswordCredential.prototype.getFieldDeserializers = function () {
        return new Map([
            ["customKeyIdentifier", function (o, n) { o.customKeyIdentifier = n.getObjectValue(Binary); }],
            ["displayName", function (o, n) { o.displayName = n.getStringValue(); }],
            ["endDateTime", function (o, n) { o.endDateTime = n.getDateValue(); }],
            ["hint", function (o, n) { o.hint = n.getStringValue(); }],
            ["keyId", function (o, n) { o.keyId = n.getStringValue(); }],
            ["secretText", function (o, n) { o.secretText = n.getStringValue(); }],
            ["startDateTime", function (o, n) { o.startDateTime = n.getDateValue(); }],
        ]);
    };
    ;
    /**
     * Serializes information the current object
     * @param writer Serialization writer to use to serialize this model
     */
    PasswordCredential.prototype.serialize = function (writer) {
        if (!writer)
            throw new Error("writer cannot be undefined");
        writer.writeObjectValue("customKeyIdentifier", this.customKeyIdentifier);
        writer.writeStringValue("displayName", this.displayName);
        writer.writeDateValue("endDateTime", this.endDateTime);
        writer.writeStringValue("hint", this.hint);
        writer.writeStringValue("keyId", this.keyId);
        writer.writeStringValue("secretText", this.secretText);
        writer.writeDateValue("startDateTime", this.startDateTime);
        writer.writeAdditionalData(this.additionalData);
    };
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    ;
    return PasswordCredential;
}());
exports.PasswordCredential = PasswordCredential;
